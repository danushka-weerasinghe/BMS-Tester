
BMS Tester - Cell Emulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c338  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001594  0800c4e4  0800c4e4  0000d4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da78  0800da78  0000fa04  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800da78  0800da78  0000ea78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da80  0800da80  0000fa04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da80  0800da80  0000ea80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800da84  0800da84  0000ea84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000a04  20000000  0800da88  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000fa04  2**0
                  CONTENTS
 10 .bss          00001378  20000a04  20000a04  0000fa04  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001d7c  20001d7c  0000fa04  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000fa04  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005eeaf  00000000  00000000  0000fa34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000069af  00000000  00000000  0006e8e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00004558  00000000  00000000  00075298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000034b3  00000000  00000000  000797f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a5ab  00000000  00000000  0007cca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000343fb  00000000  00000000  000a724e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00100ef8  00000000  00000000  000db649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001dc541  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0001313c  00000000  00000000  001dc584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000043  00000000  00000000  001ef6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000a04 	.word	0x20000a04
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800c4cc 	.word	0x0800c4cc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000a08 	.word	0x20000a08
 80001e8:	0800c4cc 	.word	0x0800c4cc

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	@ 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__aeabi_d2iz>:
 8000988:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800098c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000990:	d215      	bcs.n	80009be <__aeabi_d2iz+0x36>
 8000992:	d511      	bpl.n	80009b8 <__aeabi_d2iz+0x30>
 8000994:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000998:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800099c:	d912      	bls.n	80009c4 <__aeabi_d2iz+0x3c>
 800099e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009a6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009aa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009ae:	fa23 f002 	lsr.w	r0, r3, r2
 80009b2:	bf18      	it	ne
 80009b4:	4240      	negne	r0, r0
 80009b6:	4770      	bx	lr
 80009b8:	f04f 0000 	mov.w	r0, #0
 80009bc:	4770      	bx	lr
 80009be:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009c2:	d105      	bne.n	80009d0 <__aeabi_d2iz+0x48>
 80009c4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009c8:	bf08      	it	eq
 80009ca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009ce:	4770      	bx	lr
 80009d0:	f04f 0000 	mov.w	r0, #0
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop

080009d8 <__aeabi_d2f>:
 80009d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009dc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009e0:	bf24      	itt	cs
 80009e2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009e6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009ea:	d90d      	bls.n	8000a08 <__aeabi_d2f+0x30>
 80009ec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009f0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009f4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009f8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009fc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a00:	bf08      	it	eq
 8000a02:	f020 0001 	biceq.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a0c:	d121      	bne.n	8000a52 <__aeabi_d2f+0x7a>
 8000a0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a12:	bfbc      	itt	lt
 8000a14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a18:	4770      	bxlt	lr
 8000a1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a22:	f1c2 0218 	rsb	r2, r2, #24
 8000a26:	f1c2 0c20 	rsb	ip, r2, #32
 8000a2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a32:	bf18      	it	ne
 8000a34:	f040 0001 	orrne.w	r0, r0, #1
 8000a38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a44:	ea40 000c 	orr.w	r0, r0, ip
 8000a48:	fa23 f302 	lsr.w	r3, r3, r2
 8000a4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a50:	e7cc      	b.n	80009ec <__aeabi_d2f+0x14>
 8000a52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a56:	d107      	bne.n	8000a68 <__aeabi_d2f+0x90>
 8000a58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a5c:	bf1e      	ittt	ne
 8000a5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a66:	4770      	bxne	lr
 8000a68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_frsub>:
 8000a78:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a7c:	e002      	b.n	8000a84 <__addsf3>
 8000a7e:	bf00      	nop

08000a80 <__aeabi_fsub>:
 8000a80:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a84 <__addsf3>:
 8000a84:	0042      	lsls	r2, r0, #1
 8000a86:	bf1f      	itttt	ne
 8000a88:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a8c:	ea92 0f03 	teqne	r2, r3
 8000a90:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a94:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a98:	d06a      	beq.n	8000b70 <__addsf3+0xec>
 8000a9a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a9e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aa2:	bfc1      	itttt	gt
 8000aa4:	18d2      	addgt	r2, r2, r3
 8000aa6:	4041      	eorgt	r1, r0
 8000aa8:	4048      	eorgt	r0, r1
 8000aaa:	4041      	eorgt	r1, r0
 8000aac:	bfb8      	it	lt
 8000aae:	425b      	neglt	r3, r3
 8000ab0:	2b19      	cmp	r3, #25
 8000ab2:	bf88      	it	hi
 8000ab4:	4770      	bxhi	lr
 8000ab6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000abe:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ac2:	bf18      	it	ne
 8000ac4:	4240      	negne	r0, r0
 8000ac6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aca:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ace:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4249      	negne	r1, r1
 8000ad6:	ea92 0f03 	teq	r2, r3
 8000ada:	d03f      	beq.n	8000b5c <__addsf3+0xd8>
 8000adc:	f1a2 0201 	sub.w	r2, r2, #1
 8000ae0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ae4:	eb10 000c 	adds.w	r0, r0, ip
 8000ae8:	f1c3 0320 	rsb	r3, r3, #32
 8000aec:	fa01 f103 	lsl.w	r1, r1, r3
 8000af0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000af4:	d502      	bpl.n	8000afc <__addsf3+0x78>
 8000af6:	4249      	negs	r1, r1
 8000af8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000afc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b00:	d313      	bcc.n	8000b2a <__addsf3+0xa6>
 8000b02:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b06:	d306      	bcc.n	8000b16 <__addsf3+0x92>
 8000b08:	0840      	lsrs	r0, r0, #1
 8000b0a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b0e:	f102 0201 	add.w	r2, r2, #1
 8000b12:	2afe      	cmp	r2, #254	@ 0xfe
 8000b14:	d251      	bcs.n	8000bba <__addsf3+0x136>
 8000b16:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b1a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b1e:	bf08      	it	eq
 8000b20:	f020 0001 	biceq.w	r0, r0, #1
 8000b24:	ea40 0003 	orr.w	r0, r0, r3
 8000b28:	4770      	bx	lr
 8000b2a:	0049      	lsls	r1, r1, #1
 8000b2c:	eb40 0000 	adc.w	r0, r0, r0
 8000b30:	3a01      	subs	r2, #1
 8000b32:	bf28      	it	cs
 8000b34:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b38:	d2ed      	bcs.n	8000b16 <__addsf3+0x92>
 8000b3a:	fab0 fc80 	clz	ip, r0
 8000b3e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b42:	ebb2 020c 	subs.w	r2, r2, ip
 8000b46:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b4a:	bfaa      	itet	ge
 8000b4c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b50:	4252      	neglt	r2, r2
 8000b52:	4318      	orrge	r0, r3
 8000b54:	bfbc      	itt	lt
 8000b56:	40d0      	lsrlt	r0, r2
 8000b58:	4318      	orrlt	r0, r3
 8000b5a:	4770      	bx	lr
 8000b5c:	f092 0f00 	teq	r2, #0
 8000b60:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b64:	bf06      	itte	eq
 8000b66:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b6a:	3201      	addeq	r2, #1
 8000b6c:	3b01      	subne	r3, #1
 8000b6e:	e7b5      	b.n	8000adc <__addsf3+0x58>
 8000b70:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b78:	bf18      	it	ne
 8000b7a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b7e:	d021      	beq.n	8000bc4 <__addsf3+0x140>
 8000b80:	ea92 0f03 	teq	r2, r3
 8000b84:	d004      	beq.n	8000b90 <__addsf3+0x10c>
 8000b86:	f092 0f00 	teq	r2, #0
 8000b8a:	bf08      	it	eq
 8000b8c:	4608      	moveq	r0, r1
 8000b8e:	4770      	bx	lr
 8000b90:	ea90 0f01 	teq	r0, r1
 8000b94:	bf1c      	itt	ne
 8000b96:	2000      	movne	r0, #0
 8000b98:	4770      	bxne	lr
 8000b9a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000b9e:	d104      	bne.n	8000baa <__addsf3+0x126>
 8000ba0:	0040      	lsls	r0, r0, #1
 8000ba2:	bf28      	it	cs
 8000ba4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000ba8:	4770      	bx	lr
 8000baa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bae:	bf3c      	itt	cc
 8000bb0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bb4:	4770      	bxcc	lr
 8000bb6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bba:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bc2:	4770      	bx	lr
 8000bc4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bc8:	bf16      	itet	ne
 8000bca:	4608      	movne	r0, r1
 8000bcc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bd0:	4601      	movne	r1, r0
 8000bd2:	0242      	lsls	r2, r0, #9
 8000bd4:	bf06      	itte	eq
 8000bd6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bda:	ea90 0f01 	teqeq	r0, r1
 8000bde:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000be2:	4770      	bx	lr

08000be4 <__aeabi_ui2f>:
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	e004      	b.n	8000bf4 <__aeabi_i2f+0x8>
 8000bea:	bf00      	nop

08000bec <__aeabi_i2f>:
 8000bec:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000bf0:	bf48      	it	mi
 8000bf2:	4240      	negmi	r0, r0
 8000bf4:	ea5f 0c00 	movs.w	ip, r0
 8000bf8:	bf08      	it	eq
 8000bfa:	4770      	bxeq	lr
 8000bfc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c00:	4601      	mov	r1, r0
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	e01c      	b.n	8000c42 <__aeabi_l2f+0x2a>

08000c08 <__aeabi_ul2f>:
 8000c08:	ea50 0201 	orrs.w	r2, r0, r1
 8000c0c:	bf08      	it	eq
 8000c0e:	4770      	bxeq	lr
 8000c10:	f04f 0300 	mov.w	r3, #0
 8000c14:	e00a      	b.n	8000c2c <__aeabi_l2f+0x14>
 8000c16:	bf00      	nop

08000c18 <__aeabi_l2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c24:	d502      	bpl.n	8000c2c <__aeabi_l2f+0x14>
 8000c26:	4240      	negs	r0, r0
 8000c28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c2c:	ea5f 0c01 	movs.w	ip, r1
 8000c30:	bf02      	ittt	eq
 8000c32:	4684      	moveq	ip, r0
 8000c34:	4601      	moveq	r1, r0
 8000c36:	2000      	moveq	r0, #0
 8000c38:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c3c:	bf08      	it	eq
 8000c3e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c42:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c46:	fabc f28c 	clz	r2, ip
 8000c4a:	3a08      	subs	r2, #8
 8000c4c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c50:	db10      	blt.n	8000c74 <__aeabi_l2f+0x5c>
 8000c52:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c56:	4463      	add	r3, ip
 8000c58:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5c:	f1c2 0220 	rsb	r2, r2, #32
 8000c60:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c64:	fa20 f202 	lsr.w	r2, r0, r2
 8000c68:	eb43 0002 	adc.w	r0, r3, r2
 8000c6c:	bf08      	it	eq
 8000c6e:	f020 0001 	biceq.w	r0, r0, #1
 8000c72:	4770      	bx	lr
 8000c74:	f102 0220 	add.w	r2, r2, #32
 8000c78:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7c:	f1c2 0220 	rsb	r2, r2, #32
 8000c80:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c84:	fa21 f202 	lsr.w	r2, r1, r2
 8000c88:	eb43 0002 	adc.w	r0, r3, r2
 8000c8c:	bf08      	it	eq
 8000c8e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_uldivmod>:
 8000c94:	b953      	cbnz	r3, 8000cac <__aeabi_uldivmod+0x18>
 8000c96:	b94a      	cbnz	r2, 8000cac <__aeabi_uldivmod+0x18>
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	bf08      	it	eq
 8000c9c:	2800      	cmpeq	r0, #0
 8000c9e:	bf1c      	itt	ne
 8000ca0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca8:	f000 b988 	b.w	8000fbc <__aeabi_idiv0>
 8000cac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb4:	f000 f806 	bl	8000cc4 <__udivmoddi4>
 8000cb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc0:	b004      	add	sp, #16
 8000cc2:	4770      	bx	lr

08000cc4 <__udivmoddi4>:
 8000cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cc8:	9d08      	ldr	r5, [sp, #32]
 8000cca:	468e      	mov	lr, r1
 8000ccc:	4604      	mov	r4, r0
 8000cce:	4688      	mov	r8, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14a      	bne.n	8000d6a <__udivmoddi4+0xa6>
 8000cd4:	428a      	cmp	r2, r1
 8000cd6:	4617      	mov	r7, r2
 8000cd8:	d962      	bls.n	8000da0 <__udivmoddi4+0xdc>
 8000cda:	fab2 f682 	clz	r6, r2
 8000cde:	b14e      	cbz	r6, 8000cf4 <__udivmoddi4+0x30>
 8000ce0:	f1c6 0320 	rsb	r3, r6, #32
 8000ce4:	fa01 f806 	lsl.w	r8, r1, r6
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	40b7      	lsls	r7, r6
 8000cee:	ea43 0808 	orr.w	r8, r3, r8
 8000cf2:	40b4      	lsls	r4, r6
 8000cf4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf8:	fa1f fc87 	uxth.w	ip, r7
 8000cfc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d00:	0c23      	lsrs	r3, r4, #16
 8000d02:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x62>
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d18:	f080 80ea 	bcs.w	8000ef0 <__udivmoddi4+0x22c>
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	f240 80e7 	bls.w	8000ef0 <__udivmoddi4+0x22c>
 8000d22:	3902      	subs	r1, #2
 8000d24:	443b      	add	r3, r7
 8000d26:	1a9a      	subs	r2, r3, r2
 8000d28:	b2a3      	uxth	r3, r4
 8000d2a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d2e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d36:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3a:	459c      	cmp	ip, r3
 8000d3c:	d909      	bls.n	8000d52 <__udivmoddi4+0x8e>
 8000d3e:	18fb      	adds	r3, r7, r3
 8000d40:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d44:	f080 80d6 	bcs.w	8000ef4 <__udivmoddi4+0x230>
 8000d48:	459c      	cmp	ip, r3
 8000d4a:	f240 80d3 	bls.w	8000ef4 <__udivmoddi4+0x230>
 8000d4e:	443b      	add	r3, r7
 8000d50:	3802      	subs	r0, #2
 8000d52:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d56:	eba3 030c 	sub.w	r3, r3, ip
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	b11d      	cbz	r5, 8000d66 <__udivmoddi4+0xa2>
 8000d5e:	40f3      	lsrs	r3, r6
 8000d60:	2200      	movs	r2, #0
 8000d62:	e9c5 3200 	strd	r3, r2, [r5]
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	d905      	bls.n	8000d7a <__udivmoddi4+0xb6>
 8000d6e:	b10d      	cbz	r5, 8000d74 <__udivmoddi4+0xb0>
 8000d70:	e9c5 0100 	strd	r0, r1, [r5]
 8000d74:	2100      	movs	r1, #0
 8000d76:	4608      	mov	r0, r1
 8000d78:	e7f5      	b.n	8000d66 <__udivmoddi4+0xa2>
 8000d7a:	fab3 f183 	clz	r1, r3
 8000d7e:	2900      	cmp	r1, #0
 8000d80:	d146      	bne.n	8000e10 <__udivmoddi4+0x14c>
 8000d82:	4573      	cmp	r3, lr
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xc8>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 8105 	bhi.w	8000f96 <__udivmoddi4+0x2d2>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	4690      	mov	r8, r2
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e5      	beq.n	8000d66 <__udivmoddi4+0xa2>
 8000d9a:	e9c5 4800 	strd	r4, r8, [r5]
 8000d9e:	e7e2      	b.n	8000d66 <__udivmoddi4+0xa2>
 8000da0:	2a00      	cmp	r2, #0
 8000da2:	f000 8090 	beq.w	8000ec6 <__udivmoddi4+0x202>
 8000da6:	fab2 f682 	clz	r6, r2
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	f040 80a4 	bne.w	8000ef8 <__udivmoddi4+0x234>
 8000db0:	1a8a      	subs	r2, r1, r2
 8000db2:	0c03      	lsrs	r3, r0, #16
 8000db4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db8:	b280      	uxth	r0, r0
 8000dba:	b2bc      	uxth	r4, r7
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000dc2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dca:	fb04 f20c 	mul.w	r2, r4, ip
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d907      	bls.n	8000de2 <__udivmoddi4+0x11e>
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dd8:	d202      	bcs.n	8000de0 <__udivmoddi4+0x11c>
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	f200 80e0 	bhi.w	8000fa0 <__udivmoddi4+0x2dc>
 8000de0:	46c4      	mov	ip, r8
 8000de2:	1a9b      	subs	r3, r3, r2
 8000de4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000de8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dec:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000df0:	fb02 f404 	mul.w	r4, r2, r4
 8000df4:	429c      	cmp	r4, r3
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0x144>
 8000df8:	18fb      	adds	r3, r7, r3
 8000dfa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0x142>
 8000e00:	429c      	cmp	r4, r3
 8000e02:	f200 80ca 	bhi.w	8000f9a <__udivmoddi4+0x2d6>
 8000e06:	4602      	mov	r2, r0
 8000e08:	1b1b      	subs	r3, r3, r4
 8000e0a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e0e:	e7a5      	b.n	8000d5c <__udivmoddi4+0x98>
 8000e10:	f1c1 0620 	rsb	r6, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 f706 	lsr.w	r7, r2, r6
 8000e1a:	431f      	orrs	r7, r3
 8000e1c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e20:	fa20 f306 	lsr.w	r3, r0, r6
 8000e24:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e28:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e32:	fa1f fc87 	uxth.w	ip, r7
 8000e36:	fbbe f0f9 	udiv	r0, lr, r9
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e40:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e44:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e48:	45a6      	cmp	lr, r4
 8000e4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x1a0>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e56:	f080 809c 	bcs.w	8000f92 <__udivmoddi4+0x2ce>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	f240 8099 	bls.w	8000f92 <__udivmoddi4+0x2ce>
 8000e60:	3802      	subs	r0, #2
 8000e62:	443c      	add	r4, r7
 8000e64:	eba4 040e 	sub.w	r4, r4, lr
 8000e68:	fa1f fe83 	uxth.w	lr, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e78:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e7c:	45a4      	cmp	ip, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1ce>
 8000e80:	193c      	adds	r4, r7, r4
 8000e82:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e86:	f080 8082 	bcs.w	8000f8e <__udivmoddi4+0x2ca>
 8000e8a:	45a4      	cmp	ip, r4
 8000e8c:	d97f      	bls.n	8000f8e <__udivmoddi4+0x2ca>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	443c      	add	r4, r7
 8000e92:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e96:	eba4 040c 	sub.w	r4, r4, ip
 8000e9a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e9e:	4564      	cmp	r4, ip
 8000ea0:	4673      	mov	r3, lr
 8000ea2:	46e1      	mov	r9, ip
 8000ea4:	d362      	bcc.n	8000f6c <__udivmoddi4+0x2a8>
 8000ea6:	d05f      	beq.n	8000f68 <__udivmoddi4+0x2a4>
 8000ea8:	b15d      	cbz	r5, 8000ec2 <__udivmoddi4+0x1fe>
 8000eaa:	ebb8 0203 	subs.w	r2, r8, r3
 8000eae:	eb64 0409 	sbc.w	r4, r4, r9
 8000eb2:	fa04 f606 	lsl.w	r6, r4, r6
 8000eb6:	fa22 f301 	lsr.w	r3, r2, r1
 8000eba:	431e      	orrs	r6, r3
 8000ebc:	40cc      	lsrs	r4, r1
 8000ebe:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e74f      	b.n	8000d66 <__udivmoddi4+0xa2>
 8000ec6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000eca:	0c01      	lsrs	r1, r0, #16
 8000ecc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ed0:	b280      	uxth	r0, r0
 8000ed2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	4638      	mov	r0, r7
 8000eda:	463c      	mov	r4, r7
 8000edc:	46b8      	mov	r8, r7
 8000ede:	46be      	mov	lr, r7
 8000ee0:	2620      	movs	r6, #32
 8000ee2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ee6:	eba2 0208 	sub.w	r2, r2, r8
 8000eea:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eee:	e766      	b.n	8000dbe <__udivmoddi4+0xfa>
 8000ef0:	4601      	mov	r1, r0
 8000ef2:	e718      	b.n	8000d26 <__udivmoddi4+0x62>
 8000ef4:	4610      	mov	r0, r2
 8000ef6:	e72c      	b.n	8000d52 <__udivmoddi4+0x8e>
 8000ef8:	f1c6 0220 	rsb	r2, r6, #32
 8000efc:	fa2e f302 	lsr.w	r3, lr, r2
 8000f00:	40b7      	lsls	r7, r6
 8000f02:	40b1      	lsls	r1, r6
 8000f04:	fa20 f202 	lsr.w	r2, r0, r2
 8000f08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f12:	b2bc      	uxth	r4, r7
 8000f14:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f18:	0c11      	lsrs	r1, r2, #16
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb08 f904 	mul.w	r9, r8, r4
 8000f22:	40b0      	lsls	r0, r6
 8000f24:	4589      	cmp	r9, r1
 8000f26:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f2a:	b280      	uxth	r0, r0
 8000f2c:	d93e      	bls.n	8000fac <__udivmoddi4+0x2e8>
 8000f2e:	1879      	adds	r1, r7, r1
 8000f30:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f34:	d201      	bcs.n	8000f3a <__udivmoddi4+0x276>
 8000f36:	4589      	cmp	r9, r1
 8000f38:	d81f      	bhi.n	8000f7a <__udivmoddi4+0x2b6>
 8000f3a:	eba1 0109 	sub.w	r1, r1, r9
 8000f3e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f42:	fb09 f804 	mul.w	r8, r9, r4
 8000f46:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4a:	b292      	uxth	r2, r2
 8000f4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d229      	bcs.n	8000fa8 <__udivmoddi4+0x2e4>
 8000f54:	18ba      	adds	r2, r7, r2
 8000f56:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f5a:	d2c4      	bcs.n	8000ee6 <__udivmoddi4+0x222>
 8000f5c:	4542      	cmp	r2, r8
 8000f5e:	d2c2      	bcs.n	8000ee6 <__udivmoddi4+0x222>
 8000f60:	f1a9 0102 	sub.w	r1, r9, #2
 8000f64:	443a      	add	r2, r7
 8000f66:	e7be      	b.n	8000ee6 <__udivmoddi4+0x222>
 8000f68:	45f0      	cmp	r8, lr
 8000f6a:	d29d      	bcs.n	8000ea8 <__udivmoddi4+0x1e4>
 8000f6c:	ebbe 0302 	subs.w	r3, lr, r2
 8000f70:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f74:	3801      	subs	r0, #1
 8000f76:	46e1      	mov	r9, ip
 8000f78:	e796      	b.n	8000ea8 <__udivmoddi4+0x1e4>
 8000f7a:	eba7 0909 	sub.w	r9, r7, r9
 8000f7e:	4449      	add	r1, r9
 8000f80:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f84:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f88:	fb09 f804 	mul.w	r8, r9, r4
 8000f8c:	e7db      	b.n	8000f46 <__udivmoddi4+0x282>
 8000f8e:	4673      	mov	r3, lr
 8000f90:	e77f      	b.n	8000e92 <__udivmoddi4+0x1ce>
 8000f92:	4650      	mov	r0, sl
 8000f94:	e766      	b.n	8000e64 <__udivmoddi4+0x1a0>
 8000f96:	4608      	mov	r0, r1
 8000f98:	e6fd      	b.n	8000d96 <__udivmoddi4+0xd2>
 8000f9a:	443b      	add	r3, r7
 8000f9c:	3a02      	subs	r2, #2
 8000f9e:	e733      	b.n	8000e08 <__udivmoddi4+0x144>
 8000fa0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa4:	443b      	add	r3, r7
 8000fa6:	e71c      	b.n	8000de2 <__udivmoddi4+0x11e>
 8000fa8:	4649      	mov	r1, r9
 8000faa:	e79c      	b.n	8000ee6 <__udivmoddi4+0x222>
 8000fac:	eba1 0109 	sub.w	r1, r1, r9
 8000fb0:	46c4      	mov	ip, r8
 8000fb2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb6:	fb09 f804 	mul.w	r8, r9, r4
 8000fba:	e7c4      	b.n	8000f46 <__udivmoddi4+0x282>

08000fbc <__aeabi_idiv0>:
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <LED_Init>:
};

GPIO_PinState cell_led_states[NUM_CELL_LEDS];

// Initialize all LEDs (set to OFF)
void LED_Init(void) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0

    for (uint8_t i = 0; i < NUM_LEDS; i++) {
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	73fb      	strb	r3, [r7, #15]
 8000fca:	e00f      	b.n	8000fec <LED_Init+0x2c>
        HAL_GPIO_WritePin(leds[i].port, leds[i].pin, GPIO_PIN_RESET);
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	4a33      	ldr	r2, [pc, #204]	@ (800109c <LED_Init+0xdc>)
 8000fd0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	4a31      	ldr	r2, [pc, #196]	@ (800109c <LED_Init+0xdc>)
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	4413      	add	r3, r2
 8000fdc:	889b      	ldrh	r3, [r3, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f007 fa77 	bl	80084d4 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < NUM_LEDS; i++) {
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	73fb      	strb	r3, [r7, #15]
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	2b09      	cmp	r3, #9
 8000ff0:	d9ec      	bls.n	8000fcc <LED_Init+0xc>
    }

    for (uint8_t i = 0; i < NUM_COMM_LEDS; i++) {
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	73bb      	strb	r3, [r7, #14]
 8000ff6:	e00f      	b.n	8001018 <LED_Init+0x58>
        HAL_GPIO_WritePin(comm_leds[i].port, comm_leds[i].pin, GPIO_PIN_RESET);
 8000ff8:	7bbb      	ldrb	r3, [r7, #14]
 8000ffa:	4a29      	ldr	r2, [pc, #164]	@ (80010a0 <LED_Init+0xe0>)
 8000ffc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001000:	7bbb      	ldrb	r3, [r7, #14]
 8001002:	4a27      	ldr	r2, [pc, #156]	@ (80010a0 <LED_Init+0xe0>)
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	4413      	add	r3, r2
 8001008:	889b      	ldrh	r3, [r3, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	4619      	mov	r1, r3
 800100e:	f007 fa61 	bl	80084d4 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < NUM_COMM_LEDS; i++) {
 8001012:	7bbb      	ldrb	r3, [r7, #14]
 8001014:	3301      	adds	r3, #1
 8001016:	73bb      	strb	r3, [r7, #14]
 8001018:	7bbb      	ldrb	r3, [r7, #14]
 800101a:	2b03      	cmp	r3, #3
 800101c:	d9ec      	bls.n	8000ff8 <LED_Init+0x38>
    }

    for (uint8_t i = 0; i < NUM_TEMP_LEDS; i++) {
 800101e:	2300      	movs	r3, #0
 8001020:	737b      	strb	r3, [r7, #13]
 8001022:	e00f      	b.n	8001044 <LED_Init+0x84>
        HAL_GPIO_WritePin(temp_leds[i].port, temp_leds[i].pin, GPIO_PIN_SET); // Active low
 8001024:	7b7b      	ldrb	r3, [r7, #13]
 8001026:	4a1f      	ldr	r2, [pc, #124]	@ (80010a4 <LED_Init+0xe4>)
 8001028:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800102c:	7b7b      	ldrb	r3, [r7, #13]
 800102e:	4a1d      	ldr	r2, [pc, #116]	@ (80010a4 <LED_Init+0xe4>)
 8001030:	00db      	lsls	r3, r3, #3
 8001032:	4413      	add	r3, r2
 8001034:	889b      	ldrh	r3, [r3, #4]
 8001036:	2201      	movs	r2, #1
 8001038:	4619      	mov	r1, r3
 800103a:	f007 fa4b 	bl	80084d4 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < NUM_TEMP_LEDS; i++) {
 800103e:	7b7b      	ldrb	r3, [r7, #13]
 8001040:	3301      	adds	r3, #1
 8001042:	737b      	strb	r3, [r7, #13]
 8001044:	7b7b      	ldrb	r3, [r7, #13]
 8001046:	2b05      	cmp	r3, #5
 8001048:	d9ec      	bls.n	8001024 <LED_Init+0x64>
    }

    // Initialize cell LED states and set hardware LEDs to OFF
    for (uint8_t i = 0; i < NUM_CELL_LEDS; i++) {
 800104a:	2300      	movs	r3, #0
 800104c:	733b      	strb	r3, [r7, #12]
 800104e:	e01d      	b.n	800108c <LED_Init+0xcc>
        cell_led_states[i] = GPIO_PIN_SET; // Assume LEDs are off (active-low logic)
 8001050:	7b3b      	ldrb	r3, [r7, #12]
 8001052:	4a15      	ldr	r2, [pc, #84]	@ (80010a8 <LED_Init+0xe8>)
 8001054:	2101      	movs	r1, #1
 8001056:	54d1      	strb	r1, [r2, r3]
        I2C_HandleTypeDef *i2c_handle = cell_leds[i].i2c_handle;
 8001058:	7b3b      	ldrb	r3, [r7, #12]
 800105a:	4a14      	ldr	r2, [pc, #80]	@ (80010ac <LED_Init+0xec>)
 800105c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001060:	60bb      	str	r3, [r7, #8]
        uint8_t expander_id = cell_leds[i].expander_id;
 8001062:	7b3b      	ldrb	r3, [r7, #12]
 8001064:	4a11      	ldr	r2, [pc, #68]	@ (80010ac <LED_Init+0xec>)
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	4413      	add	r3, r2
 800106a:	791b      	ldrb	r3, [r3, #4]
 800106c:	71fb      	strb	r3, [r7, #7]
        uint16_t pin = cell_leds[i].pin;
 800106e:	7b3b      	ldrb	r3, [r7, #12]
 8001070:	4a0e      	ldr	r2, [pc, #56]	@ (80010ac <LED_Init+0xec>)
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	4413      	add	r3, r2
 8001076:	88db      	ldrh	r3, [r3, #6]
 8001078:	80bb      	strh	r3, [r7, #4]

        // Ensure LEDs are turned off at initialization
        Expander_SetPinState(i2c_handle, expander_id, pin, GPIO_PIN_SET); // Active low
 800107a:	88ba      	ldrh	r2, [r7, #4]
 800107c:	79f9      	ldrb	r1, [r7, #7]
 800107e:	2301      	movs	r3, #1
 8001080:	68b8      	ldr	r0, [r7, #8]
 8001082:	f002 fd63 	bl	8003b4c <Expander_SetPinState>
    for (uint8_t i = 0; i < NUM_CELL_LEDS; i++) {
 8001086:	7b3b      	ldrb	r3, [r7, #12]
 8001088:	3301      	adds	r3, #1
 800108a:	733b      	strb	r3, [r7, #12]
 800108c:	7b3b      	ldrb	r3, [r7, #12]
 800108e:	2b17      	cmp	r3, #23
 8001090:	d9de      	bls.n	8001050 <LED_Init+0x90>
    }

}
 8001092:	bf00      	nop
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000000 	.word	0x20000000
 80010a0:	20000050 	.word	0x20000050
 80010a4:	20000070 	.word	0x20000070
 80010a8:	20000a28 	.word	0x20000a28
 80010ac:	200000a0 	.word	0x200000a0

080010b0 <LED_Toggle>:
        HAL_GPIO_WritePin(leds[led - 1].port, leds[led - 1].pin, (state == High) ? GPIO_PIN_SET : GPIO_PIN_RESET);
    }
}

// Toggle a specific LED
void LED_Toggle(LED_ID led) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
    if (led <= NUM_LEDS) {
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2b0a      	cmp	r3, #10
 80010be:	d80e      	bhi.n	80010de <LED_Toggle+0x2e>
        HAL_GPIO_TogglePin(leds[led - 1].port, leds[led - 1].pin);
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	4a08      	ldr	r2, [pc, #32]	@ (80010e8 <LED_Toggle+0x38>)
 80010c6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	3b01      	subs	r3, #1
 80010ce:	4906      	ldr	r1, [pc, #24]	@ (80010e8 <LED_Toggle+0x38>)
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	440b      	add	r3, r1
 80010d4:	889b      	ldrh	r3, [r3, #4]
 80010d6:	4619      	mov	r1, r3
 80010d8:	4610      	mov	r0, r2
 80010da:	f007 fa14 	bl	8008506 <HAL_GPIO_TogglePin>
    }
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000000 	.word	0x20000000

080010ec <Push_ButtonHandler>:

    return id;
}

void Push_ButtonHandler(uint16_t GPIO_Pin)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	80fb      	strh	r3, [r7, #6]
    currentTime = HAL_GetTick();
 80010f6:	f006 fb39 	bl	800776c <HAL_GetTick>
 80010fa:	4603      	mov	r3, r0
 80010fc:	4a14      	ldr	r2, [pc, #80]	@ (8001150 <Push_ButtonHandler+0x64>)
 80010fe:	6013      	str	r3, [r2, #0]

    for(int j = 0; j < 4; j++) {
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	e01c      	b.n	8001140 <Push_ButtonHandler+0x54>
        if((GPIO_Pin == BUTTON_PINS[j]) && (currentTime - previousTime > 150)) {
 8001106:	4a13      	ldr	r2, [pc, #76]	@ (8001154 <Push_ButtonHandler+0x68>)
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800110e:	88fa      	ldrh	r2, [r7, #6]
 8001110:	429a      	cmp	r2, r3
 8001112:	d112      	bne.n	800113a <Push_ButtonHandler+0x4e>
 8001114:	4b0e      	ldr	r3, [pc, #56]	@ (8001150 <Push_ButtonHandler+0x64>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b0f      	ldr	r3, [pc, #60]	@ (8001158 <Push_ButtonHandler+0x6c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b96      	cmp	r3, #150	@ 0x96
 8001120:	d90b      	bls.n	800113a <Push_ButtonHandler+0x4e>
//        	Menu_Handler(j);
            LED_Toggle(j+1);  // Keep your existing LED toggle
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	b2db      	uxtb	r3, r3
 8001126:	3301      	adds	r3, #1
 8001128:	b2db      	uxtb	r3, r3
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff ffc0 	bl	80010b0 <LED_Toggle>
            previousTime = currentTime;
 8001130:	4b07      	ldr	r3, [pc, #28]	@ (8001150 <Push_ButtonHandler+0x64>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a08      	ldr	r2, [pc, #32]	@ (8001158 <Push_ButtonHandler+0x6c>)
 8001136:	6013      	str	r3, [r2, #0]
            break;
 8001138:	e006      	b.n	8001148 <Push_ButtonHandler+0x5c>
    for(int j = 0; j < 4; j++) {
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	3301      	adds	r3, #1
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2b03      	cmp	r3, #3
 8001144:	dddf      	ble.n	8001106 <Push_ButtonHandler+0x1a>
        }
    }
}
 8001146:	bf00      	nop
 8001148:	bf00      	nop
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000a20 	.word	0x20000a20
 8001154:	0800c53c 	.word	0x0800c53c
 8001158:	20000a24 	.word	0x20000a24

0800115c <intToBinary>:
uint8_t misoCell11Res1 [2];
uint8_t misoCell11Res2 [2];
uint8_t misoCell11Res3 [2];


void intToBinary(int num, int *binaryArray) {
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
		    for (int i = 0; i < 10; i++) {
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	e00e      	b.n	800118a <intToBinary+0x2e>
		        binaryArray[15 - i] = (num >> i) & 1;
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	411a      	asrs	r2, r3
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f1c3 030f 	rsb	r3, r3, #15
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	6839      	ldr	r1, [r7, #0]
 800117c:	440b      	add	r3, r1
 800117e:	f002 0201 	and.w	r2, r2, #1
 8001182:	601a      	str	r2, [r3, #0]
		    for (int i = 0; i < 10; i++) {
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	3301      	adds	r3, #1
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2b09      	cmp	r3, #9
 800118e:	dded      	ble.n	800116c <intToBinary+0x10>
		    }
		}
 8001190:	bf00      	nop
 8001192:	bf00      	nop
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <assignBytes>:

void assignBytes(int *resArray, uint8_t *r) {
 800119e:	b480      	push	{r7}
 80011a0:	b085      	sub	sp, #20
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
 80011a6:	6039      	str	r1, [r7, #0]
		    r[0] = 0;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]
		    r[1] = 0;
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	3301      	adds	r3, #1
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]

		    for (int i = 0; i < 8; i++) {
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	e02b      	b.n	8001214 <assignBytes+0x76>

		        r[0] |= (resArray[i] << (7 - i));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	b25a      	sxtb	r2, r3
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	440b      	add	r3, r1
 80011ca:	6819      	ldr	r1, [r3, #0]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f1c3 0307 	rsb	r3, r3, #7
 80011d2:	fa01 f303 	lsl.w	r3, r1, r3
 80011d6:	b25b      	sxtb	r3, r3
 80011d8:	4313      	orrs	r3, r2
 80011da:	b25b      	sxtb	r3, r3
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	701a      	strb	r2, [r3, #0]
		        r[1] |= (resArray[i + 8] << (7 - i));
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	3301      	adds	r3, #1
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	b25a      	sxtb	r2, r3
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	3308      	adds	r3, #8
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	6879      	ldr	r1, [r7, #4]
 80011f2:	440b      	add	r3, r1
 80011f4:	6819      	ldr	r1, [r3, #0]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f1c3 0307 	rsb	r3, r3, #7
 80011fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001200:	b25b      	sxtb	r3, r3
 8001202:	4313      	orrs	r3, r2
 8001204:	b25a      	sxtb	r2, r3
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	3301      	adds	r3, #1
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	701a      	strb	r2, [r3, #0]
		    for (int i = 0; i < 8; i++) {
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	3301      	adds	r3, #1
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2b07      	cmp	r3, #7
 8001218:	ddd0      	ble.n	80011bc <assignBytes+0x1e>
		    }
		}
 800121a:	bf00      	nop
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <cell12_Temp_01_Set>:
		}
		return true;

	}

void cell12_Temp_01_Set(float resistance){
 8001228:	b580      	push	{r7, lr}
 800122a:	b096      	sub	sp, #88	@ 0x58
 800122c:	af02      	add	r7, sp, #8
 800122e:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff f93e 	bl	80004b4 <__aeabi_f2d>
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	4b4c      	ldr	r3, [pc, #304]	@ (8001370 <cell12_Temp_01_Set+0x148>)
 800123e:	f7ff fabb 	bl	80007b8 <__aeabi_ddiv>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4610      	mov	r0, r2
 8001248:	4619      	mov	r1, r3
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	4b49      	ldr	r3, [pc, #292]	@ (8001374 <cell12_Temp_01_Set+0x14c>)
 8001250:	f7ff f988 	bl	8000564 <__aeabi_dmul>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4610      	mov	r0, r2
 800125a:	4619      	mov	r1, r3
 800125c:	f7ff fb94 	bl	8000988 <__aeabi_d2iz>
 8001260:	4603      	mov	r3, r0
 8001262:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	2240      	movs	r2, #64	@ 0x40
 800126a:	2100      	movs	r1, #0
 800126c:	4618      	mov	r0, r3
 800126e:	f00b f89f 	bl	800c3b0 <memset>
 8001272:	2301      	movs	r3, #1
 8001274:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 8001276:	f107 030c 	add.w	r3, r7, #12
 800127a:	4619      	mov	r1, r3
 800127c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800127e:	f7ff ff6d 	bl	800115c <intToBinary>
	assignBytes(resArray, resByteArray);
 8001282:	f107 0208 	add.w	r2, r7, #8
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff86 	bl	800119e <assignBytes>
	HAL_GPIO_WritePin(CELL12_TEMP_01_LED_GPIO_Port, CELL12_TEMP_01_LED_Pin, GPIO_PIN_SET);
 8001292:	2201      	movs	r2, #1
 8001294:	2101      	movs	r1, #1
 8001296:	4838      	ldr	r0, [pc, #224]	@ (8001378 <cell12_Temp_01_Set+0x150>)
 8001298:	f007 f91c 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800129c:	20c8      	movs	r0, #200	@ 0xc8
 800129e:	f006 fa71 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 80012a2:	2201      	movs	r2, #1
 80012a4:	2102      	movs	r1, #2
 80012a6:	4835      	ldr	r0, [pc, #212]	@ (800137c <cell12_Temp_01_Set+0x154>)
 80012a8:	f007 f914 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80012ac:	200a      	movs	r0, #10
 80012ae:	f006 fa69 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2102      	movs	r1, #2
 80012b6:	4831      	ldr	r0, [pc, #196]	@ (800137c <cell12_Temp_01_Set+0x154>)
 80012b8:	f007 f90c 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 80012bc:	f04f 33ff 	mov.w	r3, #4294967295
 80012c0:	2202      	movs	r2, #2
 80012c2:	492f      	ldr	r1, [pc, #188]	@ (8001380 <cell12_Temp_01_Set+0x158>)
 80012c4:	482f      	ldr	r0, [pc, #188]	@ (8001384 <cell12_Temp_01_Set+0x15c>)
 80012c6:	f008 ff22 	bl	800a10e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 80012ca:	2201      	movs	r2, #1
 80012cc:	2102      	movs	r1, #2
 80012ce:	482b      	ldr	r0, [pc, #172]	@ (800137c <cell12_Temp_01_Set+0x154>)
 80012d0:	f007 f900 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80012d4:	200a      	movs	r0, #10
 80012d6:	f006 fa55 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	2102      	movs	r1, #2
 80012de:	4827      	ldr	r0, [pc, #156]	@ (800137c <cell12_Temp_01_Set+0x154>)
 80012e0:	f007 f8f8 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 80012e4:	f04f 33ff 	mov.w	r3, #4294967295
 80012e8:	2202      	movs	r2, #2
 80012ea:	4927      	ldr	r1, [pc, #156]	@ (8001388 <cell12_Temp_01_Set+0x160>)
 80012ec:	4825      	ldr	r0, [pc, #148]	@ (8001384 <cell12_Temp_01_Set+0x15c>)
 80012ee:	f008 ff0e 	bl	800a10e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 80012f2:	2201      	movs	r2, #1
 80012f4:	2102      	movs	r1, #2
 80012f6:	4821      	ldr	r0, [pc, #132]	@ (800137c <cell12_Temp_01_Set+0x154>)
 80012f8:	f007 f8ec 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80012fc:	200a      	movs	r0, #10
 80012fe:	f006 fa41 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 8001302:	2200      	movs	r2, #0
 8001304:	2102      	movs	r1, #2
 8001306:	481d      	ldr	r0, [pc, #116]	@ (800137c <cell12_Temp_01_Set+0x154>)
 8001308:	f007 f8e4 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 800130c:	f107 0108 	add.w	r1, r7, #8
 8001310:	f04f 33ff 	mov.w	r3, #4294967295
 8001314:	2202      	movs	r2, #2
 8001316:	481b      	ldr	r0, [pc, #108]	@ (8001384 <cell12_Temp_01_Set+0x15c>)
 8001318:	f008 fef9 	bl	800a10e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 800131c:	2201      	movs	r2, #1
 800131e:	2102      	movs	r1, #2
 8001320:	4816      	ldr	r0, [pc, #88]	@ (800137c <cell12_Temp_01_Set+0x154>)
 8001322:	f007 f8d7 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001326:	200a      	movs	r0, #10
 8001328:	f006 fa2c 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 800132c:	2200      	movs	r2, #0
 800132e:	2102      	movs	r1, #2
 8001330:	4812      	ldr	r0, [pc, #72]	@ (800137c <cell12_Temp_01_Set+0x154>)
 8001332:	f007 f8cf 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2302      	movs	r3, #2
 800133e:	4a13      	ldr	r2, [pc, #76]	@ (800138c <cell12_Temp_01_Set+0x164>)
 8001340:	4913      	ldr	r1, [pc, #76]	@ (8001390 <cell12_Temp_01_Set+0x168>)
 8001342:	4810      	ldr	r0, [pc, #64]	@ (8001384 <cell12_Temp_01_Set+0x15c>)
 8001344:	f009 f827 	bl	800a396 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8001348:	2201      	movs	r2, #1
 800134a:	2102      	movs	r1, #2
 800134c:	480b      	ldr	r0, [pc, #44]	@ (800137c <cell12_Temp_01_Set+0x154>)
 800134e:	f007 f8c1 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001352:	200a      	movs	r0, #10
 8001354:	f006 fa16 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(CELL12_TEMP_01_LED_GPIO_Port, CELL12_TEMP_01_LED_Pin, GPIO_PIN_RESET);
 8001358:	2200      	movs	r2, #0
 800135a:	2101      	movs	r1, #1
 800135c:	4806      	ldr	r0, [pc, #24]	@ (8001378 <cell12_Temp_01_Set+0x150>)
 800135e:	f007 f8b9 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001362:	200a      	movs	r0, #10
 8001364:	f006 fa0e 	bl	8007784 <HAL_Delay>

}
 8001368:	bf00      	nop
 800136a:	3750      	adds	r7, #80	@ 0x50
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40490000 	.word	0x40490000
 8001374:	40900000 	.word	0x40900000
 8001378:	40020000 	.word	0x40020000
 800137c:	40020800 	.word	0x40020800
 8001380:	20000a40 	.word	0x20000a40
 8001384:	2000194c 	.word	0x2000194c
 8001388:	20000160 	.word	0x20000160
 800138c:	20000a44 	.word	0x20000a44
 8001390:	20000164 	.word	0x20000164

08001394 <cell12_Temp_02_Set>:

void cell12_Temp_02_Set(float resistance){
 8001394:	b580      	push	{r7, lr}
 8001396:	b096      	sub	sp, #88	@ 0x58
 8001398:	af02      	add	r7, sp, #8
 800139a:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff f888 	bl	80004b4 <__aeabi_f2d>
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	4b51      	ldr	r3, [pc, #324]	@ (80014f0 <cell12_Temp_02_Set+0x15c>)
 80013aa:	f7ff fa05 	bl	80007b8 <__aeabi_ddiv>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4610      	mov	r0, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	4b4e      	ldr	r3, [pc, #312]	@ (80014f4 <cell12_Temp_02_Set+0x160>)
 80013bc:	f7ff f8d2 	bl	8000564 <__aeabi_dmul>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	f7ff fade 	bl	8000988 <__aeabi_d2iz>
 80013cc:	4603      	mov	r3, r0
 80013ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 80013d0:	f107 030c 	add.w	r3, r7, #12
 80013d4:	2240      	movs	r2, #64	@ 0x40
 80013d6:	2100      	movs	r1, #0
 80013d8:	4618      	mov	r0, r3
 80013da:	f00a ffe9 	bl	800c3b0 <memset>
 80013de:	2301      	movs	r3, #1
 80013e0:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 80013e2:	f107 030c 	add.w	r3, r7, #12
 80013e6:	4619      	mov	r1, r3
 80013e8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80013ea:	f7ff feb7 	bl	800115c <intToBinary>
	assignBytes(resArray, resByteArray);
 80013ee:	f107 0208 	add.w	r2, r7, #8
 80013f2:	f107 030c 	add.w	r3, r7, #12
 80013f6:	4611      	mov	r1, r2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fed0 	bl	800119e <assignBytes>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_02_LED_Pin, GPIO_PIN_SET);
 80013fe:	2201      	movs	r2, #1
 8001400:	2101      	movs	r1, #1
 8001402:	483d      	ldr	r0, [pc, #244]	@ (80014f8 <cell12_Temp_02_Set+0x164>)
 8001404:	f007 f866 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001408:	20c8      	movs	r0, #200	@ 0xc8
 800140a:	f006 f9bb 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 800140e:	2201      	movs	r2, #1
 8001410:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001414:	4839      	ldr	r0, [pc, #228]	@ (80014fc <cell12_Temp_02_Set+0x168>)
 8001416:	f007 f85d 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800141a:	200a      	movs	r0, #10
 800141c:	f006 f9b2 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 8001420:	2200      	movs	r2, #0
 8001422:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001426:	4835      	ldr	r0, [pc, #212]	@ (80014fc <cell12_Temp_02_Set+0x168>)
 8001428:	f007 f854 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 800142c:	f04f 33ff 	mov.w	r3, #4294967295
 8001430:	2202      	movs	r2, #2
 8001432:	4933      	ldr	r1, [pc, #204]	@ (8001500 <cell12_Temp_02_Set+0x16c>)
 8001434:	4833      	ldr	r0, [pc, #204]	@ (8001504 <cell12_Temp_02_Set+0x170>)
 8001436:	f008 fe6a 	bl	800a10e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 800143a:	2201      	movs	r2, #1
 800143c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001440:	482e      	ldr	r0, [pc, #184]	@ (80014fc <cell12_Temp_02_Set+0x168>)
 8001442:	f007 f847 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001446:	200a      	movs	r0, #10
 8001448:	f006 f99c 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 800144c:	2200      	movs	r2, #0
 800144e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001452:	482a      	ldr	r0, [pc, #168]	@ (80014fc <cell12_Temp_02_Set+0x168>)
 8001454:	f007 f83e 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 8001458:	f04f 33ff 	mov.w	r3, #4294967295
 800145c:	2202      	movs	r2, #2
 800145e:	492a      	ldr	r1, [pc, #168]	@ (8001508 <cell12_Temp_02_Set+0x174>)
 8001460:	4828      	ldr	r0, [pc, #160]	@ (8001504 <cell12_Temp_02_Set+0x170>)
 8001462:	f008 fe54 	bl	800a10e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8001466:	2201      	movs	r2, #1
 8001468:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800146c:	4823      	ldr	r0, [pc, #140]	@ (80014fc <cell12_Temp_02_Set+0x168>)
 800146e:	f007 f831 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001472:	200a      	movs	r0, #10
 8001474:	f006 f986 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 8001478:	2200      	movs	r2, #0
 800147a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800147e:	481f      	ldr	r0, [pc, #124]	@ (80014fc <cell12_Temp_02_Set+0x168>)
 8001480:	f007 f828 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 8001484:	f107 0108 	add.w	r1, r7, #8
 8001488:	f04f 33ff 	mov.w	r3, #4294967295
 800148c:	2202      	movs	r2, #2
 800148e:	481d      	ldr	r0, [pc, #116]	@ (8001504 <cell12_Temp_02_Set+0x170>)
 8001490:	f008 fe3d 	bl	800a10e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8001494:	2201      	movs	r2, #1
 8001496:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800149a:	4818      	ldr	r0, [pc, #96]	@ (80014fc <cell12_Temp_02_Set+0x168>)
 800149c:	f007 f81a 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80014a0:	200a      	movs	r0, #10
 80014a2:	f006 f96f 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 80014a6:	2200      	movs	r2, #0
 80014a8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014ac:	4813      	ldr	r0, [pc, #76]	@ (80014fc <cell12_Temp_02_Set+0x168>)
 80014ae:	f007 f811 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 80014b2:	f04f 33ff 	mov.w	r3, #4294967295
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	2302      	movs	r3, #2
 80014ba:	4a14      	ldr	r2, [pc, #80]	@ (800150c <cell12_Temp_02_Set+0x178>)
 80014bc:	4914      	ldr	r1, [pc, #80]	@ (8001510 <cell12_Temp_02_Set+0x17c>)
 80014be:	4811      	ldr	r0, [pc, #68]	@ (8001504 <cell12_Temp_02_Set+0x170>)
 80014c0:	f008 ff69 	bl	800a396 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 80014c4:	2201      	movs	r2, #1
 80014c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014ca:	480c      	ldr	r0, [pc, #48]	@ (80014fc <cell12_Temp_02_Set+0x168>)
 80014cc:	f007 f802 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80014d0:	200a      	movs	r0, #10
 80014d2:	f006 f957 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_02_LED_Pin, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2101      	movs	r1, #1
 80014da:	4807      	ldr	r0, [pc, #28]	@ (80014f8 <cell12_Temp_02_Set+0x164>)
 80014dc:	f006 fffa 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80014e0:	200a      	movs	r0, #10
 80014e2:	f006 f94f 	bl	8007784 <HAL_Delay>

}
 80014e6:	bf00      	nop
 80014e8:	3750      	adds	r7, #80	@ 0x50
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40490000 	.word	0x40490000
 80014f4:	40900000 	.word	0x40900000
 80014f8:	40020800 	.word	0x40020800
 80014fc:	40021400 	.word	0x40021400
 8001500:	20000a40 	.word	0x20000a40
 8001504:	2000194c 	.word	0x2000194c
 8001508:	20000160 	.word	0x20000160
 800150c:	20000a44 	.word	0x20000a44
 8001510:	20000164 	.word	0x20000164

08001514 <cell12_Temp_03_Set>:

void cell12_Temp_03_Set(float resistance){
 8001514:	b580      	push	{r7, lr}
 8001516:	b096      	sub	sp, #88	@ 0x58
 8001518:	af02      	add	r7, sp, #8
 800151a:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7fe ffc8 	bl	80004b4 <__aeabi_f2d>
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	4b4d      	ldr	r3, [pc, #308]	@ (8001660 <cell12_Temp_03_Set+0x14c>)
 800152a:	f7ff f945 	bl	80007b8 <__aeabi_ddiv>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	4610      	mov	r0, r2
 8001534:	4619      	mov	r1, r3
 8001536:	f04f 0200 	mov.w	r2, #0
 800153a:	4b4a      	ldr	r3, [pc, #296]	@ (8001664 <cell12_Temp_03_Set+0x150>)
 800153c:	f7ff f812 	bl	8000564 <__aeabi_dmul>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	f7ff fa1e 	bl	8000988 <__aeabi_d2iz>
 800154c:	4603      	mov	r3, r0
 800154e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	2240      	movs	r2, #64	@ 0x40
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f00a ff29 	bl	800c3b0 <memset>
 800155e:	2301      	movs	r3, #1
 8001560:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 8001562:	f107 030c 	add.w	r3, r7, #12
 8001566:	4619      	mov	r1, r3
 8001568:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800156a:	f7ff fdf7 	bl	800115c <intToBinary>
	assignBytes(resArray, resByteArray);
 800156e:	f107 0208 	add.w	r2, r7, #8
 8001572:	f107 030c 	add.w	r3, r7, #12
 8001576:	4611      	mov	r1, r2
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fe10 	bl	800119e <assignBytes>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_LED_Pin, GPIO_PIN_SET);
 800157e:	2201      	movs	r2, #1
 8001580:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001584:	4838      	ldr	r0, [pc, #224]	@ (8001668 <cell12_Temp_03_Set+0x154>)
 8001586:	f006 ffa5 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800158a:	20c8      	movs	r0, #200	@ 0xc8
 800158c:	f006 f8fa 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001590:	2201      	movs	r2, #1
 8001592:	2140      	movs	r1, #64	@ 0x40
 8001594:	4834      	ldr	r0, [pc, #208]	@ (8001668 <cell12_Temp_03_Set+0x154>)
 8001596:	f006 ff9d 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800159a:	200a      	movs	r0, #10
 800159c:	f006 f8f2 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 80015a0:	2200      	movs	r2, #0
 80015a2:	2140      	movs	r1, #64	@ 0x40
 80015a4:	4830      	ldr	r0, [pc, #192]	@ (8001668 <cell12_Temp_03_Set+0x154>)
 80015a6:	f006 ff95 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 80015aa:	f04f 33ff 	mov.w	r3, #4294967295
 80015ae:	2202      	movs	r2, #2
 80015b0:	492e      	ldr	r1, [pc, #184]	@ (800166c <cell12_Temp_03_Set+0x158>)
 80015b2:	482f      	ldr	r0, [pc, #188]	@ (8001670 <cell12_Temp_03_Set+0x15c>)
 80015b4:	f008 fdab 	bl	800a10e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 80015b8:	2201      	movs	r2, #1
 80015ba:	2140      	movs	r1, #64	@ 0x40
 80015bc:	482a      	ldr	r0, [pc, #168]	@ (8001668 <cell12_Temp_03_Set+0x154>)
 80015be:	f006 ff89 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80015c2:	200a      	movs	r0, #10
 80015c4:	f006 f8de 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2140      	movs	r1, #64	@ 0x40
 80015cc:	4826      	ldr	r0, [pc, #152]	@ (8001668 <cell12_Temp_03_Set+0x154>)
 80015ce:	f006 ff81 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 80015d2:	f04f 33ff 	mov.w	r3, #4294967295
 80015d6:	2202      	movs	r2, #2
 80015d8:	4926      	ldr	r1, [pc, #152]	@ (8001674 <cell12_Temp_03_Set+0x160>)
 80015da:	4825      	ldr	r0, [pc, #148]	@ (8001670 <cell12_Temp_03_Set+0x15c>)
 80015dc:	f008 fd97 	bl	800a10e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 80015e0:	2201      	movs	r2, #1
 80015e2:	2140      	movs	r1, #64	@ 0x40
 80015e4:	4820      	ldr	r0, [pc, #128]	@ (8001668 <cell12_Temp_03_Set+0x154>)
 80015e6:	f006 ff75 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80015ea:	200a      	movs	r0, #10
 80015ec:	f006 f8ca 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2140      	movs	r1, #64	@ 0x40
 80015f4:	481c      	ldr	r0, [pc, #112]	@ (8001668 <cell12_Temp_03_Set+0x154>)
 80015f6:	f006 ff6d 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 80015fa:	f107 0108 	add.w	r1, r7, #8
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001602:	2202      	movs	r2, #2
 8001604:	481a      	ldr	r0, [pc, #104]	@ (8001670 <cell12_Temp_03_Set+0x15c>)
 8001606:	f008 fd82 	bl	800a10e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 800160a:	2201      	movs	r2, #1
 800160c:	2140      	movs	r1, #64	@ 0x40
 800160e:	4816      	ldr	r0, [pc, #88]	@ (8001668 <cell12_Temp_03_Set+0x154>)
 8001610:	f006 ff60 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001614:	200a      	movs	r0, #10
 8001616:	f006 f8b5 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 800161a:	2200      	movs	r2, #0
 800161c:	2140      	movs	r1, #64	@ 0x40
 800161e:	4812      	ldr	r0, [pc, #72]	@ (8001668 <cell12_Temp_03_Set+0x154>)
 8001620:	f006 ff58 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 8001624:	f04f 33ff 	mov.w	r3, #4294967295
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	2302      	movs	r3, #2
 800162c:	4a12      	ldr	r2, [pc, #72]	@ (8001678 <cell12_Temp_03_Set+0x164>)
 800162e:	4913      	ldr	r1, [pc, #76]	@ (800167c <cell12_Temp_03_Set+0x168>)
 8001630:	480f      	ldr	r0, [pc, #60]	@ (8001670 <cell12_Temp_03_Set+0x15c>)
 8001632:	f008 feb0 	bl	800a396 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001636:	2201      	movs	r2, #1
 8001638:	2140      	movs	r1, #64	@ 0x40
 800163a:	480b      	ldr	r0, [pc, #44]	@ (8001668 <cell12_Temp_03_Set+0x154>)
 800163c:	f006 ff4a 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001640:	200a      	movs	r0, #10
 8001642:	f006 f89f 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_LED_Pin, GPIO_PIN_RESET);
 8001646:	2200      	movs	r2, #0
 8001648:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800164c:	4806      	ldr	r0, [pc, #24]	@ (8001668 <cell12_Temp_03_Set+0x154>)
 800164e:	f006 ff41 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001652:	200a      	movs	r0, #10
 8001654:	f006 f896 	bl	8007784 <HAL_Delay>

}
 8001658:	bf00      	nop
 800165a:	3750      	adds	r7, #80	@ 0x50
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40490000 	.word	0x40490000
 8001664:	40900000 	.word	0x40900000
 8001668:	40021400 	.word	0x40021400
 800166c:	20000a40 	.word	0x20000a40
 8001670:	2000194c 	.word	0x2000194c
 8001674:	20000160 	.word	0x20000160
 8001678:	20000a44 	.word	0x20000a44
 800167c:	20000164 	.word	0x20000164

08001680 <cell11_Temp_01_Set>:

void cell11_Temp_01_Set(float resistance){
 8001680:	b580      	push	{r7, lr}
 8001682:	b096      	sub	sp, #88	@ 0x58
 8001684:	af02      	add	r7, sp, #8
 8001686:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7fe ff12 	bl	80004b4 <__aeabi_f2d>
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	4b52      	ldr	r3, [pc, #328]	@ (80017e0 <cell11_Temp_01_Set+0x160>)
 8001696:	f7ff f88f 	bl	80007b8 <__aeabi_ddiv>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	4b4f      	ldr	r3, [pc, #316]	@ (80017e4 <cell11_Temp_01_Set+0x164>)
 80016a8:	f7fe ff5c 	bl	8000564 <__aeabi_dmul>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4610      	mov	r0, r2
 80016b2:	4619      	mov	r1, r3
 80016b4:	f7ff f968 	bl	8000988 <__aeabi_d2iz>
 80016b8:	4603      	mov	r3, r0
 80016ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 80016bc:	f107 030c 	add.w	r3, r7, #12
 80016c0:	2240      	movs	r2, #64	@ 0x40
 80016c2:	2100      	movs	r1, #0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f00a fe73 	bl	800c3b0 <memset>
 80016ca:	2301      	movs	r3, #1
 80016cc:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 80016ce:	f107 030c 	add.w	r3, r7, #12
 80016d2:	4619      	mov	r1, r3
 80016d4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80016d6:	f7ff fd41 	bl	800115c <intToBinary>
	assignBytes(resArray, resByteArray);
 80016da:	f107 0208 	add.w	r2, r7, #8
 80016de:	f107 030c 	add.w	r3, r7, #12
 80016e2:	4611      	mov	r1, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fd5a 	bl	800119e <assignBytes>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_LED_Pin, GPIO_PIN_SET);
 80016ea:	2201      	movs	r2, #1
 80016ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016f0:	483d      	ldr	r0, [pc, #244]	@ (80017e8 <cell11_Temp_01_Set+0x168>)
 80016f2:	f006 feef 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80016f6:	20c8      	movs	r0, #200	@ 0xc8
 80016f8:	f006 f844 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 80016fc:	2201      	movs	r2, #1
 80016fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001702:	4839      	ldr	r0, [pc, #228]	@ (80017e8 <cell11_Temp_01_Set+0x168>)
 8001704:	f006 fee6 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001708:	200a      	movs	r0, #10
 800170a:	f006 f83b 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 800170e:	2200      	movs	r2, #0
 8001710:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001714:	4834      	ldr	r0, [pc, #208]	@ (80017e8 <cell11_Temp_01_Set+0x168>)
 8001716:	f006 fedd 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 800171a:	f04f 33ff 	mov.w	r3, #4294967295
 800171e:	2202      	movs	r2, #2
 8001720:	4932      	ldr	r1, [pc, #200]	@ (80017ec <cell11_Temp_01_Set+0x16c>)
 8001722:	4833      	ldr	r0, [pc, #204]	@ (80017f0 <cell11_Temp_01_Set+0x170>)
 8001724:	f008 fcf3 	bl	800a10e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8001728:	2201      	movs	r2, #1
 800172a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800172e:	482e      	ldr	r0, [pc, #184]	@ (80017e8 <cell11_Temp_01_Set+0x168>)
 8001730:	f006 fed0 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001734:	200a      	movs	r0, #10
 8001736:	f006 f825 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 800173a:	2200      	movs	r2, #0
 800173c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001740:	4829      	ldr	r0, [pc, #164]	@ (80017e8 <cell11_Temp_01_Set+0x168>)
 8001742:	f006 fec7 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 8001746:	f04f 33ff 	mov.w	r3, #4294967295
 800174a:	2202      	movs	r2, #2
 800174c:	4929      	ldr	r1, [pc, #164]	@ (80017f4 <cell11_Temp_01_Set+0x174>)
 800174e:	4828      	ldr	r0, [pc, #160]	@ (80017f0 <cell11_Temp_01_Set+0x170>)
 8001750:	f008 fcdd 	bl	800a10e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8001754:	2201      	movs	r2, #1
 8001756:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800175a:	4823      	ldr	r0, [pc, #140]	@ (80017e8 <cell11_Temp_01_Set+0x168>)
 800175c:	f006 feba 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001760:	200a      	movs	r0, #10
 8001762:	f006 f80f 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 8001766:	2200      	movs	r2, #0
 8001768:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800176c:	481e      	ldr	r0, [pc, #120]	@ (80017e8 <cell11_Temp_01_Set+0x168>)
 800176e:	f006 feb1 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 8001772:	f107 0108 	add.w	r1, r7, #8
 8001776:	f04f 33ff 	mov.w	r3, #4294967295
 800177a:	2202      	movs	r2, #2
 800177c:	481c      	ldr	r0, [pc, #112]	@ (80017f0 <cell11_Temp_01_Set+0x170>)
 800177e:	f008 fcc6 	bl	800a10e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8001782:	2201      	movs	r2, #1
 8001784:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001788:	4817      	ldr	r0, [pc, #92]	@ (80017e8 <cell11_Temp_01_Set+0x168>)
 800178a:	f006 fea3 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800178e:	200a      	movs	r0, #10
 8001790:	f005 fff8 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 8001794:	2200      	movs	r2, #0
 8001796:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800179a:	4813      	ldr	r0, [pc, #76]	@ (80017e8 <cell11_Temp_01_Set+0x168>)
 800179c:	f006 fe9a 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 80017a0:	f04f 33ff 	mov.w	r3, #4294967295
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	2302      	movs	r3, #2
 80017a8:	4a13      	ldr	r2, [pc, #76]	@ (80017f8 <cell11_Temp_01_Set+0x178>)
 80017aa:	4914      	ldr	r1, [pc, #80]	@ (80017fc <cell11_Temp_01_Set+0x17c>)
 80017ac:	4810      	ldr	r0, [pc, #64]	@ (80017f0 <cell11_Temp_01_Set+0x170>)
 80017ae:	f008 fdf2 	bl	800a396 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 80017b2:	2201      	movs	r2, #1
 80017b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017b8:	480b      	ldr	r0, [pc, #44]	@ (80017e8 <cell11_Temp_01_Set+0x168>)
 80017ba:	f006 fe8b 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80017be:	200a      	movs	r0, #10
 80017c0:	f005 ffe0 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_LED_Pin, GPIO_PIN_RESET);
 80017c4:	2200      	movs	r2, #0
 80017c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017ca:	4807      	ldr	r0, [pc, #28]	@ (80017e8 <cell11_Temp_01_Set+0x168>)
 80017cc:	f006 fe82 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80017d0:	200a      	movs	r0, #10
 80017d2:	f005 ffd7 	bl	8007784 <HAL_Delay>

}
 80017d6:	bf00      	nop
 80017d8:	3750      	adds	r7, #80	@ 0x50
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40490000 	.word	0x40490000
 80017e4:	40900000 	.word	0x40900000
 80017e8:	40021c00 	.word	0x40021c00
 80017ec:	20000a40 	.word	0x20000a40
 80017f0:	200019a4 	.word	0x200019a4
 80017f4:	20000160 	.word	0x20000160
 80017f8:	20000a44 	.word	0x20000a44
 80017fc:	20000164 	.word	0x20000164

08001800 <cell11_Temp_02_Set>:

void cell11_Temp_02_Set(float resistance){
 8001800:	b580      	push	{r7, lr}
 8001802:	b096      	sub	sp, #88	@ 0x58
 8001804:	af02      	add	r7, sp, #8
 8001806:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7fe fe52 	bl	80004b4 <__aeabi_f2d>
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	4b52      	ldr	r3, [pc, #328]	@ (8001960 <cell11_Temp_02_Set+0x160>)
 8001816:	f7fe ffcf 	bl	80007b8 <__aeabi_ddiv>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4610      	mov	r0, r2
 8001820:	4619      	mov	r1, r3
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	4b4f      	ldr	r3, [pc, #316]	@ (8001964 <cell11_Temp_02_Set+0x164>)
 8001828:	f7fe fe9c 	bl	8000564 <__aeabi_dmul>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	f7ff f8a8 	bl	8000988 <__aeabi_d2iz>
 8001838:	4603      	mov	r3, r0
 800183a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 800183c:	f107 030c 	add.w	r3, r7, #12
 8001840:	2240      	movs	r2, #64	@ 0x40
 8001842:	2100      	movs	r1, #0
 8001844:	4618      	mov	r0, r3
 8001846:	f00a fdb3 	bl	800c3b0 <memset>
 800184a:	2301      	movs	r3, #1
 800184c:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 800184e:	f107 030c 	add.w	r3, r7, #12
 8001852:	4619      	mov	r1, r3
 8001854:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001856:	f7ff fc81 	bl	800115c <intToBinary>
	assignBytes(resArray, resByteArray);
 800185a:	f107 0208 	add.w	r2, r7, #8
 800185e:	f107 030c 	add.w	r3, r7, #12
 8001862:	4611      	mov	r1, r2
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fc9a 	bl	800119e <assignBytes>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_LED_Pin, GPIO_PIN_SET);
 800186a:	2201      	movs	r2, #1
 800186c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001870:	483d      	ldr	r0, [pc, #244]	@ (8001968 <cell11_Temp_02_Set+0x168>)
 8001872:	f006 fe2f 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001876:	20c8      	movs	r0, #200	@ 0xc8
 8001878:	f005 ff84 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 800187c:	2201      	movs	r2, #1
 800187e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001882:	4839      	ldr	r0, [pc, #228]	@ (8001968 <cell11_Temp_02_Set+0x168>)
 8001884:	f006 fe26 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001888:	200a      	movs	r0, #10
 800188a:	f005 ff7b 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 800188e:	2200      	movs	r2, #0
 8001890:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001894:	4834      	ldr	r0, [pc, #208]	@ (8001968 <cell11_Temp_02_Set+0x168>)
 8001896:	f006 fe1d 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 800189a:	f04f 33ff 	mov.w	r3, #4294967295
 800189e:	2202      	movs	r2, #2
 80018a0:	4932      	ldr	r1, [pc, #200]	@ (800196c <cell11_Temp_02_Set+0x16c>)
 80018a2:	4833      	ldr	r0, [pc, #204]	@ (8001970 <cell11_Temp_02_Set+0x170>)
 80018a4:	f008 fc33 	bl	800a10e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 80018a8:	2201      	movs	r2, #1
 80018aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018ae:	482e      	ldr	r0, [pc, #184]	@ (8001968 <cell11_Temp_02_Set+0x168>)
 80018b0:	f006 fe10 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80018b4:	200a      	movs	r0, #10
 80018b6:	f005 ff65 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 80018ba:	2200      	movs	r2, #0
 80018bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018c0:	4829      	ldr	r0, [pc, #164]	@ (8001968 <cell11_Temp_02_Set+0x168>)
 80018c2:	f006 fe07 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 80018c6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ca:	2202      	movs	r2, #2
 80018cc:	4929      	ldr	r1, [pc, #164]	@ (8001974 <cell11_Temp_02_Set+0x174>)
 80018ce:	4828      	ldr	r0, [pc, #160]	@ (8001970 <cell11_Temp_02_Set+0x170>)
 80018d0:	f008 fc1d 	bl	800a10e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 80018d4:	2201      	movs	r2, #1
 80018d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018da:	4823      	ldr	r0, [pc, #140]	@ (8001968 <cell11_Temp_02_Set+0x168>)
 80018dc:	f006 fdfa 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80018e0:	200a      	movs	r0, #10
 80018e2:	f005 ff4f 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 80018e6:	2200      	movs	r2, #0
 80018e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018ec:	481e      	ldr	r0, [pc, #120]	@ (8001968 <cell11_Temp_02_Set+0x168>)
 80018ee:	f006 fdf1 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 80018f2:	f107 0108 	add.w	r1, r7, #8
 80018f6:	f04f 33ff 	mov.w	r3, #4294967295
 80018fa:	2202      	movs	r2, #2
 80018fc:	481c      	ldr	r0, [pc, #112]	@ (8001970 <cell11_Temp_02_Set+0x170>)
 80018fe:	f008 fc06 	bl	800a10e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8001902:	2201      	movs	r2, #1
 8001904:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001908:	4817      	ldr	r0, [pc, #92]	@ (8001968 <cell11_Temp_02_Set+0x168>)
 800190a:	f006 fde3 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800190e:	200a      	movs	r0, #10
 8001910:	f005 ff38 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 8001914:	2200      	movs	r2, #0
 8001916:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800191a:	4813      	ldr	r0, [pc, #76]	@ (8001968 <cell11_Temp_02_Set+0x168>)
 800191c:	f006 fdda 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 8001920:	f04f 33ff 	mov.w	r3, #4294967295
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	2302      	movs	r3, #2
 8001928:	4a13      	ldr	r2, [pc, #76]	@ (8001978 <cell11_Temp_02_Set+0x178>)
 800192a:	4914      	ldr	r1, [pc, #80]	@ (800197c <cell11_Temp_02_Set+0x17c>)
 800192c:	4810      	ldr	r0, [pc, #64]	@ (8001970 <cell11_Temp_02_Set+0x170>)
 800192e:	f008 fd32 	bl	800a396 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8001932:	2201      	movs	r2, #1
 8001934:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001938:	480b      	ldr	r0, [pc, #44]	@ (8001968 <cell11_Temp_02_Set+0x168>)
 800193a:	f006 fdcb 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800193e:	200a      	movs	r0, #10
 8001940:	f005 ff20 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_LED_Pin, GPIO_PIN_RESET);
 8001944:	2200      	movs	r2, #0
 8001946:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800194a:	4807      	ldr	r0, [pc, #28]	@ (8001968 <cell11_Temp_02_Set+0x168>)
 800194c:	f006 fdc2 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001950:	200a      	movs	r0, #10
 8001952:	f005 ff17 	bl	8007784 <HAL_Delay>

}
 8001956:	bf00      	nop
 8001958:	3750      	adds	r7, #80	@ 0x50
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40490000 	.word	0x40490000
 8001964:	40900000 	.word	0x40900000
 8001968:	40021c00 	.word	0x40021c00
 800196c:	20000a40 	.word	0x20000a40
 8001970:	200019a4 	.word	0x200019a4
 8001974:	20000160 	.word	0x20000160
 8001978:	20000a44 	.word	0x20000a44
 800197c:	20000164 	.word	0x20000164

08001980 <cell11_Temp_03_Set>:

void cell11_Temp_03_Set(float resistance){
 8001980:	b580      	push	{r7, lr}
 8001982:	b096      	sub	sp, #88	@ 0x58
 8001984:	af02      	add	r7, sp, #8
 8001986:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7fe fd92 	bl	80004b4 <__aeabi_f2d>
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	4b51      	ldr	r3, [pc, #324]	@ (8001adc <cell11_Temp_03_Set+0x15c>)
 8001996:	f7fe ff0f 	bl	80007b8 <__aeabi_ddiv>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	4610      	mov	r0, r2
 80019a0:	4619      	mov	r1, r3
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	4b4e      	ldr	r3, [pc, #312]	@ (8001ae0 <cell11_Temp_03_Set+0x160>)
 80019a8:	f7fe fddc 	bl	8000564 <__aeabi_dmul>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4610      	mov	r0, r2
 80019b2:	4619      	mov	r1, r3
 80019b4:	f7fe ffe8 	bl	8000988 <__aeabi_d2iz>
 80019b8:	4603      	mov	r3, r0
 80019ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 80019bc:	f107 030c 	add.w	r3, r7, #12
 80019c0:	2240      	movs	r2, #64	@ 0x40
 80019c2:	2100      	movs	r1, #0
 80019c4:	4618      	mov	r0, r3
 80019c6:	f00a fcf3 	bl	800c3b0 <memset>
 80019ca:	2301      	movs	r3, #1
 80019cc:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 80019ce:	f107 030c 	add.w	r3, r7, #12
 80019d2:	4619      	mov	r1, r3
 80019d4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80019d6:	f7ff fbc1 	bl	800115c <intToBinary>
	assignBytes(resArray, resByteArray);
 80019da:	f107 0208 	add.w	r2, r7, #8
 80019de:	f107 030c 	add.w	r3, r7, #12
 80019e2:	4611      	mov	r1, r2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fbda 	bl	800119e <assignBytes>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_03_LED_Pin, GPIO_PIN_SET);
 80019ea:	2201      	movs	r2, #1
 80019ec:	2140      	movs	r1, #64	@ 0x40
 80019ee:	483d      	ldr	r0, [pc, #244]	@ (8001ae4 <cell11_Temp_03_Set+0x164>)
 80019f0:	f006 fd70 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80019f4:	20c8      	movs	r0, #200	@ 0xc8
 80019f6:	f005 fec5 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 80019fa:	2201      	movs	r2, #1
 80019fc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a00:	4839      	ldr	r0, [pc, #228]	@ (8001ae8 <cell11_Temp_03_Set+0x168>)
 8001a02:	f006 fd67 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001a06:	200a      	movs	r0, #10
 8001a08:	f005 febc 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a12:	4835      	ldr	r0, [pc, #212]	@ (8001ae8 <cell11_Temp_03_Set+0x168>)
 8001a14:	f006 fd5e 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 8001a18:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	4933      	ldr	r1, [pc, #204]	@ (8001aec <cell11_Temp_03_Set+0x16c>)
 8001a20:	4833      	ldr	r0, [pc, #204]	@ (8001af0 <cell11_Temp_03_Set+0x170>)
 8001a22:	f008 fb74 	bl	800a10e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001a26:	2201      	movs	r2, #1
 8001a28:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a2c:	482e      	ldr	r0, [pc, #184]	@ (8001ae8 <cell11_Temp_03_Set+0x168>)
 8001a2e:	f006 fd51 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001a32:	200a      	movs	r0, #10
 8001a34:	f005 fea6 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a3e:	482a      	ldr	r0, [pc, #168]	@ (8001ae8 <cell11_Temp_03_Set+0x168>)
 8001a40:	f006 fd48 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 8001a44:	f04f 33ff 	mov.w	r3, #4294967295
 8001a48:	2202      	movs	r2, #2
 8001a4a:	492a      	ldr	r1, [pc, #168]	@ (8001af4 <cell11_Temp_03_Set+0x174>)
 8001a4c:	4828      	ldr	r0, [pc, #160]	@ (8001af0 <cell11_Temp_03_Set+0x170>)
 8001a4e:	f008 fb5e 	bl	800a10e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001a52:	2201      	movs	r2, #1
 8001a54:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a58:	4823      	ldr	r0, [pc, #140]	@ (8001ae8 <cell11_Temp_03_Set+0x168>)
 8001a5a:	f006 fd3b 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001a5e:	200a      	movs	r0, #10
 8001a60:	f005 fe90 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8001a64:	2200      	movs	r2, #0
 8001a66:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a6a:	481f      	ldr	r0, [pc, #124]	@ (8001ae8 <cell11_Temp_03_Set+0x168>)
 8001a6c:	f006 fd32 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 8001a70:	f107 0108 	add.w	r1, r7, #8
 8001a74:	f04f 33ff 	mov.w	r3, #4294967295
 8001a78:	2202      	movs	r2, #2
 8001a7a:	481d      	ldr	r0, [pc, #116]	@ (8001af0 <cell11_Temp_03_Set+0x170>)
 8001a7c:	f008 fb47 	bl	800a10e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001a80:	2201      	movs	r2, #1
 8001a82:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a86:	4818      	ldr	r0, [pc, #96]	@ (8001ae8 <cell11_Temp_03_Set+0x168>)
 8001a88:	f006 fd24 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001a8c:	200a      	movs	r0, #10
 8001a8e:	f005 fe79 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8001a92:	2200      	movs	r2, #0
 8001a94:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a98:	4813      	ldr	r0, [pc, #76]	@ (8001ae8 <cell11_Temp_03_Set+0x168>)
 8001a9a:	f006 fd1b 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 8001a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	4a14      	ldr	r2, [pc, #80]	@ (8001af8 <cell11_Temp_03_Set+0x178>)
 8001aa8:	4914      	ldr	r1, [pc, #80]	@ (8001afc <cell11_Temp_03_Set+0x17c>)
 8001aaa:	4811      	ldr	r0, [pc, #68]	@ (8001af0 <cell11_Temp_03_Set+0x170>)
 8001aac:	f008 fc73 	bl	800a396 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ab6:	480c      	ldr	r0, [pc, #48]	@ (8001ae8 <cell11_Temp_03_Set+0x168>)
 8001ab8:	f006 fd0c 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001abc:	200a      	movs	r0, #10
 8001abe:	f005 fe61 	bl	8007784 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_03_LED_Pin, GPIO_PIN_RESET);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2140      	movs	r1, #64	@ 0x40
 8001ac6:	4807      	ldr	r0, [pc, #28]	@ (8001ae4 <cell11_Temp_03_Set+0x164>)
 8001ac8:	f006 fd04 	bl	80084d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001acc:	200a      	movs	r0, #10
 8001ace:	f005 fe59 	bl	8007784 <HAL_Delay>

}
 8001ad2:	bf00      	nop
 8001ad4:	3750      	adds	r7, #80	@ 0x50
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40490000 	.word	0x40490000
 8001ae0:	40900000 	.word	0x40900000
 8001ae4:	40021c00 	.word	0x40021c00
 8001ae8:	40020400 	.word	0x40020400
 8001aec:	20000a40 	.word	0x20000a40
 8001af0:	200019a4 	.word	0x200019a4
 8001af4:	20000160 	.word	0x20000160
 8001af8:	20000a44 	.word	0x20000a44
 8001afc:	20000164 	.word	0x20000164

08001b00 <Set_Resistance>:
	HAL_Delay(10);

}


void Set_Resistance(uint8_t tempCardId,uint8_t temperature){
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	460a      	mov	r2, r1
 8001b0a:	71fb      	strb	r3, [r7, #7]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	71bb      	strb	r3, [r7, #6]
	switch (tempCardId){
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	2b05      	cmp	r3, #5
 8001b16:	d845      	bhi.n	8001ba4 <Set_Resistance+0xa4>
 8001b18:	a201      	add	r2, pc, #4	@ (adr r2, 8001b20 <Set_Resistance+0x20>)
 8001b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1e:	bf00      	nop
 8001b20:	08001b39 	.word	0x08001b39
 8001b24:	08001b4b 	.word	0x08001b4b
 8001b28:	08001b5d 	.word	0x08001b5d
 8001b2c:	08001b6f 	.word	0x08001b6f
 8001b30:	08001b81 	.word	0x08001b81
 8001b34:	08001b93 	.word	0x08001b93


	case 0x01:
		cell12_Temp_01_Set(temperature);
 8001b38:	79bb      	ldrb	r3, [r7, #6]
 8001b3a:	ee07 3a90 	vmov	s15, r3
 8001b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b42:	eeb0 0a67 	vmov.f32	s0, s15
 8001b46:	f7ff fb6f 	bl	8001228 <cell12_Temp_01_Set>

	case 0x02:
		cell12_Temp_02_Set(temperature);
 8001b4a:	79bb      	ldrb	r3, [r7, #6]
 8001b4c:	ee07 3a90 	vmov	s15, r3
 8001b50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b54:	eeb0 0a67 	vmov.f32	s0, s15
 8001b58:	f7ff fc1c 	bl	8001394 <cell12_Temp_02_Set>

	case 0x03:
		cell12_Temp_03_Set(temperature);
 8001b5c:	79bb      	ldrb	r3, [r7, #6]
 8001b5e:	ee07 3a90 	vmov	s15, r3
 8001b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b66:	eeb0 0a67 	vmov.f32	s0, s15
 8001b6a:	f7ff fcd3 	bl	8001514 <cell12_Temp_03_Set>

	case 0x04:
		cell11_Temp_01_Set(temperature);
 8001b6e:	79bb      	ldrb	r3, [r7, #6]
 8001b70:	ee07 3a90 	vmov	s15, r3
 8001b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b78:	eeb0 0a67 	vmov.f32	s0, s15
 8001b7c:	f7ff fd80 	bl	8001680 <cell11_Temp_01_Set>

	case 0x05:
		cell11_Temp_02_Set(temperature);
 8001b80:	79bb      	ldrb	r3, [r7, #6]
 8001b82:	ee07 3a90 	vmov	s15, r3
 8001b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b8e:	f7ff fe37 	bl	8001800 <cell11_Temp_02_Set>

	case 0x06:
		cell11_Temp_03_Set(temperature);
 8001b92:	79bb      	ldrb	r3, [r7, #6]
 8001b94:	ee07 3a90 	vmov	s15, r3
 8001b98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba0:	f7ff feee 	bl	8001980 <cell11_Temp_03_Set>





}
 8001ba4:	bf00      	nop
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <u8x8_stm32_gpio_and_delay>:
 */
static uint8_t u8x8_stm32_gpio_and_delay(u8x8_t * const u8x8,
                                           uint8_t msg,
                                           uint8_t arg_int,
                                           void * const arg_ptr)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	607b      	str	r3, [r7, #4]
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	72fb      	strb	r3, [r7, #11]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	72bb      	strb	r3, [r7, #10]
    /* Suppress unused parameter warnings */
    (void)u8x8;
    (void)arg_ptr;

    switch (msg)
 8001bbe:	7afb      	ldrb	r3, [r7, #11]
 8001bc0:	2b4b      	cmp	r3, #75	@ 0x4b
 8001bc2:	d01a      	beq.n	8001bfa <u8x8_stm32_gpio_and_delay+0x4e>
 8001bc4:	2b4b      	cmp	r3, #75	@ 0x4b
 8001bc6:	dc1f      	bgt.n	8001c08 <u8x8_stm32_gpio_and_delay+0x5c>
 8001bc8:	2b4a      	cmp	r3, #74	@ 0x4a
 8001bca:	d00f      	beq.n	8001bec <u8x8_stm32_gpio_and_delay+0x40>
 8001bcc:	2b4a      	cmp	r3, #74	@ 0x4a
 8001bce:	dc1b      	bgt.n	8001c08 <u8x8_stm32_gpio_and_delay+0x5c>
 8001bd0:	2b28      	cmp	r3, #40	@ 0x28
 8001bd2:	d002      	beq.n	8001bda <u8x8_stm32_gpio_and_delay+0x2e>
 8001bd4:	2b29      	cmp	r3, #41	@ 0x29
 8001bd6:	d004      	beq.n	8001be2 <u8x8_stm32_gpio_and_delay+0x36>
        case U8X8_MSG_GPIO_RESET:
            HAL_GPIO_WritePin(DISPLAY_IO_1_GPIO_Port, DISPLAY_IO_1_Pin, (GPIO_PinState)arg_int);
            break;
        default:
            /* No action */
            break;
 8001bd8:	e016      	b.n	8001c08 <u8x8_stm32_gpio_and_delay+0x5c>
            HAL_Delay(DISPLAY_UPDATE_DELAY_U32);
 8001bda:	2002      	movs	r0, #2
 8001bdc:	f005 fdd2 	bl	8007784 <HAL_Delay>
            break;
 8001be0:	e013      	b.n	8001c0a <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_Delay(arg_int);
 8001be2:	7abb      	ldrb	r3, [r7, #10]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f005 fdcd 	bl	8007784 <HAL_Delay>
            break;
 8001bea:	e00e      	b.n	8001c0a <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_GPIO_WritePin(DISPLAY_IO_2_GPIO_Port, DISPLAY_IO_2_Pin, (GPIO_PinState)arg_int);
 8001bec:	7abb      	ldrb	r3, [r7, #10]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	2108      	movs	r1, #8
 8001bf2:	4808      	ldr	r0, [pc, #32]	@ (8001c14 <u8x8_stm32_gpio_and_delay+0x68>)
 8001bf4:	f006 fc6e 	bl	80084d4 <HAL_GPIO_WritePin>
            break;
 8001bf8:	e007      	b.n	8001c0a <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_GPIO_WritePin(DISPLAY_IO_1_GPIO_Port, DISPLAY_IO_1_Pin, (GPIO_PinState)arg_int);
 8001bfa:	7abb      	ldrb	r3, [r7, #10]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	2104      	movs	r1, #4
 8001c00:	4804      	ldr	r0, [pc, #16]	@ (8001c14 <u8x8_stm32_gpio_and_delay+0x68>)
 8001c02:	f006 fc67 	bl	80084d4 <HAL_GPIO_WritePin>
            break;
 8001c06:	e000      	b.n	8001c0a <u8x8_stm32_gpio_and_delay+0x5e>
            break;
 8001c08:	bf00      	nop
    }
    return 1U;
 8001c0a:	2301      	movs	r3, #1
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40021800 	.word	0x40021800

08001c18 <u8x8_byte_4wire_hw_spi>:
 */
static uint8_t u8x8_byte_4wire_hw_spi(u8x8_t * const u8x8,
                                      uint8_t msg,
                                      uint8_t arg_int,
                                      void * const arg_ptr)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	607b      	str	r3, [r7, #4]
 8001c22:	460b      	mov	r3, r1
 8001c24:	72fb      	strb	r3, [r7, #11]
 8001c26:	4613      	mov	r3, r2
 8001c28:	72bb      	strb	r3, [r7, #10]
    uint8_t retVal = 1U;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	75fb      	strb	r3, [r7, #23]

    switch (msg)
 8001c2e:	7afb      	ldrb	r3, [r7, #11]
 8001c30:	3b14      	subs	r3, #20
 8001c32:	2b0c      	cmp	r3, #12
 8001c34:	d83e      	bhi.n	8001cb4 <u8x8_byte_4wire_hw_spi+0x9c>
 8001c36:	a201      	add	r2, pc, #4	@ (adr r2, 8001c3c <u8x8_byte_4wire_hw_spi+0x24>)
 8001c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c3c:	08001cbb 	.word	0x08001cbb
 8001c40:	08001cb5 	.word	0x08001cb5
 8001c44:	08001cb5 	.word	0x08001cb5
 8001c48:	08001c71 	.word	0x08001c71
 8001c4c:	08001c91 	.word	0x08001c91
 8001c50:	08001ca3 	.word	0x08001ca3
 8001c54:	08001cb5 	.word	0x08001cb5
 8001c58:	08001cb5 	.word	0x08001cb5
 8001c5c:	08001cb5 	.word	0x08001cb5
 8001c60:	08001cb5 	.word	0x08001cb5
 8001c64:	08001cb5 	.word	0x08001cb5
 8001c68:	08001cb5 	.word	0x08001cb5
 8001c6c:	08001c83 	.word	0x08001c83
    {
        case U8X8_MSG_BYTE_SEND:
            (void)HAL_SPI_Transmit(&hspi3, (uint8_t *)arg_ptr, arg_int, SPI_TIMEOUT_U32);
 8001c70:	7abb      	ldrb	r3, [r7, #10]
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	4813      	ldr	r0, [pc, #76]	@ (8001cc8 <u8x8_byte_4wire_hw_spi+0xb0>)
 8001c7c:	f008 fa47 	bl	800a10e <HAL_SPI_Transmit>
            break;
 8001c80:	e01c      	b.n	8001cbc <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_INIT:
            break;
        case U8X8_MSG_BYTE_SET_DC:
            HAL_GPIO_WritePin(DISPLAY_IO_2_GPIO_Port, DISPLAY_IO_2_Pin, (GPIO_PinState)arg_int);
 8001c82:	7abb      	ldrb	r3, [r7, #10]
 8001c84:	461a      	mov	r2, r3
 8001c86:	2108      	movs	r1, #8
 8001c88:	4810      	ldr	r0, [pc, #64]	@ (8001ccc <u8x8_byte_4wire_hw_spi+0xb4>)
 8001c8a:	f006 fc23 	bl	80084d4 <HAL_GPIO_WritePin>
            break;
 8001c8e:	e015      	b.n	8001cbc <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_START_TRANSFER:
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, u8x8->display_info->chip_enable_level);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	461a      	mov	r2, r3
 8001c98:	2104      	movs	r1, #4
 8001c9a:	480d      	ldr	r0, [pc, #52]	@ (8001cd0 <u8x8_byte_4wire_hw_spi+0xb8>)
 8001c9c:	f006 fc1a 	bl	80084d4 <HAL_GPIO_WritePin>
            break;
 8001ca0:	e00c      	b.n	8001cbc <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_END_TRANSFER:
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, u8x8->display_info->chip_disable_level);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	785b      	ldrb	r3, [r3, #1]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	2104      	movs	r1, #4
 8001cac:	4808      	ldr	r0, [pc, #32]	@ (8001cd0 <u8x8_byte_4wire_hw_spi+0xb8>)
 8001cae:	f006 fc11 	bl	80084d4 <HAL_GPIO_WritePin>
            break;
 8001cb2:	e003      	b.n	8001cbc <u8x8_byte_4wire_hw_spi+0xa4>
        default:
            retVal = 0U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	75fb      	strb	r3, [r7, #23]
            break;
 8001cb8:	e000      	b.n	8001cbc <u8x8_byte_4wire_hw_spi+0xa4>
            break;
 8001cba:	bf00      	nop
    }
    return retVal;
 8001cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200019fc 	.word	0x200019fc
 8001ccc:	40021800 	.word	0x40021800
 8001cd0:	40020c00 	.word	0x40020c00

08001cd4 <Display_Init>:

/**
 * @brief Initializes the display hardware and u8g2 library.
 */
void Display_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
    /* Turn on the backlight */
    HAL_GPIO_WritePin(BACKLIGHT_1_GPIO_Port, BACKLIGHT_1_Pin, GPIO_PIN_SET);
 8001cd8:	2201      	movs	r2, #1
 8001cda:	2110      	movs	r1, #16
 8001cdc:	480c      	ldr	r0, [pc, #48]	@ (8001d10 <Display_Init+0x3c>)
 8001cde:	f006 fbf9 	bl	80084d4 <HAL_GPIO_WritePin>

    /* Setup u8g2 for the ST7565 display.
       Adjust the setup function if your display type differs. */
    u8g2_Setup_st7565_64128n_f(&u8g2, U8G2_R2, u8x8_byte_4wire_hw_spi, u8x8_stm32_gpio_and_delay);
 8001ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8001d14 <Display_Init+0x40>)
 8001ce4:	4a0c      	ldr	r2, [pc, #48]	@ (8001d18 <Display_Init+0x44>)
 8001ce6:	490d      	ldr	r1, [pc, #52]	@ (8001d1c <Display_Init+0x48>)
 8001ce8:	480d      	ldr	r0, [pc, #52]	@ (8001d20 <Display_Init+0x4c>)
 8001cea:	f000 fa17 	bl	800211c <u8g2_Setup_st7565_64128n_f>
    u8g2_InitDisplay(&u8g2);
 8001cee:	480c      	ldr	r0, [pc, #48]	@ (8001d20 <Display_Init+0x4c>)
 8001cf0:	f001 fe22 	bl	8003938 <u8x8_InitDisplay>
    u8g2_SetPowerSave(&u8g2, 0);
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	480a      	ldr	r0, [pc, #40]	@ (8001d20 <Display_Init+0x4c>)
 8001cf8:	f001 fe2d 	bl	8003956 <u8x8_SetPowerSave>
    u8g2_ClearDisplay(&u8g2);
 8001cfc:	4808      	ldr	r0, [pc, #32]	@ (8001d20 <Display_Init+0x4c>)
 8001cfe:	f000 f9e7 	bl	80020d0 <u8g2_ClearDisplay>
    u8g2_SetContrast(&u8g2, CONTRAST_VALUE_U8);
 8001d02:	2178      	movs	r1, #120	@ 0x78
 8001d04:	4806      	ldr	r0, [pc, #24]	@ (8001d20 <Display_Init+0x4c>)
 8001d06:	f001 fe37 	bl	8003978 <u8x8_SetContrast>
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40021800 	.word	0x40021800
 8001d14:	08001bad 	.word	0x08001bad
 8001d18:	08001c19 	.word	0x08001c19
 8001d1c:	0800d19c 	.word	0x0800d19c
 8001d20:	20000a48 	.word	0x20000a48

08001d24 <Display_MainTitlePage>:
 * @brief Displays the main title page.
 *
 * This function draws the main title page with a logo and text.
 */
void Display_MainTitlePage(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af02      	add	r7, sp, #8
    do
    {
        /* Begin a new page */
        u8g2_FirstPage(&u8g2);
 8001d2a:	4824      	ldr	r0, [pc, #144]	@ (8001dbc <Display_MainTitlePage+0x98>)
 8001d2c:	f000 f98e 	bl	800204c <u8g2_FirstPage>
        do
        {
            /* Draw the logo image */
            u8g2_DrawXBM(&u8g2, 0, 0, 128, 64, logo);
 8001d30:	4b23      	ldr	r3, [pc, #140]	@ (8001dc0 <Display_MainTitlePage+0x9c>)
 8001d32:	9301      	str	r3, [sp, #4]
 8001d34:	2340      	movs	r3, #64	@ 0x40
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	2380      	movs	r3, #128	@ 0x80
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	481f      	ldr	r0, [pc, #124]	@ (8001dbc <Display_MainTitlePage+0x98>)
 8001d40:	f000 f8b6 	bl	8001eb0 <u8g2_DrawXBM>
        }
        while (u8g2_NextPage(&u8g2) != 0U);
 8001d44:	481d      	ldr	r0, [pc, #116]	@ (8001dbc <Display_MainTitlePage+0x98>)
 8001d46:	f000 f995 	bl	8002074 <u8g2_NextPage>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1ef      	bne.n	8001d30 <Display_MainTitlePage+0xc>

        HAL_Delay(PAGE_DELAY_U32);
 8001d50:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d54:	f005 fd16 	bl	8007784 <HAL_Delay>

        /* Clear the buffer and draw title text */
        u8g2_ClearBuffer(&u8g2);
 8001d58:	4818      	ldr	r0, [pc, #96]	@ (8001dbc <Display_MainTitlePage+0x98>)
 8001d5a:	f000 f8ec 	bl	8001f36 <u8g2_ClearBuffer>
        u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 8001d5e:	4919      	ldr	r1, [pc, #100]	@ (8001dc4 <Display_MainTitlePage+0xa0>)
 8001d60:	4816      	ldr	r0, [pc, #88]	@ (8001dbc <Display_MainTitlePage+0x98>)
 8001d62:	f000 ff8b 	bl	8002c7c <u8g2_SetFont>
        u8g2_DrawStr(&u8g2, 42, 16, "VEGA");
 8001d66:	4b18      	ldr	r3, [pc, #96]	@ (8001dc8 <Display_MainTitlePage+0xa4>)
 8001d68:	2210      	movs	r2, #16
 8001d6a:	212a      	movs	r1, #42	@ 0x2a
 8001d6c:	4813      	ldr	r0, [pc, #76]	@ (8001dbc <Display_MainTitlePage+0x98>)
 8001d6e:	f000 fee3 	bl	8002b38 <u8g2_DrawStr>
        u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 8001d72:	4914      	ldr	r1, [pc, #80]	@ (8001dc4 <Display_MainTitlePage+0xa0>)
 8001d74:	4811      	ldr	r0, [pc, #68]	@ (8001dbc <Display_MainTitlePage+0x98>)
 8001d76:	f000 ff81 	bl	8002c7c <u8g2_SetFont>
        u8g2_DrawStr(&u8g2, 6, 33, "INNOVATIONS");
 8001d7a:	4b14      	ldr	r3, [pc, #80]	@ (8001dcc <Display_MainTitlePage+0xa8>)
 8001d7c:	2221      	movs	r2, #33	@ 0x21
 8001d7e:	2106      	movs	r1, #6
 8001d80:	480e      	ldr	r0, [pc, #56]	@ (8001dbc <Display_MainTitlePage+0x98>)
 8001d82:	f000 fed9 	bl	8002b38 <u8g2_DrawStr>
        HAL_Delay(TEXT_DELAY_U32);
 8001d86:	200a      	movs	r0, #10
 8001d88:	f005 fcfc 	bl	8007784 <HAL_Delay>
        u8g2_ClearBuffer(&u8g2);
 8001d8c:	480b      	ldr	r0, [pc, #44]	@ (8001dbc <Display_MainTitlePage+0x98>)
 8001d8e:	f000 f8d2 	bl	8001f36 <u8g2_ClearBuffer>
    }
    while (u8g2_NextPage(&u8g2) != 0U);
 8001d92:	480a      	ldr	r0, [pc, #40]	@ (8001dbc <Display_MainTitlePage+0x98>)
 8001d94:	f000 f96e 	bl	8002074 <u8g2_NextPage>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1c5      	bne.n	8001d2a <Display_MainTitlePage+0x6>

    HAL_Delay(FINAL_PAGE_DELAY_U32);
 8001d9e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001da2:	f005 fcef 	bl	8007784 <HAL_Delay>

    u8g2_ClearBuffer(&u8g2);
 8001da6:	4805      	ldr	r0, [pc, #20]	@ (8001dbc <Display_MainTitlePage+0x98>)
 8001da8:	f000 f8c5 	bl	8001f36 <u8g2_ClearBuffer>

    HAL_GPIO_WritePin(BACKLIGHT_1_GPIO_Port, BACKLIGHT_1_Pin, GPIO_PIN_RESET);
 8001dac:	2200      	movs	r2, #0
 8001dae:	2110      	movs	r1, #16
 8001db0:	4807      	ldr	r0, [pc, #28]	@ (8001dd0 <Display_MainTitlePage+0xac>)
 8001db2:	f006 fb8f 	bl	80084d4 <HAL_GPIO_WritePin>
}
 8001db6:	bf00      	nop
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000a48 	.word	0x20000a48
 8001dc0:	20000168 	.word	0x20000168
 8001dc4:	0800c544 	.word	0x0800c544
 8001dc8:	0800c4e4 	.word	0x0800c4e4
 8001dcc:	0800c4ec 	.word	0x0800c4ec
 8001dd0:	40021800 	.word	0x40021800

08001dd4 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b088      	sub	sp, #32
 8001dd8:	af02      	add	r7, sp, #8
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	4608      	mov	r0, r1
 8001dde:	4611      	mov	r1, r2
 8001de0:	461a      	mov	r2, r3
 8001de2:	4603      	mov	r3, r0
 8001de4:	817b      	strh	r3, [r7, #10]
 8001de6:	460b      	mov	r3, r1
 8001de8:	813b      	strh	r3, [r7, #8]
 8001dea:	4613      	mov	r3, r2
 8001dec:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001df4:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8001df6:	7dbb      	ldrb	r3, [r7, #22]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	bf0c      	ite	eq
 8001dfc:	2301      	moveq	r3, #1
 8001dfe:	2300      	movne	r3, #0
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8001e04:	897a      	ldrh	r2, [r7, #10]
 8001e06:	88fb      	ldrh	r3, [r7, #6]
 8001e08:	4413      	add	r3, r2
 8001e0a:	b298      	uxth	r0, r3
 8001e0c:	893b      	ldrh	r3, [r7, #8]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	893a      	ldrh	r2, [r7, #8]
 8001e14:	8979      	ldrh	r1, [r7, #10]
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	4603      	mov	r3, r0
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f001 f875 	bl	8002f0a <u8g2_IsIntersection>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d040      	beq.n	8001ea8 <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8001e26:	2301      	movs	r3, #1
 8001e28:	75fb      	strb	r3, [r7, #23]
  while(len > 0) {
 8001e2a:	e035      	b.n	8001e98 <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	781a      	ldrb	r2, [r3, #0]
 8001e30:	7dfb      	ldrb	r3, [r7, #23]
 8001e32:	4013      	ands	r3, r2
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00c      	beq.n	8001e54 <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	7dba      	ldrb	r2, [r7, #22]
 8001e3e:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001e42:	893a      	ldrh	r2, [r7, #8]
 8001e44:	8979      	ldrh	r1, [r7, #10]
 8001e46:	2300      	movs	r3, #0
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	68f8      	ldr	r0, [r7, #12]
 8001e4e:	f000 ff9e 	bl	8002d8e <u8g2_DrawHVLine>
 8001e52:	e010      	b.n	8001e76 <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10b      	bne.n	8001e76 <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	7d7a      	ldrb	r2, [r7, #21]
 8001e62:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001e66:	893a      	ldrh	r2, [r7, #8]
 8001e68:	8979      	ldrh	r1, [r7, #10]
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	2301      	movs	r3, #1
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f000 ff8c 	bl	8002d8e <u8g2_DrawHVLine>
    }
    x++;
 8001e76:	897b      	ldrh	r3, [r7, #10]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 8001e7c:	7dfb      	ldrb	r3, [r7, #23]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 8001e82:	7dfb      	ldrb	r3, [r7, #23]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d104      	bne.n	8001e92 <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	75fb      	strb	r3, [r7, #23]
      b++;
 8001e8c:	6a3b      	ldr	r3, [r7, #32]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	623b      	str	r3, [r7, #32]
    }
    len--;
 8001e92:	88fb      	ldrh	r3, [r7, #6]
 8001e94:	3b01      	subs	r3, #1
 8001e96:	80fb      	strh	r3, [r7, #6]
  while(len > 0) {
 8001e98:	88fb      	ldrh	r3, [r7, #6]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1c6      	bne.n	8001e2c <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	7dba      	ldrb	r2, [r7, #22]
 8001ea2:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
 8001ea6:	e000      	b.n	8001eaa <u8g2_DrawHXBM+0xd6>
    return;
 8001ea8:	bf00      	nop
}
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af02      	add	r7, sp, #8
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	4608      	mov	r0, r1
 8001eba:	4611      	mov	r1, r2
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	817b      	strh	r3, [r7, #10]
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	813b      	strh	r3, [r7, #8]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 8001eca:	88fb      	ldrh	r3, [r7, #6]
 8001ecc:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 8001ece:	8afb      	ldrh	r3, [r7, #22]
 8001ed0:	3307      	adds	r3, #7
 8001ed2:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 8001ed4:	8afb      	ldrh	r3, [r7, #22]
 8001ed6:	08db      	lsrs	r3, r3, #3
 8001ed8:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001eda:	897a      	ldrh	r2, [r7, #10]
 8001edc:	88fb      	ldrh	r3, [r7, #6]
 8001ede:	4413      	add	r3, r2
 8001ee0:	b298      	uxth	r0, r3
 8001ee2:	893a      	ldrh	r2, [r7, #8]
 8001ee4:	8c3b      	ldrh	r3, [r7, #32]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	893a      	ldrh	r2, [r7, #8]
 8001eec:	8979      	ldrh	r1, [r7, #10]
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f001 f809 	bl	8002f0a <u8g2_IsIntersection>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d017      	beq.n	8001f2e <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8001efe:	e012      	b.n	8001f26 <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8001f00:	88f8      	ldrh	r0, [r7, #6]
 8001f02:	893a      	ldrh	r2, [r7, #8]
 8001f04:	8979      	ldrh	r1, [r7, #10]
 8001f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	f7ff ff61 	bl	8001dd4 <u8g2_DrawHXBM>
    bitmap += blen;
 8001f12:	8afb      	ldrh	r3, [r7, #22]
 8001f14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f16:	4413      	add	r3, r2
 8001f18:	627b      	str	r3, [r7, #36]	@ 0x24
    y++;
 8001f1a:	893b      	ldrh	r3, [r7, #8]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	813b      	strh	r3, [r7, #8]
    h--;
 8001f20:	8c3b      	ldrh	r3, [r7, #32]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 8001f26:	8c3b      	ldrh	r3, [r7, #32]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1e9      	bne.n	8001f00 <u8g2_DrawXBM+0x50>
 8001f2c:	e000      	b.n	8001f30 <u8g2_DrawXBM+0x80>
    return;
 8001f2e:	bf00      	nop
  }
}
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b084      	sub	sp, #16
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	7c1b      	ldrb	r3, [r3, #16]
 8001f44:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	fb02 f303 	mul.w	r3, r2, r3
 8001f54:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f00a fa23 	bl	800c3b0 <memset>
}
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b086      	sub	sp, #24
 8001f76:	af02      	add	r7, sp, #8
 8001f78:	6078      	str	r0, [r7, #4]
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	70fb      	strb	r3, [r7, #3]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	7c1b      	ldrb	r3, [r3, #16]
 8001f88:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8001f8a:	78fb      	ldrb	r3, [r7, #3]
 8001f8c:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f92:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	89ba      	ldrh	r2, [r7, #12]
 8001f9a:	fb12 f303 	smulbb	r3, r2, r3
 8001f9e:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8001fa0:	89bb      	ldrh	r3, [r7, #12]
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8001fa6:	89bb      	ldrh	r3, [r7, #12]
 8001fa8:	68ba      	ldr	r2, [r7, #8]
 8001faa:	4413      	add	r3, r2
 8001fac:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001fae:	7bf9      	ldrb	r1, [r7, #15]
 8001fb0:	78ba      	ldrb	r2, [r7, #2]
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	2100      	movs	r1, #0
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f001 fc8b 	bl	80038d6 <u8x8_DrawTile>
}
 8001fc0:	bf00      	nop
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001fda:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001fe2:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	7c5b      	ldrb	r3, [r3, #17]
 8001fea:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8001fec:	7bba      	ldrb	r2, [r7, #14]
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff ffbd 	bl	8001f72 <u8g2_send_tile_row>
    src_row++;
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8001ffe:	7bbb      	ldrb	r3, [r7, #14]
 8002000:	3301      	adds	r3, #1
 8002002:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8002004:	7bfa      	ldrb	r2, [r7, #15]
 8002006:	7b7b      	ldrb	r3, [r7, #13]
 8002008:	429a      	cmp	r2, r3
 800200a:	d203      	bcs.n	8002014 <u8g2_send_buffer+0x4c>
 800200c:	7bba      	ldrb	r2, [r7, #14]
 800200e:	7b3b      	ldrb	r3, [r7, #12]
 8002010:	429a      	cmp	r2, r3
 8002012:	d3eb      	bcc.n	8001fec <u8g2_send_buffer+0x24>
}
 8002014:	bf00      	nop
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	78fa      	ldrb	r2, [r7, #3]
 800202c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  u8g2->cb->update_dimension(u8g2);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	4798      	blx	r3
}
 8002044:	bf00      	nop
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800205a:	2b00      	cmp	r3, #0
 800205c:	d002      	beq.n	8002064 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff ff69 	bl	8001f36 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8002064:	2100      	movs	r1, #0
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff ffd8 	bl	800201c <u8g2_SetBufferCurrTileRow>
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f7ff ffa3 	bl	8001fc8 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002088:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8002090:	7bfb      	ldrb	r3, [r7, #15]
 8002092:	4413      	add	r3, r2
 8002094:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	7c5b      	ldrb	r3, [r3, #17]
 800209c:	7bfa      	ldrb	r2, [r7, #15]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d304      	bcc.n	80020ac <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f001 fc79 	bl	800399a <u8x8_RefreshDisplay>
    return 0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	e00d      	b.n	80020c8 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d002      	beq.n	80020bc <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7ff ff3d 	bl	8001f36 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	4619      	mov	r1, r3
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff ffab 	bl	800201c <u8g2_SetBufferCurrTileRow>
  return 1;
 80020c6:	2301      	movs	r3, #1
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff ffb7 	bl	800204c <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff ffc8 	bl	8002074 <u8g2_NextPage>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f9      	bne.n	80020de <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 80020ea:	2100      	movs	r1, #0
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff ff95 	bl	800201c <u8g2_SetBufferCurrTileRow>
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2208      	movs	r2, #8
 8002108:	701a      	strb	r2, [r3, #0]
  return buf;
 800210a:	4b03      	ldr	r3, [pc, #12]	@ (8002118 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 800210c:	4618      	mov	r0, r3
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	20000adc 	.word	0x20000adc

0800211c <u8g2_Setup_st7565_64128n_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_lm6063, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_64128n_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af02      	add	r7, sp, #8
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
 8002128:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_64128n, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a0b      	ldr	r2, [pc, #44]	@ (8002160 <u8g2_Setup_st7565_64128n_f+0x44>)
 8002132:	490c      	ldr	r1, [pc, #48]	@ (8002164 <u8g2_Setup_st7565_64128n_f+0x48>)
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f001 fc91 	bl	8003a5c <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 800213a:	f107 0313 	add.w	r3, r7, #19
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff ffdc 	bl	80020fc <u8g2_m_16_8_f>
 8002144:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8002146:	7cfa      	ldrb	r2, [r7, #19]
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	4b06      	ldr	r3, [pc, #24]	@ (8002168 <u8g2_Setup_st7565_64128n_f+0x4c>)
 800214e:	6979      	ldr	r1, [r7, #20]
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 ffc4 	bl	80030de <u8g2_SetupBuffer>
}
 8002156:	bf00      	nop
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	080035f1 	.word	0x080035f1
 8002164:	08003791 	.word	0x08003791
 8002168:	08002f61 	.word	0x08002f61

0800216c <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8002178:	78fb      	ldrb	r3, [r7, #3]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	4413      	add	r3, r2
 800217e:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	781b      	ldrb	r3, [r3, #0]
}
 8002184:	4618      	mov	r0, r3
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 800219c:	78fb      	ldrb	r3, [r7, #3]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	81fb      	strh	r3, [r7, #14]
    font++;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3301      	adds	r3, #1
 80021ae:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80021b0:	89fb      	ldrh	r3, [r7, #14]
 80021b2:	021b      	lsls	r3, r3, #8
 80021b4:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	461a      	mov	r2, r3
 80021bc:	89fb      	ldrh	r3, [r7, #14]
 80021be:	4413      	add	r3, r2
 80021c0:	81fb      	strh	r3, [r7, #14]
    return pos;
 80021c2:	89fb      	ldrh	r3, [r7, #14]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80021da:	2100      	movs	r1, #0
 80021dc:	6838      	ldr	r0, [r7, #0]
 80021de:	f7ff ffc5 	bl	800216c <u8g2_font_get_byte>
 80021e2:	4603      	mov	r3, r0
 80021e4:	461a      	mov	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80021ea:	2101      	movs	r1, #1
 80021ec:	6838      	ldr	r0, [r7, #0]
 80021ee:	f7ff ffbd 	bl	800216c <u8g2_font_get_byte>
 80021f2:	4603      	mov	r3, r0
 80021f4:	461a      	mov	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80021fa:	2102      	movs	r1, #2
 80021fc:	6838      	ldr	r0, [r7, #0]
 80021fe:	f7ff ffb5 	bl	800216c <u8g2_font_get_byte>
 8002202:	4603      	mov	r3, r0
 8002204:	461a      	mov	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800220a:	2103      	movs	r1, #3
 800220c:	6838      	ldr	r0, [r7, #0]
 800220e:	f7ff ffad 	bl	800216c <u8g2_font_get_byte>
 8002212:	4603      	mov	r3, r0
 8002214:	461a      	mov	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800221a:	2104      	movs	r1, #4
 800221c:	6838      	ldr	r0, [r7, #0]
 800221e:	f7ff ffa5 	bl	800216c <u8g2_font_get_byte>
 8002222:	4603      	mov	r3, r0
 8002224:	461a      	mov	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800222a:	2105      	movs	r1, #5
 800222c:	6838      	ldr	r0, [r7, #0]
 800222e:	f7ff ff9d 	bl	800216c <u8g2_font_get_byte>
 8002232:	4603      	mov	r3, r0
 8002234:	461a      	mov	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800223a:	2106      	movs	r1, #6
 800223c:	6838      	ldr	r0, [r7, #0]
 800223e:	f7ff ff95 	bl	800216c <u8g2_font_get_byte>
 8002242:	4603      	mov	r3, r0
 8002244:	461a      	mov	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800224a:	2107      	movs	r1, #7
 800224c:	6838      	ldr	r0, [r7, #0]
 800224e:	f7ff ff8d 	bl	800216c <u8g2_font_get_byte>
 8002252:	4603      	mov	r3, r0
 8002254:	461a      	mov	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800225a:	2108      	movs	r1, #8
 800225c:	6838      	ldr	r0, [r7, #0]
 800225e:	f7ff ff85 	bl	800216c <u8g2_font_get_byte>
 8002262:	4603      	mov	r3, r0
 8002264:	461a      	mov	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800226a:	2109      	movs	r1, #9
 800226c:	6838      	ldr	r0, [r7, #0]
 800226e:	f7ff ff7d 	bl	800216c <u8g2_font_get_byte>
 8002272:	4603      	mov	r3, r0
 8002274:	b25a      	sxtb	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800227a:	210a      	movs	r1, #10
 800227c:	6838      	ldr	r0, [r7, #0]
 800227e:	f7ff ff75 	bl	800216c <u8g2_font_get_byte>
 8002282:	4603      	mov	r3, r0
 8002284:	b25a      	sxtb	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 800228a:	210b      	movs	r1, #11
 800228c:	6838      	ldr	r0, [r7, #0]
 800228e:	f7ff ff6d 	bl	800216c <u8g2_font_get_byte>
 8002292:	4603      	mov	r3, r0
 8002294:	b25a      	sxtb	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 800229a:	210c      	movs	r1, #12
 800229c:	6838      	ldr	r0, [r7, #0]
 800229e:	f7ff ff65 	bl	800216c <u8g2_font_get_byte>
 80022a2:	4603      	mov	r3, r0
 80022a4:	b25a      	sxtb	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80022aa:	210d      	movs	r1, #13
 80022ac:	6838      	ldr	r0, [r7, #0]
 80022ae:	f7ff ff5d 	bl	800216c <u8g2_font_get_byte>
 80022b2:	4603      	mov	r3, r0
 80022b4:	b25a      	sxtb	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80022ba:	210e      	movs	r1, #14
 80022bc:	6838      	ldr	r0, [r7, #0]
 80022be:	f7ff ff55 	bl	800216c <u8g2_font_get_byte>
 80022c2:	4603      	mov	r3, r0
 80022c4:	b25a      	sxtb	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80022ca:	210f      	movs	r1, #15
 80022cc:	6838      	ldr	r0, [r7, #0]
 80022ce:	f7ff ff4d 	bl	800216c <u8g2_font_get_byte>
 80022d2:	4603      	mov	r3, r0
 80022d4:	b25a      	sxtb	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80022da:	2110      	movs	r1, #16
 80022dc:	6838      	ldr	r0, [r7, #0]
 80022de:	f7ff ff45 	bl	800216c <u8g2_font_get_byte>
 80022e2:	4603      	mov	r3, r0
 80022e4:	b25a      	sxtb	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80022ea:	2111      	movs	r1, #17
 80022ec:	6838      	ldr	r0, [r7, #0]
 80022ee:	f7ff ff4f 	bl	8002190 <u8g2_font_get_word>
 80022f2:	4603      	mov	r3, r0
 80022f4:	461a      	mov	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80022fa:	2113      	movs	r1, #19
 80022fc:	6838      	ldr	r0, [r7, #0]
 80022fe:	f7ff ff47 	bl	8002190 <u8g2_font_get_word>
 8002302:	4603      	mov	r3, r0
 8002304:	461a      	mov	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800230a:	2115      	movs	r1, #21
 800230c:	6838      	ldr	r0, [r7, #0]
 800230e:	f7ff ff3f 	bl	8002190 <u8g2_font_get_word>
 8002312:	4603      	mov	r3, r0
 8002314:	461a      	mov	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	82da      	strh	r2, [r3, #22]
#endif
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8002322:	b480      	push	{r7}
 8002324:	b085      	sub	sp, #20
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	460b      	mov	r3, r1
 800232c:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	7b1b      	ldrb	r3, [r3, #12]
 8002332:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 800233c:	7bfa      	ldrb	r2, [r7, #15]
 800233e:	7b7b      	ldrb	r3, [r7, #13]
 8002340:	fa42 f303 	asr.w	r3, r2, r3
 8002344:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8002346:	7b7b      	ldrb	r3, [r7, #13]
 8002348:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800234a:	7bba      	ldrb	r2, [r7, #14]
 800234c:	78fb      	ldrb	r3, [r7, #3]
 800234e:	4413      	add	r3, r2
 8002350:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8002352:	7bbb      	ldrb	r3, [r7, #14]
 8002354:	2b07      	cmp	r3, #7
 8002356:	d91a      	bls.n	800238e <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8002358:	2308      	movs	r3, #8
 800235a:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 800235c:	7b3a      	ldrb	r2, [r7, #12]
 800235e:	7b7b      	ldrb	r3, [r7, #13]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	1c5a      	adds	r2, r3, #1
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	461a      	mov	r2, r3
 8002376:	7b3b      	ldrb	r3, [r7, #12]
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	b25a      	sxtb	r2, r3
 800237e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002382:	4313      	orrs	r3, r2
 8002384:	b25b      	sxtb	r3, r3
 8002386:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8002388:	7bbb      	ldrb	r3, [r7, #14]
 800238a:	3b08      	subs	r3, #8
 800238c:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 800238e:	78fb      	ldrb	r3, [r7, #3]
 8002390:	f04f 32ff 	mov.w	r2, #4294967295
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	b2db      	uxtb	r3, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	b2da      	uxtb	r2, r3
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	4013      	ands	r3, r2
 80023a2:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	7bba      	ldrb	r2, [r7, #14]
 80023a8:	731a      	strb	r2, [r3, #12]
  return val;
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 80023c4:	78fb      	ldrb	r3, [r7, #3]
 80023c6:	4619      	mov	r1, r3
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7ff ffaa 	bl	8002322 <u8g2_font_decode_get_unsigned_bits>
 80023ce:	4603      	mov	r3, r0
 80023d0:	73fb      	strb	r3, [r7, #15]
  d = 1;
 80023d2:	2301      	movs	r3, #1
 80023d4:	73bb      	strb	r3, [r7, #14]
  cnt--;
 80023d6:	78fb      	ldrb	r3, [r7, #3]
 80023d8:	3b01      	subs	r3, #1
 80023da:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 80023dc:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	73bb      	strb	r3, [r7, #14]
  v -= d;
 80023e8:	7bfa      	ldrb	r2, [r7, #15]
 80023ea:	7bbb      	ldrb	r3, [r7, #14]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	73fb      	strb	r3, [r7, #15]
  return v;
 80023f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 80023fe:	b490      	push	{r4, r7}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	4604      	mov	r4, r0
 8002406:	4608      	mov	r0, r1
 8002408:	4611      	mov	r1, r2
 800240a:	461a      	mov	r2, r3
 800240c:	4623      	mov	r3, r4
 800240e:	80fb      	strh	r3, [r7, #6]
 8002410:	4603      	mov	r3, r0
 8002412:	717b      	strb	r3, [r7, #5]
 8002414:	460b      	mov	r3, r1
 8002416:	713b      	strb	r3, [r7, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 800241c:	78fb      	ldrb	r3, [r7, #3]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d014      	beq.n	800244c <u8g2_add_vector_y+0x4e>
 8002422:	2b02      	cmp	r3, #2
 8002424:	dc19      	bgt.n	800245a <u8g2_add_vector_y+0x5c>
 8002426:	2b00      	cmp	r3, #0
 8002428:	d002      	beq.n	8002430 <u8g2_add_vector_y+0x32>
 800242a:	2b01      	cmp	r3, #1
 800242c:	d007      	beq.n	800243e <u8g2_add_vector_y+0x40>
 800242e:	e014      	b.n	800245a <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8002430:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002434:	b29a      	uxth	r2, r3
 8002436:	88fb      	ldrh	r3, [r7, #6]
 8002438:	4413      	add	r3, r2
 800243a:	80fb      	strh	r3, [r7, #6]
      break;
 800243c:	e014      	b.n	8002468 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 800243e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002442:	b29a      	uxth	r2, r3
 8002444:	88fb      	ldrh	r3, [r7, #6]
 8002446:	4413      	add	r3, r2
 8002448:	80fb      	strh	r3, [r7, #6]
      break;
 800244a:	e00d      	b.n	8002468 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 800244c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002450:	b29b      	uxth	r3, r3
 8002452:	88fa      	ldrh	r2, [r7, #6]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	80fb      	strh	r3, [r7, #6]
      break;
 8002458:	e006      	b.n	8002468 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 800245a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800245e:	b29b      	uxth	r3, r3
 8002460:	88fa      	ldrh	r2, [r7, #6]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	80fb      	strh	r3, [r7, #6]
      break;      
 8002466:	bf00      	nop
  }
  return dy;
 8002468:	88fb      	ldrh	r3, [r7, #6]
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bc90      	pop	{r4, r7}
 8002472:	4770      	bx	lr

08002474 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8002474:	b490      	push	{r4, r7}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	4604      	mov	r4, r0
 800247c:	4608      	mov	r0, r1
 800247e:	4611      	mov	r1, r2
 8002480:	461a      	mov	r2, r3
 8002482:	4623      	mov	r3, r4
 8002484:	80fb      	strh	r3, [r7, #6]
 8002486:	4603      	mov	r3, r0
 8002488:	717b      	strb	r3, [r7, #5]
 800248a:	460b      	mov	r3, r1
 800248c:	713b      	strb	r3, [r7, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8002492:	78fb      	ldrb	r3, [r7, #3]
 8002494:	2b02      	cmp	r3, #2
 8002496:	d014      	beq.n	80024c2 <u8g2_add_vector_x+0x4e>
 8002498:	2b02      	cmp	r3, #2
 800249a:	dc19      	bgt.n	80024d0 <u8g2_add_vector_x+0x5c>
 800249c:	2b00      	cmp	r3, #0
 800249e:	d002      	beq.n	80024a6 <u8g2_add_vector_x+0x32>
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d007      	beq.n	80024b4 <u8g2_add_vector_x+0x40>
 80024a4:	e014      	b.n	80024d0 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 80024a6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	88fb      	ldrh	r3, [r7, #6]
 80024ae:	4413      	add	r3, r2
 80024b0:	80fb      	strh	r3, [r7, #6]
      break;
 80024b2:	e014      	b.n	80024de <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 80024b4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	88fa      	ldrh	r2, [r7, #6]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	80fb      	strh	r3, [r7, #6]
      break;
 80024c0:	e00d      	b.n	80024de <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 80024c2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	88fa      	ldrh	r2, [r7, #6]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	80fb      	strh	r3, [r7, #6]
      break;
 80024ce:	e006      	b.n	80024de <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 80024d0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	88fb      	ldrh	r3, [r7, #6]
 80024d8:	4413      	add	r3, r2
 80024da:	80fb      	strh	r3, [r7, #6]
      break;      
 80024dc:	bf00      	nop
  }
  return dx;
 80024de:	88fb      	ldrh	r3, [r7, #6]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc90      	pop	{r4, r7}
 80024e8:	4770      	bx	lr

080024ea <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b088      	sub	sp, #32
 80024ee:	af02      	add	r7, sp, #8
 80024f0:	6078      	str	r0, [r7, #4]
 80024f2:	460b      	mov	r3, r1
 80024f4:	70fb      	strb	r3, [r7, #3]
 80024f6:	4613      	mov	r3, r2
 80024f8:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3360      	adds	r3, #96	@ 0x60
 80024fe:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8002500:	78fb      	ldrb	r3, [r7, #3]
 8002502:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800250a:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002512:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800251a:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 800251c:	7bfa      	ldrb	r2, [r7, #15]
 800251e:	7d7b      	ldrb	r3, [r7, #21]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8002528:	7dfa      	ldrb	r2, [r7, #23]
 800252a:	7bfb      	ldrb	r3, [r7, #15]
 800252c:	429a      	cmp	r2, r3
 800252e:	d201      	bcs.n	8002534 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8002530:	7dfb      	ldrb	r3, [r7, #23]
 8002532:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	889b      	ldrh	r3, [r3, #4]
 8002538:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	88db      	ldrh	r3, [r3, #6]
 800253e:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8002540:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8002544:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	7c1b      	ldrb	r3, [r3, #16]
 800254c:	89b8      	ldrh	r0, [r7, #12]
 800254e:	f7ff ff91 	bl	8002474 <u8g2_add_vector_x>
 8002552:	4603      	mov	r3, r0
 8002554:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8002556:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800255a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	7c1b      	ldrb	r3, [r3, #16]
 8002562:	8978      	ldrh	r0, [r7, #10]
 8002564:	f7ff ff4b 	bl	80023fe <u8g2_add_vector_y>
 8002568:	4603      	mov	r3, r0
 800256a:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 800256c:	78bb      	ldrb	r3, [r7, #2]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d010      	beq.n	8002594 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	7b9a      	ldrb	r2, [r3, #14]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 800257c:	7dbb      	ldrb	r3, [r7, #22]
 800257e:	b298      	uxth	r0, r3
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	7c1b      	ldrb	r3, [r3, #16]
 8002584:	897a      	ldrh	r2, [r7, #10]
 8002586:	89b9      	ldrh	r1, [r7, #12]
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	4603      	mov	r3, r0
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 fbfe 	bl	8002d8e <u8g2_DrawHVLine>
 8002592:	e013      	b.n	80025bc <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	7b5b      	ldrb	r3, [r3, #13]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10f      	bne.n	80025bc <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	7bda      	ldrb	r2, [r3, #15]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 80025a6:	7dbb      	ldrb	r3, [r7, #22]
 80025a8:	b298      	uxth	r0, r3
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	7c1b      	ldrb	r3, [r3, #16]
 80025ae:	897a      	ldrh	r2, [r7, #10]
 80025b0:	89b9      	ldrh	r1, [r7, #12]
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	4603      	mov	r3, r0
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 fbe9 	bl	8002d8e <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 80025bc:	7dfa      	ldrb	r2, [r7, #23]
 80025be:	7bfb      	ldrb	r3, [r7, #15]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d309      	bcc.n	80025d8 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 80025c4:	7dfa      	ldrb	r2, [r7, #23]
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	757b      	strb	r3, [r7, #21]
    ly++;
 80025d0:	7d3b      	ldrb	r3, [r7, #20]
 80025d2:	3301      	adds	r3, #1
 80025d4:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 80025d6:	e79d      	b.n	8002514 <u8g2_font_decode_len+0x2a>
      break;
 80025d8:	bf00      	nop
  }
  lx += cnt;
 80025da:	7d7a      	ldrb	r2, [r7, #21]
 80025dc:	7dfb      	ldrb	r3, [r7, #23]
 80025de:	4413      	add	r3, r2
 80025e0:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 80025e2:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 80025ea:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	725a      	strb	r2, [r3, #9]
}
 80025f2:	bf00      	nop
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b084      	sub	sp, #16
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
 8002602:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3360      	adds	r3, #96	@ 0x60
 8002608:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 800261c:	4619      	mov	r1, r3
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f7ff fe7f 	bl	8002322 <u8g2_font_decode_get_unsigned_bits>
 8002624:	4603      	mov	r3, r0
 8002626:	b25a      	sxtb	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8002632:	4619      	mov	r1, r3
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f7ff fe74 	bl	8002322 <u8g2_font_decode_get_unsigned_bits>
 800263a:	4603      	mov	r3, r0
 800263c:	b25a      	sxtb	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	7b9b      	ldrb	r3, [r3, #14]
 8002650:	2b00      	cmp	r3, #0
 8002652:	bf0c      	ite	eq
 8002654:	2301      	moveq	r3, #1
 8002656:	2300      	movne	r3, #0
 8002658:	b2db      	uxtb	r3, r3
 800265a:	461a      	mov	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	73da      	strb	r2, [r3, #15]
}
 8002660:	bf00      	nop
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08a      	sub	sp, #40	@ 0x28
 800266c:	af02      	add	r7, sp, #8
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	3360      	adds	r3, #96	@ 0x60
 8002676:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8002678:	6839      	ldr	r1, [r7, #0]
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7ff ffbd 	bl	80025fa <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 8002686:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 800268e:	4619      	mov	r1, r3
 8002690:	6978      	ldr	r0, [r7, #20]
 8002692:	f7ff fe91 	bl	80023b8 <u8g2_font_decode_get_signed_bits>
 8002696:	4603      	mov	r3, r0
 8002698:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 80026a0:	4619      	mov	r1, r3
 80026a2:	6978      	ldr	r0, [r7, #20]
 80026a4:	f7ff fe88 	bl	80023b8 <u8g2_font_decode_get_signed_bits>
 80026a8:	4603      	mov	r3, r0
 80026aa:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80026b2:	4619      	mov	r1, r3
 80026b4:	6978      	ldr	r0, [r7, #20]
 80026b6:	f7ff fe7f 	bl	80023b8 <u8g2_font_decode_get_signed_bits>
 80026ba:	4603      	mov	r3, r0
 80026bc:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f340 80d7 	ble.w	8002878 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	8898      	ldrh	r0, [r3, #4]
 80026ce:	7cfa      	ldrb	r2, [r7, #19]
 80026d0:	7c7b      	ldrb	r3, [r7, #17]
 80026d2:	4413      	add	r3, r2
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	425b      	negs	r3, r3
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	b25a      	sxtb	r2, r3
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	7c1b      	ldrb	r3, [r3, #16]
 80026e0:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80026e4:	f7ff fec6 	bl	8002474 <u8g2_add_vector_x>
 80026e8:	4603      	mov	r3, r0
 80026ea:	461a      	mov	r2, r3
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	88d8      	ldrh	r0, [r3, #6]
 80026f4:	7cfa      	ldrb	r2, [r7, #19]
 80026f6:	7c7b      	ldrb	r3, [r7, #17]
 80026f8:	4413      	add	r3, r2
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	425b      	negs	r3, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	b25a      	sxtb	r2, r3
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	7c1b      	ldrb	r3, [r3, #16]
 8002706:	f997 1012 	ldrsb.w	r1, [r7, #18]
 800270a:	f7ff fe78 	bl	80023fe <u8g2_add_vector_y>
 800270e:	4603      	mov	r3, r0
 8002710:	461a      	mov	r2, r3
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	889b      	ldrh	r3, [r3, #4]
 800271a:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	88db      	ldrh	r3, [r3, #6]
 8002720:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8002722:	8bfb      	ldrh	r3, [r7, #30]
 8002724:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 8002726:	8b7b      	ldrh	r3, [r7, #26]
 8002728:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	7c1b      	ldrb	r3, [r3, #16]
 800272e:	2b03      	cmp	r3, #3
 8002730:	d85a      	bhi.n	80027e8 <u8g2_font_decode_glyph+0x180>
 8002732:	a201      	add	r2, pc, #4	@ (adr r2, 8002738 <u8g2_font_decode_glyph+0xd0>)
 8002734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002738:	08002749 	.word	0x08002749
 800273c:	08002765 	.word	0x08002765
 8002740:	0800278d 	.word	0x0800278d
 8002744:	080027c1 	.word	0x080027c1
      {
	case 0:
	    x1 += decode->glyph_width;
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800274e:	b29a      	uxth	r2, r3
 8002750:	8bbb      	ldrh	r3, [r7, #28]
 8002752:	4413      	add	r3, r2
 8002754:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8002756:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800275a:	b29a      	uxth	r2, r3
 800275c:	8b3b      	ldrh	r3, [r7, #24]
 800275e:	4413      	add	r3, r2
 8002760:	833b      	strh	r3, [r7, #24]
	    break;
 8002762:	e041      	b.n	80027e8 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8002764:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002768:	b29b      	uxth	r3, r3
 800276a:	8bfa      	ldrh	r2, [r7, #30]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8002770:	8bfb      	ldrh	r3, [r7, #30]
 8002772:	3301      	adds	r3, #1
 8002774:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8002776:	8bbb      	ldrh	r3, [r7, #28]
 8002778:	3301      	adds	r3, #1
 800277a:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002782:	b29a      	uxth	r2, r3
 8002784:	8b3b      	ldrh	r3, [r7, #24]
 8002786:	4413      	add	r3, r2
 8002788:	833b      	strh	r3, [r7, #24]
	    break;
 800278a:	e02d      	b.n	80027e8 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002792:	b29b      	uxth	r3, r3
 8002794:	8bfa      	ldrh	r2, [r7, #30]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800279a:	8bfb      	ldrh	r3, [r7, #30]
 800279c:	3301      	adds	r3, #1
 800279e:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80027a0:	8bbb      	ldrh	r3, [r7, #28]
 80027a2:	3301      	adds	r3, #1
 80027a4:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 80027a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	8b7a      	ldrh	r2, [r7, #26]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80027b2:	8b7b      	ldrh	r3, [r7, #26]
 80027b4:	3301      	adds	r3, #1
 80027b6:	837b      	strh	r3, [r7, #26]
	    y1++;
 80027b8:	8b3b      	ldrh	r3, [r7, #24]
 80027ba:	3301      	adds	r3, #1
 80027bc:	833b      	strh	r3, [r7, #24]
	    break;	  
 80027be:	e013      	b.n	80027e8 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 80027c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	8bbb      	ldrh	r3, [r7, #28]
 80027c8:	4413      	add	r3, r2
 80027ca:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	8b7a      	ldrh	r2, [r7, #26]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80027da:	8b7b      	ldrh	r3, [r7, #26]
 80027dc:	3301      	adds	r3, #1
 80027de:	837b      	strh	r3, [r7, #26]
	    y1++;
 80027e0:	8b3b      	ldrh	r3, [r7, #24]
 80027e2:	3301      	adds	r3, #1
 80027e4:	833b      	strh	r3, [r7, #24]
	    break;	  
 80027e6:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 80027e8:	8bb8      	ldrh	r0, [r7, #28]
 80027ea:	8b7a      	ldrh	r2, [r7, #26]
 80027ec:	8bf9      	ldrh	r1, [r7, #30]
 80027ee:	8b3b      	ldrh	r3, [r7, #24]
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	4603      	mov	r3, r0
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 fb88 	bl	8002f0a <u8g2_IsIntersection>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d102      	bne.n	8002806 <u8g2_font_decode_glyph+0x19e>
	return d;
 8002800:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8002804:	e03a      	b.n	800287c <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	2200      	movs	r2, #0
 800280a:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	2200      	movs	r2, #0
 8002810:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8002818:	4619      	mov	r1, r3
 800281a:	6978      	ldr	r0, [r7, #20]
 800281c:	f7ff fd81 	bl	8002322 <u8g2_font_decode_get_unsigned_bits>
 8002820:	4603      	mov	r3, r0
 8002822:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 800282a:	4619      	mov	r1, r3
 800282c:	6978      	ldr	r0, [r7, #20]
 800282e:	f7ff fd78 	bl	8002322 <u8g2_font_decode_get_unsigned_bits>
 8002832:	4603      	mov	r3, r0
 8002834:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8002836:	7bfb      	ldrb	r3, [r7, #15]
 8002838:	2200      	movs	r2, #0
 800283a:	4619      	mov	r1, r3
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f7ff fe54 	bl	80024ea <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8002842:	7bbb      	ldrb	r3, [r7, #14]
 8002844:	2201      	movs	r2, #1
 8002846:	4619      	mov	r1, r3
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f7ff fe4e 	bl	80024ea <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 800284e:	2101      	movs	r1, #1
 8002850:	6978      	ldr	r0, [r7, #20]
 8002852:	f7ff fd66 	bl	8002322 <u8g2_font_decode_get_unsigned_bits>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1ec      	bne.n	8002836 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002862:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8002866:	429a      	cmp	r2, r3
 8002868:	dd00      	ble.n	800286c <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800286a:	e7d2      	b.n	8002812 <u8g2_font_decode_glyph+0x1aa>
	break;
 800286c:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	7b9a      	ldrb	r2, [r3, #14]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  }
  return d;
 8002878:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3720      	adds	r7, #32
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002894:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	3317      	adds	r3, #23
 800289a:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 800289c:	887b      	ldrh	r3, [r7, #2]
 800289e:	2bff      	cmp	r3, #255	@ 0xff
 80028a0:	d82a      	bhi.n	80028f8 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 80028a2:	887b      	ldrh	r3, [r7, #2]
 80028a4:	2b60      	cmp	r3, #96	@ 0x60
 80028a6:	d907      	bls.n	80028b8 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 80028ae:	461a      	mov	r2, r3
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	4413      	add	r3, r2
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	e009      	b.n	80028cc <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 80028b8:	887b      	ldrh	r3, [r7, #2]
 80028ba:	2b40      	cmp	r3, #64	@ 0x40
 80028bc:	d906      	bls.n	80028cc <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 80028c4:	461a      	mov	r2, r3
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	4413      	add	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	3301      	adds	r3, #1
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d04e      	beq.n	8002974 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	461a      	mov	r2, r3
 80028dc:	887b      	ldrh	r3, [r7, #2]
 80028de:	4293      	cmp	r3, r2
 80028e0:	d102      	bne.n	80028e8 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	3302      	adds	r3, #2
 80028e6:	e049      	b.n	800297c <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	3301      	adds	r3, #1
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	4413      	add	r3, r2
 80028f4:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80028f6:	e7e9      	b.n	80028cc <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 80028fe:	461a      	mov	r2, r3
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	4413      	add	r3, r2
 8002904:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 800290a:	2100      	movs	r1, #0
 800290c:	6938      	ldr	r0, [r7, #16]
 800290e:	f7ff fc3f 	bl	8002190 <u8g2_font_get_word>
 8002912:	4603      	mov	r3, r0
 8002914:	461a      	mov	r2, r3
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	4413      	add	r3, r2
 800291a:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 800291c:	2102      	movs	r1, #2
 800291e:	6938      	ldr	r0, [r7, #16]
 8002920:	f7ff fc36 	bl	8002190 <u8g2_font_get_word>
 8002924:	4603      	mov	r3, r0
 8002926:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	3304      	adds	r3, #4
 800292c:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 800292e:	89fa      	ldrh	r2, [r7, #14]
 8002930:	887b      	ldrh	r3, [r7, #2]
 8002932:	429a      	cmp	r2, r3
 8002934:	d3e9      	bcc.n	800290a <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 800293c:	89fb      	ldrh	r3, [r7, #14]
 800293e:	021b      	lsls	r3, r3, #8
 8002940:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	3301      	adds	r3, #1
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	461a      	mov	r2, r3
 800294a:	89fb      	ldrh	r3, [r7, #14]
 800294c:	4313      	orrs	r3, r2
 800294e:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8002950:	89fb      	ldrh	r3, [r7, #14]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d010      	beq.n	8002978 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8002956:	89fa      	ldrh	r2, [r7, #14]
 8002958:	887b      	ldrh	r3, [r7, #2]
 800295a:	429a      	cmp	r2, r3
 800295c:	d102      	bne.n	8002964 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	3303      	adds	r3, #3
 8002962:	e00b      	b.n	800297c <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	3302      	adds	r3, #2
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	461a      	mov	r2, r3
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	4413      	add	r3, r2
 8002970:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8002972:	e7e0      	b.n	8002936 <u8g2_font_get_glyph_data+0xb2>
	break;
 8002974:	bf00      	nop
 8002976:	e000      	b.n	800297a <u8g2_font_get_glyph_data+0xf6>
	break;
 8002978:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3718      	adds	r7, #24
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	4608      	mov	r0, r1
 800298e:	4611      	mov	r1, r2
 8002990:	461a      	mov	r2, r3
 8002992:	4603      	mov	r3, r0
 8002994:	817b      	strh	r3, [r7, #10]
 8002996:	460b      	mov	r3, r1
 8002998:	813b      	strh	r3, [r7, #8]
 800299a:	4613      	mov	r3, r2
 800299c:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 800299e:	2300      	movs	r3, #0
 80029a0:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	897a      	ldrh	r2, [r7, #10]
 80029a6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  u8g2->font_decode.target_y = y;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	893a      	ldrh	r2, [r7, #8]
 80029ae:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80029b2:	88fb      	ldrh	r3, [r7, #6]
 80029b4:	4619      	mov	r1, r3
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f7ff ff64 	bl	8002884 <u8g2_font_get_glyph_data>
 80029bc:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d005      	beq.n	80029d0 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 80029c4:	6939      	ldr	r1, [r7, #16]
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f7ff fe4e 	bl	8002668 <u8g2_font_decode_glyph>
 80029cc:	4603      	mov	r3, r0
 80029ce:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 80029d0:	8afb      	ldrh	r3, [r7, #22]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	4608      	mov	r0, r1
 80029e6:	4611      	mov	r1, r2
 80029e8:	461a      	mov	r2, r3
 80029ea:	4603      	mov	r3, r0
 80029ec:	817b      	strh	r3, [r7, #10]
 80029ee:	460b      	mov	r3, r1
 80029f0:	813b      	strh	r3, [r7, #8]
 80029f2:	4613      	mov	r3, r2
 80029f4:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80029fc:	2b03      	cmp	r3, #3
 80029fe:	d833      	bhi.n	8002a68 <u8g2_DrawGlyph+0x8c>
 8002a00:	a201      	add	r2, pc, #4	@ (adr r2, 8002a08 <u8g2_DrawGlyph+0x2c>)
 8002a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a06:	bf00      	nop
 8002a08:	08002a19 	.word	0x08002a19
 8002a0c:	08002a2d 	.word	0x08002a2d
 8002a10:	08002a41 	.word	0x08002a41
 8002a14:	08002a55 	.word	0x08002a55
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	4798      	blx	r3
 8002a20:	4603      	mov	r3, r0
 8002a22:	461a      	mov	r2, r3
 8002a24:	893b      	ldrh	r3, [r7, #8]
 8002a26:	4413      	add	r3, r2
 8002a28:	813b      	strh	r3, [r7, #8]
      break;
 8002a2a:	e01d      	b.n	8002a68 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	4798      	blx	r3
 8002a34:	4603      	mov	r3, r0
 8002a36:	461a      	mov	r2, r3
 8002a38:	897b      	ldrh	r3, [r7, #10]
 8002a3a:	1a9b      	subs	r3, r3, r2
 8002a3c:	817b      	strh	r3, [r7, #10]
      break;
 8002a3e:	e013      	b.n	8002a68 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	4798      	blx	r3
 8002a48:	4603      	mov	r3, r0
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	893b      	ldrh	r3, [r7, #8]
 8002a4e:	1a9b      	subs	r3, r3, r2
 8002a50:	813b      	strh	r3, [r7, #8]
      break;
 8002a52:	e009      	b.n	8002a68 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	4798      	blx	r3
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	461a      	mov	r2, r3
 8002a60:	897b      	ldrh	r3, [r7, #10]
 8002a62:	4413      	add	r3, r2
 8002a64:	817b      	strh	r3, [r7, #10]
      break;
 8002a66:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8002a68:	88fb      	ldrh	r3, [r7, #6]
 8002a6a:	893a      	ldrh	r2, [r7, #8]
 8002a6c:	8979      	ldrh	r1, [r7, #10]
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f7ff ff88 	bl	8002984 <u8g2_font_draw_glyph>
 8002a74:	4603      	mov	r3, r0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop

08002a80 <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	607b      	str	r3, [r7, #4]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	817b      	strh	r3, [r7, #10]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 fca7 	bl	80033e6 <u8x8_utf8_init>
  sum = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	7812      	ldrb	r2, [r2, #0]
 8002aa4:	4611      	mov	r1, r2
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	4798      	blx	r3
 8002aaa:	4603      	mov	r3, r0
 8002aac:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8002aae:	8abb      	ldrh	r3, [r7, #20]
 8002ab0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d038      	beq.n	8002b2a <u8g2_draw_string+0xaa>
      break;
    str++;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3301      	adds	r3, #1
 8002abc:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8002abe:	8abb      	ldrh	r3, [r7, #20]
 8002ac0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d0e9      	beq.n	8002a9c <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8002ac8:	8abb      	ldrh	r3, [r7, #20]
 8002aca:	893a      	ldrh	r2, [r7, #8]
 8002acc:	8979      	ldrh	r1, [r7, #10]
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f7ff ff84 	bl	80029dc <u8g2_DrawGlyph>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8002ade:	2b03      	cmp	r3, #3
 8002ae0:	d81e      	bhi.n	8002b20 <u8g2_draw_string+0xa0>
 8002ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ae8 <u8g2_draw_string+0x68>)
 8002ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae8:	08002af9 	.word	0x08002af9
 8002aec:	08002b03 	.word	0x08002b03
 8002af0:	08002b0d 	.word	0x08002b0d
 8002af4:	08002b17 	.word	0x08002b17
      {
	case 0:
	  x += delta;
 8002af8:	897a      	ldrh	r2, [r7, #10]
 8002afa:	8a7b      	ldrh	r3, [r7, #18]
 8002afc:	4413      	add	r3, r2
 8002afe:	817b      	strh	r3, [r7, #10]
	  break;
 8002b00:	e00e      	b.n	8002b20 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8002b02:	893a      	ldrh	r2, [r7, #8]
 8002b04:	8a7b      	ldrh	r3, [r7, #18]
 8002b06:	4413      	add	r3, r2
 8002b08:	813b      	strh	r3, [r7, #8]
	  break;
 8002b0a:	e009      	b.n	8002b20 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8002b0c:	897a      	ldrh	r2, [r7, #10]
 8002b0e:	8a7b      	ldrh	r3, [r7, #18]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	817b      	strh	r3, [r7, #10]
	  break;
 8002b14:	e004      	b.n	8002b20 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8002b16:	893a      	ldrh	r2, [r7, #8]
 8002b18:	8a7b      	ldrh	r3, [r7, #18]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	813b      	strh	r3, [r7, #8]
	  break;
 8002b1e:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8002b20:	8afa      	ldrh	r2, [r7, #22]
 8002b22:	8a7b      	ldrh	r3, [r7, #18]
 8002b24:	4413      	add	r3, r2
 8002b26:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002b28:	e7b8      	b.n	8002a9c <u8g2_draw_string+0x1c>
      break;
 8002b2a:	bf00      	nop
    }
  }
  return sum;
 8002b2c:	8afb      	ldrh	r3, [r7, #22]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3718      	adds	r7, #24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop

08002b38 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	607b      	str	r3, [r7, #4]
 8002b42:	460b      	mov	r3, r1
 8002b44:	817b      	strh	r3, [r7, #10]
 8002b46:	4613      	mov	r3, r2
 8002b48:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	4a06      	ldr	r2, [pc, #24]	@ (8002b68 <u8g2_DrawStr+0x30>)
 8002b4e:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8002b50:	893a      	ldrh	r2, [r7, #8]
 8002b52:	8979      	ldrh	r1, [r7, #10]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f7ff ff92 	bl	8002a80 <u8g2_draw_string>
 8002b5c:	4603      	mov	r3, r0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	08003403 	.word	0x08003403

08002b6c <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d05d      	beq.n	8002c38 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f993 2081 	ldrsb.w	r2, [r3, #129]	@ 0x81
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f993 2082 	ldrsb.w	r2, [r3, #130]	@ 0x82
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d04d      	beq.n	8002c3a <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d11c      	bne.n	8002be2 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f993 208e 	ldrsb.w	r2, [r3, #142]	@ 0x8e
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f993 3083 	ldrsb.w	r3, [r3, #131]	@ 0x83
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	da05      	bge.n	8002bc4 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f993 2083 	ldrsb.w	r2, [r3, #131]	@ 0x83
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f993 3084 	ldrsb.w	r3, [r3, #132]	@ 0x84
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	dd32      	ble.n	8002c3a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f993 2084 	ldrsb.w	r2, [r3, #132]	@ 0x84
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8002be0:	e02b      	b.n	8002c3a <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f993 308e 	ldrsb.w	r3, [r3, #142]	@ 0x8e
 8002be8:	461a      	mov	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8002bf8:	440b      	add	r3, r1
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	da0d      	bge.n	8002c1a <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	4413      	add	r3, r2
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	b25a      	sxtb	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8002c26:	429a      	cmp	r2, r3
 8002c28:	dd07      	ble.n	8002c3a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f993 2080 	ldrsb.w	r2, [r3, #128]	@ 0x80
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8002c36:	e000      	b.n	8002c3a <u8g2_UpdateRefHeight+0xce>
    return;
 8002c38:	bf00      	nop
  }  
}
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  return 0;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
	...

08002c5c <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a04      	ldr	r2, [pc, #16]	@ (8002c78 <u8g2_SetFontPosBaseline+0x1c>)
 8002c68:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	08002c45 	.word	0x08002c45

08002c7c <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d00b      	beq.n	8002ca8 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	659a      	str	r2, [r3, #88]	@ 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	3374      	adds	r3, #116	@ 0x74
 8002c9a:	6839      	ldr	r1, [r7, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff fa97 	bl	80021d0 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7ff ff62 	bl	8002b6c <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8002ca8:	bf00      	nop
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <u8g2_clip_intersection2>:
 will return 0 if there is no intersection and if a > b

 */

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len,
		u8g2_uint_t c, u8g2_uint_t d) {
 8002cb0:	b480      	push	{r7}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	4611      	mov	r1, r2
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	80fb      	strh	r3, [r7, #6]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	80bb      	strh	r3, [r7, #4]
	u8g2_uint_t a = *ap;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	82fb      	strh	r3, [r7, #22]
	u8g2_uint_t b;
	b = a;
 8002ccc:	8afb      	ldrh	r3, [r7, #22]
 8002cce:	82bb      	strh	r3, [r7, #20]
	b += *len;
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	881a      	ldrh	r2, [r3, #0]
 8002cd4:	8abb      	ldrh	r3, [r7, #20]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	82bb      	strh	r3, [r7, #20]
	/* be removed completly (be aware about memory curruption for wrong */
	/* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
	/* arguments) */

	/* removing the following if clause completly may lead to memory corruption of a>b */
	if (a > b) {
 8002cda:	8afa      	ldrh	r2, [r7, #22]
 8002cdc:	8abb      	ldrh	r3, [r7, #20]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d90b      	bls.n	8002cfa <u8g2_clip_intersection2+0x4a>
		/* replacing this if with a simple "return 0;" will not handle the case with negative a */
		if (a < d) {
 8002ce2:	8afa      	ldrh	r2, [r7, #22]
 8002ce4:	88bb      	ldrh	r3, [r7, #4]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d205      	bcs.n	8002cf6 <u8g2_clip_intersection2+0x46>
			b = d;
 8002cea:	88bb      	ldrh	r3, [r7, #4]
 8002cec:	82bb      	strh	r3, [r7, #20]
			b--;
 8002cee:	8abb      	ldrh	r3, [r7, #20]
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	82bb      	strh	r3, [r7, #20]
 8002cf4:	e001      	b.n	8002cfa <u8g2_clip_intersection2+0x4a>
		} else {
			a = c;
 8002cf6:	88fb      	ldrh	r3, [r7, #6]
 8002cf8:	82fb      	strh	r3, [r7, #22]
		}
	}

	/* from now on, the asumption a <= b is ok */

	if (a >= d)
 8002cfa:	8afa      	ldrh	r2, [r7, #22]
 8002cfc:	88bb      	ldrh	r3, [r7, #4]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d301      	bcc.n	8002d06 <u8g2_clip_intersection2+0x56>
		return 0;
 8002d02:	2300      	movs	r3, #0
 8002d04:	e01c      	b.n	8002d40 <u8g2_clip_intersection2+0x90>
	if (b <= c)
 8002d06:	8aba      	ldrh	r2, [r7, #20]
 8002d08:	88fb      	ldrh	r3, [r7, #6]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d801      	bhi.n	8002d12 <u8g2_clip_intersection2+0x62>
		return 0;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	e016      	b.n	8002d40 <u8g2_clip_intersection2+0x90>
	if (a < c)
 8002d12:	8afa      	ldrh	r2, [r7, #22]
 8002d14:	88fb      	ldrh	r3, [r7, #6]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d201      	bcs.n	8002d1e <u8g2_clip_intersection2+0x6e>
		a = c;
 8002d1a:	88fb      	ldrh	r3, [r7, #6]
 8002d1c:	82fb      	strh	r3, [r7, #22]
	if (b > d)
 8002d1e:	8aba      	ldrh	r2, [r7, #20]
 8002d20:	88bb      	ldrh	r3, [r7, #4]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d901      	bls.n	8002d2a <u8g2_clip_intersection2+0x7a>
		b = d;
 8002d26:	88bb      	ldrh	r3, [r7, #4]
 8002d28:	82bb      	strh	r3, [r7, #20]

	*ap = a;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8afa      	ldrh	r2, [r7, #22]
 8002d2e:	801a      	strh	r2, [r3, #0]
	b -= a;
 8002d30:	8aba      	ldrh	r2, [r7, #20]
 8002d32:	8afb      	ldrh	r3, [r7, #22]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	82bb      	strh	r3, [r7, #20]
	*len = b;
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	8aba      	ldrh	r2, [r7, #20]
 8002d3c:	801a      	strh	r2, [r3, #0]
	return 1;
 8002d3e:	2301      	movs	r3, #1
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	371c      	adds	r7, #28
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <u8g2_draw_hv_line_2dir>:
 This function first adjusts the y position to the local buffer. Then it
 will clip the line and call u8g2_draw_low_level_hv_line()

 */
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		u8g2_uint_t len, uint8_t dir) {
 8002d4c:	b590      	push	{r4, r7, lr}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af02      	add	r7, sp, #8
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	4608      	mov	r0, r1
 8002d56:	4611      	mov	r1, r2
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	817b      	strh	r3, [r7, #10]
 8002d5e:	460b      	mov	r3, r1
 8002d60:	813b      	strh	r3, [r7, #8]
 8002d62:	4613      	mov	r3, r2
 8002d64:	80fb      	strh	r3, [r7, #6]

	/* clipping happens before the display rotation */

	/* transform to pixel buffer coordinates */
	y -= u8g2->pixel_curr_row;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d6a:	893a      	ldrh	r2, [r7, #8]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	813b      	strh	r3, [r7, #8]

	u8g2->ll_hvline(u8g2, x, y, len, dir);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8002d74:	88f8      	ldrh	r0, [r7, #6]
 8002d76:	893a      	ldrh	r2, [r7, #8]
 8002d78:	8979      	ldrh	r1, [r7, #10]
 8002d7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	4603      	mov	r3, r0
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	47a0      	blx	r4
}
 8002d86:	bf00      	nop
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd90      	pop	{r4, r7, pc}

08002d8e <u8g2_DrawHVLine>:
 This function should be called by the user.

 "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
 */
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		u8g2_uint_t len, uint8_t dir) {
 8002d8e:	b590      	push	{r4, r7, lr}
 8002d90:	b087      	sub	sp, #28
 8002d92:	af02      	add	r7, sp, #8
 8002d94:	60f8      	str	r0, [r7, #12]
 8002d96:	4608      	mov	r0, r1
 8002d98:	4611      	mov	r1, r2
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	817b      	strh	r3, [r7, #10]
 8002da0:	460b      	mov	r3, r1
 8002da2:	813b      	strh	r3, [r7, #8]
 8002da4:	4613      	mov	r3, r2
 8002da6:	80fb      	strh	r3, [r7, #6]
	/* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
	/* The callback may rotate the hv line */
	/* after rotation this will call u8g2_draw_hv_line_4dir() */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
	if (u8g2->is_page_clip_window_intersection != 0)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d075      	beq.n	8002e9e <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
		if (len != 0) {
 8002db2:	88fb      	ldrh	r3, [r7, #6]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d072      	beq.n	8002e9e <u8g2_DrawHVLine+0x110>

			/* convert to two directions */
			if (len > 1) {
 8002db8:	88fb      	ldrh	r3, [r7, #6]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d91a      	bls.n	8002df4 <u8g2_DrawHVLine+0x66>
				if (dir == 2) {
 8002dbe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d109      	bne.n	8002dda <u8g2_DrawHVLine+0x4c>
					x -= len;
 8002dc6:	897a      	ldrh	r2, [r7, #10]
 8002dc8:	88fb      	ldrh	r3, [r7, #6]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	817b      	strh	r3, [r7, #10]
					x++;
 8002dd0:	897b      	ldrh	r3, [r7, #10]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	817b      	strh	r3, [r7, #10]
 8002dd8:	e00c      	b.n	8002df4 <u8g2_DrawHVLine+0x66>
				} else if (dir == 3) {
 8002dda:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	d108      	bne.n	8002df4 <u8g2_DrawHVLine+0x66>
					y -= len;
 8002de2:	893a      	ldrh	r2, [r7, #8]
 8002de4:	88fb      	ldrh	r3, [r7, #6]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	813b      	strh	r3, [r7, #8]
					y++;
 8002dec:	893b      	ldrh	r3, [r7, #8]
 8002dee:	3301      	adds	r3, #1
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	813b      	strh	r3, [r7, #8]
				}
			}
			dir &= 1;
 8002df4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	f887 3020 	strb.w	r3, [r7, #32]

			/* clip against the user window */
			if (dir == 0) {
 8002e00:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d11a      	bne.n	8002e3e <u8g2_DrawHVLine+0xb0>
				if (y < u8g2->user_y0)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8002e0e:	893b      	ldrh	r3, [r7, #8]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d83b      	bhi.n	8002e8c <u8g2_DrawHVLine+0xfe>
					return;
				if (y >= u8g2->user_y1)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8002e1a:	893b      	ldrh	r3, [r7, #8]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d937      	bls.n	8002e90 <u8g2_DrawHVLine+0x102>
					return;
				if (u8g2_clip_intersection2(&x, &len, u8g2->user_x0,
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8002e2c:	1db9      	adds	r1, r7, #6
 8002e2e:	f107 000a 	add.w	r0, r7, #10
 8002e32:	f7ff ff3d 	bl	8002cb0 <u8g2_clip_intersection2>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d11a      	bne.n	8002e72 <u8g2_DrawHVLine+0xe4>
						u8g2->user_x1) == 0)
					return;
 8002e3c:	e02f      	b.n	8002e9e <u8g2_DrawHVLine+0x110>
			} else {
				if (x < u8g2->user_x0)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8002e44:	897b      	ldrh	r3, [r7, #10]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d824      	bhi.n	8002e94 <u8g2_DrawHVLine+0x106>
					return;
				if (x >= u8g2->user_x1)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8002e50:	897b      	ldrh	r3, [r7, #10]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d920      	bls.n	8002e98 <u8g2_DrawHVLine+0x10a>
					return;
				if (u8g2_clip_intersection2(&y, &len, u8g2->user_y0,
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8002e62:	1db9      	adds	r1, r7, #6
 8002e64:	f107 0008 	add.w	r0, r7, #8
 8002e68:	f7ff ff22 	bl	8002cb0 <u8g2_clip_intersection2>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d014      	beq.n	8002e9c <u8g2_DrawHVLine+0x10e>
						u8g2->user_y1) == 0)
					return;
			}

			u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e76:	689c      	ldr	r4, [r3, #8]
 8002e78:	8979      	ldrh	r1, [r7, #10]
 8002e7a:	893a      	ldrh	r2, [r7, #8]
 8002e7c:	88f8      	ldrh	r0, [r7, #6]
 8002e7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	4603      	mov	r3, r0
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	47a0      	blx	r4
 8002e8a:	e008      	b.n	8002e9e <u8g2_DrawHVLine+0x110>
					return;
 8002e8c:	bf00      	nop
 8002e8e:	e006      	b.n	8002e9e <u8g2_DrawHVLine+0x110>
					return;
 8002e90:	bf00      	nop
 8002e92:	e004      	b.n	8002e9e <u8g2_DrawHVLine+0x110>
					return;
 8002e94:	bf00      	nop
 8002e96:	e002      	b.n	8002e9e <u8g2_DrawHVLine+0x110>
					return;
 8002e98:	bf00      	nop
 8002e9a:	e000      	b.n	8002e9e <u8g2_DrawHVLine+0x110>
					return;
 8002e9c:	bf00      	nop
		}
}
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd90      	pop	{r4, r7, pc}

08002ea4 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8002ea4:	b490      	push	{r4, r7}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4604      	mov	r4, r0
 8002eac:	4608      	mov	r0, r1
 8002eae:	4611      	mov	r1, r2
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	4623      	mov	r3, r4
 8002eb4:	80fb      	strh	r3, [r7, #6]
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	80bb      	strh	r3, [r7, #4]
 8002eba:	460b      	mov	r3, r1
 8002ebc:	807b      	strh	r3, [r7, #2]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8002ec2:	887a      	ldrh	r2, [r7, #2]
 8002ec4:	88bb      	ldrh	r3, [r7, #4]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d20d      	bcs.n	8002ee6 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8002eca:	883a      	ldrh	r2, [r7, #0]
 8002ecc:	88fb      	ldrh	r3, [r7, #6]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d901      	bls.n	8002ed6 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e014      	b.n	8002f00 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8002ed6:	887a      	ldrh	r2, [r7, #2]
 8002ed8:	883b      	ldrh	r3, [r7, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d901      	bls.n	8002ee2 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e00e      	b.n	8002f00 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	e00c      	b.n	8002f00 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8002ee6:	883a      	ldrh	r2, [r7, #0]
 8002ee8:	88fb      	ldrh	r3, [r7, #6]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d907      	bls.n	8002efe <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8002eee:	887a      	ldrh	r2, [r7, #2]
 8002ef0:	883b      	ldrh	r3, [r7, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d901      	bls.n	8002efa <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e002      	b.n	8002f00 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002efa:	2300      	movs	r3, #0
 8002efc:	e000      	b.n	8002f00 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8002efe:	2300      	movs	r3, #0
    }
  }
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bc90      	pop	{r4, r7}
 8002f08:	4770      	bx	lr

08002f0a <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b084      	sub	sp, #16
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	60f8      	str	r0, [r7, #12]
 8002f12:	4608      	mov	r0, r1
 8002f14:	4611      	mov	r1, r2
 8002f16:	461a      	mov	r2, r3
 8002f18:	4603      	mov	r3, r0
 8002f1a:	817b      	strh	r3, [r7, #10]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	813b      	strh	r3, [r7, #8]
 8002f20:	4613      	mov	r3, r2
 8002f22:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f8b3 104e 	ldrh.w	r1, [r3, #78]	@ 0x4e
 8002f30:	8b3b      	ldrh	r3, [r7, #24]
 8002f32:	893a      	ldrh	r2, [r7, #8]
 8002f34:	f7ff ffb6 	bl	8002ea4 <u8g2_is_intersection_decision_tree>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <u8g2_IsIntersection+0x38>
    return 0; 
 8002f3e:	2300      	movs	r3, #0
 8002f40:	e00a      	b.n	8002f58 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 8002f4e:	88fb      	ldrh	r3, [r7, #6]
 8002f50:	897a      	ldrh	r2, [r7, #10]
 8002f52:	f7ff ffa7 	bl	8002ea4 <u8g2_is_intersection_decision_tree>
 8002f56:	4603      	mov	r3, r0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b089      	sub	sp, #36	@ 0x24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	4608      	mov	r0, r1
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	4603      	mov	r3, r0
 8002f70:	817b      	strh	r3, [r7, #10]
 8002f72:	460b      	mov	r3, r1
 8002f74:	813b      	strh	r3, [r7, #8]
 8002f76:	4613      	mov	r3, r2
 8002f78:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8002f7a:	893b      	ldrh	r3, [r7, #8]
 8002f7c:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8002f7e:	7efb      	ldrb	r3, [r7, #27]
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8002f86:	2301      	movs	r3, #1
 8002f88:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8002f8a:	7e3a      	ldrb	r2, [r7, #24]
 8002f8c:	7efb      	ldrb	r3, [r7, #27]
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8002f94:	2300      	movs	r3, #0
 8002f96:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d801      	bhi.n	8002faa <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8002fa6:	7e3b      	ldrb	r3, [r7, #24]
 8002fa8:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d001      	beq.n	8002fb8 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8002fb4:	7e3b      	ldrb	r3, [r7, #24]
 8002fb6:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8002fb8:	893b      	ldrh	r3, [r7, #8]
 8002fba:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8002fbc:	8afb      	ldrh	r3, [r7, #22]
 8002fbe:	f023 0307 	bic.w	r3, r3, #7
 8002fc2:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	7c1b      	ldrb	r3, [r3, #16]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	8afb      	ldrh	r3, [r7, #22]
 8002fce:	fb13 f302 	smulbb	r3, r3, r2
 8002fd2:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fd8:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8002fda:	8afb      	ldrh	r3, [r7, #22]
 8002fdc:	69fa      	ldr	r2, [r7, #28]
 8002fde:	4413      	add	r3, r2
 8002fe0:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8002fe2:	897b      	ldrh	r3, [r7, #10]
 8002fe4:	69fa      	ldr	r2, [r7, #28]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8002fea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d117      	bne.n	8003022 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	781a      	ldrb	r2, [r3, #0]
 8002ff6:	7ebb      	ldrb	r3, [r7, #26]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	781a      	ldrb	r2, [r3, #0]
 8003004:	7e7b      	ldrb	r3, [r7, #25]
 8003006:	4053      	eors	r3, r2
 8003008:	b2da      	uxtb	r2, r3
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	701a      	strb	r2, [r3, #0]
	ptr++;
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	3301      	adds	r3, #1
 8003012:	61fb      	str	r3, [r7, #28]
	len--;
 8003014:	88fb      	ldrh	r3, [r7, #6]
 8003016:	3b01      	subs	r3, #1
 8003018:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 800301a:	88fb      	ldrh	r3, [r7, #6]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1e8      	bne.n	8002ff2 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8003020:	e038      	b.n	8003094 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	781a      	ldrb	r2, [r3, #0]
 8003026:	7ebb      	ldrb	r3, [r7, #26]
 8003028:	4313      	orrs	r3, r2
 800302a:	b2da      	uxtb	r2, r3
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	781a      	ldrb	r2, [r3, #0]
 8003034:	7e7b      	ldrb	r3, [r7, #25]
 8003036:	4053      	eors	r3, r2
 8003038:	b2da      	uxtb	r2, r3
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 800303e:	7efb      	ldrb	r3, [r7, #27]
 8003040:	3301      	adds	r3, #1
 8003042:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8003044:	7efb      	ldrb	r3, [r7, #27]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	76fb      	strb	r3, [r7, #27]
      len--;
 800304c:	88fb      	ldrh	r3, [r7, #6]
 800304e:	3b01      	subs	r3, #1
 8003050:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8003052:	7efb      	ldrb	r3, [r7, #27]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d114      	bne.n	8003082 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800305c:	461a      	mov	r2, r3
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	4413      	add	r3, r2
 8003062:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 800306a:	2b01      	cmp	r3, #1
 800306c:	d801      	bhi.n	8003072 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 800306e:	2301      	movs	r3, #1
 8003070:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8003078:	2b01      	cmp	r3, #1
 800307a:	d008      	beq.n	800308e <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 800307c:	2301      	movs	r3, #1
 800307e:	767b      	strb	r3, [r7, #25]
 8003080:	e005      	b.n	800308e <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8003082:	7ebb      	ldrb	r3, [r7, #26]
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8003088:	7e7b      	ldrb	r3, [r7, #25]
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 800308e:	88fb      	ldrh	r3, [r7, #6]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1c6      	bne.n	8003022 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8003094:	bf00      	nop
 8003096:	3724      	adds	r7, #36	@ 0x24
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  u8g2->clip_y0 = 0;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030be:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  
  u8g2->cb->update_page_win(u8g2);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	4798      	blx	r3
}
 80030d6:	bf00      	nop
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b084      	sub	sp, #16
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	603b      	str	r3, [r7, #0]
 80030ea:	4613      	mov	r3, r2
 80030ec:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	659a      	str	r2, [r3, #88]	@ 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	68ba      	ldr	r2, [r7, #8]
 80030fe:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	79fa      	ldrb	r2, [r7, #7]
 8003104:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
  u8g2->bitmap_transparency = 0;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
  u8g2->draw_color = 1;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  u8g2->is_auto_page_clear = 1;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
  
  u8g2->cb = u8g2_cb;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update_dimension(u8g2);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f7ff ffa9 	bl	80030a0 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f7ff fd84 	bl	8002c5c <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
#endif
}
 800315c:	bf00      	nop
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003178:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800317a:	89fb      	ldrh	r3, [r7, #14]
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	89fa      	ldrh	r2, [r7, #14]
 8003184:	879a      	strh	r2, [r3, #60]	@ 0x3c
  
  t = display_info->tile_width;
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	7c1b      	ldrb	r3, [r3, #16]
 800318a:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 800318c:	89fb      	ldrh	r3, [r7, #14]
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	89fa      	ldrh	r2, [r7, #14]
 8003196:	875a      	strh	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800319e:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80031a0:	89fb      	ldrh	r3, [r7, #14]
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	89fa      	ldrh	r2, [r7, #14]
 80031aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_buf_height;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80031b2:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80031b4:	89fb      	ldrh	r3, [r7, #14]
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 80031bc:	4413      	add	r3, r2
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	7c52      	ldrb	r2, [r2, #17]
 80031c2:	4293      	cmp	r3, r2
 80031c4:	dd07      	ble.n	80031d6 <u8g2_update_dimension_common+0x72>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	7c5b      	ldrb	r3, [r3, #17]
 80031ca:	461a      	mov	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80031d6:	89fb      	ldrh	r3, [r7, #14]
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  u8g2->buf_y1 += t;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 80031f8:	89fb      	ldrh	r3, [r7, #14]
 80031fa:	4413      	add	r3, r2
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	8a9a      	ldrh	r2, [r3, #20]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  u8g2->height = display_info->pixel_height;
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	8ada      	ldrh	r2, [r3, #22]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8003218:	bf00      	nop
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af02      	add	r7, sp, #8
 800322a:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f8b3 0052 	ldrh.w	r0, [r3, #82]	@ 0x52
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	4603      	mov	r3, r0
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7ff fe5e 	bl	8002f0a <u8g2_IsIntersection>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d104      	bne.n	800325e <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800325c:	e03b      	b.n	80032d6 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003272:	429a      	cmp	r2, r3
 8003274:	d205      	bcs.n	8003282 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800328e:	429a      	cmp	r2, r3
 8003290:	d905      	bls.n	800329e <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d205      	bcs.n	80032ba <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d905      	bls.n	80032d6 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 80032d6:	bf00      	nop
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b082      	sub	sp, #8
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7ff ff3c 	bl	8003164 <u8g2_update_dimension_common>
}
 80032ec:	bf00      	nop
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  if ( u8g2->height >= u8g2->buf_y1 )
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8003324:	429a      	cmp	r2, r3
 8003326:	d30a      	bcc.n	800333e <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	b29a      	uxth	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	b29a      	uxth	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff ff65 	bl	8003224 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800335a:	bf00      	nop
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b088      	sub	sp, #32
 8003366:	af02      	add	r7, sp, #8
 8003368:	60f8      	str	r0, [r7, #12]
 800336a:	4608      	mov	r0, r1
 800336c:	4611      	mov	r1, r2
 800336e:	461a      	mov	r2, r3
 8003370:	4603      	mov	r3, r0
 8003372:	817b      	strh	r3, [r7, #10]
 8003374:	460b      	mov	r3, r1
 8003376:	813b      	strh	r3, [r7, #8]
 8003378:	4613      	mov	r3, r2
 800337a:	80fb      	strh	r3, [r7, #6]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003382:	82bb      	strh	r3, [r7, #20]
  yy -= y;
 8003384:	8aba      	ldrh	r2, [r7, #20]
 8003386:	893b      	ldrh	r3, [r7, #8]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	82bb      	strh	r3, [r7, #20]
  
  xx = u8g2->width;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003392:	82fb      	strh	r3, [r7, #22]
  xx -= x;
 8003394:	8afa      	ldrh	r2, [r7, #22]
 8003396:	897b      	ldrh	r3, [r7, #10]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	82fb      	strh	r3, [r7, #22]
  
  if ( dir == 0 )
 800339c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d107      	bne.n	80033b4 <u8g2_draw_l90_r2+0x52>
  {
    yy--;
 80033a4:	8abb      	ldrh	r3, [r7, #20]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	82bb      	strh	r3, [r7, #20]
    xx -= len;
 80033aa:	8afa      	ldrh	r2, [r7, #22]
 80033ac:	88fb      	ldrh	r3, [r7, #6]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	82fb      	strh	r3, [r7, #22]
 80033b2:	e00a      	b.n	80033ca <u8g2_draw_l90_r2+0x68>
  }
  else if ( dir == 1 )
 80033b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d106      	bne.n	80033ca <u8g2_draw_l90_r2+0x68>
  {
    xx--;
 80033bc:	8afb      	ldrh	r3, [r7, #22]
 80033be:	3b01      	subs	r3, #1
 80033c0:	82fb      	strh	r3, [r7, #22]
    yy -= len;
 80033c2:	8aba      	ldrh	r2, [r7, #20]
 80033c4:	88fb      	ldrh	r3, [r7, #6]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	82bb      	strh	r3, [r7, #20]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 80033ca:	88f8      	ldrh	r0, [r7, #6]
 80033cc:	8aba      	ldrh	r2, [r7, #20]
 80033ce:	8af9      	ldrh	r1, [r7, #22]
 80033d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	4603      	mov	r3, r0
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f7ff fcb7 	bl	8002d4c <u8g2_draw_hv_line_2dir>
}
 80033de:	bf00      	nop
 80033e0:	3718      	adds	r7, #24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
 800340a:	460b      	mov	r3, r1
 800340c:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 800340e:	78fb      	ldrb	r3, [r7, #3]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d002      	beq.n	800341a <u8x8_ascii_next+0x18>
 8003414:	78fb      	ldrb	r3, [r7, #3]
 8003416:	2b0a      	cmp	r3, #10
 8003418:	d102      	bne.n	8003420 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 800341a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800341e:	e001      	b.n	8003424 <u8x8_ascii_next+0x22>
  return b;
 8003420:	78fb      	ldrb	r3, [r7, #3]
 8003422:	b29b      	uxth	r3, r3
}
 8003424:	4618      	mov	r0, r3
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8003430:	b590      	push	{r4, r7, lr}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	460b      	mov	r3, r1
 800343a:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691c      	ldr	r4, [r3, #16]
 8003440:	78fa      	ldrb	r2, [r7, #3]
 8003442:	2300      	movs	r3, #0
 8003444:	2120      	movs	r1, #32
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	47a0      	blx	r4
 800344a:	4603      	mov	r3, r0
}
 800344c:	4618      	mov	r0, r3
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	bd90      	pop	{r4, r7, pc}

08003454 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8003454:	b590      	push	{r4, r7, lr}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	460b      	mov	r3, r1
 800345e:	607a      	str	r2, [r7, #4]
 8003460:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	691c      	ldr	r4, [r3, #16]
 8003466:	7afa      	ldrb	r2, [r7, #11]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2117      	movs	r1, #23
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	47a0      	blx	r4
 8003470:	4603      	mov	r3, r0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	bd90      	pop	{r4, r7, pc}

0800347a <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b082      	sub	sp, #8
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
 8003482:	460b      	mov	r3, r1
 8003484:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8003486:	1cfb      	adds	r3, r7, #3
 8003488:	461a      	mov	r2, r3
 800348a:	2101      	movs	r1, #1
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f7ff ffe1 	bl	8003454 <u8x8_byte_SendBytes>
 8003492:	4603      	mov	r3, r0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 800349c:	b590      	push	{r4, r7, lr}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68dc      	ldr	r4, [r3, #12]
 80034ac:	78fa      	ldrb	r2, [r7, #3]
 80034ae:	2300      	movs	r3, #0
 80034b0:	2115      	movs	r1, #21
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	47a0      	blx	r4
 80034b6:	4603      	mov	r3, r0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd90      	pop	{r4, r7, pc}

080034c0 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 80034c0:	b590      	push	{r4, r7, lr}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68dc      	ldr	r4, [r3, #12]
 80034d0:	78fa      	ldrb	r2, [r7, #3]
 80034d2:	2300      	movs	r3, #0
 80034d4:	2116      	movs	r1, #22
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	47a0      	blx	r4
 80034da:	4603      	mov	r3, r0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd90      	pop	{r4, r7, pc}

080034e4 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80034e4:	b590      	push	{r4, r7, lr}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	460b      	mov	r3, r1
 80034ee:	607a      	str	r2, [r7, #4]
 80034f0:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	68dc      	ldr	r4, [r3, #12]
 80034f6:	7afa      	ldrb	r2, [r7, #11]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2117      	movs	r1, #23
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	47a0      	blx	r4
 8003500:	4603      	mov	r3, r0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	bd90      	pop	{r4, r7, pc}

0800350a <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 800350a:	b590      	push	{r4, r7, lr}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68dc      	ldr	r4, [r3, #12]
 8003516:	2300      	movs	r3, #0
 8003518:	2200      	movs	r2, #0
 800351a:	2118      	movs	r1, #24
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	47a0      	blx	r4
 8003520:	4603      	mov	r3, r0
}
 8003522:	4618      	mov	r0, r3
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	bd90      	pop	{r4, r7, pc}

0800352a <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 800352a:	b590      	push	{r4, r7, lr}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68dc      	ldr	r4, [r3, #12]
 8003536:	2300      	movs	r3, #0
 8003538:	2200      	movs	r2, #0
 800353a:	2119      	movs	r1, #25
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	47a0      	blx	r4
 8003540:	4603      	mov	r3, r0
}
 8003542:	4618      	mov	r0, r3
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	bd90      	pop	{r4, r7, pc}

0800354a <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 800354a:	b590      	push	{r4, r7, lr}
 800354c:	b085      	sub	sp, #20
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	73fb      	strb	r3, [r7, #15]
    data++;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	3301      	adds	r3, #1
 800355e:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8003560:	7bfb      	ldrb	r3, [r7, #15]
 8003562:	2bfe      	cmp	r3, #254	@ 0xfe
 8003564:	d031      	beq.n	80035ca <u8x8_cad_SendSequence+0x80>
 8003566:	2bfe      	cmp	r3, #254	@ 0xfe
 8003568:	dc3d      	bgt.n	80035e6 <u8x8_cad_SendSequence+0x9c>
 800356a:	2b19      	cmp	r3, #25
 800356c:	dc3b      	bgt.n	80035e6 <u8x8_cad_SendSequence+0x9c>
 800356e:	2b18      	cmp	r3, #24
 8003570:	da23      	bge.n	80035ba <u8x8_cad_SendSequence+0x70>
 8003572:	2b16      	cmp	r3, #22
 8003574:	dc02      	bgt.n	800357c <u8x8_cad_SendSequence+0x32>
 8003576:	2b15      	cmp	r3, #21
 8003578:	da03      	bge.n	8003582 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 800357a:	e034      	b.n	80035e6 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 800357c:	2b17      	cmp	r3, #23
 800357e:	d00e      	beq.n	800359e <u8x8_cad_SendSequence+0x54>
	return;
 8003580:	e031      	b.n	80035e6 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68dc      	ldr	r4, [r3, #12]
 800358c:	7bba      	ldrb	r2, [r7, #14]
 800358e:	7bf9      	ldrb	r1, [r7, #15]
 8003590:	2300      	movs	r3, #0
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	47a0      	blx	r4
	  data++;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	3301      	adds	r3, #1
 800359a:	603b      	str	r3, [r7, #0]
	  break;
 800359c:	e022      	b.n	80035e4 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 80035a4:	f107 030e 	add.w	r3, r7, #14
 80035a8:	461a      	mov	r2, r3
 80035aa:	2101      	movs	r1, #1
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f7ff ff99 	bl	80034e4 <u8x8_cad_SendData>
	  data++;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	3301      	adds	r3, #1
 80035b6:	603b      	str	r3, [r7, #0]
	  break;
 80035b8:	e014      	b.n	80035e4 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68dc      	ldr	r4, [r3, #12]
 80035be:	7bf9      	ldrb	r1, [r7, #15]
 80035c0:	2300      	movs	r3, #0
 80035c2:	2200      	movs	r2, #0
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	47a0      	blx	r4
	  break;
 80035c8:	e00c      	b.n	80035e4 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80035d0:	7bbb      	ldrb	r3, [r7, #14]
 80035d2:	461a      	mov	r2, r3
 80035d4:	2129      	movs	r1, #41	@ 0x29
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f9ee 	bl	80039b8 <u8x8_gpio_call>
	  data++;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	3301      	adds	r3, #1
 80035e0:	603b      	str	r3, [r7, #0]
	  break;
 80035e2:	bf00      	nop
    cmd = *data;
 80035e4:	e7b6      	b.n	8003554 <u8x8_cad_SendSequence+0xa>
	return;
 80035e6:	bf00      	nop
    }
  }
}
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd90      	pop	{r4, r7, pc}
	...

080035f0 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80035f0:	b590      	push	{r4, r7, lr}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	607b      	str	r3, [r7, #4]
 80035fa:	460b      	mov	r3, r1
 80035fc:	72fb      	strb	r3, [r7, #11]
 80035fe:	4613      	mov	r3, r2
 8003600:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8003602:	7afb      	ldrb	r3, [r7, #11]
 8003604:	3b14      	subs	r3, #20
 8003606:	2b05      	cmp	r3, #5
 8003608:	d82f      	bhi.n	800366a <u8x8_cad_001+0x7a>
 800360a:	a201      	add	r2, pc, #4	@ (adr r2, 8003610 <u8x8_cad_001+0x20>)
 800360c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003610:	08003659 	.word	0x08003659
 8003614:	08003629 	.word	0x08003629
 8003618:	0800363d 	.word	0x0800363d
 800361c:	08003651 	.word	0x08003651
 8003620:	08003659 	.word	0x08003659
 8003624:	08003659 	.word	0x08003659
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8003628:	2100      	movs	r1, #0
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f7ff ff00 	bl	8003430 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003630:	7abb      	ldrb	r3, [r7, #10]
 8003632:	4619      	mov	r1, r3
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f7ff ff20 	bl	800347a <u8x8_byte_SendByte>
      break;
 800363a:	e018      	b.n	800366e <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 800363c:	2100      	movs	r1, #0
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f7ff fef6 	bl	8003430 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003644:	7abb      	ldrb	r3, [r7, #10]
 8003646:	4619      	mov	r1, r3
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f7ff ff16 	bl	800347a <u8x8_byte_SendByte>
      break;
 800364e:	e00e      	b.n	800366e <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8003650:	2101      	movs	r1, #1
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f7ff feec 	bl	8003430 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	691c      	ldr	r4, [r3, #16]
 800365c:	7aba      	ldrb	r2, [r7, #10]
 800365e:	7af9      	ldrb	r1, [r7, #11]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	47a0      	blx	r4
 8003666:	4603      	mov	r3, r0
 8003668:	e002      	b.n	8003670 <u8x8_cad_001+0x80>
    default:
      return 0;
 800366a:	2300      	movs	r3, #0
 800366c:	e000      	b.n	8003670 <u8x8_cad_001+0x80>
  }
  return 1;
 800366e:	2301      	movs	r3, #1
}
 8003670:	4618      	mov	r0, r3
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	bd90      	pop	{r4, r7, pc}

08003678 <u8x8_d_st7565_common>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	607b      	str	r3, [r7, #4]
 8003682:	460b      	mov	r3, r1
 8003684:	72fb      	strb	r3, [r7, #11]
 8003686:	4613      	mov	r3, r2
 8003688:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800368a:	7afb      	ldrb	r3, [r7, #11]
 800368c:	2b0f      	cmp	r3, #15
 800368e:	d006      	beq.n	800369e <u8x8_d_st7565_common+0x26>
 8003690:	2b0f      	cmp	r3, #15
 8003692:	dc71      	bgt.n	8003778 <u8x8_d_st7565_common+0x100>
 8003694:	2b0b      	cmp	r3, #11
 8003696:	d050      	beq.n	800373a <u8x8_d_st7565_common+0xc2>
 8003698:	2b0e      	cmp	r3, #14
 800369a:	d05b      	beq.n	8003754 <u8x8_d_st7565_common+0xdc>
 800369c:	e06c      	b.n	8003778 <u8x8_d_st7565_common+0x100>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f7ff ff33 	bl	800350a <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	795b      	ldrb	r3, [r3, #5]
 80036a8:	75bb      	strb	r3, [r7, #22]
      x *= 8;
 80036aa:	7dbb      	ldrb	r3, [r7, #22]
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	75bb      	strb	r3, [r7, #22]
      x += u8x8->x_offset;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80036b6:	7dbb      	ldrb	r3, [r7, #22]
 80036b8:	4413      	add	r3, r2
 80036ba:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 80036bc:	7dbb      	ldrb	r3, [r7, #22]
 80036be:	091b      	lsrs	r3, r3, #4
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	f043 0310 	orr.w	r3, r3, #16
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	4619      	mov	r1, r3
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f7ff fee6 	bl	800349c <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 80036d0:	7dbb      	ldrb	r3, [r7, #22]
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	4619      	mov	r1, r3
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f7ff fede 	bl	800349c <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	799b      	ldrb	r3, [r3, #6]
 80036e4:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	4619      	mov	r1, r3
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f7ff fed5 	bl	800349c <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	791b      	ldrb	r3, [r3, #4]
 80036f6:	75fb      	strb	r3, [r7, #23]
      c *= 8;
 80036f8:	7dfb      	ldrb	r3, [r7, #23]
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	613b      	str	r3, [r7, #16]
      /* 
	The following if condition checks the hardware limits of the st7565 
	controller: It is not allowed to write beyond the display limits.
	This is in fact an issue within flip mode.
      */
      if ( c + x > 132u )
 8003704:	7dfa      	ldrb	r2, [r7, #23]
 8003706:	7dbb      	ldrb	r3, [r7, #22]
 8003708:	4413      	add	r3, r2
 800370a:	2b84      	cmp	r3, #132	@ 0x84
 800370c:	d905      	bls.n	800371a <u8x8_d_st7565_common+0xa2>
      {
	c = 132u;
 800370e:	2384      	movs	r3, #132	@ 0x84
 8003710:	75fb      	strb	r3, [r7, #23]
	c -= x;
 8003712:	7dfa      	ldrb	r2, [r7, #23]
 8003714:	7dbb      	ldrb	r3, [r7, #22]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	75fb      	strb	r3, [r7, #23]
      }
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 800371a:	7dfb      	ldrb	r3, [r7, #23]
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	4619      	mov	r1, r3
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f7ff fedf 	bl	80034e4 <u8x8_cad_SendData>
	arg_int--;
 8003726:	7abb      	ldrb	r3, [r7, #10]
 8003728:	3b01      	subs	r3, #1
 800372a:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 800372c:	7abb      	ldrb	r3, [r7, #10]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f3      	bne.n	800371a <u8x8_d_st7565_common+0xa2>
      
      u8x8_cad_EndTransfer(u8x8);
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f7ff fef9 	bl	800352a <u8x8_cad_EndTransfer>
      break;
 8003738:	e020      	b.n	800377c <u8x8_d_st7565_common+0x104>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 800373a:	7abb      	ldrb	r3, [r7, #10]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d104      	bne.n	800374a <u8x8_d_st7565_common+0xd2>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
 8003740:	4911      	ldr	r1, [pc, #68]	@ (8003788 <u8x8_d_st7565_common+0x110>)
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f7ff ff01 	bl	800354a <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
      break;
 8003748:	e018      	b.n	800377c <u8x8_d_st7565_common+0x104>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
 800374a:	4910      	ldr	r1, [pc, #64]	@ (800378c <u8x8_d_st7565_common+0x114>)
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f7ff fefc 	bl	800354a <u8x8_cad_SendSequence>
      break;
 8003752:	e013      	b.n	800377c <u8x8_d_st7565_common+0x104>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f7ff fed8 	bl	800350a <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800375a:	2181      	movs	r1, #129	@ 0x81
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f7ff fe9d 	bl	800349c <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
 8003762:	7abb      	ldrb	r3, [r7, #10]
 8003764:	089b      	lsrs	r3, r3, #2
 8003766:	b2db      	uxtb	r3, r3
 8003768:	4619      	mov	r1, r3
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f7ff fea8 	bl	80034c0 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f7ff feda 	bl	800352a <u8x8_cad_EndTransfer>
      break;
 8003776:	e001      	b.n	800377c <u8x8_d_st7565_common+0x104>
#endif
    default:
      return 0;
 8003778:	2300      	movs	r3, #0
 800377a:	e000      	b.n	800377e <u8x8_d_st7565_common+0x106>
  }
  return 1;
 800377c:	2301      	movs	r3, #1
}
 800377e:	4618      	mov	r0, r3
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	0800d1a8 	.word	0x0800d1a8
 800378c:	0800d1b0 	.word	0x0800d1b0

08003790 <u8x8_d_st7565_64128n>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_64128n(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	607b      	str	r3, [r7, #4]
 800379a:	460b      	mov	r3, r1
 800379c:	72fb      	strb	r3, [r7, #11]
 800379e:	4613      	mov	r3, r2
 80037a0:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 80037a2:	7aba      	ldrb	r2, [r7, #10]
 80037a4:	7af9      	ldrb	r1, [r7, #11]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f7ff ff65 	bl	8003678 <u8x8_d_st7565_common>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d131      	bne.n	8003818 <u8x8_d_st7565_64128n+0x88>
  {
    /* msg not handled, then try here */
    switch(msg)
 80037b4:	7afb      	ldrb	r3, [r7, #11]
 80037b6:	2b0d      	cmp	r3, #13
 80037b8:	d013      	beq.n	80037e2 <u8x8_d_st7565_64128n+0x52>
 80037ba:	2b0d      	cmp	r3, #13
 80037bc:	dc2a      	bgt.n	8003814 <u8x8_d_st7565_64128n+0x84>
 80037be:	2b09      	cmp	r3, #9
 80037c0:	d002      	beq.n	80037c8 <u8x8_d_st7565_64128n+0x38>
 80037c2:	2b0a      	cmp	r3, #10
 80037c4:	d005      	beq.n	80037d2 <u8x8_d_st7565_64128n+0x42>
 80037c6:	e025      	b.n	8003814 <u8x8_d_st7565_64128n+0x84>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_64128n_display_info);
 80037c8:	4916      	ldr	r1, [pc, #88]	@ (8003824 <u8x8_d_st7565_64128n+0x94>)
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 f832 	bl	8003834 <u8x8_d_helper_display_setup_memory>
	break;
 80037d0:	e022      	b.n	8003818 <u8x8_d_st7565_64128n+0x88>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 f842 	bl	800385c <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_64128n_init_seq);
 80037d8:	4913      	ldr	r1, [pc, #76]	@ (8003828 <u8x8_d_st7565_64128n+0x98>)
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f7ff feb5 	bl	800354a <u8x8_cad_SendSequence>
	break;
 80037e0:	e01a      	b.n	8003818 <u8x8_d_st7565_64128n+0x88>
      case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
	if ( arg_int == 0 )
 80037e2:	7abb      	ldrb	r3, [r7, #10]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10a      	bne.n	80037fe <u8x8_d_st7565_64128n+0x6e>
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
 80037e8:	4910      	ldr	r1, [pc, #64]	@ (800382c <u8x8_d_st7565_64128n+0x9c>)
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f7ff fead 	bl	800354a <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	7c9a      	ldrb	r2, [r3, #18]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	else
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
	}	
	break;
 80037fc:	e00c      	b.n	8003818 <u8x8_d_st7565_64128n+0x88>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
 80037fe:	490c      	ldr	r1, [pc, #48]	@ (8003830 <u8x8_d_st7565_64128n+0xa0>)
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f7ff fea2 	bl	800354a <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	7cda      	ldrb	r2, [r3, #19]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	break;
 8003812:	e001      	b.n	8003818 <u8x8_d_st7565_64128n+0x88>
      default:
	return 0;		/* msg unknown */
 8003814:	2300      	movs	r3, #0
 8003816:	e000      	b.n	800381a <u8x8_d_st7565_64128n+0x8a>
    }
  }
  return 1;
 8003818:	2301      	movs	r3, #1
}
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	0800d1e8 	.word	0x0800d1e8
 8003828:	0800d1c8 	.word	0x0800d1c8
 800382c:	0800d1b8 	.word	0x0800d1b8
 8003830:	0800d1c0 	.word	0x0800d1c0

08003834 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	7c9a      	ldrb	r2, [r3, #18]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800385c:	b590      	push	{r4, r7, lr}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	695c      	ldr	r4, [r3, #20]
 8003868:	2300      	movs	r3, #0
 800386a:	2200      	movs	r2, #0
 800386c:	2128      	movs	r1, #40	@ 0x28
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68dc      	ldr	r4, [r3, #12]
 8003876:	2300      	movs	r3, #0
 8003878:	2200      	movs	r2, #0
 800387a:	2114      	movs	r1, #20
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8003880:	2201      	movs	r2, #1
 8003882:	214b      	movs	r1, #75	@ 0x4b
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f897 	bl	80039b8 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	791b      	ldrb	r3, [r3, #4]
 8003890:	461a      	mov	r2, r3
 8003892:	2129      	movs	r1, #41	@ 0x29
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f88f 	bl	80039b8 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800389a:	2200      	movs	r2, #0
 800389c:	214b      	movs	r1, #75	@ 0x4b
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f88a 	bl	80039b8 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	791b      	ldrb	r3, [r3, #4]
 80038aa:	461a      	mov	r2, r3
 80038ac:	2129      	movs	r1, #41	@ 0x29
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f882 	bl	80039b8 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80038b4:	2201      	movs	r2, #1
 80038b6:	214b      	movs	r1, #75	@ 0x4b
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f87d 	bl	80039b8 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	795b      	ldrb	r3, [r3, #5]
 80038c4:	461a      	mov	r2, r3
 80038c6:	2129      	movs	r1, #41	@ 0x29
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f875 	bl	80039b8 <u8x8_gpio_call>
}    
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd90      	pop	{r4, r7, pc}

080038d6 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80038d6:	b590      	push	{r4, r7, lr}
 80038d8:	b085      	sub	sp, #20
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
 80038de:	4608      	mov	r0, r1
 80038e0:	4611      	mov	r1, r2
 80038e2:	461a      	mov	r2, r3
 80038e4:	4603      	mov	r3, r0
 80038e6:	70fb      	strb	r3, [r7, #3]
 80038e8:	460b      	mov	r3, r1
 80038ea:	70bb      	strb	r3, [r7, #2]
 80038ec:	4613      	mov	r3, r2
 80038ee:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80038f0:	78fb      	ldrb	r3, [r7, #3]
 80038f2:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80038f4:	78bb      	ldrb	r3, [r7, #2]
 80038f6:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80038f8:	787b      	ldrb	r3, [r7, #1]
 80038fa:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80038fc:	6a3b      	ldr	r3, [r7, #32]
 80038fe:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689c      	ldr	r4, [r3, #8]
 8003904:	f107 0308 	add.w	r3, r7, #8
 8003908:	2201      	movs	r2, #1
 800390a:	210f      	movs	r1, #15
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	47a0      	blx	r4
 8003910:	4603      	mov	r3, r0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	bd90      	pop	{r4, r7, pc}

0800391a <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 800391a:	b590      	push	{r4, r7, lr}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689c      	ldr	r4, [r3, #8]
 8003926:	2300      	movs	r3, #0
 8003928:	2200      	movs	r2, #0
 800392a:	2109      	movs	r1, #9
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	47a0      	blx	r4
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	bd90      	pop	{r4, r7, pc}

08003938 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8003938:	b590      	push	{r4, r7, lr}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689c      	ldr	r4, [r3, #8]
 8003944:	2300      	movs	r3, #0
 8003946:	2200      	movs	r2, #0
 8003948:	210a      	movs	r1, #10
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	bd90      	pop	{r4, r7, pc}

08003956 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8003956:	b590      	push	{r4, r7, lr}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	460b      	mov	r3, r1
 8003960:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	689c      	ldr	r4, [r3, #8]
 8003966:	78fa      	ldrb	r2, [r7, #3]
 8003968:	2300      	movs	r3, #0
 800396a:	210b      	movs	r1, #11
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	47a0      	blx	r4
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	bd90      	pop	{r4, r7, pc}

08003978 <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 8003978:	b590      	push	{r4, r7, lr}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689c      	ldr	r4, [r3, #8]
 8003988:	78fa      	ldrb	r2, [r7, #3]
 800398a:	2300      	movs	r3, #0
 800398c:	210e      	movs	r1, #14
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	47a0      	blx	r4
}
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	bd90      	pop	{r4, r7, pc}

0800399a <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 800399a:	b590      	push	{r4, r7, lr}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689c      	ldr	r4, [r3, #8]
 80039a6:	2300      	movs	r3, #0
 80039a8:	2200      	movs	r2, #0
 80039aa:	2110      	movs	r1, #16
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	47a0      	blx	r4
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd90      	pop	{r4, r7, pc}

080039b8 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80039b8:	b590      	push	{r4, r7, lr}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	460b      	mov	r3, r1
 80039c2:	70fb      	strb	r3, [r7, #3]
 80039c4:	4613      	mov	r3, r2
 80039c6:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	695c      	ldr	r4, [r3, #20]
 80039cc:	78ba      	ldrb	r2, [r7, #2]
 80039ce:	78f9      	ldrb	r1, [r7, #3]
 80039d0:	2300      	movs	r3, #0
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	47a0      	blx	r4
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd90      	pop	{r4, r7, pc}

080039de <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80039de:	b480      	push	{r7}
 80039e0:	b085      	sub	sp, #20
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	60f8      	str	r0, [r7, #12]
 80039e6:	607b      	str	r3, [r7, #4]
 80039e8:	460b      	mov	r3, r1
 80039ea:	72fb      	strb	r3, [r7, #11]
 80039ec:	4613      	mov	r3, r2
 80039ee:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
	...

08003a00 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a11      	ldr	r2, [pc, #68]	@ (8003a58 <u8x8_SetupDefaults+0x58>)
 8003a12:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a10      	ldr	r2, [pc, #64]	@ (8003a58 <u8x8_SetupDefaults+0x58>)
 8003a18:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a0e      	ldr	r2, [pc, #56]	@ (8003a58 <u8x8_SetupDefaults+0x58>)
 8003a1e:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a0d      	ldr	r2, [pc, #52]	@ (8003a58 <u8x8_SetupDefaults+0x58>)
 8003a24:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	22ff      	movs	r2, #255	@ 0xff
 8003a40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	22ff      	movs	r2, #255	@ 0xff
 8003a48:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	080039df 	.word	0x080039df

08003a5c <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
 8003a68:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f7ff ffc8 	bl	8003a00 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f7ff ff46 	bl	800391a <u8x8_SetupMemory>
}
 8003a8e:	bf00      	nop
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <Expander_InitPinDirections>:
 * @param hi2c          Pointer to the I2C handle.
 * @param deviceAddress I2C address of the expander.
 * @return HAL_StatusTypeDef HAL_OK if successful, or an error code.
 */
HAL_StatusTypeDef Expander_InitPinDirections(I2C_HandleTypeDef *hi2c, uint8_t deviceAddress)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b088      	sub	sp, #32
 8003a9a:	af04      	add	r7, sp, #16
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef status;
    uint8_t port0_config = 0;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	73bb      	strb	r3, [r7, #14]

    // Build Port 0 configuration mask using the defined direction macros:
    port0_config |= (ALERT_PIN_CELL_01_DIR   == PIN_INPUT) ? ALERT_PIN_CELL_01  : 0;
 8003aa6:	7bbb      	ldrb	r3, [r7, #14]
 8003aa8:	f043 0301 	orr.w	r3, r3, #1
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_VOLTAGE_01_DIR  == PIN_INPUT) ? CELL_01_VOLTAGE_01 : 0;
 8003ab0:	7bbb      	ldrb	r3, [r7, #14]
 8003ab2:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_VOLTAGE_02_DIR  == PIN_INPUT) ? CELL_01_VOLTAGE_02 : 0;
 8003ab4:	7bbb      	ldrb	r3, [r7, #14]
 8003ab6:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_VOLTAGE_03_DIR  == PIN_INPUT) ? CELL_01_VOLTAGE_03 : 0;
 8003ab8:	7bbb      	ldrb	r3, [r7, #14]
 8003aba:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_LED_01_DIR      == PIN_INPUT) ? CELL_01_LED_01     : 0;
 8003abc:	7bbb      	ldrb	r3, [r7, #14]
 8003abe:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_02_VOLTAGE_03_DIR  == PIN_INPUT) ? CELL_02_VOLTAGE_03 : 0;
 8003ac0:	7bbb      	ldrb	r3, [r7, #14]
 8003ac2:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_02_VOLTAGE_02_DIR  == PIN_INPUT) ? CELL_02_VOLTAGE_02 : 0;
 8003ac4:	7bbb      	ldrb	r3, [r7, #14]
 8003ac6:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_02_VOLTAGE_01_DIR  == PIN_INPUT) ? CELL_02_VOLTAGE_01 : 0;
 8003ac8:	7bbb      	ldrb	r3, [r7, #14]
 8003aca:	73bb      	strb	r3, [r7, #14]

    // For Port 1, use the corresponding direction macros if needed.
    // In this example, we build Port 1 configuration mask similarly:
    uint8_t port1_config = 0;
 8003acc:	2300      	movs	r3, #0
 8003ace:	737b      	strb	r3, [r7, #13]
    port1_config |= (ALERT_PIN_CELL_02_DIR   == PIN_INPUT) ? ALERT_PIN_CELL_02  : 0;
 8003ad0:	7b7b      	ldrb	r3, [r7, #13]
 8003ad2:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_02_LED_01_DIR      == PIN_INPUT) ? CELL_02_LED_01 	: 0;
 8003ad4:	7b7b      	ldrb	r3, [r7, #13]
 8003ad6:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_LED_01_DIR      == PIN_INPUT) ? CELL_03_LED_01 	: 0;
 8003ad8:	7b7b      	ldrb	r3, [r7, #13]
 8003ada:	737b      	strb	r3, [r7, #13]
    port1_config |= (EXPANDER_FAN_CTRL_DIR   == PIN_INPUT) ? EXPANDER_FAN_CTRL 	: 0;
 8003adc:	7b7b      	ldrb	r3, [r7, #13]
 8003ade:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_VOLTAGE_03_DIR  == PIN_INPUT) ? CELL_03_VOLTAGE_03	: 0;
 8003ae0:	7b7b      	ldrb	r3, [r7, #13]
 8003ae2:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_VOLTAGE_02_DIR  == PIN_INPUT) ? CELL_03_VOLTAGE_02 : 0;
 8003ae4:	7b7b      	ldrb	r3, [r7, #13]
 8003ae6:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_VOLTAGE_01_DIR  == PIN_INPUT) ? CELL_03_VOLTAGE_01 : 0;
 8003ae8:	7b7b      	ldrb	r3, [r7, #13]
 8003aea:	737b      	strb	r3, [r7, #13]
    port1_config |= (ALERT_PIN_CELL_03_DIR   == PIN_INPUT) ? ALERT_PIN_CELL_03 	: 0;
 8003aec:	7b7b      	ldrb	r3, [r7, #13]
 8003aee:	737b      	strb	r3, [r7, #13]

    // Write configuration to Port 0 register.
    status = HAL_I2C_Mem_Write(hi2c,
 8003af0:	78fb      	ldrb	r3, [r7, #3]
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	b299      	uxth	r1, r3
 8003af8:	2364      	movs	r3, #100	@ 0x64
 8003afa:	9302      	str	r3, [sp, #8]
 8003afc:	2301      	movs	r3, #1
 8003afe:	9301      	str	r3, [sp, #4]
 8003b00:	f107 030e 	add.w	r3, r7, #14
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	2301      	movs	r3, #1
 8003b08:	2206      	movs	r2, #6
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f004 fe72 	bl	80087f4 <HAL_I2C_Mem_Write>
 8003b10:	4603      	mov	r3, r0
 8003b12:	73fb      	strb	r3, [r7, #15]
                               PCA9535_REG_CONFIG_PORT0,
                               I2C_MEMADD_SIZE_8BIT,
                               &port0_config,
                               1,
                               EXPANDER_I2C_TIMEOUT);
    if (status != HAL_OK)
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <Expander_InitPinDirections+0x88>
    {
        return status;
 8003b1a:	7bfb      	ldrb	r3, [r7, #15]
 8003b1c:	e012      	b.n	8003b44 <Expander_InitPinDirections+0xae>
    }

    // Write configuration to Port 1 register.
    status = HAL_I2C_Mem_Write(hi2c,
 8003b1e:	78fb      	ldrb	r3, [r7, #3]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	b299      	uxth	r1, r3
 8003b26:	2364      	movs	r3, #100	@ 0x64
 8003b28:	9302      	str	r3, [sp, #8]
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	9301      	str	r3, [sp, #4]
 8003b2e:	f107 030d 	add.w	r3, r7, #13
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	2301      	movs	r3, #1
 8003b36:	2207      	movs	r2, #7
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f004 fe5b 	bl	80087f4 <HAL_I2C_Mem_Write>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	73fb      	strb	r3, [r7, #15]
                               PCA9535_REG_CONFIG_PORT1,
                               I2C_MEMADD_SIZE_8BIT,
                               &port1_config,
                               1,
                               EXPANDER_I2C_TIMEOUT);
    return status;
 8003b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <Expander_SetPinState>:
 */
HAL_StatusTypeDef Expander_SetPinState(I2C_HandleTypeDef *hi2c,
                                       uint8_t deviceAddress,
                                       uint16_t pin,
                                       uint8_t state)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af04      	add	r7, sp, #16
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	4608      	mov	r0, r1
 8003b56:	4611      	mov	r1, r2
 8003b58:	461a      	mov	r2, r3
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	70fb      	strb	r3, [r7, #3]
 8003b5e:	460b      	mov	r3, r1
 8003b60:	803b      	strh	r3, [r7, #0]
 8003b62:	4613      	mov	r3, r2
 8003b64:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef status;
    uint8_t regAddress;
    uint8_t currentOutput;

    // Determine which port the pin belongs to.
    if ((pin & 0xFF00) == 0)
 8003b66:	883b      	ldrh	r3, [r7, #0]
 8003b68:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d142      	bne.n	8003bf6 <Expander_SetPinState+0xaa>
    {
        // Pin belongs to Port 0.
        regAddress = PCA9535_REG_OUTPUT_PORT0;
 8003b70:	2302      	movs	r3, #2
 8003b72:	73fb      	strb	r3, [r7, #15]
        status = HAL_I2C_Mem_Read(hi2c,
 8003b74:	78fb      	ldrb	r3, [r7, #3]
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	b299      	uxth	r1, r3
 8003b7c:	7bfb      	ldrb	r3, [r7, #15]
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	2364      	movs	r3, #100	@ 0x64
 8003b82:	9302      	str	r3, [sp, #8]
 8003b84:	2301      	movs	r3, #1
 8003b86:	9301      	str	r3, [sp, #4]
 8003b88:	f107 030c 	add.w	r3, r7, #12
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	2301      	movs	r3, #1
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f004 ff29 	bl	80089e8 <HAL_I2C_Mem_Read>
 8003b96:	4603      	mov	r3, r0
 8003b98:	73bb      	strb	r3, [r7, #14]
                                  regAddress,
                                  I2C_MEMADD_SIZE_8BIT,
                                  &currentOutput,
                                  1,
                                  EXPANDER_I2C_TIMEOUT);
        if (status != HAL_OK) {
 8003b9a:	7bbb      	ldrb	r3, [r7, #14]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <Expander_SetPinState+0x58>
            return status;
 8003ba0:	7bbb      	ldrb	r3, [r7, #14]
 8003ba2:	e073      	b.n	8003c8c <Expander_SetPinState+0x140>
        }
        if (state == HIGH) {
 8003ba4:	78bb      	ldrb	r3, [r7, #2]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d106      	bne.n	8003bb8 <Expander_SetPinState+0x6c>
            currentOutput |= (uint8_t)pin;
 8003baa:	883b      	ldrh	r3, [r7, #0]
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	7b3b      	ldrb	r3, [r7, #12]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	733b      	strb	r3, [r7, #12]
 8003bb6:	e009      	b.n	8003bcc <Expander_SetPinState+0x80>
        } else {
            currentOutput &= ~(uint8_t)pin;
 8003bb8:	883b      	ldrh	r3, [r7, #0]
 8003bba:	b25b      	sxtb	r3, r3
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	b25a      	sxtb	r2, r3
 8003bc0:	7b3b      	ldrb	r3, [r7, #12]
 8003bc2:	b25b      	sxtb	r3, r3
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	b25b      	sxtb	r3, r3
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	733b      	strb	r3, [r7, #12]
        }
        status = HAL_I2C_Mem_Write(hi2c,
 8003bcc:	78fb      	ldrb	r3, [r7, #3]
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	b299      	uxth	r1, r3
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	2364      	movs	r3, #100	@ 0x64
 8003bda:	9302      	str	r3, [sp, #8]
 8003bdc:	2301      	movs	r3, #1
 8003bde:	9301      	str	r3, [sp, #4]
 8003be0:	f107 030c 	add.w	r3, r7, #12
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	2301      	movs	r3, #1
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f004 fe03 	bl	80087f4 <HAL_I2C_Mem_Write>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	73bb      	strb	r3, [r7, #14]
                                   regAddress,
                                   I2C_MEMADD_SIZE_8BIT,
                                   &currentOutput,
                                   1,
                                   EXPANDER_I2C_TIMEOUT);
        return status;
 8003bf2:	7bbb      	ldrb	r3, [r7, #14]
 8003bf4:	e04a      	b.n	8003c8c <Expander_SetPinState+0x140>
    }
    else if ((pin & 0x00FF) == 0)
 8003bf6:	883b      	ldrh	r3, [r7, #0]
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d145      	bne.n	8003c8a <Expander_SetPinState+0x13e>
    {
        // Pin belongs to Port 1.
        regAddress = PCA9535_REG_OUTPUT_PORT1;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	73fb      	strb	r3, [r7, #15]
        status = HAL_I2C_Mem_Read(hi2c,
 8003c02:	78fb      	ldrb	r3, [r7, #3]
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	b299      	uxth	r1, r3
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	2364      	movs	r3, #100	@ 0x64
 8003c10:	9302      	str	r3, [sp, #8]
 8003c12:	2301      	movs	r3, #1
 8003c14:	9301      	str	r3, [sp, #4]
 8003c16:	f107 030c 	add.w	r3, r7, #12
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f004 fee2 	bl	80089e8 <HAL_I2C_Mem_Read>
 8003c24:	4603      	mov	r3, r0
 8003c26:	73bb      	strb	r3, [r7, #14]
                                  regAddress,
                                  I2C_MEMADD_SIZE_8BIT,
                                  &currentOutput,
                                  1,
                                  EXPANDER_I2C_TIMEOUT);
        if (status != HAL_OK) {
 8003c28:	7bbb      	ldrb	r3, [r7, #14]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <Expander_SetPinState+0xe6>
            return status;
 8003c2e:	7bbb      	ldrb	r3, [r7, #14]
 8003c30:	e02c      	b.n	8003c8c <Expander_SetPinState+0x140>
        }
        uint8_t pin_mask = (uint8_t)(pin >> 8);
 8003c32:	883b      	ldrh	r3, [r7, #0]
 8003c34:	0a1b      	lsrs	r3, r3, #8
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	737b      	strb	r3, [r7, #13]
        if (state == HIGH) {
 8003c3a:	78bb      	ldrb	r3, [r7, #2]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d105      	bne.n	8003c4c <Expander_SetPinState+0x100>
            currentOutput |= pin_mask;
 8003c40:	7b3a      	ldrb	r2, [r7, #12]
 8003c42:	7b7b      	ldrb	r3, [r7, #13]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	733b      	strb	r3, [r7, #12]
 8003c4a:	e009      	b.n	8003c60 <Expander_SetPinState+0x114>
        } else {
            currentOutput &= ~pin_mask;
 8003c4c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003c50:	43db      	mvns	r3, r3
 8003c52:	b25a      	sxtb	r2, r3
 8003c54:	7b3b      	ldrb	r3, [r7, #12]
 8003c56:	b25b      	sxtb	r3, r3
 8003c58:	4013      	ands	r3, r2
 8003c5a:	b25b      	sxtb	r3, r3
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	733b      	strb	r3, [r7, #12]
        }
        status = HAL_I2C_Mem_Write(hi2c,
 8003c60:	78fb      	ldrb	r3, [r7, #3]
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	b299      	uxth	r1, r3
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	2364      	movs	r3, #100	@ 0x64
 8003c6e:	9302      	str	r3, [sp, #8]
 8003c70:	2301      	movs	r3, #1
 8003c72:	9301      	str	r3, [sp, #4]
 8003c74:	f107 030c 	add.w	r3, r7, #12
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f004 fdb9 	bl	80087f4 <HAL_I2C_Mem_Write>
 8003c82:	4603      	mov	r3, r0
 8003c84:	73bb      	strb	r3, [r7, #14]
                                   regAddress,
                                   I2C_MEMADD_SIZE_8BIT,
                                   &currentOutput,
                                   1,
                                   EXPANDER_I2C_TIMEOUT);
        return status;
 8003c86:	7bbb      	ldrb	r3, [r7, #14]
 8003c88:	e000      	b.n	8003c8c <Expander_SetPinState+0x140>
    }
    else {
        // Invalid pin mask.
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
    }
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <Expander_InitAllDevices>:
 *
 * @param hi2c Pointer to the I2C handle.
 * @return HAL_StatusTypeDef HAL_OK if all devices are initialized successfully, or an error code.
 */
HAL_StatusTypeDef Expander_InitAllDevices(I2C_HandleTypeDef *hi2c)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;

    // List of expander addresses.
    uint8_t addresses[] = {
 8003c9c:	4b11      	ldr	r3, [pc, #68]	@ (8003ce4 <Expander_InitAllDevices+0x50>)
 8003c9e:	60bb      	str	r3, [r7, #8]
        GPIO_EXPANDER_ID_02,
        GPIO_EXPANDER_ID_03,
        GPIO_EXPANDER_ID_04
    };

    size_t count = sizeof(addresses) / sizeof(addresses[0]);
 8003ca0:	2304      	movs	r3, #4
 8003ca2:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < count; i++)
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	617b      	str	r3, [r7, #20]
 8003ca8:	e012      	b.n	8003cd0 <Expander_InitAllDevices+0x3c>
    {
        status = Expander_InitPinDirections(hi2c, addresses[i]);
 8003caa:	f107 0208 	add.w	r2, r7, #8
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7ff feed 	bl	8003a96 <Expander_InitPinDirections>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <Expander_InitAllDevices+0x36>
        {
            return status;
 8003cc6:	7bfb      	ldrb	r3, [r7, #15]
 8003cc8:	e007      	b.n	8003cda <Expander_InitAllDevices+0x46>
    for (size_t i = 0; i < count; i++)
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d3e8      	bcc.n	8003caa <Expander_InitAllDevices+0x16>
        }
    }
    return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	24232221 	.word	0x24232221

08003ce8 <get_cell_control_params>:


// Helper function to get the expander address and MUX control pin definitions for a given cell.
// Each cell has three control pins (S0, S1, S2) that drive your MUX select lines.
static void get_cell_control_params(CellID cell, uint8_t *expander_Address, uint16_t *v_set_pin_01, uint16_t *v_set_pin_02, uint16_t *v_set_pin_03 ,uint16_t *LED_PIN )
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60b9      	str	r1, [r7, #8]
 8003cf0:	607a      	str	r2, [r7, #4]
 8003cf2:	603b      	str	r3, [r7, #0]
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	73fb      	strb	r3, [r7, #15]
    switch(cell)
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
 8003cfa:	2b17      	cmp	r3, #23
 8003cfc:	f200 81dc 	bhi.w	80040b8 <get_cell_control_params+0x3d0>
 8003d00:	a201      	add	r2, pc, #4	@ (adr r2, 8003d08 <get_cell_control_params+0x20>)
 8003d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d06:	bf00      	nop
 8003d08:	08003d69 	.word	0x08003d69
 8003d0c:	08003d89 	.word	0x08003d89
 8003d10:	08003dab 	.word	0x08003dab
 8003d14:	08003dd3 	.word	0x08003dd3
 8003d18:	08003df3 	.word	0x08003df3
 8003d1c:	08003e15 	.word	0x08003e15
 8003d20:	08003e3d 	.word	0x08003e3d
 8003d24:	08003e5d 	.word	0x08003e5d
 8003d28:	08003e7f 	.word	0x08003e7f
 8003d2c:	08003ea7 	.word	0x08003ea7
 8003d30:	08003ec7 	.word	0x08003ec7
 8003d34:	08003ee9 	.word	0x08003ee9
 8003d38:	08003f11 	.word	0x08003f11
 8003d3c:	08003f31 	.word	0x08003f31
 8003d40:	08003f53 	.word	0x08003f53
 8003d44:	08003f7b 	.word	0x08003f7b
 8003d48:	08003f9b 	.word	0x08003f9b
 8003d4c:	08003fbd 	.word	0x08003fbd
 8003d50:	08003fe5 	.word	0x08003fe5
 8003d54:	08004005 	.word	0x08004005
 8003d58:	08004027 	.word	0x08004027
 8003d5c:	0800404f 	.word	0x0800404f
 8003d60:	0800406f 	.word	0x0800406f
 8003d64:	08004091 	.word	0x08004091
    {

    // for the cell 01 to 12
        case CELL_1:
            *expander_Address = GPIO_EXPANDER_ID_01;
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2221      	movs	r2, #33	@ 0x21
 8003d6c:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2202      	movs	r2, #2
 8003d72:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	2204      	movs	r2, #4
 8003d78:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	2208      	movs	r2, #8
 8003d7e:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	2210      	movs	r2, #16
 8003d84:	801a      	strh	r2, [r3, #0]
            break;
 8003d86:	e1a7      	b.n	80040d8 <get_cell_control_params+0x3f0>

        case CELL_2:
            *expander_Address = GPIO_EXPANDER_ID_01;
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	2221      	movs	r2, #33	@ 0x21
 8003d8c:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2280      	movs	r2, #128	@ 0x80
 8003d92:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	2240      	movs	r2, #64	@ 0x40
 8003d98:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003da6:	801a      	strh	r2, [r3, #0]
            break;
 8003da8:	e196      	b.n	80040d8 <get_cell_control_params+0x3f0>

        case CELL_3:
            *expander_Address = GPIO_EXPANDER_ID_01;
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	2221      	movs	r2, #33	@ 0x21
 8003dae:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003db6:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003dbe:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003dc6:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003dce:	801a      	strh	r2, [r3, #0]
            break;
 8003dd0:	e182      	b.n	80040d8 <get_cell_control_params+0x3f0>

        case CELL_4:
            *expander_Address = GPIO_EXPANDER_ID_02;
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	2222      	movs	r2, #34	@ 0x22
 8003dd6:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	2204      	movs	r2, #4
 8003de2:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	2208      	movs	r2, #8
 8003de8:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	2210      	movs	r2, #16
 8003dee:	801a      	strh	r2, [r3, #0]
            break;
 8003df0:	e172      	b.n	80040d8 <get_cell_control_params+0x3f0>

        case CELL_5:
            *expander_Address = GPIO_EXPANDER_ID_02;
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	2222      	movs	r2, #34	@ 0x22
 8003df6:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2280      	movs	r2, #128	@ 0x80
 8003dfc:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2240      	movs	r2, #64	@ 0x40
 8003e02:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	2220      	movs	r2, #32
 8003e08:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e10:	801a      	strh	r2, [r3, #0]
            break;
 8003e12:	e161      	b.n	80040d8 <get_cell_control_params+0x3f0>

        case CELL_6:
            *expander_Address = GPIO_EXPANDER_ID_02;
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	2222      	movs	r2, #34	@ 0x22
 8003e18:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003e20:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e28:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003e30:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e38:	801a      	strh	r2, [r3, #0]
            break;
 8003e3a:	e14d      	b.n	80040d8 <get_cell_control_params+0x3f0>

        case CELL_7:
            *expander_Address = GPIO_EXPANDER_ID_03;
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	2223      	movs	r2, #35	@ 0x23
 8003e40:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2202      	movs	r2, #2
 8003e46:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	2204      	movs	r2, #4
 8003e4c:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	2208      	movs	r2, #8
 8003e52:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	2210      	movs	r2, #16
 8003e58:	801a      	strh	r2, [r3, #0]
            break;
 8003e5a:	e13d      	b.n	80040d8 <get_cell_control_params+0x3f0>

        case CELL_8:
            *expander_Address = GPIO_EXPANDER_ID_03;
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	2223      	movs	r2, #35	@ 0x23
 8003e60:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2280      	movs	r2, #128	@ 0x80
 8003e66:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	2240      	movs	r2, #64	@ 0x40
 8003e6c:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	2220      	movs	r2, #32
 8003e72:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e7a:	801a      	strh	r2, [r3, #0]
            break;
 8003e7c:	e12c      	b.n	80040d8 <get_cell_control_params+0x3f0>

        case CELL_9:
            *expander_Address = GPIO_EXPANDER_ID_03;
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2223      	movs	r2, #35	@ 0x23
 8003e82:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003e8a:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e92:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003e9a:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ea2:	801a      	strh	r2, [r3, #0]
            break;
 8003ea4:	e118      	b.n	80040d8 <get_cell_control_params+0x3f0>

        case CELL_10:
            *expander_Address = GPIO_EXPANDER_ID_04;
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2224      	movs	r2, #36	@ 0x24
 8003eaa:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2204      	movs	r2, #4
 8003eb6:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	2208      	movs	r2, #8
 8003ebc:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	2210      	movs	r2, #16
 8003ec2:	801a      	strh	r2, [r3, #0]
            break;
 8003ec4:	e108      	b.n	80040d8 <get_cell_control_params+0x3f0>

        case CELL_11:
            *expander_Address = GPIO_EXPANDER_ID_04;
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	2224      	movs	r2, #36	@ 0x24
 8003eca:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2280      	movs	r2, #128	@ 0x80
 8003ed0:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2240      	movs	r2, #64	@ 0x40
 8003ed6:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	2220      	movs	r2, #32
 8003edc:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ee4:	801a      	strh	r2, [r3, #0]
            break;
 8003ee6:	e0f7      	b.n	80040d8 <get_cell_control_params+0x3f0>

        case CELL_12:
            *expander_Address = GPIO_EXPANDER_ID_04;
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2224      	movs	r2, #36	@ 0x24
 8003eec:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003ef4:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003efc:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003f04:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f0c:	801a      	strh	r2, [r3, #0]
            break;
 8003f0e:	e0e3      	b.n	80040d8 <get_cell_control_params+0x3f0>

            // for the cell 12 to 24

        case CELL_13:
            *expander_Address = GPIO_EXPANDER_ID_01;
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2221      	movs	r2, #33	@ 0x21
 8003f14:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2202      	movs	r2, #2
 8003f1a:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	2204      	movs	r2, #4
 8003f20:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	2208      	movs	r2, #8
 8003f26:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	2210      	movs	r2, #16
 8003f2c:	801a      	strh	r2, [r3, #0]

            break;
 8003f2e:	e0d3      	b.n	80040d8 <get_cell_control_params+0x3f0>

        case CELL_14:
            *expander_Address = GPIO_EXPANDER_ID_01;
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	2221      	movs	r2, #33	@ 0x21
 8003f34:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2280      	movs	r2, #128	@ 0x80
 8003f3a:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	2240      	movs	r2, #64	@ 0x40
 8003f40:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	2220      	movs	r2, #32
 8003f46:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f4e:	801a      	strh	r2, [r3, #0]

            break;
 8003f50:	e0c2      	b.n	80040d8 <get_cell_control_params+0x3f0>

        case CELL_15:
            *expander_Address = GPIO_EXPANDER_ID_01;
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	2221      	movs	r2, #33	@ 0x21
 8003f56:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003f5e:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f66:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003f6e:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f76:	801a      	strh	r2, [r3, #0]
            break;
 8003f78:	e0ae      	b.n	80040d8 <get_cell_control_params+0x3f0>

        case CELL_16:
            *expander_Address = GPIO_EXPANDER_ID_02;
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2222      	movs	r2, #34	@ 0x22
 8003f7e:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2204      	movs	r2, #4
 8003f8a:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	2208      	movs	r2, #8
 8003f90:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	2210      	movs	r2, #16
 8003f96:	801a      	strh	r2, [r3, #0]
            break;
 8003f98:	e09e      	b.n	80040d8 <get_cell_control_params+0x3f0>

        case CELL_17:
            *expander_Address = GPIO_EXPANDER_ID_02;
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	2222      	movs	r2, #34	@ 0x22
 8003f9e:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2280      	movs	r2, #128	@ 0x80
 8003fa4:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2240      	movs	r2, #64	@ 0x40
 8003faa:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fb8:	801a      	strh	r2, [r3, #0]
            break;
 8003fba:	e08d      	b.n	80040d8 <get_cell_control_params+0x3f0>

        case CELL_18:
            *expander_Address = GPIO_EXPANDER_ID_02;
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	2222      	movs	r2, #34	@ 0x22
 8003fc0:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003fc8:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003fd0:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003fd8:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003fe0:	801a      	strh	r2, [r3, #0]
            break;
 8003fe2:	e079      	b.n	80040d8 <get_cell_control_params+0x3f0>

        case CELL_19:
            *expander_Address = GPIO_EXPANDER_ID_03;
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2223      	movs	r2, #35	@ 0x23
 8003fe8:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2202      	movs	r2, #2
 8003fee:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	2204      	movs	r2, #4
 8003ff4:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	2208      	movs	r2, #8
 8003ffa:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	2210      	movs	r2, #16
 8004000:	801a      	strh	r2, [r3, #0]
            break;
 8004002:	e069      	b.n	80040d8 <get_cell_control_params+0x3f0>

        case CELL_20:
            *expander_Address = GPIO_EXPANDER_ID_03;
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2223      	movs	r2, #35	@ 0x23
 8004008:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2280      	movs	r2, #128	@ 0x80
 800400e:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	2240      	movs	r2, #64	@ 0x40
 8004014:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	2220      	movs	r2, #32
 800401a:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004022:	801a      	strh	r2, [r3, #0]
            break;
 8004024:	e058      	b.n	80040d8 <get_cell_control_params+0x3f0>

        case CELL_21:
            *expander_Address = GPIO_EXPANDER_ID_03;
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	2223      	movs	r2, #35	@ 0x23
 800402a:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004032:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800403a:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004042:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800404a:	801a      	strh	r2, [r3, #0]
            break;
 800404c:	e044      	b.n	80040d8 <get_cell_control_params+0x3f0>

        case CELL_22:
            *expander_Address = GPIO_EXPANDER_ID_04;
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	2224      	movs	r2, #36	@ 0x24
 8004052:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2202      	movs	r2, #2
 8004058:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2204      	movs	r2, #4
 800405e:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	2208      	movs	r2, #8
 8004064:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	2210      	movs	r2, #16
 800406a:	801a      	strh	r2, [r3, #0]
            break;
 800406c:	e034      	b.n	80040d8 <get_cell_control_params+0x3f0>

        case CELL_23:
            *expander_Address = GPIO_EXPANDER_ID_04;
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2224      	movs	r2, #36	@ 0x24
 8004072:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2280      	movs	r2, #128	@ 0x80
 8004078:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2240      	movs	r2, #64	@ 0x40
 800407e:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	2220      	movs	r2, #32
 8004084:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800408c:	801a      	strh	r2, [r3, #0]
            break;
 800408e:	e023      	b.n	80040d8 <get_cell_control_params+0x3f0>

        case CELL_24:
            *expander_Address = GPIO_EXPANDER_ID_04;
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2224      	movs	r2, #36	@ 0x24
 8004094:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800409c:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80040a4:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80040ac:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80040b4:	801a      	strh	r2, [r3, #0]
            break;
 80040b6:	e00f      	b.n	80040d8 <get_cell_control_params+0x3f0>



        default:
            // Default to CELL_1 if an invalid cell is specified
            *expander_Address = GPIO_EXPANDER_ID_01;
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	2221      	movs	r2, #33	@ 0x21
 80040bc:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2202      	movs	r2, #2
 80040c2:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	2204      	movs	r2, #4
 80040c8:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	2208      	movs	r2, #8
 80040ce:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	2210      	movs	r2, #16
 80040d4:	801a      	strh	r2, [r3, #0]
            break;
 80040d6:	bf00      	nop
    }
}
 80040d8:	bf00      	nop
 80040da:	3714      	adds	r7, #20
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <Set_Output_Voltage>:

// Function to set the output voltage for a given cell by selecting the appropriate MUX channel.
// Example usage: Set_Output_Voltage(&hi2c2, CELL_1, 2.5f);
void Set_Output_Voltage( CellID cell, float voltage)
{
 80040e4:	b590      	push	{r4, r7, lr}
 80040e6:	b08b      	sub	sp, #44	@ 0x2c
 80040e8:	af02      	add	r7, sp, #8
 80040ea:	4603      	mov	r3, r0
 80040ec:	ed87 0a00 	vstr	s0, [r7]
 80040f0:	71fb      	strb	r3, [r7, #7]

    // Get the correct I2C handle based on cell ID
    I2C_HandleTypeDef *target_i2c;
    if (cell <= 11) {
 80040f2:	79fb      	ldrb	r3, [r7, #7]
 80040f4:	2b0b      	cmp	r3, #11
 80040f6:	d802      	bhi.n	80040fe <Set_Output_Voltage+0x1a>
        target_i2c = &hi2c2;
 80040f8:	4b2e      	ldr	r3, [pc, #184]	@ (80041b4 <Set_Output_Voltage+0xd0>)
 80040fa:	61fb      	str	r3, [r7, #28]
 80040fc:	e001      	b.n	8004102 <Set_Output_Voltage+0x1e>
    } else {
        target_i2c = &hi2c3;
 80040fe:	4b2e      	ldr	r3, [pc, #184]	@ (80041b8 <Set_Output_Voltage+0xd4>)
 8004100:	61fb      	str	r3, [r7, #28]
    }

    // Look up the MUX channel for the desired voltage.
    uint8_t mux_channel = 0xFF;
 8004102:	23ff      	movs	r3, #255	@ 0xff
 8004104:	76fb      	strb	r3, [r7, #27]
    for (int i = 0; i < 8; i++) {
 8004106:	2300      	movs	r3, #0
 8004108:	617b      	str	r3, [r7, #20]
 800410a:	e016      	b.n	800413a <Set_Output_Voltage+0x56>
        if (default_map[i].voltage == voltage) {
 800410c:	4a2b      	ldr	r2, [pc, #172]	@ (80041bc <Set_Output_Voltage+0xd8>)
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	4413      	add	r3, r2
 8004114:	edd3 7a00 	vldr	s15, [r3]
 8004118:	ed97 7a00 	vldr	s14, [r7]
 800411c:	eeb4 7a67 	vcmp.f32	s14, s15
 8004120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004124:	d106      	bne.n	8004134 <Set_Output_Voltage+0x50>
            mux_channel = default_map[i].mux_channel;
 8004126:	4a25      	ldr	r2, [pc, #148]	@ (80041bc <Set_Output_Voltage+0xd8>)
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	4413      	add	r3, r2
 800412e:	791b      	ldrb	r3, [r3, #4]
 8004130:	76fb      	strb	r3, [r7, #27]
            break;
 8004132:	e005      	b.n	8004140 <Set_Output_Voltage+0x5c>
    for (int i = 0; i < 8; i++) {
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	3301      	adds	r3, #1
 8004138:	617b      	str	r3, [r7, #20]
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	2b07      	cmp	r3, #7
 800413e:	dde5      	ble.n	800410c <Set_Output_Voltage+0x28>
        }
    }
    if (mux_channel == 0xFF) return; // Voltage not found
 8004140:	7efb      	ldrb	r3, [r7, #27]
 8004142:	2bff      	cmp	r3, #255	@ 0xff
 8004144:	d032      	beq.n	80041ac <Set_Output_Voltage+0xc8>

    // Convert mux_channel into its 3 select bits.This is use for the Analog mux switch
    uint8_t ANG_MUX_PIN_A = (mux_channel >> 0) & 0x01;
 8004146:	7efb      	ldrb	r3, [r7, #27]
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	74fb      	strb	r3, [r7, #19]
    uint8_t ANG_MUX_PIN_B = (mux_channel >> 1) & 0x01;
 800414e:	7efb      	ldrb	r3, [r7, #27]
 8004150:	085b      	lsrs	r3, r3, #1
 8004152:	b2db      	uxtb	r3, r3
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	74bb      	strb	r3, [r7, #18]
    uint8_t ANG_MUX_PIN_C = (mux_channel >> 2) & 0x01;
 800415a:	7efb      	ldrb	r3, [r7, #27]
 800415c:	089b      	lsrs	r3, r3, #2
 800415e:	b2db      	uxtb	r3, r3
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	747b      	strb	r3, [r7, #17]

    // Get the expander address and control pins for this cell.
    uint8_t expander_Address;
    uint16_t v_set_pin_01, v_set_pin_02, v_set_pin_03, LED_PIN ;
    get_cell_control_params(cell, &expander_Address, &v_set_pin_01, &v_set_pin_02, &v_set_pin_03 ,&LED_PIN);
 8004166:	f107 040c 	add.w	r4, r7, #12
 800416a:	f107 020e 	add.w	r2, r7, #14
 800416e:	f107 0110 	add.w	r1, r7, #16
 8004172:	79f8      	ldrb	r0, [r7, #7]
 8004174:	f107 0308 	add.w	r3, r7, #8
 8004178:	9301      	str	r3, [sp, #4]
 800417a:	f107 030a 	add.w	r3, r7, #10
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	4623      	mov	r3, r4
 8004182:	f7ff fdb1 	bl	8003ce8 <get_cell_control_params>

    // Set the multiplexer select lines accordingly.
    Expander_SetPinState(target_i2c, expander_Address, v_set_pin_01, ANG_MUX_PIN_A);
 8004186:	7c39      	ldrb	r1, [r7, #16]
 8004188:	89fa      	ldrh	r2, [r7, #14]
 800418a:	7cfb      	ldrb	r3, [r7, #19]
 800418c:	69f8      	ldr	r0, [r7, #28]
 800418e:	f7ff fcdd 	bl	8003b4c <Expander_SetPinState>
    Expander_SetPinState(target_i2c, expander_Address, v_set_pin_02, ANG_MUX_PIN_B);
 8004192:	7c39      	ldrb	r1, [r7, #16]
 8004194:	89ba      	ldrh	r2, [r7, #12]
 8004196:	7cbb      	ldrb	r3, [r7, #18]
 8004198:	69f8      	ldr	r0, [r7, #28]
 800419a:	f7ff fcd7 	bl	8003b4c <Expander_SetPinState>
    Expander_SetPinState(target_i2c, expander_Address, v_set_pin_03, ANG_MUX_PIN_C);
 800419e:	7c39      	ldrb	r1, [r7, #16]
 80041a0:	897a      	ldrh	r2, [r7, #10]
 80041a2:	7c7b      	ldrb	r3, [r7, #17]
 80041a4:	69f8      	ldr	r0, [r7, #28]
 80041a6:	f7ff fcd1 	bl	8003b4c <Expander_SetPinState>
 80041aa:	e000      	b.n	80041ae <Set_Output_Voltage+0xca>
    if (mux_channel == 0xFF) return; // Voltage not found
 80041ac:	bf00      	nop
}
 80041ae:	3724      	adds	r7, #36	@ 0x24
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd90      	pop	{r4, r7, pc}
 80041b4:	200018a4 	.word	0x200018a4
 80041b8:	200018f8 	.word	0x200018f8
 80041bc:	20000568 	.word	0x20000568

080041c0 <Set_LED_status>:

void Set_LED_status ( CellID cell, uint8_t LED_state)

{
 80041c0:	b590      	push	{r4, r7, lr}
 80041c2:	b089      	sub	sp, #36	@ 0x24
 80041c4:	af02      	add	r7, sp, #8
 80041c6:	4603      	mov	r3, r0
 80041c8:	460a      	mov	r2, r1
 80041ca:	71fb      	strb	r3, [r7, #7]
 80041cc:	4613      	mov	r3, r2
 80041ce:	71bb      	strb	r3, [r7, #6]

    // Get the correct I2C handle based on cell ID
    I2C_HandleTypeDef *target_i2c;
    if (cell <= 11) {
 80041d0:	79fb      	ldrb	r3, [r7, #7]
 80041d2:	2b0b      	cmp	r3, #11
 80041d4:	d802      	bhi.n	80041dc <Set_LED_status+0x1c>
        target_i2c = &hi2c2;
 80041d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004214 <Set_LED_status+0x54>)
 80041d8:	617b      	str	r3, [r7, #20]
 80041da:	e001      	b.n	80041e0 <Set_LED_status+0x20>
    } else {
        target_i2c = &hi2c3;
 80041dc:	4b0e      	ldr	r3, [pc, #56]	@ (8004218 <Set_LED_status+0x58>)
 80041de:	617b      	str	r3, [r7, #20]

    // Get the expander address and control pins for this cell.
    uint8_t expander_Address;
    uint16_t v_set_pin_01, v_set_pin_02, v_set_pin_03, LED_PIN;

    get_cell_control_params(cell, &expander_Address, &v_set_pin_01, &v_set_pin_02, &v_set_pin_03 ,&LED_PIN);
 80041e0:	f107 040e 	add.w	r4, r7, #14
 80041e4:	f107 0210 	add.w	r2, r7, #16
 80041e8:	f107 0113 	add.w	r1, r7, #19
 80041ec:	79f8      	ldrb	r0, [r7, #7]
 80041ee:	f107 030a 	add.w	r3, r7, #10
 80041f2:	9301      	str	r3, [sp, #4]
 80041f4:	f107 030c 	add.w	r3, r7, #12
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	4623      	mov	r3, r4
 80041fc:	f7ff fd74 	bl	8003ce8 <get_cell_control_params>

    // Set the multiplexer select lines accordingly.
    Expander_SetPinState(target_i2c, expander_Address, LED_PIN, LED_state);
 8004200:	7cf9      	ldrb	r1, [r7, #19]
 8004202:	897a      	ldrh	r2, [r7, #10]
 8004204:	79bb      	ldrb	r3, [r7, #6]
 8004206:	6978      	ldr	r0, [r7, #20]
 8004208:	f7ff fca0 	bl	8003b4c <Expander_SetPinState>

}
 800420c:	bf00      	nop
 800420e:	371c      	adds	r7, #28
 8004210:	46bd      	mov	sp, r7
 8004212:	bd90      	pop	{r4, r7, pc}
 8004214:	200018a4 	.word	0x200018a4
 8004218:	200018f8 	.word	0x200018f8

0800421c <INA229_writeReg>:
/*
 *  ======== INA229_writeReg ========
 * Write register
 */
void INA229_writeReg(INA229_Handle sensor, uint8_t regAddr, uint16_t value)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af02      	add	r7, sp, #8
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	460b      	mov	r3, r1
 8004226:	70fb      	strb	r3, [r7, #3]
 8004228:	4613      	mov	r3, r2
 800422a:	803b      	strh	r3, [r7, #0]
    uint8_t txBuf[3] = {0}; //All writable registers are 2 bytes
 800422c:	f107 030c 	add.w	r3, r7, #12
 8004230:	2100      	movs	r1, #0
 8004232:	460a      	mov	r2, r1
 8004234:	801a      	strh	r2, [r3, #0]
 8004236:	460a      	mov	r2, r1
 8004238:	709a      	strb	r2, [r3, #2]
    uint8_t rxBuf[3] = {0};
 800423a:	f107 0308 	add.w	r3, r7, #8
 800423e:	2100      	movs	r1, #0
 8004240:	460a      	mov	r2, r1
 8004242:	801a      	strh	r2, [r3, #0]
 8004244:	460a      	mov	r2, r1
 8004246:	709a      	strb	r2, [r3, #2]

    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8004248:	78fb      	ldrb	r3, [r7, #3]
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	b2db      	uxtb	r3, r3
 800424e:	733b      	strb	r3, [r7, #12]
    txBuf[1] = MSB(value);
 8004250:	883b      	ldrh	r3, [r7, #0]
 8004252:	0a1b      	lsrs	r3, r3, #8
 8004254:	b29b      	uxth	r3, r3
 8004256:	b2db      	uxtb	r3, r3
 8004258:	737b      	strb	r3, [r7, #13]
    txBuf[2] = LSB(value);
 800425a:	883b      	ldrh	r3, [r7, #0]
 800425c:	b2db      	uxtb	r3, r3
 800425e:	73bb      	strb	r3, [r7, #14]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	7f18      	ldrb	r0, [r3, #28]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	7f59      	ldrb	r1, [r3, #29]
 8004268:	f107 020c 	add.w	r2, r7, #12
 800426c:	f107 0308 	add.w	r3, r7, #8
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	4613      	mov	r3, r2
 8004274:	2203      	movs	r2, #3
 8004276:	f000 f91d 	bl	80044b4 <mcu_spiTransfer>

    //check for change in ADCRANGE 
    if(regAddr == INA229_config_register)
 800427a:	78fb      	ldrb	r3, [r7, #3]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d105      	bne.n	800428c <INA229_writeReg+0x70>
    {
        sensor->adcrange = value & INA229_config_register_adcrange_4096mV;
 8004280:	883b      	ldrh	r3, [r7, #0]
 8004282:	f003 0310 	and.w	r3, r3, #16
 8004286:	b29a      	uxth	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	82da      	strh	r2, [r3, #22]
    }
}
 800428c:	bf00      	nop
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <INA229_config>:
/*
 *  ======== INA229_config ========
 * Configure device with current settings.
 */
void INA229_config(INA229_Handle sensor)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
    //Initialize the bus containing this sensor
    mcu_spiInit(sensor->busId);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	7f1b      	ldrb	r3, [r3, #28]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f000 f8fb 	bl	800449c <mcu_spiInit>

    //Write sensor Configuration Registers
    INA229_writeReg(sensor, INA229_config_register, sensor->configRegister);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	881b      	ldrh	r3, [r3, #0]
 80042aa:	461a      	mov	r2, r3
 80042ac:	2100      	movs	r1, #0
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7ff ffb4 	bl	800421c <INA229_writeReg>
    INA229_writeReg(sensor, INA229_adc_config_register, sensor->adcConfigRegister);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	885b      	ldrh	r3, [r3, #2]
 80042b8:	461a      	mov	r2, r3
 80042ba:	2101      	movs	r1, #1
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f7ff ffad 	bl	800421c <INA229_writeReg>
    INA229_writeReg(sensor, INA229_shunt_cal_register, sensor->shuntCalRegister);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	889b      	ldrh	r3, [r3, #4]
 80042c6:	461a      	mov	r2, r3
 80042c8:	2102      	movs	r1, #2
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7ff ffa6 	bl	800421c <INA229_writeReg>
    INA229_writeReg(sensor, INA229_shunt_tempco_register, sensor->shuntTempcoRegister);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	88db      	ldrh	r3, [r3, #6]
 80042d4:	461a      	mov	r2, r3
 80042d6:	2103      	movs	r1, #3
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7ff ff9f 	bl	800421c <INA229_writeReg>
    INA229_writeReg(sensor, INA229_diag_alrt_register, sensor->diagAlrtRegister);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	891b      	ldrh	r3, [r3, #8]
 80042e2:	461a      	mov	r2, r3
 80042e4:	210b      	movs	r1, #11
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7ff ff98 	bl	800421c <INA229_writeReg>
    INA229_writeReg(sensor, INA229_sovl_register, sensor->sovlRegister);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	895b      	ldrh	r3, [r3, #10]
 80042f0:	461a      	mov	r2, r3
 80042f2:	210c      	movs	r1, #12
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f7ff ff91 	bl	800421c <INA229_writeReg>
    INA229_writeReg(sensor, INA229_suvl_register, sensor->suvlRegister);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	899b      	ldrh	r3, [r3, #12]
 80042fe:	461a      	mov	r2, r3
 8004300:	210d      	movs	r1, #13
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff ff8a 	bl	800421c <INA229_writeReg>
    INA229_writeReg(sensor, INA229_bovl_register, sensor->bovlRegister);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	89db      	ldrh	r3, [r3, #14]
 800430c:	461a      	mov	r2, r3
 800430e:	210e      	movs	r1, #14
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f7ff ff83 	bl	800421c <INA229_writeReg>
    INA229_writeReg(sensor, INA229_buvl_register, sensor->buvlRegister);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	8a1b      	ldrh	r3, [r3, #16]
 800431a:	461a      	mov	r2, r3
 800431c:	210f      	movs	r1, #15
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7ff ff7c 	bl	800421c <INA229_writeReg>
    INA229_writeReg(sensor, INA229_temp_limit_register, sensor->tempLimitRegister);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	8a5b      	ldrh	r3, [r3, #18]
 8004328:	461a      	mov	r2, r3
 800432a:	2110      	movs	r1, #16
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f7ff ff75 	bl	800421c <INA229_writeReg>
    INA229_writeReg(sensor, INA229_pwr_limit_register, sensor->pwrLimitRegister);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	8a9b      	ldrh	r3, [r3, #20]
 8004336:	461a      	mov	r2, r3
 8004338:	2111      	movs	r1, #17
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7ff ff6e 	bl	800421c <INA229_writeReg>

}
 8004340:	bf00      	nop
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <INA229_readReg>:
/*
 *  ======== INA229_readReg ========
 *  Read register
 */
uint64_t INA229_readReg(INA229_Handle sensor, uint8_t regAddr)
{
 8004348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800434c:	b08b      	sub	sp, #44	@ 0x2c
 800434e:	af02      	add	r7, sp, #8
 8004350:	6078      	str	r0, [r7, #4]
 8004352:	460b      	mov	r3, r1
 8004354:	70fb      	strb	r3, [r7, #3]
    uint64_t value;
    int i;
    
    uint8_t txBuf[1] = {0};
 8004356:	2300      	movs	r3, #0
 8004358:	743b      	strb	r3, [r7, #16]
    uint8_t rxBuf[6] = {0}; //max buffer size
 800435a:	f107 0308 	add.w	r3, r7, #8
 800435e:	2200      	movs	r2, #0
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	809a      	strh	r2, [r3, #4]

    txBuf[0] = (regAddr << 2 ) | 0x01; //Address + read bit (ending in 1)
 8004364:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	b25b      	sxtb	r3, r3
 800436c:	f043 0301 	orr.w	r3, r3, #1
 8004370:	b25b      	sxtb	r3, r3
 8004372:	b2db      	uxtb	r3, r3
 8004374:	743b      	strb	r3, [r7, #16]

    //Read register
    mcu_spiTransfer(sensor->busId, sensor->devCS, INA229_regSize[regAddr]+1, txBuf, rxBuf);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	7f18      	ldrb	r0, [r3, #28]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	7f59      	ldrb	r1, [r3, #29]
 800437e:	78fb      	ldrb	r3, [r7, #3]
 8004380:	4a1f      	ldr	r2, [pc, #124]	@ (8004400 <INA229_readReg+0xb8>)
 8004382:	5cd3      	ldrb	r3, [r2, r3]
 8004384:	3301      	adds	r3, #1
 8004386:	b2da      	uxtb	r2, r3
 8004388:	f107 0610 	add.w	r6, r7, #16
 800438c:	f107 0308 	add.w	r3, r7, #8
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	4633      	mov	r3, r6
 8004394:	f000 f88e 	bl	80044b4 <mcu_spiTransfer>

    //Combine bytes
    value = 0; // initialize to 0, toss rxBuf[0];
 8004398:	f04f 0200 	mov.w	r2, #0
 800439c:	f04f 0300 	mov.w	r3, #0
 80043a0:	e9c7 2306 	strd	r2, r3, [r7, #24]

    for(i = 1; i < INA229_regSize[regAddr]+1; i++)
 80043a4:	2301      	movs	r3, #1
 80043a6:	617b      	str	r3, [r7, #20]
 80043a8:	e01b      	b.n	80043e2 <INA229_readReg+0x9a>
    {
        value = (value << 8) | rxBuf[i];
 80043aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80043ae:	f04f 0200 	mov.w	r2, #0
 80043b2:	f04f 0300 	mov.w	r3, #0
 80043b6:	020b      	lsls	r3, r1, #8
 80043b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80043bc:	0202      	lsls	r2, r0, #8
 80043be:	f107 0008 	add.w	r0, r7, #8
 80043c2:	6979      	ldr	r1, [r7, #20]
 80043c4:	4401      	add	r1, r0
 80043c6:	7809      	ldrb	r1, [r1, #0]
 80043c8:	b2c9      	uxtb	r1, r1
 80043ca:	2000      	movs	r0, #0
 80043cc:	460c      	mov	r4, r1
 80043ce:	4605      	mov	r5, r0
 80043d0:	ea42 0804 	orr.w	r8, r2, r4
 80043d4:	ea43 0905 	orr.w	r9, r3, r5
 80043d8:	e9c7 8906 	strd	r8, r9, [r7, #24]
    for(i = 1; i < INA229_regSize[regAddr]+1; i++)
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	3301      	adds	r3, #1
 80043e0:	617b      	str	r3, [r7, #20]
 80043e2:	78fb      	ldrb	r3, [r7, #3]
 80043e4:	4a06      	ldr	r2, [pc, #24]	@ (8004400 <INA229_readReg+0xb8>)
 80043e6:	5cd3      	ldrb	r3, [r2, r3]
 80043e8:	461a      	mov	r2, r3
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	4293      	cmp	r3, r2
 80043ee:	dddc      	ble.n	80043aa <INA229_readReg+0x62>
    }

    return value;
 80043f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 80043f4:	4610      	mov	r0, r2
 80043f6:	4619      	mov	r1, r3
 80043f8:	3724      	adds	r7, #36	@ 0x24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004400:	0800d200 	.word	0x0800d200

08004404 <INA229_getDIETEMP_C>:
/*
 *  ======== INA229_getDIETEMP_C ========
 *  Get DIETMEP value (C)
 */
float INA229_getDIETEMP_C(INA229_Handle sensor)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
    uint64_t value = INA229_readReg(sensor, INA229_dietemp_register);
 800440c:	2106      	movs	r1, #6
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7ff ff9a 	bl	8004348 <INA229_readReg>
 8004414:	e9c7 0102 	strd	r0, r1, [r7, #8]
    float data;

    //Convert for 2's compliment and signed value
    if(value > 0x7FFF)
 8004418:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800441c:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8004420:	f173 0300 	sbcs.w	r3, r3, #0
 8004424:	d30c      	bcc.n	8004440 <INA229_getDIETEMP_C+0x3c>
    {
        data = (float)value - 0x10000; 
 8004426:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800442a:	f7fc fbed 	bl	8000c08 <__aeabi_ul2f>
 800442e:	ee07 0a10 	vmov	s14, r0
 8004432:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8004490 <INA229_getDIETEMP_C+0x8c>
 8004436:	ee77 7a67 	vsub.f32	s15, s14, s15
 800443a:	edc7 7a05 	vstr	s15, [r7, #20]
 800443e:	e005      	b.n	800444c <INA229_getDIETEMP_C+0x48>
    }
    else
    {
        data = (float)value;
 8004440:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004444:	f7fc fbe0 	bl	8000c08 <__aeabi_ul2f>
 8004448:	4603      	mov	r3, r0
 800444a:	617b      	str	r3, [r7, #20]
    }

    //Convert to C
    data = (data * 7.8125) / 1000;
 800444c:	6978      	ldr	r0, [r7, #20]
 800444e:	f7fc f831 	bl	80004b4 <__aeabi_f2d>
 8004452:	f04f 0200 	mov.w	r2, #0
 8004456:	4b0f      	ldr	r3, [pc, #60]	@ (8004494 <INA229_getDIETEMP_C+0x90>)
 8004458:	f7fc f884 	bl	8000564 <__aeabi_dmul>
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	4610      	mov	r0, r2
 8004462:	4619      	mov	r1, r3
 8004464:	f04f 0200 	mov.w	r2, #0
 8004468:	4b0b      	ldr	r3, [pc, #44]	@ (8004498 <INA229_getDIETEMP_C+0x94>)
 800446a:	f7fc f9a5 	bl	80007b8 <__aeabi_ddiv>
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	4610      	mov	r0, r2
 8004474:	4619      	mov	r1, r3
 8004476:	f7fc faaf 	bl	80009d8 <__aeabi_d2f>
 800447a:	4603      	mov	r3, r0
 800447c:	617b      	str	r3, [r7, #20]

    return data;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	ee07 3a90 	vmov	s15, r3
}
 8004484:	eeb0 0a67 	vmov.f32	s0, s15
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	47800000 	.word	0x47800000
 8004494:	401f4000 	.word	0x401f4000
 8004498:	408f4000 	.word	0x408f4000

0800449c <mcu_spiInit>:



/********* MCU SPECIFIC SPI CODE STARTS HERE **********/
void mcu_spiInit(uint8_t busId)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	4603      	mov	r3, r0
 80044a4:	71fb      	strb	r3, [r7, #7]
    /* Add MCU specific init necessary for I2C to be used */




}
 80044a6:	bf00      	nop
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
	...

080044b4 <mcu_spiTransfer>:

uint8_t mcu_spiTransfer(uint8_t busId, uint8_t csGPIOId, uint8_t count, uint8_t* txBuf, uint8_t* rxBuf)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af02      	add	r7, sp, #8
 80044ba:	603b      	str	r3, [r7, #0]
 80044bc:	4603      	mov	r3, r0
 80044be:	71fb      	strb	r3, [r7, #7]
 80044c0:	460b      	mov	r3, r1
 80044c2:	71bb      	strb	r3, [r7, #6]
 80044c4:	4613      	mov	r3, r2
 80044c6:	717b      	strb	r3, [r7, #5]
    /*
     *  Add MCU specific SPI read/write code here.
     */

    SPI_HandleTypeDef *hspi = NULL; // Declare local SPI handle variable
 80044c8:	2300      	movs	r3, #0
 80044ca:	60fb      	str	r3, [r7, #12]

    // Select the SPI handle based on the busId value
    if(busId == 0)
 80044cc:	79fb      	ldrb	r3, [r7, #7]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d102      	bne.n	80044d8 <mcu_spiTransfer+0x24>
    {
        hspi = &hspi1;  // Map busId 0 to SPI1
 80044d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004510 <mcu_spiTransfer+0x5c>)
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	e007      	b.n	80044e8 <mcu_spiTransfer+0x34>
    }
    else if(busId == 1)
 80044d8:	79fb      	ldrb	r3, [r7, #7]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d102      	bne.n	80044e4 <mcu_spiTransfer+0x30>
    {
        hspi = &hspi2;  // Map busId 1 to SPI2
 80044de:	4b0d      	ldr	r3, [pc, #52]	@ (8004514 <mcu_spiTransfer+0x60>)
 80044e0:	60fb      	str	r3, [r7, #12]
 80044e2:	e001      	b.n	80044e8 <mcu_spiTransfer+0x34>
    }
    else
    {
        // Invalid bus id, return error
        return 1;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e00f      	b.n	8004508 <mcu_spiTransfer+0x54>
    }
//    HAL_SPI_TransmitReceive(hspi, txBuf, rxBuf, count, HAL_MAX_DELAY);
    // Perform the SPI transfer using the selected SPI handle
    if (HAL_SPI_TransmitReceive(hspi, txBuf, rxBuf, count, HAL_MAX_DELAY) != HAL_OK)
 80044e8:	797b      	ldrb	r3, [r7, #5]
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	f04f 32ff 	mov.w	r2, #4294967295
 80044f0:	9200      	str	r2, [sp, #0]
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	6839      	ldr	r1, [r7, #0]
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f005 ff4d 	bl	800a396 <HAL_SPI_TransmitReceive>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <mcu_spiTransfer+0x52>
    {
        return 1; // SPI transaction failed
 8004502:	2301      	movs	r3, #1
 8004504:	e000      	b.n	8004508 <mcu_spiTransfer+0x54>
    }
    return 0; // Transaction successful
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	2000194c 	.word	0x2000194c
 8004514:	200019a4 	.word	0x200019a4

08004518 <LTC6811_init_reg_limits>:

/* Initialize the Register limits */
void LTC6811_init_reg_limits(uint8_t total_ic, //The number of ICs in the system
        cell_asic *ic  //A two dimensional array where data will be written
        )
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	4603      	mov	r3, r0
 8004520:	6039      	str	r1, [r7, #0]
 8004522:	71fb      	strb	r3, [r7, #7]
    uint8_t cic;
    for (cic = 0; cic < total_ic; cic++)
 8004524:	2300      	movs	r3, #0
 8004526:	73fb      	strb	r3, [r7, #15]
 8004528:	e044      	b.n	80045b4 <LTC6811_init_reg_limits+0x9c>
    {
        ic[cic].ic_reg.cell_channels = 12;
 800452a:	7bfa      	ldrb	r2, [r7, #15]
 800452c:	4613      	mov	r3, r2
 800452e:	019b      	lsls	r3, r3, #6
 8004530:	4413      	add	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	461a      	mov	r2, r3
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	4413      	add	r3, r2
 800453a:	220c      	movs	r2, #12
 800453c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
        ic[cic].ic_reg.stat_channels = 4;
 8004540:	7bfa      	ldrb	r2, [r7, #15]
 8004542:	4613      	mov	r3, r2
 8004544:	019b      	lsls	r3, r3, #6
 8004546:	4413      	add	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	461a      	mov	r2, r3
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	4413      	add	r3, r2
 8004550:	2204      	movs	r2, #4
 8004552:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
        ic[cic].ic_reg.aux_channels = 6;
 8004556:	7bfa      	ldrb	r2, [r7, #15]
 8004558:	4613      	mov	r3, r2
 800455a:	019b      	lsls	r3, r3, #6
 800455c:	4413      	add	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	461a      	mov	r2, r3
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	4413      	add	r3, r2
 8004566:	2206      	movs	r2, #6
 8004568:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
        ic[cic].ic_reg.num_cv_reg = 4;
 800456c:	7bfa      	ldrb	r2, [r7, #15]
 800456e:	4613      	mov	r3, r2
 8004570:	019b      	lsls	r3, r3, #6
 8004572:	4413      	add	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	461a      	mov	r2, r3
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	4413      	add	r3, r2
 800457c:	2204      	movs	r2, #4
 800457e:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
        ic[cic].ic_reg.num_gpio_reg = 2;
 8004582:	7bfa      	ldrb	r2, [r7, #15]
 8004584:	4613      	mov	r3, r2
 8004586:	019b      	lsls	r3, r3, #6
 8004588:	4413      	add	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	461a      	mov	r2, r3
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	4413      	add	r3, r2
 8004592:	2202      	movs	r2, #2
 8004594:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
        ic[cic].ic_reg.num_stat_reg = 3;
 8004598:	7bfa      	ldrb	r2, [r7, #15]
 800459a:	4613      	mov	r3, r2
 800459c:	019b      	lsls	r3, r3, #6
 800459e:	4413      	add	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	461a      	mov	r2, r3
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	4413      	add	r3, r2
 80045a8:	2203      	movs	r2, #3
 80045aa:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
    for (cic = 0; cic < total_ic; cic++)
 80045ae:	7bfb      	ldrb	r3, [r7, #15]
 80045b0:	3301      	adds	r3, #1
 80045b2:	73fb      	strb	r3, [r7, #15]
 80045b4:	7bfa      	ldrb	r2, [r7, #15]
 80045b6:	79fb      	ldrb	r3, [r7, #7]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d3b6      	bcc.n	800452a <LTC6811_init_reg_limits+0x12>
    }
}
 80045bc:	bf00      	nop
 80045be:	bf00      	nop
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <LTC6811_wrcfg>:
 order so the last device's configuration is written first.
 */
void LTC6811_wrcfg(uint8_t total_ic, //The number of ICs being written to
        cell_asic *ic //A two dimensional array of the configuration data that will be written
        )
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b082      	sub	sp, #8
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	4603      	mov	r3, r0
 80045d2:	6039      	str	r1, [r7, #0]
 80045d4:	71fb      	strb	r3, [r7, #7]
    LTC681x_wrcfg(total_ic, ic);
 80045d6:	79fb      	ldrb	r3, [r7, #7]
 80045d8:	6839      	ldr	r1, [r7, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 f900 	bl	80047e0 <LTC681x_wrcfg>
}
 80045e0:	bf00      	nop
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <LTC6811_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC6811_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that will store the data
        )
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	4603      	mov	r3, r0
 80045f0:	6039      	str	r1, [r7, #0]
 80045f2:	71fb      	strb	r3, [r7, #7]
    LTC681x_reset_crc_count(total_ic, ic);
 80045f4:	79fb      	ldrb	r3, [r7, #7]
 80045f6:	6839      	ldr	r1, [r7, #0]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f000 f96f 	bl	80048dc <LTC681x_reset_crc_count>
}
 80045fe:	bf00      	nop
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <LTC6811_init_cfg>:

/* Helper function to initialize CFG variables.*/
void LTC6811_init_cfg(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that will store the data
        )
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b082      	sub	sp, #8
 800460a:	af00      	add	r7, sp, #0
 800460c:	4603      	mov	r3, r0
 800460e:	6039      	str	r1, [r7, #0]
 8004610:	71fb      	strb	r3, [r7, #7]
    LTC681x_init_cfg(total_ic, ic);
 8004612:	79fb      	ldrb	r3, [r7, #7]
 8004614:	6839      	ldr	r1, [r7, #0]
 8004616:	4618      	mov	r0, r3
 8004618:	f000 f9d2 	bl	80049c0 <LTC681x_init_cfg>
}
 800461c:	bf00      	nop
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <LTC6811_set_cfgr>:
        bool dcc[12], // The DCC bit
        bool dcto[4], // The Dcto bit
        uint16_t uv, // The UV bit
        uint16_t ov // The OV bit
        )
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b088      	sub	sp, #32
 8004628:	af06      	add	r7, sp, #24
 800462a:	6039      	str	r1, [r7, #0]
 800462c:	4611      	mov	r1, r2
 800462e:	461a      	mov	r2, r3
 8004630:	4603      	mov	r3, r0
 8004632:	71fb      	strb	r3, [r7, #7]
 8004634:	460b      	mov	r3, r1
 8004636:	71bb      	strb	r3, [r7, #6]
 8004638:	4613      	mov	r3, r2
 800463a:	717b      	strb	r3, [r7, #5]
    LTC681x_set_cfgr(nIC, ic, refon, adcopt, gpio, dcc, dcto, uv, ov);
 800463c:	7979      	ldrb	r1, [r7, #5]
 800463e:	79ba      	ldrb	r2, [r7, #6]
 8004640:	79f8      	ldrb	r0, [r7, #7]
 8004642:	8c3b      	ldrh	r3, [r7, #32]
 8004644:	9304      	str	r3, [sp, #16]
 8004646:	8bbb      	ldrh	r3, [r7, #28]
 8004648:	9303      	str	r3, [sp, #12]
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	9302      	str	r3, [sp, #8]
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	9301      	str	r3, [sp, #4]
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	460b      	mov	r3, r1
 8004658:	6839      	ldr	r1, [r7, #0]
 800465a:	f000 f9e7 	bl	8004a2c <LTC681x_set_cfgr>
}
 800465e:	bf00      	nop
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <write_68>:
 */
void write_68(uint8_t total_ic, //Number of ICs to be written to
        uint8_t tx_cmd[2], //The command to be transmitted
        uint8_t data[] // Payload Data
        )
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b088      	sub	sp, #32
 800466a:	af00      	add	r7, sp, #0
 800466c:	4603      	mov	r3, r0
 800466e:	60b9      	str	r1, [r7, #8]
 8004670:	607a      	str	r2, [r7, #4]
 8004672:	73fb      	strb	r3, [r7, #15]
    const uint8_t BYTES_IN_REG = 6;
 8004674:	2306      	movs	r3, #6
 8004676:	773b      	strb	r3, [r7, #28]
    const uint8_t CMD_LEN = 4 + (8 * total_ic);
 8004678:	7bfb      	ldrb	r3, [r7, #15]
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	b2db      	uxtb	r3, r3
 800467e:	3304      	adds	r3, #4
 8004680:	76fb      	strb	r3, [r7, #27]
    uint16_t data_pec;
    uint16_t cmd_pec;
    uint8_t cmd_index;
    uint8_t *cmd;

    cmd = (uint8_t *) malloc(CMD_LEN * sizeof(uint8_t));
 8004682:	7efb      	ldrb	r3, [r7, #27]
 8004684:	4618      	mov	r0, r3
 8004686:	f007 fdd5 	bl	800c234 <malloc>
 800468a:	4603      	mov	r3, r0
 800468c:	617b      	str	r3, [r7, #20]
    cmd[0] = tx_cmd[0];
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	781a      	ldrb	r2, [r3, #0]
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	701a      	strb	r2, [r3, #0]
    cmd[1] = tx_cmd[1];
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	3301      	adds	r3, #1
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	7852      	ldrb	r2, [r2, #1]
 800469e:	701a      	strb	r2, [r3, #0]
    cmd_pec = pec15_calc(2, cmd);
 80046a0:	6979      	ldr	r1, [r7, #20]
 80046a2:	2002      	movs	r0, #2
 80046a4:	f000 f86a 	bl	800477c <pec15_calc>
 80046a8:	4603      	mov	r3, r0
 80046aa:	827b      	strh	r3, [r7, #18]
    cmd[2] = (uint8_t) (cmd_pec >> 8);
 80046ac:	8a7b      	ldrh	r3, [r7, #18]
 80046ae:	0a1b      	lsrs	r3, r3, #8
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	3302      	adds	r3, #2
 80046b6:	b2d2      	uxtb	r2, r2
 80046b8:	701a      	strb	r2, [r3, #0]
    cmd[3] = (uint8_t) (cmd_pec);
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	3303      	adds	r3, #3
 80046be:	8a7a      	ldrh	r2, [r7, #18]
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	701a      	strb	r2, [r3, #0]

    cmd_index = 4;
 80046c4:	2304      	movs	r3, #4
 80046c6:	77fb      	strb	r3, [r7, #31]
    uint8_t current_ic;
    uint8_t current_byte;
    for (current_ic = total_ic; current_ic > 0; current_ic--) // Executes for each LTC681x, this loops starts with the last IC on the stack.
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
 80046ca:	77bb      	strb	r3, [r7, #30]
 80046cc:	e042      	b.n	8004754 <write_68+0xee>
    { //The first configuration written is received by the last IC in the daisy chain
        for (current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80046ce:	2300      	movs	r3, #0
 80046d0:	777b      	strb	r3, [r7, #29]
 80046d2:	e016      	b.n	8004702 <write_68+0x9c>
        {
            cmd[cmd_index] = data[((current_ic - 1) * 6) + current_byte];
 80046d4:	7fbb      	ldrb	r3, [r7, #30]
 80046d6:	1e5a      	subs	r2, r3, #1
 80046d8:	4613      	mov	r3, r2
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	4413      	add	r3, r2
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	461a      	mov	r2, r3
 80046e2:	7f7b      	ldrb	r3, [r7, #29]
 80046e4:	4413      	add	r3, r2
 80046e6:	461a      	mov	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	441a      	add	r2, r3
 80046ec:	7ffb      	ldrb	r3, [r7, #31]
 80046ee:	6979      	ldr	r1, [r7, #20]
 80046f0:	440b      	add	r3, r1
 80046f2:	7812      	ldrb	r2, [r2, #0]
 80046f4:	701a      	strb	r2, [r3, #0]
            cmd_index = cmd_index + 1;
 80046f6:	7ffb      	ldrb	r3, [r7, #31]
 80046f8:	3301      	adds	r3, #1
 80046fa:	77fb      	strb	r3, [r7, #31]
        for (current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80046fc:	7f7b      	ldrb	r3, [r7, #29]
 80046fe:	3301      	adds	r3, #1
 8004700:	777b      	strb	r3, [r7, #29]
 8004702:	7f7a      	ldrb	r2, [r7, #29]
 8004704:	7f3b      	ldrb	r3, [r7, #28]
 8004706:	429a      	cmp	r2, r3
 8004708:	d3e4      	bcc.n	80046d4 <write_68+0x6e>
        }

        data_pec = (uint16_t) pec15_calc(BYTES_IN_REG,
                                         &data[(current_ic - 1) * 6]); // Calculating the PEC for each ICs configuration register data
 800470a:	7fbb      	ldrb	r3, [r7, #30]
 800470c:	1e5a      	subs	r2, r3, #1
 800470e:	4613      	mov	r3, r2
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	4413      	add	r3, r2
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	461a      	mov	r2, r3
        data_pec = (uint16_t) pec15_calc(BYTES_IN_REG,
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	441a      	add	r2, r3
 800471c:	7f3b      	ldrb	r3, [r7, #28]
 800471e:	4611      	mov	r1, r2
 8004720:	4618      	mov	r0, r3
 8004722:	f000 f82b 	bl	800477c <pec15_calc>
 8004726:	4603      	mov	r3, r0
 8004728:	823b      	strh	r3, [r7, #16]
        cmd[cmd_index] = (uint8_t) (data_pec >> 8);
 800472a:	8a3b      	ldrh	r3, [r7, #16]
 800472c:	0a1b      	lsrs	r3, r3, #8
 800472e:	b299      	uxth	r1, r3
 8004730:	7ffb      	ldrb	r3, [r7, #31]
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	4413      	add	r3, r2
 8004736:	b2ca      	uxtb	r2, r1
 8004738:	701a      	strb	r2, [r3, #0]
        cmd[cmd_index + 1] = (uint8_t) data_pec;
 800473a:	7ffb      	ldrb	r3, [r7, #31]
 800473c:	3301      	adds	r3, #1
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	4413      	add	r3, r2
 8004742:	8a3a      	ldrh	r2, [r7, #16]
 8004744:	b2d2      	uxtb	r2, r2
 8004746:	701a      	strb	r2, [r3, #0]
        cmd_index = cmd_index + 2;
 8004748:	7ffb      	ldrb	r3, [r7, #31]
 800474a:	3302      	adds	r3, #2
 800474c:	77fb      	strb	r3, [r7, #31]
    for (current_ic = total_ic; current_ic > 0; current_ic--) // Executes for each LTC681x, this loops starts with the last IC on the stack.
 800474e:	7fbb      	ldrb	r3, [r7, #30]
 8004750:	3b01      	subs	r3, #1
 8004752:	77bb      	strb	r3, [r7, #30]
 8004754:	7fbb      	ldrb	r3, [r7, #30]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1b9      	bne.n	80046ce <write_68+0x68>
    }

    cs_low();
 800475a:	f000 fc05 	bl	8004f68 <cs_low>
    spi_write_array(CMD_LEN, cmd);
 800475e:	7efb      	ldrb	r3, [r7, #27]
 8004760:	6979      	ldr	r1, [r7, #20]
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fc28 	bl	8004fb8 <spi_write_array>
    cs_high();
 8004768:	f000 fc12 	bl	8004f90 <cs_high>

    free(cmd);
 800476c:	6978      	ldr	r0, [r7, #20]
 800476e:	f007 fd69 	bl	800c244 <free>
}
 8004772:	bf00      	nop
 8004774:	3720      	adds	r7, #32
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
	...

0800477c <pec15_calc>:
 */
/* Calculates  and returns the CRC15 */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
        uint8_t *data //Array of data that will be used to calculate  a PEC
        )
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	4603      	mov	r3, r0
 8004784:	6039      	str	r1, [r7, #0]
 8004786:	71fb      	strb	r3, [r7, #7]
    uint16_t remainder, addr;
    remainder = 16; //initialize the PEC
 8004788:	2310      	movs	r3, #16
 800478a:	81fb      	strh	r3, [r7, #14]
    uint8_t i;

    for (i = 0; i < len; i++) // loops for each byte in data array
 800478c:	2300      	movs	r3, #0
 800478e:	737b      	strb	r3, [r7, #13]
 8004790:	e017      	b.n	80047c2 <pec15_calc+0x46>
    {
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 8004792:	89fb      	ldrh	r3, [r7, #14]
 8004794:	09db      	lsrs	r3, r3, #7
 8004796:	b29b      	uxth	r3, r3
 8004798:	7b7a      	ldrb	r2, [r7, #13]
 800479a:	6839      	ldr	r1, [r7, #0]
 800479c:	440a      	add	r2, r1
 800479e:	7812      	ldrb	r2, [r2, #0]
 80047a0:	4053      	eors	r3, r2
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	817b      	strh	r3, [r7, #10]
        remainder = (remainder << 8) ^ crc15Table[addr];
 80047a8:	89fb      	ldrh	r3, [r7, #14]
 80047aa:	021b      	lsls	r3, r3, #8
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	897b      	ldrh	r3, [r7, #10]
 80047b0:	490a      	ldr	r1, [pc, #40]	@ (80047dc <pec15_calc+0x60>)
 80047b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	4053      	eors	r3, r2
 80047ba:	81fb      	strh	r3, [r7, #14]
    for (i = 0; i < len; i++) // loops for each byte in data array
 80047bc:	7b7b      	ldrb	r3, [r7, #13]
 80047be:	3301      	adds	r3, #1
 80047c0:	737b      	strb	r3, [r7, #13]
 80047c2:	7b7a      	ldrb	r2, [r7, #13]
 80047c4:	79fb      	ldrb	r3, [r7, #7]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d3e3      	bcc.n	8004792 <pec15_calc+0x16>
    }
    return (remainder * 2); //The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 80047ca:	89fb      	ldrh	r3, [r7, #14]
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	b29b      	uxth	r3, r3
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	0800d2a8 	.word	0x0800d2a8

080047e0 <LTC681x_wrcfg>:

/* Write the LTC681x CFGRA */
void LTC681x_wrcfg(uint8_t total_ic, //The number of ICs being written to
        cell_asic ic[] // A two dimensional array of the configuration data that will be written
        )
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b0c4      	sub	sp, #272	@ 0x110
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	4602      	mov	r2, r0
 80047e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80047ec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80047f0:	6019      	str	r1, [r3, #0]
 80047f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80047f6:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80047fa:	701a      	strb	r2, [r3, #0]
    uint8_t cmd[2] = { 0x00, 0x01 };
 80047fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004800:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
    uint8_t write_buffer[256];
    uint8_t write_count = 0;
 8004804:	2300      	movs	r3, #0
 8004806:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
    uint8_t c_ic = 0;
 800480a:	2300      	movs	r3, #0
 800480c:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
    uint8_t current_ic;
    uint8_t data;

    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004810:	2300      	movs	r3, #0
 8004812:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 8004816:	e047      	b.n	80048a8 <LTC681x_wrcfg+0xc8>
    {
        if (ic->isospi_reverse == false)
 8004818:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800481c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 8004826:	2b00      	cmp	r3, #0
 8004828:	d104      	bne.n	8004834 <LTC681x_wrcfg+0x54>
        {
            c_ic = current_ic;
 800482a:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 800482e:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 8004832:	e00b      	b.n	800484c <LTC681x_wrcfg+0x6c>
        }
        else
        {
            c_ic = total_ic - current_ic - 1;
 8004834:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004838:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800483c:	781a      	ldrb	r2, [r3, #0]
 800483e:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	b2db      	uxtb	r3, r3
 8004846:	3b01      	subs	r3, #1
 8004848:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
        }

        for (data = 0; data < 6; data++)
 800484c:	2300      	movs	r3, #0
 800484e:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 8004852:	e020      	b.n	8004896 <LTC681x_wrcfg+0xb6>
        {
            write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 8004854:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 8004858:	4613      	mov	r3, r2
 800485a:	019b      	lsls	r3, r3, #6
 800485c:	4413      	add	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	461a      	mov	r2, r3
 8004862:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004866:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	1899      	adds	r1, r3, r2
 800486e:	f897 210c 	ldrb.w	r2, [r7, #268]	@ 0x10c
 8004872:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004876:	5c89      	ldrb	r1, [r1, r2]
 8004878:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800487c:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8004880:	54d1      	strb	r1, [r2, r3]
            write_count++;
 8004882:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004886:	3301      	adds	r3, #1
 8004888:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        for (data = 0; data < 6; data++)
 800488c:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8004890:	3301      	adds	r3, #1
 8004892:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 8004896:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 800489a:	2b05      	cmp	r3, #5
 800489c:	d9da      	bls.n	8004854 <LTC681x_wrcfg+0x74>
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 800489e:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80048a2:	3301      	adds	r3, #1
 80048a4:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 80048a8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80048ac:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80048b0:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d3ae      	bcc.n	8004818 <LTC681x_wrcfg+0x38>
        }
    }
    write_68(total_ic, cmd, write_buffer);
 80048ba:	f107 0208 	add.w	r2, r7, #8
 80048be:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 80048c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80048c6:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7ff feca 	bl	8004666 <write_68>
}
 80048d2:	bf00      	nop
 80048d4:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <LTC681x_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC681x_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that stores the data
        )
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	4603      	mov	r3, r0
 80048e4:	6039      	str	r1, [r7, #0]
 80048e6:	71fb      	strb	r3, [r7, #7]
    int i, current_ic;
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 80048e8:	2300      	movs	r3, #0
 80048ea:	60bb      	str	r3, [r7, #8]
 80048ec:	e05d      	b.n	80049aa <LTC681x_reset_crc_count+0xce>
    {
        ic[current_ic].crc_count.pec_count = 0;
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	4613      	mov	r3, r2
 80048f2:	019b      	lsls	r3, r3, #6
 80048f4:	4413      	add	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	461a      	mov	r2, r3
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	4413      	add	r3, r2
 80048fe:	2200      	movs	r2, #0
 8004900:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
        ic[current_ic].crc_count.cfgr_pec = 0;
 8004904:	68ba      	ldr	r2, [r7, #8]
 8004906:	4613      	mov	r3, r2
 8004908:	019b      	lsls	r3, r3, #6
 800490a:	4413      	add	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	461a      	mov	r2, r3
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	4413      	add	r3, r2
 8004914:	2200      	movs	r2, #0
 8004916:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
        for (i = 0; i < 6; i++)
 800491a:	2300      	movs	r3, #0
 800491c:	60fb      	str	r3, [r7, #12]
 800491e:	e010      	b.n	8004942 <LTC681x_reset_crc_count+0x66>
        {
            ic[current_ic].crc_count.cell_pec[i] = 0;
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	4613      	mov	r3, r2
 8004924:	019b      	lsls	r3, r3, #6
 8004926:	4413      	add	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	461a      	mov	r2, r3
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	441a      	add	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	3360      	adds	r3, #96	@ 0x60
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	4413      	add	r3, r2
 8004938:	2200      	movs	r2, #0
 800493a:	815a      	strh	r2, [r3, #10]
        for (i = 0; i < 6; i++)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	3301      	adds	r3, #1
 8004940:	60fb      	str	r3, [r7, #12]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2b05      	cmp	r3, #5
 8004946:	ddeb      	ble.n	8004920 <LTC681x_reset_crc_count+0x44>
        }
        for (i = 0; i < 4; i++)
 8004948:	2300      	movs	r3, #0
 800494a:	60fb      	str	r3, [r7, #12]
 800494c:	e010      	b.n	8004970 <LTC681x_reset_crc_count+0x94>
        {
            ic[current_ic].crc_count.aux_pec[i] = 0;
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	4613      	mov	r3, r2
 8004952:	019b      	lsls	r3, r3, #6
 8004954:	4413      	add	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	461a      	mov	r2, r3
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	441a      	add	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	3368      	adds	r3, #104	@ 0x68
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	4413      	add	r3, r2
 8004966:	2200      	movs	r2, #0
 8004968:	80da      	strh	r2, [r3, #6]
        for (i = 0; i < 4; i++)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	3301      	adds	r3, #1
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b03      	cmp	r3, #3
 8004974:	ddeb      	ble.n	800494e <LTC681x_reset_crc_count+0x72>
        }
        for (i = 0; i < 2; i++)
 8004976:	2300      	movs	r3, #0
 8004978:	60fb      	str	r3, [r7, #12]
 800497a:	e010      	b.n	800499e <LTC681x_reset_crc_count+0xc2>
        {
            ic[current_ic].crc_count.stat_pec[i] = 0;
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	4613      	mov	r3, r2
 8004980:	019b      	lsls	r3, r3, #6
 8004982:	4413      	add	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	461a      	mov	r2, r3
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	441a      	add	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	336c      	adds	r3, #108	@ 0x6c
 8004990:	005b      	lsls	r3, r3, #1
 8004992:	4413      	add	r3, r2
 8004994:	2200      	movs	r2, #0
 8004996:	80da      	strh	r2, [r3, #6]
        for (i = 0; i < 2; i++)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	3301      	adds	r3, #1
 800499c:	60fb      	str	r3, [r7, #12]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	ddeb      	ble.n	800497c <LTC681x_reset_crc_count+0xa0>
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	3301      	adds	r3, #1
 80049a8:	60bb      	str	r3, [r7, #8]
 80049aa:	79fb      	ldrb	r3, [r7, #7]
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	db9d      	blt.n	80048ee <LTC681x_reset_crc_count+0x12>
        }
    }
}
 80049b2:	bf00      	nop
 80049b4:	bf00      	nop
 80049b6:	3714      	adds	r7, #20
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <LTC681x_init_cfg>:

/* Helper function to initialize CFG variables */
void LTC681x_init_cfg(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that stores the data
        )
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	4603      	mov	r3, r0
 80049c8:	6039      	str	r1, [r7, #0]
 80049ca:	71fb      	strb	r3, [r7, #7]
    uint8_t current_ic, j;
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 80049cc:	2300      	movs	r3, #0
 80049ce:	73fb      	strb	r3, [r7, #15]
 80049d0:	e021      	b.n	8004a16 <LTC681x_init_cfg+0x56>
    {
        for (j = 0; j < 6; j++)
 80049d2:	2300      	movs	r3, #0
 80049d4:	73bb      	strb	r3, [r7, #14]
 80049d6:	e00d      	b.n	80049f4 <LTC681x_init_cfg+0x34>
        {
            ic[current_ic].config.tx_data[j] = 0;
 80049d8:	7bfa      	ldrb	r2, [r7, #15]
 80049da:	4613      	mov	r3, r2
 80049dc:	019b      	lsls	r3, r3, #6
 80049de:	4413      	add	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	461a      	mov	r2, r3
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	441a      	add	r2, r3
 80049e8:	7bbb      	ldrb	r3, [r7, #14]
 80049ea:	2100      	movs	r1, #0
 80049ec:	54d1      	strb	r1, [r2, r3]
        for (j = 0; j < 6; j++)
 80049ee:	7bbb      	ldrb	r3, [r7, #14]
 80049f0:	3301      	adds	r3, #1
 80049f2:	73bb      	strb	r3, [r7, #14]
 80049f4:	7bbb      	ldrb	r3, [r7, #14]
 80049f6:	2b05      	cmp	r3, #5
 80049f8:	d9ee      	bls.n	80049d8 <LTC681x_init_cfg+0x18>
        }
        ic[current_ic].isospi_reverse = 0;
 80049fa:	7bfa      	ldrb	r2, [r7, #15]
 80049fc:	4613      	mov	r3, r2
 80049fe:	019b      	lsls	r3, r3, #6
 8004a00:	4413      	add	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	461a      	mov	r2, r3
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	4413      	add	r3, r2
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
 8004a12:	3301      	adds	r3, #1
 8004a14:	73fb      	strb	r3, [r7, #15]
 8004a16:	7bfa      	ldrb	r2, [r7, #15]
 8004a18:	79fb      	ldrb	r3, [r7, #7]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d3d9      	bcc.n	80049d2 <LTC681x_init_cfg+0x12>
    }
}
 8004a1e:	bf00      	nop
 8004a20:	bf00      	nop
 8004a22:	3714      	adds	r7, #20
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <LTC681x_set_cfgr>:
        bool dcc[12], // The DCC bits
        bool dcto[4], // The Dcto bits
        uint16_t uv, // The UV value
        uint16_t ov // The OV value
        )
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6039      	str	r1, [r7, #0]
 8004a34:	4611      	mov	r1, r2
 8004a36:	461a      	mov	r2, r3
 8004a38:	4603      	mov	r3, r0
 8004a3a:	71fb      	strb	r3, [r7, #7]
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	71bb      	strb	r3, [r7, #6]
 8004a40:	4613      	mov	r3, r2
 8004a42:	717b      	strb	r3, [r7, #5]
    LTC681x_set_cfgr_refon(nIC, ic, refon);
 8004a44:	79ba      	ldrb	r2, [r7, #6]
 8004a46:	79fb      	ldrb	r3, [r7, #7]
 8004a48:	6839      	ldr	r1, [r7, #0]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 f828 	bl	8004aa0 <LTC681x_set_cfgr_refon>
    LTC681x_set_cfgr_adcopt(nIC, ic, adcopt);
 8004a50:	797a      	ldrb	r2, [r7, #5]
 8004a52:	79fb      	ldrb	r3, [r7, #7]
 8004a54:	6839      	ldr	r1, [r7, #0]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 f85e 	bl	8004b18 <LTC681x_set_cfgr_adcopt>
    LTC681x_set_cfgr_gpio(nIC, ic, gpio);
 8004a5c:	79fb      	ldrb	r3, [r7, #7]
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	6839      	ldr	r1, [r7, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 f894 	bl	8004b90 <LTC681x_set_cfgr_gpio>
    LTC681x_set_cfgr_dis(nIC, ic, dcc);
 8004a68:	79fb      	ldrb	r3, [r7, #7]
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	6839      	ldr	r1, [r7, #0]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 f8e6 	bl	8004c40 <LTC681x_set_cfgr_dis>
    LTC681x_set_cfgr_dcto(nIC, ic, dcto);
 8004a74:	79fb      	ldrb	r3, [r7, #7]
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	6839      	ldr	r1, [r7, #0]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 f97f 	bl	8004d7e <LTC681x_set_cfgr_dcto>
    LTC681x_set_cfgr_uv(nIC, ic, uv);
 8004a80:	8bba      	ldrh	r2, [r7, #28]
 8004a82:	79fb      	ldrb	r3, [r7, #7]
 8004a84:	6839      	ldr	r1, [r7, #0]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 f9d1 	bl	8004e2e <LTC681x_set_cfgr_uv>
    LTC681x_set_cfgr_ov(nIC, ic, ov);
 8004a8c:	8c3a      	ldrh	r2, [r7, #32]
 8004a8e:	79fb      	ldrb	r3, [r7, #7]
 8004a90:	6839      	ldr	r1, [r7, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 fa1b 	bl	8004ece <LTC681x_set_cfgr_ov>
}
 8004a98:	bf00      	nop
 8004a9a:	3708      	adds	r7, #8
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <LTC681x_set_cfgr_refon>:

/* Helper function to set the REFON bit */
void LTC681x_set_cfgr_refon(uint8_t nIC, cell_asic *ic, bool refon)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	6039      	str	r1, [r7, #0]
 8004aaa:	71fb      	strb	r3, [r7, #7]
 8004aac:	4613      	mov	r3, r2
 8004aae:	71bb      	strb	r3, [r7, #6]
    if (refon)
 8004ab0:	79bb      	ldrb	r3, [r7, #6]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d015      	beq.n	8004ae2 <LTC681x_set_cfgr_refon+0x42>
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] | 0x04;
 8004ab6:	79fa      	ldrb	r2, [r7, #7]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	019b      	lsls	r3, r3, #6
 8004abc:	4413      	add	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	7819      	ldrb	r1, [r3, #0]
 8004ac8:	79fa      	ldrb	r2, [r7, #7]
 8004aca:	4613      	mov	r3, r2
 8004acc:	019b      	lsls	r3, r3, #6
 8004ace:	4413      	add	r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f041 0204 	orr.w	r2, r1, #4
 8004adc:	b2d2      	uxtb	r2, r2
 8004ade:	701a      	strb	r2, [r3, #0]
    else
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] & 0xFB;
}
 8004ae0:	e014      	b.n	8004b0c <LTC681x_set_cfgr_refon+0x6c>
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] & 0xFB;
 8004ae2:	79fa      	ldrb	r2, [r7, #7]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	019b      	lsls	r3, r3, #6
 8004ae8:	4413      	add	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	461a      	mov	r2, r3
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	4413      	add	r3, r2
 8004af2:	7819      	ldrb	r1, [r3, #0]
 8004af4:	79fa      	ldrb	r2, [r7, #7]
 8004af6:	4613      	mov	r3, r2
 8004af8:	019b      	lsls	r3, r3, #6
 8004afa:	4413      	add	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	461a      	mov	r2, r3
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	4413      	add	r3, r2
 8004b04:	f021 0204 	bic.w	r2, r1, #4
 8004b08:	b2d2      	uxtb	r2, r2
 8004b0a:	701a      	strb	r2, [r3, #0]
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <LTC681x_set_cfgr_adcopt>:

/* Helper function to set the ADCOPT bit */
void LTC681x_set_cfgr_adcopt(uint8_t nIC, cell_asic *ic, bool adcopt)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	4603      	mov	r3, r0
 8004b20:	6039      	str	r1, [r7, #0]
 8004b22:	71fb      	strb	r3, [r7, #7]
 8004b24:	4613      	mov	r3, r2
 8004b26:	71bb      	strb	r3, [r7, #6]
    if (adcopt)
 8004b28:	79bb      	ldrb	r3, [r7, #6]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d015      	beq.n	8004b5a <LTC681x_set_cfgr_adcopt+0x42>
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] | 0x01;
 8004b2e:	79fa      	ldrb	r2, [r7, #7]
 8004b30:	4613      	mov	r3, r2
 8004b32:	019b      	lsls	r3, r3, #6
 8004b34:	4413      	add	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	461a      	mov	r2, r3
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	7819      	ldrb	r1, [r3, #0]
 8004b40:	79fa      	ldrb	r2, [r7, #7]
 8004b42:	4613      	mov	r3, r2
 8004b44:	019b      	lsls	r3, r3, #6
 8004b46:	4413      	add	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f041 0201 	orr.w	r2, r1, #1
 8004b54:	b2d2      	uxtb	r2, r2
 8004b56:	701a      	strb	r2, [r3, #0]
    else
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] & 0xFE;
}
 8004b58:	e014      	b.n	8004b84 <LTC681x_set_cfgr_adcopt+0x6c>
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] & 0xFE;
 8004b5a:	79fa      	ldrb	r2, [r7, #7]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	019b      	lsls	r3, r3, #6
 8004b60:	4413      	add	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	461a      	mov	r2, r3
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	4413      	add	r3, r2
 8004b6a:	7819      	ldrb	r1, [r3, #0]
 8004b6c:	79fa      	ldrb	r2, [r7, #7]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	019b      	lsls	r3, r3, #6
 8004b72:	4413      	add	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	461a      	mov	r2, r3
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f021 0201 	bic.w	r2, r1, #1
 8004b80:	b2d2      	uxtb	r2, r2
 8004b82:	701a      	strb	r2, [r3, #0]
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <LTC681x_set_cfgr_gpio>:

/* Helper function to set GPIO bits */
void LTC681x_set_cfgr_gpio(uint8_t nIC, cell_asic *ic, bool gpio[5])
{
 8004b90:	b480      	push	{r7}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	4603      	mov	r3, r0
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
 8004b9c:	73fb      	strb	r3, [r7, #15]
    int i;
    for (i = 0; i < 5; i++)
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	617b      	str	r3, [r7, #20]
 8004ba2:	e043      	b.n	8004c2c <LTC681x_set_cfgr_gpio+0x9c>
    {
        if (gpio[i])
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	4413      	add	r3, r2
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d01c      	beq.n	8004bea <LTC681x_set_cfgr_gpio+0x5a>
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 8004bb0:	7bfa      	ldrb	r2, [r7, #15]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	019b      	lsls	r3, r3, #6
 8004bb6:	4413      	add	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	461a      	mov	r2, r3
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	b25a      	sxtb	r2, r3
                    | (0x01 << (i + 3));
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	3303      	adds	r3, #3
 8004bc8:	2101      	movs	r1, #1
 8004bca:	fa01 f303 	lsl.w	r3, r1, r3
 8004bce:	b25b      	sxtb	r3, r3
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 8004bd4:	7bfa      	ldrb	r2, [r7, #15]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	019b      	lsls	r3, r3, #6
 8004bda:	4413      	add	r3, r2
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	461a      	mov	r2, r3
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	4413      	add	r3, r2
                    | (0x01 << (i + 3));
 8004be4:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 8004be6:	701a      	strb	r2, [r3, #0]
 8004be8:	e01d      	b.n	8004c26 <LTC681x_set_cfgr_gpio+0x96>
        else
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 8004bea:	7bfa      	ldrb	r2, [r7, #15]
 8004bec:	4613      	mov	r3, r2
 8004bee:	019b      	lsls	r3, r3, #6
 8004bf0:	4413      	add	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	b25a      	sxtb	r2, r3
                    & (~(0x01 << (i + 3)));
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	3303      	adds	r3, #3
 8004c02:	2101      	movs	r1, #1
 8004c04:	fa01 f303 	lsl.w	r3, r1, r3
 8004c08:	b25b      	sxtb	r3, r3
 8004c0a:	43db      	mvns	r3, r3
 8004c0c:	b25b      	sxtb	r3, r3
 8004c0e:	4013      	ands	r3, r2
 8004c10:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 8004c12:	7bfa      	ldrb	r2, [r7, #15]
 8004c14:	4613      	mov	r3, r2
 8004c16:	019b      	lsls	r3, r3, #6
 8004c18:	4413      	add	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	4413      	add	r3, r2
                    & (~(0x01 << (i + 3)));
 8004c22:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 8004c24:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 5; i++)
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	617b      	str	r3, [r7, #20]
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	ddb8      	ble.n	8004ba4 <LTC681x_set_cfgr_gpio+0x14>
    }
}
 8004c32:	bf00      	nop
 8004c34:	bf00      	nop
 8004c36:	371c      	adds	r7, #28
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <LTC681x_set_cfgr_dis>:

/* Helper function to control discharge */
void LTC681x_set_cfgr_dis(uint8_t nIC, cell_asic *ic, bool dcc[12])
{
 8004c40:	b480      	push	{r7}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	4603      	mov	r3, r0
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
 8004c4c:	73fb      	strb	r3, [r7, #15]
    int i;
    for (i = 0; i < 8; i++)
 8004c4e:	2300      	movs	r3, #0
 8004c50:	617b      	str	r3, [r7, #20]
 8004c52:	e041      	b.n	8004cd8 <LTC681x_set_cfgr_dis+0x98>
    {
        if (dcc[i])
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	4413      	add	r3, r2
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d01b      	beq.n	8004c98 <LTC681x_set_cfgr_dis+0x58>
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4] | (0x01 << i);
 8004c60:	7bfa      	ldrb	r2, [r7, #15]
 8004c62:	4613      	mov	r3, r2
 8004c64:	019b      	lsls	r3, r3, #6
 8004c66:	4413      	add	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	4413      	add	r3, r2
 8004c70:	791b      	ldrb	r3, [r3, #4]
 8004c72:	b25a      	sxtb	r2, r3
 8004c74:	2101      	movs	r1, #1
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	fa01 f303 	lsl.w	r3, r1, r3
 8004c7c:	b25b      	sxtb	r3, r3
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	b259      	sxtb	r1, r3
 8004c82:	7bfa      	ldrb	r2, [r7, #15]
 8004c84:	4613      	mov	r3, r2
 8004c86:	019b      	lsls	r3, r3, #6
 8004c88:	4413      	add	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	4413      	add	r3, r2
 8004c92:	b2ca      	uxtb	r2, r1
 8004c94:	711a      	strb	r2, [r3, #4]
 8004c96:	e01c      	b.n	8004cd2 <LTC681x_set_cfgr_dis+0x92>
        else
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]
 8004c98:	7bfa      	ldrb	r2, [r7, #15]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	019b      	lsls	r3, r3, #6
 8004c9e:	4413      	add	r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	791b      	ldrb	r3, [r3, #4]
 8004caa:	b25a      	sxtb	r2, r3
                    & (~(0x01 << i));
 8004cac:	2101      	movs	r1, #1
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb4:	b25b      	sxtb	r3, r3
 8004cb6:	43db      	mvns	r3, r3
 8004cb8:	b25b      	sxtb	r3, r3
 8004cba:	4013      	ands	r3, r2
 8004cbc:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]
 8004cbe:	7bfa      	ldrb	r2, [r7, #15]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	019b      	lsls	r3, r3, #6
 8004cc4:	4413      	add	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	461a      	mov	r2, r3
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	4413      	add	r3, r2
                    & (~(0x01 << i));
 8004cce:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]
 8004cd0:	711a      	strb	r2, [r3, #4]
    for (i = 0; i < 8; i++)
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	617b      	str	r3, [r7, #20]
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	2b07      	cmp	r3, #7
 8004cdc:	ddba      	ble.n	8004c54 <LTC681x_set_cfgr_dis+0x14>
    }
    for (i = 0; i < 4; i++)
 8004cde:	2300      	movs	r3, #0
 8004ce0:	617b      	str	r3, [r7, #20]
 8004ce2:	e042      	b.n	8004d6a <LTC681x_set_cfgr_dis+0x12a>
    {
        if (dcc[i + 8])
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	3308      	adds	r3, #8
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	4413      	add	r3, r2
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d01b      	beq.n	8004d2a <LTC681x_set_cfgr_dis+0xea>
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5] | (0x01 << i);
 8004cf2:	7bfa      	ldrb	r2, [r7, #15]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	019b      	lsls	r3, r3, #6
 8004cf8:	4413      	add	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	4413      	add	r3, r2
 8004d02:	795b      	ldrb	r3, [r3, #5]
 8004d04:	b25a      	sxtb	r2, r3
 8004d06:	2101      	movs	r1, #1
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d0e:	b25b      	sxtb	r3, r3
 8004d10:	4313      	orrs	r3, r2
 8004d12:	b259      	sxtb	r1, r3
 8004d14:	7bfa      	ldrb	r2, [r7, #15]
 8004d16:	4613      	mov	r3, r2
 8004d18:	019b      	lsls	r3, r3, #6
 8004d1a:	4413      	add	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	461a      	mov	r2, r3
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	4413      	add	r3, r2
 8004d24:	b2ca      	uxtb	r2, r1
 8004d26:	715a      	strb	r2, [r3, #5]
 8004d28:	e01c      	b.n	8004d64 <LTC681x_set_cfgr_dis+0x124>
        else
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8004d2a:	7bfa      	ldrb	r2, [r7, #15]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	019b      	lsls	r3, r3, #6
 8004d30:	4413      	add	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	461a      	mov	r2, r3
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	4413      	add	r3, r2
 8004d3a:	795b      	ldrb	r3, [r3, #5]
 8004d3c:	b25a      	sxtb	r2, r3
                    & (~(0x01 << i));
 8004d3e:	2101      	movs	r1, #1
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	fa01 f303 	lsl.w	r3, r1, r3
 8004d46:	b25b      	sxtb	r3, r3
 8004d48:	43db      	mvns	r3, r3
 8004d4a:	b25b      	sxtb	r3, r3
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8004d50:	7bfa      	ldrb	r2, [r7, #15]
 8004d52:	4613      	mov	r3, r2
 8004d54:	019b      	lsls	r3, r3, #6
 8004d56:	4413      	add	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	4413      	add	r3, r2
                    & (~(0x01 << i));
 8004d60:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8004d62:	715a      	strb	r2, [r3, #5]
    for (i = 0; i < 4; i++)
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	3301      	adds	r3, #1
 8004d68:	617b      	str	r3, [r7, #20]
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	2b03      	cmp	r3, #3
 8004d6e:	ddb9      	ble.n	8004ce4 <LTC681x_set_cfgr_dis+0xa4>
    }
}
 8004d70:	bf00      	nop
 8004d72:	bf00      	nop
 8004d74:	371c      	adds	r7, #28
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <LTC681x_set_cfgr_dcto>:

/* Helper function to control discharge time value */
void LTC681x_set_cfgr_dcto(uint8_t nIC, cell_asic *ic, bool dcto[4])
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b087      	sub	sp, #28
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	4603      	mov	r3, r0
 8004d86:	60b9      	str	r1, [r7, #8]
 8004d88:	607a      	str	r2, [r7, #4]
 8004d8a:	73fb      	strb	r3, [r7, #15]
    int i;
    for (i = 0; i < 4; i++)
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	617b      	str	r3, [r7, #20]
 8004d90:	e043      	b.n	8004e1a <LTC681x_set_cfgr_dcto+0x9c>
    {
        if (dcto[i])
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	4413      	add	r3, r2
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d01c      	beq.n	8004dd8 <LTC681x_set_cfgr_dcto+0x5a>
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8004d9e:	7bfa      	ldrb	r2, [r7, #15]
 8004da0:	4613      	mov	r3, r2
 8004da2:	019b      	lsls	r3, r3, #6
 8004da4:	4413      	add	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	461a      	mov	r2, r3
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	4413      	add	r3, r2
 8004dae:	795b      	ldrb	r3, [r3, #5]
 8004db0:	b25a      	sxtb	r2, r3
                    | (0x01 << (i + 4));
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	3304      	adds	r3, #4
 8004db6:	2101      	movs	r1, #1
 8004db8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dbc:	b25b      	sxtb	r3, r3
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8004dc2:	7bfa      	ldrb	r2, [r7, #15]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	019b      	lsls	r3, r3, #6
 8004dc8:	4413      	add	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	461a      	mov	r2, r3
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	4413      	add	r3, r2
                    | (0x01 << (i + 4));
 8004dd2:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8004dd4:	715a      	strb	r2, [r3, #5]
 8004dd6:	e01d      	b.n	8004e14 <LTC681x_set_cfgr_dcto+0x96>
        else
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8004dd8:	7bfa      	ldrb	r2, [r7, #15]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	019b      	lsls	r3, r3, #6
 8004dde:	4413      	add	r3, r2
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	461a      	mov	r2, r3
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	4413      	add	r3, r2
 8004de8:	795b      	ldrb	r3, [r3, #5]
 8004dea:	b25a      	sxtb	r2, r3
                    & (~(0x01 << (i + 4)));
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	3304      	adds	r3, #4
 8004df0:	2101      	movs	r1, #1
 8004df2:	fa01 f303 	lsl.w	r3, r1, r3
 8004df6:	b25b      	sxtb	r3, r3
 8004df8:	43db      	mvns	r3, r3
 8004dfa:	b25b      	sxtb	r3, r3
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8004e00:	7bfa      	ldrb	r2, [r7, #15]
 8004e02:	4613      	mov	r3, r2
 8004e04:	019b      	lsls	r3, r3, #6
 8004e06:	4413      	add	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	4413      	add	r3, r2
                    & (~(0x01 << (i + 4)));
 8004e10:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8004e12:	715a      	strb	r2, [r3, #5]
    for (i = 0; i < 4; i++)
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	3301      	adds	r3, #1
 8004e18:	617b      	str	r3, [r7, #20]
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	2b03      	cmp	r3, #3
 8004e1e:	ddb8      	ble.n	8004d92 <LTC681x_set_cfgr_dcto+0x14>
    }
}
 8004e20:	bf00      	nop
 8004e22:	bf00      	nop
 8004e24:	371c      	adds	r7, #28
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <LTC681x_set_cfgr_uv>:

/* Helper Function to set UV value in CFG register */
void LTC681x_set_cfgr_uv(uint8_t nIC, cell_asic *ic, uint16_t uv)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b085      	sub	sp, #20
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	4603      	mov	r3, r0
 8004e36:	6039      	str	r1, [r7, #0]
 8004e38:	71fb      	strb	r3, [r7, #7]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	80bb      	strh	r3, [r7, #4]
    uint16_t tmp = (uv / 16) - 1;
 8004e3e:	88bb      	ldrh	r3, [r7, #4]
 8004e40:	091b      	lsrs	r3, r3, #4
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	3b01      	subs	r3, #1
 8004e46:	81fb      	strh	r3, [r7, #14]
    ic[nIC].config.tx_data[1] = 0x00FF & tmp;
 8004e48:	79fa      	ldrb	r2, [r7, #7]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	019b      	lsls	r3, r3, #6
 8004e4e:	4413      	add	r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	461a      	mov	r2, r3
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	4413      	add	r3, r2
 8004e58:	89fa      	ldrh	r2, [r7, #14]
 8004e5a:	b2d2      	uxtb	r2, r2
 8004e5c:	705a      	strb	r2, [r3, #1]
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2] & 0xF0;
 8004e5e:	79fa      	ldrb	r2, [r7, #7]
 8004e60:	4613      	mov	r3, r2
 8004e62:	019b      	lsls	r3, r3, #6
 8004e64:	4413      	add	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	461a      	mov	r2, r3
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	7899      	ldrb	r1, [r3, #2]
 8004e70:	79fa      	ldrb	r2, [r7, #7]
 8004e72:	4613      	mov	r3, r2
 8004e74:	019b      	lsls	r3, r3, #6
 8004e76:	4413      	add	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f021 020f 	bic.w	r2, r1, #15
 8004e84:	b2d2      	uxtb	r2, r2
 8004e86:	709a      	strb	r2, [r3, #2]
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 8004e88:	79fa      	ldrb	r2, [r7, #7]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	019b      	lsls	r3, r3, #6
 8004e8e:	4413      	add	r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	461a      	mov	r2, r3
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	4413      	add	r3, r2
 8004e98:	789b      	ldrb	r3, [r3, #2]
 8004e9a:	b25a      	sxtb	r2, r3
            | ((0x0F00 & tmp) >> 8);
 8004e9c:	89fb      	ldrh	r3, [r7, #14]
 8004e9e:	0a1b      	lsrs	r3, r3, #8
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	b25b      	sxtb	r3, r3
 8004ea4:	f003 030f 	and.w	r3, r3, #15
 8004ea8:	b25b      	sxtb	r3, r3
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	b259      	sxtb	r1, r3
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 8004eae:	79fa      	ldrb	r2, [r7, #7]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	019b      	lsls	r3, r3, #6
 8004eb4:	4413      	add	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	461a      	mov	r2, r3
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	4413      	add	r3, r2
            | ((0x0F00 & tmp) >> 8);
 8004ebe:	b2ca      	uxtb	r2, r1
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 8004ec0:	709a      	strb	r2, [r3, #2]
}
 8004ec2:	bf00      	nop
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <LTC681x_set_cfgr_ov>:

/* Helper function to set OV value in CFG register */
void LTC681x_set_cfgr_ov(uint8_t nIC, cell_asic *ic, uint16_t ov)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b085      	sub	sp, #20
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	6039      	str	r1, [r7, #0]
 8004ed8:	71fb      	strb	r3, [r7, #7]
 8004eda:	4613      	mov	r3, r2
 8004edc:	80bb      	strh	r3, [r7, #4]
    uint16_t tmp = (ov / 16);
 8004ede:	88bb      	ldrh	r3, [r7, #4]
 8004ee0:	091b      	lsrs	r3, r3, #4
 8004ee2:	81fb      	strh	r3, [r7, #14]
    ic[nIC].config.tx_data[3] = 0x00FF & (tmp >> 4);
 8004ee4:	89fb      	ldrh	r3, [r7, #14]
 8004ee6:	091b      	lsrs	r3, r3, #4
 8004ee8:	b299      	uxth	r1, r3
 8004eea:	79fa      	ldrb	r2, [r7, #7]
 8004eec:	4613      	mov	r3, r2
 8004eee:	019b      	lsls	r3, r3, #6
 8004ef0:	4413      	add	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	4413      	add	r3, r2
 8004efa:	b2ca      	uxtb	r2, r1
 8004efc:	70da      	strb	r2, [r3, #3]
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2] & 0x0F;
 8004efe:	79fa      	ldrb	r2, [r7, #7]
 8004f00:	4613      	mov	r3, r2
 8004f02:	019b      	lsls	r3, r3, #6
 8004f04:	4413      	add	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	461a      	mov	r2, r3
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	7899      	ldrb	r1, [r3, #2]
 8004f10:	79fa      	ldrb	r2, [r7, #7]
 8004f12:	4613      	mov	r3, r2
 8004f14:	019b      	lsls	r3, r3, #6
 8004f16:	4413      	add	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f001 020f 	and.w	r2, r1, #15
 8004f24:	b2d2      	uxtb	r2, r2
 8004f26:	709a      	strb	r2, [r3, #2]
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 8004f28:	79fa      	ldrb	r2, [r7, #7]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	019b      	lsls	r3, r3, #6
 8004f2e:	4413      	add	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	461a      	mov	r2, r3
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	4413      	add	r3, r2
 8004f38:	789b      	ldrb	r3, [r3, #2]
 8004f3a:	b25a      	sxtb	r2, r3
            | ((0x000F & tmp) << 4);
 8004f3c:	89fb      	ldrh	r3, [r7, #14]
 8004f3e:	b25b      	sxtb	r3, r3
 8004f40:	011b      	lsls	r3, r3, #4
 8004f42:	b25b      	sxtb	r3, r3
 8004f44:	4313      	orrs	r3, r2
 8004f46:	b259      	sxtb	r1, r3
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 8004f48:	79fa      	ldrb	r2, [r7, #7]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	019b      	lsls	r3, r3, #6
 8004f4e:	4413      	add	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	461a      	mov	r2, r3
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	4413      	add	r3, r2
            | ((0x000F & tmp) << 4);
 8004f58:	b2ca      	uxtb	r2, r1
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 8004f5a:	709a      	strb	r2, [r3, #2]
}
 8004f5c:	bf00      	nop
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <cs_low>:
		4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 0, 0, 0, -1, -1, -1, -2, -2, -2, -3,
		-3, -3, -4, -4, -4, -5, -5, -5, -5, -6, -6, -6, -7, -7, -7, -8, -8, -8,
		-9, -9, -9, -10, -10, -10, -10, -11, -11, -11, -12, -12, -12, -13, -13,
		-13, -13, -14, -14, -14, -15, -15, -15, -16, -16, -16, -16, -25 };

void cs_low() {
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004f72:	4805      	ldr	r0, [pc, #20]	@ (8004f88 <cs_low+0x20>)
 8004f74:	f003 faae 	bl	80084d4 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);// Enable Pack, /CS asserted
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004f7e:	4803      	ldr	r0, [pc, #12]	@ (8004f8c <cs_low+0x24>)
 8004f80:	f003 faa8 	bl	80084d4 <HAL_GPIO_WritePin>


}
 8004f84:	bf00      	nop
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	40020400 	.word	0x40020400
 8004f8c:	40020c00 	.word	0x40020c00

08004f90 <cs_high>:

void cs_high() {
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8004f94:	2201      	movs	r2, #1
 8004f96:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004f9a:	4805      	ldr	r0, [pc, #20]	@ (8004fb0 <cs_high+0x20>)
 8004f9c:	f003 fa9a 	bl	80084d4 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);// Disable Pack, /CS deasserted
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004fa6:	4803      	ldr	r0, [pc, #12]	@ (8004fb4 <cs_high+0x24>)
 8004fa8:	f003 fa94 	bl	80084d4 <HAL_GPIO_WritePin>


}
 8004fac:	bf00      	nop
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	40020400 	.word	0x40020400
 8004fb4:	40020c00 	.word	0x40020c00

08004fb8 <spi_write_array>:
 * @param parameters   :  Data length, data to transmit
 */

void spi_write_array(uint8_t len, // Option: Number of bytes to be written on the SPI port
		uint8_t data[] //Array of bytes to be written on the SPI port
		) {
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	6039      	str	r1, [r7, #0]
 8004fc2:	71fb      	strb	r3, [r7, #7]
	uint8_t len_t;
	for (len_t = 0; len_t < len; len_t++) {
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	73fb      	strb	r3, [r7, #15]
 8004fc8:	e00f      	b.n	8004fea <spi_write_array+0x32>
		if (HAL_SPI_Transmit(&hspi4, &data[len_t], 1, 20) != HAL_OK) {
 8004fca:	7bfb      	ldrb	r3, [r7, #15]
 8004fcc:	683a      	ldr	r2, [r7, #0]
 8004fce:	18d1      	adds	r1, r2, r3
 8004fd0:	2314      	movs	r3, #20
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	4809      	ldr	r0, [pc, #36]	@ (8004ffc <spi_write_array+0x44>)
 8004fd6:	f005 f89a 	bl	800a10e <HAL_SPI_Transmit>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d001      	beq.n	8004fe4 <spi_write_array+0x2c>
			/* Transfer error in transmission process */
			Error_Handler();
 8004fe0:	f001 feb2 	bl	8006d48 <Error_Handler>
	for (len_t = 0; len_t < len; len_t++) {
 8004fe4:	7bfb      	ldrb	r3, [r7, #15]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	73fb      	strb	r3, [r7, #15]
 8004fea:	7bfa      	ldrb	r2, [r7, #15]
 8004fec:	79fb      	ldrb	r3, [r7, #7]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d3eb      	bcc.n	8004fca <spi_write_array+0x12>
		}
	}

}
 8004ff2:	bf00      	nop
 8004ff4:	bf00      	nop
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	20001a54 	.word	0x20001a54

08005000 <sendData>:
extern UART_HandleTypeDef huart3;
extern UART_HandleTypeDef huart6;


void sendData (uint8_t *data, int size)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
	// we will calculate the CRC in this function itself
	uint16_t crc = crc16(data, size);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	b29b      	uxth	r3, r3
 800500e:	4619      	mov	r1, r3
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 fc85 	bl	8005920 <crc16>
 8005016:	4603      	mov	r3, r0
 8005018:	81fb      	strh	r3, [r7, #14]
	data[size] = crc&0xFF;   // CRC LOW
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	4413      	add	r3, r2
 8005020:	89fa      	ldrh	r2, [r7, #14]
 8005022:	b2d2      	uxtb	r2, r2
 8005024:	701a      	strb	r2, [r3, #0]
	data[size+1] = (crc>>8)&0xFF;  // CRC HIGH
 8005026:	89fb      	ldrh	r3, [r7, #14]
 8005028:	0a1b      	lsrs	r3, r3, #8
 800502a:	b299      	uxth	r1, r3
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	3301      	adds	r3, #1
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	4413      	add	r3, r2
 8005034:	b2ca      	uxtb	r2, r1
 8005036:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart2, data, size+2, 1000);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	b29b      	uxth	r3, r3
 800503c:	3302      	adds	r3, #2
 800503e:	b29a      	uxth	r2, r3
 8005040:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005044:	6879      	ldr	r1, [r7, #4]
 8005046:	4803      	ldr	r0, [pc, #12]	@ (8005054 <sendData+0x54>)
 8005048:	f005 fff2 	bl	800b030 <HAL_UART_Transmit>
}
 800504c:	bf00      	nop
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	20001b3c 	.word	0x20001b3c

08005058 <modbusException>:

void modbusException (uint8_t exceptioncode)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	4603      	mov	r3, r0
 8005060:	71fb      	strb	r3, [r7, #7]
	//| SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
	//| 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

	TxData_modbus_01[0] = RxData_modbus_01[0];       // slave ID
 8005062:	4b0b      	ldr	r3, [pc, #44]	@ (8005090 <modbusException+0x38>)
 8005064:	781a      	ldrb	r2, [r3, #0]
 8005066:	4b0b      	ldr	r3, [pc, #44]	@ (8005094 <modbusException+0x3c>)
 8005068:	701a      	strb	r2, [r3, #0]
	TxData_modbus_01[1] = RxData_modbus_01[1]|0x80;  // adding 1 to the MSB of the function code
 800506a:	4b09      	ldr	r3, [pc, #36]	@ (8005090 <modbusException+0x38>)
 800506c:	785b      	ldrb	r3, [r3, #1]
 800506e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005072:	b2da      	uxtb	r2, r3
 8005074:	4b07      	ldr	r3, [pc, #28]	@ (8005094 <modbusException+0x3c>)
 8005076:	705a      	strb	r2, [r3, #1]
	TxData_modbus_01[2] = exceptioncode;   // Load the Exception code
 8005078:	4a06      	ldr	r2, [pc, #24]	@ (8005094 <modbusException+0x3c>)
 800507a:	79fb      	ldrb	r3, [r7, #7]
 800507c:	7093      	strb	r3, [r2, #2]
	sendData(TxData_modbus_01, 3);         // send Data... CRC will be calculated in the function
 800507e:	2103      	movs	r1, #3
 8005080:	4804      	ldr	r0, [pc, #16]	@ (8005094 <modbusException+0x3c>)
 8005082:	f7ff ffbd 	bl	8005000 <sendData>
}
 8005086:	bf00      	nop
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	20001298 	.word	0x20001298
 8005094:	20001398 	.word	0x20001398

08005098 <readHoldingRegs>:


uint8_t readHoldingRegs (void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData_modbus_01[2]<<8)|RxData_modbus_01[3]);  // start Register Address
 800509e:	4b35      	ldr	r3, [pc, #212]	@ (8005174 <readHoldingRegs+0xdc>)
 80050a0:	789b      	ldrb	r3, [r3, #2]
 80050a2:	b21b      	sxth	r3, r3
 80050a4:	021b      	lsls	r3, r3, #8
 80050a6:	b21a      	sxth	r2, r3
 80050a8:	4b32      	ldr	r3, [pc, #200]	@ (8005174 <readHoldingRegs+0xdc>)
 80050aa:	78db      	ldrb	r3, [r3, #3]
 80050ac:	b21b      	sxth	r3, r3
 80050ae:	4313      	orrs	r3, r2
 80050b0:	b21b      	sxth	r3, r3
 80050b2:	81fb      	strh	r3, [r7, #14]

	uint16_t numRegs = ((RxData_modbus_01[4]<<8)|RxData_modbus_01[5]);   // number to registers master has requested
 80050b4:	4b2f      	ldr	r3, [pc, #188]	@ (8005174 <readHoldingRegs+0xdc>)
 80050b6:	791b      	ldrb	r3, [r3, #4]
 80050b8:	b21b      	sxth	r3, r3
 80050ba:	021b      	lsls	r3, r3, #8
 80050bc:	b21a      	sxth	r2, r3
 80050be:	4b2d      	ldr	r3, [pc, #180]	@ (8005174 <readHoldingRegs+0xdc>)
 80050c0:	795b      	ldrb	r3, [r3, #5]
 80050c2:	b21b      	sxth	r3, r3
 80050c4:	4313      	orrs	r3, r2
 80050c6:	b21b      	sxth	r3, r3
 80050c8:	807b      	strh	r3, [r7, #2]
	if ((numRegs<1)||(numRegs>125))  // maximum no. of Registers as per the PDF
 80050ca:	887b      	ldrh	r3, [r7, #2]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d002      	beq.n	80050d6 <readHoldingRegs+0x3e>
 80050d0:	887b      	ldrh	r3, [r7, #2]
 80050d2:	2b7d      	cmp	r3, #125	@ 0x7d
 80050d4:	d904      	bls.n	80050e0 <readHoldingRegs+0x48>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 80050d6:	2003      	movs	r0, #3
 80050d8:	f7ff ffbe 	bl	8005058 <modbusException>
		return 0;
 80050dc:	2300      	movs	r3, #0
 80050de:	e044      	b.n	800516a <readHoldingRegs+0xd2>
	}

	uint16_t endAddr = startAddr+numRegs-1;  // end Register
 80050e0:	89fa      	ldrh	r2, [r7, #14]
 80050e2:	887b      	ldrh	r3, [r7, #2]
 80050e4:	4413      	add	r3, r2
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	3b01      	subs	r3, #1
 80050ea:	803b      	strh	r3, [r7, #0]
	if (endAddr>49)  // end Register can not be more than 49 as we only have record of 50 Registers in total
 80050ec:	883b      	ldrh	r3, [r7, #0]
 80050ee:	2b31      	cmp	r3, #49	@ 0x31
 80050f0:	d904      	bls.n	80050fc <readHoldingRegs+0x64>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 80050f2:	2002      	movs	r0, #2
 80050f4:	f7ff ffb0 	bl	8005058 <modbusException>
		return 0;
 80050f8:	2300      	movs	r3, #0
 80050fa:	e036      	b.n	800516a <readHoldingRegs+0xd2>
	// Prepare TxData_modbus_01 buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	TxData_modbus_01[0] = SLAVE_ID;  // slave ID
 80050fc:	4b1e      	ldr	r3, [pc, #120]	@ (8005178 <readHoldingRegs+0xe0>)
 80050fe:	2207      	movs	r2, #7
 8005100:	701a      	strb	r2, [r3, #0]
	TxData_modbus_01[1] = RxData_modbus_01[1];  // function code
 8005102:	4b1c      	ldr	r3, [pc, #112]	@ (8005174 <readHoldingRegs+0xdc>)
 8005104:	785a      	ldrb	r2, [r3, #1]
 8005106:	4b1c      	ldr	r3, [pc, #112]	@ (8005178 <readHoldingRegs+0xe0>)
 8005108:	705a      	strb	r2, [r3, #1]
	TxData_modbus_01[2] = numRegs*2;  // Byte count
 800510a:	887b      	ldrh	r3, [r7, #2]
 800510c:	b2db      	uxtb	r3, r3
 800510e:	005b      	lsls	r3, r3, #1
 8005110:	b2da      	uxtb	r2, r3
 8005112:	4b19      	ldr	r3, [pc, #100]	@ (8005178 <readHoldingRegs+0xe0>)
 8005114:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData_modbus_01 Buffer
 8005116:	2303      	movs	r3, #3
 8005118:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData_modbus_01 buffer
 800511a:	2300      	movs	r3, #0
 800511c:	607b      	str	r3, [r7, #4]
 800511e:	e01b      	b.n	8005158 <readHoldingRegs+0xc0>
	{
		TxData_modbus_01[indx++] = (Holding_Registers_Database[startAddr]>>8)&0xFF;  // extract the higher byte
 8005120:	89fb      	ldrh	r3, [r7, #14]
 8005122:	4a16      	ldr	r2, [pc, #88]	@ (800517c <readHoldingRegs+0xe4>)
 8005124:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005128:	0a1b      	lsrs	r3, r3, #8
 800512a:	b299      	uxth	r1, r3
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	1c5a      	adds	r2, r3, #1
 8005130:	60ba      	str	r2, [r7, #8]
 8005132:	b2c9      	uxtb	r1, r1
 8005134:	4a10      	ldr	r2, [pc, #64]	@ (8005178 <readHoldingRegs+0xe0>)
 8005136:	54d1      	strb	r1, [r2, r3]
		TxData_modbus_01[indx++] = (Holding_Registers_Database[startAddr])&0xFF;   // extract the lower byte
 8005138:	89fb      	ldrh	r3, [r7, #14]
 800513a:	4a10      	ldr	r2, [pc, #64]	@ (800517c <readHoldingRegs+0xe4>)
 800513c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	1c5a      	adds	r2, r3, #1
 8005144:	60ba      	str	r2, [r7, #8]
 8005146:	b2c9      	uxtb	r1, r1
 8005148:	4a0b      	ldr	r2, [pc, #44]	@ (8005178 <readHoldingRegs+0xe0>)
 800514a:	54d1      	strb	r1, [r2, r3]
		startAddr++;  // increment the register address
 800514c:	89fb      	ldrh	r3, [r7, #14]
 800514e:	3301      	adds	r3, #1
 8005150:	81fb      	strh	r3, [r7, #14]
	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData_modbus_01 buffer
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	3301      	adds	r3, #1
 8005156:	607b      	str	r3, [r7, #4]
 8005158:	887b      	ldrh	r3, [r7, #2]
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	429a      	cmp	r2, r3
 800515e:	dbdf      	blt.n	8005120 <readHoldingRegs+0x88>
	}

	sendData(TxData_modbus_01, indx);  // send data... CRC will be calculated in the function itself
 8005160:	68b9      	ldr	r1, [r7, #8]
 8005162:	4805      	ldr	r0, [pc, #20]	@ (8005178 <readHoldingRegs+0xe0>)
 8005164:	f7ff ff4c 	bl	8005000 <sendData>
	return 1;   // success
 8005168:	2301      	movs	r3, #1
}
 800516a:	4618      	mov	r0, r3
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	20001298 	.word	0x20001298
 8005178:	20001398 	.word	0x20001398
 800517c:	20000914 	.word	0x20000914

08005180 <readInputRegs>:

uint8_t readInputRegs (void)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData_modbus_01[2]<<8)|RxData_modbus_01[3]);  // start Register Address
 8005186:	4b35      	ldr	r3, [pc, #212]	@ (800525c <readInputRegs+0xdc>)
 8005188:	789b      	ldrb	r3, [r3, #2]
 800518a:	b21b      	sxth	r3, r3
 800518c:	021b      	lsls	r3, r3, #8
 800518e:	b21a      	sxth	r2, r3
 8005190:	4b32      	ldr	r3, [pc, #200]	@ (800525c <readInputRegs+0xdc>)
 8005192:	78db      	ldrb	r3, [r3, #3]
 8005194:	b21b      	sxth	r3, r3
 8005196:	4313      	orrs	r3, r2
 8005198:	b21b      	sxth	r3, r3
 800519a:	81fb      	strh	r3, [r7, #14]

	uint16_t numRegs = ((RxData_modbus_01[4]<<8)|RxData_modbus_01[5]);   // number to registers master has requested
 800519c:	4b2f      	ldr	r3, [pc, #188]	@ (800525c <readInputRegs+0xdc>)
 800519e:	791b      	ldrb	r3, [r3, #4]
 80051a0:	b21b      	sxth	r3, r3
 80051a2:	021b      	lsls	r3, r3, #8
 80051a4:	b21a      	sxth	r2, r3
 80051a6:	4b2d      	ldr	r3, [pc, #180]	@ (800525c <readInputRegs+0xdc>)
 80051a8:	795b      	ldrb	r3, [r3, #5]
 80051aa:	b21b      	sxth	r3, r3
 80051ac:	4313      	orrs	r3, r2
 80051ae:	b21b      	sxth	r3, r3
 80051b0:	807b      	strh	r3, [r7, #2]
	if ((numRegs<1)||(numRegs>125))  // maximum no. of Registers as per the PDF
 80051b2:	887b      	ldrh	r3, [r7, #2]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d002      	beq.n	80051be <readInputRegs+0x3e>
 80051b8:	887b      	ldrh	r3, [r7, #2]
 80051ba:	2b7d      	cmp	r3, #125	@ 0x7d
 80051bc:	d904      	bls.n	80051c8 <readInputRegs+0x48>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 80051be:	2003      	movs	r0, #3
 80051c0:	f7ff ff4a 	bl	8005058 <modbusException>
		return 0;
 80051c4:	2300      	movs	r3, #0
 80051c6:	e044      	b.n	8005252 <readInputRegs+0xd2>
	}

	uint16_t endAddr = startAddr+numRegs-1;  // end Register
 80051c8:	89fa      	ldrh	r2, [r7, #14]
 80051ca:	887b      	ldrh	r3, [r7, #2]
 80051cc:	4413      	add	r3, r2
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	3b01      	subs	r3, #1
 80051d2:	803b      	strh	r3, [r7, #0]
	if (endAddr>49)  // end Register can not be more than 49 as we only have record of 50 Registers in total
 80051d4:	883b      	ldrh	r3, [r7, #0]
 80051d6:	2b31      	cmp	r3, #49	@ 0x31
 80051d8:	d904      	bls.n	80051e4 <readInputRegs+0x64>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 80051da:	2002      	movs	r0, #2
 80051dc:	f7ff ff3c 	bl	8005058 <modbusException>
		return 0;
 80051e0:	2300      	movs	r3, #0
 80051e2:	e036      	b.n	8005252 <readInputRegs+0xd2>
	// Prepare TxData_modbus_01 buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	TxData_modbus_01[0] = SLAVE_ID;  // slave ID
 80051e4:	4b1e      	ldr	r3, [pc, #120]	@ (8005260 <readInputRegs+0xe0>)
 80051e6:	2207      	movs	r2, #7
 80051e8:	701a      	strb	r2, [r3, #0]
	TxData_modbus_01[1] = RxData_modbus_01[1];  // function code
 80051ea:	4b1c      	ldr	r3, [pc, #112]	@ (800525c <readInputRegs+0xdc>)
 80051ec:	785a      	ldrb	r2, [r3, #1]
 80051ee:	4b1c      	ldr	r3, [pc, #112]	@ (8005260 <readInputRegs+0xe0>)
 80051f0:	705a      	strb	r2, [r3, #1]
	TxData_modbus_01[2] = numRegs*2;  // Byte count
 80051f2:	887b      	ldrh	r3, [r7, #2]
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	b2da      	uxtb	r2, r3
 80051fa:	4b19      	ldr	r3, [pc, #100]	@ (8005260 <readInputRegs+0xe0>)
 80051fc:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData_modbus_01 Buffer
 80051fe:	2303      	movs	r3, #3
 8005200:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData_modbus_01 buffer
 8005202:	2300      	movs	r3, #0
 8005204:	607b      	str	r3, [r7, #4]
 8005206:	e01b      	b.n	8005240 <readInputRegs+0xc0>
	{
		TxData_modbus_01[indx++] = (Input_Registers_Database[startAddr]>>8)&0xFF;  // extract the higher byte
 8005208:	89fb      	ldrh	r3, [r7, #14]
 800520a:	4a16      	ldr	r2, [pc, #88]	@ (8005264 <readInputRegs+0xe4>)
 800520c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005210:	0a1b      	lsrs	r3, r3, #8
 8005212:	b299      	uxth	r1, r3
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	60ba      	str	r2, [r7, #8]
 800521a:	b2c9      	uxtb	r1, r1
 800521c:	4a10      	ldr	r2, [pc, #64]	@ (8005260 <readInputRegs+0xe0>)
 800521e:	54d1      	strb	r1, [r2, r3]
		TxData_modbus_01[indx++] = (Input_Registers_Database[startAddr])&0xFF;   // extract the lower byte
 8005220:	89fb      	ldrh	r3, [r7, #14]
 8005222:	4a10      	ldr	r2, [pc, #64]	@ (8005264 <readInputRegs+0xe4>)
 8005224:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	1c5a      	adds	r2, r3, #1
 800522c:	60ba      	str	r2, [r7, #8]
 800522e:	b2c9      	uxtb	r1, r1
 8005230:	4a0b      	ldr	r2, [pc, #44]	@ (8005260 <readInputRegs+0xe0>)
 8005232:	54d1      	strb	r1, [r2, r3]
		startAddr++;  // increment the register address
 8005234:	89fb      	ldrh	r3, [r7, #14]
 8005236:	3301      	adds	r3, #1
 8005238:	81fb      	strh	r3, [r7, #14]
	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData_modbus_01 buffer
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	3301      	adds	r3, #1
 800523e:	607b      	str	r3, [r7, #4]
 8005240:	887b      	ldrh	r3, [r7, #2]
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	429a      	cmp	r2, r3
 8005246:	dbdf      	blt.n	8005208 <readInputRegs+0x88>
	}

	sendData(TxData_modbus_01, indx);  // send data... CRC will be calculated in the function itself
 8005248:	68b9      	ldr	r1, [r7, #8]
 800524a:	4805      	ldr	r0, [pc, #20]	@ (8005260 <readInputRegs+0xe0>)
 800524c:	f7ff fed8 	bl	8005000 <sendData>
	return 1;   // success
 8005250:	2301      	movs	r3, #1
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	20001298 	.word	0x20001298
 8005260:	20001398 	.word	0x20001398
 8005264:	0800d6a8 	.word	0x0800d6a8

08005268 <readCoils>:

uint8_t readCoils (void)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b088      	sub	sp, #32
 800526c:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData_modbus_01[2]<<8)|RxData_modbus_01[3]);  // start Coil Address
 800526e:	4b53      	ldr	r3, [pc, #332]	@ (80053bc <readCoils+0x154>)
 8005270:	789b      	ldrb	r3, [r3, #2]
 8005272:	b21b      	sxth	r3, r3
 8005274:	021b      	lsls	r3, r3, #8
 8005276:	b21a      	sxth	r2, r3
 8005278:	4b50      	ldr	r3, [pc, #320]	@ (80053bc <readCoils+0x154>)
 800527a:	78db      	ldrb	r3, [r3, #3]
 800527c:	b21b      	sxth	r3, r3
 800527e:	4313      	orrs	r3, r2
 8005280:	b21b      	sxth	r3, r3
 8005282:	817b      	strh	r3, [r7, #10]

	uint16_t numCoils = ((RxData_modbus_01[4]<<8)|RxData_modbus_01[5]);   // number to coils master has requested
 8005284:	4b4d      	ldr	r3, [pc, #308]	@ (80053bc <readCoils+0x154>)
 8005286:	791b      	ldrb	r3, [r3, #4]
 8005288:	b21b      	sxth	r3, r3
 800528a:	021b      	lsls	r3, r3, #8
 800528c:	b21a      	sxth	r2, r3
 800528e:	4b4b      	ldr	r3, [pc, #300]	@ (80053bc <readCoils+0x154>)
 8005290:	795b      	ldrb	r3, [r3, #5]
 8005292:	b21b      	sxth	r3, r3
 8005294:	4313      	orrs	r3, r2
 8005296:	b21b      	sxth	r3, r3
 8005298:	813b      	strh	r3, [r7, #8]
	if ((numCoils<1)||(numCoils>2000))  // maximum no. of coils as per the PDF
 800529a:	893b      	ldrh	r3, [r7, #8]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d003      	beq.n	80052a8 <readCoils+0x40>
 80052a0:	893b      	ldrh	r3, [r7, #8]
 80052a2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80052a6:	d904      	bls.n	80052b2 <readCoils+0x4a>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 80052a8:	2003      	movs	r0, #3
 80052aa:	f7ff fed5 	bl	8005058 <modbusException>
		return 0;
 80052ae:	2300      	movs	r3, #0
 80052b0:	e080      	b.n	80053b4 <readCoils+0x14c>
	}

	uint16_t endAddr = startAddr+numCoils-1;  // Last coils address
 80052b2:	897a      	ldrh	r2, [r7, #10]
 80052b4:	893b      	ldrh	r3, [r7, #8]
 80052b6:	4413      	add	r3, r2
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	3b01      	subs	r3, #1
 80052bc:	80fb      	strh	r3, [r7, #6]
	if (endAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 80052be:	88fb      	ldrh	r3, [r7, #6]
 80052c0:	2bc7      	cmp	r3, #199	@ 0xc7
 80052c2:	d904      	bls.n	80052ce <readCoils+0x66>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 80052c4:	2002      	movs	r0, #2
 80052c6:	f7ff fec7 	bl	8005058 <modbusException>
		return 0;
 80052ca:	2300      	movs	r3, #0
 80052cc:	e072      	b.n	80053b4 <readCoils+0x14c>
	}


	//reset TxData_modbus_01 buffer
	memset (TxData_modbus_01, '\0', 256);
 80052ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80052d2:	2100      	movs	r1, #0
 80052d4:	483a      	ldr	r0, [pc, #232]	@ (80053c0 <readCoils+0x158>)
 80052d6:	f007 f86b 	bl	800c3b0 <memset>
	// Prepare TxData_modbus_01 buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	TxData_modbus_01[0] = SLAVE_ID;  // slave ID
 80052da:	4b39      	ldr	r3, [pc, #228]	@ (80053c0 <readCoils+0x158>)
 80052dc:	2207      	movs	r2, #7
 80052de:	701a      	strb	r2, [r3, #0]
	TxData_modbus_01[1] = RxData_modbus_01[1];  // function code
 80052e0:	4b36      	ldr	r3, [pc, #216]	@ (80053bc <readCoils+0x154>)
 80052e2:	785a      	ldrb	r2, [r3, #1]
 80052e4:	4b36      	ldr	r3, [pc, #216]	@ (80053c0 <readCoils+0x158>)
 80052e6:	705a      	strb	r2, [r3, #1]
	TxData_modbus_01[2] = (numCoils/8) + ((numCoils%8)>0 ? 1:0);  // Byte count
 80052e8:	893b      	ldrh	r3, [r7, #8]
 80052ea:	08db      	lsrs	r3, r3, #3
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	893a      	ldrh	r2, [r7, #8]
 80052f2:	f002 0207 	and.w	r2, r2, #7
 80052f6:	b292      	uxth	r2, r2
 80052f8:	2a00      	cmp	r2, #0
 80052fa:	bf14      	ite	ne
 80052fc:	2201      	movne	r2, #1
 80052fe:	2200      	moveq	r2, #0
 8005300:	b2d2      	uxtb	r2, r2
 8005302:	4413      	add	r3, r2
 8005304:	b2da      	uxtb	r2, r3
 8005306:	4b2e      	ldr	r3, [pc, #184]	@ (80053c0 <readCoils+0x158>)
 8005308:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData_modbus_01 Buffer
 800530a:	2303      	movs	r3, #3
 800530c:	61fb      	str	r3, [r7, #28]
	 * Then we will keep shifting the database[1] to the right and read the bits.
	 * Once the bitposition has crossed the value 7, we will increment the startbyte
	 * When the indxposition exceeds 7, we increment the indx variable, so to copy into the next byte of the TxData_modbus_01
	 * This keeps going until the number of coils required have been copied
	 */
	int startByte = startAddr/8;  // which byte we have to start extracting the data from
 800530e:	897b      	ldrh	r3, [r7, #10]
 8005310:	08db      	lsrs	r3, r3, #3
 8005312:	b29b      	uxth	r3, r3
 8005314:	61bb      	str	r3, [r7, #24]
	uint16_t bitPosition = startAddr%8;  // The shift position in the first byte
 8005316:	897b      	ldrh	r3, [r7, #10]
 8005318:	f003 0307 	and.w	r3, r3, #7
 800531c:	82fb      	strh	r3, [r7, #22]
	int indxPosition = 0;  // The shift position in the current indx of the TxData_modbus_01 buffer
 800531e:	2300      	movs	r3, #0
 8005320:	613b      	str	r3, [r7, #16]

	// Load the actual data into TxData_modbus_01 buffer
	for (int i=0; i<numCoils; i++)
 8005322:	2300      	movs	r3, #0
 8005324:	60fb      	str	r3, [r7, #12]
 8005326:	e033      	b.n	8005390 <readCoils+0x128>
	{
		TxData_modbus_01[indx] |= ((Coils_Database[startByte] >> bitPosition) &0x01) << indxPosition;
 8005328:	4a25      	ldr	r2, [pc, #148]	@ (80053c0 <readCoils+0x158>)
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	4413      	add	r3, r2
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	b25a      	sxtb	r2, r3
 8005332:	4924      	ldr	r1, [pc, #144]	@ (80053c4 <readCoils+0x15c>)
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	440b      	add	r3, r1
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	4619      	mov	r1, r3
 800533c:	8afb      	ldrh	r3, [r7, #22]
 800533e:	fa41 f303 	asr.w	r3, r1, r3
 8005342:	f003 0101 	and.w	r1, r3, #1
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	fa01 f303 	lsl.w	r3, r1, r3
 800534c:	b25b      	sxtb	r3, r3
 800534e:	4313      	orrs	r3, r2
 8005350:	b25b      	sxtb	r3, r3
 8005352:	b2d9      	uxtb	r1, r3
 8005354:	4a1a      	ldr	r2, [pc, #104]	@ (80053c0 <readCoils+0x158>)
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	4413      	add	r3, r2
 800535a:	460a      	mov	r2, r1
 800535c:	701a      	strb	r2, [r3, #0]
		indxPosition++; bitPosition++;
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	3301      	adds	r3, #1
 8005362:	613b      	str	r3, [r7, #16]
 8005364:	8afb      	ldrh	r3, [r7, #22]
 8005366:	3301      	adds	r3, #1
 8005368:	82fb      	strh	r3, [r7, #22]
		if (indxPosition>7)  // if the indxposition exceeds 7, we have to copy the data into the next byte position
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	2b07      	cmp	r3, #7
 800536e:	dd04      	ble.n	800537a <readCoils+0x112>
		{
			indxPosition = 0;
 8005370:	2300      	movs	r3, #0
 8005372:	613b      	str	r3, [r7, #16]
			indx++;
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	3301      	adds	r3, #1
 8005378:	61fb      	str	r3, [r7, #28]
		}
		if (bitPosition>7)  // if the bitposition exceeds 7, we have to increment the startbyte
 800537a:	8afb      	ldrh	r3, [r7, #22]
 800537c:	2b07      	cmp	r3, #7
 800537e:	d904      	bls.n	800538a <readCoils+0x122>
		{
			bitPosition=0;
 8005380:	2300      	movs	r3, #0
 8005382:	82fb      	strh	r3, [r7, #22]
			startByte++;
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	3301      	adds	r3, #1
 8005388:	61bb      	str	r3, [r7, #24]
	for (int i=0; i<numCoils; i++)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	3301      	adds	r3, #1
 800538e:	60fb      	str	r3, [r7, #12]
 8005390:	893b      	ldrh	r3, [r7, #8]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	429a      	cmp	r2, r3
 8005396:	dbc7      	blt.n	8005328 <readCoils+0xc0>
		}
	}

	if (numCoils%8 != 0)indx++;  // increment the indx variable, only if the numcoils is not a multiple of 8
 8005398:	893b      	ldrh	r3, [r7, #8]
 800539a:	f003 0307 	and.w	r3, r3, #7
 800539e:	b29b      	uxth	r3, r3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d002      	beq.n	80053aa <readCoils+0x142>
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	3301      	adds	r3, #1
 80053a8:	61fb      	str	r3, [r7, #28]
	sendData(TxData_modbus_01, indx);  // send data... CRC will be calculated in the function itself
 80053aa:	69f9      	ldr	r1, [r7, #28]
 80053ac:	4804      	ldr	r0, [pc, #16]	@ (80053c0 <readCoils+0x158>)
 80053ae:	f7ff fe27 	bl	8005000 <sendData>
	return 1;   // success
 80053b2:	2301      	movs	r3, #1
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3720      	adds	r7, #32
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	20001298 	.word	0x20001298
 80053c0:	20001398 	.word	0x20001398
 80053c4:	20000978 	.word	0x20000978

080053c8 <readInputs>:

uint8_t readInputs (void)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b088      	sub	sp, #32
 80053cc:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData_modbus_01[2]<<8)|RxData_modbus_01[3]);  // start Register Address
 80053ce:	4b53      	ldr	r3, [pc, #332]	@ (800551c <readInputs+0x154>)
 80053d0:	789b      	ldrb	r3, [r3, #2]
 80053d2:	b21b      	sxth	r3, r3
 80053d4:	021b      	lsls	r3, r3, #8
 80053d6:	b21a      	sxth	r2, r3
 80053d8:	4b50      	ldr	r3, [pc, #320]	@ (800551c <readInputs+0x154>)
 80053da:	78db      	ldrb	r3, [r3, #3]
 80053dc:	b21b      	sxth	r3, r3
 80053de:	4313      	orrs	r3, r2
 80053e0:	b21b      	sxth	r3, r3
 80053e2:	817b      	strh	r3, [r7, #10]

	uint16_t numCoils = ((RxData_modbus_01[4]<<8)|RxData_modbus_01[5]);   // number to coils master has requested
 80053e4:	4b4d      	ldr	r3, [pc, #308]	@ (800551c <readInputs+0x154>)
 80053e6:	791b      	ldrb	r3, [r3, #4]
 80053e8:	b21b      	sxth	r3, r3
 80053ea:	021b      	lsls	r3, r3, #8
 80053ec:	b21a      	sxth	r2, r3
 80053ee:	4b4b      	ldr	r3, [pc, #300]	@ (800551c <readInputs+0x154>)
 80053f0:	795b      	ldrb	r3, [r3, #5]
 80053f2:	b21b      	sxth	r3, r3
 80053f4:	4313      	orrs	r3, r2
 80053f6:	b21b      	sxth	r3, r3
 80053f8:	813b      	strh	r3, [r7, #8]
	if ((numCoils<1)||(numCoils>2000))  // maximum no. of coils as per the PDF
 80053fa:	893b      	ldrh	r3, [r7, #8]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d003      	beq.n	8005408 <readInputs+0x40>
 8005400:	893b      	ldrh	r3, [r7, #8]
 8005402:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8005406:	d904      	bls.n	8005412 <readInputs+0x4a>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8005408:	2003      	movs	r0, #3
 800540a:	f7ff fe25 	bl	8005058 <modbusException>
		return 0;
 800540e:	2300      	movs	r3, #0
 8005410:	e080      	b.n	8005514 <readInputs+0x14c>
	}

	uint16_t endAddr = startAddr+numCoils-1;  // Last coils address
 8005412:	897a      	ldrh	r2, [r7, #10]
 8005414:	893b      	ldrh	r3, [r7, #8]
 8005416:	4413      	add	r3, r2
 8005418:	b29b      	uxth	r3, r3
 800541a:	3b01      	subs	r3, #1
 800541c:	80fb      	strh	r3, [r7, #6]
	if (endAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 800541e:	88fb      	ldrh	r3, [r7, #6]
 8005420:	2bc7      	cmp	r3, #199	@ 0xc7
 8005422:	d904      	bls.n	800542e <readInputs+0x66>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8005424:	2002      	movs	r0, #2
 8005426:	f7ff fe17 	bl	8005058 <modbusException>
		return 0;
 800542a:	2300      	movs	r3, #0
 800542c:	e072      	b.n	8005514 <readInputs+0x14c>
	}


	//reset TxData_modbus_01 buffer
	memset (TxData_modbus_01, '\0', 256);
 800542e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005432:	2100      	movs	r1, #0
 8005434:	483a      	ldr	r0, [pc, #232]	@ (8005520 <readInputs+0x158>)
 8005436:	f006 ffbb 	bl	800c3b0 <memset>
	// Prepare TxData_modbus_01 buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	TxData_modbus_01[0] = SLAVE_ID;  // slave ID
 800543a:	4b39      	ldr	r3, [pc, #228]	@ (8005520 <readInputs+0x158>)
 800543c:	2207      	movs	r2, #7
 800543e:	701a      	strb	r2, [r3, #0]
	TxData_modbus_01[1] = RxData_modbus_01[1];  // function code
 8005440:	4b36      	ldr	r3, [pc, #216]	@ (800551c <readInputs+0x154>)
 8005442:	785a      	ldrb	r2, [r3, #1]
 8005444:	4b36      	ldr	r3, [pc, #216]	@ (8005520 <readInputs+0x158>)
 8005446:	705a      	strb	r2, [r3, #1]
	TxData_modbus_01[2] = (numCoils/8) + ((numCoils%8)>0 ? 1:0);  // Byte count
 8005448:	893b      	ldrh	r3, [r7, #8]
 800544a:	08db      	lsrs	r3, r3, #3
 800544c:	b29b      	uxth	r3, r3
 800544e:	b2db      	uxtb	r3, r3
 8005450:	893a      	ldrh	r2, [r7, #8]
 8005452:	f002 0207 	and.w	r2, r2, #7
 8005456:	b292      	uxth	r2, r2
 8005458:	2a00      	cmp	r2, #0
 800545a:	bf14      	ite	ne
 800545c:	2201      	movne	r2, #1
 800545e:	2200      	moveq	r2, #0
 8005460:	b2d2      	uxtb	r2, r2
 8005462:	4413      	add	r3, r2
 8005464:	b2da      	uxtb	r2, r3
 8005466:	4b2e      	ldr	r3, [pc, #184]	@ (8005520 <readInputs+0x158>)
 8005468:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData_modbus_01 Buffer
 800546a:	2303      	movs	r3, #3
 800546c:	61fb      	str	r3, [r7, #28]
	 * Then we will keep shifting the database[1] to the right and read the bits.
	 * Once the bitposition has crossed the value 7, we will increment the startbyte
	 * When the indxposition exceeds 7, we increment the indx variable, so to copy into the next byte of the TxData_modbus_01
	 * This keeps going until the number of coils required have been copied
	 */
	int startByte = startAddr/8;  // which byte we have to start extracting the data from
 800546e:	897b      	ldrh	r3, [r7, #10]
 8005470:	08db      	lsrs	r3, r3, #3
 8005472:	b29b      	uxth	r3, r3
 8005474:	61bb      	str	r3, [r7, #24]
	uint16_t bitPosition = startAddr%8;  // The shift position in the first byte
 8005476:	897b      	ldrh	r3, [r7, #10]
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	82fb      	strh	r3, [r7, #22]
	int indxPosition = 0;  // The shift position in the current indx of the TxData_modbus_01 buffer
 800547e:	2300      	movs	r3, #0
 8005480:	613b      	str	r3, [r7, #16]

	// Load the actual data into TxData_modbus_01 buffer
	for (int i=0; i<numCoils; i++)
 8005482:	2300      	movs	r3, #0
 8005484:	60fb      	str	r3, [r7, #12]
 8005486:	e033      	b.n	80054f0 <readInputs+0x128>
	{
		TxData_modbus_01[indx] |= ((Inputs_Database[startByte] >> bitPosition) &0x01) << indxPosition;
 8005488:	4a25      	ldr	r2, [pc, #148]	@ (8005520 <readInputs+0x158>)
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	4413      	add	r3, r2
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	b25a      	sxtb	r2, r3
 8005492:	4924      	ldr	r1, [pc, #144]	@ (8005524 <readInputs+0x15c>)
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	440b      	add	r3, r1
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	4619      	mov	r1, r3
 800549c:	8afb      	ldrh	r3, [r7, #22]
 800549e:	fa41 f303 	asr.w	r3, r1, r3
 80054a2:	f003 0101 	and.w	r1, r3, #1
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	fa01 f303 	lsl.w	r3, r1, r3
 80054ac:	b25b      	sxtb	r3, r3
 80054ae:	4313      	orrs	r3, r2
 80054b0:	b25b      	sxtb	r3, r3
 80054b2:	b2d9      	uxtb	r1, r3
 80054b4:	4a1a      	ldr	r2, [pc, #104]	@ (8005520 <readInputs+0x158>)
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	4413      	add	r3, r2
 80054ba:	460a      	mov	r2, r1
 80054bc:	701a      	strb	r2, [r3, #0]
		indxPosition++; bitPosition++;
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	3301      	adds	r3, #1
 80054c2:	613b      	str	r3, [r7, #16]
 80054c4:	8afb      	ldrh	r3, [r7, #22]
 80054c6:	3301      	adds	r3, #1
 80054c8:	82fb      	strh	r3, [r7, #22]
		if (indxPosition>7)  // if the indxposition exceeds 7, we have to copy the data into the next byte position
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	2b07      	cmp	r3, #7
 80054ce:	dd04      	ble.n	80054da <readInputs+0x112>
		{
			indxPosition = 0;
 80054d0:	2300      	movs	r3, #0
 80054d2:	613b      	str	r3, [r7, #16]
			indx++;
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	3301      	adds	r3, #1
 80054d8:	61fb      	str	r3, [r7, #28]
		}
		if (bitPosition>7)  // if the bitposition exceeds 7, we have to increment the startbyte
 80054da:	8afb      	ldrh	r3, [r7, #22]
 80054dc:	2b07      	cmp	r3, #7
 80054de:	d904      	bls.n	80054ea <readInputs+0x122>
		{
			bitPosition=0;
 80054e0:	2300      	movs	r3, #0
 80054e2:	82fb      	strh	r3, [r7, #22]
			startByte++;
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	3301      	adds	r3, #1
 80054e8:	61bb      	str	r3, [r7, #24]
	for (int i=0; i<numCoils; i++)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	3301      	adds	r3, #1
 80054ee:	60fb      	str	r3, [r7, #12]
 80054f0:	893b      	ldrh	r3, [r7, #8]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	dbc7      	blt.n	8005488 <readInputs+0xc0>
		}
	}

	if (numCoils%8 != 0)indx++;  // increment the indx variable, only if the numcoils is not a multiple of 8
 80054f8:	893b      	ldrh	r3, [r7, #8]
 80054fa:	f003 0307 	and.w	r3, r3, #7
 80054fe:	b29b      	uxth	r3, r3
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <readInputs+0x142>
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	3301      	adds	r3, #1
 8005508:	61fb      	str	r3, [r7, #28]
	sendData(TxData_modbus_01, indx);  // send data... CRC will be calculated in the function itself
 800550a:	69f9      	ldr	r1, [r7, #28]
 800550c:	4804      	ldr	r0, [pc, #16]	@ (8005520 <readInputs+0x158>)
 800550e:	f7ff fd77 	bl	8005000 <sendData>
	return 1;   // success
 8005512:	2301      	movs	r3, #1
}
 8005514:	4618      	mov	r0, r3
 8005516:	3720      	adds	r7, #32
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	20001298 	.word	0x20001298
 8005520:	20001398 	.word	0x20001398
 8005524:	0800d70c 	.word	0x0800d70c

08005528 <writeHoldingRegs>:

uint8_t writeHoldingRegs (void)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData_modbus_01[2]<<8)|RxData_modbus_01[3]);  // start Register Address
 800552e:	4b39      	ldr	r3, [pc, #228]	@ (8005614 <writeHoldingRegs+0xec>)
 8005530:	789b      	ldrb	r3, [r3, #2]
 8005532:	b21b      	sxth	r3, r3
 8005534:	021b      	lsls	r3, r3, #8
 8005536:	b21a      	sxth	r2, r3
 8005538:	4b36      	ldr	r3, [pc, #216]	@ (8005614 <writeHoldingRegs+0xec>)
 800553a:	78db      	ldrb	r3, [r3, #3]
 800553c:	b21b      	sxth	r3, r3
 800553e:	4313      	orrs	r3, r2
 8005540:	b21b      	sxth	r3, r3
 8005542:	81fb      	strh	r3, [r7, #14]

	uint16_t numRegs = ((RxData_modbus_01[4]<<8)|RxData_modbus_01[5]);   // number to registers master has requested
 8005544:	4b33      	ldr	r3, [pc, #204]	@ (8005614 <writeHoldingRegs+0xec>)
 8005546:	791b      	ldrb	r3, [r3, #4]
 8005548:	b21b      	sxth	r3, r3
 800554a:	021b      	lsls	r3, r3, #8
 800554c:	b21a      	sxth	r2, r3
 800554e:	4b31      	ldr	r3, [pc, #196]	@ (8005614 <writeHoldingRegs+0xec>)
 8005550:	795b      	ldrb	r3, [r3, #5]
 8005552:	b21b      	sxth	r3, r3
 8005554:	4313      	orrs	r3, r2
 8005556:	b21b      	sxth	r3, r3
 8005558:	807b      	strh	r3, [r7, #2]
	if ((numRegs<1)||(numRegs>123))  // maximum no. of Registers as per the PDF
 800555a:	887b      	ldrh	r3, [r7, #2]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d002      	beq.n	8005566 <writeHoldingRegs+0x3e>
 8005560:	887b      	ldrh	r3, [r7, #2]
 8005562:	2b7b      	cmp	r3, #123	@ 0x7b
 8005564:	d904      	bls.n	8005570 <writeHoldingRegs+0x48>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8005566:	2003      	movs	r0, #3
 8005568:	f7ff fd76 	bl	8005058 <modbusException>
		return 0;
 800556c:	2300      	movs	r3, #0
 800556e:	e04d      	b.n	800560c <writeHoldingRegs+0xe4>
	}

	uint16_t endAddr = startAddr+numRegs-1;  // end Register
 8005570:	89fa      	ldrh	r2, [r7, #14]
 8005572:	887b      	ldrh	r3, [r7, #2]
 8005574:	4413      	add	r3, r2
 8005576:	b29b      	uxth	r3, r3
 8005578:	3b01      	subs	r3, #1
 800557a:	803b      	strh	r3, [r7, #0]
	if (endAddr>49)  // end Register can not be more than 49 as we only have record of 50 Registers in total
 800557c:	883b      	ldrh	r3, [r7, #0]
 800557e:	2b31      	cmp	r3, #49	@ 0x31
 8005580:	d904      	bls.n	800558c <writeHoldingRegs+0x64>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8005582:	2002      	movs	r0, #2
 8005584:	f7ff fd68 	bl	8005058 <modbusException>
		return 0;
 8005588:	2300      	movs	r3, #0
 800558a:	e03f      	b.n	800560c <writeHoldingRegs+0xe4>

	/* start saving 16 bit data
	 * Data starts from RxData_modbus_01[7] and we need to combine 2 bytes together
	 * 16 bit Data = firstByte<<8|secondByte
	 */
	int indx = 7;  // we need to keep track of index in RxData_modbus_01
 800558c:	2307      	movs	r3, #7
 800558e:	60bb      	str	r3, [r7, #8]
	for (int i=0; i<numRegs; i++)
 8005590:	2300      	movs	r3, #0
 8005592:	607b      	str	r3, [r7, #4]
 8005594:	e01a      	b.n	80055cc <writeHoldingRegs+0xa4>
	{
		Holding_Registers_Database[startAddr++] = (RxData_modbus_01[indx++]<<8)|RxData_modbus_01[indx++];
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	1c5a      	adds	r2, r3, #1
 800559a:	60ba      	str	r2, [r7, #8]
 800559c:	4a1d      	ldr	r2, [pc, #116]	@ (8005614 <writeHoldingRegs+0xec>)
 800559e:	5cd3      	ldrb	r3, [r2, r3]
 80055a0:	b21b      	sxth	r3, r3
 80055a2:	021b      	lsls	r3, r3, #8
 80055a4:	b21a      	sxth	r2, r3
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	1c59      	adds	r1, r3, #1
 80055aa:	60b9      	str	r1, [r7, #8]
 80055ac:	4919      	ldr	r1, [pc, #100]	@ (8005614 <writeHoldingRegs+0xec>)
 80055ae:	5ccb      	ldrb	r3, [r1, r3]
 80055b0:	b21b      	sxth	r3, r3
 80055b2:	4313      	orrs	r3, r2
 80055b4:	b219      	sxth	r1, r3
 80055b6:	89fb      	ldrh	r3, [r7, #14]
 80055b8:	1c5a      	adds	r2, r3, #1
 80055ba:	81fa      	strh	r2, [r7, #14]
 80055bc:	461a      	mov	r2, r3
 80055be:	b289      	uxth	r1, r1
 80055c0:	4b15      	ldr	r3, [pc, #84]	@ (8005618 <writeHoldingRegs+0xf0>)
 80055c2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i=0; i<numRegs; i++)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	3301      	adds	r3, #1
 80055ca:	607b      	str	r3, [r7, #4]
 80055cc:	887b      	ldrh	r3, [r7, #2]
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	dbe0      	blt.n	8005596 <writeHoldingRegs+0x6e>
	// Prepare Response

	//| SLAVE_ID | FUNCTION_CODE | Start Addr | num of Regs    | CRC     |
	//| 1 BYTE   |  1 BYTE       |  2 BYTE    | 2 BYTES      | 2 BYTES |

	TxData_modbus_01[0] = SLAVE_ID;    // slave ID
 80055d4:	4b11      	ldr	r3, [pc, #68]	@ (800561c <writeHoldingRegs+0xf4>)
 80055d6:	2207      	movs	r2, #7
 80055d8:	701a      	strb	r2, [r3, #0]
	TxData_modbus_01[1] = RxData_modbus_01[1];   // function code
 80055da:	4b0e      	ldr	r3, [pc, #56]	@ (8005614 <writeHoldingRegs+0xec>)
 80055dc:	785a      	ldrb	r2, [r3, #1]
 80055de:	4b0f      	ldr	r3, [pc, #60]	@ (800561c <writeHoldingRegs+0xf4>)
 80055e0:	705a      	strb	r2, [r3, #1]
	TxData_modbus_01[2] = RxData_modbus_01[2];   // Start Addr HIGH Byte
 80055e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005614 <writeHoldingRegs+0xec>)
 80055e4:	789a      	ldrb	r2, [r3, #2]
 80055e6:	4b0d      	ldr	r3, [pc, #52]	@ (800561c <writeHoldingRegs+0xf4>)
 80055e8:	709a      	strb	r2, [r3, #2]
	TxData_modbus_01[3] = RxData_modbus_01[3];   // Start Addr LOW Byte
 80055ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005614 <writeHoldingRegs+0xec>)
 80055ec:	78da      	ldrb	r2, [r3, #3]
 80055ee:	4b0b      	ldr	r3, [pc, #44]	@ (800561c <writeHoldingRegs+0xf4>)
 80055f0:	70da      	strb	r2, [r3, #3]
	TxData_modbus_01[4] = RxData_modbus_01[4];   // num of Regs HIGH Byte
 80055f2:	4b08      	ldr	r3, [pc, #32]	@ (8005614 <writeHoldingRegs+0xec>)
 80055f4:	791a      	ldrb	r2, [r3, #4]
 80055f6:	4b09      	ldr	r3, [pc, #36]	@ (800561c <writeHoldingRegs+0xf4>)
 80055f8:	711a      	strb	r2, [r3, #4]
	TxData_modbus_01[5] = RxData_modbus_01[5];   // num of Regs LOW Byte
 80055fa:	4b06      	ldr	r3, [pc, #24]	@ (8005614 <writeHoldingRegs+0xec>)
 80055fc:	795a      	ldrb	r2, [r3, #5]
 80055fe:	4b07      	ldr	r3, [pc, #28]	@ (800561c <writeHoldingRegs+0xf4>)
 8005600:	715a      	strb	r2, [r3, #5]

	sendData(TxData_modbus_01, 6);  // send data... CRC will be calculated in the function itself
 8005602:	2106      	movs	r1, #6
 8005604:	4805      	ldr	r0, [pc, #20]	@ (800561c <writeHoldingRegs+0xf4>)
 8005606:	f7ff fcfb 	bl	8005000 <sendData>
	return 1;   // success
 800560a:	2301      	movs	r3, #1
}
 800560c:	4618      	mov	r0, r3
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	20001298 	.word	0x20001298
 8005618:	20000914 	.word	0x20000914
 800561c:	20001398 	.word	0x20001398

08005620 <writeSingleReg>:

uint8_t writeSingleReg (void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData_modbus_01[2]<<8)|RxData_modbus_01[3]);  // start Register Address
 8005626:	4b21      	ldr	r3, [pc, #132]	@ (80056ac <writeSingleReg+0x8c>)
 8005628:	789b      	ldrb	r3, [r3, #2]
 800562a:	b21b      	sxth	r3, r3
 800562c:	021b      	lsls	r3, r3, #8
 800562e:	b21a      	sxth	r2, r3
 8005630:	4b1e      	ldr	r3, [pc, #120]	@ (80056ac <writeSingleReg+0x8c>)
 8005632:	78db      	ldrb	r3, [r3, #3]
 8005634:	b21b      	sxth	r3, r3
 8005636:	4313      	orrs	r3, r2
 8005638:	b21b      	sxth	r3, r3
 800563a:	80fb      	strh	r3, [r7, #6]

	if (startAddr>49)  // The Register Address can not be more than 49 as we only have record of 50 Registers in total
 800563c:	88fb      	ldrh	r3, [r7, #6]
 800563e:	2b31      	cmp	r3, #49	@ 0x31
 8005640:	d904      	bls.n	800564c <writeSingleReg+0x2c>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8005642:	2002      	movs	r0, #2
 8005644:	f7ff fd08 	bl	8005058 <modbusException>
		return 0;
 8005648:	2300      	movs	r3, #0
 800564a:	e02a      	b.n	80056a2 <writeSingleReg+0x82>

	/* Save the 16 bit data
	 * Data is the combination of 2 bytes, RxData_modbus_01[4] and RxData_modbus_01[5]
	 */

	Holding_Registers_Database[startAddr] = (RxData_modbus_01[4]<<8)|RxData_modbus_01[5];
 800564c:	4b17      	ldr	r3, [pc, #92]	@ (80056ac <writeSingleReg+0x8c>)
 800564e:	791b      	ldrb	r3, [r3, #4]
 8005650:	b21b      	sxth	r3, r3
 8005652:	021b      	lsls	r3, r3, #8
 8005654:	b21a      	sxth	r2, r3
 8005656:	4b15      	ldr	r3, [pc, #84]	@ (80056ac <writeSingleReg+0x8c>)
 8005658:	795b      	ldrb	r3, [r3, #5]
 800565a:	b21b      	sxth	r3, r3
 800565c:	4313      	orrs	r3, r2
 800565e:	b21a      	sxth	r2, r3
 8005660:	88fb      	ldrh	r3, [r7, #6]
 8005662:	b291      	uxth	r1, r2
 8005664:	4a12      	ldr	r2, [pc, #72]	@ (80056b0 <writeSingleReg+0x90>)
 8005666:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	// Prepare Response

	//| SLAVE_ID | FUNCTION_CODE | Start Addr | Data     | CRC     |
	//| 1 BYTE   |  1 BYTE       |  2 BYTE    | 2 BYTES  | 2 BYTES |

	TxData_modbus_01[0] = SLAVE_ID;    // slave ID
 800566a:	4b12      	ldr	r3, [pc, #72]	@ (80056b4 <writeSingleReg+0x94>)
 800566c:	2207      	movs	r2, #7
 800566e:	701a      	strb	r2, [r3, #0]
	TxData_modbus_01[1] = RxData_modbus_01[1];   // function code
 8005670:	4b0e      	ldr	r3, [pc, #56]	@ (80056ac <writeSingleReg+0x8c>)
 8005672:	785a      	ldrb	r2, [r3, #1]
 8005674:	4b0f      	ldr	r3, [pc, #60]	@ (80056b4 <writeSingleReg+0x94>)
 8005676:	705a      	strb	r2, [r3, #1]
	TxData_modbus_01[2] = RxData_modbus_01[2];   // Start Addr HIGH Byte
 8005678:	4b0c      	ldr	r3, [pc, #48]	@ (80056ac <writeSingleReg+0x8c>)
 800567a:	789a      	ldrb	r2, [r3, #2]
 800567c:	4b0d      	ldr	r3, [pc, #52]	@ (80056b4 <writeSingleReg+0x94>)
 800567e:	709a      	strb	r2, [r3, #2]
	TxData_modbus_01[3] = RxData_modbus_01[3];   // Start Addr LOW Byte
 8005680:	4b0a      	ldr	r3, [pc, #40]	@ (80056ac <writeSingleReg+0x8c>)
 8005682:	78da      	ldrb	r2, [r3, #3]
 8005684:	4b0b      	ldr	r3, [pc, #44]	@ (80056b4 <writeSingleReg+0x94>)
 8005686:	70da      	strb	r2, [r3, #3]
	TxData_modbus_01[4] = RxData_modbus_01[4];   // Reg Data HIGH Byte
 8005688:	4b08      	ldr	r3, [pc, #32]	@ (80056ac <writeSingleReg+0x8c>)
 800568a:	791a      	ldrb	r2, [r3, #4]
 800568c:	4b09      	ldr	r3, [pc, #36]	@ (80056b4 <writeSingleReg+0x94>)
 800568e:	711a      	strb	r2, [r3, #4]
	TxData_modbus_01[5] = RxData_modbus_01[5];   // Reg Data LOW  Byte
 8005690:	4b06      	ldr	r3, [pc, #24]	@ (80056ac <writeSingleReg+0x8c>)
 8005692:	795a      	ldrb	r2, [r3, #5]
 8005694:	4b07      	ldr	r3, [pc, #28]	@ (80056b4 <writeSingleReg+0x94>)
 8005696:	715a      	strb	r2, [r3, #5]

	sendData(TxData_modbus_01, 6);  // send data... CRC will be calculated in the function itself
 8005698:	2106      	movs	r1, #6
 800569a:	4806      	ldr	r0, [pc, #24]	@ (80056b4 <writeSingleReg+0x94>)
 800569c:	f7ff fcb0 	bl	8005000 <sendData>
	return 1;   // success
 80056a0:	2301      	movs	r3, #1
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3708      	adds	r7, #8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	20001298 	.word	0x20001298
 80056b0:	20000914 	.word	0x20000914
 80056b4:	20001398 	.word	0x20001398

080056b8 <writeSingleCoil>:

uint8_t writeSingleCoil (void)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData_modbus_01[2]<<8)|RxData_modbus_01[3]);  // start Coil Address
 80056be:	4b39      	ldr	r3, [pc, #228]	@ (80057a4 <writeSingleCoil+0xec>)
 80056c0:	789b      	ldrb	r3, [r3, #2]
 80056c2:	b21b      	sxth	r3, r3
 80056c4:	021b      	lsls	r3, r3, #8
 80056c6:	b21a      	sxth	r2, r3
 80056c8:	4b36      	ldr	r3, [pc, #216]	@ (80057a4 <writeSingleCoil+0xec>)
 80056ca:	78db      	ldrb	r3, [r3, #3]
 80056cc:	b21b      	sxth	r3, r3
 80056ce:	4313      	orrs	r3, r2
 80056d0:	b21b      	sxth	r3, r3
 80056d2:	81fb      	strh	r3, [r7, #14]

	if (startAddr>199)  // The Coil Address can not be more than 199 as we only have record of 200 Coils in total
 80056d4:	89fb      	ldrh	r3, [r7, #14]
 80056d6:	2bc7      	cmp	r3, #199	@ 0xc7
 80056d8:	d904      	bls.n	80056e4 <writeSingleCoil+0x2c>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 80056da:	2002      	movs	r0, #2
 80056dc:	f7ff fcbc 	bl	8005058 <modbusException>
		return 0;
 80056e0:	2300      	movs	r3, #0
 80056e2:	e05a      	b.n	800579a <writeSingleCoil+0xe2>
	}

	/* Calculation for the bit in the database, where the modification will be done */
	int startByte = startAddr/8;  // which byte we have to start writing the data into
 80056e4:	89fb      	ldrh	r3, [r7, #14]
 80056e6:	08db      	lsrs	r3, r3, #3
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	60bb      	str	r3, [r7, #8]
	uint16_t bitPosition = startAddr%8;  // The shift position in the first byte
 80056ec:	89fb      	ldrh	r3, [r7, #14]
 80056ee:	f003 0307 	and.w	r3, r3, #7
 80056f2:	80fb      	strh	r3, [r7, #6]
	 * A value of FF 00 hex requests the coil to be ON.
	 * A value of 00 00 requests it to be OFF.
	 * All other values are illegal and will not affect the coil.
	 */

	if ((RxData_modbus_01[4] == 0xFF) && (RxData_modbus_01[5] == 0x00))
 80056f4:	4b2b      	ldr	r3, [pc, #172]	@ (80057a4 <writeSingleCoil+0xec>)
 80056f6:	791b      	ldrb	r3, [r3, #4]
 80056f8:	2bff      	cmp	r3, #255	@ 0xff
 80056fa:	d116      	bne.n	800572a <writeSingleCoil+0x72>
 80056fc:	4b29      	ldr	r3, [pc, #164]	@ (80057a4 <writeSingleCoil+0xec>)
 80056fe:	795b      	ldrb	r3, [r3, #5]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d112      	bne.n	800572a <writeSingleCoil+0x72>
	{
		Coils_Database[startByte] |= 1<<bitPosition; // Replace that bit with 1
 8005704:	4a28      	ldr	r2, [pc, #160]	@ (80057a8 <writeSingleCoil+0xf0>)
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	4413      	add	r3, r2
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	b25a      	sxtb	r2, r3
 800570e:	88fb      	ldrh	r3, [r7, #6]
 8005710:	2101      	movs	r1, #1
 8005712:	fa01 f303 	lsl.w	r3, r1, r3
 8005716:	b25b      	sxtb	r3, r3
 8005718:	4313      	orrs	r3, r2
 800571a:	b25b      	sxtb	r3, r3
 800571c:	b2d9      	uxtb	r1, r3
 800571e:	4a22      	ldr	r2, [pc, #136]	@ (80057a8 <writeSingleCoil+0xf0>)
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	4413      	add	r3, r2
 8005724:	460a      	mov	r2, r1
 8005726:	701a      	strb	r2, [r3, #0]
 8005728:	e01b      	b.n	8005762 <writeSingleCoil+0xaa>
	}

	else if ((RxData_modbus_01[4] == 0x00) && (RxData_modbus_01[5] == 0x00))
 800572a:	4b1e      	ldr	r3, [pc, #120]	@ (80057a4 <writeSingleCoil+0xec>)
 800572c:	791b      	ldrb	r3, [r3, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d117      	bne.n	8005762 <writeSingleCoil+0xaa>
 8005732:	4b1c      	ldr	r3, [pc, #112]	@ (80057a4 <writeSingleCoil+0xec>)
 8005734:	795b      	ldrb	r3, [r3, #5]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d113      	bne.n	8005762 <writeSingleCoil+0xaa>
	{
		Coils_Database[startByte] &= ~(1<<bitPosition); // Replace that bit with 0
 800573a:	4a1b      	ldr	r2, [pc, #108]	@ (80057a8 <writeSingleCoil+0xf0>)
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	4413      	add	r3, r2
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	b25a      	sxtb	r2, r3
 8005744:	88fb      	ldrh	r3, [r7, #6]
 8005746:	2101      	movs	r1, #1
 8005748:	fa01 f303 	lsl.w	r3, r1, r3
 800574c:	b25b      	sxtb	r3, r3
 800574e:	43db      	mvns	r3, r3
 8005750:	b25b      	sxtb	r3, r3
 8005752:	4013      	ands	r3, r2
 8005754:	b25b      	sxtb	r3, r3
 8005756:	b2d9      	uxtb	r1, r3
 8005758:	4a13      	ldr	r2, [pc, #76]	@ (80057a8 <writeSingleCoil+0xf0>)
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	4413      	add	r3, r2
 800575e:	460a      	mov	r2, r1
 8005760:	701a      	strb	r2, [r3, #0]
	// Prepare Response

	//| SLAVE_ID | FUNCTION_CODE | Start Addr | Data     | CRC     |
	//| 1 BYTE   |  1 BYTE       |  2 BYTE    | 2 BYTES  | 2 BYTES |

	TxData_modbus_01[0] = SLAVE_ID;    // slave ID
 8005762:	4b12      	ldr	r3, [pc, #72]	@ (80057ac <writeSingleCoil+0xf4>)
 8005764:	2207      	movs	r2, #7
 8005766:	701a      	strb	r2, [r3, #0]
	TxData_modbus_01[1] = RxData_modbus_01[1];   // function code
 8005768:	4b0e      	ldr	r3, [pc, #56]	@ (80057a4 <writeSingleCoil+0xec>)
 800576a:	785a      	ldrb	r2, [r3, #1]
 800576c:	4b0f      	ldr	r3, [pc, #60]	@ (80057ac <writeSingleCoil+0xf4>)
 800576e:	705a      	strb	r2, [r3, #1]
	TxData_modbus_01[2] = RxData_modbus_01[2];   // Start Addr HIGH Byte
 8005770:	4b0c      	ldr	r3, [pc, #48]	@ (80057a4 <writeSingleCoil+0xec>)
 8005772:	789a      	ldrb	r2, [r3, #2]
 8005774:	4b0d      	ldr	r3, [pc, #52]	@ (80057ac <writeSingleCoil+0xf4>)
 8005776:	709a      	strb	r2, [r3, #2]
	TxData_modbus_01[3] = RxData_modbus_01[3];   // Start Addr LOW Byte
 8005778:	4b0a      	ldr	r3, [pc, #40]	@ (80057a4 <writeSingleCoil+0xec>)
 800577a:	78da      	ldrb	r2, [r3, #3]
 800577c:	4b0b      	ldr	r3, [pc, #44]	@ (80057ac <writeSingleCoil+0xf4>)
 800577e:	70da      	strb	r2, [r3, #3]
	TxData_modbus_01[4] = RxData_modbus_01[4];   // Coil Data HIGH Byte
 8005780:	4b08      	ldr	r3, [pc, #32]	@ (80057a4 <writeSingleCoil+0xec>)
 8005782:	791a      	ldrb	r2, [r3, #4]
 8005784:	4b09      	ldr	r3, [pc, #36]	@ (80057ac <writeSingleCoil+0xf4>)
 8005786:	711a      	strb	r2, [r3, #4]
	TxData_modbus_01[5] = RxData_modbus_01[5];   // Coil Data LOW  Byte
 8005788:	4b06      	ldr	r3, [pc, #24]	@ (80057a4 <writeSingleCoil+0xec>)
 800578a:	795a      	ldrb	r2, [r3, #5]
 800578c:	4b07      	ldr	r3, [pc, #28]	@ (80057ac <writeSingleCoil+0xf4>)
 800578e:	715a      	strb	r2, [r3, #5]

	sendData(TxData_modbus_01, 6);  // send data... CRC will be calculated in the function itself
 8005790:	2106      	movs	r1, #6
 8005792:	4806      	ldr	r0, [pc, #24]	@ (80057ac <writeSingleCoil+0xf4>)
 8005794:	f7ff fc34 	bl	8005000 <sendData>
	return 1;   // success
 8005798:	2301      	movs	r3, #1
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	20001298 	.word	0x20001298
 80057a8:	20000978 	.word	0x20000978
 80057ac:	20001398 	.word	0x20001398

080057b0 <writeMultiCoils>:

uint8_t writeMultiCoils (void)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b088      	sub	sp, #32
 80057b4:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData_modbus_01[2]<<8)|RxData_modbus_01[3]);  // start Coil Address
 80057b6:	4b57      	ldr	r3, [pc, #348]	@ (8005914 <writeMultiCoils+0x164>)
 80057b8:	789b      	ldrb	r3, [r3, #2]
 80057ba:	b21b      	sxth	r3, r3
 80057bc:	021b      	lsls	r3, r3, #8
 80057be:	b21a      	sxth	r2, r3
 80057c0:	4b54      	ldr	r3, [pc, #336]	@ (8005914 <writeMultiCoils+0x164>)
 80057c2:	78db      	ldrb	r3, [r3, #3]
 80057c4:	b21b      	sxth	r3, r3
 80057c6:	4313      	orrs	r3, r2
 80057c8:	b21b      	sxth	r3, r3
 80057ca:	817b      	strh	r3, [r7, #10]

	uint16_t numCoils = ((RxData_modbus_01[4]<<8)|RxData_modbus_01[5]);   // number to coils master has requested
 80057cc:	4b51      	ldr	r3, [pc, #324]	@ (8005914 <writeMultiCoils+0x164>)
 80057ce:	791b      	ldrb	r3, [r3, #4]
 80057d0:	b21b      	sxth	r3, r3
 80057d2:	021b      	lsls	r3, r3, #8
 80057d4:	b21a      	sxth	r2, r3
 80057d6:	4b4f      	ldr	r3, [pc, #316]	@ (8005914 <writeMultiCoils+0x164>)
 80057d8:	795b      	ldrb	r3, [r3, #5]
 80057da:	b21b      	sxth	r3, r3
 80057dc:	4313      	orrs	r3, r2
 80057de:	b21b      	sxth	r3, r3
 80057e0:	813b      	strh	r3, [r7, #8]
	if ((numCoils<1)||(numCoils>1968))  // maximum no. of coils as per the PDF
 80057e2:	893b      	ldrh	r3, [r7, #8]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d003      	beq.n	80057f0 <writeMultiCoils+0x40>
 80057e8:	893b      	ldrh	r3, [r7, #8]
 80057ea:	f5b3 6ff6 	cmp.w	r3, #1968	@ 0x7b0
 80057ee:	d904      	bls.n	80057fa <writeMultiCoils+0x4a>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 80057f0:	2003      	movs	r0, #3
 80057f2:	f7ff fc31 	bl	8005058 <modbusException>
		return 0;
 80057f6:	2300      	movs	r3, #0
 80057f8:	e088      	b.n	800590c <writeMultiCoils+0x15c>
	}

	uint16_t endAddr = startAddr+numCoils-1;  // Last coils address
 80057fa:	897a      	ldrh	r2, [r7, #10]
 80057fc:	893b      	ldrh	r3, [r7, #8]
 80057fe:	4413      	add	r3, r2
 8005800:	b29b      	uxth	r3, r3
 8005802:	3b01      	subs	r3, #1
 8005804:	80fb      	strh	r3, [r7, #6]
	if (endAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 8005806:	88fb      	ldrh	r3, [r7, #6]
 8005808:	2bc7      	cmp	r3, #199	@ 0xc7
 800580a:	d904      	bls.n	8005816 <writeMultiCoils+0x66>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 800580c:	2002      	movs	r0, #2
 800580e:	f7ff fc23 	bl	8005058 <modbusException>
		return 0;
 8005812:	2300      	movs	r3, #0
 8005814:	e07a      	b.n	800590c <writeMultiCoils+0x15c>
	}

	/* Calculation for the bit in the database, where the modification will be done */
	int startByte = startAddr/8;  // which byte we have to start writing the data into
 8005816:	897b      	ldrh	r3, [r7, #10]
 8005818:	08db      	lsrs	r3, r3, #3
 800581a:	b29b      	uxth	r3, r3
 800581c:	61fb      	str	r3, [r7, #28]
	uint16_t bitPosition = startAddr%8;  // The shift position in the first byte
 800581e:	897b      	ldrh	r3, [r7, #10]
 8005820:	f003 0307 	and.w	r3, r3, #7
 8005824:	837b      	strh	r3, [r7, #26]
	int indxPosition = 0;  // The shift position in the current indx of the RxData_modbus_01 buffer
 8005826:	2300      	movs	r3, #0
 8005828:	617b      	str	r3, [r7, #20]

	int indx = 7;  // we need to keep track of index in RxData_modbus_01
 800582a:	2307      	movs	r3, #7
 800582c:	613b      	str	r3, [r7, #16]
	 * When the indxposition exceeds 7, we increment the indx variable, so to copy from the next byte of the RxData_modbus_01
	 * This keeps going until the number of coils required have been modified
	 */

	// Modify the bits as per the Byte received
	for (int i=0; i<numCoils; i++)
 800582e:	2300      	movs	r3, #0
 8005830:	60fb      	str	r3, [r7, #12]
 8005832:	e04b      	b.n	80058cc <writeMultiCoils+0x11c>
	{
		if (((RxData_modbus_01[indx]>>indxPosition)&0x01) == 1)
 8005834:	4a37      	ldr	r2, [pc, #220]	@ (8005914 <writeMultiCoils+0x164>)
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	4413      	add	r3, r2
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	461a      	mov	r2, r3
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	fa42 f303 	asr.w	r3, r2, r3
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	2b00      	cmp	r3, #0
 800584a:	d012      	beq.n	8005872 <writeMultiCoils+0xc2>
		{
			Coils_Database[startByte] |= 1<<bitPosition;  // replace that bit with 1
 800584c:	4a32      	ldr	r2, [pc, #200]	@ (8005918 <writeMultiCoils+0x168>)
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	4413      	add	r3, r2
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	b25a      	sxtb	r2, r3
 8005856:	8b7b      	ldrh	r3, [r7, #26]
 8005858:	2101      	movs	r1, #1
 800585a:	fa01 f303 	lsl.w	r3, r1, r3
 800585e:	b25b      	sxtb	r3, r3
 8005860:	4313      	orrs	r3, r2
 8005862:	b25b      	sxtb	r3, r3
 8005864:	b2d9      	uxtb	r1, r3
 8005866:	4a2c      	ldr	r2, [pc, #176]	@ (8005918 <writeMultiCoils+0x168>)
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	4413      	add	r3, r2
 800586c:	460a      	mov	r2, r1
 800586e:	701a      	strb	r2, [r3, #0]
 8005870:	e013      	b.n	800589a <writeMultiCoils+0xea>
		}
		else
		{
			Coils_Database[startByte] &= ~(1<<bitPosition);  // replace that bit with 0
 8005872:	4a29      	ldr	r2, [pc, #164]	@ (8005918 <writeMultiCoils+0x168>)
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	4413      	add	r3, r2
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	b25a      	sxtb	r2, r3
 800587c:	8b7b      	ldrh	r3, [r7, #26]
 800587e:	2101      	movs	r1, #1
 8005880:	fa01 f303 	lsl.w	r3, r1, r3
 8005884:	b25b      	sxtb	r3, r3
 8005886:	43db      	mvns	r3, r3
 8005888:	b25b      	sxtb	r3, r3
 800588a:	4013      	ands	r3, r2
 800588c:	b25b      	sxtb	r3, r3
 800588e:	b2d9      	uxtb	r1, r3
 8005890:	4a21      	ldr	r2, [pc, #132]	@ (8005918 <writeMultiCoils+0x168>)
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	4413      	add	r3, r2
 8005896:	460a      	mov	r2, r1
 8005898:	701a      	strb	r2, [r3, #0]
		}

		bitPosition++; indxPosition++;
 800589a:	8b7b      	ldrh	r3, [r7, #26]
 800589c:	3301      	adds	r3, #1
 800589e:	837b      	strh	r3, [r7, #26]
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	3301      	adds	r3, #1
 80058a4:	617b      	str	r3, [r7, #20]

		if (indxPosition>7)  // if the indxposition exceeds 7, we have to copy the data into the next byte position
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	2b07      	cmp	r3, #7
 80058aa:	dd04      	ble.n	80058b6 <writeMultiCoils+0x106>
		{
			indxPosition = 0;
 80058ac:	2300      	movs	r3, #0
 80058ae:	617b      	str	r3, [r7, #20]
			indx++;
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	3301      	adds	r3, #1
 80058b4:	613b      	str	r3, [r7, #16]
		}
		if (bitPosition>7)  // if the bitposition exceeds 7, we have to increment the startbyte
 80058b6:	8b7b      	ldrh	r3, [r7, #26]
 80058b8:	2b07      	cmp	r3, #7
 80058ba:	d904      	bls.n	80058c6 <writeMultiCoils+0x116>
		{
			bitPosition=0;
 80058bc:	2300      	movs	r3, #0
 80058be:	837b      	strh	r3, [r7, #26]
			startByte++;
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	3301      	adds	r3, #1
 80058c4:	61fb      	str	r3, [r7, #28]
	for (int i=0; i<numCoils; i++)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	3301      	adds	r3, #1
 80058ca:	60fb      	str	r3, [r7, #12]
 80058cc:	893b      	ldrh	r3, [r7, #8]
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	dbaf      	blt.n	8005834 <writeMultiCoils+0x84>
	// Prepare Response

	//| SLAVE_ID | FUNCTION_CODE | Start Addr | Data     | CRC     |
	//| 1 BYTE   |  1 BYTE       |  2 BYTE    | 2 BYTES  | 2 BYTES |

	TxData_modbus_01[0] = SLAVE_ID;    // slave ID
 80058d4:	4b11      	ldr	r3, [pc, #68]	@ (800591c <writeMultiCoils+0x16c>)
 80058d6:	2207      	movs	r2, #7
 80058d8:	701a      	strb	r2, [r3, #0]
	TxData_modbus_01[1] = RxData_modbus_01[1];   // function code
 80058da:	4b0e      	ldr	r3, [pc, #56]	@ (8005914 <writeMultiCoils+0x164>)
 80058dc:	785a      	ldrb	r2, [r3, #1]
 80058de:	4b0f      	ldr	r3, [pc, #60]	@ (800591c <writeMultiCoils+0x16c>)
 80058e0:	705a      	strb	r2, [r3, #1]
	TxData_modbus_01[2] = RxData_modbus_01[2];   // Start Addr HIGH Byte
 80058e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005914 <writeMultiCoils+0x164>)
 80058e4:	789a      	ldrb	r2, [r3, #2]
 80058e6:	4b0d      	ldr	r3, [pc, #52]	@ (800591c <writeMultiCoils+0x16c>)
 80058e8:	709a      	strb	r2, [r3, #2]
	TxData_modbus_01[3] = RxData_modbus_01[3];   // Start Addr LOW Byte
 80058ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005914 <writeMultiCoils+0x164>)
 80058ec:	78da      	ldrb	r2, [r3, #3]
 80058ee:	4b0b      	ldr	r3, [pc, #44]	@ (800591c <writeMultiCoils+0x16c>)
 80058f0:	70da      	strb	r2, [r3, #3]
	TxData_modbus_01[4] = RxData_modbus_01[4];   // num of coils HIGH Byte
 80058f2:	4b08      	ldr	r3, [pc, #32]	@ (8005914 <writeMultiCoils+0x164>)
 80058f4:	791a      	ldrb	r2, [r3, #4]
 80058f6:	4b09      	ldr	r3, [pc, #36]	@ (800591c <writeMultiCoils+0x16c>)
 80058f8:	711a      	strb	r2, [r3, #4]
	TxData_modbus_01[5] = RxData_modbus_01[5];   // num of coils LOW  Byte
 80058fa:	4b06      	ldr	r3, [pc, #24]	@ (8005914 <writeMultiCoils+0x164>)
 80058fc:	795a      	ldrb	r2, [r3, #5]
 80058fe:	4b07      	ldr	r3, [pc, #28]	@ (800591c <writeMultiCoils+0x16c>)
 8005900:	715a      	strb	r2, [r3, #5]

	sendData(TxData_modbus_01, 6);  // send data... CRC will be calculated in the function itself
 8005902:	2106      	movs	r1, #6
 8005904:	4805      	ldr	r0, [pc, #20]	@ (800591c <writeMultiCoils+0x16c>)
 8005906:	f7ff fb7b 	bl	8005000 <sendData>
	return 1;   // success
 800590a:	2301      	movs	r3, #1
}
 800590c:	4618      	mov	r0, r3
 800590e:	3720      	adds	r7, #32
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	20001298 	.word	0x20001298
 8005918:	20000978 	.word	0x20000978
 800591c:	20001398 	.word	0x20001398

08005920 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	460b      	mov	r3, r1
 800592a:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 800592c:	23ff      	movs	r3, #255	@ 0xff
 800592e:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8005930:	23ff      	movs	r3, #255	@ 0xff
 8005932:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8005934:	e013      	b.n	800595e <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	1c5a      	adds	r2, r3, #1
 800593a:	607a      	str	r2, [r7, #4]
 800593c:	781a      	ldrb	r2, [r3, #0]
 800593e:	7bbb      	ldrb	r3, [r7, #14]
 8005940:	4053      	eors	r3, r2
 8005942:	b2db      	uxtb	r3, r3
 8005944:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8005946:	4a10      	ldr	r2, [pc, #64]	@ (8005988 <crc16+0x68>)
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	4413      	add	r3, r2
 800594c:	781a      	ldrb	r2, [r3, #0]
 800594e:	7bfb      	ldrb	r3, [r7, #15]
 8005950:	4053      	eors	r3, r2
 8005952:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8005954:	4a0d      	ldr	r2, [pc, #52]	@ (800598c <crc16+0x6c>)
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	4413      	add	r3, r2
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 800595e:	887b      	ldrh	r3, [r7, #2]
 8005960:	1e5a      	subs	r2, r3, #1
 8005962:	807a      	strh	r2, [r7, #2]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1e6      	bne.n	8005936 <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 8005968:	7bfb      	ldrb	r3, [r7, #15]
 800596a:	b21b      	sxth	r3, r3
 800596c:	021b      	lsls	r3, r3, #8
 800596e:	b21a      	sxth	r2, r3
 8005970:	7bbb      	ldrb	r3, [r7, #14]
 8005972:	b21b      	sxth	r3, r3
 8005974:	4313      	orrs	r3, r2
 8005976:	b21b      	sxth	r3, r3
 8005978:	b29b      	uxth	r3, r3
}
 800597a:	4618      	mov	r0, r3
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	0800d728 	.word	0x0800d728
 800598c:	0800d828 	.word	0x0800d828

08005990 <RTC_Init>:
static int BCD2DEC(uint8_t val) {
    return (int)((val / 16 * 10) + (val % 16));
}

void RTC_Init(void)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af04      	add	r7, sp, #16
    uint8_t ctrl;

    // Step 1: Clear oscillator start bit first
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8005996:	f04f 33ff 	mov.w	r3, #4294967295
 800599a:	9302      	str	r3, [sp, #8]
 800599c:	2301      	movs	r3, #1
 800599e:	9301      	str	r3, [sp, #4]
 80059a0:	1dfb      	adds	r3, r7, #7
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	2301      	movs	r3, #1
 80059a6:	2200      	movs	r2, #0
 80059a8:	21df      	movs	r1, #223	@ 0xdf
 80059aa:	4848      	ldr	r0, [pc, #288]	@ (8005acc <RTC_Init+0x13c>)
 80059ac:	f003 f81c 	bl	80089e8 <HAL_I2C_Mem_Read>
    ctrl &= ~MCP7940N_ST;
 80059b0:	79fb      	ldrb	r3, [r7, #7]
 80059b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 80059ba:	f04f 33ff 	mov.w	r3, #4294967295
 80059be:	9302      	str	r3, [sp, #8]
 80059c0:	2301      	movs	r3, #1
 80059c2:	9301      	str	r3, [sp, #4]
 80059c4:	1dfb      	adds	r3, r7, #7
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	2301      	movs	r3, #1
 80059ca:	2200      	movs	r2, #0
 80059cc:	21df      	movs	r1, #223	@ 0xdf
 80059ce:	483f      	ldr	r0, [pc, #252]	@ (8005acc <RTC_Init+0x13c>)
 80059d0:	f002 ff10 	bl	80087f4 <HAL_I2C_Mem_Write>
    HAL_Delay(10);  // Wait for oscillator to stop
 80059d4:	200a      	movs	r0, #10
 80059d6:	f001 fed5 	bl	8007784 <HAL_Delay>

    // Step 2: Enable battery backup
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 80059da:	f04f 33ff 	mov.w	r3, #4294967295
 80059de:	9302      	str	r3, [sp, #8]
 80059e0:	2301      	movs	r3, #1
 80059e2:	9301      	str	r3, [sp, #4]
 80059e4:	1dfb      	adds	r3, r7, #7
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	2301      	movs	r3, #1
 80059ea:	2203      	movs	r2, #3
 80059ec:	21df      	movs	r1, #223	@ 0xdf
 80059ee:	4837      	ldr	r0, [pc, #220]	@ (8005acc <RTC_Init+0x13c>)
 80059f0:	f002 fffa 	bl	80089e8 <HAL_I2C_Mem_Read>
    ctrl |= MCP7940N_VBATEN;
 80059f4:	79fb      	ldrb	r3, [r7, #7]
 80059f6:	f043 0308 	orr.w	r3, r3, #8
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 80059fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005a02:	9302      	str	r3, [sp, #8]
 8005a04:	2301      	movs	r3, #1
 8005a06:	9301      	str	r3, [sp, #4]
 8005a08:	1dfb      	adds	r3, r7, #7
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	2203      	movs	r2, #3
 8005a10:	21df      	movs	r1, #223	@ 0xdf
 8005a12:	482e      	ldr	r0, [pc, #184]	@ (8005acc <RTC_Init+0x13c>)
 8005a14:	f002 feee 	bl	80087f4 <HAL_I2C_Mem_Write>

    // Step 3: Start oscillator
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8005a18:	f04f 33ff 	mov.w	r3, #4294967295
 8005a1c:	9302      	str	r3, [sp, #8]
 8005a1e:	2301      	movs	r3, #1
 8005a20:	9301      	str	r3, [sp, #4]
 8005a22:	1dfb      	adds	r3, r7, #7
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	2301      	movs	r3, #1
 8005a28:	2200      	movs	r2, #0
 8005a2a:	21df      	movs	r1, #223	@ 0xdf
 8005a2c:	4827      	ldr	r0, [pc, #156]	@ (8005acc <RTC_Init+0x13c>)
 8005a2e:	f002 ffdb 	bl	80089e8 <HAL_I2C_Mem_Read>
    ctrl |= MCP7940N_ST;
 8005a32:	79fb      	ldrb	r3, [r7, #7]
 8005a34:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8005a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a40:	9302      	str	r3, [sp, #8]
 8005a42:	2301      	movs	r3, #1
 8005a44:	9301      	str	r3, [sp, #4]
 8005a46:	1dfb      	adds	r3, r7, #7
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	21df      	movs	r1, #223	@ 0xdf
 8005a50:	481e      	ldr	r0, [pc, #120]	@ (8005acc <RTC_Init+0x13c>)
 8005a52:	f002 fecf 	bl	80087f4 <HAL_I2C_Mem_Write>

    // Step 4: Wait for oscillator to start running
    do {
        HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8005a56:	f04f 33ff 	mov.w	r3, #4294967295
 8005a5a:	9302      	str	r3, [sp, #8]
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	9301      	str	r3, [sp, #4]
 8005a60:	1dfb      	adds	r3, r7, #7
 8005a62:	9300      	str	r3, [sp, #0]
 8005a64:	2301      	movs	r3, #1
 8005a66:	2203      	movs	r2, #3
 8005a68:	21df      	movs	r1, #223	@ 0xdf
 8005a6a:	4818      	ldr	r0, [pc, #96]	@ (8005acc <RTC_Init+0x13c>)
 8005a6c:	f002 ffbc 	bl	80089e8 <HAL_I2C_Mem_Read>
    } while(!(ctrl & MCP7940N_OSCON));
 8005a70:	79fb      	ldrb	r3, [r7, #7]
 8005a72:	f003 0320 	and.w	r3, r3, #32
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d0ed      	beq.n	8005a56 <RTC_Init+0xc6>

    // Step 5: Clear power fail flag if set
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8005a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a7e:	9302      	str	r3, [sp, #8]
 8005a80:	2301      	movs	r3, #1
 8005a82:	9301      	str	r3, [sp, #4]
 8005a84:	1dfb      	adds	r3, r7, #7
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	2301      	movs	r3, #1
 8005a8a:	2203      	movs	r2, #3
 8005a8c:	21df      	movs	r1, #223	@ 0xdf
 8005a8e:	480f      	ldr	r0, [pc, #60]	@ (8005acc <RTC_Init+0x13c>)
 8005a90:	f002 ffaa 	bl	80089e8 <HAL_I2C_Mem_Read>
    if(ctrl & MCP7940N_PWRFAIL) {
 8005a94:	79fb      	ldrb	r3, [r7, #7]
 8005a96:	f003 0310 	and.w	r3, r3, #16
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d011      	beq.n	8005ac2 <RTC_Init+0x132>
        ctrl &= ~MCP7940N_PWRFAIL;
 8005a9e:	79fb      	ldrb	r3, [r7, #7]
 8005aa0:	f023 0310 	bic.w	r3, r3, #16
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	71fb      	strb	r3, [r7, #7]
        HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8005aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8005aac:	9302      	str	r3, [sp, #8]
 8005aae:	2301      	movs	r3, #1
 8005ab0:	9301      	str	r3, [sp, #4]
 8005ab2:	1dfb      	adds	r3, r7, #7
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	2203      	movs	r2, #3
 8005aba:	21df      	movs	r1, #223	@ 0xdf
 8005abc:	4803      	ldr	r0, [pc, #12]	@ (8005acc <RTC_Init+0x13c>)
 8005abe:	f002 fe99 	bl	80087f4 <HAL_I2C_Mem_Write>
    }
}
 8005ac2:	bf00      	nop
 8005ac4:	3708      	adds	r7, #8
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	20001850 	.word	0x20001850

08005ad0 <tester_setup>:
extern UART_HandleTypeDef huart1;



void tester_setup(void)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
	if(RxData_modbus_01[0]=7)
 8005ad6:	4b5e      	ldr	r3, [pc, #376]	@ (8005c50 <tester_setup+0x180>)
 8005ad8:	2207      	movs	r2, #7
 8005ada:	701a      	strb	r2, [r3, #0]

	{
		if(RxData_modbus_01[1]=0x3)
 8005adc:	4b5c      	ldr	r3, [pc, #368]	@ (8005c50 <tester_setup+0x180>)
 8005ade:	2203      	movs	r2, #3
 8005ae0:	705a      	strb	r2, [r3, #1]

		{

				uint8_t number_of_cells_and_temps	 = 		RxData_modbus_01[1];
 8005ae2:	4b5b      	ldr	r3, [pc, #364]	@ (8005c50 <tester_setup+0x180>)
 8005ae4:	785b      	ldrb	r3, [r3, #1]
 8005ae6:	73bb      	strb	r3, [r7, #14]
				uint8_t number_of_status			 =  	RxData_modbus_01[2];
 8005ae8:	4b59      	ldr	r3, [pc, #356]	@ (8005c50 <tester_setup+0x180>)
 8005aea:	789b      	ldrb	r3, [r3, #2]
 8005aec:	737b      	strb	r3, [r7, #13]
				uint8_t commnd						 = 		RxData_modbus_01[3];
 8005aee:	4b58      	ldr	r3, [pc, #352]	@ (8005c50 <tester_setup+0x180>)
 8005af0:	78db      	ldrb	r3, [r3, #3]
 8005af2:	733b      	strb	r3, [r7, #12]

				uint8_t id_LED 						 = 		RxData_modbus_01[6];
 8005af4:	4b56      	ldr	r3, [pc, #344]	@ (8005c50 <tester_setup+0x180>)
 8005af6:	799b      	ldrb	r3, [r3, #6]
 8005af8:	72fb      	strb	r3, [r7, #11]
				uint8_t LED_State					 = 		RxData_modbus_01[7];
 8005afa:	4b55      	ldr	r3, [pc, #340]	@ (8005c50 <tester_setup+0x180>)
 8005afc:	79db      	ldrb	r3, [r3, #7]
 8005afe:	72bb      	strb	r3, [r7, #10]
				uint8_t time 						 = 		RxData_modbus_01[8];
 8005b00:	4b53      	ldr	r3, [pc, #332]	@ (8005c50 <tester_setup+0x180>)
 8005b02:	7a1b      	ldrb	r3, [r3, #8]
 8005b04:	727b      	strb	r3, [r7, #9]
				uint8_t temp_set 		    		 = 		RxData_modbus_01[9];
 8005b06:	4b52      	ldr	r3, [pc, #328]	@ (8005c50 <tester_setup+0x180>)
 8005b08:	7a5b      	ldrb	r3, [r3, #9]
 8005b0a:	723b      	strb	r3, [r7, #8]
				uint8_t temp_get					 = 		RxData_modbus_01[10];
 8005b0c:	4b50      	ldr	r3, [pc, #320]	@ (8005c50 <tester_setup+0x180>)
 8005b0e:	7a9b      	ldrb	r3, [r3, #10]
 8005b10:	71fb      	strb	r3, [r7, #7]
				uint8_t iso_spi_reading_cell 		= 		RxData_modbus_01[11];
 8005b12:	4b4f      	ldr	r3, [pc, #316]	@ (8005c50 <tester_setup+0x180>)
 8005b14:	7adb      	ldrb	r3, [r3, #11]
 8005b16:	71bb      	strb	r3, [r7, #6]





					switch (RxData_modbus_01[2])
 8005b18:	4b4d      	ldr	r3, [pc, #308]	@ (8005c50 <tester_setup+0x180>)
 8005b1a:	789b      	ldrb	r3, [r3, #2]
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	2b11      	cmp	r3, #17
 8005b20:	f200 8092 	bhi.w	8005c48 <tester_setup+0x178>
 8005b24:	a201      	add	r2, pc, #4	@ (adr r2, 8005b2c <tester_setup+0x5c>)
 8005b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2a:	bf00      	nop
 8005b2c:	08005b75 	.word	0x08005b75
 8005b30:	08005bf9 	.word	0x08005bf9
 8005b34:	08005c27 	.word	0x08005c27
 8005b38:	08005c31 	.word	0x08005c31
 8005b3c:	08005c47 	.word	0x08005c47
 8005b40:	08005c47 	.word	0x08005c47
 8005b44:	08005c47 	.word	0x08005c47
 8005b48:	08005c47 	.word	0x08005c47
 8005b4c:	08005c47 	.word	0x08005c47
 8005b50:	08005c49 	.word	0x08005c49
 8005b54:	08005c49 	.word	0x08005c49
 8005b58:	08005c49 	.word	0x08005c49
 8005b5c:	08005c49 	.word	0x08005c49
 8005b60:	08005c49 	.word	0x08005c49
 8005b64:	08005c49 	.word	0x08005c49
 8005b68:	08005c47 	.word	0x08005c47
 8005b6c:	08005c47 	.word	0x08005c47
 8005b70:	08005c47 	.word	0x08005c47
					{
						case 0x01:

							uint8_t id 							 = 		RxData_modbus_01[3];
 8005b74:	4b36      	ldr	r3, [pc, #216]	@ (8005c50 <tester_setup+0x180>)
 8005b76:	78db      	ldrb	r3, [r3, #3]
 8005b78:	717b      	strb	r3, [r7, #5]
							uint8_t volt 						 = 		RxData_modbus_01[4];
 8005b7a:	4b35      	ldr	r3, [pc, #212]	@ (8005c50 <tester_setup+0x180>)
 8005b7c:	791b      	ldrb	r3, [r3, #4]
 8005b7e:	73fb      	strb	r3, [r7, #15]

							switch (RxData_modbus_01[4])
 8005b80:	4b33      	ldr	r3, [pc, #204]	@ (8005c50 <tester_setup+0x180>)
 8005b82:	791b      	ldrb	r3, [r3, #4]
 8005b84:	3b01      	subs	r3, #1
 8005b86:	2b07      	cmp	r3, #7
 8005b88:	d82a      	bhi.n	8005be0 <tester_setup+0x110>
 8005b8a:	a201      	add	r2, pc, #4	@ (adr r2, 8005b90 <tester_setup+0xc0>)
 8005b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b90:	08005bb1 	.word	0x08005bb1
 8005b94:	08005bb7 	.word	0x08005bb7
 8005b98:	08005bbd 	.word	0x08005bbd
 8005b9c:	08005bc3 	.word	0x08005bc3
 8005ba0:	08005bc9 	.word	0x08005bc9
 8005ba4:	08005bcf 	.word	0x08005bcf
 8005ba8:	08005bd5 	.word	0x08005bd5
 8005bac:	08005bdb 	.word	0x08005bdb
							{
								case 0x01:
									volt = 2.0;
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	73fb      	strb	r3, [r7, #15]
									break;
 8005bb4:	e014      	b.n	8005be0 <tester_setup+0x110>

								case 0x02:
									volt = 2.5;
 8005bb6:	2302      	movs	r3, #2
 8005bb8:	73fb      	strb	r3, [r7, #15]
									break;
 8005bba:	e011      	b.n	8005be0 <tester_setup+0x110>

								case 0x03:
									volt = 2.8;
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	73fb      	strb	r3, [r7, #15]
									break;
 8005bc0:	e00e      	b.n	8005be0 <tester_setup+0x110>

								case 0x04:
									volt = 3.3;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	73fb      	strb	r3, [r7, #15]
									break;
 8005bc6:	e00b      	b.n	8005be0 <tester_setup+0x110>

								case 0x05:
									volt = 3.4;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	73fb      	strb	r3, [r7, #15]
									break;
 8005bcc:	e008      	b.n	8005be0 <tester_setup+0x110>

								case 0x06:
									volt = 3.6;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	73fb      	strb	r3, [r7, #15]
									break;
 8005bd2:	e005      	b.n	8005be0 <tester_setup+0x110>

								case 0x07:
									volt = 4.0;
 8005bd4:	2304      	movs	r3, #4
 8005bd6:	73fb      	strb	r3, [r7, #15]
									break;
 8005bd8:	e002      	b.n	8005be0 <tester_setup+0x110>

								case 0x08:
									volt = 4.2;
 8005bda:	2304      	movs	r3, #4
 8005bdc:	73fb      	strb	r3, [r7, #15]
									break;
 8005bde:	bf00      	nop
							}

							Set_Output_Voltage(id, volt);
 8005be0:	7bfb      	ldrb	r3, [r7, #15]
 8005be2:	ee07 3a90 	vmov	s15, r3
 8005be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bea:	797b      	ldrb	r3, [r7, #5]
 8005bec:	eeb0 0a67 	vmov.f32	s0, s15
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7fe fa77 	bl	80040e4 <Set_Output_Voltage>
							break;
 8005bf6:	e027      	b.n	8005c48 <tester_setup+0x178>

						case 0x02:
							uint8_t tempCardId = RxData_modbus_01[3];
 8005bf8:	4b15      	ldr	r3, [pc, #84]	@ (8005c50 <tester_setup+0x180>)
 8005bfa:	78db      	ldrb	r3, [r3, #3]
 8005bfc:	713b      	strb	r3, [r7, #4]
							uint8_t res = RxData_modbus_01[4];
 8005bfe:	4b14      	ldr	r3, [pc, #80]	@ (8005c50 <tester_setup+0x180>)
 8005c00:	791b      	ldrb	r3, [r3, #4]
 8005c02:	70fb      	strb	r3, [r7, #3]

							Set_Resistance(tempCardId,res);
 8005c04:	78fa      	ldrb	r2, [r7, #3]
 8005c06:	793b      	ldrb	r3, [r7, #4]
 8005c08:	4611      	mov	r1, r2
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7fb ff78 	bl	8001b00 <Set_Resistance>
							Set_LED_status(id_LED, LED_State);
 8005c10:	7aba      	ldrb	r2, [r7, #10]
 8005c12:	7afb      	ldrb	r3, [r7, #11]
 8005c14:	4611      	mov	r1, r2
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fe fad2 	bl	80041c0 <Set_LED_status>
							HAL_Delay(1000);
 8005c1c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005c20:	f001 fdb0 	bl	8007784 <HAL_Delay>
							break;
 8005c24:	e010      	b.n	8005c48 <tester_setup+0x178>


						case 0x03:
							HAL_Delay(time);
 8005c26:	7a7b      	ldrb	r3, [r7, #9]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f001 fdab 	bl	8007784 <HAL_Delay>
							break;
 8005c2e:	e00b      	b.n	8005c48 <tester_setup+0x178>
						case 0x04:
							Get_INA_Voltage(&cell_configs[id]);
 8005c30:	797a      	ldrb	r2, [r7, #5]
 8005c32:	4613      	mov	r3, r2
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	4413      	add	r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4a06      	ldr	r2, [pc, #24]	@ (8005c54 <tester_setup+0x184>)
 8005c3c:	4413      	add	r3, r2
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 f8c2 	bl	8005dc8 <Get_INA_Voltage>
							break;
 8005c44:	e000      	b.n	8005c48 <tester_setup+0x178>
						case 0x05:
		//                    Get_INA_TEMP(&cell_configs[id]);
							break;
 8005c46:	bf00      	nop
	}

	else
	{}

}
 8005c48:	bf00      	nop
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	20001298 	.word	0x20001298
 8005c54:	0800d928 	.word	0x0800d928

08005c58 <init_ina229_devices>:



void init_ina229_devices(void) {
 8005c58:	b480      	push	{r7}
 8005c5a:	af00      	add	r7, sp, #0
    ina229_devices[0] = INA229_0;
 8005c5c:	4b36      	ldr	r3, [pc, #216]	@ (8005d38 <init_ina229_devices+0xe0>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a36      	ldr	r2, [pc, #216]	@ (8005d3c <init_ina229_devices+0xe4>)
 8005c62:	6013      	str	r3, [r2, #0]
    ina229_devices[1] = INA229_1;
 8005c64:	4b36      	ldr	r3, [pc, #216]	@ (8005d40 <init_ina229_devices+0xe8>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a34      	ldr	r2, [pc, #208]	@ (8005d3c <init_ina229_devices+0xe4>)
 8005c6a:	6053      	str	r3, [r2, #4]
    ina229_devices[2] = INA229_2;
 8005c6c:	4b35      	ldr	r3, [pc, #212]	@ (8005d44 <init_ina229_devices+0xec>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a32      	ldr	r2, [pc, #200]	@ (8005d3c <init_ina229_devices+0xe4>)
 8005c72:	6093      	str	r3, [r2, #8]
    ina229_devices[3] = INA229_3;
 8005c74:	4b34      	ldr	r3, [pc, #208]	@ (8005d48 <init_ina229_devices+0xf0>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a30      	ldr	r2, [pc, #192]	@ (8005d3c <init_ina229_devices+0xe4>)
 8005c7a:	60d3      	str	r3, [r2, #12]
    ina229_devices[4] = INA229_4;
 8005c7c:	4b33      	ldr	r3, [pc, #204]	@ (8005d4c <init_ina229_devices+0xf4>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a2e      	ldr	r2, [pc, #184]	@ (8005d3c <init_ina229_devices+0xe4>)
 8005c82:	6113      	str	r3, [r2, #16]
    ina229_devices[5] = INA229_5;
 8005c84:	4b32      	ldr	r3, [pc, #200]	@ (8005d50 <init_ina229_devices+0xf8>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a2c      	ldr	r2, [pc, #176]	@ (8005d3c <init_ina229_devices+0xe4>)
 8005c8a:	6153      	str	r3, [r2, #20]
    ina229_devices[6] = INA229_6;
 8005c8c:	4b31      	ldr	r3, [pc, #196]	@ (8005d54 <init_ina229_devices+0xfc>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a2a      	ldr	r2, [pc, #168]	@ (8005d3c <init_ina229_devices+0xe4>)
 8005c92:	6193      	str	r3, [r2, #24]
    ina229_devices[7] = INA229_7;
 8005c94:	4b30      	ldr	r3, [pc, #192]	@ (8005d58 <init_ina229_devices+0x100>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a28      	ldr	r2, [pc, #160]	@ (8005d3c <init_ina229_devices+0xe4>)
 8005c9a:	61d3      	str	r3, [r2, #28]
    ina229_devices[8] = INA229_8;
 8005c9c:	4b2f      	ldr	r3, [pc, #188]	@ (8005d5c <init_ina229_devices+0x104>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a26      	ldr	r2, [pc, #152]	@ (8005d3c <init_ina229_devices+0xe4>)
 8005ca2:	6213      	str	r3, [r2, #32]
    ina229_devices[9] = INA229_9;
 8005ca4:	4b2e      	ldr	r3, [pc, #184]	@ (8005d60 <init_ina229_devices+0x108>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a24      	ldr	r2, [pc, #144]	@ (8005d3c <init_ina229_devices+0xe4>)
 8005caa:	6253      	str	r3, [r2, #36]	@ 0x24
    ina229_devices[10] = INA229_10;
 8005cac:	4b2d      	ldr	r3, [pc, #180]	@ (8005d64 <init_ina229_devices+0x10c>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a22      	ldr	r2, [pc, #136]	@ (8005d3c <init_ina229_devices+0xe4>)
 8005cb2:	6293      	str	r3, [r2, #40]	@ 0x28
    ina229_devices[11] = INA229_11;
 8005cb4:	4b2c      	ldr	r3, [pc, #176]	@ (8005d68 <init_ina229_devices+0x110>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a20      	ldr	r2, [pc, #128]	@ (8005d3c <init_ina229_devices+0xe4>)
 8005cba:	62d3      	str	r3, [r2, #44]	@ 0x2c
    ina229_devices[12] = INA229_12;
 8005cbc:	4b2b      	ldr	r3, [pc, #172]	@ (8005d6c <init_ina229_devices+0x114>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a1e      	ldr	r2, [pc, #120]	@ (8005d3c <init_ina229_devices+0xe4>)
 8005cc2:	6313      	str	r3, [r2, #48]	@ 0x30
    ina229_devices[13] = INA229_13;
 8005cc4:	4b2a      	ldr	r3, [pc, #168]	@ (8005d70 <init_ina229_devices+0x118>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a1c      	ldr	r2, [pc, #112]	@ (8005d3c <init_ina229_devices+0xe4>)
 8005cca:	6353      	str	r3, [r2, #52]	@ 0x34
    ina229_devices[14] = INA229_14;
 8005ccc:	4b29      	ldr	r3, [pc, #164]	@ (8005d74 <init_ina229_devices+0x11c>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a1a      	ldr	r2, [pc, #104]	@ (8005d3c <init_ina229_devices+0xe4>)
 8005cd2:	6393      	str	r3, [r2, #56]	@ 0x38
    ina229_devices[15] = INA229_15;
 8005cd4:	4b28      	ldr	r3, [pc, #160]	@ (8005d78 <init_ina229_devices+0x120>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a18      	ldr	r2, [pc, #96]	@ (8005d3c <init_ina229_devices+0xe4>)
 8005cda:	63d3      	str	r3, [r2, #60]	@ 0x3c
    ina229_devices[16] = INA229_16;
 8005cdc:	4b27      	ldr	r3, [pc, #156]	@ (8005d7c <init_ina229_devices+0x124>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a16      	ldr	r2, [pc, #88]	@ (8005d3c <init_ina229_devices+0xe4>)
 8005ce2:	6413      	str	r3, [r2, #64]	@ 0x40
    ina229_devices[17] = INA229_17;
 8005ce4:	4b26      	ldr	r3, [pc, #152]	@ (8005d80 <init_ina229_devices+0x128>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a14      	ldr	r2, [pc, #80]	@ (8005d3c <init_ina229_devices+0xe4>)
 8005cea:	6453      	str	r3, [r2, #68]	@ 0x44
    ina229_devices[18] = INA229_18;
 8005cec:	4b25      	ldr	r3, [pc, #148]	@ (8005d84 <init_ina229_devices+0x12c>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a12      	ldr	r2, [pc, #72]	@ (8005d3c <init_ina229_devices+0xe4>)
 8005cf2:	6493      	str	r3, [r2, #72]	@ 0x48
    ina229_devices[19] = INA229_19;
 8005cf4:	4b24      	ldr	r3, [pc, #144]	@ (8005d88 <init_ina229_devices+0x130>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a10      	ldr	r2, [pc, #64]	@ (8005d3c <init_ina229_devices+0xe4>)
 8005cfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
    ina229_devices[20] = INA229_20;
 8005cfc:	4b23      	ldr	r3, [pc, #140]	@ (8005d8c <init_ina229_devices+0x134>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a0e      	ldr	r2, [pc, #56]	@ (8005d3c <init_ina229_devices+0xe4>)
 8005d02:	6513      	str	r3, [r2, #80]	@ 0x50
    ina229_devices[21] = INA229_21;
 8005d04:	4b22      	ldr	r3, [pc, #136]	@ (8005d90 <init_ina229_devices+0x138>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a0c      	ldr	r2, [pc, #48]	@ (8005d3c <init_ina229_devices+0xe4>)
 8005d0a:	6553      	str	r3, [r2, #84]	@ 0x54
    ina229_devices[22] = INA229_22;
 8005d0c:	4b21      	ldr	r3, [pc, #132]	@ (8005d94 <init_ina229_devices+0x13c>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a0a      	ldr	r2, [pc, #40]	@ (8005d3c <init_ina229_devices+0xe4>)
 8005d12:	6593      	str	r3, [r2, #88]	@ 0x58
    ina229_devices[23] = INA229_23;
 8005d14:	4b20      	ldr	r3, [pc, #128]	@ (8005d98 <init_ina229_devices+0x140>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a08      	ldr	r2, [pc, #32]	@ (8005d3c <init_ina229_devices+0xe4>)
 8005d1a:	65d3      	str	r3, [r2, #92]	@ 0x5c
    ina229_devices[24] = INA229_24;
 8005d1c:	4b1f      	ldr	r3, [pc, #124]	@ (8005d9c <init_ina229_devices+0x144>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a06      	ldr	r2, [pc, #24]	@ (8005d3c <init_ina229_devices+0xe4>)
 8005d22:	6613      	str	r3, [r2, #96]	@ 0x60
    ina229_devices[25] = INA229_25;
 8005d24:	4b1e      	ldr	r3, [pc, #120]	@ (8005da0 <init_ina229_devices+0x148>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a04      	ldr	r2, [pc, #16]	@ (8005d3c <init_ina229_devices+0xe4>)
 8005d2a:	6653      	str	r3, [r2, #100]	@ 0x64
}
 8005d2c:	bf00      	nop
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	0800d240 	.word	0x0800d240
 8005d3c:	20001798 	.word	0x20001798
 8005d40:	0800d244 	.word	0x0800d244
 8005d44:	0800d248 	.word	0x0800d248
 8005d48:	0800d24c 	.word	0x0800d24c
 8005d4c:	0800d250 	.word	0x0800d250
 8005d50:	0800d254 	.word	0x0800d254
 8005d54:	0800d258 	.word	0x0800d258
 8005d58:	0800d25c 	.word	0x0800d25c
 8005d5c:	0800d260 	.word	0x0800d260
 8005d60:	0800d264 	.word	0x0800d264
 8005d64:	0800d268 	.word	0x0800d268
 8005d68:	0800d26c 	.word	0x0800d26c
 8005d6c:	0800d270 	.word	0x0800d270
 8005d70:	0800d274 	.word	0x0800d274
 8005d74:	0800d278 	.word	0x0800d278
 8005d78:	0800d27c 	.word	0x0800d27c
 8005d7c:	0800d280 	.word	0x0800d280
 8005d80:	0800d284 	.word	0x0800d284
 8005d84:	0800d288 	.word	0x0800d288
 8005d88:	0800d28c 	.word	0x0800d28c
 8005d8c:	0800d290 	.word	0x0800d290
 8005d90:	0800d294 	.word	0x0800d294
 8005d94:	0800d298 	.word	0x0800d298
 8005d98:	0800d29c 	.word	0x0800d29c
 8005d9c:	0800d2a0 	.word	0x0800d2a0
 8005da0:	0800d2a4 	.word	0x0800d2a4

08005da4 <get_ina_handle>:

};


// Helper function to get INA handle from index
static INA229_Handle get_ina_handle(uint8_t index) {
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	4603      	mov	r3, r0
 8005dac:	71fb      	strb	r3, [r7, #7]
    return INA229_0 + index;  // Assuming INA handles are sequential
 8005dae:	4b05      	ldr	r3, [pc, #20]	@ (8005dc4 <get_ina_handle+0x20>)
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	79fb      	ldrb	r3, [r7, #7]
 8005db4:	015b      	lsls	r3, r3, #5
 8005db6:	4413      	add	r3, r2
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr
 8005dc4:	0800d240 	.word	0x0800d240

08005dc8 <Get_INA_Voltage>:
    }
}


float Get_INA_Voltage(Cell_Config* cell)
{
 8005dc8:	b590      	push	{r4, r7, lr}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]

    // Get the actual handles from the configuration
    INA229_Handle ina = get_ina_handle(cell->ina_index);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	785b      	ldrb	r3, [r3, #1]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7ff ffe5 	bl	8005da4 <get_ina_handle>
 8005dda:	60f8      	str	r0, [r7, #12]

	Set_LED_status(cell->cell_id, OFF);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	2101      	movs	r1, #1
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7fe f9ec 	bl	80041c0 <Set_LED_status>

    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_RESET);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6858      	ldr	r0, [r3, #4]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	891b      	ldrh	r3, [r3, #8]
 8005df0:	2200      	movs	r2, #0
 8005df2:	4619      	mov	r1, r3
 8005df4:	f002 fb6e 	bl	80084d4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8005df8:	2001      	movs	r0, #1
 8005dfa:	f001 fcc3 	bl	8007784 <HAL_Delay>
    INA229_Readings[cell->ina_index].temperature_C = INA229_getDIETEMP_C(ina);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	785b      	ldrb	r3, [r3, #1]
 8005e02:	461c      	mov	r4, r3
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	f7fe fafd 	bl	8004404 <INA229_getDIETEMP_C>
 8005e0a:	eef0 7a40 	vmov.f32	s15, s0
 8005e0e:	4a12      	ldr	r2, [pc, #72]	@ (8005e58 <Get_INA_Voltage+0x90>)
 8005e10:	0123      	lsls	r3, r4, #4
 8005e12:	4413      	add	r3, r2
 8005e14:	3308      	adds	r3, #8
 8005e16:	edc3 7a00 	vstr	s15, [r3]
    HAL_Delay(1);
 8005e1a:	2001      	movs	r0, #1
 8005e1c:	f001 fcb2 	bl	8007784 <HAL_Delay>
    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_SET);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6858      	ldr	r0, [r3, #4]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	891b      	ldrh	r3, [r3, #8]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	f002 fb52 	bl	80084d4 <HAL_GPIO_WritePin>

	Set_LED_status(cell->cell_id, ON);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	2100      	movs	r1, #0
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7fe f9c2 	bl	80041c0 <Set_LED_status>

	return INA229_Readings[cell->ina_index].voltage_V;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	785b      	ldrb	r3, [r3, #1]
 8005e40:	4a05      	ldr	r2, [pc, #20]	@ (8005e58 <Get_INA_Voltage+0x90>)
 8005e42:	011b      	lsls	r3, r3, #4
 8005e44:	4413      	add	r3, r2
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	ee07 3a90 	vmov	s15, r3
}
 8005e4c:	eeb0 0a67 	vmov.f32	s0, s15
 8005e50:	3714      	adds	r7, #20
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd90      	pop	{r4, r7, pc}
 8005e56:	bf00      	nop
 8005e58:	20000edc 	.word	0x20000edc

08005e5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005e5c:	b590      	push	{r4, r7, lr}
 8005e5e:	b08b      	sub	sp, #44	@ 0x2c
 8005e60:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005e62:	f001 fc1d 	bl	80076a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005e66:	f000 f91b 	bl	80060a0 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005e6a:	f000 fc85 	bl	8006778 <MX_GPIO_Init>
  MX_SPI1_Init();
 8005e6e:	f000 fab1 	bl	80063d4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8005e72:	f000 fae5 	bl	8006440 <MX_SPI2_Init>
  MX_I2C2_Init();
 8005e76:	f000 fa2d 	bl	80062d4 <MX_I2C2_Init>
  MX_I2C3_Init();
 8005e7a:	f000 fa6b 	bl	8006354 <MX_I2C3_Init>
  MX_SPI3_Init();
 8005e7e:	f000 fb15 	bl	80064ac <MX_SPI3_Init>
  MX_SPI4_Init();
 8005e82:	f000 fb49 	bl	8006518 <MX_SPI4_Init>
  MX_CAN1_Init();
 8005e86:	f000 f97b 	bl	8006180 <MX_CAN1_Init>
  MX_CAN2_Init();
 8005e8a:	f000 f9af 	bl	80061ec <MX_CAN2_Init>
  MX_I2C1_Init();
 8005e8e:	f000 f9e1 	bl	8006254 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8005e92:	f000 fbf3 	bl	800667c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8005e96:	f000 fc1b 	bl	80066d0 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8005e9a:	f000 fc43 	bl	8006724 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8005e9e:	f006 f903 	bl	800c0a8 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8005ea2:	f000 fbc1 	bl	8006628 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8005ea6:	f000 fb6d 	bl	8006584 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */



  RTC_Init();
 8005eaa:	f7ff fd71 	bl	8005990 <RTC_Init>
  LED_Init();		/* Reset all LEDs */
 8005eae:	f7fb f887 	bl	8000fc0 <LED_Init>

  init_ina229_devices();
 8005eb2:	f7ff fed1 	bl	8005c58 <init_ina229_devices>

  for (int i = 0; i < NUM_INA229; i++)
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	60fb      	str	r3, [r7, #12]
 8005eba:	e00c      	b.n	8005ed6 <main+0x7a>
  { INA229_config(ina229_devices[i]); HAL_Delay(10); }
 8005ebc:	4a62      	ldr	r2, [pc, #392]	@ (8006048 <main+0x1ec>)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7fe f9e5 	bl	8004294 <INA229_config>
 8005eca:	200a      	movs	r0, #10
 8005ecc:	f001 fc5a 	bl	8007784 <HAL_Delay>
  for (int i = 0; i < NUM_INA229; i++)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	60fb      	str	r3, [r7, #12]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2b19      	cmp	r3, #25
 8005eda:	ddef      	ble.n	8005ebc <main+0x60>



  mcu_spiInit(0);
 8005edc:	2000      	movs	r0, #0
 8005ede:	f7fe fadd 	bl	800449c <mcu_spiInit>
  HAL_Delay(10);
 8005ee2:	200a      	movs	r0, #10
 8005ee4:	f001 fc4e 	bl	8007784 <HAL_Delay>

  //init ltc ics

  //--------------------------------------------------------------//

	LTC6811_init_cfg(TOTAL_IC, BMS_IC);
 8005ee8:	4958      	ldr	r1, [pc, #352]	@ (800604c <main+0x1f0>)
 8005eea:	2002      	movs	r0, #2
 8005eec:	f7fe fb8b 	bl	8004606 <LTC6811_init_cfg>
	uint8_t main_current_ic;
	for (main_current_ic = 0; main_current_ic < TOTAL_IC; main_current_ic++) {
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	72fb      	strb	r3, [r7, #11]
 8005ef4:	e018      	b.n	8005f28 <main+0xcc>
		LTC6811_set_cfgr(main_current_ic, BMS_IC, REF_ON, ADCOPT, GPIOBITS_A,
 8005ef6:	4b56      	ldr	r3, [pc, #344]	@ (8006050 <main+0x1f4>)
 8005ef8:	7819      	ldrb	r1, [r3, #0]
 8005efa:	4b56      	ldr	r3, [pc, #344]	@ (8006054 <main+0x1f8>)
 8005efc:	781c      	ldrb	r4, [r3, #0]
 8005efe:	4b56      	ldr	r3, [pc, #344]	@ (8006058 <main+0x1fc>)
 8005f00:	881b      	ldrh	r3, [r3, #0]
 8005f02:	4a56      	ldr	r2, [pc, #344]	@ (800605c <main+0x200>)
 8005f04:	8812      	ldrh	r2, [r2, #0]
 8005f06:	7af8      	ldrb	r0, [r7, #11]
 8005f08:	9204      	str	r2, [sp, #16]
 8005f0a:	9303      	str	r3, [sp, #12]
 8005f0c:	4b54      	ldr	r3, [pc, #336]	@ (8006060 <main+0x204>)
 8005f0e:	9302      	str	r3, [sp, #8]
 8005f10:	4b54      	ldr	r3, [pc, #336]	@ (8006064 <main+0x208>)
 8005f12:	9301      	str	r3, [sp, #4]
 8005f14:	4b54      	ldr	r3, [pc, #336]	@ (8006068 <main+0x20c>)
 8005f16:	9300      	str	r3, [sp, #0]
 8005f18:	4623      	mov	r3, r4
 8005f1a:	460a      	mov	r2, r1
 8005f1c:	494b      	ldr	r1, [pc, #300]	@ (800604c <main+0x1f0>)
 8005f1e:	f7fe fb81 	bl	8004624 <LTC6811_set_cfgr>
	for (main_current_ic = 0; main_current_ic < TOTAL_IC; main_current_ic++) {
 8005f22:	7afb      	ldrb	r3, [r7, #11]
 8005f24:	3301      	adds	r3, #1
 8005f26:	72fb      	strb	r3, [r7, #11]
 8005f28:	7afb      	ldrb	r3, [r7, #11]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d9e3      	bls.n	8005ef6 <main+0x9a>
				DCCBITS_A, DCTOBITS, UV, OV);
	}
	LTC6811_wrcfg(TOTAL_IC, BMS_IC);
 8005f2e:	4947      	ldr	r1, [pc, #284]	@ (800604c <main+0x1f0>)
 8005f30:	2002      	movs	r0, #2
 8005f32:	f7fe fb4a 	bl	80045ca <LTC6811_wrcfg>
	LTC6811_reset_crc_count(TOTAL_IC, BMS_IC);
 8005f36:	4945      	ldr	r1, [pc, #276]	@ (800604c <main+0x1f0>)
 8005f38:	2002      	movs	r0, #2
 8005f3a:	f7fe fb55 	bl	80045e8 <LTC6811_reset_crc_count>
	LTC6811_init_reg_limits(TOTAL_IC, BMS_IC);
 8005f3e:	4943      	ldr	r1, [pc, #268]	@ (800604c <main+0x1f0>)
 8005f40:	2002      	movs	r0, #2
 8005f42:	f7fe fae9 	bl	8004518 <LTC6811_init_reg_limits>

  //--------------------------------------------------------------//

  /* Initialize the display module */
  Display_Init();
 8005f46:	f7fb fec5 	bl	8001cd4 <Display_Init>

  /* Display the main title page */
  Display_MainTitlePage();
 8005f4a:	f7fb feeb 	bl	8001d24 <Display_MainTitlePage>

  /* Initialize the expander at address 0x20 by configuring all its pins as outputs */
  Expander_InitAllDevices(&hi2c2);
 8005f4e:	4847      	ldr	r0, [pc, #284]	@ (800606c <main+0x210>)
 8005f50:	f7fd fea0 	bl	8003c94 <Expander_InitAllDevices>
  Expander_InitAllDevices(&hi2c3);
 8005f54:	4846      	ldr	r0, [pc, #280]	@ (8006070 <main+0x214>)
 8005f56:	f7fd fe9d 	bl	8003c94 <Expander_InitAllDevices>

	HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData_modbus_01, 256);
 8005f5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f5e:	4945      	ldr	r1, [pc, #276]	@ (8006074 <main+0x218>)
 8005f60:	4845      	ldr	r0, [pc, #276]	@ (8006078 <main+0x21c>)
 8005f62:	f005 f8f0 	bl	800b146 <HAL_UARTEx_ReceiveToIdle_IT>

	HAL_UARTEx_ReceiveToIdle_IT(&huart2, RxData_modbus_02, 256);
 8005f66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f6a:	4944      	ldr	r1, [pc, #272]	@ (800607c <main+0x220>)
 8005f6c:	4844      	ldr	r0, [pc, #272]	@ (8006080 <main+0x224>)
 8005f6e:	f005 f8ea 	bl	800b146 <HAL_UARTEx_ReceiveToIdle_IT>

	HAL_UARTEx_ReceiveToIdle_IT(&huart3, RxData_modbus_03, 256);
 8005f72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f76:	4943      	ldr	r1, [pc, #268]	@ (8006084 <main+0x228>)
 8005f78:	4843      	ldr	r0, [pc, #268]	@ (8006088 <main+0x22c>)
 8005f7a:	f005 f8e4 	bl	800b146 <HAL_UARTEx_ReceiveToIdle_IT>

	HAL_UARTEx_ReceiveToIdle_IT(&huart6, RxData_modbus_04, 256);
 8005f7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f82:	4942      	ldr	r1, [pc, #264]	@ (800608c <main+0x230>)
 8005f84:	4842      	ldr	r0, [pc, #264]	@ (8006090 <main+0x234>)
 8005f86:	f005 f8de 	bl	800b146 <HAL_UARTEx_ReceiveToIdle_IT>

	HAL_TIM_Base_Start_IT(&htim1);
 8005f8a:	4842      	ldr	r0, [pc, #264]	@ (8006094 <main+0x238>)
 8005f8c:	f004 fcd8 	bl	800a940 <HAL_TIM_Base_Start_IT>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (modebus_rx_flag  )
 8005f90:	4b41      	ldr	r3, [pc, #260]	@ (8006098 <main+0x23c>)
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00b      	beq.n	8005fb0 <main+0x154>
	  {
//		  memset(Rx_Data, 0, sizeof(Rx_Data));

//		  sprintf(Tx_Data, "F103 %d", indx++);
//		    send_Data (Tx_Data);
		    HAL_Delay(500);
 8005f98:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005f9c:	f001 fbf2 	bl	8007784 <HAL_Delay>
	        tester_setup();
 8005fa0:	f7ff fd96 	bl	8005ad0 <tester_setup>
		  modebus_rx_flag = 0 ;
 8005fa4:	4b3c      	ldr	r3, [pc, #240]	@ (8006098 <main+0x23c>)
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	701a      	strb	r2, [r3, #0]

		  HAL_TIM_Base_Stop_IT(&htim1);
 8005faa:	483a      	ldr	r0, [pc, #232]	@ (8006094 <main+0x238>)
 8005fac:	f004 fd38 	bl	800aa20 <HAL_TIM_Base_Stop_IT>

	  }



		  cell12_Temp_01_Set(resistance[0]);
 8005fb0:	4b3a      	ldr	r3, [pc, #232]	@ (800609c <main+0x240>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	ee07 3a90 	vmov	s15, r3
 8005fb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fbc:	eeb0 0a67 	vmov.f32	s0, s15
 8005fc0:	f7fb f932 	bl	8001228 <cell12_Temp_01_Set>
		  cell12_Temp_02_Set(resistance[1]);
 8005fc4:	4b35      	ldr	r3, [pc, #212]	@ (800609c <main+0x240>)
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	ee07 3a90 	vmov	s15, r3
 8005fcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fd0:	eeb0 0a67 	vmov.f32	s0, s15
 8005fd4:	f7fb f9de 	bl	8001394 <cell12_Temp_02_Set>
		  cell12_Temp_03_Set(resistance[2]);
 8005fd8:	4b30      	ldr	r3, [pc, #192]	@ (800609c <main+0x240>)
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	ee07 3a90 	vmov	s15, r3
 8005fe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fe4:	eeb0 0a67 	vmov.f32	s0, s15
 8005fe8:	f7fb fa94 	bl	8001514 <cell12_Temp_03_Set>
		  cell11_Temp_01_Set(resistance[3]);
 8005fec:	4b2b      	ldr	r3, [pc, #172]	@ (800609c <main+0x240>)
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	ee07 3a90 	vmov	s15, r3
 8005ff4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ff8:	eeb0 0a67 	vmov.f32	s0, s15
 8005ffc:	f7fb fb40 	bl	8001680 <cell11_Temp_01_Set>
		  cell11_Temp_02_Set(resistance[4]);
 8006000:	4b26      	ldr	r3, [pc, #152]	@ (800609c <main+0x240>)
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	ee07 3a90 	vmov	s15, r3
 8006008:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800600c:	eeb0 0a67 	vmov.f32	s0, s15
 8006010:	f7fb fbf6 	bl	8001800 <cell11_Temp_02_Set>
		  cell11_Temp_03_Set(resistance[4]);
 8006014:	4b21      	ldr	r3, [pc, #132]	@ (800609c <main+0x240>)
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	ee07 3a90 	vmov	s15, r3
 800601c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006020:	eeb0 0a67 	vmov.f32	s0, s15
 8006024:	f7fb fcac 	bl	8001980 <cell11_Temp_03_Set>




	        // Process battery tests
	        for (int cell = CELL_1; cell <= CELL_24; cell++) {
 8006028:	2300      	movs	r3, #0
 800602a:	607b      	str	r3, [r7, #4]
 800602c:	e008      	b.n	8006040 <main+0x1e4>
	        	Set_LED_status(cell, ON);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2100      	movs	r1, #0
 8006034:	4618      	mov	r0, r3
 8006036:	f7fe f8c3 	bl	80041c0 <Set_LED_status>
	        for (int cell = CELL_1; cell <= CELL_24; cell++) {
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	3301      	adds	r3, #1
 800603e:	607b      	str	r3, [r7, #4]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b17      	cmp	r3, #23
 8006044:	ddf3      	ble.n	800602e <main+0x1d2>
	  if (modebus_rx_flag  )
 8006046:	e7a3      	b.n	8005f90 <main+0x134>
 8006048:	20001798 	.word	0x20001798
 800604c:	2000107c 	.word	0x2000107c
 8006050:	20000900 	.word	0x20000900
 8006054:	20001284 	.word	0x20001284
 8006058:	2000090a 	.word	0x2000090a
 800605c:	2000090c 	.word	0x2000090c
 8006060:	20000910 	.word	0x20000910
 8006064:	20001288 	.word	0x20001288
 8006068:	20000904 	.word	0x20000904
 800606c:	200018a4 	.word	0x200018a4
 8006070:	200018f8 	.word	0x200018f8
 8006074:	20001298 	.word	0x20001298
 8006078:	20001af4 	.word	0x20001af4
 800607c:	20001498 	.word	0x20001498
 8006080:	20001b3c 	.word	0x20001b3c
 8006084:	20001598 	.word	0x20001598
 8006088:	20001b84 	.word	0x20001b84
 800608c:	20001698 	.word	0x20001698
 8006090:	20001bcc 	.word	0x20001bcc
 8006094:	20001aac 	.word	0x20001aac
 8006098:	20001294 	.word	0x20001294
 800609c:	200008e8 	.word	0x200008e8

080060a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b094      	sub	sp, #80	@ 0x50
 80060a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80060a6:	f107 0320 	add.w	r3, r7, #32
 80060aa:	2230      	movs	r2, #48	@ 0x30
 80060ac:	2100      	movs	r1, #0
 80060ae:	4618      	mov	r0, r3
 80060b0:	f006 f97e 	bl	800c3b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80060b4:	f107 030c 	add.w	r3, r7, #12
 80060b8:	2200      	movs	r2, #0
 80060ba:	601a      	str	r2, [r3, #0]
 80060bc:	605a      	str	r2, [r3, #4]
 80060be:	609a      	str	r2, [r3, #8]
 80060c0:	60da      	str	r2, [r3, #12]
 80060c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80060c4:	2300      	movs	r3, #0
 80060c6:	60bb      	str	r3, [r7, #8]
 80060c8:	4b2b      	ldr	r3, [pc, #172]	@ (8006178 <SystemClock_Config+0xd8>)
 80060ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060cc:	4a2a      	ldr	r2, [pc, #168]	@ (8006178 <SystemClock_Config+0xd8>)
 80060ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80060d4:	4b28      	ldr	r3, [pc, #160]	@ (8006178 <SystemClock_Config+0xd8>)
 80060d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060dc:	60bb      	str	r3, [r7, #8]
 80060de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80060e0:	2300      	movs	r3, #0
 80060e2:	607b      	str	r3, [r7, #4]
 80060e4:	4b25      	ldr	r3, [pc, #148]	@ (800617c <SystemClock_Config+0xdc>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a24      	ldr	r2, [pc, #144]	@ (800617c <SystemClock_Config+0xdc>)
 80060ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80060ee:	6013      	str	r3, [r2, #0]
 80060f0:	4b22      	ldr	r3, [pc, #136]	@ (800617c <SystemClock_Config+0xdc>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80060f8:	607b      	str	r3, [r7, #4]
 80060fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80060fc:	2302      	movs	r3, #2
 80060fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006100:	2301      	movs	r3, #1
 8006102:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006104:	2310      	movs	r3, #16
 8006106:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006108:	2302      	movs	r3, #2
 800610a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800610c:	2300      	movs	r3, #0
 800610e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006110:	2308      	movs	r3, #8
 8006112:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8006114:	23b4      	movs	r3, #180	@ 0xb4
 8006116:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006118:	2302      	movs	r3, #2
 800611a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800611c:	2305      	movs	r3, #5
 800611e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006120:	f107 0320 	add.w	r3, r7, #32
 8006124:	4618      	mov	r0, r3
 8006126:	f003 fb11 	bl	800974c <HAL_RCC_OscConfig>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d001      	beq.n	8006134 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8006130:	f000 fe0a 	bl	8006d48 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8006134:	f003 faba 	bl	80096ac <HAL_PWREx_EnableOverDrive>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d001      	beq.n	8006142 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800613e:	f000 fe03 	bl	8006d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006142:	230f      	movs	r3, #15
 8006144:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006146:	2302      	movs	r3, #2
 8006148:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800614a:	2300      	movs	r3, #0
 800614c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800614e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8006152:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006154:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006158:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800615a:	f107 030c 	add.w	r3, r7, #12
 800615e:	2105      	movs	r1, #5
 8006160:	4618      	mov	r0, r3
 8006162:	f003 fd6b 	bl	8009c3c <HAL_RCC_ClockConfig>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d001      	beq.n	8006170 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800616c:	f000 fdec 	bl	8006d48 <Error_Handler>
  }
}
 8006170:	bf00      	nop
 8006172:	3750      	adds	r7, #80	@ 0x50
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	40023800 	.word	0x40023800
 800617c:	40007000 	.word	0x40007000

08006180 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8006184:	4b17      	ldr	r3, [pc, #92]	@ (80061e4 <MX_CAN1_Init+0x64>)
 8006186:	4a18      	ldr	r2, [pc, #96]	@ (80061e8 <MX_CAN1_Init+0x68>)
 8006188:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 800618a:	4b16      	ldr	r3, [pc, #88]	@ (80061e4 <MX_CAN1_Init+0x64>)
 800618c:	220a      	movs	r2, #10
 800618e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8006190:	4b14      	ldr	r3, [pc, #80]	@ (80061e4 <MX_CAN1_Init+0x64>)
 8006192:	2200      	movs	r2, #0
 8006194:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8006196:	4b13      	ldr	r3, [pc, #76]	@ (80061e4 <MX_CAN1_Init+0x64>)
 8006198:	2200      	movs	r2, #0
 800619a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800619c:	4b11      	ldr	r3, [pc, #68]	@ (80061e4 <MX_CAN1_Init+0x64>)
 800619e:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 80061a2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80061a4:	4b0f      	ldr	r3, [pc, #60]	@ (80061e4 <MX_CAN1_Init+0x64>)
 80061a6:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 80061aa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80061ac:	4b0d      	ldr	r3, [pc, #52]	@ (80061e4 <MX_CAN1_Init+0x64>)
 80061ae:	2200      	movs	r2, #0
 80061b0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80061b2:	4b0c      	ldr	r3, [pc, #48]	@ (80061e4 <MX_CAN1_Init+0x64>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80061b8:	4b0a      	ldr	r3, [pc, #40]	@ (80061e4 <MX_CAN1_Init+0x64>)
 80061ba:	2200      	movs	r2, #0
 80061bc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80061be:	4b09      	ldr	r3, [pc, #36]	@ (80061e4 <MX_CAN1_Init+0x64>)
 80061c0:	2200      	movs	r2, #0
 80061c2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80061c4:	4b07      	ldr	r3, [pc, #28]	@ (80061e4 <MX_CAN1_Init+0x64>)
 80061c6:	2200      	movs	r2, #0
 80061c8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80061ca:	4b06      	ldr	r3, [pc, #24]	@ (80061e4 <MX_CAN1_Init+0x64>)
 80061cc:	2200      	movs	r2, #0
 80061ce:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80061d0:	4804      	ldr	r0, [pc, #16]	@ (80061e4 <MX_CAN1_Init+0x64>)
 80061d2:	f001 fafb 	bl	80077cc <HAL_CAN_Init>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d001      	beq.n	80061e0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80061dc:	f000 fdb4 	bl	8006d48 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80061e0:	bf00      	nop
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	20001800 	.word	0x20001800
 80061e8:	40006400 	.word	0x40006400

080061ec <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80061f0:	4b16      	ldr	r3, [pc, #88]	@ (800624c <MX_CAN2_Init+0x60>)
 80061f2:	4a17      	ldr	r2, [pc, #92]	@ (8006250 <MX_CAN2_Init+0x64>)
 80061f4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 80061f6:	4b15      	ldr	r3, [pc, #84]	@ (800624c <MX_CAN2_Init+0x60>)
 80061f8:	2210      	movs	r2, #16
 80061fa:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80061fc:	4b13      	ldr	r3, [pc, #76]	@ (800624c <MX_CAN2_Init+0x60>)
 80061fe:	2200      	movs	r2, #0
 8006200:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8006202:	4b12      	ldr	r3, [pc, #72]	@ (800624c <MX_CAN2_Init+0x60>)
 8006204:	2200      	movs	r2, #0
 8006206:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8006208:	4b10      	ldr	r3, [pc, #64]	@ (800624c <MX_CAN2_Init+0x60>)
 800620a:	2200      	movs	r2, #0
 800620c:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 800620e:	4b0f      	ldr	r3, [pc, #60]	@ (800624c <MX_CAN2_Init+0x60>)
 8006210:	2200      	movs	r2, #0
 8006212:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8006214:	4b0d      	ldr	r3, [pc, #52]	@ (800624c <MX_CAN2_Init+0x60>)
 8006216:	2200      	movs	r2, #0
 8006218:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800621a:	4b0c      	ldr	r3, [pc, #48]	@ (800624c <MX_CAN2_Init+0x60>)
 800621c:	2200      	movs	r2, #0
 800621e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8006220:	4b0a      	ldr	r3, [pc, #40]	@ (800624c <MX_CAN2_Init+0x60>)
 8006222:	2200      	movs	r2, #0
 8006224:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8006226:	4b09      	ldr	r3, [pc, #36]	@ (800624c <MX_CAN2_Init+0x60>)
 8006228:	2200      	movs	r2, #0
 800622a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800622c:	4b07      	ldr	r3, [pc, #28]	@ (800624c <MX_CAN2_Init+0x60>)
 800622e:	2200      	movs	r2, #0
 8006230:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8006232:	4b06      	ldr	r3, [pc, #24]	@ (800624c <MX_CAN2_Init+0x60>)
 8006234:	2200      	movs	r2, #0
 8006236:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8006238:	4804      	ldr	r0, [pc, #16]	@ (800624c <MX_CAN2_Init+0x60>)
 800623a:	f001 fac7 	bl	80077cc <HAL_CAN_Init>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d001      	beq.n	8006248 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8006244:	f000 fd80 	bl	8006d48 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8006248:	bf00      	nop
 800624a:	bd80      	pop	{r7, pc}
 800624c:	20001828 	.word	0x20001828
 8006250:	40006800 	.word	0x40006800

08006254 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006258:	4b1b      	ldr	r3, [pc, #108]	@ (80062c8 <MX_I2C1_Init+0x74>)
 800625a:	4a1c      	ldr	r2, [pc, #112]	@ (80062cc <MX_I2C1_Init+0x78>)
 800625c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800625e:	4b1a      	ldr	r3, [pc, #104]	@ (80062c8 <MX_I2C1_Init+0x74>)
 8006260:	4a1b      	ldr	r2, [pc, #108]	@ (80062d0 <MX_I2C1_Init+0x7c>)
 8006262:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006264:	4b18      	ldr	r3, [pc, #96]	@ (80062c8 <MX_I2C1_Init+0x74>)
 8006266:	2200      	movs	r2, #0
 8006268:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800626a:	4b17      	ldr	r3, [pc, #92]	@ (80062c8 <MX_I2C1_Init+0x74>)
 800626c:	2200      	movs	r2, #0
 800626e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006270:	4b15      	ldr	r3, [pc, #84]	@ (80062c8 <MX_I2C1_Init+0x74>)
 8006272:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006276:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006278:	4b13      	ldr	r3, [pc, #76]	@ (80062c8 <MX_I2C1_Init+0x74>)
 800627a:	2200      	movs	r2, #0
 800627c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800627e:	4b12      	ldr	r3, [pc, #72]	@ (80062c8 <MX_I2C1_Init+0x74>)
 8006280:	2200      	movs	r2, #0
 8006282:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006284:	4b10      	ldr	r3, [pc, #64]	@ (80062c8 <MX_I2C1_Init+0x74>)
 8006286:	2200      	movs	r2, #0
 8006288:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800628a:	4b0f      	ldr	r3, [pc, #60]	@ (80062c8 <MX_I2C1_Init+0x74>)
 800628c:	2200      	movs	r2, #0
 800628e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006290:	480d      	ldr	r0, [pc, #52]	@ (80062c8 <MX_I2C1_Init+0x74>)
 8006292:	f002 f96b 	bl	800856c <HAL_I2C_Init>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d001      	beq.n	80062a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800629c:	f000 fd54 	bl	8006d48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80062a0:	2100      	movs	r1, #0
 80062a2:	4809      	ldr	r0, [pc, #36]	@ (80062c8 <MX_I2C1_Init+0x74>)
 80062a4:	f003 f986 	bl	80095b4 <HAL_I2CEx_ConfigAnalogFilter>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d001      	beq.n	80062b2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80062ae:	f000 fd4b 	bl	8006d48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80062b2:	2100      	movs	r1, #0
 80062b4:	4804      	ldr	r0, [pc, #16]	@ (80062c8 <MX_I2C1_Init+0x74>)
 80062b6:	f003 f9b9 	bl	800962c <HAL_I2CEx_ConfigDigitalFilter>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d001      	beq.n	80062c4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80062c0:	f000 fd42 	bl	8006d48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80062c4:	bf00      	nop
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	20001850 	.word	0x20001850
 80062cc:	40005400 	.word	0x40005400
 80062d0:	000186a0 	.word	0x000186a0

080062d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80062d8:	4b1b      	ldr	r3, [pc, #108]	@ (8006348 <MX_I2C2_Init+0x74>)
 80062da:	4a1c      	ldr	r2, [pc, #112]	@ (800634c <MX_I2C2_Init+0x78>)
 80062dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80062de:	4b1a      	ldr	r3, [pc, #104]	@ (8006348 <MX_I2C2_Init+0x74>)
 80062e0:	4a1b      	ldr	r2, [pc, #108]	@ (8006350 <MX_I2C2_Init+0x7c>)
 80062e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80062e4:	4b18      	ldr	r3, [pc, #96]	@ (8006348 <MX_I2C2_Init+0x74>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80062ea:	4b17      	ldr	r3, [pc, #92]	@ (8006348 <MX_I2C2_Init+0x74>)
 80062ec:	2200      	movs	r2, #0
 80062ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80062f0:	4b15      	ldr	r3, [pc, #84]	@ (8006348 <MX_I2C2_Init+0x74>)
 80062f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80062f6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80062f8:	4b13      	ldr	r3, [pc, #76]	@ (8006348 <MX_I2C2_Init+0x74>)
 80062fa:	2200      	movs	r2, #0
 80062fc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80062fe:	4b12      	ldr	r3, [pc, #72]	@ (8006348 <MX_I2C2_Init+0x74>)
 8006300:	2200      	movs	r2, #0
 8006302:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006304:	4b10      	ldr	r3, [pc, #64]	@ (8006348 <MX_I2C2_Init+0x74>)
 8006306:	2200      	movs	r2, #0
 8006308:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800630a:	4b0f      	ldr	r3, [pc, #60]	@ (8006348 <MX_I2C2_Init+0x74>)
 800630c:	2200      	movs	r2, #0
 800630e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006310:	480d      	ldr	r0, [pc, #52]	@ (8006348 <MX_I2C2_Init+0x74>)
 8006312:	f002 f92b 	bl	800856c <HAL_I2C_Init>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d001      	beq.n	8006320 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800631c:	f000 fd14 	bl	8006d48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006320:	2100      	movs	r1, #0
 8006322:	4809      	ldr	r0, [pc, #36]	@ (8006348 <MX_I2C2_Init+0x74>)
 8006324:	f003 f946 	bl	80095b4 <HAL_I2CEx_ConfigAnalogFilter>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d001      	beq.n	8006332 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800632e:	f000 fd0b 	bl	8006d48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006332:	2100      	movs	r1, #0
 8006334:	4804      	ldr	r0, [pc, #16]	@ (8006348 <MX_I2C2_Init+0x74>)
 8006336:	f003 f979 	bl	800962c <HAL_I2CEx_ConfigDigitalFilter>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d001      	beq.n	8006344 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8006340:	f000 fd02 	bl	8006d48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006344:	bf00      	nop
 8006346:	bd80      	pop	{r7, pc}
 8006348:	200018a4 	.word	0x200018a4
 800634c:	40005800 	.word	0x40005800
 8006350:	00061a80 	.word	0x00061a80

08006354 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8006358:	4b1b      	ldr	r3, [pc, #108]	@ (80063c8 <MX_I2C3_Init+0x74>)
 800635a:	4a1c      	ldr	r2, [pc, #112]	@ (80063cc <MX_I2C3_Init+0x78>)
 800635c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800635e:	4b1a      	ldr	r3, [pc, #104]	@ (80063c8 <MX_I2C3_Init+0x74>)
 8006360:	4a1b      	ldr	r2, [pc, #108]	@ (80063d0 <MX_I2C3_Init+0x7c>)
 8006362:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006364:	4b18      	ldr	r3, [pc, #96]	@ (80063c8 <MX_I2C3_Init+0x74>)
 8006366:	2200      	movs	r2, #0
 8006368:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800636a:	4b17      	ldr	r3, [pc, #92]	@ (80063c8 <MX_I2C3_Init+0x74>)
 800636c:	2200      	movs	r2, #0
 800636e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006370:	4b15      	ldr	r3, [pc, #84]	@ (80063c8 <MX_I2C3_Init+0x74>)
 8006372:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006376:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006378:	4b13      	ldr	r3, [pc, #76]	@ (80063c8 <MX_I2C3_Init+0x74>)
 800637a:	2200      	movs	r2, #0
 800637c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800637e:	4b12      	ldr	r3, [pc, #72]	@ (80063c8 <MX_I2C3_Init+0x74>)
 8006380:	2200      	movs	r2, #0
 8006382:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006384:	4b10      	ldr	r3, [pc, #64]	@ (80063c8 <MX_I2C3_Init+0x74>)
 8006386:	2200      	movs	r2, #0
 8006388:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800638a:	4b0f      	ldr	r3, [pc, #60]	@ (80063c8 <MX_I2C3_Init+0x74>)
 800638c:	2200      	movs	r2, #0
 800638e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8006390:	480d      	ldr	r0, [pc, #52]	@ (80063c8 <MX_I2C3_Init+0x74>)
 8006392:	f002 f8eb 	bl	800856c <HAL_I2C_Init>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d001      	beq.n	80063a0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800639c:	f000 fcd4 	bl	8006d48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80063a0:	2100      	movs	r1, #0
 80063a2:	4809      	ldr	r0, [pc, #36]	@ (80063c8 <MX_I2C3_Init+0x74>)
 80063a4:	f003 f906 	bl	80095b4 <HAL_I2CEx_ConfigAnalogFilter>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d001      	beq.n	80063b2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80063ae:	f000 fccb 	bl	8006d48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80063b2:	2100      	movs	r1, #0
 80063b4:	4804      	ldr	r0, [pc, #16]	@ (80063c8 <MX_I2C3_Init+0x74>)
 80063b6:	f003 f939 	bl	800962c <HAL_I2CEx_ConfigDigitalFilter>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d001      	beq.n	80063c4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80063c0:	f000 fcc2 	bl	8006d48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80063c4:	bf00      	nop
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	200018f8 	.word	0x200018f8
 80063cc:	40005c00 	.word	0x40005c00
 80063d0:	00061a80 	.word	0x00061a80

080063d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80063d8:	4b17      	ldr	r3, [pc, #92]	@ (8006438 <MX_SPI1_Init+0x64>)
 80063da:	4a18      	ldr	r2, [pc, #96]	@ (800643c <MX_SPI1_Init+0x68>)
 80063dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80063de:	4b16      	ldr	r3, [pc, #88]	@ (8006438 <MX_SPI1_Init+0x64>)
 80063e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80063e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80063e6:	4b14      	ldr	r3, [pc, #80]	@ (8006438 <MX_SPI1_Init+0x64>)
 80063e8:	2200      	movs	r2, #0
 80063ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80063ec:	4b12      	ldr	r3, [pc, #72]	@ (8006438 <MX_SPI1_Init+0x64>)
 80063ee:	2200      	movs	r2, #0
 80063f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80063f2:	4b11      	ldr	r3, [pc, #68]	@ (8006438 <MX_SPI1_Init+0x64>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80063f8:	4b0f      	ldr	r3, [pc, #60]	@ (8006438 <MX_SPI1_Init+0x64>)
 80063fa:	2201      	movs	r2, #1
 80063fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80063fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006438 <MX_SPI1_Init+0x64>)
 8006400:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006404:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8006406:	4b0c      	ldr	r3, [pc, #48]	@ (8006438 <MX_SPI1_Init+0x64>)
 8006408:	2228      	movs	r2, #40	@ 0x28
 800640a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800640c:	4b0a      	ldr	r3, [pc, #40]	@ (8006438 <MX_SPI1_Init+0x64>)
 800640e:	2200      	movs	r2, #0
 8006410:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006412:	4b09      	ldr	r3, [pc, #36]	@ (8006438 <MX_SPI1_Init+0x64>)
 8006414:	2200      	movs	r2, #0
 8006416:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006418:	4b07      	ldr	r3, [pc, #28]	@ (8006438 <MX_SPI1_Init+0x64>)
 800641a:	2200      	movs	r2, #0
 800641c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800641e:	4b06      	ldr	r3, [pc, #24]	@ (8006438 <MX_SPI1_Init+0x64>)
 8006420:	220a      	movs	r2, #10
 8006422:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006424:	4804      	ldr	r0, [pc, #16]	@ (8006438 <MX_SPI1_Init+0x64>)
 8006426:	f003 fde9 	bl	8009ffc <HAL_SPI_Init>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d001      	beq.n	8006434 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8006430:	f000 fc8a 	bl	8006d48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006434:	bf00      	nop
 8006436:	bd80      	pop	{r7, pc}
 8006438:	2000194c 	.word	0x2000194c
 800643c:	40013000 	.word	0x40013000

08006440 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006444:	4b17      	ldr	r3, [pc, #92]	@ (80064a4 <MX_SPI2_Init+0x64>)
 8006446:	4a18      	ldr	r2, [pc, #96]	@ (80064a8 <MX_SPI2_Init+0x68>)
 8006448:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800644a:	4b16      	ldr	r3, [pc, #88]	@ (80064a4 <MX_SPI2_Init+0x64>)
 800644c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006450:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006452:	4b14      	ldr	r3, [pc, #80]	@ (80064a4 <MX_SPI2_Init+0x64>)
 8006454:	2200      	movs	r2, #0
 8006456:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006458:	4b12      	ldr	r3, [pc, #72]	@ (80064a4 <MX_SPI2_Init+0x64>)
 800645a:	2200      	movs	r2, #0
 800645c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800645e:	4b11      	ldr	r3, [pc, #68]	@ (80064a4 <MX_SPI2_Init+0x64>)
 8006460:	2200      	movs	r2, #0
 8006462:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006464:	4b0f      	ldr	r3, [pc, #60]	@ (80064a4 <MX_SPI2_Init+0x64>)
 8006466:	2201      	movs	r2, #1
 8006468:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800646a:	4b0e      	ldr	r3, [pc, #56]	@ (80064a4 <MX_SPI2_Init+0x64>)
 800646c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006470:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8006472:	4b0c      	ldr	r3, [pc, #48]	@ (80064a4 <MX_SPI2_Init+0x64>)
 8006474:	2218      	movs	r2, #24
 8006476:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006478:	4b0a      	ldr	r3, [pc, #40]	@ (80064a4 <MX_SPI2_Init+0x64>)
 800647a:	2200      	movs	r2, #0
 800647c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800647e:	4b09      	ldr	r3, [pc, #36]	@ (80064a4 <MX_SPI2_Init+0x64>)
 8006480:	2200      	movs	r2, #0
 8006482:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006484:	4b07      	ldr	r3, [pc, #28]	@ (80064a4 <MX_SPI2_Init+0x64>)
 8006486:	2200      	movs	r2, #0
 8006488:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800648a:	4b06      	ldr	r3, [pc, #24]	@ (80064a4 <MX_SPI2_Init+0x64>)
 800648c:	220a      	movs	r2, #10
 800648e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006490:	4804      	ldr	r0, [pc, #16]	@ (80064a4 <MX_SPI2_Init+0x64>)
 8006492:	f003 fdb3 	bl	8009ffc <HAL_SPI_Init>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d001      	beq.n	80064a0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800649c:	f000 fc54 	bl	8006d48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80064a0:	bf00      	nop
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	200019a4 	.word	0x200019a4
 80064a8:	40003800 	.word	0x40003800

080064ac <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80064b0:	4b17      	ldr	r3, [pc, #92]	@ (8006510 <MX_SPI3_Init+0x64>)
 80064b2:	4a18      	ldr	r2, [pc, #96]	@ (8006514 <MX_SPI3_Init+0x68>)
 80064b4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80064b6:	4b16      	ldr	r3, [pc, #88]	@ (8006510 <MX_SPI3_Init+0x64>)
 80064b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80064bc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80064be:	4b14      	ldr	r3, [pc, #80]	@ (8006510 <MX_SPI3_Init+0x64>)
 80064c0:	2200      	movs	r2, #0
 80064c2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80064c4:	4b12      	ldr	r3, [pc, #72]	@ (8006510 <MX_SPI3_Init+0x64>)
 80064c6:	2200      	movs	r2, #0
 80064c8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80064ca:	4b11      	ldr	r3, [pc, #68]	@ (8006510 <MX_SPI3_Init+0x64>)
 80064cc:	2200      	movs	r2, #0
 80064ce:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80064d0:	4b0f      	ldr	r3, [pc, #60]	@ (8006510 <MX_SPI3_Init+0x64>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80064d6:	4b0e      	ldr	r3, [pc, #56]	@ (8006510 <MX_SPI3_Init+0x64>)
 80064d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064dc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80064de:	4b0c      	ldr	r3, [pc, #48]	@ (8006510 <MX_SPI3_Init+0x64>)
 80064e0:	2220      	movs	r2, #32
 80064e2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80064e4:	4b0a      	ldr	r3, [pc, #40]	@ (8006510 <MX_SPI3_Init+0x64>)
 80064e6:	2200      	movs	r2, #0
 80064e8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80064ea:	4b09      	ldr	r3, [pc, #36]	@ (8006510 <MX_SPI3_Init+0x64>)
 80064ec:	2200      	movs	r2, #0
 80064ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064f0:	4b07      	ldr	r3, [pc, #28]	@ (8006510 <MX_SPI3_Init+0x64>)
 80064f2:	2200      	movs	r2, #0
 80064f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80064f6:	4b06      	ldr	r3, [pc, #24]	@ (8006510 <MX_SPI3_Init+0x64>)
 80064f8:	220a      	movs	r2, #10
 80064fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80064fc:	4804      	ldr	r0, [pc, #16]	@ (8006510 <MX_SPI3_Init+0x64>)
 80064fe:	f003 fd7d 	bl	8009ffc <HAL_SPI_Init>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d001      	beq.n	800650c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8006508:	f000 fc1e 	bl	8006d48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800650c:	bf00      	nop
 800650e:	bd80      	pop	{r7, pc}
 8006510:	200019fc 	.word	0x200019fc
 8006514:	40003c00 	.word	0x40003c00

08006518 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800651c:	4b17      	ldr	r3, [pc, #92]	@ (800657c <MX_SPI4_Init+0x64>)
 800651e:	4a18      	ldr	r2, [pc, #96]	@ (8006580 <MX_SPI4_Init+0x68>)
 8006520:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8006522:	4b16      	ldr	r3, [pc, #88]	@ (800657c <MX_SPI4_Init+0x64>)
 8006524:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006528:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800652a:	4b14      	ldr	r3, [pc, #80]	@ (800657c <MX_SPI4_Init+0x64>)
 800652c:	2200      	movs	r2, #0
 800652e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8006530:	4b12      	ldr	r3, [pc, #72]	@ (800657c <MX_SPI4_Init+0x64>)
 8006532:	2200      	movs	r2, #0
 8006534:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006536:	4b11      	ldr	r3, [pc, #68]	@ (800657c <MX_SPI4_Init+0x64>)
 8006538:	2200      	movs	r2, #0
 800653a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800653c:	4b0f      	ldr	r3, [pc, #60]	@ (800657c <MX_SPI4_Init+0x64>)
 800653e:	2200      	movs	r2, #0
 8006540:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8006542:	4b0e      	ldr	r3, [pc, #56]	@ (800657c <MX_SPI4_Init+0x64>)
 8006544:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006548:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800654a:	4b0c      	ldr	r3, [pc, #48]	@ (800657c <MX_SPI4_Init+0x64>)
 800654c:	2230      	movs	r2, #48	@ 0x30
 800654e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006550:	4b0a      	ldr	r3, [pc, #40]	@ (800657c <MX_SPI4_Init+0x64>)
 8006552:	2200      	movs	r2, #0
 8006554:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8006556:	4b09      	ldr	r3, [pc, #36]	@ (800657c <MX_SPI4_Init+0x64>)
 8006558:	2200      	movs	r2, #0
 800655a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800655c:	4b07      	ldr	r3, [pc, #28]	@ (800657c <MX_SPI4_Init+0x64>)
 800655e:	2200      	movs	r2, #0
 8006560:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 8006562:	4b06      	ldr	r3, [pc, #24]	@ (800657c <MX_SPI4_Init+0x64>)
 8006564:	220a      	movs	r2, #10
 8006566:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8006568:	4804      	ldr	r0, [pc, #16]	@ (800657c <MX_SPI4_Init+0x64>)
 800656a:	f003 fd47 	bl	8009ffc <HAL_SPI_Init>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d001      	beq.n	8006578 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8006574:	f000 fbe8 	bl	8006d48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8006578:	bf00      	nop
 800657a:	bd80      	pop	{r7, pc}
 800657c:	20001a54 	.word	0x20001a54
 8006580:	40013400 	.word	0x40013400

08006584 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800658a:	f107 0308 	add.w	r3, r7, #8
 800658e:	2200      	movs	r2, #0
 8006590:	601a      	str	r2, [r3, #0]
 8006592:	605a      	str	r2, [r3, #4]
 8006594:	609a      	str	r2, [r3, #8]
 8006596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006598:	463b      	mov	r3, r7
 800659a:	2200      	movs	r2, #0
 800659c:	601a      	str	r2, [r3, #0]
 800659e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80065a0:	4b1f      	ldr	r3, [pc, #124]	@ (8006620 <MX_TIM1_Init+0x9c>)
 80065a2:	4a20      	ldr	r2, [pc, #128]	@ (8006624 <MX_TIM1_Init+0xa0>)
 80065a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9000-1;
 80065a6:	4b1e      	ldr	r3, [pc, #120]	@ (8006620 <MX_TIM1_Init+0x9c>)
 80065a8:	f242 3227 	movw	r2, #8999	@ 0x2327
 80065ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80065ae:	4b1c      	ldr	r3, [pc, #112]	@ (8006620 <MX_TIM1_Init+0x9c>)
 80065b0:	2200      	movs	r2, #0
 80065b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80065b4:	4b1a      	ldr	r3, [pc, #104]	@ (8006620 <MX_TIM1_Init+0x9c>)
 80065b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80065ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80065bc:	4b18      	ldr	r3, [pc, #96]	@ (8006620 <MX_TIM1_Init+0x9c>)
 80065be:	2200      	movs	r2, #0
 80065c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80065c2:	4b17      	ldr	r3, [pc, #92]	@ (8006620 <MX_TIM1_Init+0x9c>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80065c8:	4b15      	ldr	r3, [pc, #84]	@ (8006620 <MX_TIM1_Init+0x9c>)
 80065ca:	2200      	movs	r2, #0
 80065cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80065ce:	4814      	ldr	r0, [pc, #80]	@ (8006620 <MX_TIM1_Init+0x9c>)
 80065d0:	f004 f966 	bl	800a8a0 <HAL_TIM_Base_Init>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d001      	beq.n	80065de <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80065da:	f000 fbb5 	bl	8006d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80065de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80065e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80065e4:	f107 0308 	add.w	r3, r7, #8
 80065e8:	4619      	mov	r1, r3
 80065ea:	480d      	ldr	r0, [pc, #52]	@ (8006620 <MX_TIM1_Init+0x9c>)
 80065ec:	f004 fa47 	bl	800aa7e <HAL_TIM_ConfigClockSource>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d001      	beq.n	80065fa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80065f6:	f000 fba7 	bl	8006d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80065fa:	2300      	movs	r3, #0
 80065fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80065fe:	2300      	movs	r3, #0
 8006600:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006602:	463b      	mov	r3, r7
 8006604:	4619      	mov	r1, r3
 8006606:	4806      	ldr	r0, [pc, #24]	@ (8006620 <MX_TIM1_Init+0x9c>)
 8006608:	f004 fc46 	bl	800ae98 <HAL_TIMEx_MasterConfigSynchronization>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d001      	beq.n	8006616 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8006612:	f000 fb99 	bl	8006d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8006616:	bf00      	nop
 8006618:	3718      	adds	r7, #24
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	20001aac 	.word	0x20001aac
 8006624:	40010000 	.word	0x40010000

08006628 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800662c:	4b11      	ldr	r3, [pc, #68]	@ (8006674 <MX_USART1_UART_Init+0x4c>)
 800662e:	4a12      	ldr	r2, [pc, #72]	@ (8006678 <MX_USART1_UART_Init+0x50>)
 8006630:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006632:	4b10      	ldr	r3, [pc, #64]	@ (8006674 <MX_USART1_UART_Init+0x4c>)
 8006634:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006638:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800663a:	4b0e      	ldr	r3, [pc, #56]	@ (8006674 <MX_USART1_UART_Init+0x4c>)
 800663c:	2200      	movs	r2, #0
 800663e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006640:	4b0c      	ldr	r3, [pc, #48]	@ (8006674 <MX_USART1_UART_Init+0x4c>)
 8006642:	2200      	movs	r2, #0
 8006644:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006646:	4b0b      	ldr	r3, [pc, #44]	@ (8006674 <MX_USART1_UART_Init+0x4c>)
 8006648:	2200      	movs	r2, #0
 800664a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800664c:	4b09      	ldr	r3, [pc, #36]	@ (8006674 <MX_USART1_UART_Init+0x4c>)
 800664e:	220c      	movs	r2, #12
 8006650:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006652:	4b08      	ldr	r3, [pc, #32]	@ (8006674 <MX_USART1_UART_Init+0x4c>)
 8006654:	2200      	movs	r2, #0
 8006656:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006658:	4b06      	ldr	r3, [pc, #24]	@ (8006674 <MX_USART1_UART_Init+0x4c>)
 800665a:	2200      	movs	r2, #0
 800665c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800665e:	4805      	ldr	r0, [pc, #20]	@ (8006674 <MX_USART1_UART_Init+0x4c>)
 8006660:	f004 fc96 	bl	800af90 <HAL_UART_Init>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d001      	beq.n	800666e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800666a:	f000 fb6d 	bl	8006d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800666e:	bf00      	nop
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	20001af4 	.word	0x20001af4
 8006678:	40011000 	.word	0x40011000

0800667c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006680:	4b11      	ldr	r3, [pc, #68]	@ (80066c8 <MX_USART2_UART_Init+0x4c>)
 8006682:	4a12      	ldr	r2, [pc, #72]	@ (80066cc <MX_USART2_UART_Init+0x50>)
 8006684:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006686:	4b10      	ldr	r3, [pc, #64]	@ (80066c8 <MX_USART2_UART_Init+0x4c>)
 8006688:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800668c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800668e:	4b0e      	ldr	r3, [pc, #56]	@ (80066c8 <MX_USART2_UART_Init+0x4c>)
 8006690:	2200      	movs	r2, #0
 8006692:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006694:	4b0c      	ldr	r3, [pc, #48]	@ (80066c8 <MX_USART2_UART_Init+0x4c>)
 8006696:	2200      	movs	r2, #0
 8006698:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800669a:	4b0b      	ldr	r3, [pc, #44]	@ (80066c8 <MX_USART2_UART_Init+0x4c>)
 800669c:	2200      	movs	r2, #0
 800669e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80066a0:	4b09      	ldr	r3, [pc, #36]	@ (80066c8 <MX_USART2_UART_Init+0x4c>)
 80066a2:	220c      	movs	r2, #12
 80066a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80066a6:	4b08      	ldr	r3, [pc, #32]	@ (80066c8 <MX_USART2_UART_Init+0x4c>)
 80066a8:	2200      	movs	r2, #0
 80066aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80066ac:	4b06      	ldr	r3, [pc, #24]	@ (80066c8 <MX_USART2_UART_Init+0x4c>)
 80066ae:	2200      	movs	r2, #0
 80066b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80066b2:	4805      	ldr	r0, [pc, #20]	@ (80066c8 <MX_USART2_UART_Init+0x4c>)
 80066b4:	f004 fc6c 	bl	800af90 <HAL_UART_Init>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d001      	beq.n	80066c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80066be:	f000 fb43 	bl	8006d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80066c2:	bf00      	nop
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	20001b3c 	.word	0x20001b3c
 80066cc:	40004400 	.word	0x40004400

080066d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80066d4:	4b11      	ldr	r3, [pc, #68]	@ (800671c <MX_USART3_UART_Init+0x4c>)
 80066d6:	4a12      	ldr	r2, [pc, #72]	@ (8006720 <MX_USART3_UART_Init+0x50>)
 80066d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80066da:	4b10      	ldr	r3, [pc, #64]	@ (800671c <MX_USART3_UART_Init+0x4c>)
 80066dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80066e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80066e2:	4b0e      	ldr	r3, [pc, #56]	@ (800671c <MX_USART3_UART_Init+0x4c>)
 80066e4:	2200      	movs	r2, #0
 80066e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80066e8:	4b0c      	ldr	r3, [pc, #48]	@ (800671c <MX_USART3_UART_Init+0x4c>)
 80066ea:	2200      	movs	r2, #0
 80066ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80066ee:	4b0b      	ldr	r3, [pc, #44]	@ (800671c <MX_USART3_UART_Init+0x4c>)
 80066f0:	2200      	movs	r2, #0
 80066f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80066f4:	4b09      	ldr	r3, [pc, #36]	@ (800671c <MX_USART3_UART_Init+0x4c>)
 80066f6:	220c      	movs	r2, #12
 80066f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80066fa:	4b08      	ldr	r3, [pc, #32]	@ (800671c <MX_USART3_UART_Init+0x4c>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006700:	4b06      	ldr	r3, [pc, #24]	@ (800671c <MX_USART3_UART_Init+0x4c>)
 8006702:	2200      	movs	r2, #0
 8006704:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006706:	4805      	ldr	r0, [pc, #20]	@ (800671c <MX_USART3_UART_Init+0x4c>)
 8006708:	f004 fc42 	bl	800af90 <HAL_UART_Init>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d001      	beq.n	8006716 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8006712:	f000 fb19 	bl	8006d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006716:	bf00      	nop
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	20001b84 	.word	0x20001b84
 8006720:	40004800 	.word	0x40004800

08006724 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8006728:	4b11      	ldr	r3, [pc, #68]	@ (8006770 <MX_USART6_UART_Init+0x4c>)
 800672a:	4a12      	ldr	r2, [pc, #72]	@ (8006774 <MX_USART6_UART_Init+0x50>)
 800672c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800672e:	4b10      	ldr	r3, [pc, #64]	@ (8006770 <MX_USART6_UART_Init+0x4c>)
 8006730:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006734:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8006736:	4b0e      	ldr	r3, [pc, #56]	@ (8006770 <MX_USART6_UART_Init+0x4c>)
 8006738:	2200      	movs	r2, #0
 800673a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800673c:	4b0c      	ldr	r3, [pc, #48]	@ (8006770 <MX_USART6_UART_Init+0x4c>)
 800673e:	2200      	movs	r2, #0
 8006740:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8006742:	4b0b      	ldr	r3, [pc, #44]	@ (8006770 <MX_USART6_UART_Init+0x4c>)
 8006744:	2200      	movs	r2, #0
 8006746:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8006748:	4b09      	ldr	r3, [pc, #36]	@ (8006770 <MX_USART6_UART_Init+0x4c>)
 800674a:	220c      	movs	r2, #12
 800674c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800674e:	4b08      	ldr	r3, [pc, #32]	@ (8006770 <MX_USART6_UART_Init+0x4c>)
 8006750:	2200      	movs	r2, #0
 8006752:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8006754:	4b06      	ldr	r3, [pc, #24]	@ (8006770 <MX_USART6_UART_Init+0x4c>)
 8006756:	2200      	movs	r2, #0
 8006758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800675a:	4805      	ldr	r0, [pc, #20]	@ (8006770 <MX_USART6_UART_Init+0x4c>)
 800675c:	f004 fc18 	bl	800af90 <HAL_UART_Init>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d001      	beq.n	800676a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8006766:	f000 faef 	bl	8006d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800676a:	bf00      	nop
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	20001bcc 	.word	0x20001bcc
 8006774:	40011400 	.word	0x40011400

08006778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b08e      	sub	sp, #56	@ 0x38
 800677c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800677e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006782:	2200      	movs	r2, #0
 8006784:	601a      	str	r2, [r3, #0]
 8006786:	605a      	str	r2, [r3, #4]
 8006788:	609a      	str	r2, [r3, #8]
 800678a:	60da      	str	r2, [r3, #12]
 800678c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800678e:	2300      	movs	r3, #0
 8006790:	623b      	str	r3, [r7, #32]
 8006792:	4bb6      	ldr	r3, [pc, #728]	@ (8006a6c <MX_GPIO_Init+0x2f4>)
 8006794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006796:	4ab5      	ldr	r2, [pc, #724]	@ (8006a6c <MX_GPIO_Init+0x2f4>)
 8006798:	f043 0310 	orr.w	r3, r3, #16
 800679c:	6313      	str	r3, [r2, #48]	@ 0x30
 800679e:	4bb3      	ldr	r3, [pc, #716]	@ (8006a6c <MX_GPIO_Init+0x2f4>)
 80067a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067a2:	f003 0310 	and.w	r3, r3, #16
 80067a6:	623b      	str	r3, [r7, #32]
 80067a8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80067aa:	2300      	movs	r3, #0
 80067ac:	61fb      	str	r3, [r7, #28]
 80067ae:	4baf      	ldr	r3, [pc, #700]	@ (8006a6c <MX_GPIO_Init+0x2f4>)
 80067b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067b2:	4aae      	ldr	r2, [pc, #696]	@ (8006a6c <MX_GPIO_Init+0x2f4>)
 80067b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80067ba:	4bac      	ldr	r3, [pc, #688]	@ (8006a6c <MX_GPIO_Init+0x2f4>)
 80067bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067c2:	61fb      	str	r3, [r7, #28]
 80067c4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80067c6:	2300      	movs	r3, #0
 80067c8:	61bb      	str	r3, [r7, #24]
 80067ca:	4ba8      	ldr	r3, [pc, #672]	@ (8006a6c <MX_GPIO_Init+0x2f4>)
 80067cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ce:	4aa7      	ldr	r2, [pc, #668]	@ (8006a6c <MX_GPIO_Init+0x2f4>)
 80067d0:	f043 0304 	orr.w	r3, r3, #4
 80067d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80067d6:	4ba5      	ldr	r3, [pc, #660]	@ (8006a6c <MX_GPIO_Init+0x2f4>)
 80067d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067da:	f003 0304 	and.w	r3, r3, #4
 80067de:	61bb      	str	r3, [r7, #24]
 80067e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80067e2:	2300      	movs	r3, #0
 80067e4:	617b      	str	r3, [r7, #20]
 80067e6:	4ba1      	ldr	r3, [pc, #644]	@ (8006a6c <MX_GPIO_Init+0x2f4>)
 80067e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ea:	4aa0      	ldr	r2, [pc, #640]	@ (8006a6c <MX_GPIO_Init+0x2f4>)
 80067ec:	f043 0320 	orr.w	r3, r3, #32
 80067f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80067f2:	4b9e      	ldr	r3, [pc, #632]	@ (8006a6c <MX_GPIO_Init+0x2f4>)
 80067f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067f6:	f003 0320 	and.w	r3, r3, #32
 80067fa:	617b      	str	r3, [r7, #20]
 80067fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80067fe:	2300      	movs	r3, #0
 8006800:	613b      	str	r3, [r7, #16]
 8006802:	4b9a      	ldr	r3, [pc, #616]	@ (8006a6c <MX_GPIO_Init+0x2f4>)
 8006804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006806:	4a99      	ldr	r2, [pc, #612]	@ (8006a6c <MX_GPIO_Init+0x2f4>)
 8006808:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800680c:	6313      	str	r3, [r2, #48]	@ 0x30
 800680e:	4b97      	ldr	r3, [pc, #604]	@ (8006a6c <MX_GPIO_Init+0x2f4>)
 8006810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006816:	613b      	str	r3, [r7, #16]
 8006818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800681a:	2300      	movs	r3, #0
 800681c:	60fb      	str	r3, [r7, #12]
 800681e:	4b93      	ldr	r3, [pc, #588]	@ (8006a6c <MX_GPIO_Init+0x2f4>)
 8006820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006822:	4a92      	ldr	r2, [pc, #584]	@ (8006a6c <MX_GPIO_Init+0x2f4>)
 8006824:	f043 0301 	orr.w	r3, r3, #1
 8006828:	6313      	str	r3, [r2, #48]	@ 0x30
 800682a:	4b90      	ldr	r3, [pc, #576]	@ (8006a6c <MX_GPIO_Init+0x2f4>)
 800682c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	60fb      	str	r3, [r7, #12]
 8006834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006836:	2300      	movs	r3, #0
 8006838:	60bb      	str	r3, [r7, #8]
 800683a:	4b8c      	ldr	r3, [pc, #560]	@ (8006a6c <MX_GPIO_Init+0x2f4>)
 800683c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800683e:	4a8b      	ldr	r2, [pc, #556]	@ (8006a6c <MX_GPIO_Init+0x2f4>)
 8006840:	f043 0302 	orr.w	r3, r3, #2
 8006844:	6313      	str	r3, [r2, #48]	@ 0x30
 8006846:	4b89      	ldr	r3, [pc, #548]	@ (8006a6c <MX_GPIO_Init+0x2f4>)
 8006848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800684a:	f003 0302 	and.w	r3, r3, #2
 800684e:	60bb      	str	r3, [r7, #8]
 8006850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006852:	2300      	movs	r3, #0
 8006854:	607b      	str	r3, [r7, #4]
 8006856:	4b85      	ldr	r3, [pc, #532]	@ (8006a6c <MX_GPIO_Init+0x2f4>)
 8006858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800685a:	4a84      	ldr	r2, [pc, #528]	@ (8006a6c <MX_GPIO_Init+0x2f4>)
 800685c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006860:	6313      	str	r3, [r2, #48]	@ 0x30
 8006862:	4b82      	ldr	r3, [pc, #520]	@ (8006a6c <MX_GPIO_Init+0x2f4>)
 8006864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800686a:	607b      	str	r3, [r7, #4]
 800686c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800686e:	2300      	movs	r3, #0
 8006870:	603b      	str	r3, [r7, #0]
 8006872:	4b7e      	ldr	r3, [pc, #504]	@ (8006a6c <MX_GPIO_Init+0x2f4>)
 8006874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006876:	4a7d      	ldr	r2, [pc, #500]	@ (8006a6c <MX_GPIO_Init+0x2f4>)
 8006878:	f043 0308 	orr.w	r3, r3, #8
 800687c:	6313      	str	r3, [r2, #48]	@ 0x30
 800687e:	4b7b      	ldr	r3, [pc, #492]	@ (8006a6c <MX_GPIO_Init+0x2f4>)
 8006880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006882:	f003 0308 	and.w	r3, r3, #8
 8006886:	603b      	str	r3, [r7, #0]
 8006888:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CELL12_CS_01_Pin|CELL12_CS_02_Pin|CELL12_CS_03_Pin|CELL12_CS_04_Pin
 800688a:	2201      	movs	r2, #1
 800688c:	f240 71fc 	movw	r1, #2044	@ 0x7fc
 8006890:	4877      	ldr	r0, [pc, #476]	@ (8006a70 <MX_GPIO_Init+0x2f8>)
 8006892:	f001 fe1f 	bl	80084d4 <HAL_GPIO_WritePin>
                          |CELL12_CS_05_Pin|CELL11_CS_10_Pin|CELL11_CS_11_Pin|CELL11_CS_12_Pin
                          |CSU_11_CELLS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, CELL12_CS_06_Pin|CELL12_CS_08_Pin, GPIO_PIN_SET);
 8006896:	2201      	movs	r2, #1
 8006898:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800689c:	4875      	ldr	r0, [pc, #468]	@ (8006a74 <MX_GPIO_Init+0x2fc>)
 800689e:	f001 fe19 	bl	80084d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CELL12_CS_07_Pin|CELL12_TEMP_02_LED_Pin|CELL12_TEMP_01_CS_Pin|SPI3_CS_03_Pin
 80068a2:	2201      	movs	r2, #1
 80068a4:	f242 0133 	movw	r1, #8243	@ 0x2033
 80068a8:	4873      	ldr	r0, [pc, #460]	@ (8006a78 <MX_GPIO_Init+0x300>)
 80068aa:	f001 fe13 	bl	80084d4 <HAL_GPIO_WritePin>
                          |SPI3_CS_02_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, CELL12_CS_09_Pin|CELL12_CS_10_Pin|LED_DC_Y_Pin|LED_DC_G_Pin
 80068ae:	2200      	movs	r2, #0
 80068b0:	f44f 614f 	mov.w	r1, #3312	@ 0xcf0
 80068b4:	486f      	ldr	r0, [pc, #444]	@ (8006a74 <MX_GPIO_Init+0x2fc>)
 80068b6:	f001 fe0d 	bl	80084d4 <HAL_GPIO_WritePin>
                          |LED_PC_Y_Pin|LED_PC_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CELL12_CS_11_Pin|CELL12_CS_12_Pin|CSU_12_CELLS_Pin|CELL12_TEMP_03_CS_Pin
 80068ba:	2201      	movs	r2, #1
 80068bc:	f64f 5147 	movw	r1, #64839	@ 0xfd47
 80068c0:	486e      	ldr	r0, [pc, #440]	@ (8006a7c <MX_GPIO_Init+0x304>)
 80068c2:	f001 fe07 	bl	80084d4 <HAL_GPIO_WritePin>
                          |CELL12_TEMP_03_LED_Pin|CELL12_TEMP_02_CS_Pin|CELL11_CS_03_Pin|CELL11_CS_04_Pin
                          |CELL11_CS_05_Pin|CELL11_CS_06_Pin|CELL11_CS_07_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_02_Pin|GPIO_03_Pin|GPIO_04_Pin|GPIO_05_Pin
 80068c6:	2200      	movs	r2, #0
 80068c8:	f44f 712e 	mov.w	r1, #696	@ 0x2b8
 80068cc:	486b      	ldr	r0, [pc, #428]	@ (8006a7c <MX_GPIO_Init+0x304>)
 80068ce:	f001 fe01 	bl	80084d4 <HAL_GPIO_WritePin>
                          |GPIO_06_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CELL12_TEMP_01_LED_GPIO_Port, CELL12_TEMP_01_LED_Pin, GPIO_PIN_SET);
 80068d2:	2201      	movs	r2, #1
 80068d4:	2101      	movs	r1, #1
 80068d6:	486a      	ldr	r0, [pc, #424]	@ (8006a80 <MX_GPIO_Init+0x308>)
 80068d8:	f001 fdfc 	bl	80084d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USART2_ENABLE_GPIO_Port, USART2_ENABLE_Pin, GPIO_PIN_RESET);
 80068dc:	2200      	movs	r2, #0
 80068de:	2102      	movs	r1, #2
 80068e0:	4867      	ldr	r0, [pc, #412]	@ (8006a80 <MX_GPIO_Init+0x308>)
 80068e2:	f001 fdf7 	bl	80084d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_14_Pin|GPIO_07_Pin|LED_01_Pin|LED_02_Pin, GPIO_PIN_RESET);
 80068e6:	2200      	movs	r2, #0
 80068e8:	f24c 010c 	movw	r1, #49164	@ 0xc00c
 80068ec:	4865      	ldr	r0, [pc, #404]	@ (8006a84 <MX_GPIO_Init+0x30c>)
 80068ee:	f001 fdf1 	bl	80084d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CELL11_CS_01_Pin|CELL11_CS_02_Pin|CELL11_TEMP_03_CS_Pin|CS_Pin, GPIO_PIN_SET);
 80068f2:	2201      	movs	r2, #1
 80068f4:	f648 0103 	movw	r1, #34819	@ 0x8803
 80068f8:	4863      	ldr	r0, [pc, #396]	@ (8006a88 <MX_GPIO_Init+0x310>)
 80068fa:	f001 fdeb 	bl	80084d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, CELL11_CS_08_Pin|CELL11_CS_09_Pin, GPIO_PIN_SET);
 80068fe:	2201      	movs	r2, #1
 8006900:	2103      	movs	r1, #3
 8006902:	4862      	ldr	r0, [pc, #392]	@ (8006a8c <MX_GPIO_Init+0x314>)
 8006904:	f001 fde6 	bl	80084d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_09_Pin|GPIO_10_Pin|LED_06_Pin|LED_05_Pin, GPIO_PIN_RESET);
 8006908:	2200      	movs	r2, #0
 800690a:	f648 0103 	movw	r1, #34819	@ 0x8803
 800690e:	4858      	ldr	r0, [pc, #352]	@ (8006a70 <MX_GPIO_Init+0x2f8>)
 8006910:	f001 fde0 	bl	80084d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_11_Pin|GPIO_12_Pin|LED_03_Pin|LED_07_Pin
 8006914:	2200      	movs	r2, #0
 8006916:	f244 4138 	movw	r1, #17464	@ 0x4438
 800691a:	485b      	ldr	r0, [pc, #364]	@ (8006a88 <MX_GPIO_Init+0x310>)
 800691c:	f001 fdda 	bl	80084d4 <HAL_GPIO_WritePin>
                          |USART1_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_03_LED_Pin|CELL11_TEMP_02_CS_Pin|CELL11_TEMP_02_LED_Pin|CELL11_TEMP_01_CS_Pin
 8006920:	2201      	movs	r2, #1
 8006922:	f44f 51f2 	mov.w	r1, #7744	@ 0x1e40
 8006926:	4857      	ldr	r0, [pc, #348]	@ (8006a84 <MX_GPIO_Init+0x30c>)
 8006928:	f001 fdd4 	bl	80084d4 <HAL_GPIO_WritePin>
                          |CELL11_TEMP_01_LED_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 800692c:	2201      	movs	r2, #1
 800692e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006932:	4857      	ldr	r0, [pc, #348]	@ (8006a90 <MX_GPIO_Init+0x318>)
 8006934:	f001 fdce 	bl	80084d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USART3_ENABLE_Pin|DISPLAY_CS_Pin|SPI5_CS_02_Pin, GPIO_PIN_RESET);
 8006938:	2200      	movs	r2, #0
 800693a:	f640 010c 	movw	r1, #2060	@ 0x80c
 800693e:	4854      	ldr	r0, [pc, #336]	@ (8006a90 <MX_GPIO_Init+0x318>)
 8006940:	f001 fdc8 	bl	80084d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, DISPLAY_IO_1_Pin|DISPLAY_IO_2_Pin|BACKLIGHT_1_Pin|BACKLIGHT_2_Pin
 8006944:	2200      	movs	r2, #0
 8006946:	f24e 013c 	movw	r1, #57404	@ 0xe03c
 800694a:	4850      	ldr	r0, [pc, #320]	@ (8006a8c <MX_GPIO_Init+0x314>)
 800694c:	f001 fdc2 	bl	80084d4 <HAL_GPIO_WritePin>
                          |LED_09_Pin|LED_04_Pin|LED_08_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USART6_ENABLE_GPIO_Port, USART6_ENABLE_Pin, GPIO_PIN_RESET);
 8006950:	2200      	movs	r2, #0
 8006952:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006956:	4848      	ldr	r0, [pc, #288]	@ (8006a78 <MX_GPIO_Init+0x300>)
 8006958:	f001 fdbc 	bl	80084d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CELL12_CS_01_Pin CELL12_CS_02_Pin CELL12_CS_03_Pin CELL12_CS_04_Pin
                           CELL12_CS_05_Pin CELL11_CS_10_Pin CELL11_CS_11_Pin CELL11_CS_12_Pin
                           CSU_11_CELLS_Pin GPIO_09_Pin GPIO_10_Pin LED_06_Pin
                           LED_05_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_01_Pin|CELL12_CS_02_Pin|CELL12_CS_03_Pin|CELL12_CS_04_Pin
 800695c:	f648 73ff 	movw	r3, #36863	@ 0x8fff
 8006960:	627b      	str	r3, [r7, #36]	@ 0x24
                          |CELL12_CS_05_Pin|CELL11_CS_10_Pin|CELL11_CS_11_Pin|CELL11_CS_12_Pin
                          |CSU_11_CELLS_Pin|GPIO_09_Pin|GPIO_10_Pin|LED_06_Pin
                          |LED_05_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006962:	2301      	movs	r3, #1
 8006964:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006966:	2300      	movs	r3, #0
 8006968:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800696a:	2300      	movs	r3, #0
 800696c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800696e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006972:	4619      	mov	r1, r3
 8006974:	483e      	ldr	r0, [pc, #248]	@ (8006a70 <MX_GPIO_Init+0x2f8>)
 8006976:	f001 fc01 	bl	800817c <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_CS_06_Pin CELL12_CS_08_Pin CELL12_CS_09_Pin CELL12_CS_10_Pin
                           LED_DC_Y_Pin LED_DC_G_Pin LED_PC_Y_Pin LED_PC_G_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_06_Pin|CELL12_CS_08_Pin|CELL12_CS_09_Pin|CELL12_CS_10_Pin
 800697a:	f44f 637f 	mov.w	r3, #4080	@ 0xff0
 800697e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LED_DC_Y_Pin|LED_DC_G_Pin|LED_PC_Y_Pin|LED_PC_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006980:	2301      	movs	r3, #1
 8006982:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006984:	2300      	movs	r3, #0
 8006986:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006988:	2300      	movs	r3, #0
 800698a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800698c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006990:	4619      	mov	r1, r3
 8006992:	4838      	ldr	r0, [pc, #224]	@ (8006a74 <MX_GPIO_Init+0x2fc>)
 8006994:	f001 fbf2 	bl	800817c <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_CS_07_Pin SPI3_CS_03_Pin SPI3_CS_02_Pin USART6_ENABLE_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_07_Pin|SPI3_CS_03_Pin|SPI3_CS_02_Pin|USART6_ENABLE_Pin;
 8006998:	f242 1330 	movw	r3, #8496	@ 0x2130
 800699c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800699e:	2301      	movs	r3, #1
 80069a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069a2:	2300      	movs	r3, #0
 80069a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069a6:	2300      	movs	r3, #0
 80069a8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80069aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069ae:	4619      	mov	r1, r3
 80069b0:	4831      	ldr	r0, [pc, #196]	@ (8006a78 <MX_GPIO_Init+0x300>)
 80069b2:	f001 fbe3 	bl	800817c <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_CS_11_Pin CELL12_CS_12_Pin GPIO_02_Pin GPIO_03_Pin
                           GPIO_04_Pin GPIO_05_Pin GPIO_06_Pin CELL11_CS_03_Pin
                           CELL11_CS_04_Pin CELL11_CS_05_Pin CELL11_CS_06_Pin CELL11_CS_07_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_11_Pin|CELL12_CS_12_Pin|GPIO_02_Pin|GPIO_03_Pin
 80069b6:	f64f 23bb 	movw	r3, #64187	@ 0xfabb
 80069ba:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_04_Pin|GPIO_05_Pin|GPIO_06_Pin|CELL11_CS_03_Pin
                          |CELL11_CS_04_Pin|CELL11_CS_05_Pin|CELL11_CS_06_Pin|CELL11_CS_07_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069bc:	2301      	movs	r3, #1
 80069be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069c0:	2300      	movs	r3, #0
 80069c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069c4:	2300      	movs	r3, #0
 80069c6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80069c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069cc:	4619      	mov	r1, r3
 80069ce:	482b      	ldr	r0, [pc, #172]	@ (8006a7c <MX_GPIO_Init+0x304>)
 80069d0:	f001 fbd4 	bl	800817c <HAL_GPIO_Init>

  /*Configure GPIO pin : CSU_12_CELLS_Pin */
  GPIO_InitStruct.Pin = CSU_12_CELLS_Pin;
 80069d4:	2304      	movs	r3, #4
 80069d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069d8:	2301      	movs	r3, #1
 80069da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069dc:	2300      	movs	r3, #0
 80069de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80069e0:	2302      	movs	r3, #2
 80069e2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CSU_12_CELLS_GPIO_Port, &GPIO_InitStruct);
 80069e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069e8:	4619      	mov	r1, r3
 80069ea:	4824      	ldr	r0, [pc, #144]	@ (8006a7c <MX_GPIO_Init+0x304>)
 80069ec:	f001 fbc6 	bl	800817c <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_TEMP_03_CS_Pin CELL12_TEMP_02_CS_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_03_CS_Pin|CELL12_TEMP_02_CS_Pin;
 80069f0:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 80069f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069f6:	2301      	movs	r3, #1
 80069f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80069fa:	2301      	movs	r3, #1
 80069fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069fe:	2303      	movs	r3, #3
 8006a00:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006a02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a06:	4619      	mov	r1, r3
 8006a08:	481c      	ldr	r0, [pc, #112]	@ (8006a7c <MX_GPIO_Init+0x304>)
 8006a0a:	f001 fbb7 	bl	800817c <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_03_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_03_LED_Pin;
 8006a0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006a12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a14:	2301      	movs	r3, #1
 8006a16:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006a18:	2302      	movs	r3, #2
 8006a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_03_LED_GPIO_Port, &GPIO_InitStruct);
 8006a20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a24:	4619      	mov	r1, r3
 8006a26:	4815      	ldr	r0, [pc, #84]	@ (8006a7c <MX_GPIO_Init+0x304>)
 8006a28:	f001 fba8 	bl	800817c <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_02_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_02_LED_Pin;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a30:	2301      	movs	r3, #1
 8006a32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006a34:	2302      	movs	r3, #2
 8006a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_02_LED_GPIO_Port, &GPIO_InitStruct);
 8006a3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a40:	4619      	mov	r1, r3
 8006a42:	480d      	ldr	r0, [pc, #52]	@ (8006a78 <MX_GPIO_Init+0x300>)
 8006a44:	f001 fb9a 	bl	800817c <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_01_CS_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_01_CS_Pin;
 8006a48:	2302      	movs	r3, #2
 8006a4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a50:	2301      	movs	r3, #1
 8006a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a54:	2303      	movs	r3, #3
 8006a56:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_01_CS_GPIO_Port, &GPIO_InitStruct);
 8006a58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	4806      	ldr	r0, [pc, #24]	@ (8006a78 <MX_GPIO_Init+0x300>)
 8006a60:	f001 fb8c 	bl	800817c <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_01_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_01_LED_Pin;
 8006a64:	2301      	movs	r3, #1
 8006a66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e013      	b.n	8006a94 <MX_GPIO_Init+0x31c>
 8006a6c:	40023800 	.word	0x40023800
 8006a70:	40021000 	.word	0x40021000
 8006a74:	40022000 	.word	0x40022000
 8006a78:	40020800 	.word	0x40020800
 8006a7c:	40021400 	.word	0x40021400
 8006a80:	40020000 	.word	0x40020000
 8006a84:	40021c00 	.word	0x40021c00
 8006a88:	40020400 	.word	0x40020400
 8006a8c:	40021800 	.word	0x40021800
 8006a90:	40020c00 	.word	0x40020c00
 8006a94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006a96:	2302      	movs	r3, #2
 8006a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_01_LED_GPIO_Port, &GPIO_InitStruct);
 8006a9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	485c      	ldr	r0, [pc, #368]	@ (8006c18 <MX_GPIO_Init+0x4a0>)
 8006aa6:	f001 fb69 	bl	800817c <HAL_GPIO_Init>

  /*Configure GPIO pin : USART2_ENABLE_Pin */
  GPIO_InitStruct.Pin = USART2_ENABLE_Pin;
 8006aaa:	2302      	movs	r3, #2
 8006aac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006ab6:	2302      	movs	r3, #2
 8006ab8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USART2_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8006aba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006abe:	4619      	mov	r1, r3
 8006ac0:	4855      	ldr	r0, [pc, #340]	@ (8006c18 <MX_GPIO_Init+0x4a0>)
 8006ac2:	f001 fb5b 	bl	800817c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_14_Pin GPIO_07_Pin LED_01_Pin LED_02_Pin */
  GPIO_InitStruct.Pin = GPIO_14_Pin|GPIO_07_Pin|LED_01_Pin|LED_02_Pin;
 8006ac6:	f24c 030c 	movw	r3, #49164	@ 0xc00c
 8006aca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006acc:	2301      	movs	r3, #1
 8006ace:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006ad8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006adc:	4619      	mov	r1, r3
 8006ade:	484f      	ldr	r0, [pc, #316]	@ (8006c1c <MX_GPIO_Init+0x4a4>)
 8006ae0:	f001 fb4c 	bl	800817c <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_CS_01_Pin CELL11_CS_02_Pin GPIO_11_Pin GPIO_12_Pin
                           CS_Pin LED_03_Pin LED_07_Pin USART1_ENABLE_Pin */
  GPIO_InitStruct.Pin = CELL11_CS_01_Pin|CELL11_CS_02_Pin|GPIO_11_Pin|GPIO_12_Pin
 8006ae4:	f24c 433b 	movw	r3, #50235	@ 0xc43b
 8006ae8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |CS_Pin|LED_03_Pin|LED_07_Pin|USART1_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006aea:	2301      	movs	r3, #1
 8006aec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aee:	2300      	movs	r3, #0
 8006af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006af2:	2300      	movs	r3, #0
 8006af4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006af6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006afa:	4619      	mov	r1, r3
 8006afc:	4848      	ldr	r0, [pc, #288]	@ (8006c20 <MX_GPIO_Init+0x4a8>)
 8006afe:	f001 fb3d 	bl	800817c <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_CS_08_Pin CELL11_CS_09_Pin DISPLAY_IO_1_Pin DISPLAY_IO_2_Pin
                           BACKLIGHT_1_Pin BACKLIGHT_2_Pin LED_09_Pin LED_04_Pin
                           LED_08_Pin */
  GPIO_InitStruct.Pin = CELL11_CS_08_Pin|CELL11_CS_09_Pin|DISPLAY_IO_1_Pin|DISPLAY_IO_2_Pin
 8006b02:	f24e 033f 	movw	r3, #57407	@ 0xe03f
 8006b06:	627b      	str	r3, [r7, #36]	@ 0x24
                          |BACKLIGHT_1_Pin|BACKLIGHT_2_Pin|LED_09_Pin|LED_04_Pin
                          |LED_08_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b10:	2300      	movs	r3, #0
 8006b12:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006b14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b18:	4619      	mov	r1, r3
 8006b1a:	4842      	ldr	r0, [pc, #264]	@ (8006c24 <MX_GPIO_Init+0x4ac>)
 8006b1c:	f001 fb2e 	bl	800817c <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL11_TEMP_03_CS_Pin */
  GPIO_InitStruct.Pin = CELL11_TEMP_03_CS_Pin;
 8006b20:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006b24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b26:	2301      	movs	r3, #1
 8006b28:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL11_TEMP_03_CS_GPIO_Port, &GPIO_InitStruct);
 8006b32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b36:	4619      	mov	r1, r3
 8006b38:	4839      	ldr	r0, [pc, #228]	@ (8006c20 <MX_GPIO_Init+0x4a8>)
 8006b3a:	f001 fb1f 	bl	800817c <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_TEMP_03_LED_Pin CELL11_TEMP_02_LED_Pin CELL11_TEMP_01_LED_Pin */
  GPIO_InitStruct.Pin = CELL11_TEMP_03_LED_Pin|CELL11_TEMP_02_LED_Pin|CELL11_TEMP_01_LED_Pin;
 8006b3e:	f44f 53a2 	mov.w	r3, #5184	@ 0x1440
 8006b42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b44:	2301      	movs	r3, #1
 8006b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006b48:	2302      	movs	r3, #2
 8006b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006b50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b54:	4619      	mov	r1, r3
 8006b56:	4831      	ldr	r0, [pc, #196]	@ (8006c1c <MX_GPIO_Init+0x4a4>)
 8006b58:	f001 fb10 	bl	800817c <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_TEMP_02_CS_Pin CELL11_TEMP_01_CS_Pin */
  GPIO_InitStruct.Pin = CELL11_TEMP_02_CS_Pin|CELL11_TEMP_01_CS_Pin;
 8006b5c:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8006b60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b62:	2301      	movs	r3, #1
 8006b64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b66:	2301      	movs	r3, #1
 8006b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006b6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b72:	4619      	mov	r1, r3
 8006b74:	4829      	ldr	r0, [pc, #164]	@ (8006c1c <MX_GPIO_Init+0x4a4>)
 8006b76:	f001 fb01 	bl	800817c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS1_Pin USART3_ENABLE_Pin DISPLAY_CS_Pin SPI5_CS_02_Pin */
  GPIO_InitStruct.Pin = CS1_Pin|USART3_ENABLE_Pin|DISPLAY_CS_Pin|SPI5_CS_02_Pin;
 8006b7a:	f640 430c 	movw	r3, #3084	@ 0xc0c
 8006b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b80:	2301      	movs	r3, #1
 8006b82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b84:	2300      	movs	r3, #0
 8006b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006b8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b90:	4619      	mov	r1, r3
 8006b92:	4825      	ldr	r0, [pc, #148]	@ (8006c28 <MX_GPIO_Init+0x4b0>)
 8006b94:	f001 faf2 	bl	800817c <HAL_GPIO_Init>

  /*Configure GPIO pins : PUSH_BUTTON_01_Pin PUSH_BUTTON_02_Pin PUSH_BUTTON_03_Pin PUSH_BUTTON_04_Pin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_01_Pin|PUSH_BUTTON_02_Pin|PUSH_BUTTON_03_Pin|PUSH_BUTTON_04_Pin;
 8006b98:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8006b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006b9e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8006ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006ba8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006bac:	4619      	mov	r1, r3
 8006bae:	481e      	ldr	r0, [pc, #120]	@ (8006c28 <MX_GPIO_Init+0x4b0>)
 8006bb0:	f001 fae4 	bl	800817c <HAL_GPIO_Init>

  /*Configure GPIO pin : CD_Pin */
  GPIO_InitStruct.Pin = CD_Pin;
 8006bb4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006bb8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 8006bc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	4814      	ldr	r0, [pc, #80]	@ (8006c1c <MX_GPIO_Init+0x4a4>)
 8006bca:	f001 fad7 	bl	800817c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIP_SWITCH_01_Pin DIP_SWITCH_02_Pin DIP_SWITCH_03_Pin DIP_SWITCH_04_Pin */
  GPIO_InitStruct.Pin = DIP_SWITCH_01_Pin|DIP_SWITCH_02_Pin|DIP_SWITCH_03_Pin|DIP_SWITCH_04_Pin;
 8006bce:	23f0      	movs	r3, #240	@ 0xf0
 8006bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006bda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006bde:	4619      	mov	r1, r3
 8006be0:	4811      	ldr	r0, [pc, #68]	@ (8006c28 <MX_GPIO_Init+0x4b0>)
 8006be2:	f001 facb 	bl	800817c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIP_SWITCH_MODE_01_Pin DIP_SWITCH_MODE_02_Pin DIP_SWITCH_MODE_03_Pin DIP_SWITCH_MODE_04_Pin */
  GPIO_InitStruct.Pin = DIP_SWITCH_MODE_01_Pin|DIP_SWITCH_MODE_02_Pin|DIP_SWITCH_MODE_03_Pin|DIP_SWITCH_MODE_04_Pin;
 8006be6:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8006bea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006bec:	2300      	movs	r3, #0
 8006bee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006bf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	480a      	ldr	r0, [pc, #40]	@ (8006c24 <MX_GPIO_Init+0x4ac>)
 8006bfc:	f001 fabe 	bl	800817c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006c00:	2200      	movs	r2, #0
 8006c02:	2100      	movs	r1, #0
 8006c04:	2028      	movs	r0, #40	@ 0x28
 8006c06:	f001 f9f0 	bl	8007fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006c0a:	2028      	movs	r0, #40	@ 0x28
 8006c0c:	f001 fa09 	bl	8008022 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8006c10:	bf00      	nop
 8006c12:	3738      	adds	r7, #56	@ 0x38
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	40020000 	.word	0x40020000
 8006c1c:	40021c00 	.word	0x40021c00
 8006c20:	40020400 	.word	0x40020400
 8006c24:	40021800 	.word	0x40021800
 8006c28:	40020c00 	.word	0x40020c00

08006c2c <HAL_GPIO_EXTI_Callback>:
}



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	4603      	mov	r3, r0
 8006c34:	80fb      	strh	r3, [r7, #6]
    UNUSED(GPIO_Pin);
    Push_ButtonHandler(GPIO_Pin);
 8006c36:	88fb      	ldrh	r3, [r7, #6]
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7fa fa57 	bl	80010ec <Push_ButtonHandler>
}
 8006c3e:	bf00      	nop
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
	...

08006c48 <HAL_UARTEx_RxEventCallback>:
	HAL_GPIO_WritePin(GPIOB, USART1_ENABLE_Pin, GPIO_PIN_RESET);

}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	460b      	mov	r3, r1
 8006c52:	807b      	strh	r3, [r7, #2]
	if (RxData_modbus_01[0] == SLAVE_ID)
 8006c54:	4b33      	ldr	r3, [pc, #204]	@ (8006d24 <HAL_UARTEx_RxEventCallback+0xdc>)
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	2b07      	cmp	r3, #7
 8006c5a:	d143      	bne.n	8006ce4 <HAL_UARTEx_RxEventCallback+0x9c>
	{
		switch (RxData_modbus_01[1]){
 8006c5c:	4b31      	ldr	r3, [pc, #196]	@ (8006d24 <HAL_UARTEx_RxEventCallback+0xdc>)
 8006c5e:	785b      	ldrb	r3, [r3, #1]
 8006c60:	3b01      	subs	r3, #1
 8006c62:	2b0f      	cmp	r3, #15
 8006c64:	d83a      	bhi.n	8006cdc <HAL_UARTEx_RxEventCallback+0x94>
 8006c66:	a201      	add	r2, pc, #4	@ (adr r2, 8006c6c <HAL_UARTEx_RxEventCallback+0x24>)
 8006c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6c:	08006cb9 	.word	0x08006cb9
 8006c70:	08006cbf 	.word	0x08006cbf
 8006c74:	08006cad 	.word	0x08006cad
 8006c78:	08006cb3 	.word	0x08006cb3
 8006c7c:	08006cd1 	.word	0x08006cd1
 8006c80:	08006cc5 	.word	0x08006cc5
 8006c84:	08006cdd 	.word	0x08006cdd
 8006c88:	08006cdd 	.word	0x08006cdd
 8006c8c:	08006cdd 	.word	0x08006cdd
 8006c90:	08006cdd 	.word	0x08006cdd
 8006c94:	08006cdd 	.word	0x08006cdd
 8006c98:	08006cdd 	.word	0x08006cdd
 8006c9c:	08006cdd 	.word	0x08006cdd
 8006ca0:	08006cdd 	.word	0x08006cdd
 8006ca4:	08006cd7 	.word	0x08006cd7
 8006ca8:	08006ccb 	.word	0x08006ccb
		case 0x03:
			readHoldingRegs();
 8006cac:	f7fe f9f4 	bl	8005098 <readHoldingRegs>
			break;
 8006cb0:	e018      	b.n	8006ce4 <HAL_UARTEx_RxEventCallback+0x9c>
		case 0x04:
			readInputRegs();
 8006cb2:	f7fe fa65 	bl	8005180 <readInputRegs>
			break;
 8006cb6:	e015      	b.n	8006ce4 <HAL_UARTEx_RxEventCallback+0x9c>
		case 0x01:
			readCoils();
 8006cb8:	f7fe fad6 	bl	8005268 <readCoils>
			break;
 8006cbc:	e012      	b.n	8006ce4 <HAL_UARTEx_RxEventCallback+0x9c>
		case 0x02:
			readInputs();
 8006cbe:	f7fe fb83 	bl	80053c8 <readInputs>
			break;
 8006cc2:	e00f      	b.n	8006ce4 <HAL_UARTEx_RxEventCallback+0x9c>
		case 0x06:
			writeSingleReg();
 8006cc4:	f7fe fcac 	bl	8005620 <writeSingleReg>
			break;
 8006cc8:	e00c      	b.n	8006ce4 <HAL_UARTEx_RxEventCallback+0x9c>
		case 0x10:
			writeHoldingRegs();
 8006cca:	f7fe fc2d 	bl	8005528 <writeHoldingRegs>
			break;
 8006cce:	e009      	b.n	8006ce4 <HAL_UARTEx_RxEventCallback+0x9c>
		case 0x05:
			writeSingleCoil();
 8006cd0:	f7fe fcf2 	bl	80056b8 <writeSingleCoil>
			break;
 8006cd4:	e006      	b.n	8006ce4 <HAL_UARTEx_RxEventCallback+0x9c>
		case 0x0F:
			writeMultiCoils();
 8006cd6:	f7fe fd6b 	bl	80057b0 <writeMultiCoils>
			break;
 8006cda:	e003      	b.n	8006ce4 <HAL_UARTEx_RxEventCallback+0x9c>
		default:
			modbusException(ILLEGAL_FUNCTION);
 8006cdc:	2001      	movs	r0, #1
 8006cde:	f7fe f9bb 	bl	8005058 <modbusException>
			break;
 8006ce2:	bf00      	nop
		}
	}


	HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData_modbus_01, sizeof(RxData_modbus_01));
 8006ce4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006ce8:	490e      	ldr	r1, [pc, #56]	@ (8006d24 <HAL_UARTEx_RxEventCallback+0xdc>)
 8006cea:	480f      	ldr	r0, [pc, #60]	@ (8006d28 <HAL_UARTEx_RxEventCallback+0xe0>)
 8006cec:	f004 fa2b 	bl	800b146 <HAL_UARTEx_ReceiveToIdle_IT>

	HAL_UARTEx_ReceiveToIdle_IT(&huart2, RxData_modbus_02, sizeof(RxData_modbus_02));
 8006cf0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006cf4:	490d      	ldr	r1, [pc, #52]	@ (8006d2c <HAL_UARTEx_RxEventCallback+0xe4>)
 8006cf6:	480e      	ldr	r0, [pc, #56]	@ (8006d30 <HAL_UARTEx_RxEventCallback+0xe8>)
 8006cf8:	f004 fa25 	bl	800b146 <HAL_UARTEx_ReceiveToIdle_IT>

	HAL_UARTEx_ReceiveToIdle_IT(&huart3, RxData_modbus_03, sizeof(RxData_modbus_03));
 8006cfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006d00:	490c      	ldr	r1, [pc, #48]	@ (8006d34 <HAL_UARTEx_RxEventCallback+0xec>)
 8006d02:	480d      	ldr	r0, [pc, #52]	@ (8006d38 <HAL_UARTEx_RxEventCallback+0xf0>)
 8006d04:	f004 fa1f 	bl	800b146 <HAL_UARTEx_ReceiveToIdle_IT>

	HAL_UARTEx_ReceiveToIdle_IT(&huart6, RxData_modbus_04, sizeof(RxData_modbus_04));
 8006d08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006d0c:	490b      	ldr	r1, [pc, #44]	@ (8006d3c <HAL_UARTEx_RxEventCallback+0xf4>)
 8006d0e:	480c      	ldr	r0, [pc, #48]	@ (8006d40 <HAL_UARTEx_RxEventCallback+0xf8>)
 8006d10:	f004 fa19 	bl	800b146 <HAL_UARTEx_ReceiveToIdle_IT>

	modebus_rx_flag = 1 ;
 8006d14:	4b0b      	ldr	r3, [pc, #44]	@ (8006d44 <HAL_UARTEx_RxEventCallback+0xfc>)
 8006d16:	2201      	movs	r2, #1
 8006d18:	701a      	strb	r2, [r3, #0]

//	HAL_UART_RxCpltCallback
}
 8006d1a:	bf00      	nop
 8006d1c:	3708      	adds	r7, #8
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	20001298 	.word	0x20001298
 8006d28:	20001af4 	.word	0x20001af4
 8006d2c:	20001498 	.word	0x20001498
 8006d30:	20001b3c 	.word	0x20001b3c
 8006d34:	20001598 	.word	0x20001598
 8006d38:	20001b84 	.word	0x20001b84
 8006d3c:	20001698 	.word	0x20001698
 8006d40:	20001bcc 	.word	0x20001bcc
 8006d44:	20001294 	.word	0x20001294

08006d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006d4c:	b672      	cpsid	i
}
 8006d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006d50:	bf00      	nop
 8006d52:	e7fd      	b.n	8006d50 <Error_Handler+0x8>

08006d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	607b      	str	r3, [r7, #4]
 8006d5e:	4b10      	ldr	r3, [pc, #64]	@ (8006da0 <HAL_MspInit+0x4c>)
 8006d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d62:	4a0f      	ldr	r2, [pc, #60]	@ (8006da0 <HAL_MspInit+0x4c>)
 8006d64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006d68:	6453      	str	r3, [r2, #68]	@ 0x44
 8006d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006da0 <HAL_MspInit+0x4c>)
 8006d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d72:	607b      	str	r3, [r7, #4]
 8006d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006d76:	2300      	movs	r3, #0
 8006d78:	603b      	str	r3, [r7, #0]
 8006d7a:	4b09      	ldr	r3, [pc, #36]	@ (8006da0 <HAL_MspInit+0x4c>)
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d7e:	4a08      	ldr	r2, [pc, #32]	@ (8006da0 <HAL_MspInit+0x4c>)
 8006d80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d84:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d86:	4b06      	ldr	r3, [pc, #24]	@ (8006da0 <HAL_MspInit+0x4c>)
 8006d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d8e:	603b      	str	r3, [r7, #0]
 8006d90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006d92:	bf00      	nop
 8006d94:	370c      	adds	r7, #12
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	40023800 	.word	0x40023800

08006da4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b08c      	sub	sp, #48	@ 0x30
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006dac:	f107 031c 	add.w	r3, r7, #28
 8006db0:	2200      	movs	r2, #0
 8006db2:	601a      	str	r2, [r3, #0]
 8006db4:	605a      	str	r2, [r3, #4]
 8006db6:	609a      	str	r2, [r3, #8]
 8006db8:	60da      	str	r2, [r3, #12]
 8006dba:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a4a      	ldr	r2, [pc, #296]	@ (8006eec <HAL_CAN_MspInit+0x148>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d145      	bne.n	8006e52 <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8006dc6:	4b4a      	ldr	r3, [pc, #296]	@ (8006ef0 <HAL_CAN_MspInit+0x14c>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	4a48      	ldr	r2, [pc, #288]	@ (8006ef0 <HAL_CAN_MspInit+0x14c>)
 8006dce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8006dd0:	4b47      	ldr	r3, [pc, #284]	@ (8006ef0 <HAL_CAN_MspInit+0x14c>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d10d      	bne.n	8006df4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8006dd8:	2300      	movs	r3, #0
 8006dda:	61bb      	str	r3, [r7, #24]
 8006ddc:	4b45      	ldr	r3, [pc, #276]	@ (8006ef4 <HAL_CAN_MspInit+0x150>)
 8006dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de0:	4a44      	ldr	r2, [pc, #272]	@ (8006ef4 <HAL_CAN_MspInit+0x150>)
 8006de2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006de6:	6413      	str	r3, [r2, #64]	@ 0x40
 8006de8:	4b42      	ldr	r3, [pc, #264]	@ (8006ef4 <HAL_CAN_MspInit+0x150>)
 8006dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006df0:	61bb      	str	r3, [r7, #24]
 8006df2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006df4:	2300      	movs	r3, #0
 8006df6:	617b      	str	r3, [r7, #20]
 8006df8:	4b3e      	ldr	r3, [pc, #248]	@ (8006ef4 <HAL_CAN_MspInit+0x150>)
 8006dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dfc:	4a3d      	ldr	r2, [pc, #244]	@ (8006ef4 <HAL_CAN_MspInit+0x150>)
 8006dfe:	f043 0308 	orr.w	r3, r3, #8
 8006e02:	6313      	str	r3, [r2, #48]	@ 0x30
 8006e04:	4b3b      	ldr	r3, [pc, #236]	@ (8006ef4 <HAL_CAN_MspInit+0x150>)
 8006e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e08:	f003 0308 	and.w	r3, r3, #8
 8006e0c:	617b      	str	r3, [r7, #20]
 8006e0e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006e10:	2303      	movs	r3, #3
 8006e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e14:	2302      	movs	r3, #2
 8006e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8006e20:	2309      	movs	r3, #9
 8006e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e24:	f107 031c 	add.w	r3, r7, #28
 8006e28:	4619      	mov	r1, r3
 8006e2a:	4833      	ldr	r0, [pc, #204]	@ (8006ef8 <HAL_CAN_MspInit+0x154>)
 8006e2c:	f001 f9a6 	bl	800817c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8006e30:	2200      	movs	r2, #0
 8006e32:	2100      	movs	r1, #0
 8006e34:	2014      	movs	r0, #20
 8006e36:	f001 f8d8 	bl	8007fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8006e3a:	2014      	movs	r0, #20
 8006e3c:	f001 f8f1 	bl	8008022 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8006e40:	2200      	movs	r2, #0
 8006e42:	2100      	movs	r1, #0
 8006e44:	2015      	movs	r0, #21
 8006e46:	f001 f8d0 	bl	8007fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8006e4a:	2015      	movs	r0, #21
 8006e4c:	f001 f8e9 	bl	8008022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8006e50:	e048      	b.n	8006ee4 <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a29      	ldr	r2, [pc, #164]	@ (8006efc <HAL_CAN_MspInit+0x158>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d143      	bne.n	8006ee4 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	613b      	str	r3, [r7, #16]
 8006e60:	4b24      	ldr	r3, [pc, #144]	@ (8006ef4 <HAL_CAN_MspInit+0x150>)
 8006e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e64:	4a23      	ldr	r2, [pc, #140]	@ (8006ef4 <HAL_CAN_MspInit+0x150>)
 8006e66:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006e6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8006e6c:	4b21      	ldr	r3, [pc, #132]	@ (8006ef4 <HAL_CAN_MspInit+0x150>)
 8006e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006e74:	613b      	str	r3, [r7, #16]
 8006e76:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8006e78:	4b1d      	ldr	r3, [pc, #116]	@ (8006ef0 <HAL_CAN_MspInit+0x14c>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	4a1c      	ldr	r2, [pc, #112]	@ (8006ef0 <HAL_CAN_MspInit+0x14c>)
 8006e80:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8006e82:	4b1b      	ldr	r3, [pc, #108]	@ (8006ef0 <HAL_CAN_MspInit+0x14c>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d10d      	bne.n	8006ea6 <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	60fb      	str	r3, [r7, #12]
 8006e8e:	4b19      	ldr	r3, [pc, #100]	@ (8006ef4 <HAL_CAN_MspInit+0x150>)
 8006e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e92:	4a18      	ldr	r2, [pc, #96]	@ (8006ef4 <HAL_CAN_MspInit+0x150>)
 8006e94:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006e98:	6413      	str	r3, [r2, #64]	@ 0x40
 8006e9a:	4b16      	ldr	r3, [pc, #88]	@ (8006ef4 <HAL_CAN_MspInit+0x150>)
 8006e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ea2:	60fb      	str	r3, [r7, #12]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	60bb      	str	r3, [r7, #8]
 8006eaa:	4b12      	ldr	r3, [pc, #72]	@ (8006ef4 <HAL_CAN_MspInit+0x150>)
 8006eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eae:	4a11      	ldr	r2, [pc, #68]	@ (8006ef4 <HAL_CAN_MspInit+0x150>)
 8006eb0:	f043 0302 	orr.w	r3, r3, #2
 8006eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8006eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8006ef4 <HAL_CAN_MspInit+0x150>)
 8006eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eba:	f003 0302 	and.w	r3, r3, #2
 8006ebe:	60bb      	str	r3, [r7, #8]
 8006ec0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8006ec2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8006ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ec8:	2302      	movs	r3, #2
 8006eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8006ed4:	2309      	movs	r3, #9
 8006ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ed8:	f107 031c 	add.w	r3, r7, #28
 8006edc:	4619      	mov	r1, r3
 8006ede:	4808      	ldr	r0, [pc, #32]	@ (8006f00 <HAL_CAN_MspInit+0x15c>)
 8006ee0:	f001 f94c 	bl	800817c <HAL_GPIO_Init>
}
 8006ee4:	bf00      	nop
 8006ee6:	3730      	adds	r7, #48	@ 0x30
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	40006400 	.word	0x40006400
 8006ef0:	20001c14 	.word	0x20001c14
 8006ef4:	40023800 	.word	0x40023800
 8006ef8:	40020c00 	.word	0x40020c00
 8006efc:	40006800 	.word	0x40006800
 8006f00:	40020400 	.word	0x40020400

08006f04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b08e      	sub	sp, #56	@ 0x38
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f10:	2200      	movs	r2, #0
 8006f12:	601a      	str	r2, [r3, #0]
 8006f14:	605a      	str	r2, [r3, #4]
 8006f16:	609a      	str	r2, [r3, #8]
 8006f18:	60da      	str	r2, [r3, #12]
 8006f1a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a4c      	ldr	r2, [pc, #304]	@ (8007054 <HAL_I2C_MspInit+0x150>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d12d      	bne.n	8006f82 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f26:	2300      	movs	r3, #0
 8006f28:	623b      	str	r3, [r7, #32]
 8006f2a:	4b4b      	ldr	r3, [pc, #300]	@ (8007058 <HAL_I2C_MspInit+0x154>)
 8006f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f2e:	4a4a      	ldr	r2, [pc, #296]	@ (8007058 <HAL_I2C_MspInit+0x154>)
 8006f30:	f043 0302 	orr.w	r3, r3, #2
 8006f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8006f36:	4b48      	ldr	r3, [pc, #288]	@ (8007058 <HAL_I2C_MspInit+0x154>)
 8006f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f3a:	f003 0302 	and.w	r3, r3, #2
 8006f3e:	623b      	str	r3, [r7, #32]
 8006f40:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006f42:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006f46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006f48:	2312      	movs	r3, #18
 8006f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f50:	2303      	movs	r3, #3
 8006f52:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006f54:	2304      	movs	r3, #4
 8006f56:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	483f      	ldr	r0, [pc, #252]	@ (800705c <HAL_I2C_MspInit+0x158>)
 8006f60:	f001 f90c 	bl	800817c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006f64:	2300      	movs	r3, #0
 8006f66:	61fb      	str	r3, [r7, #28]
 8006f68:	4b3b      	ldr	r3, [pc, #236]	@ (8007058 <HAL_I2C_MspInit+0x154>)
 8006f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f6c:	4a3a      	ldr	r2, [pc, #232]	@ (8007058 <HAL_I2C_MspInit+0x154>)
 8006f6e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006f72:	6413      	str	r3, [r2, #64]	@ 0x40
 8006f74:	4b38      	ldr	r3, [pc, #224]	@ (8007058 <HAL_I2C_MspInit+0x154>)
 8006f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006f7c:	61fb      	str	r3, [r7, #28]
 8006f7e:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8006f80:	e063      	b.n	800704a <HAL_I2C_MspInit+0x146>
  else if(hi2c->Instance==I2C2)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a36      	ldr	r2, [pc, #216]	@ (8007060 <HAL_I2C_MspInit+0x15c>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d12c      	bne.n	8006fe6 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	61bb      	str	r3, [r7, #24]
 8006f90:	4b31      	ldr	r3, [pc, #196]	@ (8007058 <HAL_I2C_MspInit+0x154>)
 8006f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f94:	4a30      	ldr	r2, [pc, #192]	@ (8007058 <HAL_I2C_MspInit+0x154>)
 8006f96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8006f9c:	4b2e      	ldr	r3, [pc, #184]	@ (8007058 <HAL_I2C_MspInit+0x154>)
 8006f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fa4:	61bb      	str	r3, [r7, #24]
 8006fa6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006fa8:	2330      	movs	r3, #48	@ 0x30
 8006faa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006fac:	2312      	movs	r3, #18
 8006fae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006fb8:	2304      	movs	r3, #4
 8006fba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006fbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	4828      	ldr	r0, [pc, #160]	@ (8007064 <HAL_I2C_MspInit+0x160>)
 8006fc4:	f001 f8da 	bl	800817c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006fc8:	2300      	movs	r3, #0
 8006fca:	617b      	str	r3, [r7, #20]
 8006fcc:	4b22      	ldr	r3, [pc, #136]	@ (8007058 <HAL_I2C_MspInit+0x154>)
 8006fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fd0:	4a21      	ldr	r2, [pc, #132]	@ (8007058 <HAL_I2C_MspInit+0x154>)
 8006fd2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006fd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8006fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8007058 <HAL_I2C_MspInit+0x154>)
 8006fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006fe0:	617b      	str	r3, [r7, #20]
 8006fe2:	697b      	ldr	r3, [r7, #20]
}
 8006fe4:	e031      	b.n	800704a <HAL_I2C_MspInit+0x146>
  else if(hi2c->Instance==I2C3)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a1f      	ldr	r2, [pc, #124]	@ (8007068 <HAL_I2C_MspInit+0x164>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d12c      	bne.n	800704a <HAL_I2C_MspInit+0x146>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	613b      	str	r3, [r7, #16]
 8006ff4:	4b18      	ldr	r3, [pc, #96]	@ (8007058 <HAL_I2C_MspInit+0x154>)
 8006ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ff8:	4a17      	ldr	r2, [pc, #92]	@ (8007058 <HAL_I2C_MspInit+0x154>)
 8006ffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ffe:	6313      	str	r3, [r2, #48]	@ 0x30
 8007000:	4b15      	ldr	r3, [pc, #84]	@ (8007058 <HAL_I2C_MspInit+0x154>)
 8007002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007004:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007008:	613b      	str	r3, [r7, #16]
 800700a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800700c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8007010:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007012:	2312      	movs	r3, #18
 8007014:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007016:	2300      	movs	r3, #0
 8007018:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800701a:	2303      	movs	r3, #3
 800701c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800701e:	2304      	movs	r3, #4
 8007020:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007022:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007026:	4619      	mov	r1, r3
 8007028:	480e      	ldr	r0, [pc, #56]	@ (8007064 <HAL_I2C_MspInit+0x160>)
 800702a:	f001 f8a7 	bl	800817c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800702e:	2300      	movs	r3, #0
 8007030:	60fb      	str	r3, [r7, #12]
 8007032:	4b09      	ldr	r3, [pc, #36]	@ (8007058 <HAL_I2C_MspInit+0x154>)
 8007034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007036:	4a08      	ldr	r2, [pc, #32]	@ (8007058 <HAL_I2C_MspInit+0x154>)
 8007038:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800703c:	6413      	str	r3, [r2, #64]	@ 0x40
 800703e:	4b06      	ldr	r3, [pc, #24]	@ (8007058 <HAL_I2C_MspInit+0x154>)
 8007040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007042:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007046:	60fb      	str	r3, [r7, #12]
 8007048:	68fb      	ldr	r3, [r7, #12]
}
 800704a:	bf00      	nop
 800704c:	3738      	adds	r7, #56	@ 0x38
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	40005400 	.word	0x40005400
 8007058:	40023800 	.word	0x40023800
 800705c:	40020400 	.word	0x40020400
 8007060:	40005800 	.word	0x40005800
 8007064:	40021c00 	.word	0x40021c00
 8007068:	40005c00 	.word	0x40005c00

0800706c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b090      	sub	sp, #64	@ 0x40
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007074:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007078:	2200      	movs	r2, #0
 800707a:	601a      	str	r2, [r3, #0]
 800707c:	605a      	str	r2, [r3, #4]
 800707e:	609a      	str	r2, [r3, #8]
 8007080:	60da      	str	r2, [r3, #12]
 8007082:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a6d      	ldr	r2, [pc, #436]	@ (8007240 <HAL_SPI_MspInit+0x1d4>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d12c      	bne.n	80070e8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800708e:	2300      	movs	r3, #0
 8007090:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007092:	4b6c      	ldr	r3, [pc, #432]	@ (8007244 <HAL_SPI_MspInit+0x1d8>)
 8007094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007096:	4a6b      	ldr	r2, [pc, #428]	@ (8007244 <HAL_SPI_MspInit+0x1d8>)
 8007098:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800709c:	6453      	str	r3, [r2, #68]	@ 0x44
 800709e:	4b69      	ldr	r3, [pc, #420]	@ (8007244 <HAL_SPI_MspInit+0x1d8>)
 80070a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80070a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80070a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070aa:	2300      	movs	r3, #0
 80070ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80070ae:	4b65      	ldr	r3, [pc, #404]	@ (8007244 <HAL_SPI_MspInit+0x1d8>)
 80070b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070b2:	4a64      	ldr	r2, [pc, #400]	@ (8007244 <HAL_SPI_MspInit+0x1d8>)
 80070b4:	f043 0301 	orr.w	r3, r3, #1
 80070b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80070ba:	4b62      	ldr	r3, [pc, #392]	@ (8007244 <HAL_SPI_MspInit+0x1d8>)
 80070bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070be:	f003 0301 	and.w	r3, r3, #1
 80070c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80070c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80070c6:	23e0      	movs	r3, #224	@ 0xe0
 80070c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070ca:	2302      	movs	r3, #2
 80070cc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070ce:	2300      	movs	r3, #0
 80070d0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070d2:	2303      	movs	r3, #3
 80070d4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80070d6:	2305      	movs	r3, #5
 80070d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80070de:	4619      	mov	r1, r3
 80070e0:	4859      	ldr	r0, [pc, #356]	@ (8007248 <HAL_SPI_MspInit+0x1dc>)
 80070e2:	f001 f84b 	bl	800817c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80070e6:	e0a7      	b.n	8007238 <HAL_SPI_MspInit+0x1cc>
  else if(hspi->Instance==SPI2)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a57      	ldr	r2, [pc, #348]	@ (800724c <HAL_SPI_MspInit+0x1e0>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d12c      	bne.n	800714c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80070f2:	2300      	movs	r3, #0
 80070f4:	623b      	str	r3, [r7, #32]
 80070f6:	4b53      	ldr	r3, [pc, #332]	@ (8007244 <HAL_SPI_MspInit+0x1d8>)
 80070f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070fa:	4a52      	ldr	r2, [pc, #328]	@ (8007244 <HAL_SPI_MspInit+0x1d8>)
 80070fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007100:	6413      	str	r3, [r2, #64]	@ 0x40
 8007102:	4b50      	ldr	r3, [pc, #320]	@ (8007244 <HAL_SPI_MspInit+0x1d8>)
 8007104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007106:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800710a:	623b      	str	r3, [r7, #32]
 800710c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800710e:	2300      	movs	r3, #0
 8007110:	61fb      	str	r3, [r7, #28]
 8007112:	4b4c      	ldr	r3, [pc, #304]	@ (8007244 <HAL_SPI_MspInit+0x1d8>)
 8007114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007116:	4a4b      	ldr	r2, [pc, #300]	@ (8007244 <HAL_SPI_MspInit+0x1d8>)
 8007118:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800711c:	6313      	str	r3, [r2, #48]	@ 0x30
 800711e:	4b49      	ldr	r3, [pc, #292]	@ (8007244 <HAL_SPI_MspInit+0x1d8>)
 8007120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007126:	61fb      	str	r3, [r7, #28]
 8007128:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800712a:	230e      	movs	r3, #14
 800712c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800712e:	2302      	movs	r3, #2
 8007130:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007132:	2300      	movs	r3, #0
 8007134:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007136:	2303      	movs	r3, #3
 8007138:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800713a:	2305      	movs	r3, #5
 800713c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800713e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007142:	4619      	mov	r1, r3
 8007144:	4842      	ldr	r0, [pc, #264]	@ (8007250 <HAL_SPI_MspInit+0x1e4>)
 8007146:	f001 f819 	bl	800817c <HAL_GPIO_Init>
}
 800714a:	e075      	b.n	8007238 <HAL_SPI_MspInit+0x1cc>
  else if(hspi->Instance==SPI3)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a40      	ldr	r2, [pc, #256]	@ (8007254 <HAL_SPI_MspInit+0x1e8>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d12d      	bne.n	80071b2 <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007156:	2300      	movs	r3, #0
 8007158:	61bb      	str	r3, [r7, #24]
 800715a:	4b3a      	ldr	r3, [pc, #232]	@ (8007244 <HAL_SPI_MspInit+0x1d8>)
 800715c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800715e:	4a39      	ldr	r2, [pc, #228]	@ (8007244 <HAL_SPI_MspInit+0x1d8>)
 8007160:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007164:	6413      	str	r3, [r2, #64]	@ 0x40
 8007166:	4b37      	ldr	r3, [pc, #220]	@ (8007244 <HAL_SPI_MspInit+0x1d8>)
 8007168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800716a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800716e:	61bb      	str	r3, [r7, #24]
 8007170:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007172:	2300      	movs	r3, #0
 8007174:	617b      	str	r3, [r7, #20]
 8007176:	4b33      	ldr	r3, [pc, #204]	@ (8007244 <HAL_SPI_MspInit+0x1d8>)
 8007178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800717a:	4a32      	ldr	r2, [pc, #200]	@ (8007244 <HAL_SPI_MspInit+0x1d8>)
 800717c:	f043 0304 	orr.w	r3, r3, #4
 8007180:	6313      	str	r3, [r2, #48]	@ 0x30
 8007182:	4b30      	ldr	r3, [pc, #192]	@ (8007244 <HAL_SPI_MspInit+0x1d8>)
 8007184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007186:	f003 0304 	and.w	r3, r3, #4
 800718a:	617b      	str	r3, [r7, #20]
 800718c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800718e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8007192:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007194:	2302      	movs	r3, #2
 8007196:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007198:	2300      	movs	r3, #0
 800719a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800719c:	2303      	movs	r3, #3
 800719e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80071a0:	2306      	movs	r3, #6
 80071a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80071a8:	4619      	mov	r1, r3
 80071aa:	482b      	ldr	r0, [pc, #172]	@ (8007258 <HAL_SPI_MspInit+0x1ec>)
 80071ac:	f000 ffe6 	bl	800817c <HAL_GPIO_Init>
}
 80071b0:	e042      	b.n	8007238 <HAL_SPI_MspInit+0x1cc>
  else if(hspi->Instance==SPI4)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a29      	ldr	r2, [pc, #164]	@ (800725c <HAL_SPI_MspInit+0x1f0>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d13d      	bne.n	8007238 <HAL_SPI_MspInit+0x1cc>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80071bc:	2300      	movs	r3, #0
 80071be:	613b      	str	r3, [r7, #16]
 80071c0:	4b20      	ldr	r3, [pc, #128]	@ (8007244 <HAL_SPI_MspInit+0x1d8>)
 80071c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071c4:	4a1f      	ldr	r2, [pc, #124]	@ (8007244 <HAL_SPI_MspInit+0x1d8>)
 80071c6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80071ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80071cc:	4b1d      	ldr	r3, [pc, #116]	@ (8007244 <HAL_SPI_MspInit+0x1d8>)
 80071ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80071d4:	613b      	str	r3, [r7, #16]
 80071d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80071d8:	2300      	movs	r3, #0
 80071da:	60fb      	str	r3, [r7, #12]
 80071dc:	4b19      	ldr	r3, [pc, #100]	@ (8007244 <HAL_SPI_MspInit+0x1d8>)
 80071de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071e0:	4a18      	ldr	r2, [pc, #96]	@ (8007244 <HAL_SPI_MspInit+0x1d8>)
 80071e2:	f043 0310 	orr.w	r3, r3, #16
 80071e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80071e8:	4b16      	ldr	r3, [pc, #88]	@ (8007244 <HAL_SPI_MspInit+0x1d8>)
 80071ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ec:	f003 0310 	and.w	r3, r3, #16
 80071f0:	60fb      	str	r3, [r7, #12]
 80071f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 80071f4:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80071f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071fa:	2302      	movs	r3, #2
 80071fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071fe:	2300      	movs	r3, #0
 8007200:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007202:	2303      	movs	r3, #3
 8007204:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8007206:	2305      	movs	r3, #5
 8007208:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800720a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800720e:	4619      	mov	r1, r3
 8007210:	4813      	ldr	r0, [pc, #76]	@ (8007260 <HAL_SPI_MspInit+0x1f4>)
 8007212:	f000 ffb3 	bl	800817c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007216:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800721a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800721c:	2302      	movs	r3, #2
 800721e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007220:	2301      	movs	r3, #1
 8007222:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007224:	2303      	movs	r3, #3
 8007226:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8007228:	2305      	movs	r3, #5
 800722a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800722c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007230:	4619      	mov	r1, r3
 8007232:	480b      	ldr	r0, [pc, #44]	@ (8007260 <HAL_SPI_MspInit+0x1f4>)
 8007234:	f000 ffa2 	bl	800817c <HAL_GPIO_Init>
}
 8007238:	bf00      	nop
 800723a:	3740      	adds	r7, #64	@ 0x40
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	40013000 	.word	0x40013000
 8007244:	40023800 	.word	0x40023800
 8007248:	40020000 	.word	0x40020000
 800724c:	40003800 	.word	0x40003800
 8007250:	40022000 	.word	0x40022000
 8007254:	40003c00 	.word	0x40003c00
 8007258:	40020800 	.word	0x40020800
 800725c:	40013400 	.word	0x40013400
 8007260:	40021000 	.word	0x40021000

08007264 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a0b      	ldr	r2, [pc, #44]	@ (80072a0 <HAL_TIM_Base_MspInit+0x3c>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d10d      	bne.n	8007292 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007276:	2300      	movs	r3, #0
 8007278:	60fb      	str	r3, [r7, #12]
 800727a:	4b0a      	ldr	r3, [pc, #40]	@ (80072a4 <HAL_TIM_Base_MspInit+0x40>)
 800727c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800727e:	4a09      	ldr	r2, [pc, #36]	@ (80072a4 <HAL_TIM_Base_MspInit+0x40>)
 8007280:	f043 0301 	orr.w	r3, r3, #1
 8007284:	6453      	str	r3, [r2, #68]	@ 0x44
 8007286:	4b07      	ldr	r3, [pc, #28]	@ (80072a4 <HAL_TIM_Base_MspInit+0x40>)
 8007288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800728a:	f003 0301 	and.w	r3, r3, #1
 800728e:	60fb      	str	r3, [r7, #12]
 8007290:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8007292:	bf00      	nop
 8007294:	3714      	adds	r7, #20
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	40010000 	.word	0x40010000
 80072a4:	40023800 	.word	0x40023800

080072a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b090      	sub	sp, #64	@ 0x40
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80072b4:	2200      	movs	r2, #0
 80072b6:	601a      	str	r2, [r3, #0]
 80072b8:	605a      	str	r2, [r3, #4]
 80072ba:	609a      	str	r2, [r3, #8]
 80072bc:	60da      	str	r2, [r3, #12]
 80072be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a74      	ldr	r2, [pc, #464]	@ (8007498 <HAL_UART_MspInit+0x1f0>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d134      	bne.n	8007334 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80072ca:	2300      	movs	r3, #0
 80072cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072ce:	4b73      	ldr	r3, [pc, #460]	@ (800749c <HAL_UART_MspInit+0x1f4>)
 80072d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072d2:	4a72      	ldr	r2, [pc, #456]	@ (800749c <HAL_UART_MspInit+0x1f4>)
 80072d4:	f043 0310 	orr.w	r3, r3, #16
 80072d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80072da:	4b70      	ldr	r3, [pc, #448]	@ (800749c <HAL_UART_MspInit+0x1f4>)
 80072dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072de:	f003 0310 	and.w	r3, r3, #16
 80072e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80072e6:	2300      	movs	r3, #0
 80072e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80072ea:	4b6c      	ldr	r3, [pc, #432]	@ (800749c <HAL_UART_MspInit+0x1f4>)
 80072ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ee:	4a6b      	ldr	r2, [pc, #428]	@ (800749c <HAL_UART_MspInit+0x1f4>)
 80072f0:	f043 0302 	orr.w	r3, r3, #2
 80072f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80072f6:	4b69      	ldr	r3, [pc, #420]	@ (800749c <HAL_UART_MspInit+0x1f4>)
 80072f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072fa:	f003 0302 	and.w	r3, r3, #2
 80072fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8007300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007302:	23c0      	movs	r3, #192	@ 0xc0
 8007304:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007306:	2302      	movs	r3, #2
 8007308:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800730a:	2300      	movs	r3, #0
 800730c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800730e:	2303      	movs	r3, #3
 8007310:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007312:	2307      	movs	r3, #7
 8007314:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007316:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800731a:	4619      	mov	r1, r3
 800731c:	4860      	ldr	r0, [pc, #384]	@ (80074a0 <HAL_UART_MspInit+0x1f8>)
 800731e:	f000 ff2d 	bl	800817c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007322:	2200      	movs	r2, #0
 8007324:	2100      	movs	r1, #0
 8007326:	2025      	movs	r0, #37	@ 0x25
 8007328:	f000 fe5f 	bl	8007fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800732c:	2025      	movs	r0, #37	@ 0x25
 800732e:	f000 fe78 	bl	8008022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8007332:	e0ad      	b.n	8007490 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART2)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a5a      	ldr	r2, [pc, #360]	@ (80074a4 <HAL_UART_MspInit+0x1fc>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d134      	bne.n	80073a8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 800733e:	2300      	movs	r3, #0
 8007340:	623b      	str	r3, [r7, #32]
 8007342:	4b56      	ldr	r3, [pc, #344]	@ (800749c <HAL_UART_MspInit+0x1f4>)
 8007344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007346:	4a55      	ldr	r2, [pc, #340]	@ (800749c <HAL_UART_MspInit+0x1f4>)
 8007348:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800734c:	6413      	str	r3, [r2, #64]	@ 0x40
 800734e:	4b53      	ldr	r3, [pc, #332]	@ (800749c <HAL_UART_MspInit+0x1f4>)
 8007350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007356:	623b      	str	r3, [r7, #32]
 8007358:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800735a:	2300      	movs	r3, #0
 800735c:	61fb      	str	r3, [r7, #28]
 800735e:	4b4f      	ldr	r3, [pc, #316]	@ (800749c <HAL_UART_MspInit+0x1f4>)
 8007360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007362:	4a4e      	ldr	r2, [pc, #312]	@ (800749c <HAL_UART_MspInit+0x1f4>)
 8007364:	f043 0301 	orr.w	r3, r3, #1
 8007368:	6313      	str	r3, [r2, #48]	@ 0x30
 800736a:	4b4c      	ldr	r3, [pc, #304]	@ (800749c <HAL_UART_MspInit+0x1f4>)
 800736c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800736e:	f003 0301 	and.w	r3, r3, #1
 8007372:	61fb      	str	r3, [r7, #28]
 8007374:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007376:	230c      	movs	r3, #12
 8007378:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800737a:	2302      	movs	r3, #2
 800737c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800737e:	2300      	movs	r3, #0
 8007380:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007382:	2303      	movs	r3, #3
 8007384:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007386:	2307      	movs	r3, #7
 8007388:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800738a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800738e:	4619      	mov	r1, r3
 8007390:	4845      	ldr	r0, [pc, #276]	@ (80074a8 <HAL_UART_MspInit+0x200>)
 8007392:	f000 fef3 	bl	800817c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007396:	2200      	movs	r2, #0
 8007398:	2100      	movs	r1, #0
 800739a:	2026      	movs	r0, #38	@ 0x26
 800739c:	f000 fe25 	bl	8007fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80073a0:	2026      	movs	r0, #38	@ 0x26
 80073a2:	f000 fe3e 	bl	8008022 <HAL_NVIC_EnableIRQ>
}
 80073a6:	e073      	b.n	8007490 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART3)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a3f      	ldr	r2, [pc, #252]	@ (80074ac <HAL_UART_MspInit+0x204>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d135      	bne.n	800741e <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 80073b2:	2300      	movs	r3, #0
 80073b4:	61bb      	str	r3, [r7, #24]
 80073b6:	4b39      	ldr	r3, [pc, #228]	@ (800749c <HAL_UART_MspInit+0x1f4>)
 80073b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ba:	4a38      	ldr	r2, [pc, #224]	@ (800749c <HAL_UART_MspInit+0x1f4>)
 80073bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80073c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80073c2:	4b36      	ldr	r3, [pc, #216]	@ (800749c <HAL_UART_MspInit+0x1f4>)
 80073c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80073ca:	61bb      	str	r3, [r7, #24]
 80073cc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80073ce:	2300      	movs	r3, #0
 80073d0:	617b      	str	r3, [r7, #20]
 80073d2:	4b32      	ldr	r3, [pc, #200]	@ (800749c <HAL_UART_MspInit+0x1f4>)
 80073d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073d6:	4a31      	ldr	r2, [pc, #196]	@ (800749c <HAL_UART_MspInit+0x1f4>)
 80073d8:	f043 0308 	orr.w	r3, r3, #8
 80073dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80073de:	4b2f      	ldr	r3, [pc, #188]	@ (800749c <HAL_UART_MspInit+0x1f4>)
 80073e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073e2:	f003 0308 	and.w	r3, r3, #8
 80073e6:	617b      	str	r3, [r7, #20]
 80073e8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80073ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80073ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073f0:	2302      	movs	r3, #2
 80073f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073f4:	2300      	movs	r3, #0
 80073f6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073f8:	2303      	movs	r3, #3
 80073fa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80073fc:	2307      	movs	r3, #7
 80073fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007400:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007404:	4619      	mov	r1, r3
 8007406:	482a      	ldr	r0, [pc, #168]	@ (80074b0 <HAL_UART_MspInit+0x208>)
 8007408:	f000 feb8 	bl	800817c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800740c:	2200      	movs	r2, #0
 800740e:	2100      	movs	r1, #0
 8007410:	2027      	movs	r0, #39	@ 0x27
 8007412:	f000 fdea 	bl	8007fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8007416:	2027      	movs	r0, #39	@ 0x27
 8007418:	f000 fe03 	bl	8008022 <HAL_NVIC_EnableIRQ>
}
 800741c:	e038      	b.n	8007490 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART6)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a24      	ldr	r2, [pc, #144]	@ (80074b4 <HAL_UART_MspInit+0x20c>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d133      	bne.n	8007490 <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART6_CLK_ENABLE();
 8007428:	2300      	movs	r3, #0
 800742a:	613b      	str	r3, [r7, #16]
 800742c:	4b1b      	ldr	r3, [pc, #108]	@ (800749c <HAL_UART_MspInit+0x1f4>)
 800742e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007430:	4a1a      	ldr	r2, [pc, #104]	@ (800749c <HAL_UART_MspInit+0x1f4>)
 8007432:	f043 0320 	orr.w	r3, r3, #32
 8007436:	6453      	str	r3, [r2, #68]	@ 0x44
 8007438:	4b18      	ldr	r3, [pc, #96]	@ (800749c <HAL_UART_MspInit+0x1f4>)
 800743a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800743c:	f003 0320 	and.w	r3, r3, #32
 8007440:	613b      	str	r3, [r7, #16]
 8007442:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007444:	2300      	movs	r3, #0
 8007446:	60fb      	str	r3, [r7, #12]
 8007448:	4b14      	ldr	r3, [pc, #80]	@ (800749c <HAL_UART_MspInit+0x1f4>)
 800744a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800744c:	4a13      	ldr	r2, [pc, #76]	@ (800749c <HAL_UART_MspInit+0x1f4>)
 800744e:	f043 0304 	orr.w	r3, r3, #4
 8007452:	6313      	str	r3, [r2, #48]	@ 0x30
 8007454:	4b11      	ldr	r3, [pc, #68]	@ (800749c <HAL_UART_MspInit+0x1f4>)
 8007456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007458:	f003 0304 	and.w	r3, r3, #4
 800745c:	60fb      	str	r3, [r7, #12]
 800745e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007460:	23c0      	movs	r3, #192	@ 0xc0
 8007462:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007464:	2302      	movs	r3, #2
 8007466:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007468:	2300      	movs	r3, #0
 800746a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800746c:	2303      	movs	r3, #3
 800746e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007470:	2308      	movs	r3, #8
 8007472:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007474:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007478:	4619      	mov	r1, r3
 800747a:	480f      	ldr	r0, [pc, #60]	@ (80074b8 <HAL_UART_MspInit+0x210>)
 800747c:	f000 fe7e 	bl	800817c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8007480:	2200      	movs	r2, #0
 8007482:	2100      	movs	r1, #0
 8007484:	2047      	movs	r0, #71	@ 0x47
 8007486:	f000 fdb0 	bl	8007fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800748a:	2047      	movs	r0, #71	@ 0x47
 800748c:	f000 fdc9 	bl	8008022 <HAL_NVIC_EnableIRQ>
}
 8007490:	bf00      	nop
 8007492:	3740      	adds	r7, #64	@ 0x40
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	40011000 	.word	0x40011000
 800749c:	40023800 	.word	0x40023800
 80074a0:	40020400 	.word	0x40020400
 80074a4:	40004400 	.word	0x40004400
 80074a8:	40020000 	.word	0x40020000
 80074ac:	40004800 	.word	0x40004800
 80074b0:	40020c00 	.word	0x40020c00
 80074b4:	40011400 	.word	0x40011400
 80074b8:	40020800 	.word	0x40020800

080074bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80074bc:	b480      	push	{r7}
 80074be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80074c0:	bf00      	nop
 80074c2:	e7fd      	b.n	80074c0 <NMI_Handler+0x4>

080074c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80074c4:	b480      	push	{r7}
 80074c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80074c8:	bf00      	nop
 80074ca:	e7fd      	b.n	80074c8 <HardFault_Handler+0x4>

080074cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80074cc:	b480      	push	{r7}
 80074ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80074d0:	bf00      	nop
 80074d2:	e7fd      	b.n	80074d0 <MemManage_Handler+0x4>

080074d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80074d4:	b480      	push	{r7}
 80074d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80074d8:	bf00      	nop
 80074da:	e7fd      	b.n	80074d8 <BusFault_Handler+0x4>

080074dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80074dc:	b480      	push	{r7}
 80074de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80074e0:	bf00      	nop
 80074e2:	e7fd      	b.n	80074e0 <UsageFault_Handler+0x4>

080074e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80074e4:	b480      	push	{r7}
 80074e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80074e8:	bf00      	nop
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80074f2:	b480      	push	{r7}
 80074f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80074f6:	bf00      	nop
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007500:	b480      	push	{r7}
 8007502:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007504:	bf00      	nop
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr

0800750e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800750e:	b580      	push	{r7, lr}
 8007510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007512:	f000 f917 	bl	8007744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007516:	bf00      	nop
 8007518:	bd80      	pop	{r7, pc}
	...

0800751c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007520:	4802      	ldr	r0, [pc, #8]	@ (800752c <CAN1_RX0_IRQHandler+0x10>)
 8007522:	f000 fa4e 	bl	80079c2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8007526:	bf00      	nop
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	20001800 	.word	0x20001800

08007530 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007534:	4802      	ldr	r0, [pc, #8]	@ (8007540 <CAN1_RX1_IRQHandler+0x10>)
 8007536:	f000 fa44 	bl	80079c2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800753a:	bf00      	nop
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	20001800 	.word	0x20001800

08007544 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007548:	4802      	ldr	r0, [pc, #8]	@ (8007554 <USART1_IRQHandler+0x10>)
 800754a:	f003 fe59 	bl	800b200 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800754e:	bf00      	nop
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	20001af4 	.word	0x20001af4

08007558 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800755c:	4802      	ldr	r0, [pc, #8]	@ (8007568 <USART2_IRQHandler+0x10>)
 800755e:	f003 fe4f 	bl	800b200 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007562:	bf00      	nop
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	20001b3c 	.word	0x20001b3c

0800756c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8007570:	4802      	ldr	r0, [pc, #8]	@ (800757c <USART3_IRQHandler+0x10>)
 8007572:	f003 fe45 	bl	800b200 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8007576:	bf00      	nop
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	20001b84 	.word	0x20001b84

08007580 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_01_Pin);
 8007584:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8007588:	f000 ffd8 	bl	800853c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_02_Pin);
 800758c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8007590:	f000 ffd4 	bl	800853c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_03_Pin);
 8007594:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8007598:	f000 ffd0 	bl	800853c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_04_Pin);
 800759c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80075a0:	f000 ffcc 	bl	800853c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80075a4:	bf00      	nop
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80075ac:	4802      	ldr	r0, [pc, #8]	@ (80075b8 <USART6_IRQHandler+0x10>)
 80075ae:	f003 fe27 	bl	800b200 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80075b2:	bf00      	nop
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	20001bcc 	.word	0x20001bcc

080075bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b086      	sub	sp, #24
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80075c4:	4a14      	ldr	r2, [pc, #80]	@ (8007618 <_sbrk+0x5c>)
 80075c6:	4b15      	ldr	r3, [pc, #84]	@ (800761c <_sbrk+0x60>)
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80075d0:	4b13      	ldr	r3, [pc, #76]	@ (8007620 <_sbrk+0x64>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d102      	bne.n	80075de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80075d8:	4b11      	ldr	r3, [pc, #68]	@ (8007620 <_sbrk+0x64>)
 80075da:	4a12      	ldr	r2, [pc, #72]	@ (8007624 <_sbrk+0x68>)
 80075dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80075de:	4b10      	ldr	r3, [pc, #64]	@ (8007620 <_sbrk+0x64>)
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4413      	add	r3, r2
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d207      	bcs.n	80075fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80075ec:	f004 fef8 	bl	800c3e0 <__errno>
 80075f0:	4603      	mov	r3, r0
 80075f2:	220c      	movs	r2, #12
 80075f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80075f6:	f04f 33ff 	mov.w	r3, #4294967295
 80075fa:	e009      	b.n	8007610 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80075fc:	4b08      	ldr	r3, [pc, #32]	@ (8007620 <_sbrk+0x64>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007602:	4b07      	ldr	r3, [pc, #28]	@ (8007620 <_sbrk+0x64>)
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4413      	add	r3, r2
 800760a:	4a05      	ldr	r2, [pc, #20]	@ (8007620 <_sbrk+0x64>)
 800760c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800760e:	68fb      	ldr	r3, [r7, #12]
}
 8007610:	4618      	mov	r0, r3
 8007612:	3718      	adds	r7, #24
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	20030000 	.word	0x20030000
 800761c:	00000400 	.word	0x00000400
 8007620:	20001c18 	.word	0x20001c18
 8007624:	20001d80 	.word	0x20001d80

08007628 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007628:	b480      	push	{r7}
 800762a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800762c:	4b06      	ldr	r3, [pc, #24]	@ (8007648 <SystemInit+0x20>)
 800762e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007632:	4a05      	ldr	r2, [pc, #20]	@ (8007648 <SystemInit+0x20>)
 8007634:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007638:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800763c:	bf00      	nop
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr
 8007646:	bf00      	nop
 8007648:	e000ed00 	.word	0xe000ed00

0800764c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800764c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007684 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007650:	f7ff ffea 	bl	8007628 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007654:	480c      	ldr	r0, [pc, #48]	@ (8007688 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007656:	490d      	ldr	r1, [pc, #52]	@ (800768c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007658:	4a0d      	ldr	r2, [pc, #52]	@ (8007690 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800765a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800765c:	e002      	b.n	8007664 <LoopCopyDataInit>

0800765e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800765e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007662:	3304      	adds	r3, #4

08007664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007668:	d3f9      	bcc.n	800765e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800766a:	4a0a      	ldr	r2, [pc, #40]	@ (8007694 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800766c:	4c0a      	ldr	r4, [pc, #40]	@ (8007698 <LoopFillZerobss+0x22>)
  movs r3, #0
 800766e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007670:	e001      	b.n	8007676 <LoopFillZerobss>

08007672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007674:	3204      	adds	r2, #4

08007676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007678:	d3fb      	bcc.n	8007672 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800767a:	f004 feb7 	bl	800c3ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800767e:	f7fe fbed 	bl	8005e5c <main>
  bx  lr    
 8007682:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8007684:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8007688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800768c:	20000a04 	.word	0x20000a04
  ldr r2, =_sidata
 8007690:	0800da88 	.word	0x0800da88
  ldr r2, =_sbss
 8007694:	20000a04 	.word	0x20000a04
  ldr r4, =_ebss
 8007698:	20001d7c 	.word	0x20001d7c

0800769c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800769c:	e7fe      	b.n	800769c <ADC_IRQHandler>
	...

080076a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80076a4:	4b0e      	ldr	r3, [pc, #56]	@ (80076e0 <HAL_Init+0x40>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a0d      	ldr	r2, [pc, #52]	@ (80076e0 <HAL_Init+0x40>)
 80076aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80076ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80076b0:	4b0b      	ldr	r3, [pc, #44]	@ (80076e0 <HAL_Init+0x40>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a0a      	ldr	r2, [pc, #40]	@ (80076e0 <HAL_Init+0x40>)
 80076b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80076ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80076bc:	4b08      	ldr	r3, [pc, #32]	@ (80076e0 <HAL_Init+0x40>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a07      	ldr	r2, [pc, #28]	@ (80076e0 <HAL_Init+0x40>)
 80076c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80076c8:	2003      	movs	r0, #3
 80076ca:	f000 fc83 	bl	8007fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80076ce:	200f      	movs	r0, #15
 80076d0:	f000 f808 	bl	80076e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80076d4:	f7ff fb3e 	bl	8006d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	40023c00 	.word	0x40023c00

080076e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80076ec:	4b12      	ldr	r3, [pc, #72]	@ (8007738 <HAL_InitTick+0x54>)
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	4b12      	ldr	r3, [pc, #72]	@ (800773c <HAL_InitTick+0x58>)
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	4619      	mov	r1, r3
 80076f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80076fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80076fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007702:	4618      	mov	r0, r3
 8007704:	f000 fc9b 	bl	800803e <HAL_SYSTICK_Config>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d001      	beq.n	8007712 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e00e      	b.n	8007730 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2b0f      	cmp	r3, #15
 8007716:	d80a      	bhi.n	800772e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007718:	2200      	movs	r2, #0
 800771a:	6879      	ldr	r1, [r7, #4]
 800771c:	f04f 30ff 	mov.w	r0, #4294967295
 8007720:	f000 fc63 	bl	8007fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007724:	4a06      	ldr	r2, [pc, #24]	@ (8007740 <HAL_InitTick+0x5c>)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800772a:	2300      	movs	r3, #0
 800772c:	e000      	b.n	8007730 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
}
 8007730:	4618      	mov	r0, r3
 8007732:	3708      	adds	r7, #8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}
 8007738:	20000994 	.word	0x20000994
 800773c:	2000099c 	.word	0x2000099c
 8007740:	20000998 	.word	0x20000998

08007744 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007744:	b480      	push	{r7}
 8007746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007748:	4b06      	ldr	r3, [pc, #24]	@ (8007764 <HAL_IncTick+0x20>)
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	461a      	mov	r2, r3
 800774e:	4b06      	ldr	r3, [pc, #24]	@ (8007768 <HAL_IncTick+0x24>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4413      	add	r3, r2
 8007754:	4a04      	ldr	r2, [pc, #16]	@ (8007768 <HAL_IncTick+0x24>)
 8007756:	6013      	str	r3, [r2, #0]
}
 8007758:	bf00      	nop
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop
 8007764:	2000099c 	.word	0x2000099c
 8007768:	20001c1c 	.word	0x20001c1c

0800776c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800776c:	b480      	push	{r7}
 800776e:	af00      	add	r7, sp, #0
  return uwTick;
 8007770:	4b03      	ldr	r3, [pc, #12]	@ (8007780 <HAL_GetTick+0x14>)
 8007772:	681b      	ldr	r3, [r3, #0]
}
 8007774:	4618      	mov	r0, r3
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	20001c1c 	.word	0x20001c1c

08007784 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800778c:	f7ff ffee 	bl	800776c <HAL_GetTick>
 8007790:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800779c:	d005      	beq.n	80077aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800779e:	4b0a      	ldr	r3, [pc, #40]	@ (80077c8 <HAL_Delay+0x44>)
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	461a      	mov	r2, r3
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	4413      	add	r3, r2
 80077a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80077aa:	bf00      	nop
 80077ac:	f7ff ffde 	bl	800776c <HAL_GetTick>
 80077b0:	4602      	mov	r2, r0
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	1ad3      	subs	r3, r2, r3
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d8f7      	bhi.n	80077ac <HAL_Delay+0x28>
  {
  }
}
 80077bc:	bf00      	nop
 80077be:	bf00      	nop
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	2000099c 	.word	0x2000099c

080077cc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d101      	bne.n	80077de <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e0ed      	b.n	80079ba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d102      	bne.n	80077f0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f7ff fada 	bl	8006da4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f042 0201 	orr.w	r2, r2, #1
 80077fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007800:	f7ff ffb4 	bl	800776c <HAL_GetTick>
 8007804:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007806:	e012      	b.n	800782e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007808:	f7ff ffb0 	bl	800776c <HAL_GetTick>
 800780c:	4602      	mov	r2, r0
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	2b0a      	cmp	r3, #10
 8007814:	d90b      	bls.n	800782e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800781a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2205      	movs	r2, #5
 8007826:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e0c5      	b.n	80079ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	f003 0301 	and.w	r3, r3, #1
 8007838:	2b00      	cmp	r3, #0
 800783a:	d0e5      	beq.n	8007808 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f022 0202 	bic.w	r2, r2, #2
 800784a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800784c:	f7ff ff8e 	bl	800776c <HAL_GetTick>
 8007850:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007852:	e012      	b.n	800787a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007854:	f7ff ff8a 	bl	800776c <HAL_GetTick>
 8007858:	4602      	mov	r2, r0
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	2b0a      	cmp	r3, #10
 8007860:	d90b      	bls.n	800787a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007866:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2205      	movs	r2, #5
 8007872:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	e09f      	b.n	80079ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	f003 0302 	and.w	r3, r3, #2
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1e5      	bne.n	8007854 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	7e1b      	ldrb	r3, [r3, #24]
 800788c:	2b01      	cmp	r3, #1
 800788e:	d108      	bne.n	80078a2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800789e:	601a      	str	r2, [r3, #0]
 80078a0:	e007      	b.n	80078b2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80078b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	7e5b      	ldrb	r3, [r3, #25]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d108      	bne.n	80078cc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80078c8:	601a      	str	r2, [r3, #0]
 80078ca:	e007      	b.n	80078dc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078da:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	7e9b      	ldrb	r3, [r3, #26]
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d108      	bne.n	80078f6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f042 0220 	orr.w	r2, r2, #32
 80078f2:	601a      	str	r2, [r3, #0]
 80078f4:	e007      	b.n	8007906 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f022 0220 	bic.w	r2, r2, #32
 8007904:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	7edb      	ldrb	r3, [r3, #27]
 800790a:	2b01      	cmp	r3, #1
 800790c:	d108      	bne.n	8007920 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f022 0210 	bic.w	r2, r2, #16
 800791c:	601a      	str	r2, [r3, #0]
 800791e:	e007      	b.n	8007930 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f042 0210 	orr.w	r2, r2, #16
 800792e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	7f1b      	ldrb	r3, [r3, #28]
 8007934:	2b01      	cmp	r3, #1
 8007936:	d108      	bne.n	800794a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f042 0208 	orr.w	r2, r2, #8
 8007946:	601a      	str	r2, [r3, #0]
 8007948:	e007      	b.n	800795a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f022 0208 	bic.w	r2, r2, #8
 8007958:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	7f5b      	ldrb	r3, [r3, #29]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d108      	bne.n	8007974 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f042 0204 	orr.w	r2, r2, #4
 8007970:	601a      	str	r2, [r3, #0]
 8007972:	e007      	b.n	8007984 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f022 0204 	bic.w	r2, r2, #4
 8007982:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	689a      	ldr	r2, [r3, #8]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	431a      	orrs	r2, r3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	431a      	orrs	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	695b      	ldr	r3, [r3, #20]
 8007998:	ea42 0103 	orr.w	r1, r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	1e5a      	subs	r2, r3, #1
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	430a      	orrs	r2, r1
 80079a8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b08a      	sub	sp, #40	@ 0x28
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80079ca:	2300      	movs	r3, #0
 80079cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	695b      	ldr	r3, [r3, #20]
 80079d4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	699b      	ldr	r3, [r3, #24]
 80079fc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80079fe:	6a3b      	ldr	r3, [r7, #32]
 8007a00:	f003 0301 	and.w	r3, r3, #1
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d07c      	beq.n	8007b02 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	f003 0301 	and.w	r3, r3, #1
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d023      	beq.n	8007a5a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2201      	movs	r2, #1
 8007a18:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	f003 0302 	and.w	r3, r3, #2
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d003      	beq.n	8007a2c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 f983 	bl	8007d30 <HAL_CAN_TxMailbox0CompleteCallback>
 8007a2a:	e016      	b.n	8007a5a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	f003 0304 	and.w	r3, r3, #4
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d004      	beq.n	8007a40 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a38:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007a3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a3e:	e00c      	b.n	8007a5a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	f003 0308 	and.w	r3, r3, #8
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d004      	beq.n	8007a54 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a4c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007a50:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a52:	e002      	b.n	8007a5a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 f989 	bl	8007d6c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d024      	beq.n	8007aae <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007a6c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d003      	beq.n	8007a80 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 f963 	bl	8007d44 <HAL_CAN_TxMailbox1CompleteCallback>
 8007a7e:	e016      	b.n	8007aae <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d004      	beq.n	8007a94 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a8c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007a90:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a92:	e00c      	b.n	8007aae <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d004      	beq.n	8007aa8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8007a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007aa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007aa6:	e002      	b.n	8007aae <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 f969 	bl	8007d80 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d024      	beq.n	8007b02 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007ac0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d003      	beq.n	8007ad4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 f943 	bl	8007d58 <HAL_CAN_TxMailbox2CompleteCallback>
 8007ad2:	e016      	b.n	8007b02 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d004      	beq.n	8007ae8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ae4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ae6:	e00c      	b.n	8007b02 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d004      	beq.n	8007afc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007af8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007afa:	e002      	b.n	8007b02 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 f949 	bl	8007d94 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007b02:	6a3b      	ldr	r3, [r7, #32]
 8007b04:	f003 0308 	and.w	r3, r3, #8
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00c      	beq.n	8007b26 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	f003 0310 	and.w	r3, r3, #16
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d007      	beq.n	8007b26 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b18:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007b1c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2210      	movs	r2, #16
 8007b24:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007b26:	6a3b      	ldr	r3, [r7, #32]
 8007b28:	f003 0304 	and.w	r3, r3, #4
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00b      	beq.n	8007b48 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	f003 0308 	and.w	r3, r3, #8
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d006      	beq.n	8007b48 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2208      	movs	r2, #8
 8007b40:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f93a 	bl	8007dbc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007b48:	6a3b      	ldr	r3, [r7, #32]
 8007b4a:	f003 0302 	and.w	r3, r3, #2
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d009      	beq.n	8007b66 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	f003 0303 	and.w	r3, r3, #3
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d002      	beq.n	8007b66 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 f921 	bl	8007da8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8007b66:	6a3b      	ldr	r3, [r7, #32]
 8007b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00c      	beq.n	8007b8a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	f003 0310 	and.w	r3, r3, #16
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d007      	beq.n	8007b8a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007b80:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2210      	movs	r2, #16
 8007b88:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8007b8a:	6a3b      	ldr	r3, [r7, #32]
 8007b8c:	f003 0320 	and.w	r3, r3, #32
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00b      	beq.n	8007bac <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	f003 0308 	and.w	r3, r3, #8
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d006      	beq.n	8007bac <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2208      	movs	r2, #8
 8007ba4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f91c 	bl	8007de4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007bac:	6a3b      	ldr	r3, [r7, #32]
 8007bae:	f003 0310 	and.w	r3, r3, #16
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d009      	beq.n	8007bca <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	f003 0303 	and.w	r3, r3, #3
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d002      	beq.n	8007bca <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 f903 	bl	8007dd0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007bca:	6a3b      	ldr	r3, [r7, #32]
 8007bcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00b      	beq.n	8007bec <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	f003 0310 	and.w	r3, r3, #16
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d006      	beq.n	8007bec <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2210      	movs	r2, #16
 8007be4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f906 	bl	8007df8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007bec:	6a3b      	ldr	r3, [r7, #32]
 8007bee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00b      	beq.n	8007c0e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	f003 0308 	and.w	r3, r3, #8
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d006      	beq.n	8007c0e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2208      	movs	r2, #8
 8007c06:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 f8ff 	bl	8007e0c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007c0e:	6a3b      	ldr	r3, [r7, #32]
 8007c10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d07b      	beq.n	8007d10 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	f003 0304 	and.w	r3, r3, #4
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d072      	beq.n	8007d08 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007c22:	6a3b      	ldr	r3, [r7, #32]
 8007c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d008      	beq.n	8007c3e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d003      	beq.n	8007c3e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8007c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c38:	f043 0301 	orr.w	r3, r3, #1
 8007c3c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007c3e:	6a3b      	ldr	r3, [r7, #32]
 8007c40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d008      	beq.n	8007c5a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d003      	beq.n	8007c5a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8007c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c54:	f043 0302 	orr.w	r3, r3, #2
 8007c58:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007c5a:	6a3b      	ldr	r3, [r7, #32]
 8007c5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d008      	beq.n	8007c76 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d003      	beq.n	8007c76 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8007c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c70:	f043 0304 	orr.w	r3, r3, #4
 8007c74:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007c76:	6a3b      	ldr	r3, [r7, #32]
 8007c78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d043      	beq.n	8007d08 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d03e      	beq.n	8007d08 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007c90:	2b60      	cmp	r3, #96	@ 0x60
 8007c92:	d02b      	beq.n	8007cec <HAL_CAN_IRQHandler+0x32a>
 8007c94:	2b60      	cmp	r3, #96	@ 0x60
 8007c96:	d82e      	bhi.n	8007cf6 <HAL_CAN_IRQHandler+0x334>
 8007c98:	2b50      	cmp	r3, #80	@ 0x50
 8007c9a:	d022      	beq.n	8007ce2 <HAL_CAN_IRQHandler+0x320>
 8007c9c:	2b50      	cmp	r3, #80	@ 0x50
 8007c9e:	d82a      	bhi.n	8007cf6 <HAL_CAN_IRQHandler+0x334>
 8007ca0:	2b40      	cmp	r3, #64	@ 0x40
 8007ca2:	d019      	beq.n	8007cd8 <HAL_CAN_IRQHandler+0x316>
 8007ca4:	2b40      	cmp	r3, #64	@ 0x40
 8007ca6:	d826      	bhi.n	8007cf6 <HAL_CAN_IRQHandler+0x334>
 8007ca8:	2b30      	cmp	r3, #48	@ 0x30
 8007caa:	d010      	beq.n	8007cce <HAL_CAN_IRQHandler+0x30c>
 8007cac:	2b30      	cmp	r3, #48	@ 0x30
 8007cae:	d822      	bhi.n	8007cf6 <HAL_CAN_IRQHandler+0x334>
 8007cb0:	2b10      	cmp	r3, #16
 8007cb2:	d002      	beq.n	8007cba <HAL_CAN_IRQHandler+0x2f8>
 8007cb4:	2b20      	cmp	r3, #32
 8007cb6:	d005      	beq.n	8007cc4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8007cb8:	e01d      	b.n	8007cf6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8007cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cbc:	f043 0308 	orr.w	r3, r3, #8
 8007cc0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007cc2:	e019      	b.n	8007cf8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc6:	f043 0310 	orr.w	r3, r3, #16
 8007cca:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007ccc:	e014      	b.n	8007cf8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd0:	f043 0320 	orr.w	r3, r3, #32
 8007cd4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007cd6:	e00f      	b.n	8007cf8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cde:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007ce0:	e00a      	b.n	8007cf8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ce8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007cea:	e005      	b.n	8007cf8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007cf2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007cf4:	e000      	b.n	8007cf8 <HAL_CAN_IRQHandler+0x336>
            break;
 8007cf6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	699a      	ldr	r2, [r3, #24]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007d06:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2204      	movs	r2, #4
 8007d0e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d008      	beq.n	8007d28 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d1c:	431a      	orrs	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f87c 	bl	8007e20 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007d28:	bf00      	nop
 8007d2a:	3728      	adds	r7, #40	@ 0x28
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8007d38:	bf00      	nop
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8007d4c:	bf00      	nop
 8007d4e:	370c      	adds	r7, #12
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8007d60:	bf00      	nop
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8007d74:	bf00      	nop
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007d88:	bf00      	nop
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007d9c:	bf00      	nop
 8007d9e:	370c      	adds	r7, #12
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8007db0:	bf00      	nop
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007dc4:	bf00      	nop
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8007dd8:	bf00      	nop
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007dec:	bf00      	nop
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007e28:	bf00      	nop
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f003 0307 	and.w	r3, r3, #7
 8007e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007e44:	4b0c      	ldr	r3, [pc, #48]	@ (8007e78 <__NVIC_SetPriorityGrouping+0x44>)
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007e50:	4013      	ands	r3, r2
 8007e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007e5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007e60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007e66:	4a04      	ldr	r2, [pc, #16]	@ (8007e78 <__NVIC_SetPriorityGrouping+0x44>)
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	60d3      	str	r3, [r2, #12]
}
 8007e6c:	bf00      	nop
 8007e6e:	3714      	adds	r7, #20
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr
 8007e78:	e000ed00 	.word	0xe000ed00

08007e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e80:	4b04      	ldr	r3, [pc, #16]	@ (8007e94 <__NVIC_GetPriorityGrouping+0x18>)
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	0a1b      	lsrs	r3, r3, #8
 8007e86:	f003 0307 	and.w	r3, r3, #7
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr
 8007e94:	e000ed00 	.word	0xe000ed00

08007e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	db0b      	blt.n	8007ec2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007eaa:	79fb      	ldrb	r3, [r7, #7]
 8007eac:	f003 021f 	and.w	r2, r3, #31
 8007eb0:	4907      	ldr	r1, [pc, #28]	@ (8007ed0 <__NVIC_EnableIRQ+0x38>)
 8007eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eb6:	095b      	lsrs	r3, r3, #5
 8007eb8:	2001      	movs	r0, #1
 8007eba:	fa00 f202 	lsl.w	r2, r0, r2
 8007ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007ec2:	bf00      	nop
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	e000e100 	.word	0xe000e100

08007ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	4603      	mov	r3, r0
 8007edc:	6039      	str	r1, [r7, #0]
 8007ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	db0a      	blt.n	8007efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	b2da      	uxtb	r2, r3
 8007eec:	490c      	ldr	r1, [pc, #48]	@ (8007f20 <__NVIC_SetPriority+0x4c>)
 8007eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ef2:	0112      	lsls	r2, r2, #4
 8007ef4:	b2d2      	uxtb	r2, r2
 8007ef6:	440b      	add	r3, r1
 8007ef8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007efc:	e00a      	b.n	8007f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	b2da      	uxtb	r2, r3
 8007f02:	4908      	ldr	r1, [pc, #32]	@ (8007f24 <__NVIC_SetPriority+0x50>)
 8007f04:	79fb      	ldrb	r3, [r7, #7]
 8007f06:	f003 030f 	and.w	r3, r3, #15
 8007f0a:	3b04      	subs	r3, #4
 8007f0c:	0112      	lsls	r2, r2, #4
 8007f0e:	b2d2      	uxtb	r2, r2
 8007f10:	440b      	add	r3, r1
 8007f12:	761a      	strb	r2, [r3, #24]
}
 8007f14:	bf00      	nop
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr
 8007f20:	e000e100 	.word	0xe000e100
 8007f24:	e000ed00 	.word	0xe000ed00

08007f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b089      	sub	sp, #36	@ 0x24
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f003 0307 	and.w	r3, r3, #7
 8007f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	f1c3 0307 	rsb	r3, r3, #7
 8007f42:	2b04      	cmp	r3, #4
 8007f44:	bf28      	it	cs
 8007f46:	2304      	movcs	r3, #4
 8007f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	3304      	adds	r3, #4
 8007f4e:	2b06      	cmp	r3, #6
 8007f50:	d902      	bls.n	8007f58 <NVIC_EncodePriority+0x30>
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	3b03      	subs	r3, #3
 8007f56:	e000      	b.n	8007f5a <NVIC_EncodePriority+0x32>
 8007f58:	2300      	movs	r3, #0
 8007f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	fa02 f303 	lsl.w	r3, r2, r3
 8007f66:	43da      	mvns	r2, r3
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	401a      	ands	r2, r3
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f70:	f04f 31ff 	mov.w	r1, #4294967295
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	fa01 f303 	lsl.w	r3, r1, r3
 8007f7a:	43d9      	mvns	r1, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f80:	4313      	orrs	r3, r2
         );
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3724      	adds	r7, #36	@ 0x24
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr
	...

08007f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007fa0:	d301      	bcc.n	8007fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e00f      	b.n	8007fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8007fd0 <SysTick_Config+0x40>)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	3b01      	subs	r3, #1
 8007fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007fae:	210f      	movs	r1, #15
 8007fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb4:	f7ff ff8e 	bl	8007ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007fb8:	4b05      	ldr	r3, [pc, #20]	@ (8007fd0 <SysTick_Config+0x40>)
 8007fba:	2200      	movs	r2, #0
 8007fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007fbe:	4b04      	ldr	r3, [pc, #16]	@ (8007fd0 <SysTick_Config+0x40>)
 8007fc0:	2207      	movs	r2, #7
 8007fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3708      	adds	r7, #8
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	e000e010 	.word	0xe000e010

08007fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f7ff ff29 	bl	8007e34 <__NVIC_SetPriorityGrouping>
}
 8007fe2:	bf00      	nop
 8007fe4:	3708      	adds	r7, #8
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b086      	sub	sp, #24
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	60b9      	str	r1, [r7, #8]
 8007ff4:	607a      	str	r2, [r7, #4]
 8007ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007ffc:	f7ff ff3e 	bl	8007e7c <__NVIC_GetPriorityGrouping>
 8008000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	68b9      	ldr	r1, [r7, #8]
 8008006:	6978      	ldr	r0, [r7, #20]
 8008008:	f7ff ff8e 	bl	8007f28 <NVIC_EncodePriority>
 800800c:	4602      	mov	r2, r0
 800800e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008012:	4611      	mov	r1, r2
 8008014:	4618      	mov	r0, r3
 8008016:	f7ff ff5d 	bl	8007ed4 <__NVIC_SetPriority>
}
 800801a:	bf00      	nop
 800801c:	3718      	adds	r7, #24
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b082      	sub	sp, #8
 8008026:	af00      	add	r7, sp, #0
 8008028:	4603      	mov	r3, r0
 800802a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800802c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008030:	4618      	mov	r0, r3
 8008032:	f7ff ff31 	bl	8007e98 <__NVIC_EnableIRQ>
}
 8008036:	bf00      	nop
 8008038:	3708      	adds	r7, #8
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800803e:	b580      	push	{r7, lr}
 8008040:	b082      	sub	sp, #8
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f7ff ffa2 	bl	8007f90 <SysTick_Config>
 800804c:	4603      	mov	r3, r0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3708      	adds	r7, #8
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b084      	sub	sp, #16
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008062:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008064:	f7ff fb82 	bl	800776c <HAL_GetTick>
 8008068:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008070:	b2db      	uxtb	r3, r3
 8008072:	2b02      	cmp	r3, #2
 8008074:	d008      	beq.n	8008088 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2280      	movs	r2, #128	@ 0x80
 800807a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	e052      	b.n	800812e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f022 0216 	bic.w	r2, r2, #22
 8008096:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	695a      	ldr	r2, [r3, #20]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80080a6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d103      	bne.n	80080b8 <HAL_DMA_Abort+0x62>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d007      	beq.n	80080c8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f022 0208 	bic.w	r2, r2, #8
 80080c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f022 0201 	bic.w	r2, r2, #1
 80080d6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80080d8:	e013      	b.n	8008102 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80080da:	f7ff fb47 	bl	800776c <HAL_GetTick>
 80080de:	4602      	mov	r2, r0
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	2b05      	cmp	r3, #5
 80080e6:	d90c      	bls.n	8008102 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2220      	movs	r2, #32
 80080ec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2203      	movs	r2, #3
 80080f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80080fe:	2303      	movs	r3, #3
 8008100:	e015      	b.n	800812e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 0301 	and.w	r3, r3, #1
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1e4      	bne.n	80080da <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008114:	223f      	movs	r2, #63	@ 0x3f
 8008116:	409a      	lsls	r2, r3
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008136:	b480      	push	{r7}
 8008138:	b083      	sub	sp, #12
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008144:	b2db      	uxtb	r3, r3
 8008146:	2b02      	cmp	r3, #2
 8008148:	d004      	beq.n	8008154 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2280      	movs	r2, #128	@ 0x80
 800814e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	e00c      	b.n	800816e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2205      	movs	r2, #5
 8008158:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f022 0201 	bic.w	r2, r2, #1
 800816a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	370c      	adds	r7, #12
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr
	...

0800817c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800817c:	b480      	push	{r7}
 800817e:	b089      	sub	sp, #36	@ 0x24
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008186:	2300      	movs	r3, #0
 8008188:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800818a:	2300      	movs	r3, #0
 800818c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800818e:	2300      	movs	r3, #0
 8008190:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008192:	2300      	movs	r3, #0
 8008194:	61fb      	str	r3, [r7, #28]
 8008196:	e177      	b.n	8008488 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008198:	2201      	movs	r2, #1
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	fa02 f303 	lsl.w	r3, r2, r3
 80081a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	697a      	ldr	r2, [r7, #20]
 80081a8:	4013      	ands	r3, r2
 80081aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80081ac:	693a      	ldr	r2, [r7, #16]
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	f040 8166 	bne.w	8008482 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	f003 0303 	and.w	r3, r3, #3
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d005      	beq.n	80081ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80081ca:	2b02      	cmp	r3, #2
 80081cc:	d130      	bne.n	8008230 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	005b      	lsls	r3, r3, #1
 80081d8:	2203      	movs	r2, #3
 80081da:	fa02 f303 	lsl.w	r3, r2, r3
 80081de:	43db      	mvns	r3, r3
 80081e0:	69ba      	ldr	r2, [r7, #24]
 80081e2:	4013      	ands	r3, r2
 80081e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	68da      	ldr	r2, [r3, #12]
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	005b      	lsls	r3, r3, #1
 80081ee:	fa02 f303 	lsl.w	r3, r2, r3
 80081f2:	69ba      	ldr	r2, [r7, #24]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	69ba      	ldr	r2, [r7, #24]
 80081fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008204:	2201      	movs	r2, #1
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	fa02 f303 	lsl.w	r3, r2, r3
 800820c:	43db      	mvns	r3, r3
 800820e:	69ba      	ldr	r2, [r7, #24]
 8008210:	4013      	ands	r3, r2
 8008212:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	091b      	lsrs	r3, r3, #4
 800821a:	f003 0201 	and.w	r2, r3, #1
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	fa02 f303 	lsl.w	r3, r2, r3
 8008224:	69ba      	ldr	r2, [r7, #24]
 8008226:	4313      	orrs	r3, r2
 8008228:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	69ba      	ldr	r2, [r7, #24]
 800822e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	f003 0303 	and.w	r3, r3, #3
 8008238:	2b03      	cmp	r3, #3
 800823a:	d017      	beq.n	800826c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008242:	69fb      	ldr	r3, [r7, #28]
 8008244:	005b      	lsls	r3, r3, #1
 8008246:	2203      	movs	r2, #3
 8008248:	fa02 f303 	lsl.w	r3, r2, r3
 800824c:	43db      	mvns	r3, r3
 800824e:	69ba      	ldr	r2, [r7, #24]
 8008250:	4013      	ands	r3, r2
 8008252:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	689a      	ldr	r2, [r3, #8]
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	005b      	lsls	r3, r3, #1
 800825c:	fa02 f303 	lsl.w	r3, r2, r3
 8008260:	69ba      	ldr	r2, [r7, #24]
 8008262:	4313      	orrs	r3, r2
 8008264:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	69ba      	ldr	r2, [r7, #24]
 800826a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	f003 0303 	and.w	r3, r3, #3
 8008274:	2b02      	cmp	r3, #2
 8008276:	d123      	bne.n	80082c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	08da      	lsrs	r2, r3, #3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	3208      	adds	r2, #8
 8008280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008284:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	f003 0307 	and.w	r3, r3, #7
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	220f      	movs	r2, #15
 8008290:	fa02 f303 	lsl.w	r3, r2, r3
 8008294:	43db      	mvns	r3, r3
 8008296:	69ba      	ldr	r2, [r7, #24]
 8008298:	4013      	ands	r3, r2
 800829a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	691a      	ldr	r2, [r3, #16]
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	f003 0307 	and.w	r3, r3, #7
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	fa02 f303 	lsl.w	r3, r2, r3
 80082ac:	69ba      	ldr	r2, [r7, #24]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	08da      	lsrs	r2, r3, #3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	3208      	adds	r2, #8
 80082ba:	69b9      	ldr	r1, [r7, #24]
 80082bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80082c6:	69fb      	ldr	r3, [r7, #28]
 80082c8:	005b      	lsls	r3, r3, #1
 80082ca:	2203      	movs	r2, #3
 80082cc:	fa02 f303 	lsl.w	r3, r2, r3
 80082d0:	43db      	mvns	r3, r3
 80082d2:	69ba      	ldr	r2, [r7, #24]
 80082d4:	4013      	ands	r3, r2
 80082d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	f003 0203 	and.w	r2, r3, #3
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	005b      	lsls	r3, r3, #1
 80082e4:	fa02 f303 	lsl.w	r3, r2, r3
 80082e8:	69ba      	ldr	r2, [r7, #24]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	69ba      	ldr	r2, [r7, #24]
 80082f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f000 80c0 	beq.w	8008482 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008302:	2300      	movs	r3, #0
 8008304:	60fb      	str	r3, [r7, #12]
 8008306:	4b66      	ldr	r3, [pc, #408]	@ (80084a0 <HAL_GPIO_Init+0x324>)
 8008308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800830a:	4a65      	ldr	r2, [pc, #404]	@ (80084a0 <HAL_GPIO_Init+0x324>)
 800830c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008310:	6453      	str	r3, [r2, #68]	@ 0x44
 8008312:	4b63      	ldr	r3, [pc, #396]	@ (80084a0 <HAL_GPIO_Init+0x324>)
 8008314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008316:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800831a:	60fb      	str	r3, [r7, #12]
 800831c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800831e:	4a61      	ldr	r2, [pc, #388]	@ (80084a4 <HAL_GPIO_Init+0x328>)
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	089b      	lsrs	r3, r3, #2
 8008324:	3302      	adds	r3, #2
 8008326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800832a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	f003 0303 	and.w	r3, r3, #3
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	220f      	movs	r2, #15
 8008336:	fa02 f303 	lsl.w	r3, r2, r3
 800833a:	43db      	mvns	r3, r3
 800833c:	69ba      	ldr	r2, [r7, #24]
 800833e:	4013      	ands	r3, r2
 8008340:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a58      	ldr	r2, [pc, #352]	@ (80084a8 <HAL_GPIO_Init+0x32c>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d037      	beq.n	80083ba <HAL_GPIO_Init+0x23e>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a57      	ldr	r2, [pc, #348]	@ (80084ac <HAL_GPIO_Init+0x330>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d031      	beq.n	80083b6 <HAL_GPIO_Init+0x23a>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a56      	ldr	r2, [pc, #344]	@ (80084b0 <HAL_GPIO_Init+0x334>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d02b      	beq.n	80083b2 <HAL_GPIO_Init+0x236>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a55      	ldr	r2, [pc, #340]	@ (80084b4 <HAL_GPIO_Init+0x338>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d025      	beq.n	80083ae <HAL_GPIO_Init+0x232>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4a54      	ldr	r2, [pc, #336]	@ (80084b8 <HAL_GPIO_Init+0x33c>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d01f      	beq.n	80083aa <HAL_GPIO_Init+0x22e>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4a53      	ldr	r2, [pc, #332]	@ (80084bc <HAL_GPIO_Init+0x340>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d019      	beq.n	80083a6 <HAL_GPIO_Init+0x22a>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4a52      	ldr	r2, [pc, #328]	@ (80084c0 <HAL_GPIO_Init+0x344>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d013      	beq.n	80083a2 <HAL_GPIO_Init+0x226>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4a51      	ldr	r2, [pc, #324]	@ (80084c4 <HAL_GPIO_Init+0x348>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d00d      	beq.n	800839e <HAL_GPIO_Init+0x222>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4a50      	ldr	r2, [pc, #320]	@ (80084c8 <HAL_GPIO_Init+0x34c>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d007      	beq.n	800839a <HAL_GPIO_Init+0x21e>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a4f      	ldr	r2, [pc, #316]	@ (80084cc <HAL_GPIO_Init+0x350>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d101      	bne.n	8008396 <HAL_GPIO_Init+0x21a>
 8008392:	2309      	movs	r3, #9
 8008394:	e012      	b.n	80083bc <HAL_GPIO_Init+0x240>
 8008396:	230a      	movs	r3, #10
 8008398:	e010      	b.n	80083bc <HAL_GPIO_Init+0x240>
 800839a:	2308      	movs	r3, #8
 800839c:	e00e      	b.n	80083bc <HAL_GPIO_Init+0x240>
 800839e:	2307      	movs	r3, #7
 80083a0:	e00c      	b.n	80083bc <HAL_GPIO_Init+0x240>
 80083a2:	2306      	movs	r3, #6
 80083a4:	e00a      	b.n	80083bc <HAL_GPIO_Init+0x240>
 80083a6:	2305      	movs	r3, #5
 80083a8:	e008      	b.n	80083bc <HAL_GPIO_Init+0x240>
 80083aa:	2304      	movs	r3, #4
 80083ac:	e006      	b.n	80083bc <HAL_GPIO_Init+0x240>
 80083ae:	2303      	movs	r3, #3
 80083b0:	e004      	b.n	80083bc <HAL_GPIO_Init+0x240>
 80083b2:	2302      	movs	r3, #2
 80083b4:	e002      	b.n	80083bc <HAL_GPIO_Init+0x240>
 80083b6:	2301      	movs	r3, #1
 80083b8:	e000      	b.n	80083bc <HAL_GPIO_Init+0x240>
 80083ba:	2300      	movs	r3, #0
 80083bc:	69fa      	ldr	r2, [r7, #28]
 80083be:	f002 0203 	and.w	r2, r2, #3
 80083c2:	0092      	lsls	r2, r2, #2
 80083c4:	4093      	lsls	r3, r2
 80083c6:	69ba      	ldr	r2, [r7, #24]
 80083c8:	4313      	orrs	r3, r2
 80083ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80083cc:	4935      	ldr	r1, [pc, #212]	@ (80084a4 <HAL_GPIO_Init+0x328>)
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	089b      	lsrs	r3, r3, #2
 80083d2:	3302      	adds	r3, #2
 80083d4:	69ba      	ldr	r2, [r7, #24]
 80083d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80083da:	4b3d      	ldr	r3, [pc, #244]	@ (80084d0 <HAL_GPIO_Init+0x354>)
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	43db      	mvns	r3, r3
 80083e4:	69ba      	ldr	r2, [r7, #24]
 80083e6:	4013      	ands	r3, r2
 80083e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d003      	beq.n	80083fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80083f6:	69ba      	ldr	r2, [r7, #24]
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80083fe:	4a34      	ldr	r2, [pc, #208]	@ (80084d0 <HAL_GPIO_Init+0x354>)
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008404:	4b32      	ldr	r3, [pc, #200]	@ (80084d0 <HAL_GPIO_Init+0x354>)
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	43db      	mvns	r3, r3
 800840e:	69ba      	ldr	r2, [r7, #24]
 8008410:	4013      	ands	r3, r2
 8008412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800841c:	2b00      	cmp	r3, #0
 800841e:	d003      	beq.n	8008428 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008420:	69ba      	ldr	r2, [r7, #24]
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	4313      	orrs	r3, r2
 8008426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008428:	4a29      	ldr	r2, [pc, #164]	@ (80084d0 <HAL_GPIO_Init+0x354>)
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800842e:	4b28      	ldr	r3, [pc, #160]	@ (80084d0 <HAL_GPIO_Init+0x354>)
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	43db      	mvns	r3, r3
 8008438:	69ba      	ldr	r2, [r7, #24]
 800843a:	4013      	ands	r3, r2
 800843c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008446:	2b00      	cmp	r3, #0
 8008448:	d003      	beq.n	8008452 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800844a:	69ba      	ldr	r2, [r7, #24]
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	4313      	orrs	r3, r2
 8008450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008452:	4a1f      	ldr	r2, [pc, #124]	@ (80084d0 <HAL_GPIO_Init+0x354>)
 8008454:	69bb      	ldr	r3, [r7, #24]
 8008456:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008458:	4b1d      	ldr	r3, [pc, #116]	@ (80084d0 <HAL_GPIO_Init+0x354>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	43db      	mvns	r3, r3
 8008462:	69ba      	ldr	r2, [r7, #24]
 8008464:	4013      	ands	r3, r2
 8008466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008470:	2b00      	cmp	r3, #0
 8008472:	d003      	beq.n	800847c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008474:	69ba      	ldr	r2, [r7, #24]
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	4313      	orrs	r3, r2
 800847a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800847c:	4a14      	ldr	r2, [pc, #80]	@ (80084d0 <HAL_GPIO_Init+0x354>)
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008482:	69fb      	ldr	r3, [r7, #28]
 8008484:	3301      	adds	r3, #1
 8008486:	61fb      	str	r3, [r7, #28]
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	2b0f      	cmp	r3, #15
 800848c:	f67f ae84 	bls.w	8008198 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008490:	bf00      	nop
 8008492:	bf00      	nop
 8008494:	3724      	adds	r7, #36	@ 0x24
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	40023800 	.word	0x40023800
 80084a4:	40013800 	.word	0x40013800
 80084a8:	40020000 	.word	0x40020000
 80084ac:	40020400 	.word	0x40020400
 80084b0:	40020800 	.word	0x40020800
 80084b4:	40020c00 	.word	0x40020c00
 80084b8:	40021000 	.word	0x40021000
 80084bc:	40021400 	.word	0x40021400
 80084c0:	40021800 	.word	0x40021800
 80084c4:	40021c00 	.word	0x40021c00
 80084c8:	40022000 	.word	0x40022000
 80084cc:	40022400 	.word	0x40022400
 80084d0:	40013c00 	.word	0x40013c00

080084d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	460b      	mov	r3, r1
 80084de:	807b      	strh	r3, [r7, #2]
 80084e0:	4613      	mov	r3, r2
 80084e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80084e4:	787b      	ldrb	r3, [r7, #1]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d003      	beq.n	80084f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80084ea:	887a      	ldrh	r2, [r7, #2]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80084f0:	e003      	b.n	80084fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80084f2:	887b      	ldrh	r3, [r7, #2]
 80084f4:	041a      	lsls	r2, r3, #16
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	619a      	str	r2, [r3, #24]
}
 80084fa:	bf00      	nop
 80084fc:	370c      	adds	r7, #12
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr

08008506 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008506:	b480      	push	{r7}
 8008508:	b085      	sub	sp, #20
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
 800850e:	460b      	mov	r3, r1
 8008510:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	695b      	ldr	r3, [r3, #20]
 8008516:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008518:	887a      	ldrh	r2, [r7, #2]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	4013      	ands	r3, r2
 800851e:	041a      	lsls	r2, r3, #16
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	43d9      	mvns	r1, r3
 8008524:	887b      	ldrh	r3, [r7, #2]
 8008526:	400b      	ands	r3, r1
 8008528:	431a      	orrs	r2, r3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	619a      	str	r2, [r3, #24]
}
 800852e:	bf00      	nop
 8008530:	3714      	adds	r7, #20
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr
	...

0800853c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	4603      	mov	r3, r0
 8008544:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008546:	4b08      	ldr	r3, [pc, #32]	@ (8008568 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008548:	695a      	ldr	r2, [r3, #20]
 800854a:	88fb      	ldrh	r3, [r7, #6]
 800854c:	4013      	ands	r3, r2
 800854e:	2b00      	cmp	r3, #0
 8008550:	d006      	beq.n	8008560 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008552:	4a05      	ldr	r2, [pc, #20]	@ (8008568 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008554:	88fb      	ldrh	r3, [r7, #6]
 8008556:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008558:	88fb      	ldrh	r3, [r7, #6]
 800855a:	4618      	mov	r0, r3
 800855c:	f7fe fb66 	bl	8006c2c <HAL_GPIO_EXTI_Callback>
  }
}
 8008560:	bf00      	nop
 8008562:	3708      	adds	r7, #8
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	40013c00 	.word	0x40013c00

0800856c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d101      	bne.n	800857e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	e12b      	b.n	80087d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008584:	b2db      	uxtb	r3, r3
 8008586:	2b00      	cmp	r3, #0
 8008588:	d106      	bne.n	8008598 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f7fe fcb6 	bl	8006f04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2224      	movs	r2, #36	@ 0x24
 800859c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f022 0201 	bic.w	r2, r2, #1
 80085ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80085be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80085ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80085d0:	f001 fcec 	bl	8009fac <HAL_RCC_GetPCLK1Freq>
 80085d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	4a81      	ldr	r2, [pc, #516]	@ (80087e0 <HAL_I2C_Init+0x274>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d807      	bhi.n	80085f0 <HAL_I2C_Init+0x84>
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	4a80      	ldr	r2, [pc, #512]	@ (80087e4 <HAL_I2C_Init+0x278>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	bf94      	ite	ls
 80085e8:	2301      	movls	r3, #1
 80085ea:	2300      	movhi	r3, #0
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	e006      	b.n	80085fe <HAL_I2C_Init+0x92>
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	4a7d      	ldr	r2, [pc, #500]	@ (80087e8 <HAL_I2C_Init+0x27c>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	bf94      	ite	ls
 80085f8:	2301      	movls	r3, #1
 80085fa:	2300      	movhi	r3, #0
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d001      	beq.n	8008606 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008602:	2301      	movs	r3, #1
 8008604:	e0e7      	b.n	80087d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	4a78      	ldr	r2, [pc, #480]	@ (80087ec <HAL_I2C_Init+0x280>)
 800860a:	fba2 2303 	umull	r2, r3, r2, r3
 800860e:	0c9b      	lsrs	r3, r3, #18
 8008610:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	68ba      	ldr	r2, [r7, #8]
 8008622:	430a      	orrs	r2, r1
 8008624:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	6a1b      	ldr	r3, [r3, #32]
 800862c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	4a6a      	ldr	r2, [pc, #424]	@ (80087e0 <HAL_I2C_Init+0x274>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d802      	bhi.n	8008640 <HAL_I2C_Init+0xd4>
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	3301      	adds	r3, #1
 800863e:	e009      	b.n	8008654 <HAL_I2C_Init+0xe8>
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008646:	fb02 f303 	mul.w	r3, r2, r3
 800864a:	4a69      	ldr	r2, [pc, #420]	@ (80087f0 <HAL_I2C_Init+0x284>)
 800864c:	fba2 2303 	umull	r2, r3, r2, r3
 8008650:	099b      	lsrs	r3, r3, #6
 8008652:	3301      	adds	r3, #1
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	6812      	ldr	r2, [r2, #0]
 8008658:	430b      	orrs	r3, r1
 800865a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	69db      	ldr	r3, [r3, #28]
 8008662:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8008666:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	495c      	ldr	r1, [pc, #368]	@ (80087e0 <HAL_I2C_Init+0x274>)
 8008670:	428b      	cmp	r3, r1
 8008672:	d819      	bhi.n	80086a8 <HAL_I2C_Init+0x13c>
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	1e59      	subs	r1, r3, #1
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	005b      	lsls	r3, r3, #1
 800867e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008682:	1c59      	adds	r1, r3, #1
 8008684:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008688:	400b      	ands	r3, r1
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00a      	beq.n	80086a4 <HAL_I2C_Init+0x138>
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	1e59      	subs	r1, r3, #1
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	005b      	lsls	r3, r3, #1
 8008698:	fbb1 f3f3 	udiv	r3, r1, r3
 800869c:	3301      	adds	r3, #1
 800869e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086a2:	e051      	b.n	8008748 <HAL_I2C_Init+0x1dc>
 80086a4:	2304      	movs	r3, #4
 80086a6:	e04f      	b.n	8008748 <HAL_I2C_Init+0x1dc>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d111      	bne.n	80086d4 <HAL_I2C_Init+0x168>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	1e58      	subs	r0, r3, #1
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6859      	ldr	r1, [r3, #4]
 80086b8:	460b      	mov	r3, r1
 80086ba:	005b      	lsls	r3, r3, #1
 80086bc:	440b      	add	r3, r1
 80086be:	fbb0 f3f3 	udiv	r3, r0, r3
 80086c2:	3301      	adds	r3, #1
 80086c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	bf0c      	ite	eq
 80086cc:	2301      	moveq	r3, #1
 80086ce:	2300      	movne	r3, #0
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	e012      	b.n	80086fa <HAL_I2C_Init+0x18e>
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	1e58      	subs	r0, r3, #1
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6859      	ldr	r1, [r3, #4]
 80086dc:	460b      	mov	r3, r1
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	440b      	add	r3, r1
 80086e2:	0099      	lsls	r1, r3, #2
 80086e4:	440b      	add	r3, r1
 80086e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80086ea:	3301      	adds	r3, #1
 80086ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	bf0c      	ite	eq
 80086f4:	2301      	moveq	r3, #1
 80086f6:	2300      	movne	r3, #0
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d001      	beq.n	8008702 <HAL_I2C_Init+0x196>
 80086fe:	2301      	movs	r3, #1
 8008700:	e022      	b.n	8008748 <HAL_I2C_Init+0x1dc>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d10e      	bne.n	8008728 <HAL_I2C_Init+0x1bc>
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	1e58      	subs	r0, r3, #1
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6859      	ldr	r1, [r3, #4]
 8008712:	460b      	mov	r3, r1
 8008714:	005b      	lsls	r3, r3, #1
 8008716:	440b      	add	r3, r1
 8008718:	fbb0 f3f3 	udiv	r3, r0, r3
 800871c:	3301      	adds	r3, #1
 800871e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008722:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008726:	e00f      	b.n	8008748 <HAL_I2C_Init+0x1dc>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	1e58      	subs	r0, r3, #1
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6859      	ldr	r1, [r3, #4]
 8008730:	460b      	mov	r3, r1
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	440b      	add	r3, r1
 8008736:	0099      	lsls	r1, r3, #2
 8008738:	440b      	add	r3, r1
 800873a:	fbb0 f3f3 	udiv	r3, r0, r3
 800873e:	3301      	adds	r3, #1
 8008740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008744:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008748:	6879      	ldr	r1, [r7, #4]
 800874a:	6809      	ldr	r1, [r1, #0]
 800874c:	4313      	orrs	r3, r2
 800874e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	69da      	ldr	r2, [r3, #28]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a1b      	ldr	r3, [r3, #32]
 8008762:	431a      	orrs	r2, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	430a      	orrs	r2, r1
 800876a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008776:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	6911      	ldr	r1, [r2, #16]
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	68d2      	ldr	r2, [r2, #12]
 8008782:	4311      	orrs	r1, r2
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	6812      	ldr	r2, [r2, #0]
 8008788:	430b      	orrs	r3, r1
 800878a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	695a      	ldr	r2, [r3, #20]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	699b      	ldr	r3, [r3, #24]
 800879e:	431a      	orrs	r2, r3
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	430a      	orrs	r2, r1
 80087a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f042 0201 	orr.w	r2, r2, #1
 80087b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2220      	movs	r2, #32
 80087c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	000186a0 	.word	0x000186a0
 80087e4:	001e847f 	.word	0x001e847f
 80087e8:	003d08ff 	.word	0x003d08ff
 80087ec:	431bde83 	.word	0x431bde83
 80087f0:	10624dd3 	.word	0x10624dd3

080087f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b088      	sub	sp, #32
 80087f8:	af02      	add	r7, sp, #8
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	4608      	mov	r0, r1
 80087fe:	4611      	mov	r1, r2
 8008800:	461a      	mov	r2, r3
 8008802:	4603      	mov	r3, r0
 8008804:	817b      	strh	r3, [r7, #10]
 8008806:	460b      	mov	r3, r1
 8008808:	813b      	strh	r3, [r7, #8]
 800880a:	4613      	mov	r3, r2
 800880c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800880e:	f7fe ffad 	bl	800776c <HAL_GetTick>
 8008812:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800881a:	b2db      	uxtb	r3, r3
 800881c:	2b20      	cmp	r3, #32
 800881e:	f040 80d9 	bne.w	80089d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	9300      	str	r3, [sp, #0]
 8008826:	2319      	movs	r3, #25
 8008828:	2201      	movs	r2, #1
 800882a:	496d      	ldr	r1, [pc, #436]	@ (80089e0 <HAL_I2C_Mem_Write+0x1ec>)
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	f000 fc8b 	bl	8009148 <I2C_WaitOnFlagUntilTimeout>
 8008832:	4603      	mov	r3, r0
 8008834:	2b00      	cmp	r3, #0
 8008836:	d001      	beq.n	800883c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008838:	2302      	movs	r3, #2
 800883a:	e0cc      	b.n	80089d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008842:	2b01      	cmp	r3, #1
 8008844:	d101      	bne.n	800884a <HAL_I2C_Mem_Write+0x56>
 8008846:	2302      	movs	r3, #2
 8008848:	e0c5      	b.n	80089d6 <HAL_I2C_Mem_Write+0x1e2>
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2201      	movs	r2, #1
 800884e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f003 0301 	and.w	r3, r3, #1
 800885c:	2b01      	cmp	r3, #1
 800885e:	d007      	beq.n	8008870 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f042 0201 	orr.w	r2, r2, #1
 800886e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800887e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2221      	movs	r2, #33	@ 0x21
 8008884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2240      	movs	r2, #64	@ 0x40
 800888c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2200      	movs	r2, #0
 8008894:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6a3a      	ldr	r2, [r7, #32]
 800889a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80088a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088a6:	b29a      	uxth	r2, r3
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	4a4d      	ldr	r2, [pc, #308]	@ (80089e4 <HAL_I2C_Mem_Write+0x1f0>)
 80088b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80088b2:	88f8      	ldrh	r0, [r7, #6]
 80088b4:	893a      	ldrh	r2, [r7, #8]
 80088b6:	8979      	ldrh	r1, [r7, #10]
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	9301      	str	r3, [sp, #4]
 80088bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088be:	9300      	str	r3, [sp, #0]
 80088c0:	4603      	mov	r3, r0
 80088c2:	68f8      	ldr	r0, [r7, #12]
 80088c4:	f000 fac2 	bl	8008e4c <I2C_RequestMemoryWrite>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d052      	beq.n	8008974 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	e081      	b.n	80089d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80088d2:	697a      	ldr	r2, [r7, #20]
 80088d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f000 fd50 	bl	800937c <I2C_WaitOnTXEFlagUntilTimeout>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d00d      	beq.n	80088fe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088e6:	2b04      	cmp	r3, #4
 80088e8:	d107      	bne.n	80088fa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80088f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e06b      	b.n	80089d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008902:	781a      	ldrb	r2, [r3, #0]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800890e:	1c5a      	adds	r2, r3, #1
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008918:	3b01      	subs	r3, #1
 800891a:	b29a      	uxth	r2, r3
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008924:	b29b      	uxth	r3, r3
 8008926:	3b01      	subs	r3, #1
 8008928:	b29a      	uxth	r2, r3
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	695b      	ldr	r3, [r3, #20]
 8008934:	f003 0304 	and.w	r3, r3, #4
 8008938:	2b04      	cmp	r3, #4
 800893a:	d11b      	bne.n	8008974 <HAL_I2C_Mem_Write+0x180>
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008940:	2b00      	cmp	r3, #0
 8008942:	d017      	beq.n	8008974 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008948:	781a      	ldrb	r2, [r3, #0]
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008954:	1c5a      	adds	r2, r3, #1
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800895e:	3b01      	subs	r3, #1
 8008960:	b29a      	uxth	r2, r3
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800896a:	b29b      	uxth	r3, r3
 800896c:	3b01      	subs	r3, #1
 800896e:	b29a      	uxth	r2, r3
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008978:	2b00      	cmp	r3, #0
 800897a:	d1aa      	bne.n	80088d2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800897c:	697a      	ldr	r2, [r7, #20]
 800897e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f000 fd43 	bl	800940c <I2C_WaitOnBTFFlagUntilTimeout>
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00d      	beq.n	80089a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008990:	2b04      	cmp	r3, #4
 8008992:	d107      	bne.n	80089a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80089a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80089a4:	2301      	movs	r3, #1
 80089a6:	e016      	b.n	80089d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80089b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2220      	movs	r2, #32
 80089bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80089d0:	2300      	movs	r3, #0
 80089d2:	e000      	b.n	80089d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80089d4:	2302      	movs	r3, #2
  }
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3718      	adds	r7, #24
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	00100002 	.word	0x00100002
 80089e4:	ffff0000 	.word	0xffff0000

080089e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b08c      	sub	sp, #48	@ 0x30
 80089ec:	af02      	add	r7, sp, #8
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	4608      	mov	r0, r1
 80089f2:	4611      	mov	r1, r2
 80089f4:	461a      	mov	r2, r3
 80089f6:	4603      	mov	r3, r0
 80089f8:	817b      	strh	r3, [r7, #10]
 80089fa:	460b      	mov	r3, r1
 80089fc:	813b      	strh	r3, [r7, #8]
 80089fe:	4613      	mov	r3, r2
 8008a00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008a02:	f7fe feb3 	bl	800776c <HAL_GetTick>
 8008a06:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	2b20      	cmp	r3, #32
 8008a12:	f040 8214 	bne.w	8008e3e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a18:	9300      	str	r3, [sp, #0]
 8008a1a:	2319      	movs	r3, #25
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	497b      	ldr	r1, [pc, #492]	@ (8008c0c <HAL_I2C_Mem_Read+0x224>)
 8008a20:	68f8      	ldr	r0, [r7, #12]
 8008a22:	f000 fb91 	bl	8009148 <I2C_WaitOnFlagUntilTimeout>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d001      	beq.n	8008a30 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008a2c:	2302      	movs	r3, #2
 8008a2e:	e207      	b.n	8008e40 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d101      	bne.n	8008a3e <HAL_I2C_Mem_Read+0x56>
 8008a3a:	2302      	movs	r3, #2
 8008a3c:	e200      	b.n	8008e40 <HAL_I2C_Mem_Read+0x458>
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2201      	movs	r2, #1
 8008a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f003 0301 	and.w	r3, r3, #1
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d007      	beq.n	8008a64 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f042 0201 	orr.w	r2, r2, #1
 8008a62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008a72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2222      	movs	r2, #34	@ 0x22
 8008a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2240      	movs	r2, #64	@ 0x40
 8008a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2200      	movs	r2, #0
 8008a88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008a94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a9a:	b29a      	uxth	r2, r3
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	4a5b      	ldr	r2, [pc, #364]	@ (8008c10 <HAL_I2C_Mem_Read+0x228>)
 8008aa4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008aa6:	88f8      	ldrh	r0, [r7, #6]
 8008aa8:	893a      	ldrh	r2, [r7, #8]
 8008aaa:	8979      	ldrh	r1, [r7, #10]
 8008aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aae:	9301      	str	r3, [sp, #4]
 8008ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab2:	9300      	str	r3, [sp, #0]
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	68f8      	ldr	r0, [r7, #12]
 8008ab8:	f000 fa5e 	bl	8008f78 <I2C_RequestMemoryRead>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d001      	beq.n	8008ac6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e1bc      	b.n	8008e40 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d113      	bne.n	8008af6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ace:	2300      	movs	r3, #0
 8008ad0:	623b      	str	r3, [r7, #32]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	695b      	ldr	r3, [r3, #20]
 8008ad8:	623b      	str	r3, [r7, #32]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	699b      	ldr	r3, [r3, #24]
 8008ae0:	623b      	str	r3, [r7, #32]
 8008ae2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008af2:	601a      	str	r2, [r3, #0]
 8008af4:	e190      	b.n	8008e18 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d11b      	bne.n	8008b36 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b0e:	2300      	movs	r3, #0
 8008b10:	61fb      	str	r3, [r7, #28]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	695b      	ldr	r3, [r3, #20]
 8008b18:	61fb      	str	r3, [r7, #28]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	61fb      	str	r3, [r7, #28]
 8008b22:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b32:	601a      	str	r2, [r3, #0]
 8008b34:	e170      	b.n	8008e18 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b3a:	2b02      	cmp	r3, #2
 8008b3c:	d11b      	bne.n	8008b76 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b4c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b5e:	2300      	movs	r3, #0
 8008b60:	61bb      	str	r3, [r7, #24]
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	695b      	ldr	r3, [r3, #20]
 8008b68:	61bb      	str	r3, [r7, #24]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	699b      	ldr	r3, [r3, #24]
 8008b70:	61bb      	str	r3, [r7, #24]
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	e150      	b.n	8008e18 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b76:	2300      	movs	r3, #0
 8008b78:	617b      	str	r3, [r7, #20]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	695b      	ldr	r3, [r3, #20]
 8008b80:	617b      	str	r3, [r7, #20]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	699b      	ldr	r3, [r3, #24]
 8008b88:	617b      	str	r3, [r7, #20]
 8008b8a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008b8c:	e144      	b.n	8008e18 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b92:	2b03      	cmp	r3, #3
 8008b94:	f200 80f1 	bhi.w	8008d7a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d123      	bne.n	8008be8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ba0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ba2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f000 fc79 	bl	800949c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008baa:	4603      	mov	r3, r0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d001      	beq.n	8008bb4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e145      	b.n	8008e40 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	691a      	ldr	r2, [r3, #16]
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bbe:	b2d2      	uxtb	r2, r2
 8008bc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bc6:	1c5a      	adds	r2, r3, #1
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bd0:	3b01      	subs	r3, #1
 8008bd2:	b29a      	uxth	r2, r3
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	3b01      	subs	r3, #1
 8008be0:	b29a      	uxth	r2, r3
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008be6:	e117      	b.n	8008e18 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d14e      	bne.n	8008c8e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf2:	9300      	str	r3, [sp, #0]
 8008bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	4906      	ldr	r1, [pc, #24]	@ (8008c14 <HAL_I2C_Mem_Read+0x22c>)
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f000 faa4 	bl	8009148 <I2C_WaitOnFlagUntilTimeout>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d008      	beq.n	8008c18 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	e11a      	b.n	8008e40 <HAL_I2C_Mem_Read+0x458>
 8008c0a:	bf00      	nop
 8008c0c:	00100002 	.word	0x00100002
 8008c10:	ffff0000 	.word	0xffff0000
 8008c14:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008c26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	691a      	ldr	r2, [r3, #16]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c32:	b2d2      	uxtb	r2, r2
 8008c34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c3a:	1c5a      	adds	r2, r3, #1
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c44:	3b01      	subs	r3, #1
 8008c46:	b29a      	uxth	r2, r3
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	3b01      	subs	r3, #1
 8008c54:	b29a      	uxth	r2, r3
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	691a      	ldr	r2, [r3, #16]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c64:	b2d2      	uxtb	r2, r2
 8008c66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c6c:	1c5a      	adds	r2, r3, #1
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c76:	3b01      	subs	r3, #1
 8008c78:	b29a      	uxth	r2, r3
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	3b01      	subs	r3, #1
 8008c86:	b29a      	uxth	r2, r3
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008c8c:	e0c4      	b.n	8008e18 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c90:	9300      	str	r3, [sp, #0]
 8008c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c94:	2200      	movs	r2, #0
 8008c96:	496c      	ldr	r1, [pc, #432]	@ (8008e48 <HAL_I2C_Mem_Read+0x460>)
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f000 fa55 	bl	8009148 <I2C_WaitOnFlagUntilTimeout>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d001      	beq.n	8008ca8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e0cb      	b.n	8008e40 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008cb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	691a      	ldr	r2, [r3, #16]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cc2:	b2d2      	uxtb	r2, r2
 8008cc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cca:	1c5a      	adds	r2, r3, #1
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008cd4:	3b01      	subs	r3, #1
 8008cd6:	b29a      	uxth	r2, r3
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	3b01      	subs	r3, #1
 8008ce4:	b29a      	uxth	r2, r3
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cec:	9300      	str	r3, [sp, #0]
 8008cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	4955      	ldr	r1, [pc, #340]	@ (8008e48 <HAL_I2C_Mem_Read+0x460>)
 8008cf4:	68f8      	ldr	r0, [r7, #12]
 8008cf6:	f000 fa27 	bl	8009148 <I2C_WaitOnFlagUntilTimeout>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d001      	beq.n	8008d04 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008d00:	2301      	movs	r3, #1
 8008d02:	e09d      	b.n	8008e40 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	691a      	ldr	r2, [r3, #16]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d1e:	b2d2      	uxtb	r2, r2
 8008d20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d26:	1c5a      	adds	r2, r3, #1
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d30:	3b01      	subs	r3, #1
 8008d32:	b29a      	uxth	r2, r3
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	b29a      	uxth	r2, r3
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	691a      	ldr	r2, [r3, #16]
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d50:	b2d2      	uxtb	r2, r2
 8008d52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d58:	1c5a      	adds	r2, r3, #1
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d62:	3b01      	subs	r3, #1
 8008d64:	b29a      	uxth	r2, r3
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	3b01      	subs	r3, #1
 8008d72:	b29a      	uxth	r2, r3
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008d78:	e04e      	b.n	8008e18 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d7c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008d7e:	68f8      	ldr	r0, [r7, #12]
 8008d80:	f000 fb8c 	bl	800949c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d001      	beq.n	8008d8e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e058      	b.n	8008e40 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	691a      	ldr	r2, [r3, #16]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d98:	b2d2      	uxtb	r2, r2
 8008d9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008da0:	1c5a      	adds	r2, r3, #1
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008daa:	3b01      	subs	r3, #1
 8008dac:	b29a      	uxth	r2, r3
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	3b01      	subs	r3, #1
 8008dba:	b29a      	uxth	r2, r3
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	695b      	ldr	r3, [r3, #20]
 8008dc6:	f003 0304 	and.w	r3, r3, #4
 8008dca:	2b04      	cmp	r3, #4
 8008dcc:	d124      	bne.n	8008e18 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008dd2:	2b03      	cmp	r3, #3
 8008dd4:	d107      	bne.n	8008de6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008de4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	691a      	ldr	r2, [r3, #16]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008df0:	b2d2      	uxtb	r2, r2
 8008df2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008df8:	1c5a      	adds	r2, r3, #1
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e02:	3b01      	subs	r3, #1
 8008e04:	b29a      	uxth	r2, r3
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	3b01      	subs	r3, #1
 8008e12:	b29a      	uxth	r2, r3
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	f47f aeb6 	bne.w	8008b8e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2220      	movs	r2, #32
 8008e26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	e000      	b.n	8008e40 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8008e3e:	2302      	movs	r3, #2
  }
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3728      	adds	r7, #40	@ 0x28
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	00010004 	.word	0x00010004

08008e4c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b088      	sub	sp, #32
 8008e50:	af02      	add	r7, sp, #8
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	4608      	mov	r0, r1
 8008e56:	4611      	mov	r1, r2
 8008e58:	461a      	mov	r2, r3
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	817b      	strh	r3, [r7, #10]
 8008e5e:	460b      	mov	r3, r1
 8008e60:	813b      	strh	r3, [r7, #8]
 8008e62:	4613      	mov	r3, r2
 8008e64:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008e74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e78:	9300      	str	r3, [sp, #0]
 8008e7a:	6a3b      	ldr	r3, [r7, #32]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	f000 f960 	bl	8009148 <I2C_WaitOnFlagUntilTimeout>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00d      	beq.n	8008eaa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e9c:	d103      	bne.n	8008ea6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ea4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008ea6:	2303      	movs	r3, #3
 8008ea8:	e05f      	b.n	8008f6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008eaa:	897b      	ldrh	r3, [r7, #10]
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	461a      	mov	r2, r3
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008eb8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ebc:	6a3a      	ldr	r2, [r7, #32]
 8008ebe:	492d      	ldr	r1, [pc, #180]	@ (8008f74 <I2C_RequestMemoryWrite+0x128>)
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f000 f9bb 	bl	800923c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d001      	beq.n	8008ed0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	e04c      	b.n	8008f6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	617b      	str	r3, [r7, #20]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	695b      	ldr	r3, [r3, #20]
 8008eda:	617b      	str	r3, [r7, #20]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	699b      	ldr	r3, [r3, #24]
 8008ee2:	617b      	str	r3, [r7, #20]
 8008ee4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ee8:	6a39      	ldr	r1, [r7, #32]
 8008eea:	68f8      	ldr	r0, [r7, #12]
 8008eec:	f000 fa46 	bl	800937c <I2C_WaitOnTXEFlagUntilTimeout>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00d      	beq.n	8008f12 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008efa:	2b04      	cmp	r3, #4
 8008efc:	d107      	bne.n	8008f0e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e02b      	b.n	8008f6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008f12:	88fb      	ldrh	r3, [r7, #6]
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d105      	bne.n	8008f24 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008f18:	893b      	ldrh	r3, [r7, #8]
 8008f1a:	b2da      	uxtb	r2, r3
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	611a      	str	r2, [r3, #16]
 8008f22:	e021      	b.n	8008f68 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008f24:	893b      	ldrh	r3, [r7, #8]
 8008f26:	0a1b      	lsrs	r3, r3, #8
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	b2da      	uxtb	r2, r3
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f34:	6a39      	ldr	r1, [r7, #32]
 8008f36:	68f8      	ldr	r0, [r7, #12]
 8008f38:	f000 fa20 	bl	800937c <I2C_WaitOnTXEFlagUntilTimeout>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d00d      	beq.n	8008f5e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f46:	2b04      	cmp	r3, #4
 8008f48:	d107      	bne.n	8008f5a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e005      	b.n	8008f6a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008f5e:	893b      	ldrh	r3, [r7, #8]
 8008f60:	b2da      	uxtb	r2, r3
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3718      	adds	r7, #24
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	00010002 	.word	0x00010002

08008f78 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b088      	sub	sp, #32
 8008f7c:	af02      	add	r7, sp, #8
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	4608      	mov	r0, r1
 8008f82:	4611      	mov	r1, r2
 8008f84:	461a      	mov	r2, r3
 8008f86:	4603      	mov	r3, r0
 8008f88:	817b      	strh	r3, [r7, #10]
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	813b      	strh	r3, [r7, #8]
 8008f8e:	4613      	mov	r3, r2
 8008f90:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008fa0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008fb0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fb4:	9300      	str	r3, [sp, #0]
 8008fb6:	6a3b      	ldr	r3, [r7, #32]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008fbe:	68f8      	ldr	r0, [r7, #12]
 8008fc0:	f000 f8c2 	bl	8009148 <I2C_WaitOnFlagUntilTimeout>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d00d      	beq.n	8008fe6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fd8:	d103      	bne.n	8008fe2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008fe0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008fe2:	2303      	movs	r3, #3
 8008fe4:	e0aa      	b.n	800913c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008fe6:	897b      	ldrh	r3, [r7, #10]
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	461a      	mov	r2, r3
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008ff4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff8:	6a3a      	ldr	r2, [r7, #32]
 8008ffa:	4952      	ldr	r1, [pc, #328]	@ (8009144 <I2C_RequestMemoryRead+0x1cc>)
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	f000 f91d 	bl	800923c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009002:	4603      	mov	r3, r0
 8009004:	2b00      	cmp	r3, #0
 8009006:	d001      	beq.n	800900c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009008:	2301      	movs	r3, #1
 800900a:	e097      	b.n	800913c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800900c:	2300      	movs	r3, #0
 800900e:	617b      	str	r3, [r7, #20]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	695b      	ldr	r3, [r3, #20]
 8009016:	617b      	str	r3, [r7, #20]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	699b      	ldr	r3, [r3, #24]
 800901e:	617b      	str	r3, [r7, #20]
 8009020:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009024:	6a39      	ldr	r1, [r7, #32]
 8009026:	68f8      	ldr	r0, [r7, #12]
 8009028:	f000 f9a8 	bl	800937c <I2C_WaitOnTXEFlagUntilTimeout>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d00d      	beq.n	800904e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009036:	2b04      	cmp	r3, #4
 8009038:	d107      	bne.n	800904a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009048:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800904a:	2301      	movs	r3, #1
 800904c:	e076      	b.n	800913c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800904e:	88fb      	ldrh	r3, [r7, #6]
 8009050:	2b01      	cmp	r3, #1
 8009052:	d105      	bne.n	8009060 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009054:	893b      	ldrh	r3, [r7, #8]
 8009056:	b2da      	uxtb	r2, r3
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	611a      	str	r2, [r3, #16]
 800905e:	e021      	b.n	80090a4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009060:	893b      	ldrh	r3, [r7, #8]
 8009062:	0a1b      	lsrs	r3, r3, #8
 8009064:	b29b      	uxth	r3, r3
 8009066:	b2da      	uxtb	r2, r3
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800906e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009070:	6a39      	ldr	r1, [r7, #32]
 8009072:	68f8      	ldr	r0, [r7, #12]
 8009074:	f000 f982 	bl	800937c <I2C_WaitOnTXEFlagUntilTimeout>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00d      	beq.n	800909a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009082:	2b04      	cmp	r3, #4
 8009084:	d107      	bne.n	8009096 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009094:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009096:	2301      	movs	r3, #1
 8009098:	e050      	b.n	800913c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800909a:	893b      	ldrh	r3, [r7, #8]
 800909c:	b2da      	uxtb	r2, r3
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80090a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090a6:	6a39      	ldr	r1, [r7, #32]
 80090a8:	68f8      	ldr	r0, [r7, #12]
 80090aa:	f000 f967 	bl	800937c <I2C_WaitOnTXEFlagUntilTimeout>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d00d      	beq.n	80090d0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090b8:	2b04      	cmp	r3, #4
 80090ba:	d107      	bne.n	80090cc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	681a      	ldr	r2, [r3, #0]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80090ca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80090cc:	2301      	movs	r3, #1
 80090ce:	e035      	b.n	800913c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80090de:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80090e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e2:	9300      	str	r3, [sp, #0]
 80090e4:	6a3b      	ldr	r3, [r7, #32]
 80090e6:	2200      	movs	r2, #0
 80090e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80090ec:	68f8      	ldr	r0, [r7, #12]
 80090ee:	f000 f82b 	bl	8009148 <I2C_WaitOnFlagUntilTimeout>
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d00d      	beq.n	8009114 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009102:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009106:	d103      	bne.n	8009110 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800910e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009110:	2303      	movs	r3, #3
 8009112:	e013      	b.n	800913c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009114:	897b      	ldrh	r3, [r7, #10]
 8009116:	b2db      	uxtb	r3, r3
 8009118:	f043 0301 	orr.w	r3, r3, #1
 800911c:	b2da      	uxtb	r2, r3
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009126:	6a3a      	ldr	r2, [r7, #32]
 8009128:	4906      	ldr	r1, [pc, #24]	@ (8009144 <I2C_RequestMemoryRead+0x1cc>)
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f000 f886 	bl	800923c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d001      	beq.n	800913a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009136:	2301      	movs	r3, #1
 8009138:	e000      	b.n	800913c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800913a:	2300      	movs	r3, #0
}
 800913c:	4618      	mov	r0, r3
 800913e:	3718      	adds	r7, #24
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}
 8009144:	00010002 	.word	0x00010002

08009148 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	60b9      	str	r1, [r7, #8]
 8009152:	603b      	str	r3, [r7, #0]
 8009154:	4613      	mov	r3, r2
 8009156:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009158:	e048      	b.n	80091ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009160:	d044      	beq.n	80091ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009162:	f7fe fb03 	bl	800776c <HAL_GetTick>
 8009166:	4602      	mov	r2, r0
 8009168:	69bb      	ldr	r3, [r7, #24]
 800916a:	1ad3      	subs	r3, r2, r3
 800916c:	683a      	ldr	r2, [r7, #0]
 800916e:	429a      	cmp	r2, r3
 8009170:	d302      	bcc.n	8009178 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d139      	bne.n	80091ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	0c1b      	lsrs	r3, r3, #16
 800917c:	b2db      	uxtb	r3, r3
 800917e:	2b01      	cmp	r3, #1
 8009180:	d10d      	bne.n	800919e <I2C_WaitOnFlagUntilTimeout+0x56>
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	695b      	ldr	r3, [r3, #20]
 8009188:	43da      	mvns	r2, r3
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	4013      	ands	r3, r2
 800918e:	b29b      	uxth	r3, r3
 8009190:	2b00      	cmp	r3, #0
 8009192:	bf0c      	ite	eq
 8009194:	2301      	moveq	r3, #1
 8009196:	2300      	movne	r3, #0
 8009198:	b2db      	uxtb	r3, r3
 800919a:	461a      	mov	r2, r3
 800919c:	e00c      	b.n	80091b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	699b      	ldr	r3, [r3, #24]
 80091a4:	43da      	mvns	r2, r3
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	4013      	ands	r3, r2
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	bf0c      	ite	eq
 80091b0:	2301      	moveq	r3, #1
 80091b2:	2300      	movne	r3, #0
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	461a      	mov	r2, r3
 80091b8:	79fb      	ldrb	r3, [r7, #7]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d116      	bne.n	80091ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2200      	movs	r2, #0
 80091c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2220      	movs	r2, #32
 80091c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2200      	movs	r2, #0
 80091d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091d8:	f043 0220 	orr.w	r2, r3, #32
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2200      	movs	r2, #0
 80091e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80091e8:	2301      	movs	r3, #1
 80091ea:	e023      	b.n	8009234 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	0c1b      	lsrs	r3, r3, #16
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d10d      	bne.n	8009212 <I2C_WaitOnFlagUntilTimeout+0xca>
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	695b      	ldr	r3, [r3, #20]
 80091fc:	43da      	mvns	r2, r3
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	4013      	ands	r3, r2
 8009202:	b29b      	uxth	r3, r3
 8009204:	2b00      	cmp	r3, #0
 8009206:	bf0c      	ite	eq
 8009208:	2301      	moveq	r3, #1
 800920a:	2300      	movne	r3, #0
 800920c:	b2db      	uxtb	r3, r3
 800920e:	461a      	mov	r2, r3
 8009210:	e00c      	b.n	800922c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	699b      	ldr	r3, [r3, #24]
 8009218:	43da      	mvns	r2, r3
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	4013      	ands	r3, r2
 800921e:	b29b      	uxth	r3, r3
 8009220:	2b00      	cmp	r3, #0
 8009222:	bf0c      	ite	eq
 8009224:	2301      	moveq	r3, #1
 8009226:	2300      	movne	r3, #0
 8009228:	b2db      	uxtb	r3, r3
 800922a:	461a      	mov	r2, r3
 800922c:	79fb      	ldrb	r3, [r7, #7]
 800922e:	429a      	cmp	r2, r3
 8009230:	d093      	beq.n	800915a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009232:	2300      	movs	r3, #0
}
 8009234:	4618      	mov	r0, r3
 8009236:	3710      	adds	r7, #16
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	60b9      	str	r1, [r7, #8]
 8009246:	607a      	str	r2, [r7, #4]
 8009248:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800924a:	e071      	b.n	8009330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	695b      	ldr	r3, [r3, #20]
 8009252:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800925a:	d123      	bne.n	80092a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800926a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009274:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2200      	movs	r2, #0
 800927a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2220      	movs	r2, #32
 8009280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2200      	movs	r2, #0
 8009288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009290:	f043 0204 	orr.w	r2, r3, #4
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2200      	movs	r2, #0
 800929c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80092a0:	2301      	movs	r3, #1
 80092a2:	e067      	b.n	8009374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092aa:	d041      	beq.n	8009330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092ac:	f7fe fa5e 	bl	800776c <HAL_GetTick>
 80092b0:	4602      	mov	r2, r0
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	1ad3      	subs	r3, r2, r3
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d302      	bcc.n	80092c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d136      	bne.n	8009330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	0c1b      	lsrs	r3, r3, #16
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d10c      	bne.n	80092e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	695b      	ldr	r3, [r3, #20]
 80092d2:	43da      	mvns	r2, r3
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	4013      	ands	r3, r2
 80092d8:	b29b      	uxth	r3, r3
 80092da:	2b00      	cmp	r3, #0
 80092dc:	bf14      	ite	ne
 80092de:	2301      	movne	r3, #1
 80092e0:	2300      	moveq	r3, #0
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	e00b      	b.n	80092fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	699b      	ldr	r3, [r3, #24]
 80092ec:	43da      	mvns	r2, r3
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	4013      	ands	r3, r2
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	bf14      	ite	ne
 80092f8:	2301      	movne	r3, #1
 80092fa:	2300      	moveq	r3, #0
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d016      	beq.n	8009330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2200      	movs	r2, #0
 8009306:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2220      	movs	r2, #32
 800930c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2200      	movs	r2, #0
 8009314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800931c:	f043 0220 	orr.w	r2, r3, #32
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2200      	movs	r2, #0
 8009328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800932c:	2301      	movs	r3, #1
 800932e:	e021      	b.n	8009374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	0c1b      	lsrs	r3, r3, #16
 8009334:	b2db      	uxtb	r3, r3
 8009336:	2b01      	cmp	r3, #1
 8009338:	d10c      	bne.n	8009354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	695b      	ldr	r3, [r3, #20]
 8009340:	43da      	mvns	r2, r3
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	4013      	ands	r3, r2
 8009346:	b29b      	uxth	r3, r3
 8009348:	2b00      	cmp	r3, #0
 800934a:	bf14      	ite	ne
 800934c:	2301      	movne	r3, #1
 800934e:	2300      	moveq	r3, #0
 8009350:	b2db      	uxtb	r3, r3
 8009352:	e00b      	b.n	800936c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	699b      	ldr	r3, [r3, #24]
 800935a:	43da      	mvns	r2, r3
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	4013      	ands	r3, r2
 8009360:	b29b      	uxth	r3, r3
 8009362:	2b00      	cmp	r3, #0
 8009364:	bf14      	ite	ne
 8009366:	2301      	movne	r3, #1
 8009368:	2300      	moveq	r3, #0
 800936a:	b2db      	uxtb	r3, r3
 800936c:	2b00      	cmp	r3, #0
 800936e:	f47f af6d 	bne.w	800924c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009372:	2300      	movs	r3, #0
}
 8009374:	4618      	mov	r0, r3
 8009376:	3710      	adds	r7, #16
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b084      	sub	sp, #16
 8009380:	af00      	add	r7, sp, #0
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009388:	e034      	b.n	80093f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	f000 f8e3 	bl	8009556 <I2C_IsAcknowledgeFailed>
 8009390:	4603      	mov	r3, r0
 8009392:	2b00      	cmp	r3, #0
 8009394:	d001      	beq.n	800939a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009396:	2301      	movs	r3, #1
 8009398:	e034      	b.n	8009404 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093a0:	d028      	beq.n	80093f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093a2:	f7fe f9e3 	bl	800776c <HAL_GetTick>
 80093a6:	4602      	mov	r2, r0
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	1ad3      	subs	r3, r2, r3
 80093ac:	68ba      	ldr	r2, [r7, #8]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d302      	bcc.n	80093b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d11d      	bne.n	80093f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	695b      	ldr	r3, [r3, #20]
 80093be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093c2:	2b80      	cmp	r3, #128	@ 0x80
 80093c4:	d016      	beq.n	80093f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2200      	movs	r2, #0
 80093ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2220      	movs	r2, #32
 80093d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2200      	movs	r2, #0
 80093d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093e0:	f043 0220 	orr.w	r2, r3, #32
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	e007      	b.n	8009404 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	695b      	ldr	r3, [r3, #20]
 80093fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093fe:	2b80      	cmp	r3, #128	@ 0x80
 8009400:	d1c3      	bne.n	800938a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009402:	2300      	movs	r3, #0
}
 8009404:	4618      	mov	r0, r3
 8009406:	3710      	adds	r7, #16
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009418:	e034      	b.n	8009484 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	f000 f89b 	bl	8009556 <I2C_IsAcknowledgeFailed>
 8009420:	4603      	mov	r3, r0
 8009422:	2b00      	cmp	r3, #0
 8009424:	d001      	beq.n	800942a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009426:	2301      	movs	r3, #1
 8009428:	e034      	b.n	8009494 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009430:	d028      	beq.n	8009484 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009432:	f7fe f99b 	bl	800776c <HAL_GetTick>
 8009436:	4602      	mov	r2, r0
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	1ad3      	subs	r3, r2, r3
 800943c:	68ba      	ldr	r2, [r7, #8]
 800943e:	429a      	cmp	r2, r3
 8009440:	d302      	bcc.n	8009448 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d11d      	bne.n	8009484 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	695b      	ldr	r3, [r3, #20]
 800944e:	f003 0304 	and.w	r3, r3, #4
 8009452:	2b04      	cmp	r3, #4
 8009454:	d016      	beq.n	8009484 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2200      	movs	r2, #0
 800945a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2220      	movs	r2, #32
 8009460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2200      	movs	r2, #0
 8009468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009470:	f043 0220 	orr.w	r2, r3, #32
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2200      	movs	r2, #0
 800947c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009480:	2301      	movs	r3, #1
 8009482:	e007      	b.n	8009494 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	695b      	ldr	r3, [r3, #20]
 800948a:	f003 0304 	and.w	r3, r3, #4
 800948e:	2b04      	cmp	r3, #4
 8009490:	d1c3      	bne.n	800941a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	3710      	adds	r7, #16
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80094a8:	e049      	b.n	800953e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	695b      	ldr	r3, [r3, #20]
 80094b0:	f003 0310 	and.w	r3, r3, #16
 80094b4:	2b10      	cmp	r3, #16
 80094b6:	d119      	bne.n	80094ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f06f 0210 	mvn.w	r2, #16
 80094c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2200      	movs	r2, #0
 80094c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2220      	movs	r2, #32
 80094cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2200      	movs	r2, #0
 80094d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2200      	movs	r2, #0
 80094e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80094e8:	2301      	movs	r3, #1
 80094ea:	e030      	b.n	800954e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094ec:	f7fe f93e 	bl	800776c <HAL_GetTick>
 80094f0:	4602      	mov	r2, r0
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	1ad3      	subs	r3, r2, r3
 80094f6:	68ba      	ldr	r2, [r7, #8]
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d302      	bcc.n	8009502 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d11d      	bne.n	800953e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	695b      	ldr	r3, [r3, #20]
 8009508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800950c:	2b40      	cmp	r3, #64	@ 0x40
 800950e:	d016      	beq.n	800953e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2200      	movs	r2, #0
 8009514:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2220      	movs	r2, #32
 800951a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2200      	movs	r2, #0
 8009522:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800952a:	f043 0220 	orr.w	r2, r3, #32
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2200      	movs	r2, #0
 8009536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800953a:	2301      	movs	r3, #1
 800953c:	e007      	b.n	800954e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	695b      	ldr	r3, [r3, #20]
 8009544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009548:	2b40      	cmp	r3, #64	@ 0x40
 800954a:	d1ae      	bne.n	80094aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800954c:	2300      	movs	r3, #0
}
 800954e:	4618      	mov	r0, r3
 8009550:	3710      	adds	r7, #16
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}

08009556 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009556:	b480      	push	{r7}
 8009558:	b083      	sub	sp, #12
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	695b      	ldr	r3, [r3, #20]
 8009564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009568:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800956c:	d11b      	bne.n	80095a6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009576:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2220      	movs	r2, #32
 8009582:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2200      	movs	r2, #0
 800958a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009592:	f043 0204 	orr.w	r2, r3, #4
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80095a2:	2301      	movs	r3, #1
 80095a4:	e000      	b.n	80095a8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80095a6:	2300      	movs	r3, #0
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	370c      	adds	r7, #12
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	2b20      	cmp	r3, #32
 80095c8:	d129      	bne.n	800961e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2224      	movs	r2, #36	@ 0x24
 80095ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f022 0201 	bic.w	r2, r2, #1
 80095e0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f022 0210 	bic.w	r2, r2, #16
 80095f0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	683a      	ldr	r2, [r7, #0]
 80095fe:	430a      	orrs	r2, r1
 8009600:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f042 0201 	orr.w	r2, r2, #1
 8009610:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2220      	movs	r2, #32
 8009616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800961a:	2300      	movs	r3, #0
 800961c:	e000      	b.n	8009620 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800961e:	2302      	movs	r3, #2
  }
}
 8009620:	4618      	mov	r0, r3
 8009622:	370c      	adds	r7, #12
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr

0800962c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800962c:	b480      	push	{r7}
 800962e:	b085      	sub	sp, #20
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8009636:	2300      	movs	r3, #0
 8009638:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009640:	b2db      	uxtb	r3, r3
 8009642:	2b20      	cmp	r3, #32
 8009644:	d12a      	bne.n	800969c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2224      	movs	r2, #36	@ 0x24
 800964a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f022 0201 	bic.w	r2, r2, #1
 800965c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009664:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8009666:	89fb      	ldrh	r3, [r7, #14]
 8009668:	f023 030f 	bic.w	r3, r3, #15
 800966c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	b29a      	uxth	r2, r3
 8009672:	89fb      	ldrh	r3, [r7, #14]
 8009674:	4313      	orrs	r3, r2
 8009676:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	89fa      	ldrh	r2, [r7, #14]
 800967e:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f042 0201 	orr.w	r2, r2, #1
 800968e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2220      	movs	r2, #32
 8009694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8009698:	2300      	movs	r3, #0
 800969a:	e000      	b.n	800969e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800969c:	2302      	movs	r3, #2
  }
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3714      	adds	r7, #20
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr
	...

080096ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80096b2:	2300      	movs	r3, #0
 80096b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80096b6:	2300      	movs	r3, #0
 80096b8:	603b      	str	r3, [r7, #0]
 80096ba:	4b20      	ldr	r3, [pc, #128]	@ (800973c <HAL_PWREx_EnableOverDrive+0x90>)
 80096bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096be:	4a1f      	ldr	r2, [pc, #124]	@ (800973c <HAL_PWREx_EnableOverDrive+0x90>)
 80096c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80096c6:	4b1d      	ldr	r3, [pc, #116]	@ (800973c <HAL_PWREx_EnableOverDrive+0x90>)
 80096c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80096ce:	603b      	str	r3, [r7, #0]
 80096d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80096d2:	4b1b      	ldr	r3, [pc, #108]	@ (8009740 <HAL_PWREx_EnableOverDrive+0x94>)
 80096d4:	2201      	movs	r2, #1
 80096d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80096d8:	f7fe f848 	bl	800776c <HAL_GetTick>
 80096dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80096de:	e009      	b.n	80096f4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80096e0:	f7fe f844 	bl	800776c <HAL_GetTick>
 80096e4:	4602      	mov	r2, r0
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	1ad3      	subs	r3, r2, r3
 80096ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80096ee:	d901      	bls.n	80096f4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80096f0:	2303      	movs	r3, #3
 80096f2:	e01f      	b.n	8009734 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80096f4:	4b13      	ldr	r3, [pc, #76]	@ (8009744 <HAL_PWREx_EnableOverDrive+0x98>)
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80096fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009700:	d1ee      	bne.n	80096e0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009702:	4b11      	ldr	r3, [pc, #68]	@ (8009748 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009704:	2201      	movs	r2, #1
 8009706:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009708:	f7fe f830 	bl	800776c <HAL_GetTick>
 800970c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800970e:	e009      	b.n	8009724 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009710:	f7fe f82c 	bl	800776c <HAL_GetTick>
 8009714:	4602      	mov	r2, r0
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	1ad3      	subs	r3, r2, r3
 800971a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800971e:	d901      	bls.n	8009724 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8009720:	2303      	movs	r3, #3
 8009722:	e007      	b.n	8009734 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009724:	4b07      	ldr	r3, [pc, #28]	@ (8009744 <HAL_PWREx_EnableOverDrive+0x98>)
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800972c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009730:	d1ee      	bne.n	8009710 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8009732:	2300      	movs	r3, #0
}
 8009734:	4618      	mov	r0, r3
 8009736:	3708      	adds	r7, #8
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}
 800973c:	40023800 	.word	0x40023800
 8009740:	420e0040 	.word	0x420e0040
 8009744:	40007000 	.word	0x40007000
 8009748:	420e0044 	.word	0x420e0044

0800974c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b086      	sub	sp, #24
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d101      	bne.n	800975e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	e267      	b.n	8009c2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f003 0301 	and.w	r3, r3, #1
 8009766:	2b00      	cmp	r3, #0
 8009768:	d075      	beq.n	8009856 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800976a:	4b88      	ldr	r3, [pc, #544]	@ (800998c <HAL_RCC_OscConfig+0x240>)
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	f003 030c 	and.w	r3, r3, #12
 8009772:	2b04      	cmp	r3, #4
 8009774:	d00c      	beq.n	8009790 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009776:	4b85      	ldr	r3, [pc, #532]	@ (800998c <HAL_RCC_OscConfig+0x240>)
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800977e:	2b08      	cmp	r3, #8
 8009780:	d112      	bne.n	80097a8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009782:	4b82      	ldr	r3, [pc, #520]	@ (800998c <HAL_RCC_OscConfig+0x240>)
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800978a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800978e:	d10b      	bne.n	80097a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009790:	4b7e      	ldr	r3, [pc, #504]	@ (800998c <HAL_RCC_OscConfig+0x240>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009798:	2b00      	cmp	r3, #0
 800979a:	d05b      	beq.n	8009854 <HAL_RCC_OscConfig+0x108>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d157      	bne.n	8009854 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80097a4:	2301      	movs	r3, #1
 80097a6:	e242      	b.n	8009c2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097b0:	d106      	bne.n	80097c0 <HAL_RCC_OscConfig+0x74>
 80097b2:	4b76      	ldr	r3, [pc, #472]	@ (800998c <HAL_RCC_OscConfig+0x240>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a75      	ldr	r2, [pc, #468]	@ (800998c <HAL_RCC_OscConfig+0x240>)
 80097b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80097bc:	6013      	str	r3, [r2, #0]
 80097be:	e01d      	b.n	80097fc <HAL_RCC_OscConfig+0xb0>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80097c8:	d10c      	bne.n	80097e4 <HAL_RCC_OscConfig+0x98>
 80097ca:	4b70      	ldr	r3, [pc, #448]	@ (800998c <HAL_RCC_OscConfig+0x240>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a6f      	ldr	r2, [pc, #444]	@ (800998c <HAL_RCC_OscConfig+0x240>)
 80097d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80097d4:	6013      	str	r3, [r2, #0]
 80097d6:	4b6d      	ldr	r3, [pc, #436]	@ (800998c <HAL_RCC_OscConfig+0x240>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a6c      	ldr	r2, [pc, #432]	@ (800998c <HAL_RCC_OscConfig+0x240>)
 80097dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80097e0:	6013      	str	r3, [r2, #0]
 80097e2:	e00b      	b.n	80097fc <HAL_RCC_OscConfig+0xb0>
 80097e4:	4b69      	ldr	r3, [pc, #420]	@ (800998c <HAL_RCC_OscConfig+0x240>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a68      	ldr	r2, [pc, #416]	@ (800998c <HAL_RCC_OscConfig+0x240>)
 80097ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80097ee:	6013      	str	r3, [r2, #0]
 80097f0:	4b66      	ldr	r3, [pc, #408]	@ (800998c <HAL_RCC_OscConfig+0x240>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a65      	ldr	r2, [pc, #404]	@ (800998c <HAL_RCC_OscConfig+0x240>)
 80097f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80097fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d013      	beq.n	800982c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009804:	f7fd ffb2 	bl	800776c <HAL_GetTick>
 8009808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800980a:	e008      	b.n	800981e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800980c:	f7fd ffae 	bl	800776c <HAL_GetTick>
 8009810:	4602      	mov	r2, r0
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	1ad3      	subs	r3, r2, r3
 8009816:	2b64      	cmp	r3, #100	@ 0x64
 8009818:	d901      	bls.n	800981e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800981a:	2303      	movs	r3, #3
 800981c:	e207      	b.n	8009c2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800981e:	4b5b      	ldr	r3, [pc, #364]	@ (800998c <HAL_RCC_OscConfig+0x240>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009826:	2b00      	cmp	r3, #0
 8009828:	d0f0      	beq.n	800980c <HAL_RCC_OscConfig+0xc0>
 800982a:	e014      	b.n	8009856 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800982c:	f7fd ff9e 	bl	800776c <HAL_GetTick>
 8009830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009832:	e008      	b.n	8009846 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009834:	f7fd ff9a 	bl	800776c <HAL_GetTick>
 8009838:	4602      	mov	r2, r0
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	1ad3      	subs	r3, r2, r3
 800983e:	2b64      	cmp	r3, #100	@ 0x64
 8009840:	d901      	bls.n	8009846 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009842:	2303      	movs	r3, #3
 8009844:	e1f3      	b.n	8009c2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009846:	4b51      	ldr	r3, [pc, #324]	@ (800998c <HAL_RCC_OscConfig+0x240>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800984e:	2b00      	cmp	r3, #0
 8009850:	d1f0      	bne.n	8009834 <HAL_RCC_OscConfig+0xe8>
 8009852:	e000      	b.n	8009856 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f003 0302 	and.w	r3, r3, #2
 800985e:	2b00      	cmp	r3, #0
 8009860:	d063      	beq.n	800992a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009862:	4b4a      	ldr	r3, [pc, #296]	@ (800998c <HAL_RCC_OscConfig+0x240>)
 8009864:	689b      	ldr	r3, [r3, #8]
 8009866:	f003 030c 	and.w	r3, r3, #12
 800986a:	2b00      	cmp	r3, #0
 800986c:	d00b      	beq.n	8009886 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800986e:	4b47      	ldr	r3, [pc, #284]	@ (800998c <HAL_RCC_OscConfig+0x240>)
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009876:	2b08      	cmp	r3, #8
 8009878:	d11c      	bne.n	80098b4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800987a:	4b44      	ldr	r3, [pc, #272]	@ (800998c <HAL_RCC_OscConfig+0x240>)
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009882:	2b00      	cmp	r3, #0
 8009884:	d116      	bne.n	80098b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009886:	4b41      	ldr	r3, [pc, #260]	@ (800998c <HAL_RCC_OscConfig+0x240>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f003 0302 	and.w	r3, r3, #2
 800988e:	2b00      	cmp	r3, #0
 8009890:	d005      	beq.n	800989e <HAL_RCC_OscConfig+0x152>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	68db      	ldr	r3, [r3, #12]
 8009896:	2b01      	cmp	r3, #1
 8009898:	d001      	beq.n	800989e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	e1c7      	b.n	8009c2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800989e:	4b3b      	ldr	r3, [pc, #236]	@ (800998c <HAL_RCC_OscConfig+0x240>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	691b      	ldr	r3, [r3, #16]
 80098aa:	00db      	lsls	r3, r3, #3
 80098ac:	4937      	ldr	r1, [pc, #220]	@ (800998c <HAL_RCC_OscConfig+0x240>)
 80098ae:	4313      	orrs	r3, r2
 80098b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80098b2:	e03a      	b.n	800992a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d020      	beq.n	80098fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80098bc:	4b34      	ldr	r3, [pc, #208]	@ (8009990 <HAL_RCC_OscConfig+0x244>)
 80098be:	2201      	movs	r2, #1
 80098c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098c2:	f7fd ff53 	bl	800776c <HAL_GetTick>
 80098c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80098c8:	e008      	b.n	80098dc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80098ca:	f7fd ff4f 	bl	800776c <HAL_GetTick>
 80098ce:	4602      	mov	r2, r0
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	1ad3      	subs	r3, r2, r3
 80098d4:	2b02      	cmp	r3, #2
 80098d6:	d901      	bls.n	80098dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80098d8:	2303      	movs	r3, #3
 80098da:	e1a8      	b.n	8009c2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80098dc:	4b2b      	ldr	r3, [pc, #172]	@ (800998c <HAL_RCC_OscConfig+0x240>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f003 0302 	and.w	r3, r3, #2
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d0f0      	beq.n	80098ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098e8:	4b28      	ldr	r3, [pc, #160]	@ (800998c <HAL_RCC_OscConfig+0x240>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	691b      	ldr	r3, [r3, #16]
 80098f4:	00db      	lsls	r3, r3, #3
 80098f6:	4925      	ldr	r1, [pc, #148]	@ (800998c <HAL_RCC_OscConfig+0x240>)
 80098f8:	4313      	orrs	r3, r2
 80098fa:	600b      	str	r3, [r1, #0]
 80098fc:	e015      	b.n	800992a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80098fe:	4b24      	ldr	r3, [pc, #144]	@ (8009990 <HAL_RCC_OscConfig+0x244>)
 8009900:	2200      	movs	r2, #0
 8009902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009904:	f7fd ff32 	bl	800776c <HAL_GetTick>
 8009908:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800990a:	e008      	b.n	800991e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800990c:	f7fd ff2e 	bl	800776c <HAL_GetTick>
 8009910:	4602      	mov	r2, r0
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	1ad3      	subs	r3, r2, r3
 8009916:	2b02      	cmp	r3, #2
 8009918:	d901      	bls.n	800991e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800991a:	2303      	movs	r3, #3
 800991c:	e187      	b.n	8009c2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800991e:	4b1b      	ldr	r3, [pc, #108]	@ (800998c <HAL_RCC_OscConfig+0x240>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f003 0302 	and.w	r3, r3, #2
 8009926:	2b00      	cmp	r3, #0
 8009928:	d1f0      	bne.n	800990c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f003 0308 	and.w	r3, r3, #8
 8009932:	2b00      	cmp	r3, #0
 8009934:	d036      	beq.n	80099a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	695b      	ldr	r3, [r3, #20]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d016      	beq.n	800996c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800993e:	4b15      	ldr	r3, [pc, #84]	@ (8009994 <HAL_RCC_OscConfig+0x248>)
 8009940:	2201      	movs	r2, #1
 8009942:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009944:	f7fd ff12 	bl	800776c <HAL_GetTick>
 8009948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800994a:	e008      	b.n	800995e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800994c:	f7fd ff0e 	bl	800776c <HAL_GetTick>
 8009950:	4602      	mov	r2, r0
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	1ad3      	subs	r3, r2, r3
 8009956:	2b02      	cmp	r3, #2
 8009958:	d901      	bls.n	800995e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800995a:	2303      	movs	r3, #3
 800995c:	e167      	b.n	8009c2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800995e:	4b0b      	ldr	r3, [pc, #44]	@ (800998c <HAL_RCC_OscConfig+0x240>)
 8009960:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009962:	f003 0302 	and.w	r3, r3, #2
 8009966:	2b00      	cmp	r3, #0
 8009968:	d0f0      	beq.n	800994c <HAL_RCC_OscConfig+0x200>
 800996a:	e01b      	b.n	80099a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800996c:	4b09      	ldr	r3, [pc, #36]	@ (8009994 <HAL_RCC_OscConfig+0x248>)
 800996e:	2200      	movs	r2, #0
 8009970:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009972:	f7fd fefb 	bl	800776c <HAL_GetTick>
 8009976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009978:	e00e      	b.n	8009998 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800997a:	f7fd fef7 	bl	800776c <HAL_GetTick>
 800997e:	4602      	mov	r2, r0
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	1ad3      	subs	r3, r2, r3
 8009984:	2b02      	cmp	r3, #2
 8009986:	d907      	bls.n	8009998 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009988:	2303      	movs	r3, #3
 800998a:	e150      	b.n	8009c2e <HAL_RCC_OscConfig+0x4e2>
 800998c:	40023800 	.word	0x40023800
 8009990:	42470000 	.word	0x42470000
 8009994:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009998:	4b88      	ldr	r3, [pc, #544]	@ (8009bbc <HAL_RCC_OscConfig+0x470>)
 800999a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800999c:	f003 0302 	and.w	r3, r3, #2
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d1ea      	bne.n	800997a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f003 0304 	and.w	r3, r3, #4
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	f000 8097 	beq.w	8009ae0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80099b2:	2300      	movs	r3, #0
 80099b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80099b6:	4b81      	ldr	r3, [pc, #516]	@ (8009bbc <HAL_RCC_OscConfig+0x470>)
 80099b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d10f      	bne.n	80099e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80099c2:	2300      	movs	r3, #0
 80099c4:	60bb      	str	r3, [r7, #8]
 80099c6:	4b7d      	ldr	r3, [pc, #500]	@ (8009bbc <HAL_RCC_OscConfig+0x470>)
 80099c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099ca:	4a7c      	ldr	r2, [pc, #496]	@ (8009bbc <HAL_RCC_OscConfig+0x470>)
 80099cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80099d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80099d2:	4b7a      	ldr	r3, [pc, #488]	@ (8009bbc <HAL_RCC_OscConfig+0x470>)
 80099d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80099da:	60bb      	str	r3, [r7, #8]
 80099dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80099de:	2301      	movs	r3, #1
 80099e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099e2:	4b77      	ldr	r3, [pc, #476]	@ (8009bc0 <HAL_RCC_OscConfig+0x474>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d118      	bne.n	8009a20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80099ee:	4b74      	ldr	r3, [pc, #464]	@ (8009bc0 <HAL_RCC_OscConfig+0x474>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a73      	ldr	r2, [pc, #460]	@ (8009bc0 <HAL_RCC_OscConfig+0x474>)
 80099f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80099f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80099fa:	f7fd feb7 	bl	800776c <HAL_GetTick>
 80099fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a00:	e008      	b.n	8009a14 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a02:	f7fd feb3 	bl	800776c <HAL_GetTick>
 8009a06:	4602      	mov	r2, r0
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	1ad3      	subs	r3, r2, r3
 8009a0c:	2b02      	cmp	r3, #2
 8009a0e:	d901      	bls.n	8009a14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009a10:	2303      	movs	r3, #3
 8009a12:	e10c      	b.n	8009c2e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a14:	4b6a      	ldr	r3, [pc, #424]	@ (8009bc0 <HAL_RCC_OscConfig+0x474>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d0f0      	beq.n	8009a02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d106      	bne.n	8009a36 <HAL_RCC_OscConfig+0x2ea>
 8009a28:	4b64      	ldr	r3, [pc, #400]	@ (8009bbc <HAL_RCC_OscConfig+0x470>)
 8009a2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a2c:	4a63      	ldr	r2, [pc, #396]	@ (8009bbc <HAL_RCC_OscConfig+0x470>)
 8009a2e:	f043 0301 	orr.w	r3, r3, #1
 8009a32:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a34:	e01c      	b.n	8009a70 <HAL_RCC_OscConfig+0x324>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	689b      	ldr	r3, [r3, #8]
 8009a3a:	2b05      	cmp	r3, #5
 8009a3c:	d10c      	bne.n	8009a58 <HAL_RCC_OscConfig+0x30c>
 8009a3e:	4b5f      	ldr	r3, [pc, #380]	@ (8009bbc <HAL_RCC_OscConfig+0x470>)
 8009a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a42:	4a5e      	ldr	r2, [pc, #376]	@ (8009bbc <HAL_RCC_OscConfig+0x470>)
 8009a44:	f043 0304 	orr.w	r3, r3, #4
 8009a48:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a4a:	4b5c      	ldr	r3, [pc, #368]	@ (8009bbc <HAL_RCC_OscConfig+0x470>)
 8009a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a4e:	4a5b      	ldr	r2, [pc, #364]	@ (8009bbc <HAL_RCC_OscConfig+0x470>)
 8009a50:	f043 0301 	orr.w	r3, r3, #1
 8009a54:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a56:	e00b      	b.n	8009a70 <HAL_RCC_OscConfig+0x324>
 8009a58:	4b58      	ldr	r3, [pc, #352]	@ (8009bbc <HAL_RCC_OscConfig+0x470>)
 8009a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a5c:	4a57      	ldr	r2, [pc, #348]	@ (8009bbc <HAL_RCC_OscConfig+0x470>)
 8009a5e:	f023 0301 	bic.w	r3, r3, #1
 8009a62:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a64:	4b55      	ldr	r3, [pc, #340]	@ (8009bbc <HAL_RCC_OscConfig+0x470>)
 8009a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a68:	4a54      	ldr	r2, [pc, #336]	@ (8009bbc <HAL_RCC_OscConfig+0x470>)
 8009a6a:	f023 0304 	bic.w	r3, r3, #4
 8009a6e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	689b      	ldr	r3, [r3, #8]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d015      	beq.n	8009aa4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a78:	f7fd fe78 	bl	800776c <HAL_GetTick>
 8009a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a7e:	e00a      	b.n	8009a96 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a80:	f7fd fe74 	bl	800776c <HAL_GetTick>
 8009a84:	4602      	mov	r2, r0
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	1ad3      	subs	r3, r2, r3
 8009a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d901      	bls.n	8009a96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009a92:	2303      	movs	r3, #3
 8009a94:	e0cb      	b.n	8009c2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a96:	4b49      	ldr	r3, [pc, #292]	@ (8009bbc <HAL_RCC_OscConfig+0x470>)
 8009a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a9a:	f003 0302 	and.w	r3, r3, #2
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d0ee      	beq.n	8009a80 <HAL_RCC_OscConfig+0x334>
 8009aa2:	e014      	b.n	8009ace <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009aa4:	f7fd fe62 	bl	800776c <HAL_GetTick>
 8009aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009aaa:	e00a      	b.n	8009ac2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009aac:	f7fd fe5e 	bl	800776c <HAL_GetTick>
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	1ad3      	subs	r3, r2, r3
 8009ab6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d901      	bls.n	8009ac2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009abe:	2303      	movs	r3, #3
 8009ac0:	e0b5      	b.n	8009c2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009ac2:	4b3e      	ldr	r3, [pc, #248]	@ (8009bbc <HAL_RCC_OscConfig+0x470>)
 8009ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ac6:	f003 0302 	and.w	r3, r3, #2
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d1ee      	bne.n	8009aac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009ace:	7dfb      	ldrb	r3, [r7, #23]
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d105      	bne.n	8009ae0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009ad4:	4b39      	ldr	r3, [pc, #228]	@ (8009bbc <HAL_RCC_OscConfig+0x470>)
 8009ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ad8:	4a38      	ldr	r2, [pc, #224]	@ (8009bbc <HAL_RCC_OscConfig+0x470>)
 8009ada:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ade:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	699b      	ldr	r3, [r3, #24]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	f000 80a1 	beq.w	8009c2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009aea:	4b34      	ldr	r3, [pc, #208]	@ (8009bbc <HAL_RCC_OscConfig+0x470>)
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	f003 030c 	and.w	r3, r3, #12
 8009af2:	2b08      	cmp	r3, #8
 8009af4:	d05c      	beq.n	8009bb0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	699b      	ldr	r3, [r3, #24]
 8009afa:	2b02      	cmp	r3, #2
 8009afc:	d141      	bne.n	8009b82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009afe:	4b31      	ldr	r3, [pc, #196]	@ (8009bc4 <HAL_RCC_OscConfig+0x478>)
 8009b00:	2200      	movs	r2, #0
 8009b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b04:	f7fd fe32 	bl	800776c <HAL_GetTick>
 8009b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b0a:	e008      	b.n	8009b1e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b0c:	f7fd fe2e 	bl	800776c <HAL_GetTick>
 8009b10:	4602      	mov	r2, r0
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	1ad3      	subs	r3, r2, r3
 8009b16:	2b02      	cmp	r3, #2
 8009b18:	d901      	bls.n	8009b1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009b1a:	2303      	movs	r3, #3
 8009b1c:	e087      	b.n	8009c2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b1e:	4b27      	ldr	r3, [pc, #156]	@ (8009bbc <HAL_RCC_OscConfig+0x470>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d1f0      	bne.n	8009b0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	69da      	ldr	r2, [r3, #28]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6a1b      	ldr	r3, [r3, #32]
 8009b32:	431a      	orrs	r2, r3
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b38:	019b      	lsls	r3, r3, #6
 8009b3a:	431a      	orrs	r2, r3
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b40:	085b      	lsrs	r3, r3, #1
 8009b42:	3b01      	subs	r3, #1
 8009b44:	041b      	lsls	r3, r3, #16
 8009b46:	431a      	orrs	r2, r3
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b4c:	061b      	lsls	r3, r3, #24
 8009b4e:	491b      	ldr	r1, [pc, #108]	@ (8009bbc <HAL_RCC_OscConfig+0x470>)
 8009b50:	4313      	orrs	r3, r2
 8009b52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009b54:	4b1b      	ldr	r3, [pc, #108]	@ (8009bc4 <HAL_RCC_OscConfig+0x478>)
 8009b56:	2201      	movs	r2, #1
 8009b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b5a:	f7fd fe07 	bl	800776c <HAL_GetTick>
 8009b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b60:	e008      	b.n	8009b74 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b62:	f7fd fe03 	bl	800776c <HAL_GetTick>
 8009b66:	4602      	mov	r2, r0
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	1ad3      	subs	r3, r2, r3
 8009b6c:	2b02      	cmp	r3, #2
 8009b6e:	d901      	bls.n	8009b74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009b70:	2303      	movs	r3, #3
 8009b72:	e05c      	b.n	8009c2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b74:	4b11      	ldr	r3, [pc, #68]	@ (8009bbc <HAL_RCC_OscConfig+0x470>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d0f0      	beq.n	8009b62 <HAL_RCC_OscConfig+0x416>
 8009b80:	e054      	b.n	8009c2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b82:	4b10      	ldr	r3, [pc, #64]	@ (8009bc4 <HAL_RCC_OscConfig+0x478>)
 8009b84:	2200      	movs	r2, #0
 8009b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b88:	f7fd fdf0 	bl	800776c <HAL_GetTick>
 8009b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b8e:	e008      	b.n	8009ba2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b90:	f7fd fdec 	bl	800776c <HAL_GetTick>
 8009b94:	4602      	mov	r2, r0
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	1ad3      	subs	r3, r2, r3
 8009b9a:	2b02      	cmp	r3, #2
 8009b9c:	d901      	bls.n	8009ba2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009b9e:	2303      	movs	r3, #3
 8009ba0:	e045      	b.n	8009c2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ba2:	4b06      	ldr	r3, [pc, #24]	@ (8009bbc <HAL_RCC_OscConfig+0x470>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d1f0      	bne.n	8009b90 <HAL_RCC_OscConfig+0x444>
 8009bae:	e03d      	b.n	8009c2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	699b      	ldr	r3, [r3, #24]
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	d107      	bne.n	8009bc8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	e038      	b.n	8009c2e <HAL_RCC_OscConfig+0x4e2>
 8009bbc:	40023800 	.word	0x40023800
 8009bc0:	40007000 	.word	0x40007000
 8009bc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8009c38 <HAL_RCC_OscConfig+0x4ec>)
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	699b      	ldr	r3, [r3, #24]
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d028      	beq.n	8009c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d121      	bne.n	8009c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d11a      	bne.n	8009c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009bf2:	68fa      	ldr	r2, [r7, #12]
 8009bf4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009bf8:	4013      	ands	r3, r2
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009bfe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d111      	bne.n	8009c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c0e:	085b      	lsrs	r3, r3, #1
 8009c10:	3b01      	subs	r3, #1
 8009c12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d107      	bne.n	8009c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d001      	beq.n	8009c2c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	e000      	b.n	8009c2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009c2c:	2300      	movs	r3, #0
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3718      	adds	r7, #24
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop
 8009c38:	40023800 	.word	0x40023800

08009c3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d101      	bne.n	8009c50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	e0cc      	b.n	8009dea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009c50:	4b68      	ldr	r3, [pc, #416]	@ (8009df4 <HAL_RCC_ClockConfig+0x1b8>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f003 030f 	and.w	r3, r3, #15
 8009c58:	683a      	ldr	r2, [r7, #0]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d90c      	bls.n	8009c78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c5e:	4b65      	ldr	r3, [pc, #404]	@ (8009df4 <HAL_RCC_ClockConfig+0x1b8>)
 8009c60:	683a      	ldr	r2, [r7, #0]
 8009c62:	b2d2      	uxtb	r2, r2
 8009c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c66:	4b63      	ldr	r3, [pc, #396]	@ (8009df4 <HAL_RCC_ClockConfig+0x1b8>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f003 030f 	and.w	r3, r3, #15
 8009c6e:	683a      	ldr	r2, [r7, #0]
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d001      	beq.n	8009c78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009c74:	2301      	movs	r3, #1
 8009c76:	e0b8      	b.n	8009dea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f003 0302 	and.w	r3, r3, #2
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d020      	beq.n	8009cc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f003 0304 	and.w	r3, r3, #4
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d005      	beq.n	8009c9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009c90:	4b59      	ldr	r3, [pc, #356]	@ (8009df8 <HAL_RCC_ClockConfig+0x1bc>)
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	4a58      	ldr	r2, [pc, #352]	@ (8009df8 <HAL_RCC_ClockConfig+0x1bc>)
 8009c96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009c9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f003 0308 	and.w	r3, r3, #8
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d005      	beq.n	8009cb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009ca8:	4b53      	ldr	r3, [pc, #332]	@ (8009df8 <HAL_RCC_ClockConfig+0x1bc>)
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	4a52      	ldr	r2, [pc, #328]	@ (8009df8 <HAL_RCC_ClockConfig+0x1bc>)
 8009cae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009cb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009cb4:	4b50      	ldr	r3, [pc, #320]	@ (8009df8 <HAL_RCC_ClockConfig+0x1bc>)
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	494d      	ldr	r1, [pc, #308]	@ (8009df8 <HAL_RCC_ClockConfig+0x1bc>)
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f003 0301 	and.w	r3, r3, #1
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d044      	beq.n	8009d5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d107      	bne.n	8009cea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009cda:	4b47      	ldr	r3, [pc, #284]	@ (8009df8 <HAL_RCC_ClockConfig+0x1bc>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d119      	bne.n	8009d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	e07f      	b.n	8009dea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	2b02      	cmp	r3, #2
 8009cf0:	d003      	beq.n	8009cfa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009cf6:	2b03      	cmp	r3, #3
 8009cf8:	d107      	bne.n	8009d0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009cfa:	4b3f      	ldr	r3, [pc, #252]	@ (8009df8 <HAL_RCC_ClockConfig+0x1bc>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d109      	bne.n	8009d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d06:	2301      	movs	r3, #1
 8009d08:	e06f      	b.n	8009dea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d0a:	4b3b      	ldr	r3, [pc, #236]	@ (8009df8 <HAL_RCC_ClockConfig+0x1bc>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f003 0302 	and.w	r3, r3, #2
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d101      	bne.n	8009d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d16:	2301      	movs	r3, #1
 8009d18:	e067      	b.n	8009dea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009d1a:	4b37      	ldr	r3, [pc, #220]	@ (8009df8 <HAL_RCC_ClockConfig+0x1bc>)
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	f023 0203 	bic.w	r2, r3, #3
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	4934      	ldr	r1, [pc, #208]	@ (8009df8 <HAL_RCC_ClockConfig+0x1bc>)
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009d2c:	f7fd fd1e 	bl	800776c <HAL_GetTick>
 8009d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d32:	e00a      	b.n	8009d4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d34:	f7fd fd1a 	bl	800776c <HAL_GetTick>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	1ad3      	subs	r3, r2, r3
 8009d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d901      	bls.n	8009d4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009d46:	2303      	movs	r3, #3
 8009d48:	e04f      	b.n	8009dea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d4a:	4b2b      	ldr	r3, [pc, #172]	@ (8009df8 <HAL_RCC_ClockConfig+0x1bc>)
 8009d4c:	689b      	ldr	r3, [r3, #8]
 8009d4e:	f003 020c 	and.w	r2, r3, #12
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	009b      	lsls	r3, r3, #2
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d1eb      	bne.n	8009d34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009d5c:	4b25      	ldr	r3, [pc, #148]	@ (8009df4 <HAL_RCC_ClockConfig+0x1b8>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f003 030f 	and.w	r3, r3, #15
 8009d64:	683a      	ldr	r2, [r7, #0]
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d20c      	bcs.n	8009d84 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d6a:	4b22      	ldr	r3, [pc, #136]	@ (8009df4 <HAL_RCC_ClockConfig+0x1b8>)
 8009d6c:	683a      	ldr	r2, [r7, #0]
 8009d6e:	b2d2      	uxtb	r2, r2
 8009d70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d72:	4b20      	ldr	r3, [pc, #128]	@ (8009df4 <HAL_RCC_ClockConfig+0x1b8>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f003 030f 	and.w	r3, r3, #15
 8009d7a:	683a      	ldr	r2, [r7, #0]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d001      	beq.n	8009d84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009d80:	2301      	movs	r3, #1
 8009d82:	e032      	b.n	8009dea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f003 0304 	and.w	r3, r3, #4
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d008      	beq.n	8009da2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009d90:	4b19      	ldr	r3, [pc, #100]	@ (8009df8 <HAL_RCC_ClockConfig+0x1bc>)
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	4916      	ldr	r1, [pc, #88]	@ (8009df8 <HAL_RCC_ClockConfig+0x1bc>)
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f003 0308 	and.w	r3, r3, #8
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d009      	beq.n	8009dc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009dae:	4b12      	ldr	r3, [pc, #72]	@ (8009df8 <HAL_RCC_ClockConfig+0x1bc>)
 8009db0:	689b      	ldr	r3, [r3, #8]
 8009db2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	691b      	ldr	r3, [r3, #16]
 8009dba:	00db      	lsls	r3, r3, #3
 8009dbc:	490e      	ldr	r1, [pc, #56]	@ (8009df8 <HAL_RCC_ClockConfig+0x1bc>)
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009dc2:	f000 f821 	bl	8009e08 <HAL_RCC_GetSysClockFreq>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8009df8 <HAL_RCC_ClockConfig+0x1bc>)
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	091b      	lsrs	r3, r3, #4
 8009dce:	f003 030f 	and.w	r3, r3, #15
 8009dd2:	490a      	ldr	r1, [pc, #40]	@ (8009dfc <HAL_RCC_ClockConfig+0x1c0>)
 8009dd4:	5ccb      	ldrb	r3, [r1, r3]
 8009dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8009dda:	4a09      	ldr	r2, [pc, #36]	@ (8009e00 <HAL_RCC_ClockConfig+0x1c4>)
 8009ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8009dde:	4b09      	ldr	r3, [pc, #36]	@ (8009e04 <HAL_RCC_ClockConfig+0x1c8>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7fd fc7e 	bl	80076e4 <HAL_InitTick>

  return HAL_OK;
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3710      	adds	r7, #16
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	40023c00 	.word	0x40023c00
 8009df8:	40023800 	.word	0x40023800
 8009dfc:	0800da60 	.word	0x0800da60
 8009e00:	20000994 	.word	0x20000994
 8009e04:	20000998 	.word	0x20000998

08009e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e0c:	b090      	sub	sp, #64	@ 0x40
 8009e0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009e10:	2300      	movs	r3, #0
 8009e12:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8009e14:	2300      	movs	r3, #0
 8009e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009e20:	4b59      	ldr	r3, [pc, #356]	@ (8009f88 <HAL_RCC_GetSysClockFreq+0x180>)
 8009e22:	689b      	ldr	r3, [r3, #8]
 8009e24:	f003 030c 	and.w	r3, r3, #12
 8009e28:	2b08      	cmp	r3, #8
 8009e2a:	d00d      	beq.n	8009e48 <HAL_RCC_GetSysClockFreq+0x40>
 8009e2c:	2b08      	cmp	r3, #8
 8009e2e:	f200 80a1 	bhi.w	8009f74 <HAL_RCC_GetSysClockFreq+0x16c>
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d002      	beq.n	8009e3c <HAL_RCC_GetSysClockFreq+0x34>
 8009e36:	2b04      	cmp	r3, #4
 8009e38:	d003      	beq.n	8009e42 <HAL_RCC_GetSysClockFreq+0x3a>
 8009e3a:	e09b      	b.n	8009f74 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009e3c:	4b53      	ldr	r3, [pc, #332]	@ (8009f8c <HAL_RCC_GetSysClockFreq+0x184>)
 8009e3e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009e40:	e09b      	b.n	8009f7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009e42:	4b53      	ldr	r3, [pc, #332]	@ (8009f90 <HAL_RCC_GetSysClockFreq+0x188>)
 8009e44:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009e46:	e098      	b.n	8009f7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009e48:	4b4f      	ldr	r3, [pc, #316]	@ (8009f88 <HAL_RCC_GetSysClockFreq+0x180>)
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009e50:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009e52:	4b4d      	ldr	r3, [pc, #308]	@ (8009f88 <HAL_RCC_GetSysClockFreq+0x180>)
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d028      	beq.n	8009eb0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009e5e:	4b4a      	ldr	r3, [pc, #296]	@ (8009f88 <HAL_RCC_GetSysClockFreq+0x180>)
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	099b      	lsrs	r3, r3, #6
 8009e64:	2200      	movs	r2, #0
 8009e66:	623b      	str	r3, [r7, #32]
 8009e68:	627a      	str	r2, [r7, #36]	@ 0x24
 8009e6a:	6a3b      	ldr	r3, [r7, #32]
 8009e6c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009e70:	2100      	movs	r1, #0
 8009e72:	4b47      	ldr	r3, [pc, #284]	@ (8009f90 <HAL_RCC_GetSysClockFreq+0x188>)
 8009e74:	fb03 f201 	mul.w	r2, r3, r1
 8009e78:	2300      	movs	r3, #0
 8009e7a:	fb00 f303 	mul.w	r3, r0, r3
 8009e7e:	4413      	add	r3, r2
 8009e80:	4a43      	ldr	r2, [pc, #268]	@ (8009f90 <HAL_RCC_GetSysClockFreq+0x188>)
 8009e82:	fba0 1202 	umull	r1, r2, r0, r2
 8009e86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009e88:	460a      	mov	r2, r1
 8009e8a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009e8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e8e:	4413      	add	r3, r2
 8009e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e94:	2200      	movs	r2, #0
 8009e96:	61bb      	str	r3, [r7, #24]
 8009e98:	61fa      	str	r2, [r7, #28]
 8009e9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009e9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009ea2:	f7f6 fef7 	bl	8000c94 <__aeabi_uldivmod>
 8009ea6:	4602      	mov	r2, r0
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	4613      	mov	r3, r2
 8009eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009eae:	e053      	b.n	8009f58 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009eb0:	4b35      	ldr	r3, [pc, #212]	@ (8009f88 <HAL_RCC_GetSysClockFreq+0x180>)
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	099b      	lsrs	r3, r3, #6
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	613b      	str	r3, [r7, #16]
 8009eba:	617a      	str	r2, [r7, #20]
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009ec2:	f04f 0b00 	mov.w	fp, #0
 8009ec6:	4652      	mov	r2, sl
 8009ec8:	465b      	mov	r3, fp
 8009eca:	f04f 0000 	mov.w	r0, #0
 8009ece:	f04f 0100 	mov.w	r1, #0
 8009ed2:	0159      	lsls	r1, r3, #5
 8009ed4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009ed8:	0150      	lsls	r0, r2, #5
 8009eda:	4602      	mov	r2, r0
 8009edc:	460b      	mov	r3, r1
 8009ede:	ebb2 080a 	subs.w	r8, r2, sl
 8009ee2:	eb63 090b 	sbc.w	r9, r3, fp
 8009ee6:	f04f 0200 	mov.w	r2, #0
 8009eea:	f04f 0300 	mov.w	r3, #0
 8009eee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009ef2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009ef6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009efa:	ebb2 0408 	subs.w	r4, r2, r8
 8009efe:	eb63 0509 	sbc.w	r5, r3, r9
 8009f02:	f04f 0200 	mov.w	r2, #0
 8009f06:	f04f 0300 	mov.w	r3, #0
 8009f0a:	00eb      	lsls	r3, r5, #3
 8009f0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009f10:	00e2      	lsls	r2, r4, #3
 8009f12:	4614      	mov	r4, r2
 8009f14:	461d      	mov	r5, r3
 8009f16:	eb14 030a 	adds.w	r3, r4, sl
 8009f1a:	603b      	str	r3, [r7, #0]
 8009f1c:	eb45 030b 	adc.w	r3, r5, fp
 8009f20:	607b      	str	r3, [r7, #4]
 8009f22:	f04f 0200 	mov.w	r2, #0
 8009f26:	f04f 0300 	mov.w	r3, #0
 8009f2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009f2e:	4629      	mov	r1, r5
 8009f30:	028b      	lsls	r3, r1, #10
 8009f32:	4621      	mov	r1, r4
 8009f34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009f38:	4621      	mov	r1, r4
 8009f3a:	028a      	lsls	r2, r1, #10
 8009f3c:	4610      	mov	r0, r2
 8009f3e:	4619      	mov	r1, r3
 8009f40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f42:	2200      	movs	r2, #0
 8009f44:	60bb      	str	r3, [r7, #8]
 8009f46:	60fa      	str	r2, [r7, #12]
 8009f48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009f4c:	f7f6 fea2 	bl	8000c94 <__aeabi_uldivmod>
 8009f50:	4602      	mov	r2, r0
 8009f52:	460b      	mov	r3, r1
 8009f54:	4613      	mov	r3, r2
 8009f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8009f58:	4b0b      	ldr	r3, [pc, #44]	@ (8009f88 <HAL_RCC_GetSysClockFreq+0x180>)
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	0c1b      	lsrs	r3, r3, #16
 8009f5e:	f003 0303 	and.w	r3, r3, #3
 8009f62:	3301      	adds	r3, #1
 8009f64:	005b      	lsls	r3, r3, #1
 8009f66:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8009f68:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f70:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009f72:	e002      	b.n	8009f7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009f74:	4b05      	ldr	r3, [pc, #20]	@ (8009f8c <HAL_RCC_GetSysClockFreq+0x184>)
 8009f76:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009f78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3740      	adds	r7, #64	@ 0x40
 8009f80:	46bd      	mov	sp, r7
 8009f82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f86:	bf00      	nop
 8009f88:	40023800 	.word	0x40023800
 8009f8c:	00f42400 	.word	0x00f42400
 8009f90:	017d7840 	.word	0x017d7840

08009f94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009f94:	b480      	push	{r7}
 8009f96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009f98:	4b03      	ldr	r3, [pc, #12]	@ (8009fa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr
 8009fa6:	bf00      	nop
 8009fa8:	20000994 	.word	0x20000994

08009fac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009fb0:	f7ff fff0 	bl	8009f94 <HAL_RCC_GetHCLKFreq>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	4b05      	ldr	r3, [pc, #20]	@ (8009fcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	0a9b      	lsrs	r3, r3, #10
 8009fbc:	f003 0307 	and.w	r3, r3, #7
 8009fc0:	4903      	ldr	r1, [pc, #12]	@ (8009fd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009fc2:	5ccb      	ldrb	r3, [r1, r3]
 8009fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	bd80      	pop	{r7, pc}
 8009fcc:	40023800 	.word	0x40023800
 8009fd0:	0800da70 	.word	0x0800da70

08009fd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009fd8:	f7ff ffdc 	bl	8009f94 <HAL_RCC_GetHCLKFreq>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	4b05      	ldr	r3, [pc, #20]	@ (8009ff4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	0b5b      	lsrs	r3, r3, #13
 8009fe4:	f003 0307 	and.w	r3, r3, #7
 8009fe8:	4903      	ldr	r1, [pc, #12]	@ (8009ff8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009fea:	5ccb      	ldrb	r3, [r1, r3]
 8009fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	bd80      	pop	{r7, pc}
 8009ff4:	40023800 	.word	0x40023800
 8009ff8:	0800da70 	.word	0x0800da70

08009ffc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b082      	sub	sp, #8
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d101      	bne.n	800a00e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a00a:	2301      	movs	r3, #1
 800a00c:	e07b      	b.n	800a106 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a012:	2b00      	cmp	r3, #0
 800a014:	d108      	bne.n	800a028 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a01e:	d009      	beq.n	800a034 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	61da      	str	r2, [r3, #28]
 800a026:	e005      	b.n	800a034 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2200      	movs	r2, #0
 800a02c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2200      	movs	r2, #0
 800a032:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a040:	b2db      	uxtb	r3, r3
 800a042:	2b00      	cmp	r3, #0
 800a044:	d106      	bne.n	800a054 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2200      	movs	r2, #0
 800a04a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f7fd f80c 	bl	800706c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2202      	movs	r2, #2
 800a058:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a06a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	689b      	ldr	r3, [r3, #8]
 800a078:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a07c:	431a      	orrs	r2, r3
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	68db      	ldr	r3, [r3, #12]
 800a082:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a086:	431a      	orrs	r2, r3
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	691b      	ldr	r3, [r3, #16]
 800a08c:	f003 0302 	and.w	r3, r3, #2
 800a090:	431a      	orrs	r2, r3
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	695b      	ldr	r3, [r3, #20]
 800a096:	f003 0301 	and.w	r3, r3, #1
 800a09a:	431a      	orrs	r2, r3
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	699b      	ldr	r3, [r3, #24]
 800a0a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a0a4:	431a      	orrs	r2, r3
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	69db      	ldr	r3, [r3, #28]
 800a0aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a0ae:	431a      	orrs	r2, r3
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6a1b      	ldr	r3, [r3, #32]
 800a0b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0b8:	ea42 0103 	orr.w	r1, r2, r3
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0c0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	430a      	orrs	r2, r1
 800a0ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	699b      	ldr	r3, [r3, #24]
 800a0d0:	0c1b      	lsrs	r3, r3, #16
 800a0d2:	f003 0104 	and.w	r1, r3, #4
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0da:	f003 0210 	and.w	r2, r3, #16
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	430a      	orrs	r2, r1
 800a0e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	69da      	ldr	r2, [r3, #28]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a0f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2201      	movs	r2, #1
 800a100:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800a104:	2300      	movs	r3, #0
}
 800a106:	4618      	mov	r0, r3
 800a108:	3708      	adds	r7, #8
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a10e:	b580      	push	{r7, lr}
 800a110:	b088      	sub	sp, #32
 800a112:	af00      	add	r7, sp, #0
 800a114:	60f8      	str	r0, [r7, #12]
 800a116:	60b9      	str	r1, [r7, #8]
 800a118:	603b      	str	r3, [r7, #0]
 800a11a:	4613      	mov	r3, r2
 800a11c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a11e:	f7fd fb25 	bl	800776c <HAL_GetTick>
 800a122:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800a124:	88fb      	ldrh	r3, [r7, #6]
 800a126:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a12e:	b2db      	uxtb	r3, r3
 800a130:	2b01      	cmp	r3, #1
 800a132:	d001      	beq.n	800a138 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800a134:	2302      	movs	r3, #2
 800a136:	e12a      	b.n	800a38e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d002      	beq.n	800a144 <HAL_SPI_Transmit+0x36>
 800a13e:	88fb      	ldrh	r3, [r7, #6]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d101      	bne.n	800a148 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800a144:	2301      	movs	r3, #1
 800a146:	e122      	b.n	800a38e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a14e:	2b01      	cmp	r3, #1
 800a150:	d101      	bne.n	800a156 <HAL_SPI_Transmit+0x48>
 800a152:	2302      	movs	r3, #2
 800a154:	e11b      	b.n	800a38e <HAL_SPI_Transmit+0x280>
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2201      	movs	r2, #1
 800a15a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2203      	movs	r2, #3
 800a162:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2200      	movs	r2, #0
 800a16a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	68ba      	ldr	r2, [r7, #8]
 800a170:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	88fa      	ldrh	r2, [r7, #6]
 800a176:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	88fa      	ldrh	r2, [r7, #6]
 800a17c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2200      	movs	r2, #0
 800a182:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2200      	movs	r2, #0
 800a188:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2200      	movs	r2, #0
 800a18e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2200      	movs	r2, #0
 800a194:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2200      	movs	r2, #0
 800a19a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	689b      	ldr	r3, [r3, #8]
 800a1a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a1a4:	d10f      	bne.n	800a1c6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a1b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a1c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1d0:	2b40      	cmp	r3, #64	@ 0x40
 800a1d2:	d007      	beq.n	800a1e4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	681a      	ldr	r2, [r3, #0]
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a1e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a1ec:	d152      	bne.n	800a294 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	685b      	ldr	r3, [r3, #4]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d002      	beq.n	800a1fc <HAL_SPI_Transmit+0xee>
 800a1f6:	8b7b      	ldrh	r3, [r7, #26]
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d145      	bne.n	800a288 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a200:	881a      	ldrh	r2, [r3, #0]
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a20c:	1c9a      	adds	r2, r3, #2
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a216:	b29b      	uxth	r3, r3
 800a218:	3b01      	subs	r3, #1
 800a21a:	b29a      	uxth	r2, r3
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a220:	e032      	b.n	800a288 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	689b      	ldr	r3, [r3, #8]
 800a228:	f003 0302 	and.w	r3, r3, #2
 800a22c:	2b02      	cmp	r3, #2
 800a22e:	d112      	bne.n	800a256 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a234:	881a      	ldrh	r2, [r3, #0]
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a240:	1c9a      	adds	r2, r3, #2
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a24a:	b29b      	uxth	r3, r3
 800a24c:	3b01      	subs	r3, #1
 800a24e:	b29a      	uxth	r2, r3
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	86da      	strh	r2, [r3, #54]	@ 0x36
 800a254:	e018      	b.n	800a288 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a256:	f7fd fa89 	bl	800776c <HAL_GetTick>
 800a25a:	4602      	mov	r2, r0
 800a25c:	69fb      	ldr	r3, [r7, #28]
 800a25e:	1ad3      	subs	r3, r2, r3
 800a260:	683a      	ldr	r2, [r7, #0]
 800a262:	429a      	cmp	r2, r3
 800a264:	d803      	bhi.n	800a26e <HAL_SPI_Transmit+0x160>
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a26c:	d102      	bne.n	800a274 <HAL_SPI_Transmit+0x166>
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d109      	bne.n	800a288 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2201      	movs	r2, #1
 800a278:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2200      	movs	r2, #0
 800a280:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800a284:	2303      	movs	r3, #3
 800a286:	e082      	b.n	800a38e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d1c7      	bne.n	800a222 <HAL_SPI_Transmit+0x114>
 800a292:	e053      	b.n	800a33c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d002      	beq.n	800a2a2 <HAL_SPI_Transmit+0x194>
 800a29c:	8b7b      	ldrh	r3, [r7, #26]
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	d147      	bne.n	800a332 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	330c      	adds	r3, #12
 800a2ac:	7812      	ldrb	r2, [r2, #0]
 800a2ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2b4:	1c5a      	adds	r2, r3, #1
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	3b01      	subs	r3, #1
 800a2c2:	b29a      	uxth	r2, r3
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a2c8:	e033      	b.n	800a332 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	689b      	ldr	r3, [r3, #8]
 800a2d0:	f003 0302 	and.w	r3, r3, #2
 800a2d4:	2b02      	cmp	r3, #2
 800a2d6:	d113      	bne.n	800a300 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	330c      	adds	r3, #12
 800a2e2:	7812      	ldrb	r2, [r2, #0]
 800a2e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2ea:	1c5a      	adds	r2, r3, #1
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	b29a      	uxth	r2, r3
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	86da      	strh	r2, [r3, #54]	@ 0x36
 800a2fe:	e018      	b.n	800a332 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a300:	f7fd fa34 	bl	800776c <HAL_GetTick>
 800a304:	4602      	mov	r2, r0
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	1ad3      	subs	r3, r2, r3
 800a30a:	683a      	ldr	r2, [r7, #0]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d803      	bhi.n	800a318 <HAL_SPI_Transmit+0x20a>
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a316:	d102      	bne.n	800a31e <HAL_SPI_Transmit+0x210>
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d109      	bne.n	800a332 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2201      	movs	r2, #1
 800a322:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2200      	movs	r2, #0
 800a32a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800a32e:	2303      	movs	r3, #3
 800a330:	e02d      	b.n	800a38e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a336:	b29b      	uxth	r3, r3
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d1c6      	bne.n	800a2ca <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a33c:	69fa      	ldr	r2, [r7, #28]
 800a33e:	6839      	ldr	r1, [r7, #0]
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	f000 fa59 	bl	800a7f8 <SPI_EndRxTxTransaction>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d002      	beq.n	800a352 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2220      	movs	r2, #32
 800a350:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	689b      	ldr	r3, [r3, #8]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d10a      	bne.n	800a370 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a35a:	2300      	movs	r3, #0
 800a35c:	617b      	str	r3, [r7, #20]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	68db      	ldr	r3, [r3, #12]
 800a364:	617b      	str	r3, [r7, #20]
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	689b      	ldr	r3, [r3, #8]
 800a36c:	617b      	str	r3, [r7, #20]
 800a36e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2201      	movs	r2, #1
 800a374:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2200      	movs	r2, #0
 800a37c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a384:	2b00      	cmp	r3, #0
 800a386:	d001      	beq.n	800a38c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800a388:	2301      	movs	r3, #1
 800a38a:	e000      	b.n	800a38e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800a38c:	2300      	movs	r3, #0
  }
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3720      	adds	r7, #32
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b08a      	sub	sp, #40	@ 0x28
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	60f8      	str	r0, [r7, #12]
 800a39e:	60b9      	str	r1, [r7, #8]
 800a3a0:	607a      	str	r2, [r7, #4]
 800a3a2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a3a8:	f7fd f9e0 	bl	800776c <HAL_GetTick>
 800a3ac:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a3b4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800a3bc:	887b      	ldrh	r3, [r7, #2]
 800a3be:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a3c0:	7ffb      	ldrb	r3, [r7, #31]
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d00c      	beq.n	800a3e0 <HAL_SPI_TransmitReceive+0x4a>
 800a3c6:	69bb      	ldr	r3, [r7, #24]
 800a3c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a3cc:	d106      	bne.n	800a3dc <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	689b      	ldr	r3, [r3, #8]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d102      	bne.n	800a3dc <HAL_SPI_TransmitReceive+0x46>
 800a3d6:	7ffb      	ldrb	r3, [r7, #31]
 800a3d8:	2b04      	cmp	r3, #4
 800a3da:	d001      	beq.n	800a3e0 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800a3dc:	2302      	movs	r3, #2
 800a3de:	e17f      	b.n	800a6e0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d005      	beq.n	800a3f2 <HAL_SPI_TransmitReceive+0x5c>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d002      	beq.n	800a3f2 <HAL_SPI_TransmitReceive+0x5c>
 800a3ec:	887b      	ldrh	r3, [r7, #2]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d101      	bne.n	800a3f6 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	e174      	b.n	800a6e0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d101      	bne.n	800a404 <HAL_SPI_TransmitReceive+0x6e>
 800a400:	2302      	movs	r3, #2
 800a402:	e16d      	b.n	800a6e0 <HAL_SPI_TransmitReceive+0x34a>
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2201      	movs	r2, #1
 800a408:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a412:	b2db      	uxtb	r3, r3
 800a414:	2b04      	cmp	r3, #4
 800a416:	d003      	beq.n	800a420 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2205      	movs	r2, #5
 800a41c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2200      	movs	r2, #0
 800a424:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	887a      	ldrh	r2, [r7, #2]
 800a430:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	887a      	ldrh	r2, [r7, #2]
 800a436:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	68ba      	ldr	r2, [r7, #8]
 800a43c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	887a      	ldrh	r2, [r7, #2]
 800a442:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	887a      	ldrh	r2, [r7, #2]
 800a448:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2200      	movs	r2, #0
 800a44e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2200      	movs	r2, #0
 800a454:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a460:	2b40      	cmp	r3, #64	@ 0x40
 800a462:	d007      	beq.n	800a474 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a472:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	68db      	ldr	r3, [r3, #12]
 800a478:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a47c:	d17e      	bne.n	800a57c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d002      	beq.n	800a48c <HAL_SPI_TransmitReceive+0xf6>
 800a486:	8afb      	ldrh	r3, [r7, #22]
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d16c      	bne.n	800a566 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a490:	881a      	ldrh	r2, [r3, #0]
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a49c:	1c9a      	adds	r2, r3, #2
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	3b01      	subs	r3, #1
 800a4aa:	b29a      	uxth	r2, r3
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a4b0:	e059      	b.n	800a566 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	f003 0302 	and.w	r3, r3, #2
 800a4bc:	2b02      	cmp	r3, #2
 800a4be:	d11b      	bne.n	800a4f8 <HAL_SPI_TransmitReceive+0x162>
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d016      	beq.n	800a4f8 <HAL_SPI_TransmitReceive+0x162>
 800a4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d113      	bne.n	800a4f8 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4d4:	881a      	ldrh	r2, [r3, #0]
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4e0:	1c9a      	adds	r2, r3, #2
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a4ea:	b29b      	uxth	r3, r3
 800a4ec:	3b01      	subs	r3, #1
 800a4ee:	b29a      	uxth	r2, r3
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	689b      	ldr	r3, [r3, #8]
 800a4fe:	f003 0301 	and.w	r3, r3, #1
 800a502:	2b01      	cmp	r3, #1
 800a504:	d119      	bne.n	800a53a <HAL_SPI_TransmitReceive+0x1a4>
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d014      	beq.n	800a53a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	68da      	ldr	r2, [r3, #12]
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a51a:	b292      	uxth	r2, r2
 800a51c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a522:	1c9a      	adds	r2, r3, #2
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	3b01      	subs	r3, #1
 800a530:	b29a      	uxth	r2, r3
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a536:	2301      	movs	r3, #1
 800a538:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a53a:	f7fd f917 	bl	800776c <HAL_GetTick>
 800a53e:	4602      	mov	r2, r0
 800a540:	6a3b      	ldr	r3, [r7, #32]
 800a542:	1ad3      	subs	r3, r2, r3
 800a544:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a546:	429a      	cmp	r2, r3
 800a548:	d80d      	bhi.n	800a566 <HAL_SPI_TransmitReceive+0x1d0>
 800a54a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a54c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a550:	d009      	beq.n	800a566 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2201      	movs	r2, #1
 800a556:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	2200      	movs	r2, #0
 800a55e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800a562:	2303      	movs	r3, #3
 800a564:	e0bc      	b.n	800a6e0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d1a0      	bne.n	800a4b2 <HAL_SPI_TransmitReceive+0x11c>
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a574:	b29b      	uxth	r3, r3
 800a576:	2b00      	cmp	r3, #0
 800a578:	d19b      	bne.n	800a4b2 <HAL_SPI_TransmitReceive+0x11c>
 800a57a:	e082      	b.n	800a682 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d002      	beq.n	800a58a <HAL_SPI_TransmitReceive+0x1f4>
 800a584:	8afb      	ldrh	r3, [r7, #22]
 800a586:	2b01      	cmp	r3, #1
 800a588:	d171      	bne.n	800a66e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	330c      	adds	r3, #12
 800a594:	7812      	ldrb	r2, [r2, #0]
 800a596:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a59c:	1c5a      	adds	r2, r3, #1
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a5a6:	b29b      	uxth	r3, r3
 800a5a8:	3b01      	subs	r3, #1
 800a5aa:	b29a      	uxth	r2, r3
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a5b0:	e05d      	b.n	800a66e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	689b      	ldr	r3, [r3, #8]
 800a5b8:	f003 0302 	and.w	r3, r3, #2
 800a5bc:	2b02      	cmp	r3, #2
 800a5be:	d11c      	bne.n	800a5fa <HAL_SPI_TransmitReceive+0x264>
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a5c4:	b29b      	uxth	r3, r3
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d017      	beq.n	800a5fa <HAL_SPI_TransmitReceive+0x264>
 800a5ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d114      	bne.n	800a5fa <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	330c      	adds	r3, #12
 800a5da:	7812      	ldrb	r2, [r2, #0]
 800a5dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5e2:	1c5a      	adds	r2, r3, #1
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	3b01      	subs	r3, #1
 800a5f0:	b29a      	uxth	r2, r3
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	f003 0301 	and.w	r3, r3, #1
 800a604:	2b01      	cmp	r3, #1
 800a606:	d119      	bne.n	800a63c <HAL_SPI_TransmitReceive+0x2a6>
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d014      	beq.n	800a63c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	68da      	ldr	r2, [r3, #12]
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a61c:	b2d2      	uxtb	r2, r2
 800a61e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a624:	1c5a      	adds	r2, r3, #1
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a62e:	b29b      	uxth	r3, r3
 800a630:	3b01      	subs	r3, #1
 800a632:	b29a      	uxth	r2, r3
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a638:	2301      	movs	r3, #1
 800a63a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a63c:	f7fd f896 	bl	800776c <HAL_GetTick>
 800a640:	4602      	mov	r2, r0
 800a642:	6a3b      	ldr	r3, [r7, #32]
 800a644:	1ad3      	subs	r3, r2, r3
 800a646:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a648:	429a      	cmp	r2, r3
 800a64a:	d803      	bhi.n	800a654 <HAL_SPI_TransmitReceive+0x2be>
 800a64c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a64e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a652:	d102      	bne.n	800a65a <HAL_SPI_TransmitReceive+0x2c4>
 800a654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a656:	2b00      	cmp	r3, #0
 800a658:	d109      	bne.n	800a66e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2201      	movs	r2, #1
 800a65e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	2200      	movs	r2, #0
 800a666:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800a66a:	2303      	movs	r3, #3
 800a66c:	e038      	b.n	800a6e0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a672:	b29b      	uxth	r3, r3
 800a674:	2b00      	cmp	r3, #0
 800a676:	d19c      	bne.n	800a5b2 <HAL_SPI_TransmitReceive+0x21c>
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d197      	bne.n	800a5b2 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a682:	6a3a      	ldr	r2, [r7, #32]
 800a684:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a686:	68f8      	ldr	r0, [r7, #12]
 800a688:	f000 f8b6 	bl	800a7f8 <SPI_EndRxTxTransaction>
 800a68c:	4603      	mov	r3, r0
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d008      	beq.n	800a6a4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2220      	movs	r2, #32
 800a696:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2200      	movs	r2, #0
 800a69c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	e01d      	b.n	800a6e0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d10a      	bne.n	800a6c2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	613b      	str	r3, [r7, #16]
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	613b      	str	r3, [r7, #16]
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	689b      	ldr	r3, [r3, #8]
 800a6be:	613b      	str	r3, [r7, #16]
 800a6c0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d001      	beq.n	800a6de <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	e000      	b.n	800a6e0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800a6de:	2300      	movs	r3, #0
  }
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3728      	adds	r7, #40	@ 0x28
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b088      	sub	sp, #32
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	60f8      	str	r0, [r7, #12]
 800a6f0:	60b9      	str	r1, [r7, #8]
 800a6f2:	603b      	str	r3, [r7, #0]
 800a6f4:	4613      	mov	r3, r2
 800a6f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a6f8:	f7fd f838 	bl	800776c <HAL_GetTick>
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a700:	1a9b      	subs	r3, r3, r2
 800a702:	683a      	ldr	r2, [r7, #0]
 800a704:	4413      	add	r3, r2
 800a706:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a708:	f7fd f830 	bl	800776c <HAL_GetTick>
 800a70c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a70e:	4b39      	ldr	r3, [pc, #228]	@ (800a7f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	015b      	lsls	r3, r3, #5
 800a714:	0d1b      	lsrs	r3, r3, #20
 800a716:	69fa      	ldr	r2, [r7, #28]
 800a718:	fb02 f303 	mul.w	r3, r2, r3
 800a71c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a71e:	e054      	b.n	800a7ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a726:	d050      	beq.n	800a7ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a728:	f7fd f820 	bl	800776c <HAL_GetTick>
 800a72c:	4602      	mov	r2, r0
 800a72e:	69bb      	ldr	r3, [r7, #24]
 800a730:	1ad3      	subs	r3, r2, r3
 800a732:	69fa      	ldr	r2, [r7, #28]
 800a734:	429a      	cmp	r2, r3
 800a736:	d902      	bls.n	800a73e <SPI_WaitFlagStateUntilTimeout+0x56>
 800a738:	69fb      	ldr	r3, [r7, #28]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d13d      	bne.n	800a7ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	685a      	ldr	r2, [r3, #4]
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a74c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a756:	d111      	bne.n	800a77c <SPI_WaitFlagStateUntilTimeout+0x94>
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	689b      	ldr	r3, [r3, #8]
 800a75c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a760:	d004      	beq.n	800a76c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	689b      	ldr	r3, [r3, #8]
 800a766:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a76a:	d107      	bne.n	800a77c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a77a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a780:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a784:	d10f      	bne.n	800a7a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a794:	601a      	str	r2, [r3, #0]
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a7a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800a7b6:	2303      	movs	r3, #3
 800a7b8:	e017      	b.n	800a7ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d101      	bne.n	800a7c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	3b01      	subs	r3, #1
 800a7c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	689a      	ldr	r2, [r3, #8]
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	4013      	ands	r3, r2
 800a7d4:	68ba      	ldr	r2, [r7, #8]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	bf0c      	ite	eq
 800a7da:	2301      	moveq	r3, #1
 800a7dc:	2300      	movne	r3, #0
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	79fb      	ldrb	r3, [r7, #7]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d19b      	bne.n	800a720 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a7e8:	2300      	movs	r3, #0
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3720      	adds	r7, #32
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	20000994 	.word	0x20000994

0800a7f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b088      	sub	sp, #32
 800a7fc:	af02      	add	r7, sp, #8
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	60b9      	str	r1, [r7, #8]
 800a802:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	9300      	str	r3, [sp, #0]
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	2201      	movs	r2, #1
 800a80c:	2102      	movs	r1, #2
 800a80e:	68f8      	ldr	r0, [r7, #12]
 800a810:	f7ff ff6a 	bl	800a6e8 <SPI_WaitFlagStateUntilTimeout>
 800a814:	4603      	mov	r3, r0
 800a816:	2b00      	cmp	r3, #0
 800a818:	d007      	beq.n	800a82a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a81e:	f043 0220 	orr.w	r2, r3, #32
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800a826:	2303      	movs	r3, #3
 800a828:	e032      	b.n	800a890 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a82a:	4b1b      	ldr	r3, [pc, #108]	@ (800a898 <SPI_EndRxTxTransaction+0xa0>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4a1b      	ldr	r2, [pc, #108]	@ (800a89c <SPI_EndRxTxTransaction+0xa4>)
 800a830:	fba2 2303 	umull	r2, r3, r2, r3
 800a834:	0d5b      	lsrs	r3, r3, #21
 800a836:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a83a:	fb02 f303 	mul.w	r3, r2, r3
 800a83e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a848:	d112      	bne.n	800a870 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	9300      	str	r3, [sp, #0]
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	2200      	movs	r2, #0
 800a852:	2180      	movs	r1, #128	@ 0x80
 800a854:	68f8      	ldr	r0, [r7, #12]
 800a856:	f7ff ff47 	bl	800a6e8 <SPI_WaitFlagStateUntilTimeout>
 800a85a:	4603      	mov	r3, r0
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d016      	beq.n	800a88e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a864:	f043 0220 	orr.w	r2, r3, #32
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800a86c:	2303      	movs	r3, #3
 800a86e:	e00f      	b.n	800a890 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d00a      	beq.n	800a88c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	3b01      	subs	r3, #1
 800a87a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	689b      	ldr	r3, [r3, #8]
 800a882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a886:	2b80      	cmp	r3, #128	@ 0x80
 800a888:	d0f2      	beq.n	800a870 <SPI_EndRxTxTransaction+0x78>
 800a88a:	e000      	b.n	800a88e <SPI_EndRxTxTransaction+0x96>
        break;
 800a88c:	bf00      	nop
  }

  return HAL_OK;
 800a88e:	2300      	movs	r3, #0
}
 800a890:	4618      	mov	r0, r3
 800a892:	3718      	adds	r7, #24
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}
 800a898:	20000994 	.word	0x20000994
 800a89c:	165e9f81 	.word	0x165e9f81

0800a8a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b082      	sub	sp, #8
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d101      	bne.n	800a8b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	e041      	b.n	800a936 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a8b8:	b2db      	uxtb	r3, r3
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d106      	bne.n	800a8cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f7fc fccc 	bl	8007264 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2202      	movs	r2, #2
 800a8d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681a      	ldr	r2, [r3, #0]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	3304      	adds	r3, #4
 800a8dc:	4619      	mov	r1, r3
 800a8de:	4610      	mov	r0, r2
 800a8e0:	f000 f994 	bl	800ac0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2201      	movs	r2, #1
 800a900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2201      	movs	r2, #1
 800a908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2201      	movs	r2, #1
 800a910:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2201      	movs	r2, #1
 800a918:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2201      	movs	r2, #1
 800a920:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2201      	movs	r2, #1
 800a928:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2201      	movs	r2, #1
 800a930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a934:	2300      	movs	r3, #0
}
 800a936:	4618      	mov	r0, r3
 800a938:	3708      	adds	r7, #8
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
	...

0800a940 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a940:	b480      	push	{r7}
 800a942:	b085      	sub	sp, #20
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a94e:	b2db      	uxtb	r3, r3
 800a950:	2b01      	cmp	r3, #1
 800a952:	d001      	beq.n	800a958 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a954:	2301      	movs	r3, #1
 800a956:	e04e      	b.n	800a9f6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2202      	movs	r2, #2
 800a95c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	68da      	ldr	r2, [r3, #12]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f042 0201 	orr.w	r2, r2, #1
 800a96e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4a23      	ldr	r2, [pc, #140]	@ (800aa04 <HAL_TIM_Base_Start_IT+0xc4>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d022      	beq.n	800a9c0 <HAL_TIM_Base_Start_IT+0x80>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a982:	d01d      	beq.n	800a9c0 <HAL_TIM_Base_Start_IT+0x80>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a1f      	ldr	r2, [pc, #124]	@ (800aa08 <HAL_TIM_Base_Start_IT+0xc8>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d018      	beq.n	800a9c0 <HAL_TIM_Base_Start_IT+0x80>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	4a1e      	ldr	r2, [pc, #120]	@ (800aa0c <HAL_TIM_Base_Start_IT+0xcc>)
 800a994:	4293      	cmp	r3, r2
 800a996:	d013      	beq.n	800a9c0 <HAL_TIM_Base_Start_IT+0x80>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4a1c      	ldr	r2, [pc, #112]	@ (800aa10 <HAL_TIM_Base_Start_IT+0xd0>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d00e      	beq.n	800a9c0 <HAL_TIM_Base_Start_IT+0x80>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	4a1b      	ldr	r2, [pc, #108]	@ (800aa14 <HAL_TIM_Base_Start_IT+0xd4>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d009      	beq.n	800a9c0 <HAL_TIM_Base_Start_IT+0x80>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4a19      	ldr	r2, [pc, #100]	@ (800aa18 <HAL_TIM_Base_Start_IT+0xd8>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d004      	beq.n	800a9c0 <HAL_TIM_Base_Start_IT+0x80>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	4a18      	ldr	r2, [pc, #96]	@ (800aa1c <HAL_TIM_Base_Start_IT+0xdc>)
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d111      	bne.n	800a9e4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	689b      	ldr	r3, [r3, #8]
 800a9c6:	f003 0307 	and.w	r3, r3, #7
 800a9ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2b06      	cmp	r3, #6
 800a9d0:	d010      	beq.n	800a9f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	681a      	ldr	r2, [r3, #0]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f042 0201 	orr.w	r2, r2, #1
 800a9e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9e2:	e007      	b.n	800a9f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	681a      	ldr	r2, [r3, #0]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f042 0201 	orr.w	r2, r2, #1
 800a9f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a9f4:	2300      	movs	r3, #0
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3714      	adds	r7, #20
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr
 800aa02:	bf00      	nop
 800aa04:	40010000 	.word	0x40010000
 800aa08:	40000400 	.word	0x40000400
 800aa0c:	40000800 	.word	0x40000800
 800aa10:	40000c00 	.word	0x40000c00
 800aa14:	40010400 	.word	0x40010400
 800aa18:	40014000 	.word	0x40014000
 800aa1c:	40001800 	.word	0x40001800

0800aa20 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b083      	sub	sp, #12
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	68da      	ldr	r2, [r3, #12]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f022 0201 	bic.w	r2, r2, #1
 800aa36:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	6a1a      	ldr	r2, [r3, #32]
 800aa3e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800aa42:	4013      	ands	r3, r2
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d10f      	bne.n	800aa68 <HAL_TIM_Base_Stop_IT+0x48>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	6a1a      	ldr	r2, [r3, #32]
 800aa4e:	f240 4344 	movw	r3, #1092	@ 0x444
 800aa52:	4013      	ands	r3, r2
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d107      	bne.n	800aa68 <HAL_TIM_Base_Stop_IT+0x48>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	681a      	ldr	r2, [r3, #0]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f022 0201 	bic.w	r2, r2, #1
 800aa66:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800aa70:	2300      	movs	r3, #0
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	370c      	adds	r7, #12
 800aa76:	46bd      	mov	sp, r7
 800aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7c:	4770      	bx	lr

0800aa7e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aa7e:	b580      	push	{r7, lr}
 800aa80:	b084      	sub	sp, #16
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
 800aa86:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	d101      	bne.n	800aa9a <HAL_TIM_ConfigClockSource+0x1c>
 800aa96:	2302      	movs	r3, #2
 800aa98:	e0b4      	b.n	800ac04 <HAL_TIM_ConfigClockSource+0x186>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2202      	movs	r2, #2
 800aaa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	689b      	ldr	r3, [r3, #8]
 800aab0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800aab8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800aac0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	68ba      	ldr	r2, [r7, #8]
 800aac8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aad2:	d03e      	beq.n	800ab52 <HAL_TIM_ConfigClockSource+0xd4>
 800aad4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aad8:	f200 8087 	bhi.w	800abea <HAL_TIM_ConfigClockSource+0x16c>
 800aadc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aae0:	f000 8086 	beq.w	800abf0 <HAL_TIM_ConfigClockSource+0x172>
 800aae4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aae8:	d87f      	bhi.n	800abea <HAL_TIM_ConfigClockSource+0x16c>
 800aaea:	2b70      	cmp	r3, #112	@ 0x70
 800aaec:	d01a      	beq.n	800ab24 <HAL_TIM_ConfigClockSource+0xa6>
 800aaee:	2b70      	cmp	r3, #112	@ 0x70
 800aaf0:	d87b      	bhi.n	800abea <HAL_TIM_ConfigClockSource+0x16c>
 800aaf2:	2b60      	cmp	r3, #96	@ 0x60
 800aaf4:	d050      	beq.n	800ab98 <HAL_TIM_ConfigClockSource+0x11a>
 800aaf6:	2b60      	cmp	r3, #96	@ 0x60
 800aaf8:	d877      	bhi.n	800abea <HAL_TIM_ConfigClockSource+0x16c>
 800aafa:	2b50      	cmp	r3, #80	@ 0x50
 800aafc:	d03c      	beq.n	800ab78 <HAL_TIM_ConfigClockSource+0xfa>
 800aafe:	2b50      	cmp	r3, #80	@ 0x50
 800ab00:	d873      	bhi.n	800abea <HAL_TIM_ConfigClockSource+0x16c>
 800ab02:	2b40      	cmp	r3, #64	@ 0x40
 800ab04:	d058      	beq.n	800abb8 <HAL_TIM_ConfigClockSource+0x13a>
 800ab06:	2b40      	cmp	r3, #64	@ 0x40
 800ab08:	d86f      	bhi.n	800abea <HAL_TIM_ConfigClockSource+0x16c>
 800ab0a:	2b30      	cmp	r3, #48	@ 0x30
 800ab0c:	d064      	beq.n	800abd8 <HAL_TIM_ConfigClockSource+0x15a>
 800ab0e:	2b30      	cmp	r3, #48	@ 0x30
 800ab10:	d86b      	bhi.n	800abea <HAL_TIM_ConfigClockSource+0x16c>
 800ab12:	2b20      	cmp	r3, #32
 800ab14:	d060      	beq.n	800abd8 <HAL_TIM_ConfigClockSource+0x15a>
 800ab16:	2b20      	cmp	r3, #32
 800ab18:	d867      	bhi.n	800abea <HAL_TIM_ConfigClockSource+0x16c>
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d05c      	beq.n	800abd8 <HAL_TIM_ConfigClockSource+0x15a>
 800ab1e:	2b10      	cmp	r3, #16
 800ab20:	d05a      	beq.n	800abd8 <HAL_TIM_ConfigClockSource+0x15a>
 800ab22:	e062      	b.n	800abea <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ab34:	f000 f990 	bl	800ae58 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	689b      	ldr	r3, [r3, #8]
 800ab3e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ab46:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	68ba      	ldr	r2, [r7, #8]
 800ab4e:	609a      	str	r2, [r3, #8]
      break;
 800ab50:	e04f      	b.n	800abf2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ab62:	f000 f979 	bl	800ae58 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	689a      	ldr	r2, [r3, #8]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ab74:	609a      	str	r2, [r3, #8]
      break;
 800ab76:	e03c      	b.n	800abf2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab84:	461a      	mov	r2, r3
 800ab86:	f000 f8ed 	bl	800ad64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	2150      	movs	r1, #80	@ 0x50
 800ab90:	4618      	mov	r0, r3
 800ab92:	f000 f946 	bl	800ae22 <TIM_ITRx_SetConfig>
      break;
 800ab96:	e02c      	b.n	800abf2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aba4:	461a      	mov	r2, r3
 800aba6:	f000 f90c 	bl	800adc2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	2160      	movs	r1, #96	@ 0x60
 800abb0:	4618      	mov	r0, r3
 800abb2:	f000 f936 	bl	800ae22 <TIM_ITRx_SetConfig>
      break;
 800abb6:	e01c      	b.n	800abf2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800abc4:	461a      	mov	r2, r3
 800abc6:	f000 f8cd 	bl	800ad64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	2140      	movs	r1, #64	@ 0x40
 800abd0:	4618      	mov	r0, r3
 800abd2:	f000 f926 	bl	800ae22 <TIM_ITRx_SetConfig>
      break;
 800abd6:	e00c      	b.n	800abf2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4619      	mov	r1, r3
 800abe2:	4610      	mov	r0, r2
 800abe4:	f000 f91d 	bl	800ae22 <TIM_ITRx_SetConfig>
      break;
 800abe8:	e003      	b.n	800abf2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800abea:	2301      	movs	r3, #1
 800abec:	73fb      	strb	r3, [r7, #15]
      break;
 800abee:	e000      	b.n	800abf2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800abf0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2201      	movs	r2, #1
 800abf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2200      	movs	r2, #0
 800abfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ac02:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3710      	adds	r7, #16
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b085      	sub	sp, #20
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	4a46      	ldr	r2, [pc, #280]	@ (800ad38 <TIM_Base_SetConfig+0x12c>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d013      	beq.n	800ac4c <TIM_Base_SetConfig+0x40>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac2a:	d00f      	beq.n	800ac4c <TIM_Base_SetConfig+0x40>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	4a43      	ldr	r2, [pc, #268]	@ (800ad3c <TIM_Base_SetConfig+0x130>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d00b      	beq.n	800ac4c <TIM_Base_SetConfig+0x40>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	4a42      	ldr	r2, [pc, #264]	@ (800ad40 <TIM_Base_SetConfig+0x134>)
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d007      	beq.n	800ac4c <TIM_Base_SetConfig+0x40>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	4a41      	ldr	r2, [pc, #260]	@ (800ad44 <TIM_Base_SetConfig+0x138>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d003      	beq.n	800ac4c <TIM_Base_SetConfig+0x40>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	4a40      	ldr	r2, [pc, #256]	@ (800ad48 <TIM_Base_SetConfig+0x13c>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d108      	bne.n	800ac5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	68fa      	ldr	r2, [r7, #12]
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	4a35      	ldr	r2, [pc, #212]	@ (800ad38 <TIM_Base_SetConfig+0x12c>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d02b      	beq.n	800acbe <TIM_Base_SetConfig+0xb2>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac6c:	d027      	beq.n	800acbe <TIM_Base_SetConfig+0xb2>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	4a32      	ldr	r2, [pc, #200]	@ (800ad3c <TIM_Base_SetConfig+0x130>)
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d023      	beq.n	800acbe <TIM_Base_SetConfig+0xb2>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	4a31      	ldr	r2, [pc, #196]	@ (800ad40 <TIM_Base_SetConfig+0x134>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d01f      	beq.n	800acbe <TIM_Base_SetConfig+0xb2>
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	4a30      	ldr	r2, [pc, #192]	@ (800ad44 <TIM_Base_SetConfig+0x138>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d01b      	beq.n	800acbe <TIM_Base_SetConfig+0xb2>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	4a2f      	ldr	r2, [pc, #188]	@ (800ad48 <TIM_Base_SetConfig+0x13c>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d017      	beq.n	800acbe <TIM_Base_SetConfig+0xb2>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	4a2e      	ldr	r2, [pc, #184]	@ (800ad4c <TIM_Base_SetConfig+0x140>)
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d013      	beq.n	800acbe <TIM_Base_SetConfig+0xb2>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	4a2d      	ldr	r2, [pc, #180]	@ (800ad50 <TIM_Base_SetConfig+0x144>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d00f      	beq.n	800acbe <TIM_Base_SetConfig+0xb2>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	4a2c      	ldr	r2, [pc, #176]	@ (800ad54 <TIM_Base_SetConfig+0x148>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d00b      	beq.n	800acbe <TIM_Base_SetConfig+0xb2>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	4a2b      	ldr	r2, [pc, #172]	@ (800ad58 <TIM_Base_SetConfig+0x14c>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d007      	beq.n	800acbe <TIM_Base_SetConfig+0xb2>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	4a2a      	ldr	r2, [pc, #168]	@ (800ad5c <TIM_Base_SetConfig+0x150>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d003      	beq.n	800acbe <TIM_Base_SetConfig+0xb2>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	4a29      	ldr	r2, [pc, #164]	@ (800ad60 <TIM_Base_SetConfig+0x154>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d108      	bne.n	800acd0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800acc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	68db      	ldr	r3, [r3, #12]
 800acca:	68fa      	ldr	r2, [r7, #12]
 800accc:	4313      	orrs	r3, r2
 800acce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	695b      	ldr	r3, [r3, #20]
 800acda:	4313      	orrs	r3, r2
 800acdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	68fa      	ldr	r2, [r7, #12]
 800ace2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	689a      	ldr	r2, [r3, #8]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	681a      	ldr	r2, [r3, #0]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	4a10      	ldr	r2, [pc, #64]	@ (800ad38 <TIM_Base_SetConfig+0x12c>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d003      	beq.n	800ad04 <TIM_Base_SetConfig+0xf8>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	4a12      	ldr	r2, [pc, #72]	@ (800ad48 <TIM_Base_SetConfig+0x13c>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d103      	bne.n	800ad0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	691a      	ldr	r2, [r3, #16]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2201      	movs	r2, #1
 800ad10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	691b      	ldr	r3, [r3, #16]
 800ad16:	f003 0301 	and.w	r3, r3, #1
 800ad1a:	2b01      	cmp	r3, #1
 800ad1c:	d105      	bne.n	800ad2a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	691b      	ldr	r3, [r3, #16]
 800ad22:	f023 0201 	bic.w	r2, r3, #1
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	611a      	str	r2, [r3, #16]
  }
}
 800ad2a:	bf00      	nop
 800ad2c:	3714      	adds	r7, #20
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad34:	4770      	bx	lr
 800ad36:	bf00      	nop
 800ad38:	40010000 	.word	0x40010000
 800ad3c:	40000400 	.word	0x40000400
 800ad40:	40000800 	.word	0x40000800
 800ad44:	40000c00 	.word	0x40000c00
 800ad48:	40010400 	.word	0x40010400
 800ad4c:	40014000 	.word	0x40014000
 800ad50:	40014400 	.word	0x40014400
 800ad54:	40014800 	.word	0x40014800
 800ad58:	40001800 	.word	0x40001800
 800ad5c:	40001c00 	.word	0x40001c00
 800ad60:	40002000 	.word	0x40002000

0800ad64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b087      	sub	sp, #28
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	60f8      	str	r0, [r7, #12]
 800ad6c:	60b9      	str	r1, [r7, #8]
 800ad6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	6a1b      	ldr	r3, [r3, #32]
 800ad74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	6a1b      	ldr	r3, [r3, #32]
 800ad7a:	f023 0201 	bic.w	r2, r3, #1
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	699b      	ldr	r3, [r3, #24]
 800ad86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ad8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	011b      	lsls	r3, r3, #4
 800ad94:	693a      	ldr	r2, [r7, #16]
 800ad96:	4313      	orrs	r3, r2
 800ad98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	f023 030a 	bic.w	r3, r3, #10
 800ada0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ada2:	697a      	ldr	r2, [r7, #20]
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	4313      	orrs	r3, r2
 800ada8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	693a      	ldr	r2, [r7, #16]
 800adae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	697a      	ldr	r2, [r7, #20]
 800adb4:	621a      	str	r2, [r3, #32]
}
 800adb6:	bf00      	nop
 800adb8:	371c      	adds	r7, #28
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr

0800adc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800adc2:	b480      	push	{r7}
 800adc4:	b087      	sub	sp, #28
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	60f8      	str	r0, [r7, #12]
 800adca:	60b9      	str	r1, [r7, #8]
 800adcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	6a1b      	ldr	r3, [r3, #32]
 800add2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	6a1b      	ldr	r3, [r3, #32]
 800add8:	f023 0210 	bic.w	r2, r3, #16
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	699b      	ldr	r3, [r3, #24]
 800ade4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800adec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	031b      	lsls	r3, r3, #12
 800adf2:	693a      	ldr	r2, [r7, #16]
 800adf4:	4313      	orrs	r3, r2
 800adf6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800adfe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	011b      	lsls	r3, r3, #4
 800ae04:	697a      	ldr	r2, [r7, #20]
 800ae06:	4313      	orrs	r3, r2
 800ae08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	693a      	ldr	r2, [r7, #16]
 800ae0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	697a      	ldr	r2, [r7, #20]
 800ae14:	621a      	str	r2, [r3, #32]
}
 800ae16:	bf00      	nop
 800ae18:	371c      	adds	r7, #28
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae20:	4770      	bx	lr

0800ae22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae22:	b480      	push	{r7}
 800ae24:	b085      	sub	sp, #20
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	6078      	str	r0, [r7, #4]
 800ae2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	689b      	ldr	r3, [r3, #8]
 800ae30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae3a:	683a      	ldr	r2, [r7, #0]
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	f043 0307 	orr.w	r3, r3, #7
 800ae44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	68fa      	ldr	r2, [r7, #12]
 800ae4a:	609a      	str	r2, [r3, #8]
}
 800ae4c:	bf00      	nop
 800ae4e:	3714      	adds	r7, #20
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b087      	sub	sp, #28
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	60f8      	str	r0, [r7, #12]
 800ae60:	60b9      	str	r1, [r7, #8]
 800ae62:	607a      	str	r2, [r7, #4]
 800ae64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	689b      	ldr	r3, [r3, #8]
 800ae6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ae72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	021a      	lsls	r2, r3, #8
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	431a      	orrs	r2, r3
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	697a      	ldr	r2, [r7, #20]
 800ae82:	4313      	orrs	r3, r2
 800ae84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	697a      	ldr	r2, [r7, #20]
 800ae8a:	609a      	str	r2, [r3, #8]
}
 800ae8c:	bf00      	nop
 800ae8e:	371c      	adds	r7, #28
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr

0800ae98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b085      	sub	sp, #20
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	d101      	bne.n	800aeb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aeac:	2302      	movs	r3, #2
 800aeae:	e05a      	b.n	800af66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2202      	movs	r2, #2
 800aebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	689b      	ldr	r3, [r3, #8]
 800aece:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aed6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	68fa      	ldr	r2, [r7, #12]
 800aede:	4313      	orrs	r3, r2
 800aee0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	68fa      	ldr	r2, [r7, #12]
 800aee8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	4a21      	ldr	r2, [pc, #132]	@ (800af74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d022      	beq.n	800af3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aefc:	d01d      	beq.n	800af3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	4a1d      	ldr	r2, [pc, #116]	@ (800af78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800af04:	4293      	cmp	r3, r2
 800af06:	d018      	beq.n	800af3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4a1b      	ldr	r2, [pc, #108]	@ (800af7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	d013      	beq.n	800af3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4a1a      	ldr	r2, [pc, #104]	@ (800af80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d00e      	beq.n	800af3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	4a18      	ldr	r2, [pc, #96]	@ (800af84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800af22:	4293      	cmp	r3, r2
 800af24:	d009      	beq.n	800af3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	4a17      	ldr	r2, [pc, #92]	@ (800af88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d004      	beq.n	800af3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4a15      	ldr	r2, [pc, #84]	@ (800af8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d10c      	bne.n	800af54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	68ba      	ldr	r2, [r7, #8]
 800af48:	4313      	orrs	r3, r2
 800af4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	68ba      	ldr	r2, [r7, #8]
 800af52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2201      	movs	r2, #1
 800af58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2200      	movs	r2, #0
 800af60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800af64:	2300      	movs	r3, #0
}
 800af66:	4618      	mov	r0, r3
 800af68:	3714      	adds	r7, #20
 800af6a:	46bd      	mov	sp, r7
 800af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af70:	4770      	bx	lr
 800af72:	bf00      	nop
 800af74:	40010000 	.word	0x40010000
 800af78:	40000400 	.word	0x40000400
 800af7c:	40000800 	.word	0x40000800
 800af80:	40000c00 	.word	0x40000c00
 800af84:	40010400 	.word	0x40010400
 800af88:	40014000 	.word	0x40014000
 800af8c:	40001800 	.word	0x40001800

0800af90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b082      	sub	sp, #8
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d101      	bne.n	800afa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800af9e:	2301      	movs	r3, #1
 800afa0:	e042      	b.n	800b028 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800afa8:	b2db      	uxtb	r3, r3
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d106      	bne.n	800afbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2200      	movs	r2, #0
 800afb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f7fc f976 	bl	80072a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2224      	movs	r2, #36	@ 0x24
 800afc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	68da      	ldr	r2, [r3, #12]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800afd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f000 fdf3 	bl	800bbc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	691a      	ldr	r2, [r3, #16]
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800afe8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	695a      	ldr	r2, [r3, #20]
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800aff8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	68da      	ldr	r2, [r3, #12]
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b008:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2200      	movs	r2, #0
 800b00e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2220      	movs	r2, #32
 800b014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2220      	movs	r2, #32
 800b01c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b026:	2300      	movs	r3, #0
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3708      	adds	r7, #8
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b08a      	sub	sp, #40	@ 0x28
 800b034:	af02      	add	r7, sp, #8
 800b036:	60f8      	str	r0, [r7, #12]
 800b038:	60b9      	str	r1, [r7, #8]
 800b03a:	603b      	str	r3, [r7, #0]
 800b03c:	4613      	mov	r3, r2
 800b03e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b040:	2300      	movs	r3, #0
 800b042:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	2b20      	cmp	r3, #32
 800b04e:	d175      	bne.n	800b13c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d002      	beq.n	800b05c <HAL_UART_Transmit+0x2c>
 800b056:	88fb      	ldrh	r3, [r7, #6]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d101      	bne.n	800b060 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b05c:	2301      	movs	r3, #1
 800b05e:	e06e      	b.n	800b13e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2200      	movs	r2, #0
 800b064:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	2221      	movs	r2, #33	@ 0x21
 800b06a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b06e:	f7fc fb7d 	bl	800776c <HAL_GetTick>
 800b072:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	88fa      	ldrh	r2, [r7, #6]
 800b078:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	88fa      	ldrh	r2, [r7, #6]
 800b07e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	689b      	ldr	r3, [r3, #8]
 800b084:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b088:	d108      	bne.n	800b09c <HAL_UART_Transmit+0x6c>
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	691b      	ldr	r3, [r3, #16]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d104      	bne.n	800b09c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b092:	2300      	movs	r3, #0
 800b094:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	61bb      	str	r3, [r7, #24]
 800b09a:	e003      	b.n	800b0a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b0a4:	e02e      	b.n	800b104 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	9300      	str	r3, [sp, #0]
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	2180      	movs	r1, #128	@ 0x80
 800b0b0:	68f8      	ldr	r0, [r7, #12]
 800b0b2:	f000 fb55 	bl	800b760 <UART_WaitOnFlagUntilTimeout>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d005      	beq.n	800b0c8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2220      	movs	r2, #32
 800b0c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800b0c4:	2303      	movs	r3, #3
 800b0c6:	e03a      	b.n	800b13e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800b0c8:	69fb      	ldr	r3, [r7, #28]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d10b      	bne.n	800b0e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b0ce:	69bb      	ldr	r3, [r7, #24]
 800b0d0:	881b      	ldrh	r3, [r3, #0]
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b0dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b0de:	69bb      	ldr	r3, [r7, #24]
 800b0e0:	3302      	adds	r3, #2
 800b0e2:	61bb      	str	r3, [r7, #24]
 800b0e4:	e007      	b.n	800b0f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b0e6:	69fb      	ldr	r3, [r7, #28]
 800b0e8:	781a      	ldrb	r2, [r3, #0]
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b0f0:	69fb      	ldr	r3, [r7, #28]
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	3b01      	subs	r3, #1
 800b0fe:	b29a      	uxth	r2, r3
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b108:	b29b      	uxth	r3, r3
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d1cb      	bne.n	800b0a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	9300      	str	r3, [sp, #0]
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	2200      	movs	r2, #0
 800b116:	2140      	movs	r1, #64	@ 0x40
 800b118:	68f8      	ldr	r0, [r7, #12]
 800b11a:	f000 fb21 	bl	800b760 <UART_WaitOnFlagUntilTimeout>
 800b11e:	4603      	mov	r3, r0
 800b120:	2b00      	cmp	r3, #0
 800b122:	d005      	beq.n	800b130 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2220      	movs	r2, #32
 800b128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800b12c:	2303      	movs	r3, #3
 800b12e:	e006      	b.n	800b13e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	2220      	movs	r2, #32
 800b134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800b138:	2300      	movs	r3, #0
 800b13a:	e000      	b.n	800b13e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800b13c:	2302      	movs	r3, #2
  }
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3720      	adds	r7, #32
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}

0800b146 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b146:	b580      	push	{r7, lr}
 800b148:	b08c      	sub	sp, #48	@ 0x30
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	60f8      	str	r0, [r7, #12]
 800b14e:	60b9      	str	r1, [r7, #8]
 800b150:	4613      	mov	r3, r2
 800b152:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b15a:	b2db      	uxtb	r3, r3
 800b15c:	2b20      	cmp	r3, #32
 800b15e:	d14a      	bne.n	800b1f6 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d002      	beq.n	800b16c <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800b166:	88fb      	ldrh	r3, [r7, #6]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d101      	bne.n	800b170 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800b16c:	2301      	movs	r3, #1
 800b16e:	e043      	b.n	800b1f8 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2201      	movs	r2, #1
 800b174:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	2200      	movs	r2, #0
 800b17a:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800b17c:	88fb      	ldrh	r3, [r7, #6]
 800b17e:	461a      	mov	r2, r3
 800b180:	68b9      	ldr	r1, [r7, #8]
 800b182:	68f8      	ldr	r0, [r7, #12]
 800b184:	f000 fb45 	bl	800b812 <UART_Start_Receive_IT>
 800b188:	4603      	mov	r3, r0
 800b18a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b18e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b192:	2b00      	cmp	r3, #0
 800b194:	d12c      	bne.n	800b1f0 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b19a:	2b01      	cmp	r3, #1
 800b19c:	d125      	bne.n	800b1ea <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b19e:	2300      	movs	r3, #0
 800b1a0:	613b      	str	r3, [r7, #16]
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	613b      	str	r3, [r7, #16]
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	613b      	str	r3, [r7, #16]
 800b1b2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	330c      	adds	r3, #12
 800b1ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1bc:	69bb      	ldr	r3, [r7, #24]
 800b1be:	e853 3f00 	ldrex	r3, [r3]
 800b1c2:	617b      	str	r3, [r7, #20]
   return(result);
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	f043 0310 	orr.w	r3, r3, #16
 800b1ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	330c      	adds	r3, #12
 800b1d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b1d4:	627a      	str	r2, [r7, #36]	@ 0x24
 800b1d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d8:	6a39      	ldr	r1, [r7, #32]
 800b1da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1dc:	e841 2300 	strex	r3, r2, [r1]
 800b1e0:	61fb      	str	r3, [r7, #28]
   return(result);
 800b1e2:	69fb      	ldr	r3, [r7, #28]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d1e5      	bne.n	800b1b4 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 800b1e8:	e002      	b.n	800b1f0 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800b1f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b1f4:	e000      	b.n	800b1f8 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800b1f6:	2302      	movs	r3, #2
  }
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	3730      	adds	r7, #48	@ 0x30
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}

0800b200 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b0ba      	sub	sp, #232	@ 0xe8
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	68db      	ldr	r3, [r3, #12]
 800b218:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	695b      	ldr	r3, [r3, #20]
 800b222:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800b226:	2300      	movs	r3, #0
 800b228:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800b22c:	2300      	movs	r3, #0
 800b22e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b236:	f003 030f 	and.w	r3, r3, #15
 800b23a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800b23e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b242:	2b00      	cmp	r3, #0
 800b244:	d10f      	bne.n	800b266 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b24a:	f003 0320 	and.w	r3, r3, #32
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d009      	beq.n	800b266 <HAL_UART_IRQHandler+0x66>
 800b252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b256:	f003 0320 	and.w	r3, r3, #32
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d003      	beq.n	800b266 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f000 fbf0 	bl	800ba44 <UART_Receive_IT>
      return;
 800b264:	e25b      	b.n	800b71e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b266:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	f000 80de 	beq.w	800b42c <HAL_UART_IRQHandler+0x22c>
 800b270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b274:	f003 0301 	and.w	r3, r3, #1
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d106      	bne.n	800b28a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b27c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b280:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800b284:	2b00      	cmp	r3, #0
 800b286:	f000 80d1 	beq.w	800b42c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b28a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b28e:	f003 0301 	and.w	r3, r3, #1
 800b292:	2b00      	cmp	r3, #0
 800b294:	d00b      	beq.n	800b2ae <HAL_UART_IRQHandler+0xae>
 800b296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b29a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d005      	beq.n	800b2ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2a6:	f043 0201 	orr.w	r2, r3, #1
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b2ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2b2:	f003 0304 	and.w	r3, r3, #4
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d00b      	beq.n	800b2d2 <HAL_UART_IRQHandler+0xd2>
 800b2ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b2be:	f003 0301 	and.w	r3, r3, #1
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d005      	beq.n	800b2d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2ca:	f043 0202 	orr.w	r2, r3, #2
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b2d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2d6:	f003 0302 	and.w	r3, r3, #2
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d00b      	beq.n	800b2f6 <HAL_UART_IRQHandler+0xf6>
 800b2de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b2e2:	f003 0301 	and.w	r3, r3, #1
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d005      	beq.n	800b2f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2ee:	f043 0204 	orr.w	r2, r3, #4
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b2f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2fa:	f003 0308 	and.w	r3, r3, #8
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d011      	beq.n	800b326 <HAL_UART_IRQHandler+0x126>
 800b302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b306:	f003 0320 	and.w	r3, r3, #32
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d105      	bne.n	800b31a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b30e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b312:	f003 0301 	and.w	r3, r3, #1
 800b316:	2b00      	cmp	r3, #0
 800b318:	d005      	beq.n	800b326 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b31e:	f043 0208 	orr.w	r2, r3, #8
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	f000 81f2 	beq.w	800b714 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b334:	f003 0320 	and.w	r3, r3, #32
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d008      	beq.n	800b34e <HAL_UART_IRQHandler+0x14e>
 800b33c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b340:	f003 0320 	and.w	r3, r3, #32
 800b344:	2b00      	cmp	r3, #0
 800b346:	d002      	beq.n	800b34e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f000 fb7b 	bl	800ba44 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	695b      	ldr	r3, [r3, #20]
 800b354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b358:	2b40      	cmp	r3, #64	@ 0x40
 800b35a:	bf0c      	ite	eq
 800b35c:	2301      	moveq	r3, #1
 800b35e:	2300      	movne	r3, #0
 800b360:	b2db      	uxtb	r3, r3
 800b362:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b36a:	f003 0308 	and.w	r3, r3, #8
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d103      	bne.n	800b37a <HAL_UART_IRQHandler+0x17a>
 800b372:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b376:	2b00      	cmp	r3, #0
 800b378:	d04f      	beq.n	800b41a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f000 fa83 	bl	800b886 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	695b      	ldr	r3, [r3, #20]
 800b386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b38a:	2b40      	cmp	r3, #64	@ 0x40
 800b38c:	d141      	bne.n	800b412 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	3314      	adds	r3, #20
 800b394:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b398:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b39c:	e853 3f00 	ldrex	r3, [r3]
 800b3a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b3a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b3a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b3ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	3314      	adds	r3, #20
 800b3b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b3ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b3be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b3c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b3ca:	e841 2300 	strex	r3, r2, [r1]
 800b3ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b3d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d1d9      	bne.n	800b38e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d013      	beq.n	800b40a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3e6:	4a7e      	ldr	r2, [pc, #504]	@ (800b5e0 <HAL_UART_IRQHandler+0x3e0>)
 800b3e8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f7fc fea1 	bl	8008136 <HAL_DMA_Abort_IT>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d016      	beq.n	800b428 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b400:	687a      	ldr	r2, [r7, #4]
 800b402:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b404:	4610      	mov	r0, r2
 800b406:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b408:	e00e      	b.n	800b428 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f000 f99e 	bl	800b74c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b410:	e00a      	b.n	800b428 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f000 f99a 	bl	800b74c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b418:	e006      	b.n	800b428 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 f996 	bl	800b74c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2200      	movs	r2, #0
 800b424:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800b426:	e175      	b.n	800b714 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b428:	bf00      	nop
    return;
 800b42a:	e173      	b.n	800b714 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b430:	2b01      	cmp	r3, #1
 800b432:	f040 814f 	bne.w	800b6d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b43a:	f003 0310 	and.w	r3, r3, #16
 800b43e:	2b00      	cmp	r3, #0
 800b440:	f000 8148 	beq.w	800b6d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b448:	f003 0310 	and.w	r3, r3, #16
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	f000 8141 	beq.w	800b6d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b452:	2300      	movs	r3, #0
 800b454:	60bb      	str	r3, [r7, #8]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	60bb      	str	r3, [r7, #8]
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	685b      	ldr	r3, [r3, #4]
 800b464:	60bb      	str	r3, [r7, #8]
 800b466:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	695b      	ldr	r3, [r3, #20]
 800b46e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b472:	2b40      	cmp	r3, #64	@ 0x40
 800b474:	f040 80b6 	bne.w	800b5e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b484:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b488:	2b00      	cmp	r3, #0
 800b48a:	f000 8145 	beq.w	800b718 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b492:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b496:	429a      	cmp	r2, r3
 800b498:	f080 813e 	bcs.w	800b718 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b4a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4a8:	69db      	ldr	r3, [r3, #28]
 800b4aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b4ae:	f000 8088 	beq.w	800b5c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	330c      	adds	r3, #12
 800b4b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b4c0:	e853 3f00 	ldrex	r3, [r3]
 800b4c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b4c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b4cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b4d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	330c      	adds	r3, #12
 800b4da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800b4de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b4e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b4ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b4ee:	e841 2300 	strex	r3, r2, [r1]
 800b4f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b4f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d1d9      	bne.n	800b4b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	3314      	adds	r3, #20
 800b504:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b506:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b508:	e853 3f00 	ldrex	r3, [r3]
 800b50c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b50e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b510:	f023 0301 	bic.w	r3, r3, #1
 800b514:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	3314      	adds	r3, #20
 800b51e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b522:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b526:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b528:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b52a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b52e:	e841 2300 	strex	r3, r2, [r1]
 800b532:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b534:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b536:	2b00      	cmp	r3, #0
 800b538:	d1e1      	bne.n	800b4fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	3314      	adds	r3, #20
 800b540:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b542:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b544:	e853 3f00 	ldrex	r3, [r3]
 800b548:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b54a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b54c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b550:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	3314      	adds	r3, #20
 800b55a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b55e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b560:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b562:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b564:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b566:	e841 2300 	strex	r3, r2, [r1]
 800b56a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b56c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d1e3      	bne.n	800b53a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2220      	movs	r2, #32
 800b576:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2200      	movs	r2, #0
 800b57e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	330c      	adds	r3, #12
 800b586:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b588:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b58a:	e853 3f00 	ldrex	r3, [r3]
 800b58e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b590:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b592:	f023 0310 	bic.w	r3, r3, #16
 800b596:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	330c      	adds	r3, #12
 800b5a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b5a4:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b5a6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b5aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b5ac:	e841 2300 	strex	r3, r2, [r1]
 800b5b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b5b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d1e3      	bne.n	800b580 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f7fc fd4a 	bl	8008056 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2202      	movs	r2, #2
 800b5c6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b5d0:	b29b      	uxth	r3, r3
 800b5d2:	1ad3      	subs	r3, r2, r3
 800b5d4:	b29b      	uxth	r3, r3
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f7fb fb35 	bl	8006c48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b5de:	e09b      	b.n	800b718 <HAL_UART_IRQHandler+0x518>
 800b5e0:	0800b94d 	.word	0x0800b94d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b5ec:	b29b      	uxth	r3, r3
 800b5ee:	1ad3      	subs	r3, r2, r3
 800b5f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b5f8:	b29b      	uxth	r3, r3
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	f000 808e 	beq.w	800b71c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b600:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b604:	2b00      	cmp	r3, #0
 800b606:	f000 8089 	beq.w	800b71c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	330c      	adds	r3, #12
 800b610:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b614:	e853 3f00 	ldrex	r3, [r3]
 800b618:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b61a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b61c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b620:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	330c      	adds	r3, #12
 800b62a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800b62e:	647a      	str	r2, [r7, #68]	@ 0x44
 800b630:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b632:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b634:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b636:	e841 2300 	strex	r3, r2, [r1]
 800b63a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b63c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d1e3      	bne.n	800b60a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	3314      	adds	r3, #20
 800b648:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b64c:	e853 3f00 	ldrex	r3, [r3]
 800b650:	623b      	str	r3, [r7, #32]
   return(result);
 800b652:	6a3b      	ldr	r3, [r7, #32]
 800b654:	f023 0301 	bic.w	r3, r3, #1
 800b658:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	3314      	adds	r3, #20
 800b662:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b666:	633a      	str	r2, [r7, #48]	@ 0x30
 800b668:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b66a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b66c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b66e:	e841 2300 	strex	r3, r2, [r1]
 800b672:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b676:	2b00      	cmp	r3, #0
 800b678:	d1e3      	bne.n	800b642 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2220      	movs	r2, #32
 800b67e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2200      	movs	r2, #0
 800b686:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	330c      	adds	r3, #12
 800b68e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	e853 3f00 	ldrex	r3, [r3]
 800b696:	60fb      	str	r3, [r7, #12]
   return(result);
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	f023 0310 	bic.w	r3, r3, #16
 800b69e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	330c      	adds	r3, #12
 800b6a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800b6ac:	61fa      	str	r2, [r7, #28]
 800b6ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b0:	69b9      	ldr	r1, [r7, #24]
 800b6b2:	69fa      	ldr	r2, [r7, #28]
 800b6b4:	e841 2300 	strex	r3, r2, [r1]
 800b6b8:	617b      	str	r3, [r7, #20]
   return(result);
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d1e3      	bne.n	800b688 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2202      	movs	r2, #2
 800b6c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b6c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f7fb fabb 	bl	8006c48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b6d2:	e023      	b.n	800b71c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b6d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b6d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d009      	beq.n	800b6f4 <HAL_UART_IRQHandler+0x4f4>
 800b6e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b6e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d003      	beq.n	800b6f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f000 f941 	bl	800b974 <UART_Transmit_IT>
    return;
 800b6f2:	e014      	b.n	800b71e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b6f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b6f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d00e      	beq.n	800b71e <HAL_UART_IRQHandler+0x51e>
 800b700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d008      	beq.n	800b71e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f000 f981 	bl	800ba14 <UART_EndTransmit_IT>
    return;
 800b712:	e004      	b.n	800b71e <HAL_UART_IRQHandler+0x51e>
    return;
 800b714:	bf00      	nop
 800b716:	e002      	b.n	800b71e <HAL_UART_IRQHandler+0x51e>
      return;
 800b718:	bf00      	nop
 800b71a:	e000      	b.n	800b71e <HAL_UART_IRQHandler+0x51e>
      return;
 800b71c:	bf00      	nop
  }
}
 800b71e:	37e8      	adds	r7, #232	@ 0xe8
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b724:	b480      	push	{r7}
 800b726:	b083      	sub	sp, #12
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b72c:	bf00      	nop
 800b72e:	370c      	adds	r7, #12
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr

0800b738 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b738:	b480      	push	{r7}
 800b73a:	b083      	sub	sp, #12
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b740:	bf00      	nop
 800b742:	370c      	adds	r7, #12
 800b744:	46bd      	mov	sp, r7
 800b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74a:	4770      	bx	lr

0800b74c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b083      	sub	sp, #12
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b754:	bf00      	nop
 800b756:	370c      	adds	r7, #12
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr

0800b760 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b086      	sub	sp, #24
 800b764:	af00      	add	r7, sp, #0
 800b766:	60f8      	str	r0, [r7, #12]
 800b768:	60b9      	str	r1, [r7, #8]
 800b76a:	603b      	str	r3, [r7, #0]
 800b76c:	4613      	mov	r3, r2
 800b76e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b770:	e03b      	b.n	800b7ea <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b772:	6a3b      	ldr	r3, [r7, #32]
 800b774:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b778:	d037      	beq.n	800b7ea <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b77a:	f7fb fff7 	bl	800776c <HAL_GetTick>
 800b77e:	4602      	mov	r2, r0
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	1ad3      	subs	r3, r2, r3
 800b784:	6a3a      	ldr	r2, [r7, #32]
 800b786:	429a      	cmp	r2, r3
 800b788:	d302      	bcc.n	800b790 <UART_WaitOnFlagUntilTimeout+0x30>
 800b78a:	6a3b      	ldr	r3, [r7, #32]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d101      	bne.n	800b794 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b790:	2303      	movs	r3, #3
 800b792:	e03a      	b.n	800b80a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	68db      	ldr	r3, [r3, #12]
 800b79a:	f003 0304 	and.w	r3, r3, #4
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d023      	beq.n	800b7ea <UART_WaitOnFlagUntilTimeout+0x8a>
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	2b80      	cmp	r3, #128	@ 0x80
 800b7a6:	d020      	beq.n	800b7ea <UART_WaitOnFlagUntilTimeout+0x8a>
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	2b40      	cmp	r3, #64	@ 0x40
 800b7ac:	d01d      	beq.n	800b7ea <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f003 0308 	and.w	r3, r3, #8
 800b7b8:	2b08      	cmp	r3, #8
 800b7ba:	d116      	bne.n	800b7ea <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800b7bc:	2300      	movs	r3, #0
 800b7be:	617b      	str	r3, [r7, #20]
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	617b      	str	r3, [r7, #20]
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	617b      	str	r3, [r7, #20]
 800b7d0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b7d2:	68f8      	ldr	r0, [r7, #12]
 800b7d4:	f000 f857 	bl	800b886 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	2208      	movs	r2, #8
 800b7dc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e00f      	b.n	800b80a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	681a      	ldr	r2, [r3, #0]
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	4013      	ands	r3, r2
 800b7f4:	68ba      	ldr	r2, [r7, #8]
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	bf0c      	ite	eq
 800b7fa:	2301      	moveq	r3, #1
 800b7fc:	2300      	movne	r3, #0
 800b7fe:	b2db      	uxtb	r3, r3
 800b800:	461a      	mov	r2, r3
 800b802:	79fb      	ldrb	r3, [r7, #7]
 800b804:	429a      	cmp	r2, r3
 800b806:	d0b4      	beq.n	800b772 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b808:	2300      	movs	r3, #0
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3718      	adds	r7, #24
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}

0800b812 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b812:	b480      	push	{r7}
 800b814:	b085      	sub	sp, #20
 800b816:	af00      	add	r7, sp, #0
 800b818:	60f8      	str	r0, [r7, #12]
 800b81a:	60b9      	str	r1, [r7, #8]
 800b81c:	4613      	mov	r3, r2
 800b81e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	68ba      	ldr	r2, [r7, #8]
 800b824:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	88fa      	ldrh	r2, [r7, #6]
 800b82a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	88fa      	ldrh	r2, [r7, #6]
 800b830:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	2200      	movs	r2, #0
 800b836:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2222      	movs	r2, #34	@ 0x22
 800b83c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	691b      	ldr	r3, [r3, #16]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d007      	beq.n	800b858 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	68da      	ldr	r2, [r3, #12]
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b856:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	695a      	ldr	r2, [r3, #20]
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f042 0201 	orr.w	r2, r2, #1
 800b866:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	68da      	ldr	r2, [r3, #12]
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f042 0220 	orr.w	r2, r2, #32
 800b876:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b878:	2300      	movs	r3, #0
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3714      	adds	r7, #20
 800b87e:	46bd      	mov	sp, r7
 800b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b884:	4770      	bx	lr

0800b886 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b886:	b480      	push	{r7}
 800b888:	b095      	sub	sp, #84	@ 0x54
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	330c      	adds	r3, #12
 800b894:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b898:	e853 3f00 	ldrex	r3, [r3]
 800b89c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b89e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b8a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	330c      	adds	r3, #12
 800b8ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b8ae:	643a      	str	r2, [r7, #64]	@ 0x40
 800b8b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b8b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b8b6:	e841 2300 	strex	r3, r2, [r1]
 800b8ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b8bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d1e5      	bne.n	800b88e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	3314      	adds	r3, #20
 800b8c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ca:	6a3b      	ldr	r3, [r7, #32]
 800b8cc:	e853 3f00 	ldrex	r3, [r3]
 800b8d0:	61fb      	str	r3, [r7, #28]
   return(result);
 800b8d2:	69fb      	ldr	r3, [r7, #28]
 800b8d4:	f023 0301 	bic.w	r3, r3, #1
 800b8d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	3314      	adds	r3, #20
 800b8e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b8e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b8e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b8e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b8ea:	e841 2300 	strex	r3, r2, [r1]
 800b8ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d1e5      	bne.n	800b8c2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8fa:	2b01      	cmp	r3, #1
 800b8fc:	d119      	bne.n	800b932 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	330c      	adds	r3, #12
 800b904:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	e853 3f00 	ldrex	r3, [r3]
 800b90c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	f023 0310 	bic.w	r3, r3, #16
 800b914:	647b      	str	r3, [r7, #68]	@ 0x44
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	330c      	adds	r3, #12
 800b91c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b91e:	61ba      	str	r2, [r7, #24]
 800b920:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b922:	6979      	ldr	r1, [r7, #20]
 800b924:	69ba      	ldr	r2, [r7, #24]
 800b926:	e841 2300 	strex	r3, r2, [r1]
 800b92a:	613b      	str	r3, [r7, #16]
   return(result);
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d1e5      	bne.n	800b8fe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2220      	movs	r2, #32
 800b936:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2200      	movs	r2, #0
 800b93e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b940:	bf00      	nop
 800b942:	3754      	adds	r7, #84	@ 0x54
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr

0800b94c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b084      	sub	sp, #16
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b958:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2200      	movs	r2, #0
 800b95e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	2200      	movs	r2, #0
 800b964:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b966:	68f8      	ldr	r0, [r7, #12]
 800b968:	f7ff fef0 	bl	800b74c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b96c:	bf00      	nop
 800b96e:	3710      	adds	r7, #16
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b974:	b480      	push	{r7}
 800b976:	b085      	sub	sp, #20
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b982:	b2db      	uxtb	r3, r3
 800b984:	2b21      	cmp	r3, #33	@ 0x21
 800b986:	d13e      	bne.n	800ba06 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	689b      	ldr	r3, [r3, #8]
 800b98c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b990:	d114      	bne.n	800b9bc <UART_Transmit_IT+0x48>
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	691b      	ldr	r3, [r3, #16]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d110      	bne.n	800b9bc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6a1b      	ldr	r3, [r3, #32]
 800b99e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	881b      	ldrh	r3, [r3, #0]
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b9ae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6a1b      	ldr	r3, [r3, #32]
 800b9b4:	1c9a      	adds	r2, r3, #2
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	621a      	str	r2, [r3, #32]
 800b9ba:	e008      	b.n	800b9ce <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6a1b      	ldr	r3, [r3, #32]
 800b9c0:	1c59      	adds	r1, r3, #1
 800b9c2:	687a      	ldr	r2, [r7, #4]
 800b9c4:	6211      	str	r1, [r2, #32]
 800b9c6:	781a      	ldrb	r2, [r3, #0]
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b9d2:	b29b      	uxth	r3, r3
 800b9d4:	3b01      	subs	r3, #1
 800b9d6:	b29b      	uxth	r3, r3
 800b9d8:	687a      	ldr	r2, [r7, #4]
 800b9da:	4619      	mov	r1, r3
 800b9dc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d10f      	bne.n	800ba02 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	68da      	ldr	r2, [r3, #12]
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b9f0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	68da      	ldr	r2, [r3, #12]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ba00:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ba02:	2300      	movs	r3, #0
 800ba04:	e000      	b.n	800ba08 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ba06:	2302      	movs	r3, #2
  }
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3714      	adds	r7, #20
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr

0800ba14 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b082      	sub	sp, #8
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	68da      	ldr	r2, [r3, #12]
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ba2a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2220      	movs	r2, #32
 800ba30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f7ff fe75 	bl	800b724 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ba3a:	2300      	movs	r3, #0
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3708      	adds	r7, #8
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}

0800ba44 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b08c      	sub	sp, #48	@ 0x30
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ba52:	b2db      	uxtb	r3, r3
 800ba54:	2b22      	cmp	r3, #34	@ 0x22
 800ba56:	f040 80ae 	bne.w	800bbb6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	689b      	ldr	r3, [r3, #8]
 800ba5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba62:	d117      	bne.n	800ba94 <UART_Receive_IT+0x50>
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	691b      	ldr	r3, [r3, #16]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d113      	bne.n	800ba94 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba74:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	b29b      	uxth	r3, r3
 800ba7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba82:	b29a      	uxth	r2, r3
 800ba84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba86:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba8c:	1c9a      	adds	r2, r3, #2
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	629a      	str	r2, [r3, #40]	@ 0x28
 800ba92:	e026      	b.n	800bae2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba98:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	689b      	ldr	r3, [r3, #8]
 800baa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800baa6:	d007      	beq.n	800bab8 <UART_Receive_IT+0x74>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	689b      	ldr	r3, [r3, #8]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d10a      	bne.n	800bac6 <UART_Receive_IT+0x82>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	691b      	ldr	r3, [r3, #16]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d106      	bne.n	800bac6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	b2da      	uxtb	r2, r3
 800bac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bac2:	701a      	strb	r2, [r3, #0]
 800bac4:	e008      	b.n	800bad8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	685b      	ldr	r3, [r3, #4]
 800bacc:	b2db      	uxtb	r3, r3
 800bace:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bad2:	b2da      	uxtb	r2, r3
 800bad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bad6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800badc:	1c5a      	adds	r2, r3, #1
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bae6:	b29b      	uxth	r3, r3
 800bae8:	3b01      	subs	r3, #1
 800baea:	b29b      	uxth	r3, r3
 800baec:	687a      	ldr	r2, [r7, #4]
 800baee:	4619      	mov	r1, r3
 800baf0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d15d      	bne.n	800bbb2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	68da      	ldr	r2, [r3, #12]
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f022 0220 	bic.w	r2, r2, #32
 800bb04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	68da      	ldr	r2, [r3, #12]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bb14:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	695a      	ldr	r2, [r3, #20]
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f022 0201 	bic.w	r2, r2, #1
 800bb24:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2220      	movs	r2, #32
 800bb2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2200      	movs	r2, #0
 800bb32:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb38:	2b01      	cmp	r3, #1
 800bb3a:	d135      	bne.n	800bba8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	330c      	adds	r3, #12
 800bb48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	e853 3f00 	ldrex	r3, [r3]
 800bb50:	613b      	str	r3, [r7, #16]
   return(result);
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	f023 0310 	bic.w	r3, r3, #16
 800bb58:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	330c      	adds	r3, #12
 800bb60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb62:	623a      	str	r2, [r7, #32]
 800bb64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb66:	69f9      	ldr	r1, [r7, #28]
 800bb68:	6a3a      	ldr	r2, [r7, #32]
 800bb6a:	e841 2300 	strex	r3, r2, [r1]
 800bb6e:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb70:	69bb      	ldr	r3, [r7, #24]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d1e5      	bne.n	800bb42 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f003 0310 	and.w	r3, r3, #16
 800bb80:	2b10      	cmp	r3, #16
 800bb82:	d10a      	bne.n	800bb9a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bb84:	2300      	movs	r3, #0
 800bb86:	60fb      	str	r3, [r7, #12]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	60fb      	str	r3, [r7, #12]
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	60fb      	str	r3, [r7, #12]
 800bb98:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bb9e:	4619      	mov	r1, r3
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f7fb f851 	bl	8006c48 <HAL_UARTEx_RxEventCallback>
 800bba6:	e002      	b.n	800bbae <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f7ff fdc5 	bl	800b738 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	e002      	b.n	800bbb8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	e000      	b.n	800bbb8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800bbb6:	2302      	movs	r3, #2
  }
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3730      	adds	r7, #48	@ 0x30
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}

0800bbc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bbc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bbc4:	b0c0      	sub	sp, #256	@ 0x100
 800bbc6:	af00      	add	r7, sp, #0
 800bbc8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bbcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	691b      	ldr	r3, [r3, #16]
 800bbd4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800bbd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbdc:	68d9      	ldr	r1, [r3, #12]
 800bbde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbe2:	681a      	ldr	r2, [r3, #0]
 800bbe4:	ea40 0301 	orr.w	r3, r0, r1
 800bbe8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bbea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbee:	689a      	ldr	r2, [r3, #8]
 800bbf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbf4:	691b      	ldr	r3, [r3, #16]
 800bbf6:	431a      	orrs	r2, r3
 800bbf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbfc:	695b      	ldr	r3, [r3, #20]
 800bbfe:	431a      	orrs	r2, r3
 800bc00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc04:	69db      	ldr	r3, [r3, #28]
 800bc06:	4313      	orrs	r3, r2
 800bc08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bc0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	68db      	ldr	r3, [r3, #12]
 800bc14:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800bc18:	f021 010c 	bic.w	r1, r1, #12
 800bc1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc20:	681a      	ldr	r2, [r3, #0]
 800bc22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bc26:	430b      	orrs	r3, r1
 800bc28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bc2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	695b      	ldr	r3, [r3, #20]
 800bc32:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800bc36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc3a:	6999      	ldr	r1, [r3, #24]
 800bc3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc40:	681a      	ldr	r2, [r3, #0]
 800bc42:	ea40 0301 	orr.w	r3, r0, r1
 800bc46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bc48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc4c:	681a      	ldr	r2, [r3, #0]
 800bc4e:	4b8f      	ldr	r3, [pc, #572]	@ (800be8c <UART_SetConfig+0x2cc>)
 800bc50:	429a      	cmp	r2, r3
 800bc52:	d005      	beq.n	800bc60 <UART_SetConfig+0xa0>
 800bc54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc58:	681a      	ldr	r2, [r3, #0]
 800bc5a:	4b8d      	ldr	r3, [pc, #564]	@ (800be90 <UART_SetConfig+0x2d0>)
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	d104      	bne.n	800bc6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bc60:	f7fe f9b8 	bl	8009fd4 <HAL_RCC_GetPCLK2Freq>
 800bc64:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800bc68:	e003      	b.n	800bc72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bc6a:	f7fe f99f 	bl	8009fac <HAL_RCC_GetPCLK1Freq>
 800bc6e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc76:	69db      	ldr	r3, [r3, #28]
 800bc78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bc7c:	f040 810c 	bne.w	800be98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bc80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bc84:	2200      	movs	r2, #0
 800bc86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bc8a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800bc8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800bc92:	4622      	mov	r2, r4
 800bc94:	462b      	mov	r3, r5
 800bc96:	1891      	adds	r1, r2, r2
 800bc98:	65b9      	str	r1, [r7, #88]	@ 0x58
 800bc9a:	415b      	adcs	r3, r3
 800bc9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bc9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800bca2:	4621      	mov	r1, r4
 800bca4:	eb12 0801 	adds.w	r8, r2, r1
 800bca8:	4629      	mov	r1, r5
 800bcaa:	eb43 0901 	adc.w	r9, r3, r1
 800bcae:	f04f 0200 	mov.w	r2, #0
 800bcb2:	f04f 0300 	mov.w	r3, #0
 800bcb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bcba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bcbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bcc2:	4690      	mov	r8, r2
 800bcc4:	4699      	mov	r9, r3
 800bcc6:	4623      	mov	r3, r4
 800bcc8:	eb18 0303 	adds.w	r3, r8, r3
 800bccc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bcd0:	462b      	mov	r3, r5
 800bcd2:	eb49 0303 	adc.w	r3, r9, r3
 800bcd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bcda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bcde:	685b      	ldr	r3, [r3, #4]
 800bce0:	2200      	movs	r2, #0
 800bce2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bce6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800bcea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800bcee:	460b      	mov	r3, r1
 800bcf0:	18db      	adds	r3, r3, r3
 800bcf2:	653b      	str	r3, [r7, #80]	@ 0x50
 800bcf4:	4613      	mov	r3, r2
 800bcf6:	eb42 0303 	adc.w	r3, r2, r3
 800bcfa:	657b      	str	r3, [r7, #84]	@ 0x54
 800bcfc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800bd00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800bd04:	f7f4 ffc6 	bl	8000c94 <__aeabi_uldivmod>
 800bd08:	4602      	mov	r2, r0
 800bd0a:	460b      	mov	r3, r1
 800bd0c:	4b61      	ldr	r3, [pc, #388]	@ (800be94 <UART_SetConfig+0x2d4>)
 800bd0e:	fba3 2302 	umull	r2, r3, r3, r2
 800bd12:	095b      	lsrs	r3, r3, #5
 800bd14:	011c      	lsls	r4, r3, #4
 800bd16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bd20:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800bd24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800bd28:	4642      	mov	r2, r8
 800bd2a:	464b      	mov	r3, r9
 800bd2c:	1891      	adds	r1, r2, r2
 800bd2e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800bd30:	415b      	adcs	r3, r3
 800bd32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800bd38:	4641      	mov	r1, r8
 800bd3a:	eb12 0a01 	adds.w	sl, r2, r1
 800bd3e:	4649      	mov	r1, r9
 800bd40:	eb43 0b01 	adc.w	fp, r3, r1
 800bd44:	f04f 0200 	mov.w	r2, #0
 800bd48:	f04f 0300 	mov.w	r3, #0
 800bd4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bd50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bd54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bd58:	4692      	mov	sl, r2
 800bd5a:	469b      	mov	fp, r3
 800bd5c:	4643      	mov	r3, r8
 800bd5e:	eb1a 0303 	adds.w	r3, sl, r3
 800bd62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bd66:	464b      	mov	r3, r9
 800bd68:	eb4b 0303 	adc.w	r3, fp, r3
 800bd6c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bd70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	2200      	movs	r2, #0
 800bd78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bd7c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800bd80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800bd84:	460b      	mov	r3, r1
 800bd86:	18db      	adds	r3, r3, r3
 800bd88:	643b      	str	r3, [r7, #64]	@ 0x40
 800bd8a:	4613      	mov	r3, r2
 800bd8c:	eb42 0303 	adc.w	r3, r2, r3
 800bd90:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800bd96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800bd9a:	f7f4 ff7b 	bl	8000c94 <__aeabi_uldivmod>
 800bd9e:	4602      	mov	r2, r0
 800bda0:	460b      	mov	r3, r1
 800bda2:	4611      	mov	r1, r2
 800bda4:	4b3b      	ldr	r3, [pc, #236]	@ (800be94 <UART_SetConfig+0x2d4>)
 800bda6:	fba3 2301 	umull	r2, r3, r3, r1
 800bdaa:	095b      	lsrs	r3, r3, #5
 800bdac:	2264      	movs	r2, #100	@ 0x64
 800bdae:	fb02 f303 	mul.w	r3, r2, r3
 800bdb2:	1acb      	subs	r3, r1, r3
 800bdb4:	00db      	lsls	r3, r3, #3
 800bdb6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800bdba:	4b36      	ldr	r3, [pc, #216]	@ (800be94 <UART_SetConfig+0x2d4>)
 800bdbc:	fba3 2302 	umull	r2, r3, r3, r2
 800bdc0:	095b      	lsrs	r3, r3, #5
 800bdc2:	005b      	lsls	r3, r3, #1
 800bdc4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800bdc8:	441c      	add	r4, r3
 800bdca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bdce:	2200      	movs	r2, #0
 800bdd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bdd4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800bdd8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800bddc:	4642      	mov	r2, r8
 800bdde:	464b      	mov	r3, r9
 800bde0:	1891      	adds	r1, r2, r2
 800bde2:	63b9      	str	r1, [r7, #56]	@ 0x38
 800bde4:	415b      	adcs	r3, r3
 800bde6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bde8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800bdec:	4641      	mov	r1, r8
 800bdee:	1851      	adds	r1, r2, r1
 800bdf0:	6339      	str	r1, [r7, #48]	@ 0x30
 800bdf2:	4649      	mov	r1, r9
 800bdf4:	414b      	adcs	r3, r1
 800bdf6:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdf8:	f04f 0200 	mov.w	r2, #0
 800bdfc:	f04f 0300 	mov.w	r3, #0
 800be00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800be04:	4659      	mov	r1, fp
 800be06:	00cb      	lsls	r3, r1, #3
 800be08:	4651      	mov	r1, sl
 800be0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800be0e:	4651      	mov	r1, sl
 800be10:	00ca      	lsls	r2, r1, #3
 800be12:	4610      	mov	r0, r2
 800be14:	4619      	mov	r1, r3
 800be16:	4603      	mov	r3, r0
 800be18:	4642      	mov	r2, r8
 800be1a:	189b      	adds	r3, r3, r2
 800be1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800be20:	464b      	mov	r3, r9
 800be22:	460a      	mov	r2, r1
 800be24:	eb42 0303 	adc.w	r3, r2, r3
 800be28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800be2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800be30:	685b      	ldr	r3, [r3, #4]
 800be32:	2200      	movs	r2, #0
 800be34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800be38:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800be3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800be40:	460b      	mov	r3, r1
 800be42:	18db      	adds	r3, r3, r3
 800be44:	62bb      	str	r3, [r7, #40]	@ 0x28
 800be46:	4613      	mov	r3, r2
 800be48:	eb42 0303 	adc.w	r3, r2, r3
 800be4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800be4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800be52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800be56:	f7f4 ff1d 	bl	8000c94 <__aeabi_uldivmod>
 800be5a:	4602      	mov	r2, r0
 800be5c:	460b      	mov	r3, r1
 800be5e:	4b0d      	ldr	r3, [pc, #52]	@ (800be94 <UART_SetConfig+0x2d4>)
 800be60:	fba3 1302 	umull	r1, r3, r3, r2
 800be64:	095b      	lsrs	r3, r3, #5
 800be66:	2164      	movs	r1, #100	@ 0x64
 800be68:	fb01 f303 	mul.w	r3, r1, r3
 800be6c:	1ad3      	subs	r3, r2, r3
 800be6e:	00db      	lsls	r3, r3, #3
 800be70:	3332      	adds	r3, #50	@ 0x32
 800be72:	4a08      	ldr	r2, [pc, #32]	@ (800be94 <UART_SetConfig+0x2d4>)
 800be74:	fba2 2303 	umull	r2, r3, r2, r3
 800be78:	095b      	lsrs	r3, r3, #5
 800be7a:	f003 0207 	and.w	r2, r3, #7
 800be7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	4422      	add	r2, r4
 800be86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800be88:	e106      	b.n	800c098 <UART_SetConfig+0x4d8>
 800be8a:	bf00      	nop
 800be8c:	40011000 	.word	0x40011000
 800be90:	40011400 	.word	0x40011400
 800be94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800be98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800be9c:	2200      	movs	r2, #0
 800be9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bea2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800bea6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800beaa:	4642      	mov	r2, r8
 800beac:	464b      	mov	r3, r9
 800beae:	1891      	adds	r1, r2, r2
 800beb0:	6239      	str	r1, [r7, #32]
 800beb2:	415b      	adcs	r3, r3
 800beb4:	627b      	str	r3, [r7, #36]	@ 0x24
 800beb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800beba:	4641      	mov	r1, r8
 800bebc:	1854      	adds	r4, r2, r1
 800bebe:	4649      	mov	r1, r9
 800bec0:	eb43 0501 	adc.w	r5, r3, r1
 800bec4:	f04f 0200 	mov.w	r2, #0
 800bec8:	f04f 0300 	mov.w	r3, #0
 800becc:	00eb      	lsls	r3, r5, #3
 800bece:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bed2:	00e2      	lsls	r2, r4, #3
 800bed4:	4614      	mov	r4, r2
 800bed6:	461d      	mov	r5, r3
 800bed8:	4643      	mov	r3, r8
 800beda:	18e3      	adds	r3, r4, r3
 800bedc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bee0:	464b      	mov	r3, r9
 800bee2:	eb45 0303 	adc.w	r3, r5, r3
 800bee6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800beea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800beee:	685b      	ldr	r3, [r3, #4]
 800bef0:	2200      	movs	r2, #0
 800bef2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bef6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800befa:	f04f 0200 	mov.w	r2, #0
 800befe:	f04f 0300 	mov.w	r3, #0
 800bf02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800bf06:	4629      	mov	r1, r5
 800bf08:	008b      	lsls	r3, r1, #2
 800bf0a:	4621      	mov	r1, r4
 800bf0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bf10:	4621      	mov	r1, r4
 800bf12:	008a      	lsls	r2, r1, #2
 800bf14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800bf18:	f7f4 febc 	bl	8000c94 <__aeabi_uldivmod>
 800bf1c:	4602      	mov	r2, r0
 800bf1e:	460b      	mov	r3, r1
 800bf20:	4b60      	ldr	r3, [pc, #384]	@ (800c0a4 <UART_SetConfig+0x4e4>)
 800bf22:	fba3 2302 	umull	r2, r3, r3, r2
 800bf26:	095b      	lsrs	r3, r3, #5
 800bf28:	011c      	lsls	r4, r3, #4
 800bf2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bf2e:	2200      	movs	r2, #0
 800bf30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bf34:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800bf38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800bf3c:	4642      	mov	r2, r8
 800bf3e:	464b      	mov	r3, r9
 800bf40:	1891      	adds	r1, r2, r2
 800bf42:	61b9      	str	r1, [r7, #24]
 800bf44:	415b      	adcs	r3, r3
 800bf46:	61fb      	str	r3, [r7, #28]
 800bf48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bf4c:	4641      	mov	r1, r8
 800bf4e:	1851      	adds	r1, r2, r1
 800bf50:	6139      	str	r1, [r7, #16]
 800bf52:	4649      	mov	r1, r9
 800bf54:	414b      	adcs	r3, r1
 800bf56:	617b      	str	r3, [r7, #20]
 800bf58:	f04f 0200 	mov.w	r2, #0
 800bf5c:	f04f 0300 	mov.w	r3, #0
 800bf60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bf64:	4659      	mov	r1, fp
 800bf66:	00cb      	lsls	r3, r1, #3
 800bf68:	4651      	mov	r1, sl
 800bf6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bf6e:	4651      	mov	r1, sl
 800bf70:	00ca      	lsls	r2, r1, #3
 800bf72:	4610      	mov	r0, r2
 800bf74:	4619      	mov	r1, r3
 800bf76:	4603      	mov	r3, r0
 800bf78:	4642      	mov	r2, r8
 800bf7a:	189b      	adds	r3, r3, r2
 800bf7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bf80:	464b      	mov	r3, r9
 800bf82:	460a      	mov	r2, r1
 800bf84:	eb42 0303 	adc.w	r3, r2, r3
 800bf88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bf8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf90:	685b      	ldr	r3, [r3, #4]
 800bf92:	2200      	movs	r2, #0
 800bf94:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bf96:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800bf98:	f04f 0200 	mov.w	r2, #0
 800bf9c:	f04f 0300 	mov.w	r3, #0
 800bfa0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800bfa4:	4649      	mov	r1, r9
 800bfa6:	008b      	lsls	r3, r1, #2
 800bfa8:	4641      	mov	r1, r8
 800bfaa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bfae:	4641      	mov	r1, r8
 800bfb0:	008a      	lsls	r2, r1, #2
 800bfb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800bfb6:	f7f4 fe6d 	bl	8000c94 <__aeabi_uldivmod>
 800bfba:	4602      	mov	r2, r0
 800bfbc:	460b      	mov	r3, r1
 800bfbe:	4611      	mov	r1, r2
 800bfc0:	4b38      	ldr	r3, [pc, #224]	@ (800c0a4 <UART_SetConfig+0x4e4>)
 800bfc2:	fba3 2301 	umull	r2, r3, r3, r1
 800bfc6:	095b      	lsrs	r3, r3, #5
 800bfc8:	2264      	movs	r2, #100	@ 0x64
 800bfca:	fb02 f303 	mul.w	r3, r2, r3
 800bfce:	1acb      	subs	r3, r1, r3
 800bfd0:	011b      	lsls	r3, r3, #4
 800bfd2:	3332      	adds	r3, #50	@ 0x32
 800bfd4:	4a33      	ldr	r2, [pc, #204]	@ (800c0a4 <UART_SetConfig+0x4e4>)
 800bfd6:	fba2 2303 	umull	r2, r3, r2, r3
 800bfda:	095b      	lsrs	r3, r3, #5
 800bfdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bfe0:	441c      	add	r4, r3
 800bfe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	673b      	str	r3, [r7, #112]	@ 0x70
 800bfea:	677a      	str	r2, [r7, #116]	@ 0x74
 800bfec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800bff0:	4642      	mov	r2, r8
 800bff2:	464b      	mov	r3, r9
 800bff4:	1891      	adds	r1, r2, r2
 800bff6:	60b9      	str	r1, [r7, #8]
 800bff8:	415b      	adcs	r3, r3
 800bffa:	60fb      	str	r3, [r7, #12]
 800bffc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c000:	4641      	mov	r1, r8
 800c002:	1851      	adds	r1, r2, r1
 800c004:	6039      	str	r1, [r7, #0]
 800c006:	4649      	mov	r1, r9
 800c008:	414b      	adcs	r3, r1
 800c00a:	607b      	str	r3, [r7, #4]
 800c00c:	f04f 0200 	mov.w	r2, #0
 800c010:	f04f 0300 	mov.w	r3, #0
 800c014:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c018:	4659      	mov	r1, fp
 800c01a:	00cb      	lsls	r3, r1, #3
 800c01c:	4651      	mov	r1, sl
 800c01e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c022:	4651      	mov	r1, sl
 800c024:	00ca      	lsls	r2, r1, #3
 800c026:	4610      	mov	r0, r2
 800c028:	4619      	mov	r1, r3
 800c02a:	4603      	mov	r3, r0
 800c02c:	4642      	mov	r2, r8
 800c02e:	189b      	adds	r3, r3, r2
 800c030:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c032:	464b      	mov	r3, r9
 800c034:	460a      	mov	r2, r1
 800c036:	eb42 0303 	adc.w	r3, r2, r3
 800c03a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c03c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c040:	685b      	ldr	r3, [r3, #4]
 800c042:	2200      	movs	r2, #0
 800c044:	663b      	str	r3, [r7, #96]	@ 0x60
 800c046:	667a      	str	r2, [r7, #100]	@ 0x64
 800c048:	f04f 0200 	mov.w	r2, #0
 800c04c:	f04f 0300 	mov.w	r3, #0
 800c050:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800c054:	4649      	mov	r1, r9
 800c056:	008b      	lsls	r3, r1, #2
 800c058:	4641      	mov	r1, r8
 800c05a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c05e:	4641      	mov	r1, r8
 800c060:	008a      	lsls	r2, r1, #2
 800c062:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c066:	f7f4 fe15 	bl	8000c94 <__aeabi_uldivmod>
 800c06a:	4602      	mov	r2, r0
 800c06c:	460b      	mov	r3, r1
 800c06e:	4b0d      	ldr	r3, [pc, #52]	@ (800c0a4 <UART_SetConfig+0x4e4>)
 800c070:	fba3 1302 	umull	r1, r3, r3, r2
 800c074:	095b      	lsrs	r3, r3, #5
 800c076:	2164      	movs	r1, #100	@ 0x64
 800c078:	fb01 f303 	mul.w	r3, r1, r3
 800c07c:	1ad3      	subs	r3, r2, r3
 800c07e:	011b      	lsls	r3, r3, #4
 800c080:	3332      	adds	r3, #50	@ 0x32
 800c082:	4a08      	ldr	r2, [pc, #32]	@ (800c0a4 <UART_SetConfig+0x4e4>)
 800c084:	fba2 2303 	umull	r2, r3, r2, r3
 800c088:	095b      	lsrs	r3, r3, #5
 800c08a:	f003 020f 	and.w	r2, r3, #15
 800c08e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	4422      	add	r2, r4
 800c096:	609a      	str	r2, [r3, #8]
}
 800c098:	bf00      	nop
 800c09a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c0a4:	51eb851f 	.word	0x51eb851f

0800c0a8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800c0ac:	4904      	ldr	r1, [pc, #16]	@ (800c0c0 <MX_FATFS_Init+0x18>)
 800c0ae:	4805      	ldr	r0, [pc, #20]	@ (800c0c4 <MX_FATFS_Init+0x1c>)
 800c0b0:	f000 f8b0 	bl	800c214 <FATFS_LinkDriver>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	4b03      	ldr	r3, [pc, #12]	@ (800c0c8 <MX_FATFS_Init+0x20>)
 800c0ba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c0bc:	bf00      	nop
 800c0be:	bd80      	pop	{r7, pc}
 800c0c0:	20001c24 	.word	0x20001c24
 800c0c4:	200009a0 	.word	0x200009a0
 800c0c8:	20001c20 	.word	0x20001c20

0800c0cc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b083      	sub	sp, #12
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800c0d6:	4b06      	ldr	r3, [pc, #24]	@ (800c0f0 <USER_initialize+0x24>)
 800c0d8:	2201      	movs	r2, #1
 800c0da:	701a      	strb	r2, [r3, #0]
    return Stat;
 800c0dc:	4b04      	ldr	r3, [pc, #16]	@ (800c0f0 <USER_initialize+0x24>)
 800c0de:	781b      	ldrb	r3, [r3, #0]
 800c0e0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	370c      	adds	r7, #12
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ec:	4770      	bx	lr
 800c0ee:	bf00      	nop
 800c0f0:	2000099d 	.word	0x2000099d

0800c0f4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b083      	sub	sp, #12
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800c0fe:	4b06      	ldr	r3, [pc, #24]	@ (800c118 <USER_status+0x24>)
 800c100:	2201      	movs	r2, #1
 800c102:	701a      	strb	r2, [r3, #0]
    return Stat;
 800c104:	4b04      	ldr	r3, [pc, #16]	@ (800c118 <USER_status+0x24>)
 800c106:	781b      	ldrb	r3, [r3, #0]
 800c108:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	370c      	adds	r7, #12
 800c10e:	46bd      	mov	sp, r7
 800c110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c114:	4770      	bx	lr
 800c116:	bf00      	nop
 800c118:	2000099d 	.word	0x2000099d

0800c11c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b085      	sub	sp, #20
 800c120:	af00      	add	r7, sp, #0
 800c122:	60b9      	str	r1, [r7, #8]
 800c124:	607a      	str	r2, [r7, #4]
 800c126:	603b      	str	r3, [r7, #0]
 800c128:	4603      	mov	r3, r0
 800c12a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800c12c:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3714      	adds	r7, #20
 800c132:	46bd      	mov	sp, r7
 800c134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c138:	4770      	bx	lr

0800c13a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800c13a:	b480      	push	{r7}
 800c13c:	b085      	sub	sp, #20
 800c13e:	af00      	add	r7, sp, #0
 800c140:	60b9      	str	r1, [r7, #8]
 800c142:	607a      	str	r2, [r7, #4]
 800c144:	603b      	str	r3, [r7, #0]
 800c146:	4603      	mov	r3, r0
 800c148:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800c14a:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800c14c:	4618      	mov	r0, r3
 800c14e:	3714      	adds	r7, #20
 800c150:	46bd      	mov	sp, r7
 800c152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c156:	4770      	bx	lr

0800c158 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800c158:	b480      	push	{r7}
 800c15a:	b085      	sub	sp, #20
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	4603      	mov	r3, r0
 800c160:	603a      	str	r2, [r7, #0]
 800c162:	71fb      	strb	r3, [r7, #7]
 800c164:	460b      	mov	r3, r1
 800c166:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800c168:	2301      	movs	r3, #1
 800c16a:	73fb      	strb	r3, [r7, #15]
    return res;
 800c16c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3714      	adds	r7, #20
 800c172:	46bd      	mov	sp, r7
 800c174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c178:	4770      	bx	lr
	...

0800c17c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c17c:	b480      	push	{r7}
 800c17e:	b087      	sub	sp, #28
 800c180:	af00      	add	r7, sp, #0
 800c182:	60f8      	str	r0, [r7, #12]
 800c184:	60b9      	str	r1, [r7, #8]
 800c186:	4613      	mov	r3, r2
 800c188:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c18a:	2301      	movs	r3, #1
 800c18c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c18e:	2300      	movs	r3, #0
 800c190:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c192:	4b1f      	ldr	r3, [pc, #124]	@ (800c210 <FATFS_LinkDriverEx+0x94>)
 800c194:	7a5b      	ldrb	r3, [r3, #9]
 800c196:	b2db      	uxtb	r3, r3
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d131      	bne.n	800c200 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c19c:	4b1c      	ldr	r3, [pc, #112]	@ (800c210 <FATFS_LinkDriverEx+0x94>)
 800c19e:	7a5b      	ldrb	r3, [r3, #9]
 800c1a0:	b2db      	uxtb	r3, r3
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	4b1a      	ldr	r3, [pc, #104]	@ (800c210 <FATFS_LinkDriverEx+0x94>)
 800c1a6:	2100      	movs	r1, #0
 800c1a8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c1aa:	4b19      	ldr	r3, [pc, #100]	@ (800c210 <FATFS_LinkDriverEx+0x94>)
 800c1ac:	7a5b      	ldrb	r3, [r3, #9]
 800c1ae:	b2db      	uxtb	r3, r3
 800c1b0:	4a17      	ldr	r2, [pc, #92]	@ (800c210 <FATFS_LinkDriverEx+0x94>)
 800c1b2:	009b      	lsls	r3, r3, #2
 800c1b4:	4413      	add	r3, r2
 800c1b6:	68fa      	ldr	r2, [r7, #12]
 800c1b8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c1ba:	4b15      	ldr	r3, [pc, #84]	@ (800c210 <FATFS_LinkDriverEx+0x94>)
 800c1bc:	7a5b      	ldrb	r3, [r3, #9]
 800c1be:	b2db      	uxtb	r3, r3
 800c1c0:	461a      	mov	r2, r3
 800c1c2:	4b13      	ldr	r3, [pc, #76]	@ (800c210 <FATFS_LinkDriverEx+0x94>)
 800c1c4:	4413      	add	r3, r2
 800c1c6:	79fa      	ldrb	r2, [r7, #7]
 800c1c8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c1ca:	4b11      	ldr	r3, [pc, #68]	@ (800c210 <FATFS_LinkDriverEx+0x94>)
 800c1cc:	7a5b      	ldrb	r3, [r3, #9]
 800c1ce:	b2db      	uxtb	r3, r3
 800c1d0:	1c5a      	adds	r2, r3, #1
 800c1d2:	b2d1      	uxtb	r1, r2
 800c1d4:	4a0e      	ldr	r2, [pc, #56]	@ (800c210 <FATFS_LinkDriverEx+0x94>)
 800c1d6:	7251      	strb	r1, [r2, #9]
 800c1d8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c1da:	7dbb      	ldrb	r3, [r7, #22]
 800c1dc:	3330      	adds	r3, #48	@ 0x30
 800c1de:	b2da      	uxtb	r2, r3
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	3301      	adds	r3, #1
 800c1e8:	223a      	movs	r2, #58	@ 0x3a
 800c1ea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	3302      	adds	r3, #2
 800c1f0:	222f      	movs	r2, #47	@ 0x2f
 800c1f2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	3303      	adds	r3, #3
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c200:	7dfb      	ldrb	r3, [r7, #23]
}
 800c202:	4618      	mov	r0, r3
 800c204:	371c      	adds	r7, #28
 800c206:	46bd      	mov	sp, r7
 800c208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20c:	4770      	bx	lr
 800c20e:	bf00      	nop
 800c210:	20001c28 	.word	0x20001c28

0800c214 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b082      	sub	sp, #8
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c21e:	2200      	movs	r2, #0
 800c220:	6839      	ldr	r1, [r7, #0]
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f7ff ffaa 	bl	800c17c <FATFS_LinkDriverEx>
 800c228:	4603      	mov	r3, r0
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3708      	adds	r7, #8
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
	...

0800c234 <malloc>:
 800c234:	4b02      	ldr	r3, [pc, #8]	@ (800c240 <malloc+0xc>)
 800c236:	4601      	mov	r1, r0
 800c238:	6818      	ldr	r0, [r3, #0]
 800c23a:	f000 b82d 	b.w	800c298 <_malloc_r>
 800c23e:	bf00      	nop
 800c240:	200009b4 	.word	0x200009b4

0800c244 <free>:
 800c244:	4b02      	ldr	r3, [pc, #8]	@ (800c250 <free+0xc>)
 800c246:	4601      	mov	r1, r0
 800c248:	6818      	ldr	r0, [r3, #0]
 800c24a:	f000 b8f5 	b.w	800c438 <_free_r>
 800c24e:	bf00      	nop
 800c250:	200009b4 	.word	0x200009b4

0800c254 <sbrk_aligned>:
 800c254:	b570      	push	{r4, r5, r6, lr}
 800c256:	4e0f      	ldr	r6, [pc, #60]	@ (800c294 <sbrk_aligned+0x40>)
 800c258:	460c      	mov	r4, r1
 800c25a:	6831      	ldr	r1, [r6, #0]
 800c25c:	4605      	mov	r5, r0
 800c25e:	b911      	cbnz	r1, 800c266 <sbrk_aligned+0x12>
 800c260:	f000 f8ae 	bl	800c3c0 <_sbrk_r>
 800c264:	6030      	str	r0, [r6, #0]
 800c266:	4621      	mov	r1, r4
 800c268:	4628      	mov	r0, r5
 800c26a:	f000 f8a9 	bl	800c3c0 <_sbrk_r>
 800c26e:	1c43      	adds	r3, r0, #1
 800c270:	d103      	bne.n	800c27a <sbrk_aligned+0x26>
 800c272:	f04f 34ff 	mov.w	r4, #4294967295
 800c276:	4620      	mov	r0, r4
 800c278:	bd70      	pop	{r4, r5, r6, pc}
 800c27a:	1cc4      	adds	r4, r0, #3
 800c27c:	f024 0403 	bic.w	r4, r4, #3
 800c280:	42a0      	cmp	r0, r4
 800c282:	d0f8      	beq.n	800c276 <sbrk_aligned+0x22>
 800c284:	1a21      	subs	r1, r4, r0
 800c286:	4628      	mov	r0, r5
 800c288:	f000 f89a 	bl	800c3c0 <_sbrk_r>
 800c28c:	3001      	adds	r0, #1
 800c28e:	d1f2      	bne.n	800c276 <sbrk_aligned+0x22>
 800c290:	e7ef      	b.n	800c272 <sbrk_aligned+0x1e>
 800c292:	bf00      	nop
 800c294:	20001c34 	.word	0x20001c34

0800c298 <_malloc_r>:
 800c298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c29c:	1ccd      	adds	r5, r1, #3
 800c29e:	f025 0503 	bic.w	r5, r5, #3
 800c2a2:	3508      	adds	r5, #8
 800c2a4:	2d0c      	cmp	r5, #12
 800c2a6:	bf38      	it	cc
 800c2a8:	250c      	movcc	r5, #12
 800c2aa:	2d00      	cmp	r5, #0
 800c2ac:	4606      	mov	r6, r0
 800c2ae:	db01      	blt.n	800c2b4 <_malloc_r+0x1c>
 800c2b0:	42a9      	cmp	r1, r5
 800c2b2:	d904      	bls.n	800c2be <_malloc_r+0x26>
 800c2b4:	230c      	movs	r3, #12
 800c2b6:	6033      	str	r3, [r6, #0]
 800c2b8:	2000      	movs	r0, #0
 800c2ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c394 <_malloc_r+0xfc>
 800c2c2:	f000 f869 	bl	800c398 <__malloc_lock>
 800c2c6:	f8d8 3000 	ldr.w	r3, [r8]
 800c2ca:	461c      	mov	r4, r3
 800c2cc:	bb44      	cbnz	r4, 800c320 <_malloc_r+0x88>
 800c2ce:	4629      	mov	r1, r5
 800c2d0:	4630      	mov	r0, r6
 800c2d2:	f7ff ffbf 	bl	800c254 <sbrk_aligned>
 800c2d6:	1c43      	adds	r3, r0, #1
 800c2d8:	4604      	mov	r4, r0
 800c2da:	d158      	bne.n	800c38e <_malloc_r+0xf6>
 800c2dc:	f8d8 4000 	ldr.w	r4, [r8]
 800c2e0:	4627      	mov	r7, r4
 800c2e2:	2f00      	cmp	r7, #0
 800c2e4:	d143      	bne.n	800c36e <_malloc_r+0xd6>
 800c2e6:	2c00      	cmp	r4, #0
 800c2e8:	d04b      	beq.n	800c382 <_malloc_r+0xea>
 800c2ea:	6823      	ldr	r3, [r4, #0]
 800c2ec:	4639      	mov	r1, r7
 800c2ee:	4630      	mov	r0, r6
 800c2f0:	eb04 0903 	add.w	r9, r4, r3
 800c2f4:	f000 f864 	bl	800c3c0 <_sbrk_r>
 800c2f8:	4581      	cmp	r9, r0
 800c2fa:	d142      	bne.n	800c382 <_malloc_r+0xea>
 800c2fc:	6821      	ldr	r1, [r4, #0]
 800c2fe:	1a6d      	subs	r5, r5, r1
 800c300:	4629      	mov	r1, r5
 800c302:	4630      	mov	r0, r6
 800c304:	f7ff ffa6 	bl	800c254 <sbrk_aligned>
 800c308:	3001      	adds	r0, #1
 800c30a:	d03a      	beq.n	800c382 <_malloc_r+0xea>
 800c30c:	6823      	ldr	r3, [r4, #0]
 800c30e:	442b      	add	r3, r5
 800c310:	6023      	str	r3, [r4, #0]
 800c312:	f8d8 3000 	ldr.w	r3, [r8]
 800c316:	685a      	ldr	r2, [r3, #4]
 800c318:	bb62      	cbnz	r2, 800c374 <_malloc_r+0xdc>
 800c31a:	f8c8 7000 	str.w	r7, [r8]
 800c31e:	e00f      	b.n	800c340 <_malloc_r+0xa8>
 800c320:	6822      	ldr	r2, [r4, #0]
 800c322:	1b52      	subs	r2, r2, r5
 800c324:	d420      	bmi.n	800c368 <_malloc_r+0xd0>
 800c326:	2a0b      	cmp	r2, #11
 800c328:	d917      	bls.n	800c35a <_malloc_r+0xc2>
 800c32a:	1961      	adds	r1, r4, r5
 800c32c:	42a3      	cmp	r3, r4
 800c32e:	6025      	str	r5, [r4, #0]
 800c330:	bf18      	it	ne
 800c332:	6059      	strne	r1, [r3, #4]
 800c334:	6863      	ldr	r3, [r4, #4]
 800c336:	bf08      	it	eq
 800c338:	f8c8 1000 	streq.w	r1, [r8]
 800c33c:	5162      	str	r2, [r4, r5]
 800c33e:	604b      	str	r3, [r1, #4]
 800c340:	4630      	mov	r0, r6
 800c342:	f000 f82f 	bl	800c3a4 <__malloc_unlock>
 800c346:	f104 000b 	add.w	r0, r4, #11
 800c34a:	1d23      	adds	r3, r4, #4
 800c34c:	f020 0007 	bic.w	r0, r0, #7
 800c350:	1ac2      	subs	r2, r0, r3
 800c352:	bf1c      	itt	ne
 800c354:	1a1b      	subne	r3, r3, r0
 800c356:	50a3      	strne	r3, [r4, r2]
 800c358:	e7af      	b.n	800c2ba <_malloc_r+0x22>
 800c35a:	6862      	ldr	r2, [r4, #4]
 800c35c:	42a3      	cmp	r3, r4
 800c35e:	bf0c      	ite	eq
 800c360:	f8c8 2000 	streq.w	r2, [r8]
 800c364:	605a      	strne	r2, [r3, #4]
 800c366:	e7eb      	b.n	800c340 <_malloc_r+0xa8>
 800c368:	4623      	mov	r3, r4
 800c36a:	6864      	ldr	r4, [r4, #4]
 800c36c:	e7ae      	b.n	800c2cc <_malloc_r+0x34>
 800c36e:	463c      	mov	r4, r7
 800c370:	687f      	ldr	r7, [r7, #4]
 800c372:	e7b6      	b.n	800c2e2 <_malloc_r+0x4a>
 800c374:	461a      	mov	r2, r3
 800c376:	685b      	ldr	r3, [r3, #4]
 800c378:	42a3      	cmp	r3, r4
 800c37a:	d1fb      	bne.n	800c374 <_malloc_r+0xdc>
 800c37c:	2300      	movs	r3, #0
 800c37e:	6053      	str	r3, [r2, #4]
 800c380:	e7de      	b.n	800c340 <_malloc_r+0xa8>
 800c382:	230c      	movs	r3, #12
 800c384:	6033      	str	r3, [r6, #0]
 800c386:	4630      	mov	r0, r6
 800c388:	f000 f80c 	bl	800c3a4 <__malloc_unlock>
 800c38c:	e794      	b.n	800c2b8 <_malloc_r+0x20>
 800c38e:	6005      	str	r5, [r0, #0]
 800c390:	e7d6      	b.n	800c340 <_malloc_r+0xa8>
 800c392:	bf00      	nop
 800c394:	20001c38 	.word	0x20001c38

0800c398 <__malloc_lock>:
 800c398:	4801      	ldr	r0, [pc, #4]	@ (800c3a0 <__malloc_lock+0x8>)
 800c39a:	f000 b84b 	b.w	800c434 <__retarget_lock_acquire_recursive>
 800c39e:	bf00      	nop
 800c3a0:	20001d78 	.word	0x20001d78

0800c3a4 <__malloc_unlock>:
 800c3a4:	4801      	ldr	r0, [pc, #4]	@ (800c3ac <__malloc_unlock+0x8>)
 800c3a6:	f000 b846 	b.w	800c436 <__retarget_lock_release_recursive>
 800c3aa:	bf00      	nop
 800c3ac:	20001d78 	.word	0x20001d78

0800c3b0 <memset>:
 800c3b0:	4402      	add	r2, r0
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	d100      	bne.n	800c3ba <memset+0xa>
 800c3b8:	4770      	bx	lr
 800c3ba:	f803 1b01 	strb.w	r1, [r3], #1
 800c3be:	e7f9      	b.n	800c3b4 <memset+0x4>

0800c3c0 <_sbrk_r>:
 800c3c0:	b538      	push	{r3, r4, r5, lr}
 800c3c2:	4d06      	ldr	r5, [pc, #24]	@ (800c3dc <_sbrk_r+0x1c>)
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	4604      	mov	r4, r0
 800c3c8:	4608      	mov	r0, r1
 800c3ca:	602b      	str	r3, [r5, #0]
 800c3cc:	f7fb f8f6 	bl	80075bc <_sbrk>
 800c3d0:	1c43      	adds	r3, r0, #1
 800c3d2:	d102      	bne.n	800c3da <_sbrk_r+0x1a>
 800c3d4:	682b      	ldr	r3, [r5, #0]
 800c3d6:	b103      	cbz	r3, 800c3da <_sbrk_r+0x1a>
 800c3d8:	6023      	str	r3, [r4, #0]
 800c3da:	bd38      	pop	{r3, r4, r5, pc}
 800c3dc:	20001d74 	.word	0x20001d74

0800c3e0 <__errno>:
 800c3e0:	4b01      	ldr	r3, [pc, #4]	@ (800c3e8 <__errno+0x8>)
 800c3e2:	6818      	ldr	r0, [r3, #0]
 800c3e4:	4770      	bx	lr
 800c3e6:	bf00      	nop
 800c3e8:	200009b4 	.word	0x200009b4

0800c3ec <__libc_init_array>:
 800c3ec:	b570      	push	{r4, r5, r6, lr}
 800c3ee:	4d0d      	ldr	r5, [pc, #52]	@ (800c424 <__libc_init_array+0x38>)
 800c3f0:	4c0d      	ldr	r4, [pc, #52]	@ (800c428 <__libc_init_array+0x3c>)
 800c3f2:	1b64      	subs	r4, r4, r5
 800c3f4:	10a4      	asrs	r4, r4, #2
 800c3f6:	2600      	movs	r6, #0
 800c3f8:	42a6      	cmp	r6, r4
 800c3fa:	d109      	bne.n	800c410 <__libc_init_array+0x24>
 800c3fc:	4d0b      	ldr	r5, [pc, #44]	@ (800c42c <__libc_init_array+0x40>)
 800c3fe:	4c0c      	ldr	r4, [pc, #48]	@ (800c430 <__libc_init_array+0x44>)
 800c400:	f000 f864 	bl	800c4cc <_init>
 800c404:	1b64      	subs	r4, r4, r5
 800c406:	10a4      	asrs	r4, r4, #2
 800c408:	2600      	movs	r6, #0
 800c40a:	42a6      	cmp	r6, r4
 800c40c:	d105      	bne.n	800c41a <__libc_init_array+0x2e>
 800c40e:	bd70      	pop	{r4, r5, r6, pc}
 800c410:	f855 3b04 	ldr.w	r3, [r5], #4
 800c414:	4798      	blx	r3
 800c416:	3601      	adds	r6, #1
 800c418:	e7ee      	b.n	800c3f8 <__libc_init_array+0xc>
 800c41a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c41e:	4798      	blx	r3
 800c420:	3601      	adds	r6, #1
 800c422:	e7f2      	b.n	800c40a <__libc_init_array+0x1e>
 800c424:	0800da80 	.word	0x0800da80
 800c428:	0800da80 	.word	0x0800da80
 800c42c:	0800da80 	.word	0x0800da80
 800c430:	0800da84 	.word	0x0800da84

0800c434 <__retarget_lock_acquire_recursive>:
 800c434:	4770      	bx	lr

0800c436 <__retarget_lock_release_recursive>:
 800c436:	4770      	bx	lr

0800c438 <_free_r>:
 800c438:	b538      	push	{r3, r4, r5, lr}
 800c43a:	4605      	mov	r5, r0
 800c43c:	2900      	cmp	r1, #0
 800c43e:	d041      	beq.n	800c4c4 <_free_r+0x8c>
 800c440:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c444:	1f0c      	subs	r4, r1, #4
 800c446:	2b00      	cmp	r3, #0
 800c448:	bfb8      	it	lt
 800c44a:	18e4      	addlt	r4, r4, r3
 800c44c:	f7ff ffa4 	bl	800c398 <__malloc_lock>
 800c450:	4a1d      	ldr	r2, [pc, #116]	@ (800c4c8 <_free_r+0x90>)
 800c452:	6813      	ldr	r3, [r2, #0]
 800c454:	b933      	cbnz	r3, 800c464 <_free_r+0x2c>
 800c456:	6063      	str	r3, [r4, #4]
 800c458:	6014      	str	r4, [r2, #0]
 800c45a:	4628      	mov	r0, r5
 800c45c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c460:	f7ff bfa0 	b.w	800c3a4 <__malloc_unlock>
 800c464:	42a3      	cmp	r3, r4
 800c466:	d908      	bls.n	800c47a <_free_r+0x42>
 800c468:	6820      	ldr	r0, [r4, #0]
 800c46a:	1821      	adds	r1, r4, r0
 800c46c:	428b      	cmp	r3, r1
 800c46e:	bf01      	itttt	eq
 800c470:	6819      	ldreq	r1, [r3, #0]
 800c472:	685b      	ldreq	r3, [r3, #4]
 800c474:	1809      	addeq	r1, r1, r0
 800c476:	6021      	streq	r1, [r4, #0]
 800c478:	e7ed      	b.n	800c456 <_free_r+0x1e>
 800c47a:	461a      	mov	r2, r3
 800c47c:	685b      	ldr	r3, [r3, #4]
 800c47e:	b10b      	cbz	r3, 800c484 <_free_r+0x4c>
 800c480:	42a3      	cmp	r3, r4
 800c482:	d9fa      	bls.n	800c47a <_free_r+0x42>
 800c484:	6811      	ldr	r1, [r2, #0]
 800c486:	1850      	adds	r0, r2, r1
 800c488:	42a0      	cmp	r0, r4
 800c48a:	d10b      	bne.n	800c4a4 <_free_r+0x6c>
 800c48c:	6820      	ldr	r0, [r4, #0]
 800c48e:	4401      	add	r1, r0
 800c490:	1850      	adds	r0, r2, r1
 800c492:	4283      	cmp	r3, r0
 800c494:	6011      	str	r1, [r2, #0]
 800c496:	d1e0      	bne.n	800c45a <_free_r+0x22>
 800c498:	6818      	ldr	r0, [r3, #0]
 800c49a:	685b      	ldr	r3, [r3, #4]
 800c49c:	6053      	str	r3, [r2, #4]
 800c49e:	4408      	add	r0, r1
 800c4a0:	6010      	str	r0, [r2, #0]
 800c4a2:	e7da      	b.n	800c45a <_free_r+0x22>
 800c4a4:	d902      	bls.n	800c4ac <_free_r+0x74>
 800c4a6:	230c      	movs	r3, #12
 800c4a8:	602b      	str	r3, [r5, #0]
 800c4aa:	e7d6      	b.n	800c45a <_free_r+0x22>
 800c4ac:	6820      	ldr	r0, [r4, #0]
 800c4ae:	1821      	adds	r1, r4, r0
 800c4b0:	428b      	cmp	r3, r1
 800c4b2:	bf04      	itt	eq
 800c4b4:	6819      	ldreq	r1, [r3, #0]
 800c4b6:	685b      	ldreq	r3, [r3, #4]
 800c4b8:	6063      	str	r3, [r4, #4]
 800c4ba:	bf04      	itt	eq
 800c4bc:	1809      	addeq	r1, r1, r0
 800c4be:	6021      	streq	r1, [r4, #0]
 800c4c0:	6054      	str	r4, [r2, #4]
 800c4c2:	e7ca      	b.n	800c45a <_free_r+0x22>
 800c4c4:	bd38      	pop	{r3, r4, r5, pc}
 800c4c6:	bf00      	nop
 800c4c8:	20001c38 	.word	0x20001c38

0800c4cc <_init>:
 800c4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ce:	bf00      	nop
 800c4d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4d2:	bc08      	pop	{r3}
 800c4d4:	469e      	mov	lr, r3
 800c4d6:	4770      	bx	lr

0800c4d8 <_fini>:
 800c4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4da:	bf00      	nop
 800c4dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4de:	bc08      	pop	{r3}
 800c4e0:	469e      	mov	lr, r3
 800c4e2:	4770      	bx	lr
