
BMS Tester - Cell Emulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8e0  080001b0  080001b0  000011b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001534  0800ca90  0800ca90  0000da90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dfc4  0800dfc4  0000f984  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800dfc4  0800dfc4  0000efc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dfcc  0800dfcc  0000f984  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dfcc  0800dfcc  0000efcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dfd0  0800dfd0  0000efd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000984  20000000  0800dfd4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f984  2**0
                  CONTENTS
 10 .bss          00001334  20000984  20000984  0000f984  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001cb8  20001cb8  0000f984  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f984  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005a58b  00000000  00000000  0000f9b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006367  00000000  00000000  00069f3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00004030  00000000  00000000  000702a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000030ac  00000000  00000000  000742d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002945a  00000000  00000000  00077384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002ec3a  00000000  00000000  000a07de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f89af  00000000  00000000  000cf418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001c7dc7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00011a30  00000000  00000000  001c7e0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  001d983c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000984 	.word	0x20000984
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ca78 	.word	0x0800ca78

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000988 	.word	0x20000988
 80001ec:	0800ca78 	.word	0x0800ca78

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	@ 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2iz>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000994:	d215      	bcs.n	80009c2 <__aeabi_d2iz+0x36>
 8000996:	d511      	bpl.n	80009bc <__aeabi_d2iz+0x30>
 8000998:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a0:	d912      	bls.n	80009c8 <__aeabi_d2iz+0x3c>
 80009a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009b2:	fa23 f002 	lsr.w	r0, r3, r2
 80009b6:	bf18      	it	ne
 80009b8:	4240      	negne	r0, r0
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009c6:	d105      	bne.n	80009d4 <__aeabi_d2iz+0x48>
 80009c8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009cc:	bf08      	it	eq
 80009ce:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_d2f>:
 80009dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009e4:	bf24      	itt	cs
 80009e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009ee:	d90d      	bls.n	8000a0c <__aeabi_d2f+0x30>
 80009f0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009fc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a04:	bf08      	it	eq
 8000a06:	f020 0001 	biceq.w	r0, r0, #1
 8000a0a:	4770      	bx	lr
 8000a0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a10:	d121      	bne.n	8000a56 <__aeabi_d2f+0x7a>
 8000a12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a16:	bfbc      	itt	lt
 8000a18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a1c:	4770      	bxlt	lr
 8000a1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a26:	f1c2 0218 	rsb	r2, r2, #24
 8000a2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a32:	fa20 f002 	lsr.w	r0, r0, r2
 8000a36:	bf18      	it	ne
 8000a38:	f040 0001 	orrne.w	r0, r0, #1
 8000a3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a48:	ea40 000c 	orr.w	r0, r0, ip
 8000a4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a54:	e7cc      	b.n	80009f0 <__aeabi_d2f+0x14>
 8000a56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a5a:	d107      	bne.n	8000a6c <__aeabi_d2f+0x90>
 8000a5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a60:	bf1e      	ittt	ne
 8000a62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a6a:	4770      	bxne	lr
 8000a6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_frsub>:
 8000a7c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a80:	e002      	b.n	8000a88 <__addsf3>
 8000a82:	bf00      	nop

08000a84 <__aeabi_fsub>:
 8000a84:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a88 <__addsf3>:
 8000a88:	0042      	lsls	r2, r0, #1
 8000a8a:	bf1f      	itttt	ne
 8000a8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a90:	ea92 0f03 	teqne	r2, r3
 8000a94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a9c:	d06a      	beq.n	8000b74 <__addsf3+0xec>
 8000a9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aa2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aa6:	bfc1      	itttt	gt
 8000aa8:	18d2      	addgt	r2, r2, r3
 8000aaa:	4041      	eorgt	r1, r0
 8000aac:	4048      	eorgt	r0, r1
 8000aae:	4041      	eorgt	r1, r0
 8000ab0:	bfb8      	it	lt
 8000ab2:	425b      	neglt	r3, r3
 8000ab4:	2b19      	cmp	r3, #25
 8000ab6:	bf88      	it	hi
 8000ab8:	4770      	bxhi	lr
 8000aba:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000abe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ac2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ace:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ad2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ad6:	bf18      	it	ne
 8000ad8:	4249      	negne	r1, r1
 8000ada:	ea92 0f03 	teq	r2, r3
 8000ade:	d03f      	beq.n	8000b60 <__addsf3+0xd8>
 8000ae0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ae4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ae8:	eb10 000c 	adds.w	r0, r0, ip
 8000aec:	f1c3 0320 	rsb	r3, r3, #32
 8000af0:	fa01 f103 	lsl.w	r1, r1, r3
 8000af4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000af8:	d502      	bpl.n	8000b00 <__addsf3+0x78>
 8000afa:	4249      	negs	r1, r1
 8000afc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b00:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b04:	d313      	bcc.n	8000b2e <__addsf3+0xa6>
 8000b06:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b0a:	d306      	bcc.n	8000b1a <__addsf3+0x92>
 8000b0c:	0840      	lsrs	r0, r0, #1
 8000b0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b12:	f102 0201 	add.w	r2, r2, #1
 8000b16:	2afe      	cmp	r2, #254	@ 0xfe
 8000b18:	d251      	bcs.n	8000bbe <__addsf3+0x136>
 8000b1a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b22:	bf08      	it	eq
 8000b24:	f020 0001 	biceq.w	r0, r0, #1
 8000b28:	ea40 0003 	orr.w	r0, r0, r3
 8000b2c:	4770      	bx	lr
 8000b2e:	0049      	lsls	r1, r1, #1
 8000b30:	eb40 0000 	adc.w	r0, r0, r0
 8000b34:	3a01      	subs	r2, #1
 8000b36:	bf28      	it	cs
 8000b38:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b3c:	d2ed      	bcs.n	8000b1a <__addsf3+0x92>
 8000b3e:	fab0 fc80 	clz	ip, r0
 8000b42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b46:	ebb2 020c 	subs.w	r2, r2, ip
 8000b4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b4e:	bfaa      	itet	ge
 8000b50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b54:	4252      	neglt	r2, r2
 8000b56:	4318      	orrge	r0, r3
 8000b58:	bfbc      	itt	lt
 8000b5a:	40d0      	lsrlt	r0, r2
 8000b5c:	4318      	orrlt	r0, r3
 8000b5e:	4770      	bx	lr
 8000b60:	f092 0f00 	teq	r2, #0
 8000b64:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b68:	bf06      	itte	eq
 8000b6a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	3201      	addeq	r2, #1
 8000b70:	3b01      	subne	r3, #1
 8000b72:	e7b5      	b.n	8000ae0 <__addsf3+0x58>
 8000b74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b7c:	bf18      	it	ne
 8000b7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b82:	d021      	beq.n	8000bc8 <__addsf3+0x140>
 8000b84:	ea92 0f03 	teq	r2, r3
 8000b88:	d004      	beq.n	8000b94 <__addsf3+0x10c>
 8000b8a:	f092 0f00 	teq	r2, #0
 8000b8e:	bf08      	it	eq
 8000b90:	4608      	moveq	r0, r1
 8000b92:	4770      	bx	lr
 8000b94:	ea90 0f01 	teq	r0, r1
 8000b98:	bf1c      	itt	ne
 8000b9a:	2000      	movne	r0, #0
 8000b9c:	4770      	bxne	lr
 8000b9e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ba2:	d104      	bne.n	8000bae <__addsf3+0x126>
 8000ba4:	0040      	lsls	r0, r0, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bac:	4770      	bx	lr
 8000bae:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bb2:	bf3c      	itt	cc
 8000bb4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bb8:	4770      	bxcc	lr
 8000bba:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bbe:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bc2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bc6:	4770      	bx	lr
 8000bc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bcc:	bf16      	itet	ne
 8000bce:	4608      	movne	r0, r1
 8000bd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bd4:	4601      	movne	r1, r0
 8000bd6:	0242      	lsls	r2, r0, #9
 8000bd8:	bf06      	itte	eq
 8000bda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bde:	ea90 0f01 	teqeq	r0, r1
 8000be2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_ui2f>:
 8000be8:	f04f 0300 	mov.w	r3, #0
 8000bec:	e004      	b.n	8000bf8 <__aeabi_i2f+0x8>
 8000bee:	bf00      	nop

08000bf0 <__aeabi_i2f>:
 8000bf0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000bf4:	bf48      	it	mi
 8000bf6:	4240      	negmi	r0, r0
 8000bf8:	ea5f 0c00 	movs.w	ip, r0
 8000bfc:	bf08      	it	eq
 8000bfe:	4770      	bxeq	lr
 8000c00:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c04:	4601      	mov	r1, r0
 8000c06:	f04f 0000 	mov.w	r0, #0
 8000c0a:	e01c      	b.n	8000c46 <__aeabi_l2f+0x2a>

08000c0c <__aeabi_ul2f>:
 8000c0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c10:	bf08      	it	eq
 8000c12:	4770      	bxeq	lr
 8000c14:	f04f 0300 	mov.w	r3, #0
 8000c18:	e00a      	b.n	8000c30 <__aeabi_l2f+0x14>
 8000c1a:	bf00      	nop

08000c1c <__aeabi_l2f>:
 8000c1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c20:	bf08      	it	eq
 8000c22:	4770      	bxeq	lr
 8000c24:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c28:	d502      	bpl.n	8000c30 <__aeabi_l2f+0x14>
 8000c2a:	4240      	negs	r0, r0
 8000c2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c30:	ea5f 0c01 	movs.w	ip, r1
 8000c34:	bf02      	ittt	eq
 8000c36:	4684      	moveq	ip, r0
 8000c38:	4601      	moveq	r1, r0
 8000c3a:	2000      	moveq	r0, #0
 8000c3c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c40:	bf08      	it	eq
 8000c42:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c46:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c4a:	fabc f28c 	clz	r2, ip
 8000c4e:	3a08      	subs	r2, #8
 8000c50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c54:	db10      	blt.n	8000c78 <__aeabi_l2f+0x5c>
 8000c56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c60:	f1c2 0220 	rsb	r2, r2, #32
 8000c64:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c68:	fa20 f202 	lsr.w	r2, r0, r2
 8000c6c:	eb43 0002 	adc.w	r0, r3, r2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f102 0220 	add.w	r2, r2, #32
 8000c7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c88:	fa21 f202 	lsr.w	r2, r1, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b988 	b.w	8000fc0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	468e      	mov	lr, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	4688      	mov	r8, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d962      	bls.n	8000da4 <__udivmoddi4+0xdc>
 8000cde:	fab2 f682 	clz	r6, r2
 8000ce2:	b14e      	cbz	r6, 8000cf8 <__udivmoddi4+0x30>
 8000ce4:	f1c6 0320 	rsb	r3, r6, #32
 8000ce8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cec:	fa20 f303 	lsr.w	r3, r0, r3
 8000cf0:	40b7      	lsls	r7, r6
 8000cf2:	ea43 0808 	orr.w	r8, r3, r8
 8000cf6:	40b4      	lsls	r4, r6
 8000cf8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cfc:	fa1f fc87 	uxth.w	ip, r7
 8000d00:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d04:	0c23      	lsrs	r3, r4, #16
 8000d06:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d0a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d909      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d16:	18fb      	adds	r3, r7, r3
 8000d18:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d1c:	f080 80ea 	bcs.w	8000ef4 <__udivmoddi4+0x22c>
 8000d20:	429a      	cmp	r2, r3
 8000d22:	f240 80e7 	bls.w	8000ef4 <__udivmoddi4+0x22c>
 8000d26:	3902      	subs	r1, #2
 8000d28:	443b      	add	r3, r7
 8000d2a:	1a9a      	subs	r2, r3, r2
 8000d2c:	b2a3      	uxth	r3, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d3a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3e:	459c      	cmp	ip, r3
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x8e>
 8000d42:	18fb      	adds	r3, r7, r3
 8000d44:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d48:	f080 80d6 	bcs.w	8000ef8 <__udivmoddi4+0x230>
 8000d4c:	459c      	cmp	ip, r3
 8000d4e:	f240 80d3 	bls.w	8000ef8 <__udivmoddi4+0x230>
 8000d52:	443b      	add	r3, r7
 8000d54:	3802      	subs	r0, #2
 8000d56:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5a:	eba3 030c 	sub.w	r3, r3, ip
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11d      	cbz	r5, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40f3      	lsrs	r3, r6
 8000d64:	2200      	movs	r2, #0
 8000d66:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d905      	bls.n	8000d7e <__udivmoddi4+0xb6>
 8000d72:	b10d      	cbz	r5, 8000d78 <__udivmoddi4+0xb0>
 8000d74:	e9c5 0100 	strd	r0, r1, [r5]
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4608      	mov	r0, r1
 8000d7c:	e7f5      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000d7e:	fab3 f183 	clz	r1, r3
 8000d82:	2900      	cmp	r1, #0
 8000d84:	d146      	bne.n	8000e14 <__udivmoddi4+0x14c>
 8000d86:	4573      	cmp	r3, lr
 8000d88:	d302      	bcc.n	8000d90 <__udivmoddi4+0xc8>
 8000d8a:	4282      	cmp	r2, r0
 8000d8c:	f200 8105 	bhi.w	8000f9a <__udivmoddi4+0x2d2>
 8000d90:	1a84      	subs	r4, r0, r2
 8000d92:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d96:	2001      	movs	r0, #1
 8000d98:	4690      	mov	r8, r2
 8000d9a:	2d00      	cmp	r5, #0
 8000d9c:	d0e5      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000d9e:	e9c5 4800 	strd	r4, r8, [r5]
 8000da2:	e7e2      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f000 8090 	beq.w	8000eca <__udivmoddi4+0x202>
 8000daa:	fab2 f682 	clz	r6, r2
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	f040 80a4 	bne.w	8000efc <__udivmoddi4+0x234>
 8000db4:	1a8a      	subs	r2, r1, r2
 8000db6:	0c03      	lsrs	r3, r0, #16
 8000db8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dbc:	b280      	uxth	r0, r0
 8000dbe:	b2bc      	uxth	r4, r7
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000dc6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dce:	fb04 f20c 	mul.w	r2, r4, ip
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d907      	bls.n	8000de6 <__udivmoddi4+0x11e>
 8000dd6:	18fb      	adds	r3, r7, r3
 8000dd8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x11c>
 8000dde:	429a      	cmp	r2, r3
 8000de0:	f200 80e0 	bhi.w	8000fa4 <__udivmoddi4+0x2dc>
 8000de4:	46c4      	mov	ip, r8
 8000de6:	1a9b      	subs	r3, r3, r2
 8000de8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dec:	fb0e 3312 	mls	r3, lr, r2, r3
 8000df0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000df4:	fb02 f404 	mul.w	r4, r2, r4
 8000df8:	429c      	cmp	r4, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x144>
 8000dfc:	18fb      	adds	r3, r7, r3
 8000dfe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x142>
 8000e04:	429c      	cmp	r4, r3
 8000e06:	f200 80ca 	bhi.w	8000f9e <__udivmoddi4+0x2d6>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	1b1b      	subs	r3, r3, r4
 8000e0e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e12:	e7a5      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e14:	f1c1 0620 	rsb	r6, r1, #32
 8000e18:	408b      	lsls	r3, r1
 8000e1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e1e:	431f      	orrs	r7, r3
 8000e20:	fa0e f401 	lsl.w	r4, lr, r1
 8000e24:	fa20 f306 	lsr.w	r3, r0, r6
 8000e28:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e2c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e30:	4323      	orrs	r3, r4
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	fa1f fc87 	uxth.w	ip, r7
 8000e3a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e3e:	0c1c      	lsrs	r4, r3, #16
 8000e40:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e44:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e48:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e52:	d909      	bls.n	8000e68 <__udivmoddi4+0x1a0>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e5a:	f080 809c 	bcs.w	8000f96 <__udivmoddi4+0x2ce>
 8000e5e:	45a6      	cmp	lr, r4
 8000e60:	f240 8099 	bls.w	8000f96 <__udivmoddi4+0x2ce>
 8000e64:	3802      	subs	r0, #2
 8000e66:	443c      	add	r4, r7
 8000e68:	eba4 040e 	sub.w	r4, r4, lr
 8000e6c:	fa1f fe83 	uxth.w	lr, r3
 8000e70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e74:	fb09 4413 	mls	r4, r9, r3, r4
 8000e78:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e7c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e80:	45a4      	cmp	ip, r4
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x1ce>
 8000e84:	193c      	adds	r4, r7, r4
 8000e86:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e8a:	f080 8082 	bcs.w	8000f92 <__udivmoddi4+0x2ca>
 8000e8e:	45a4      	cmp	ip, r4
 8000e90:	d97f      	bls.n	8000f92 <__udivmoddi4+0x2ca>
 8000e92:	3b02      	subs	r3, #2
 8000e94:	443c      	add	r4, r7
 8000e96:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e9a:	eba4 040c 	sub.w	r4, r4, ip
 8000e9e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ea2:	4564      	cmp	r4, ip
 8000ea4:	4673      	mov	r3, lr
 8000ea6:	46e1      	mov	r9, ip
 8000ea8:	d362      	bcc.n	8000f70 <__udivmoddi4+0x2a8>
 8000eaa:	d05f      	beq.n	8000f6c <__udivmoddi4+0x2a4>
 8000eac:	b15d      	cbz	r5, 8000ec6 <__udivmoddi4+0x1fe>
 8000eae:	ebb8 0203 	subs.w	r2, r8, r3
 8000eb2:	eb64 0409 	sbc.w	r4, r4, r9
 8000eb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eba:	fa22 f301 	lsr.w	r3, r2, r1
 8000ebe:	431e      	orrs	r6, r3
 8000ec0:	40cc      	lsrs	r4, r1
 8000ec2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	e74f      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000eca:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ece:	0c01      	lsrs	r1, r0, #16
 8000ed0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ed4:	b280      	uxth	r0, r0
 8000ed6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eda:	463b      	mov	r3, r7
 8000edc:	4638      	mov	r0, r7
 8000ede:	463c      	mov	r4, r7
 8000ee0:	46b8      	mov	r8, r7
 8000ee2:	46be      	mov	lr, r7
 8000ee4:	2620      	movs	r6, #32
 8000ee6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eea:	eba2 0208 	sub.w	r2, r2, r8
 8000eee:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ef2:	e766      	b.n	8000dc2 <__udivmoddi4+0xfa>
 8000ef4:	4601      	mov	r1, r0
 8000ef6:	e718      	b.n	8000d2a <__udivmoddi4+0x62>
 8000ef8:	4610      	mov	r0, r2
 8000efa:	e72c      	b.n	8000d56 <__udivmoddi4+0x8e>
 8000efc:	f1c6 0220 	rsb	r2, r6, #32
 8000f00:	fa2e f302 	lsr.w	r3, lr, r2
 8000f04:	40b7      	lsls	r7, r6
 8000f06:	40b1      	lsls	r1, r6
 8000f08:	fa20 f202 	lsr.w	r2, r0, r2
 8000f0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f10:	430a      	orrs	r2, r1
 8000f12:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f16:	b2bc      	uxth	r4, r7
 8000f18:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f1c:	0c11      	lsrs	r1, r2, #16
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb08 f904 	mul.w	r9, r8, r4
 8000f26:	40b0      	lsls	r0, r6
 8000f28:	4589      	cmp	r9, r1
 8000f2a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f2e:	b280      	uxth	r0, r0
 8000f30:	d93e      	bls.n	8000fb0 <__udivmoddi4+0x2e8>
 8000f32:	1879      	adds	r1, r7, r1
 8000f34:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f38:	d201      	bcs.n	8000f3e <__udivmoddi4+0x276>
 8000f3a:	4589      	cmp	r9, r1
 8000f3c:	d81f      	bhi.n	8000f7e <__udivmoddi4+0x2b6>
 8000f3e:	eba1 0109 	sub.w	r1, r1, r9
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fb09 f804 	mul.w	r8, r9, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	b292      	uxth	r2, r2
 8000f50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f54:	4542      	cmp	r2, r8
 8000f56:	d229      	bcs.n	8000fac <__udivmoddi4+0x2e4>
 8000f58:	18ba      	adds	r2, r7, r2
 8000f5a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f5e:	d2c4      	bcs.n	8000eea <__udivmoddi4+0x222>
 8000f60:	4542      	cmp	r2, r8
 8000f62:	d2c2      	bcs.n	8000eea <__udivmoddi4+0x222>
 8000f64:	f1a9 0102 	sub.w	r1, r9, #2
 8000f68:	443a      	add	r2, r7
 8000f6a:	e7be      	b.n	8000eea <__udivmoddi4+0x222>
 8000f6c:	45f0      	cmp	r8, lr
 8000f6e:	d29d      	bcs.n	8000eac <__udivmoddi4+0x1e4>
 8000f70:	ebbe 0302 	subs.w	r3, lr, r2
 8000f74:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f78:	3801      	subs	r0, #1
 8000f7a:	46e1      	mov	r9, ip
 8000f7c:	e796      	b.n	8000eac <__udivmoddi4+0x1e4>
 8000f7e:	eba7 0909 	sub.w	r9, r7, r9
 8000f82:	4449      	add	r1, r9
 8000f84:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f88:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8c:	fb09 f804 	mul.w	r8, r9, r4
 8000f90:	e7db      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f92:	4673      	mov	r3, lr
 8000f94:	e77f      	b.n	8000e96 <__udivmoddi4+0x1ce>
 8000f96:	4650      	mov	r0, sl
 8000f98:	e766      	b.n	8000e68 <__udivmoddi4+0x1a0>
 8000f9a:	4608      	mov	r0, r1
 8000f9c:	e6fd      	b.n	8000d9a <__udivmoddi4+0xd2>
 8000f9e:	443b      	add	r3, r7
 8000fa0:	3a02      	subs	r2, #2
 8000fa2:	e733      	b.n	8000e0c <__udivmoddi4+0x144>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	443b      	add	r3, r7
 8000faa:	e71c      	b.n	8000de6 <__udivmoddi4+0x11e>
 8000fac:	4649      	mov	r1, r9
 8000fae:	e79c      	b.n	8000eea <__udivmoddi4+0x222>
 8000fb0:	eba1 0109 	sub.w	r1, r1, r9
 8000fb4:	46c4      	mov	ip, r8
 8000fb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fba:	fb09 f804 	mul.w	r8, r9, r4
 8000fbe:	e7c4      	b.n	8000f4a <__udivmoddi4+0x282>

08000fc0 <__aeabi_idiv0>:
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <LED_Init>:
};

GPIO_PinState cell_led_states[NUM_CELL_LEDS];

// Initialize all LEDs (set to OFF)
void LED_Init(void) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0

    for (uint8_t i = 0; i < NUM_LEDS; i++) {
 8000fca:	2300      	movs	r3, #0
 8000fcc:	73fb      	strb	r3, [r7, #15]
 8000fce:	e00f      	b.n	8000ff0 <LED_Init+0x2c>
        HAL_GPIO_WritePin(leds[i].port, leds[i].pin, GPIO_PIN_RESET);
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	4a33      	ldr	r2, [pc, #204]	@ (80010a0 <LED_Init+0xdc>)
 8000fd4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
 8000fda:	4a31      	ldr	r2, [pc, #196]	@ (80010a0 <LED_Init+0xdc>)
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	4413      	add	r3, r2
 8000fe0:	889b      	ldrh	r3, [r3, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f007 ff7d 	bl	8008ee4 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < NUM_LEDS; i++) {
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	3301      	adds	r3, #1
 8000fee:	73fb      	strb	r3, [r7, #15]
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	2b09      	cmp	r3, #9
 8000ff4:	d9ec      	bls.n	8000fd0 <LED_Init+0xc>
    }

    for (uint8_t i = 0; i < NUM_COMM_LEDS; i++) {
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	73bb      	strb	r3, [r7, #14]
 8000ffa:	e00f      	b.n	800101c <LED_Init+0x58>
        HAL_GPIO_WritePin(comm_leds[i].port, comm_leds[i].pin, GPIO_PIN_RESET);
 8000ffc:	7bbb      	ldrb	r3, [r7, #14]
 8000ffe:	4a29      	ldr	r2, [pc, #164]	@ (80010a4 <LED_Init+0xe0>)
 8001000:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001004:	7bbb      	ldrb	r3, [r7, #14]
 8001006:	4a27      	ldr	r2, [pc, #156]	@ (80010a4 <LED_Init+0xe0>)
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	4413      	add	r3, r2
 800100c:	889b      	ldrh	r3, [r3, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	4619      	mov	r1, r3
 8001012:	f007 ff67 	bl	8008ee4 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < NUM_COMM_LEDS; i++) {
 8001016:	7bbb      	ldrb	r3, [r7, #14]
 8001018:	3301      	adds	r3, #1
 800101a:	73bb      	strb	r3, [r7, #14]
 800101c:	7bbb      	ldrb	r3, [r7, #14]
 800101e:	2b03      	cmp	r3, #3
 8001020:	d9ec      	bls.n	8000ffc <LED_Init+0x38>
    }

    for (uint8_t i = 0; i < NUM_TEMP_LEDS; i++) {
 8001022:	2300      	movs	r3, #0
 8001024:	737b      	strb	r3, [r7, #13]
 8001026:	e00f      	b.n	8001048 <LED_Init+0x84>
        HAL_GPIO_WritePin(temp_leds[i].port, temp_leds[i].pin, GPIO_PIN_SET); // Active low
 8001028:	7b7b      	ldrb	r3, [r7, #13]
 800102a:	4a1f      	ldr	r2, [pc, #124]	@ (80010a8 <LED_Init+0xe4>)
 800102c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001030:	7b7b      	ldrb	r3, [r7, #13]
 8001032:	4a1d      	ldr	r2, [pc, #116]	@ (80010a8 <LED_Init+0xe4>)
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	4413      	add	r3, r2
 8001038:	889b      	ldrh	r3, [r3, #4]
 800103a:	2201      	movs	r2, #1
 800103c:	4619      	mov	r1, r3
 800103e:	f007 ff51 	bl	8008ee4 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < NUM_TEMP_LEDS; i++) {
 8001042:	7b7b      	ldrb	r3, [r7, #13]
 8001044:	3301      	adds	r3, #1
 8001046:	737b      	strb	r3, [r7, #13]
 8001048:	7b7b      	ldrb	r3, [r7, #13]
 800104a:	2b05      	cmp	r3, #5
 800104c:	d9ec      	bls.n	8001028 <LED_Init+0x64>
    }

    // Initialize cell LED states and set hardware LEDs to OFF
    for (uint8_t i = 0; i < NUM_CELL_LEDS; i++) {
 800104e:	2300      	movs	r3, #0
 8001050:	733b      	strb	r3, [r7, #12]
 8001052:	e01d      	b.n	8001090 <LED_Init+0xcc>
        cell_led_states[i] = GPIO_PIN_SET; // Assume LEDs are off (active-low logic)
 8001054:	7b3b      	ldrb	r3, [r7, #12]
 8001056:	4a15      	ldr	r2, [pc, #84]	@ (80010ac <LED_Init+0xe8>)
 8001058:	2101      	movs	r1, #1
 800105a:	54d1      	strb	r1, [r2, r3]
        I2C_HandleTypeDef *i2c_handle = cell_leds[i].i2c_handle;
 800105c:	7b3b      	ldrb	r3, [r7, #12]
 800105e:	4a14      	ldr	r2, [pc, #80]	@ (80010b0 <LED_Init+0xec>)
 8001060:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001064:	60bb      	str	r3, [r7, #8]
        uint8_t expander_id = cell_leds[i].expander_id;
 8001066:	7b3b      	ldrb	r3, [r7, #12]
 8001068:	4a11      	ldr	r2, [pc, #68]	@ (80010b0 <LED_Init+0xec>)
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	4413      	add	r3, r2
 800106e:	791b      	ldrb	r3, [r3, #4]
 8001070:	71fb      	strb	r3, [r7, #7]
        uint16_t pin = cell_leds[i].pin;
 8001072:	7b3b      	ldrb	r3, [r7, #12]
 8001074:	4a0e      	ldr	r2, [pc, #56]	@ (80010b0 <LED_Init+0xec>)
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	4413      	add	r3, r2
 800107a:	88db      	ldrh	r3, [r3, #6]
 800107c:	80bb      	strh	r3, [r7, #4]

        // Ensure LEDs are turned off at initialization
        Expander_SetPinState(i2c_handle, expander_id, pin, GPIO_PIN_SET); // Active low
 800107e:	88ba      	ldrh	r2, [r7, #4]
 8001080:	79f9      	ldrb	r1, [r7, #7]
 8001082:	2301      	movs	r3, #1
 8001084:	68b8      	ldr	r0, [r7, #8]
 8001086:	f002 fd69 	bl	8003b5c <Expander_SetPinState>
    for (uint8_t i = 0; i < NUM_CELL_LEDS; i++) {
 800108a:	7b3b      	ldrb	r3, [r7, #12]
 800108c:	3301      	adds	r3, #1
 800108e:	733b      	strb	r3, [r7, #12]
 8001090:	7b3b      	ldrb	r3, [r7, #12]
 8001092:	2b17      	cmp	r3, #23
 8001094:	d9de      	bls.n	8001054 <LED_Init+0x90>
    }

}
 8001096:	bf00      	nop
 8001098:	bf00      	nop
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000000 	.word	0x20000000
 80010a4:	20000050 	.word	0x20000050
 80010a8:	20000070 	.word	0x20000070
 80010ac:	200009a8 	.word	0x200009a8
 80010b0:	200000a0 	.word	0x200000a0

080010b4 <LED_Toggle>:
        HAL_GPIO_WritePin(leds[led - 1].port, leds[led - 1].pin, (state == High) ? GPIO_PIN_SET : GPIO_PIN_RESET);
    }
}

// Toggle a specific LED
void LED_Toggle(LED_ID led) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
    if (led <= NUM_LEDS) {
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b0a      	cmp	r3, #10
 80010c2:	d80e      	bhi.n	80010e2 <LED_Toggle+0x2e>
        HAL_GPIO_TogglePin(leds[led - 1].port, leds[led - 1].pin);
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	4a08      	ldr	r2, [pc, #32]	@ (80010ec <LED_Toggle+0x38>)
 80010ca:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	3b01      	subs	r3, #1
 80010d2:	4906      	ldr	r1, [pc, #24]	@ (80010ec <LED_Toggle+0x38>)
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	440b      	add	r3, r1
 80010d8:	889b      	ldrh	r3, [r3, #4]
 80010da:	4619      	mov	r1, r3
 80010dc:	4610      	mov	r0, r2
 80010de:	f007 ff1a 	bl	8008f16 <HAL_GPIO_TogglePin>
    }
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000000 	.word	0x20000000

080010f0 <Push_ButtonHandler>:

    return id;
}

void Push_ButtonHandler(uint16_t GPIO_Pin)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	80fb      	strh	r3, [r7, #6]
    currentTime = HAL_GetTick();
 80010fa:	f007 f83f 	bl	800817c <HAL_GetTick>
 80010fe:	4603      	mov	r3, r0
 8001100:	4a14      	ldr	r2, [pc, #80]	@ (8001154 <Push_ButtonHandler+0x64>)
 8001102:	6013      	str	r3, [r2, #0]

    for(int j = 0; j < 4; j++) {
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	e01c      	b.n	8001144 <Push_ButtonHandler+0x54>
        if((GPIO_Pin == BUTTON_PINS[j]) && (currentTime - previousTime > 150)) {
 800110a:	4a13      	ldr	r2, [pc, #76]	@ (8001158 <Push_ButtonHandler+0x68>)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001112:	88fa      	ldrh	r2, [r7, #6]
 8001114:	429a      	cmp	r2, r3
 8001116:	d112      	bne.n	800113e <Push_ButtonHandler+0x4e>
 8001118:	4b0e      	ldr	r3, [pc, #56]	@ (8001154 <Push_ButtonHandler+0x64>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <Push_ButtonHandler+0x6c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b96      	cmp	r3, #150	@ 0x96
 8001124:	d90b      	bls.n	800113e <Push_ButtonHandler+0x4e>
//        	Menu_Handler(j);
            LED_Toggle(j+1);  // Keep your existing LED toggle
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	b2db      	uxtb	r3, r3
 800112a:	3301      	adds	r3, #1
 800112c:	b2db      	uxtb	r3, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff ffc0 	bl	80010b4 <LED_Toggle>
            previousTime = currentTime;
 8001134:	4b07      	ldr	r3, [pc, #28]	@ (8001154 <Push_ButtonHandler+0x64>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a08      	ldr	r2, [pc, #32]	@ (800115c <Push_ButtonHandler+0x6c>)
 800113a:	6013      	str	r3, [r2, #0]
            break;
 800113c:	e006      	b.n	800114c <Push_ButtonHandler+0x5c>
    for(int j = 0; j < 4; j++) {
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	3301      	adds	r3, #1
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2b03      	cmp	r3, #3
 8001148:	dddf      	ble.n	800110a <Push_ButtonHandler+0x1a>
        }
    }
}
 800114a:	bf00      	nop
 800114c:	bf00      	nop
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200009a0 	.word	0x200009a0
 8001158:	0800cb08 	.word	0x0800cb08
 800115c:	200009a4 	.word	0x200009a4

08001160 <intToBinary>:
uint8_t misoCell11Res1 [2];
uint8_t misoCell11Res2 [2];
uint8_t misoCell11Res3 [2];


void intToBinary(int num, int *binaryArray) {
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
		    for (int i = 0; i < 10; i++) {
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	e00e      	b.n	800118e <intToBinary+0x2e>
		        binaryArray[15 - i] = (num >> i) & 1;
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	411a      	asrs	r2, r3
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f1c3 030f 	rsb	r3, r3, #15
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	6839      	ldr	r1, [r7, #0]
 8001180:	440b      	add	r3, r1
 8001182:	f002 0201 	and.w	r2, r2, #1
 8001186:	601a      	str	r2, [r3, #0]
		    for (int i = 0; i < 10; i++) {
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	3301      	adds	r3, #1
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2b09      	cmp	r3, #9
 8001192:	dded      	ble.n	8001170 <intToBinary+0x10>
		    }
		}
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <assignBytes>:

void assignBytes(int *resArray, uint8_t *r) {
 80011a2:	b480      	push	{r7}
 80011a4:	b085      	sub	sp, #20
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	6039      	str	r1, [r7, #0]
		    r[0] = 0;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
		    r[1] = 0;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	3301      	adds	r3, #1
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]

		    for (int i = 0; i < 8; i++) {
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	e02b      	b.n	8001218 <assignBytes+0x76>

		        r[0] |= (resArray[i] << (7 - i));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	b25a      	sxtb	r2, r3
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	440b      	add	r3, r1
 80011ce:	6819      	ldr	r1, [r3, #0]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f1c3 0307 	rsb	r3, r3, #7
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	b25b      	sxtb	r3, r3
 80011dc:	4313      	orrs	r3, r2
 80011de:	b25b      	sxtb	r3, r3
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	701a      	strb	r2, [r3, #0]
		        r[1] |= (resArray[i + 8] << (7 - i));
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	b25a      	sxtb	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	3308      	adds	r3, #8
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	6879      	ldr	r1, [r7, #4]
 80011f6:	440b      	add	r3, r1
 80011f8:	6819      	ldr	r1, [r3, #0]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f1c3 0307 	rsb	r3, r3, #7
 8001200:	fa01 f303 	lsl.w	r3, r1, r3
 8001204:	b25b      	sxtb	r3, r3
 8001206:	4313      	orrs	r3, r2
 8001208:	b25a      	sxtb	r2, r3
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	3301      	adds	r3, #1
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	701a      	strb	r2, [r3, #0]
		    for (int i = 0; i < 8; i++) {
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	3301      	adds	r3, #1
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2b07      	cmp	r3, #7
 800121c:	ddd0      	ble.n	80011c0 <assignBytes+0x1e>
		    }
		}
 800121e:	bf00      	nop
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <cell12_Temp_01_Set>:
		}
		return true;

	}

void cell12_Temp_01_Set(float resistance){
 800122c:	b580      	push	{r7, lr}
 800122e:	b096      	sub	sp, #88	@ 0x58
 8001230:	af02      	add	r7, sp, #8
 8001232:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff f93e 	bl	80004b8 <__aeabi_f2d>
 800123c:	f04f 0200 	mov.w	r2, #0
 8001240:	4b4c      	ldr	r3, [pc, #304]	@ (8001374 <cell12_Temp_01_Set+0x148>)
 8001242:	f7ff fabb 	bl	80007bc <__aeabi_ddiv>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	4b49      	ldr	r3, [pc, #292]	@ (8001378 <cell12_Temp_01_Set+0x14c>)
 8001254:	f7ff f988 	bl	8000568 <__aeabi_dmul>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff fb94 	bl	800098c <__aeabi_d2iz>
 8001264:	4603      	mov	r3, r0
 8001266:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	2240      	movs	r2, #64	@ 0x40
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f00b fb73 	bl	800c95c <memset>
 8001276:	2301      	movs	r3, #1
 8001278:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 800127a:	f107 030c 	add.w	r3, r7, #12
 800127e:	4619      	mov	r1, r3
 8001280:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001282:	f7ff ff6d 	bl	8001160 <intToBinary>
	assignBytes(resArray, resByteArray);
 8001286:	f107 0208 	add.w	r2, r7, #8
 800128a:	f107 030c 	add.w	r3, r7, #12
 800128e:	4611      	mov	r1, r2
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff86 	bl	80011a2 <assignBytes>
	HAL_GPIO_WritePin(CELL12_TEMP_01_LED_GPIO_Port, CELL12_TEMP_01_LED_Pin, GPIO_PIN_SET);
 8001296:	2201      	movs	r2, #1
 8001298:	2101      	movs	r1, #1
 800129a:	4838      	ldr	r0, [pc, #224]	@ (800137c <cell12_Temp_01_Set+0x150>)
 800129c:	f007 fe22 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80012a0:	200a      	movs	r0, #10
 80012a2:	f006 ff77 	bl	8008194 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 80012a6:	2201      	movs	r2, #1
 80012a8:	2102      	movs	r1, #2
 80012aa:	4835      	ldr	r0, [pc, #212]	@ (8001380 <cell12_Temp_01_Set+0x154>)
 80012ac:	f007 fe1a 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80012b0:	200a      	movs	r0, #10
 80012b2:	f006 ff6f 	bl	8008194 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2102      	movs	r1, #2
 80012ba:	4831      	ldr	r0, [pc, #196]	@ (8001380 <cell12_Temp_01_Set+0x154>)
 80012bc:	f007 fe12 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 80012c0:	f04f 33ff 	mov.w	r3, #4294967295
 80012c4:	2202      	movs	r2, #2
 80012c6:	492f      	ldr	r1, [pc, #188]	@ (8001384 <cell12_Temp_01_Set+0x158>)
 80012c8:	482f      	ldr	r0, [pc, #188]	@ (8001388 <cell12_Temp_01_Set+0x15c>)
 80012ca:	f009 fbd8 	bl	800aa7e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 80012ce:	2201      	movs	r2, #1
 80012d0:	2102      	movs	r1, #2
 80012d2:	482b      	ldr	r0, [pc, #172]	@ (8001380 <cell12_Temp_01_Set+0x154>)
 80012d4:	f007 fe06 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80012d8:	200a      	movs	r0, #10
 80012da:	f006 ff5b 	bl	8008194 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	2102      	movs	r1, #2
 80012e2:	4827      	ldr	r0, [pc, #156]	@ (8001380 <cell12_Temp_01_Set+0x154>)
 80012e4:	f007 fdfe 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 80012e8:	f04f 33ff 	mov.w	r3, #4294967295
 80012ec:	2202      	movs	r2, #2
 80012ee:	4927      	ldr	r1, [pc, #156]	@ (800138c <cell12_Temp_01_Set+0x160>)
 80012f0:	4825      	ldr	r0, [pc, #148]	@ (8001388 <cell12_Temp_01_Set+0x15c>)
 80012f2:	f009 fbc4 	bl	800aa7e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 80012f6:	2201      	movs	r2, #1
 80012f8:	2102      	movs	r1, #2
 80012fa:	4821      	ldr	r0, [pc, #132]	@ (8001380 <cell12_Temp_01_Set+0x154>)
 80012fc:	f007 fdf2 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001300:	200a      	movs	r0, #10
 8001302:	f006 ff47 	bl	8008194 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	2102      	movs	r1, #2
 800130a:	481d      	ldr	r0, [pc, #116]	@ (8001380 <cell12_Temp_01_Set+0x154>)
 800130c:	f007 fdea 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 8001310:	f107 0108 	add.w	r1, r7, #8
 8001314:	f04f 33ff 	mov.w	r3, #4294967295
 8001318:	2202      	movs	r2, #2
 800131a:	481b      	ldr	r0, [pc, #108]	@ (8001388 <cell12_Temp_01_Set+0x15c>)
 800131c:	f009 fbaf 	bl	800aa7e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8001320:	2201      	movs	r2, #1
 8001322:	2102      	movs	r1, #2
 8001324:	4816      	ldr	r0, [pc, #88]	@ (8001380 <cell12_Temp_01_Set+0x154>)
 8001326:	f007 fddd 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800132a:	200a      	movs	r0, #10
 800132c:	f006 ff32 	bl	8008194 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 8001330:	2200      	movs	r2, #0
 8001332:	2102      	movs	r1, #2
 8001334:	4812      	ldr	r0, [pc, #72]	@ (8001380 <cell12_Temp_01_Set+0x154>)
 8001336:	f007 fdd5 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 800133a:	f04f 33ff 	mov.w	r3, #4294967295
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2302      	movs	r3, #2
 8001342:	4a13      	ldr	r2, [pc, #76]	@ (8001390 <cell12_Temp_01_Set+0x164>)
 8001344:	4913      	ldr	r1, [pc, #76]	@ (8001394 <cell12_Temp_01_Set+0x168>)
 8001346:	4810      	ldr	r0, [pc, #64]	@ (8001388 <cell12_Temp_01_Set+0x15c>)
 8001348:	f009 fdf6 	bl	800af38 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 800134c:	2201      	movs	r2, #1
 800134e:	2102      	movs	r1, #2
 8001350:	480b      	ldr	r0, [pc, #44]	@ (8001380 <cell12_Temp_01_Set+0x154>)
 8001352:	f007 fdc7 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001356:	200a      	movs	r0, #10
 8001358:	f006 ff1c 	bl	8008194 <HAL_Delay>
	HAL_GPIO_WritePin(CELL12_TEMP_01_LED_GPIO_Port, CELL12_TEMP_01_LED_Pin, GPIO_PIN_RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	2101      	movs	r1, #1
 8001360:	4806      	ldr	r0, [pc, #24]	@ (800137c <cell12_Temp_01_Set+0x150>)
 8001362:	f007 fdbf 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001366:	200a      	movs	r0, #10
 8001368:	f006 ff14 	bl	8008194 <HAL_Delay>

}
 800136c:	bf00      	nop
 800136e:	3750      	adds	r7, #80	@ 0x50
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40490000 	.word	0x40490000
 8001378:	40900000 	.word	0x40900000
 800137c:	40020000 	.word	0x40020000
 8001380:	40020800 	.word	0x40020800
 8001384:	200009c0 	.word	0x200009c0
 8001388:	200018d0 	.word	0x200018d0
 800138c:	20000160 	.word	0x20000160
 8001390:	200009c4 	.word	0x200009c4
 8001394:	20000164 	.word	0x20000164

08001398 <cell12_Temp_02_Set>:

void cell12_Temp_02_Set(float resistance){
 8001398:	b580      	push	{r7, lr}
 800139a:	b096      	sub	sp, #88	@ 0x58
 800139c:	af02      	add	r7, sp, #8
 800139e:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff f888 	bl	80004b8 <__aeabi_f2d>
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	4b51      	ldr	r3, [pc, #324]	@ (80014f4 <cell12_Temp_02_Set+0x15c>)
 80013ae:	f7ff fa05 	bl	80007bc <__aeabi_ddiv>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4610      	mov	r0, r2
 80013b8:	4619      	mov	r1, r3
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	4b4e      	ldr	r3, [pc, #312]	@ (80014f8 <cell12_Temp_02_Set+0x160>)
 80013c0:	f7ff f8d2 	bl	8000568 <__aeabi_dmul>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	4610      	mov	r0, r2
 80013ca:	4619      	mov	r1, r3
 80013cc:	f7ff fade 	bl	800098c <__aeabi_d2iz>
 80013d0:	4603      	mov	r3, r0
 80013d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 80013d4:	f107 030c 	add.w	r3, r7, #12
 80013d8:	2240      	movs	r2, #64	@ 0x40
 80013da:	2100      	movs	r1, #0
 80013dc:	4618      	mov	r0, r3
 80013de:	f00b fabd 	bl	800c95c <memset>
 80013e2:	2301      	movs	r3, #1
 80013e4:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 80013e6:	f107 030c 	add.w	r3, r7, #12
 80013ea:	4619      	mov	r1, r3
 80013ec:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80013ee:	f7ff feb7 	bl	8001160 <intToBinary>
	assignBytes(resArray, resByteArray);
 80013f2:	f107 0208 	add.w	r2, r7, #8
 80013f6:	f107 030c 	add.w	r3, r7, #12
 80013fa:	4611      	mov	r1, r2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fed0 	bl	80011a2 <assignBytes>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_02_LED_Pin, GPIO_PIN_SET);
 8001402:	2201      	movs	r2, #1
 8001404:	2101      	movs	r1, #1
 8001406:	483d      	ldr	r0, [pc, #244]	@ (80014fc <cell12_Temp_02_Set+0x164>)
 8001408:	f007 fd6c 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800140c:	200a      	movs	r0, #10
 800140e:	f006 fec1 	bl	8008194 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8001412:	2201      	movs	r2, #1
 8001414:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001418:	4839      	ldr	r0, [pc, #228]	@ (8001500 <cell12_Temp_02_Set+0x168>)
 800141a:	f007 fd63 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800141e:	200a      	movs	r0, #10
 8001420:	f006 feb8 	bl	8008194 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 8001424:	2200      	movs	r2, #0
 8001426:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800142a:	4835      	ldr	r0, [pc, #212]	@ (8001500 <cell12_Temp_02_Set+0x168>)
 800142c:	f007 fd5a 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 8001430:	f04f 33ff 	mov.w	r3, #4294967295
 8001434:	2202      	movs	r2, #2
 8001436:	4933      	ldr	r1, [pc, #204]	@ (8001504 <cell12_Temp_02_Set+0x16c>)
 8001438:	4833      	ldr	r0, [pc, #204]	@ (8001508 <cell12_Temp_02_Set+0x170>)
 800143a:	f009 fb20 	bl	800aa7e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 800143e:	2201      	movs	r2, #1
 8001440:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001444:	482e      	ldr	r0, [pc, #184]	@ (8001500 <cell12_Temp_02_Set+0x168>)
 8001446:	f007 fd4d 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800144a:	200a      	movs	r0, #10
 800144c:	f006 fea2 	bl	8008194 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 8001450:	2200      	movs	r2, #0
 8001452:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001456:	482a      	ldr	r0, [pc, #168]	@ (8001500 <cell12_Temp_02_Set+0x168>)
 8001458:	f007 fd44 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 800145c:	f04f 33ff 	mov.w	r3, #4294967295
 8001460:	2202      	movs	r2, #2
 8001462:	492a      	ldr	r1, [pc, #168]	@ (800150c <cell12_Temp_02_Set+0x174>)
 8001464:	4828      	ldr	r0, [pc, #160]	@ (8001508 <cell12_Temp_02_Set+0x170>)
 8001466:	f009 fb0a 	bl	800aa7e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 800146a:	2201      	movs	r2, #1
 800146c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001470:	4823      	ldr	r0, [pc, #140]	@ (8001500 <cell12_Temp_02_Set+0x168>)
 8001472:	f007 fd37 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001476:	200a      	movs	r0, #10
 8001478:	f006 fe8c 	bl	8008194 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 800147c:	2200      	movs	r2, #0
 800147e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001482:	481f      	ldr	r0, [pc, #124]	@ (8001500 <cell12_Temp_02_Set+0x168>)
 8001484:	f007 fd2e 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 8001488:	f107 0108 	add.w	r1, r7, #8
 800148c:	f04f 33ff 	mov.w	r3, #4294967295
 8001490:	2202      	movs	r2, #2
 8001492:	481d      	ldr	r0, [pc, #116]	@ (8001508 <cell12_Temp_02_Set+0x170>)
 8001494:	f009 faf3 	bl	800aa7e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8001498:	2201      	movs	r2, #1
 800149a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800149e:	4818      	ldr	r0, [pc, #96]	@ (8001500 <cell12_Temp_02_Set+0x168>)
 80014a0:	f007 fd20 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80014a4:	200a      	movs	r0, #10
 80014a6:	f006 fe75 	bl	8008194 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 80014aa:	2200      	movs	r2, #0
 80014ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014b0:	4813      	ldr	r0, [pc, #76]	@ (8001500 <cell12_Temp_02_Set+0x168>)
 80014b2:	f007 fd17 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2302      	movs	r3, #2
 80014be:	4a14      	ldr	r2, [pc, #80]	@ (8001510 <cell12_Temp_02_Set+0x178>)
 80014c0:	4914      	ldr	r1, [pc, #80]	@ (8001514 <cell12_Temp_02_Set+0x17c>)
 80014c2:	4811      	ldr	r0, [pc, #68]	@ (8001508 <cell12_Temp_02_Set+0x170>)
 80014c4:	f009 fd38 	bl	800af38 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 80014c8:	2201      	movs	r2, #1
 80014ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014ce:	480c      	ldr	r0, [pc, #48]	@ (8001500 <cell12_Temp_02_Set+0x168>)
 80014d0:	f007 fd08 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80014d4:	200a      	movs	r0, #10
 80014d6:	f006 fe5d 	bl	8008194 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_02_LED_Pin, GPIO_PIN_RESET);
 80014da:	2200      	movs	r2, #0
 80014dc:	2101      	movs	r1, #1
 80014de:	4807      	ldr	r0, [pc, #28]	@ (80014fc <cell12_Temp_02_Set+0x164>)
 80014e0:	f007 fd00 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80014e4:	200a      	movs	r0, #10
 80014e6:	f006 fe55 	bl	8008194 <HAL_Delay>

}
 80014ea:	bf00      	nop
 80014ec:	3750      	adds	r7, #80	@ 0x50
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40490000 	.word	0x40490000
 80014f8:	40900000 	.word	0x40900000
 80014fc:	40020800 	.word	0x40020800
 8001500:	40021400 	.word	0x40021400
 8001504:	200009c0 	.word	0x200009c0
 8001508:	200018d0 	.word	0x200018d0
 800150c:	20000160 	.word	0x20000160
 8001510:	200009c4 	.word	0x200009c4
 8001514:	20000164 	.word	0x20000164

08001518 <cell12_Temp_03_Set>:

void cell12_Temp_03_Set(float resistance){
 8001518:	b580      	push	{r7, lr}
 800151a:	b096      	sub	sp, #88	@ 0x58
 800151c:	af02      	add	r7, sp, #8
 800151e:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7fe ffc8 	bl	80004b8 <__aeabi_f2d>
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	4b4d      	ldr	r3, [pc, #308]	@ (8001664 <cell12_Temp_03_Set+0x14c>)
 800152e:	f7ff f945 	bl	80007bc <__aeabi_ddiv>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	f04f 0200 	mov.w	r2, #0
 800153e:	4b4a      	ldr	r3, [pc, #296]	@ (8001668 <cell12_Temp_03_Set+0x150>)
 8001540:	f7ff f812 	bl	8000568 <__aeabi_dmul>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4610      	mov	r0, r2
 800154a:	4619      	mov	r1, r3
 800154c:	f7ff fa1e 	bl	800098c <__aeabi_d2iz>
 8001550:	4603      	mov	r3, r0
 8001552:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	2240      	movs	r2, #64	@ 0x40
 800155a:	2100      	movs	r1, #0
 800155c:	4618      	mov	r0, r3
 800155e:	f00b f9fd 	bl	800c95c <memset>
 8001562:	2301      	movs	r3, #1
 8001564:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 8001566:	f107 030c 	add.w	r3, r7, #12
 800156a:	4619      	mov	r1, r3
 800156c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800156e:	f7ff fdf7 	bl	8001160 <intToBinary>
	assignBytes(resArray, resByteArray);
 8001572:	f107 0208 	add.w	r2, r7, #8
 8001576:	f107 030c 	add.w	r3, r7, #12
 800157a:	4611      	mov	r1, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fe10 	bl	80011a2 <assignBytes>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_LED_Pin, GPIO_PIN_SET);
 8001582:	2201      	movs	r2, #1
 8001584:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001588:	4838      	ldr	r0, [pc, #224]	@ (800166c <cell12_Temp_03_Set+0x154>)
 800158a:	f007 fcab 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800158e:	200a      	movs	r0, #10
 8001590:	f006 fe00 	bl	8008194 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001594:	2201      	movs	r2, #1
 8001596:	2140      	movs	r1, #64	@ 0x40
 8001598:	4834      	ldr	r0, [pc, #208]	@ (800166c <cell12_Temp_03_Set+0x154>)
 800159a:	f007 fca3 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800159e:	200a      	movs	r0, #10
 80015a0:	f006 fdf8 	bl	8008194 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2140      	movs	r1, #64	@ 0x40
 80015a8:	4830      	ldr	r0, [pc, #192]	@ (800166c <cell12_Temp_03_Set+0x154>)
 80015aa:	f007 fc9b 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295
 80015b2:	2202      	movs	r2, #2
 80015b4:	492e      	ldr	r1, [pc, #184]	@ (8001670 <cell12_Temp_03_Set+0x158>)
 80015b6:	482f      	ldr	r0, [pc, #188]	@ (8001674 <cell12_Temp_03_Set+0x15c>)
 80015b8:	f009 fa61 	bl	800aa7e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 80015bc:	2201      	movs	r2, #1
 80015be:	2140      	movs	r1, #64	@ 0x40
 80015c0:	482a      	ldr	r0, [pc, #168]	@ (800166c <cell12_Temp_03_Set+0x154>)
 80015c2:	f007 fc8f 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80015c6:	200a      	movs	r0, #10
 80015c8:	f006 fde4 	bl	8008194 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2140      	movs	r1, #64	@ 0x40
 80015d0:	4826      	ldr	r0, [pc, #152]	@ (800166c <cell12_Temp_03_Set+0x154>)
 80015d2:	f007 fc87 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
 80015da:	2202      	movs	r2, #2
 80015dc:	4926      	ldr	r1, [pc, #152]	@ (8001678 <cell12_Temp_03_Set+0x160>)
 80015de:	4825      	ldr	r0, [pc, #148]	@ (8001674 <cell12_Temp_03_Set+0x15c>)
 80015e0:	f009 fa4d 	bl	800aa7e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 80015e4:	2201      	movs	r2, #1
 80015e6:	2140      	movs	r1, #64	@ 0x40
 80015e8:	4820      	ldr	r0, [pc, #128]	@ (800166c <cell12_Temp_03_Set+0x154>)
 80015ea:	f007 fc7b 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80015ee:	200a      	movs	r0, #10
 80015f0:	f006 fdd0 	bl	8008194 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 80015f4:	2200      	movs	r2, #0
 80015f6:	2140      	movs	r1, #64	@ 0x40
 80015f8:	481c      	ldr	r0, [pc, #112]	@ (800166c <cell12_Temp_03_Set+0x154>)
 80015fa:	f007 fc73 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 80015fe:	f107 0108 	add.w	r1, r7, #8
 8001602:	f04f 33ff 	mov.w	r3, #4294967295
 8001606:	2202      	movs	r2, #2
 8001608:	481a      	ldr	r0, [pc, #104]	@ (8001674 <cell12_Temp_03_Set+0x15c>)
 800160a:	f009 fa38 	bl	800aa7e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 800160e:	2201      	movs	r2, #1
 8001610:	2140      	movs	r1, #64	@ 0x40
 8001612:	4816      	ldr	r0, [pc, #88]	@ (800166c <cell12_Temp_03_Set+0x154>)
 8001614:	f007 fc66 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001618:	200a      	movs	r0, #10
 800161a:	f006 fdbb 	bl	8008194 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 800161e:	2200      	movs	r2, #0
 8001620:	2140      	movs	r1, #64	@ 0x40
 8001622:	4812      	ldr	r0, [pc, #72]	@ (800166c <cell12_Temp_03_Set+0x154>)
 8001624:	f007 fc5e 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 8001628:	f04f 33ff 	mov.w	r3, #4294967295
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	2302      	movs	r3, #2
 8001630:	4a12      	ldr	r2, [pc, #72]	@ (800167c <cell12_Temp_03_Set+0x164>)
 8001632:	4913      	ldr	r1, [pc, #76]	@ (8001680 <cell12_Temp_03_Set+0x168>)
 8001634:	480f      	ldr	r0, [pc, #60]	@ (8001674 <cell12_Temp_03_Set+0x15c>)
 8001636:	f009 fc7f 	bl	800af38 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 800163a:	2201      	movs	r2, #1
 800163c:	2140      	movs	r1, #64	@ 0x40
 800163e:	480b      	ldr	r0, [pc, #44]	@ (800166c <cell12_Temp_03_Set+0x154>)
 8001640:	f007 fc50 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001644:	200a      	movs	r0, #10
 8001646:	f006 fda5 	bl	8008194 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_LED_Pin, GPIO_PIN_RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001650:	4806      	ldr	r0, [pc, #24]	@ (800166c <cell12_Temp_03_Set+0x154>)
 8001652:	f007 fc47 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001656:	200a      	movs	r0, #10
 8001658:	f006 fd9c 	bl	8008194 <HAL_Delay>

}
 800165c:	bf00      	nop
 800165e:	3750      	adds	r7, #80	@ 0x50
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40490000 	.word	0x40490000
 8001668:	40900000 	.word	0x40900000
 800166c:	40021400 	.word	0x40021400
 8001670:	200009c0 	.word	0x200009c0
 8001674:	200018d0 	.word	0x200018d0
 8001678:	20000160 	.word	0x20000160
 800167c:	200009c4 	.word	0x200009c4
 8001680:	20000164 	.word	0x20000164

08001684 <cell11_Temp_01_Set>:

void cell11_Temp_01_Set(float resistance){
 8001684:	b580      	push	{r7, lr}
 8001686:	b096      	sub	sp, #88	@ 0x58
 8001688:	af02      	add	r7, sp, #8
 800168a:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7fe ff12 	bl	80004b8 <__aeabi_f2d>
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	4b52      	ldr	r3, [pc, #328]	@ (80017e4 <cell11_Temp_01_Set+0x160>)
 800169a:	f7ff f88f 	bl	80007bc <__aeabi_ddiv>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4610      	mov	r0, r2
 80016a4:	4619      	mov	r1, r3
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	4b4f      	ldr	r3, [pc, #316]	@ (80017e8 <cell11_Temp_01_Set+0x164>)
 80016ac:	f7fe ff5c 	bl	8000568 <__aeabi_dmul>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4610      	mov	r0, r2
 80016b6:	4619      	mov	r1, r3
 80016b8:	f7ff f968 	bl	800098c <__aeabi_d2iz>
 80016bc:	4603      	mov	r3, r0
 80016be:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 80016c0:	f107 030c 	add.w	r3, r7, #12
 80016c4:	2240      	movs	r2, #64	@ 0x40
 80016c6:	2100      	movs	r1, #0
 80016c8:	4618      	mov	r0, r3
 80016ca:	f00b f947 	bl	800c95c <memset>
 80016ce:	2301      	movs	r3, #1
 80016d0:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 80016d2:	f107 030c 	add.w	r3, r7, #12
 80016d6:	4619      	mov	r1, r3
 80016d8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80016da:	f7ff fd41 	bl	8001160 <intToBinary>
	assignBytes(resArray, resByteArray);
 80016de:	f107 0208 	add.w	r2, r7, #8
 80016e2:	f107 030c 	add.w	r3, r7, #12
 80016e6:	4611      	mov	r1, r2
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fd5a 	bl	80011a2 <assignBytes>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_LED_Pin, GPIO_PIN_SET);
 80016ee:	2201      	movs	r2, #1
 80016f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016f4:	483d      	ldr	r0, [pc, #244]	@ (80017ec <cell11_Temp_01_Set+0x168>)
 80016f6:	f007 fbf5 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80016fa:	200a      	movs	r0, #10
 80016fc:	f006 fd4a 	bl	8008194 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8001700:	2201      	movs	r2, #1
 8001702:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001706:	4839      	ldr	r0, [pc, #228]	@ (80017ec <cell11_Temp_01_Set+0x168>)
 8001708:	f007 fbec 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800170c:	200a      	movs	r0, #10
 800170e:	f006 fd41 	bl	8008194 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 8001712:	2200      	movs	r2, #0
 8001714:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001718:	4834      	ldr	r0, [pc, #208]	@ (80017ec <cell11_Temp_01_Set+0x168>)
 800171a:	f007 fbe3 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 800171e:	f04f 33ff 	mov.w	r3, #4294967295
 8001722:	2202      	movs	r2, #2
 8001724:	4932      	ldr	r1, [pc, #200]	@ (80017f0 <cell11_Temp_01_Set+0x16c>)
 8001726:	4833      	ldr	r0, [pc, #204]	@ (80017f4 <cell11_Temp_01_Set+0x170>)
 8001728:	f009 f9a9 	bl	800aa7e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 800172c:	2201      	movs	r2, #1
 800172e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001732:	482e      	ldr	r0, [pc, #184]	@ (80017ec <cell11_Temp_01_Set+0x168>)
 8001734:	f007 fbd6 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001738:	200a      	movs	r0, #10
 800173a:	f006 fd2b 	bl	8008194 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001744:	4829      	ldr	r0, [pc, #164]	@ (80017ec <cell11_Temp_01_Set+0x168>)
 8001746:	f007 fbcd 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 800174a:	f04f 33ff 	mov.w	r3, #4294967295
 800174e:	2202      	movs	r2, #2
 8001750:	4929      	ldr	r1, [pc, #164]	@ (80017f8 <cell11_Temp_01_Set+0x174>)
 8001752:	4828      	ldr	r0, [pc, #160]	@ (80017f4 <cell11_Temp_01_Set+0x170>)
 8001754:	f009 f993 	bl	800aa7e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8001758:	2201      	movs	r2, #1
 800175a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800175e:	4823      	ldr	r0, [pc, #140]	@ (80017ec <cell11_Temp_01_Set+0x168>)
 8001760:	f007 fbc0 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001764:	200a      	movs	r0, #10
 8001766:	f006 fd15 	bl	8008194 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 800176a:	2200      	movs	r2, #0
 800176c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001770:	481e      	ldr	r0, [pc, #120]	@ (80017ec <cell11_Temp_01_Set+0x168>)
 8001772:	f007 fbb7 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 8001776:	f107 0108 	add.w	r1, r7, #8
 800177a:	f04f 33ff 	mov.w	r3, #4294967295
 800177e:	2202      	movs	r2, #2
 8001780:	481c      	ldr	r0, [pc, #112]	@ (80017f4 <cell11_Temp_01_Set+0x170>)
 8001782:	f009 f97c 	bl	800aa7e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8001786:	2201      	movs	r2, #1
 8001788:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800178c:	4817      	ldr	r0, [pc, #92]	@ (80017ec <cell11_Temp_01_Set+0x168>)
 800178e:	f007 fba9 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001792:	200a      	movs	r0, #10
 8001794:	f006 fcfe 	bl	8008194 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 8001798:	2200      	movs	r2, #0
 800179a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800179e:	4813      	ldr	r0, [pc, #76]	@ (80017ec <cell11_Temp_01_Set+0x168>)
 80017a0:	f007 fba0 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 80017a4:	f04f 33ff 	mov.w	r3, #4294967295
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	2302      	movs	r3, #2
 80017ac:	4a13      	ldr	r2, [pc, #76]	@ (80017fc <cell11_Temp_01_Set+0x178>)
 80017ae:	4914      	ldr	r1, [pc, #80]	@ (8001800 <cell11_Temp_01_Set+0x17c>)
 80017b0:	4810      	ldr	r0, [pc, #64]	@ (80017f4 <cell11_Temp_01_Set+0x170>)
 80017b2:	f009 fbc1 	bl	800af38 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 80017b6:	2201      	movs	r2, #1
 80017b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017bc:	480b      	ldr	r0, [pc, #44]	@ (80017ec <cell11_Temp_01_Set+0x168>)
 80017be:	f007 fb91 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80017c2:	200a      	movs	r0, #10
 80017c4:	f006 fce6 	bl	8008194 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_LED_Pin, GPIO_PIN_RESET);
 80017c8:	2200      	movs	r2, #0
 80017ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017ce:	4807      	ldr	r0, [pc, #28]	@ (80017ec <cell11_Temp_01_Set+0x168>)
 80017d0:	f007 fb88 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80017d4:	200a      	movs	r0, #10
 80017d6:	f006 fcdd 	bl	8008194 <HAL_Delay>

}
 80017da:	bf00      	nop
 80017dc:	3750      	adds	r7, #80	@ 0x50
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40490000 	.word	0x40490000
 80017e8:	40900000 	.word	0x40900000
 80017ec:	40021c00 	.word	0x40021c00
 80017f0:	200009c0 	.word	0x200009c0
 80017f4:	20001928 	.word	0x20001928
 80017f8:	20000160 	.word	0x20000160
 80017fc:	200009c4 	.word	0x200009c4
 8001800:	20000164 	.word	0x20000164

08001804 <cell11_Temp_02_Set>:

void cell11_Temp_02_Set(float resistance){
 8001804:	b580      	push	{r7, lr}
 8001806:	b096      	sub	sp, #88	@ 0x58
 8001808:	af02      	add	r7, sp, #8
 800180a:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7fe fe52 	bl	80004b8 <__aeabi_f2d>
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	4b52      	ldr	r3, [pc, #328]	@ (8001964 <cell11_Temp_02_Set+0x160>)
 800181a:	f7fe ffcf 	bl	80007bc <__aeabi_ddiv>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4610      	mov	r0, r2
 8001824:	4619      	mov	r1, r3
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	4b4f      	ldr	r3, [pc, #316]	@ (8001968 <cell11_Temp_02_Set+0x164>)
 800182c:	f7fe fe9c 	bl	8000568 <__aeabi_dmul>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	f7ff f8a8 	bl	800098c <__aeabi_d2iz>
 800183c:	4603      	mov	r3, r0
 800183e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 8001840:	f107 030c 	add.w	r3, r7, #12
 8001844:	2240      	movs	r2, #64	@ 0x40
 8001846:	2100      	movs	r1, #0
 8001848:	4618      	mov	r0, r3
 800184a:	f00b f887 	bl	800c95c <memset>
 800184e:	2301      	movs	r3, #1
 8001850:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 8001852:	f107 030c 	add.w	r3, r7, #12
 8001856:	4619      	mov	r1, r3
 8001858:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800185a:	f7ff fc81 	bl	8001160 <intToBinary>
	assignBytes(resArray, resByteArray);
 800185e:	f107 0208 	add.w	r2, r7, #8
 8001862:	f107 030c 	add.w	r3, r7, #12
 8001866:	4611      	mov	r1, r2
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fc9a 	bl	80011a2 <assignBytes>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_LED_Pin, GPIO_PIN_SET);
 800186e:	2201      	movs	r2, #1
 8001870:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001874:	483d      	ldr	r0, [pc, #244]	@ (800196c <cell11_Temp_02_Set+0x168>)
 8001876:	f007 fb35 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800187a:	200a      	movs	r0, #10
 800187c:	f006 fc8a 	bl	8008194 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8001880:	2201      	movs	r2, #1
 8001882:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001886:	4839      	ldr	r0, [pc, #228]	@ (800196c <cell11_Temp_02_Set+0x168>)
 8001888:	f007 fb2c 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800188c:	200a      	movs	r0, #10
 800188e:	f006 fc81 	bl	8008194 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 8001892:	2200      	movs	r2, #0
 8001894:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001898:	4834      	ldr	r0, [pc, #208]	@ (800196c <cell11_Temp_02_Set+0x168>)
 800189a:	f007 fb23 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 800189e:	f04f 33ff 	mov.w	r3, #4294967295
 80018a2:	2202      	movs	r2, #2
 80018a4:	4932      	ldr	r1, [pc, #200]	@ (8001970 <cell11_Temp_02_Set+0x16c>)
 80018a6:	4833      	ldr	r0, [pc, #204]	@ (8001974 <cell11_Temp_02_Set+0x170>)
 80018a8:	f009 f8e9 	bl	800aa7e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 80018ac:	2201      	movs	r2, #1
 80018ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018b2:	482e      	ldr	r0, [pc, #184]	@ (800196c <cell11_Temp_02_Set+0x168>)
 80018b4:	f007 fb16 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80018b8:	200a      	movs	r0, #10
 80018ba:	f006 fc6b 	bl	8008194 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 80018be:	2200      	movs	r2, #0
 80018c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018c4:	4829      	ldr	r0, [pc, #164]	@ (800196c <cell11_Temp_02_Set+0x168>)
 80018c6:	f007 fb0d 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 80018ca:	f04f 33ff 	mov.w	r3, #4294967295
 80018ce:	2202      	movs	r2, #2
 80018d0:	4929      	ldr	r1, [pc, #164]	@ (8001978 <cell11_Temp_02_Set+0x174>)
 80018d2:	4828      	ldr	r0, [pc, #160]	@ (8001974 <cell11_Temp_02_Set+0x170>)
 80018d4:	f009 f8d3 	bl	800aa7e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 80018d8:	2201      	movs	r2, #1
 80018da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018de:	4823      	ldr	r0, [pc, #140]	@ (800196c <cell11_Temp_02_Set+0x168>)
 80018e0:	f007 fb00 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80018e4:	200a      	movs	r0, #10
 80018e6:	f006 fc55 	bl	8008194 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 80018ea:	2200      	movs	r2, #0
 80018ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018f0:	481e      	ldr	r0, [pc, #120]	@ (800196c <cell11_Temp_02_Set+0x168>)
 80018f2:	f007 faf7 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 80018f6:	f107 0108 	add.w	r1, r7, #8
 80018fa:	f04f 33ff 	mov.w	r3, #4294967295
 80018fe:	2202      	movs	r2, #2
 8001900:	481c      	ldr	r0, [pc, #112]	@ (8001974 <cell11_Temp_02_Set+0x170>)
 8001902:	f009 f8bc 	bl	800aa7e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8001906:	2201      	movs	r2, #1
 8001908:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800190c:	4817      	ldr	r0, [pc, #92]	@ (800196c <cell11_Temp_02_Set+0x168>)
 800190e:	f007 fae9 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001912:	200a      	movs	r0, #10
 8001914:	f006 fc3e 	bl	8008194 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 8001918:	2200      	movs	r2, #0
 800191a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800191e:	4813      	ldr	r0, [pc, #76]	@ (800196c <cell11_Temp_02_Set+0x168>)
 8001920:	f007 fae0 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 8001924:	f04f 33ff 	mov.w	r3, #4294967295
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	2302      	movs	r3, #2
 800192c:	4a13      	ldr	r2, [pc, #76]	@ (800197c <cell11_Temp_02_Set+0x178>)
 800192e:	4914      	ldr	r1, [pc, #80]	@ (8001980 <cell11_Temp_02_Set+0x17c>)
 8001930:	4810      	ldr	r0, [pc, #64]	@ (8001974 <cell11_Temp_02_Set+0x170>)
 8001932:	f009 fb01 	bl	800af38 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8001936:	2201      	movs	r2, #1
 8001938:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800193c:	480b      	ldr	r0, [pc, #44]	@ (800196c <cell11_Temp_02_Set+0x168>)
 800193e:	f007 fad1 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001942:	200a      	movs	r0, #10
 8001944:	f006 fc26 	bl	8008194 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_LED_Pin, GPIO_PIN_RESET);
 8001948:	2200      	movs	r2, #0
 800194a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800194e:	4807      	ldr	r0, [pc, #28]	@ (800196c <cell11_Temp_02_Set+0x168>)
 8001950:	f007 fac8 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001954:	200a      	movs	r0, #10
 8001956:	f006 fc1d 	bl	8008194 <HAL_Delay>

}
 800195a:	bf00      	nop
 800195c:	3750      	adds	r7, #80	@ 0x50
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40490000 	.word	0x40490000
 8001968:	40900000 	.word	0x40900000
 800196c:	40021c00 	.word	0x40021c00
 8001970:	200009c0 	.word	0x200009c0
 8001974:	20001928 	.word	0x20001928
 8001978:	20000160 	.word	0x20000160
 800197c:	200009c4 	.word	0x200009c4
 8001980:	20000164 	.word	0x20000164

08001984 <cell11_Temp_03_Set>:

void cell11_Temp_03_Set(float resistance){
 8001984:	b580      	push	{r7, lr}
 8001986:	b096      	sub	sp, #88	@ 0x58
 8001988:	af02      	add	r7, sp, #8
 800198a:	ed87 0a01 	vstr	s0, [r7, #4]
	int res = (resistance/50.0)*1024;
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7fe fd92 	bl	80004b8 <__aeabi_f2d>
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	4b51      	ldr	r3, [pc, #324]	@ (8001ae0 <cell11_Temp_03_Set+0x15c>)
 800199a:	f7fe ff0f 	bl	80007bc <__aeabi_ddiv>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4610      	mov	r0, r2
 80019a4:	4619      	mov	r1, r3
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	4b4e      	ldr	r3, [pc, #312]	@ (8001ae4 <cell11_Temp_03_Set+0x160>)
 80019ac:	f7fe fddc 	bl	8000568 <__aeabi_dmul>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4610      	mov	r0, r2
 80019b6:	4619      	mov	r1, r3
 80019b8:	f7fe ffe8 	bl	800098c <__aeabi_d2iz>
 80019bc:	4603      	mov	r3, r0
 80019be:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
 80019c0:	f107 030c 	add.w	r3, r7, #12
 80019c4:	2240      	movs	r2, #64	@ 0x40
 80019c6:	2100      	movs	r1, #0
 80019c8:	4618      	mov	r0, r3
 80019ca:	f00a ffc7 	bl	800c95c <memset>
 80019ce:	2301      	movs	r3, #1
 80019d0:	623b      	str	r3, [r7, #32]
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
 80019d2:	f107 030c 	add.w	r3, r7, #12
 80019d6:	4619      	mov	r1, r3
 80019d8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80019da:	f7ff fbc1 	bl	8001160 <intToBinary>
	assignBytes(resArray, resByteArray);
 80019de:	f107 0208 	add.w	r2, r7, #8
 80019e2:	f107 030c 	add.w	r3, r7, #12
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff fbda 	bl	80011a2 <assignBytes>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_03_LED_Pin, GPIO_PIN_SET);
 80019ee:	2201      	movs	r2, #1
 80019f0:	2140      	movs	r1, #64	@ 0x40
 80019f2:	483d      	ldr	r0, [pc, #244]	@ (8001ae8 <cell11_Temp_03_Set+0x164>)
 80019f4:	f007 fa76 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80019f8:	200a      	movs	r0, #10
 80019fa:	f006 fbcb 	bl	8008194 <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 80019fe:	2201      	movs	r2, #1
 8001a00:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a04:	4839      	ldr	r0, [pc, #228]	@ (8001aec <cell11_Temp_03_Set+0x168>)
 8001a06:	f007 fa6d 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001a0a:	200a      	movs	r0, #10
 8001a0c:	f006 fbc2 	bl	8008194 <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8001a10:	2200      	movs	r2, #0
 8001a12:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a16:	4835      	ldr	r0, [pc, #212]	@ (8001aec <cell11_Temp_03_Set+0x168>)
 8001a18:	f007 fa64 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 8001a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a20:	2202      	movs	r2, #2
 8001a22:	4933      	ldr	r1, [pc, #204]	@ (8001af0 <cell11_Temp_03_Set+0x16c>)
 8001a24:	4833      	ldr	r0, [pc, #204]	@ (8001af4 <cell11_Temp_03_Set+0x170>)
 8001a26:	f009 f82a 	bl	800aa7e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a30:	482e      	ldr	r0, [pc, #184]	@ (8001aec <cell11_Temp_03_Set+0x168>)
 8001a32:	f007 fa57 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001a36:	200a      	movs	r0, #10
 8001a38:	f006 fbac 	bl	8008194 <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a42:	482a      	ldr	r0, [pc, #168]	@ (8001aec <cell11_Temp_03_Set+0x168>)
 8001a44:	f007 fa4e 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 8001a48:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	492a      	ldr	r1, [pc, #168]	@ (8001af8 <cell11_Temp_03_Set+0x174>)
 8001a50:	4828      	ldr	r0, [pc, #160]	@ (8001af4 <cell11_Temp_03_Set+0x170>)
 8001a52:	f009 f814 	bl	800aa7e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001a56:	2201      	movs	r2, #1
 8001a58:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a5c:	4823      	ldr	r0, [pc, #140]	@ (8001aec <cell11_Temp_03_Set+0x168>)
 8001a5e:	f007 fa41 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001a62:	200a      	movs	r0, #10
 8001a64:	f006 fb96 	bl	8008194 <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a6e:	481f      	ldr	r0, [pc, #124]	@ (8001aec <cell11_Temp_03_Set+0x168>)
 8001a70:	f007 fa38 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 8001a74:	f107 0108 	add.w	r1, r7, #8
 8001a78:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	481d      	ldr	r0, [pc, #116]	@ (8001af4 <cell11_Temp_03_Set+0x170>)
 8001a80:	f008 fffd 	bl	800aa7e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001a84:	2201      	movs	r2, #1
 8001a86:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a8a:	4818      	ldr	r0, [pc, #96]	@ (8001aec <cell11_Temp_03_Set+0x168>)
 8001a8c:	f007 fa2a 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001a90:	200a      	movs	r0, #10
 8001a92:	f006 fb7f 	bl	8008194 <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8001a96:	2200      	movs	r2, #0
 8001a98:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a9c:	4813      	ldr	r0, [pc, #76]	@ (8001aec <cell11_Temp_03_Set+0x168>)
 8001a9e:	f007 fa21 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	4a14      	ldr	r2, [pc, #80]	@ (8001afc <cell11_Temp_03_Set+0x178>)
 8001aac:	4914      	ldr	r1, [pc, #80]	@ (8001b00 <cell11_Temp_03_Set+0x17c>)
 8001aae:	4811      	ldr	r0, [pc, #68]	@ (8001af4 <cell11_Temp_03_Set+0x170>)
 8001ab0:	f009 fa42 	bl	800af38 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001aba:	480c      	ldr	r0, [pc, #48]	@ (8001aec <cell11_Temp_03_Set+0x168>)
 8001abc:	f007 fa12 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001ac0:	200a      	movs	r0, #10
 8001ac2:	f006 fb67 	bl	8008194 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_03_LED_Pin, GPIO_PIN_RESET);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2140      	movs	r1, #64	@ 0x40
 8001aca:	4807      	ldr	r0, [pc, #28]	@ (8001ae8 <cell11_Temp_03_Set+0x164>)
 8001acc:	f007 fa0a 	bl	8008ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001ad0:	200a      	movs	r0, #10
 8001ad2:	f006 fb5f 	bl	8008194 <HAL_Delay>

}
 8001ad6:	bf00      	nop
 8001ad8:	3750      	adds	r7, #80	@ 0x50
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40490000 	.word	0x40490000
 8001ae4:	40900000 	.word	0x40900000
 8001ae8:	40021c00 	.word	0x40021c00
 8001aec:	40020400 	.word	0x40020400
 8001af0:	200009c0 	.word	0x200009c0
 8001af4:	20001928 	.word	0x20001928
 8001af8:	20000160 	.word	0x20000160
 8001afc:	200009c4 	.word	0x200009c4
 8001b00:	20000164 	.word	0x20000164

08001b04 <Set_Resistance>:
}


void Set_Resistance(uint8_t tempCardId,uint8_t temperature)

{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	460a      	mov	r2, r1
 8001b0e:	71fb      	strb	r3, [r7, #7]
 8001b10:	4613      	mov	r3, r2
 8001b12:	71bb      	strb	r3, [r7, #6]
	switch (tempCardId)
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	2b05      	cmp	r3, #5
 8001b1a:	d84b      	bhi.n	8001bb4 <Set_Resistance+0xb0>
 8001b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8001b24 <Set_Resistance+0x20>)
 8001b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b22:	bf00      	nop
 8001b24:	08001b3d 	.word	0x08001b3d
 8001b28:	08001b51 	.word	0x08001b51
 8001b2c:	08001b65 	.word	0x08001b65
 8001b30:	08001b79 	.word	0x08001b79
 8001b34:	08001b8d 	.word	0x08001b8d
 8001b38:	08001ba1 	.word	0x08001ba1
	{


	case 0x01:
		cell12_Temp_01_Set(temperature);
 8001b3c:	79bb      	ldrb	r3, [r7, #6]
 8001b3e:	ee07 3a90 	vmov	s15, r3
 8001b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b46:	eeb0 0a67 	vmov.f32	s0, s15
 8001b4a:	f7ff fb6f 	bl	800122c <cell12_Temp_01_Set>
		break;
 8001b4e:	e031      	b.n	8001bb4 <Set_Resistance+0xb0>

	case 0x02:
		cell12_Temp_02_Set(temperature);
 8001b50:	79bb      	ldrb	r3, [r7, #6]
 8001b52:	ee07 3a90 	vmov	s15, r3
 8001b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b5a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b5e:	f7ff fc1b 	bl	8001398 <cell12_Temp_02_Set>
		break;
 8001b62:	e027      	b.n	8001bb4 <Set_Resistance+0xb0>

	case 0x03:
		cell12_Temp_03_Set(temperature);
 8001b64:	79bb      	ldrb	r3, [r7, #6]
 8001b66:	ee07 3a90 	vmov	s15, r3
 8001b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b72:	f7ff fcd1 	bl	8001518 <cell12_Temp_03_Set>
		break;
 8001b76:	e01d      	b.n	8001bb4 <Set_Resistance+0xb0>

	case 0x04:
		cell11_Temp_01_Set(temperature);
 8001b78:	79bb      	ldrb	r3, [r7, #6]
 8001b7a:	ee07 3a90 	vmov	s15, r3
 8001b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b82:	eeb0 0a67 	vmov.f32	s0, s15
 8001b86:	f7ff fd7d 	bl	8001684 <cell11_Temp_01_Set>
		break;
 8001b8a:	e013      	b.n	8001bb4 <Set_Resistance+0xb0>

	case 0x05:
		cell11_Temp_02_Set(temperature);
 8001b8c:	79bb      	ldrb	r3, [r7, #6]
 8001b8e:	ee07 3a90 	vmov	s15, r3
 8001b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b96:	eeb0 0a67 	vmov.f32	s0, s15
 8001b9a:	f7ff fe33 	bl	8001804 <cell11_Temp_02_Set>
		break;
 8001b9e:	e009      	b.n	8001bb4 <Set_Resistance+0xb0>

	case 0x06:
		cell11_Temp_03_Set(temperature);
 8001ba0:	79bb      	ldrb	r3, [r7, #6]
 8001ba2:	ee07 3a90 	vmov	s15, r3
 8001ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001baa:	eeb0 0a67 	vmov.f32	s0, s15
 8001bae:	f7ff fee9 	bl	8001984 <cell11_Temp_03_Set>
		break;
 8001bb2:	bf00      	nop

	}


}
 8001bb4:	bf00      	nop
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <u8x8_stm32_gpio_and_delay>:
 */
static uint8_t u8x8_stm32_gpio_and_delay(u8x8_t * const u8x8,
                                           uint8_t msg,
                                           uint8_t arg_int,
                                           void * const arg_ptr)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	607b      	str	r3, [r7, #4]
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	72fb      	strb	r3, [r7, #11]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	72bb      	strb	r3, [r7, #10]
    /* Suppress unused parameter warnings */
    (void)u8x8;
    (void)arg_ptr;

    switch (msg)
 8001bce:	7afb      	ldrb	r3, [r7, #11]
 8001bd0:	2b4b      	cmp	r3, #75	@ 0x4b
 8001bd2:	d01a      	beq.n	8001c0a <u8x8_stm32_gpio_and_delay+0x4e>
 8001bd4:	2b4b      	cmp	r3, #75	@ 0x4b
 8001bd6:	dc1f      	bgt.n	8001c18 <u8x8_stm32_gpio_and_delay+0x5c>
 8001bd8:	2b4a      	cmp	r3, #74	@ 0x4a
 8001bda:	d00f      	beq.n	8001bfc <u8x8_stm32_gpio_and_delay+0x40>
 8001bdc:	2b4a      	cmp	r3, #74	@ 0x4a
 8001bde:	dc1b      	bgt.n	8001c18 <u8x8_stm32_gpio_and_delay+0x5c>
 8001be0:	2b28      	cmp	r3, #40	@ 0x28
 8001be2:	d002      	beq.n	8001bea <u8x8_stm32_gpio_and_delay+0x2e>
 8001be4:	2b29      	cmp	r3, #41	@ 0x29
 8001be6:	d004      	beq.n	8001bf2 <u8x8_stm32_gpio_and_delay+0x36>
        case U8X8_MSG_GPIO_RESET:
            HAL_GPIO_WritePin(DISPLAY_IO_1_GPIO_Port, DISPLAY_IO_1_Pin, (GPIO_PinState)arg_int);
            break;
        default:
            /* No action */
            break;
 8001be8:	e016      	b.n	8001c18 <u8x8_stm32_gpio_and_delay+0x5c>
            HAL_Delay(DISPLAY_UPDATE_DELAY_U32);
 8001bea:	2002      	movs	r0, #2
 8001bec:	f006 fad2 	bl	8008194 <HAL_Delay>
            break;
 8001bf0:	e013      	b.n	8001c1a <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_Delay(arg_int);
 8001bf2:	7abb      	ldrb	r3, [r7, #10]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f006 facd 	bl	8008194 <HAL_Delay>
            break;
 8001bfa:	e00e      	b.n	8001c1a <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_GPIO_WritePin(DISPLAY_IO_2_GPIO_Port, DISPLAY_IO_2_Pin, (GPIO_PinState)arg_int);
 8001bfc:	7abb      	ldrb	r3, [r7, #10]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	2108      	movs	r1, #8
 8001c02:	4808      	ldr	r0, [pc, #32]	@ (8001c24 <u8x8_stm32_gpio_and_delay+0x68>)
 8001c04:	f007 f96e 	bl	8008ee4 <HAL_GPIO_WritePin>
            break;
 8001c08:	e007      	b.n	8001c1a <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_GPIO_WritePin(DISPLAY_IO_1_GPIO_Port, DISPLAY_IO_1_Pin, (GPIO_PinState)arg_int);
 8001c0a:	7abb      	ldrb	r3, [r7, #10]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	2104      	movs	r1, #4
 8001c10:	4804      	ldr	r0, [pc, #16]	@ (8001c24 <u8x8_stm32_gpio_and_delay+0x68>)
 8001c12:	f007 f967 	bl	8008ee4 <HAL_GPIO_WritePin>
            break;
 8001c16:	e000      	b.n	8001c1a <u8x8_stm32_gpio_and_delay+0x5e>
            break;
 8001c18:	bf00      	nop
    }
    return 1U;
 8001c1a:	2301      	movs	r3, #1
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40021800 	.word	0x40021800

08001c28 <u8x8_byte_4wire_hw_spi>:
 */
static uint8_t u8x8_byte_4wire_hw_spi(u8x8_t * const u8x8,
                                      uint8_t msg,
                                      uint8_t arg_int,
                                      void * const arg_ptr)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	607b      	str	r3, [r7, #4]
 8001c32:	460b      	mov	r3, r1
 8001c34:	72fb      	strb	r3, [r7, #11]
 8001c36:	4613      	mov	r3, r2
 8001c38:	72bb      	strb	r3, [r7, #10]
    uint8_t retVal = 1U;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	75fb      	strb	r3, [r7, #23]

    switch (msg)
 8001c3e:	7afb      	ldrb	r3, [r7, #11]
 8001c40:	3b14      	subs	r3, #20
 8001c42:	2b0c      	cmp	r3, #12
 8001c44:	d83e      	bhi.n	8001cc4 <u8x8_byte_4wire_hw_spi+0x9c>
 8001c46:	a201      	add	r2, pc, #4	@ (adr r2, 8001c4c <u8x8_byte_4wire_hw_spi+0x24>)
 8001c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c4c:	08001ccb 	.word	0x08001ccb
 8001c50:	08001cc5 	.word	0x08001cc5
 8001c54:	08001cc5 	.word	0x08001cc5
 8001c58:	08001c81 	.word	0x08001c81
 8001c5c:	08001ca1 	.word	0x08001ca1
 8001c60:	08001cb3 	.word	0x08001cb3
 8001c64:	08001cc5 	.word	0x08001cc5
 8001c68:	08001cc5 	.word	0x08001cc5
 8001c6c:	08001cc5 	.word	0x08001cc5
 8001c70:	08001cc5 	.word	0x08001cc5
 8001c74:	08001cc5 	.word	0x08001cc5
 8001c78:	08001cc5 	.word	0x08001cc5
 8001c7c:	08001c93 	.word	0x08001c93
    {
        case U8X8_MSG_BYTE_SEND:
            (void)HAL_SPI_Transmit(&hspi3, (uint8_t *)arg_ptr, arg_int, SPI_TIMEOUT_U32);
 8001c80:	7abb      	ldrb	r3, [r7, #10]
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001c88:	6879      	ldr	r1, [r7, #4]
 8001c8a:	4813      	ldr	r0, [pc, #76]	@ (8001cd8 <u8x8_byte_4wire_hw_spi+0xb0>)
 8001c8c:	f008 fef7 	bl	800aa7e <HAL_SPI_Transmit>
            break;
 8001c90:	e01c      	b.n	8001ccc <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_INIT:
            break;
        case U8X8_MSG_BYTE_SET_DC:
            HAL_GPIO_WritePin(DISPLAY_IO_2_GPIO_Port, DISPLAY_IO_2_Pin, (GPIO_PinState)arg_int);
 8001c92:	7abb      	ldrb	r3, [r7, #10]
 8001c94:	461a      	mov	r2, r3
 8001c96:	2108      	movs	r1, #8
 8001c98:	4810      	ldr	r0, [pc, #64]	@ (8001cdc <u8x8_byte_4wire_hw_spi+0xb4>)
 8001c9a:	f007 f923 	bl	8008ee4 <HAL_GPIO_WritePin>
            break;
 8001c9e:	e015      	b.n	8001ccc <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_START_TRANSFER:
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, u8x8->display_info->chip_enable_level);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	2104      	movs	r1, #4
 8001caa:	480d      	ldr	r0, [pc, #52]	@ (8001ce0 <u8x8_byte_4wire_hw_spi+0xb8>)
 8001cac:	f007 f91a 	bl	8008ee4 <HAL_GPIO_WritePin>
            break;
 8001cb0:	e00c      	b.n	8001ccc <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_END_TRANSFER:
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, u8x8->display_info->chip_disable_level);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	785b      	ldrb	r3, [r3, #1]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	2104      	movs	r1, #4
 8001cbc:	4808      	ldr	r0, [pc, #32]	@ (8001ce0 <u8x8_byte_4wire_hw_spi+0xb8>)
 8001cbe:	f007 f911 	bl	8008ee4 <HAL_GPIO_WritePin>
            break;
 8001cc2:	e003      	b.n	8001ccc <u8x8_byte_4wire_hw_spi+0xa4>
        default:
            retVal = 0U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	75fb      	strb	r3, [r7, #23]
            break;
 8001cc8:	e000      	b.n	8001ccc <u8x8_byte_4wire_hw_spi+0xa4>
            break;
 8001cca:	bf00      	nop
    }
    return retVal;
 8001ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20001980 	.word	0x20001980
 8001cdc:	40021800 	.word	0x40021800
 8001ce0:	40020c00 	.word	0x40020c00

08001ce4 <Display_Init>:

/**
 * @brief Initializes the display hardware and u8g2 library.
 */
void Display_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
    /* Turn on the backlight */
    HAL_GPIO_WritePin(BACKLIGHT_1_GPIO_Port, BACKLIGHT_1_Pin, GPIO_PIN_SET);
 8001ce8:	2201      	movs	r2, #1
 8001cea:	2110      	movs	r1, #16
 8001cec:	480c      	ldr	r0, [pc, #48]	@ (8001d20 <Display_Init+0x3c>)
 8001cee:	f007 f8f9 	bl	8008ee4 <HAL_GPIO_WritePin>

    /* Setup u8g2 for the ST7565 display.
       Adjust the setup function if your display type differs. */
    u8g2_Setup_st7565_64128n_f(&u8g2, U8G2_R2, u8x8_byte_4wire_hw_spi, u8x8_stm32_gpio_and_delay);
 8001cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8001d24 <Display_Init+0x40>)
 8001cf4:	4a0c      	ldr	r2, [pc, #48]	@ (8001d28 <Display_Init+0x44>)
 8001cf6:	490d      	ldr	r1, [pc, #52]	@ (8001d2c <Display_Init+0x48>)
 8001cf8:	480d      	ldr	r0, [pc, #52]	@ (8001d30 <Display_Init+0x4c>)
 8001cfa:	f000 fa17 	bl	800212c <u8g2_Setup_st7565_64128n_f>
    u8g2_InitDisplay(&u8g2);
 8001cfe:	480c      	ldr	r0, [pc, #48]	@ (8001d30 <Display_Init+0x4c>)
 8001d00:	f001 fe22 	bl	8003948 <u8x8_InitDisplay>
    u8g2_SetPowerSave(&u8g2, 0);
 8001d04:	2100      	movs	r1, #0
 8001d06:	480a      	ldr	r0, [pc, #40]	@ (8001d30 <Display_Init+0x4c>)
 8001d08:	f001 fe2d 	bl	8003966 <u8x8_SetPowerSave>
    u8g2_ClearDisplay(&u8g2);
 8001d0c:	4808      	ldr	r0, [pc, #32]	@ (8001d30 <Display_Init+0x4c>)
 8001d0e:	f000 f9e7 	bl	80020e0 <u8g2_ClearDisplay>
    u8g2_SetContrast(&u8g2, CONTRAST_VALUE_U8);
 8001d12:	2178      	movs	r1, #120	@ 0x78
 8001d14:	4806      	ldr	r0, [pc, #24]	@ (8001d30 <Display_Init+0x4c>)
 8001d16:	f001 fe37 	bl	8003988 <u8x8_SetContrast>
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40021800 	.word	0x40021800
 8001d24:	08001bbd 	.word	0x08001bbd
 8001d28:	08001c29 	.word	0x08001c29
 8001d2c:	0800d768 	.word	0x0800d768
 8001d30:	200009c8 	.word	0x200009c8

08001d34 <Display_MainTitlePage>:
 * @brief Displays the main title page.
 *
 * This function draws the main title page with a logo and text.
 */
void Display_MainTitlePage(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af02      	add	r7, sp, #8
    do
    {
        /* Begin a new page */
        u8g2_FirstPage(&u8g2);
 8001d3a:	4824      	ldr	r0, [pc, #144]	@ (8001dcc <Display_MainTitlePage+0x98>)
 8001d3c:	f000 f98e 	bl	800205c <u8g2_FirstPage>
        do
        {
            /* Draw the logo image */
            u8g2_DrawXBM(&u8g2, 0, 0, 128, 64, logo);
 8001d40:	4b23      	ldr	r3, [pc, #140]	@ (8001dd0 <Display_MainTitlePage+0x9c>)
 8001d42:	9301      	str	r3, [sp, #4]
 8001d44:	2340      	movs	r3, #64	@ 0x40
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	2380      	movs	r3, #128	@ 0x80
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	481f      	ldr	r0, [pc, #124]	@ (8001dcc <Display_MainTitlePage+0x98>)
 8001d50:	f000 f8b6 	bl	8001ec0 <u8g2_DrawXBM>
        }
        while (u8g2_NextPage(&u8g2) != 0U);
 8001d54:	481d      	ldr	r0, [pc, #116]	@ (8001dcc <Display_MainTitlePage+0x98>)
 8001d56:	f000 f995 	bl	8002084 <u8g2_NextPage>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1ef      	bne.n	8001d40 <Display_MainTitlePage+0xc>

        HAL_Delay(PAGE_DELAY_U32);
 8001d60:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d64:	f006 fa16 	bl	8008194 <HAL_Delay>

        /* Clear the buffer and draw title text */
        u8g2_ClearBuffer(&u8g2);
 8001d68:	4818      	ldr	r0, [pc, #96]	@ (8001dcc <Display_MainTitlePage+0x98>)
 8001d6a:	f000 f8ec 	bl	8001f46 <u8g2_ClearBuffer>
        u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 8001d6e:	4919      	ldr	r1, [pc, #100]	@ (8001dd4 <Display_MainTitlePage+0xa0>)
 8001d70:	4816      	ldr	r0, [pc, #88]	@ (8001dcc <Display_MainTitlePage+0x98>)
 8001d72:	f000 ff8b 	bl	8002c8c <u8g2_SetFont>
        u8g2_DrawStr(&u8g2, 42, 16, "VEGA");
 8001d76:	4b18      	ldr	r3, [pc, #96]	@ (8001dd8 <Display_MainTitlePage+0xa4>)
 8001d78:	2210      	movs	r2, #16
 8001d7a:	212a      	movs	r1, #42	@ 0x2a
 8001d7c:	4813      	ldr	r0, [pc, #76]	@ (8001dcc <Display_MainTitlePage+0x98>)
 8001d7e:	f000 fee3 	bl	8002b48 <u8g2_DrawStr>
        u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 8001d82:	4914      	ldr	r1, [pc, #80]	@ (8001dd4 <Display_MainTitlePage+0xa0>)
 8001d84:	4811      	ldr	r0, [pc, #68]	@ (8001dcc <Display_MainTitlePage+0x98>)
 8001d86:	f000 ff81 	bl	8002c8c <u8g2_SetFont>
        u8g2_DrawStr(&u8g2, 6, 33, "INNOVATIONS");
 8001d8a:	4b14      	ldr	r3, [pc, #80]	@ (8001ddc <Display_MainTitlePage+0xa8>)
 8001d8c:	2221      	movs	r2, #33	@ 0x21
 8001d8e:	2106      	movs	r1, #6
 8001d90:	480e      	ldr	r0, [pc, #56]	@ (8001dcc <Display_MainTitlePage+0x98>)
 8001d92:	f000 fed9 	bl	8002b48 <u8g2_DrawStr>
        HAL_Delay(TEXT_DELAY_U32);
 8001d96:	200a      	movs	r0, #10
 8001d98:	f006 f9fc 	bl	8008194 <HAL_Delay>
        u8g2_ClearBuffer(&u8g2);
 8001d9c:	480b      	ldr	r0, [pc, #44]	@ (8001dcc <Display_MainTitlePage+0x98>)
 8001d9e:	f000 f8d2 	bl	8001f46 <u8g2_ClearBuffer>
    }
    while (u8g2_NextPage(&u8g2) != 0U);
 8001da2:	480a      	ldr	r0, [pc, #40]	@ (8001dcc <Display_MainTitlePage+0x98>)
 8001da4:	f000 f96e 	bl	8002084 <u8g2_NextPage>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1c5      	bne.n	8001d3a <Display_MainTitlePage+0x6>

    HAL_Delay(FINAL_PAGE_DELAY_U32);
 8001dae:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001db2:	f006 f9ef 	bl	8008194 <HAL_Delay>

    u8g2_ClearBuffer(&u8g2);
 8001db6:	4805      	ldr	r0, [pc, #20]	@ (8001dcc <Display_MainTitlePage+0x98>)
 8001db8:	f000 f8c5 	bl	8001f46 <u8g2_ClearBuffer>

    HAL_GPIO_WritePin(BACKLIGHT_1_GPIO_Port, BACKLIGHT_1_Pin, GPIO_PIN_RESET);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2110      	movs	r1, #16
 8001dc0:	4807      	ldr	r0, [pc, #28]	@ (8001de0 <Display_MainTitlePage+0xac>)
 8001dc2:	f007 f88f 	bl	8008ee4 <HAL_GPIO_WritePin>
}
 8001dc6:	bf00      	nop
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	200009c8 	.word	0x200009c8
 8001dd0:	20000168 	.word	0x20000168
 8001dd4:	0800cb10 	.word	0x0800cb10
 8001dd8:	0800ca90 	.word	0x0800ca90
 8001ddc:	0800ca98 	.word	0x0800ca98
 8001de0:	40021800 	.word	0x40021800

08001de4 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b088      	sub	sp, #32
 8001de8:	af02      	add	r7, sp, #8
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	4608      	mov	r0, r1
 8001dee:	4611      	mov	r1, r2
 8001df0:	461a      	mov	r2, r3
 8001df2:	4603      	mov	r3, r0
 8001df4:	817b      	strh	r3, [r7, #10]
 8001df6:	460b      	mov	r3, r1
 8001df8:	813b      	strh	r3, [r7, #8]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001e04:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8001e06:	7dbb      	ldrb	r3, [r7, #22]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	bf0c      	ite	eq
 8001e0c:	2301      	moveq	r3, #1
 8001e0e:	2300      	movne	r3, #0
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8001e14:	897a      	ldrh	r2, [r7, #10]
 8001e16:	88fb      	ldrh	r3, [r7, #6]
 8001e18:	4413      	add	r3, r2
 8001e1a:	b298      	uxth	r0, r3
 8001e1c:	893b      	ldrh	r3, [r7, #8]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	893a      	ldrh	r2, [r7, #8]
 8001e24:	8979      	ldrh	r1, [r7, #10]
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	4603      	mov	r3, r0
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f001 f875 	bl	8002f1a <u8g2_IsIntersection>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d040      	beq.n	8001eb8 <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8001e36:	2301      	movs	r3, #1
 8001e38:	75fb      	strb	r3, [r7, #23]
  while(len > 0) {
 8001e3a:	e035      	b.n	8001ea8 <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 8001e3c:	6a3b      	ldr	r3, [r7, #32]
 8001e3e:	781a      	ldrb	r2, [r3, #0]
 8001e40:	7dfb      	ldrb	r3, [r7, #23]
 8001e42:	4013      	ands	r3, r2
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00c      	beq.n	8001e64 <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	7dba      	ldrb	r2, [r7, #22]
 8001e4e:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001e52:	893a      	ldrh	r2, [r7, #8]
 8001e54:	8979      	ldrh	r1, [r7, #10]
 8001e56:	2300      	movs	r3, #0
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f000 ff9e 	bl	8002d9e <u8g2_DrawHVLine>
 8001e62:	e010      	b.n	8001e86 <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10b      	bne.n	8001e86 <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	7d7a      	ldrb	r2, [r7, #21]
 8001e72:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001e76:	893a      	ldrh	r2, [r7, #8]
 8001e78:	8979      	ldrh	r1, [r7, #10]
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	2301      	movs	r3, #1
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f000 ff8c 	bl	8002d9e <u8g2_DrawHVLine>
    }
    x++;
 8001e86:	897b      	ldrh	r3, [r7, #10]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 8001e8c:	7dfb      	ldrb	r3, [r7, #23]
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 8001e92:	7dfb      	ldrb	r3, [r7, #23]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d104      	bne.n	8001ea2 <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	75fb      	strb	r3, [r7, #23]
      b++;
 8001e9c:	6a3b      	ldr	r3, [r7, #32]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	623b      	str	r3, [r7, #32]
    }
    len--;
 8001ea2:	88fb      	ldrh	r3, [r7, #6]
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	80fb      	strh	r3, [r7, #6]
  while(len > 0) {
 8001ea8:	88fb      	ldrh	r3, [r7, #6]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1c6      	bne.n	8001e3c <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	7dba      	ldrb	r2, [r7, #22]
 8001eb2:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
 8001eb6:	e000      	b.n	8001eba <u8g2_DrawHXBM+0xd6>
    return;
 8001eb8:	bf00      	nop
}
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af02      	add	r7, sp, #8
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	4608      	mov	r0, r1
 8001eca:	4611      	mov	r1, r2
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4603      	mov	r3, r0
 8001ed0:	817b      	strh	r3, [r7, #10]
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	813b      	strh	r3, [r7, #8]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 8001ede:	8afb      	ldrh	r3, [r7, #22]
 8001ee0:	3307      	adds	r3, #7
 8001ee2:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 8001ee4:	8afb      	ldrh	r3, [r7, #22]
 8001ee6:	08db      	lsrs	r3, r3, #3
 8001ee8:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001eea:	897a      	ldrh	r2, [r7, #10]
 8001eec:	88fb      	ldrh	r3, [r7, #6]
 8001eee:	4413      	add	r3, r2
 8001ef0:	b298      	uxth	r0, r3
 8001ef2:	893a      	ldrh	r2, [r7, #8]
 8001ef4:	8c3b      	ldrh	r3, [r7, #32]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	893a      	ldrh	r2, [r7, #8]
 8001efc:	8979      	ldrh	r1, [r7, #10]
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	4603      	mov	r3, r0
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f001 f809 	bl	8002f1a <u8g2_IsIntersection>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d017      	beq.n	8001f3e <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8001f0e:	e012      	b.n	8001f36 <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8001f10:	88f8      	ldrh	r0, [r7, #6]
 8001f12:	893a      	ldrh	r2, [r7, #8]
 8001f14:	8979      	ldrh	r1, [r7, #10]
 8001f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f7ff ff61 	bl	8001de4 <u8g2_DrawHXBM>
    bitmap += blen;
 8001f22:	8afb      	ldrh	r3, [r7, #22]
 8001f24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f26:	4413      	add	r3, r2
 8001f28:	627b      	str	r3, [r7, #36]	@ 0x24
    y++;
 8001f2a:	893b      	ldrh	r3, [r7, #8]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	813b      	strh	r3, [r7, #8]
    h--;
 8001f30:	8c3b      	ldrh	r3, [r7, #32]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 8001f36:	8c3b      	ldrh	r3, [r7, #32]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1e9      	bne.n	8001f10 <u8g2_DrawXBM+0x50>
 8001f3c:	e000      	b.n	8001f40 <u8g2_DrawXBM+0x80>
    return;
 8001f3e:	bf00      	nop
  }
}
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b084      	sub	sp, #16
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	7c1b      	ldrb	r3, [r3, #16]
 8001f54:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	fb02 f303 	mul.w	r3, r2, r3
 8001f64:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	2100      	movs	r1, #0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f00a fcf1 	bl	800c95c <memset>
}
 8001f7a:	bf00      	nop
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b086      	sub	sp, #24
 8001f86:	af02      	add	r7, sp, #8
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	70fb      	strb	r3, [r7, #3]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	7c1b      	ldrb	r3, [r3, #16]
 8001f98:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8001f9a:	78fb      	ldrb	r3, [r7, #3]
 8001f9c:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fa2:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	89ba      	ldrh	r2, [r7, #12]
 8001faa:	fb12 f303 	smulbb	r3, r2, r3
 8001fae:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8001fb0:	89bb      	ldrh	r3, [r7, #12]
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8001fb6:	89bb      	ldrh	r3, [r7, #12]
 8001fb8:	68ba      	ldr	r2, [r7, #8]
 8001fba:	4413      	add	r3, r2
 8001fbc:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001fbe:	7bf9      	ldrb	r1, [r7, #15]
 8001fc0:	78ba      	ldrb	r2, [r7, #2]
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	2100      	movs	r1, #0
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f001 fc8b 	bl	80038e6 <u8x8_DrawTile>
}
 8001fd0:	bf00      	nop
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001fea:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001ff2:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	7c5b      	ldrb	r3, [r3, #17]
 8001ffa:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8001ffc:	7bba      	ldrb	r2, [r7, #14]
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
 8002000:	4619      	mov	r1, r3
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff ffbd 	bl	8001f82 <u8g2_send_tile_row>
    src_row++;
 8002008:	7bfb      	ldrb	r3, [r7, #15]
 800200a:	3301      	adds	r3, #1
 800200c:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 800200e:	7bbb      	ldrb	r3, [r7, #14]
 8002010:	3301      	adds	r3, #1
 8002012:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8002014:	7bfa      	ldrb	r2, [r7, #15]
 8002016:	7b7b      	ldrb	r3, [r7, #13]
 8002018:	429a      	cmp	r2, r3
 800201a:	d203      	bcs.n	8002024 <u8g2_send_buffer+0x4c>
 800201c:	7bba      	ldrb	r2, [r7, #14]
 800201e:	7b3b      	ldrb	r3, [r7, #12]
 8002020:	429a      	cmp	r2, r3
 8002022:	d3eb      	bcc.n	8001ffc <u8g2_send_buffer+0x24>
}
 8002024:	bf00      	nop
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	78fa      	ldrb	r2, [r7, #3]
 800203c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  u8g2->cb->update_dimension(u8g2);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	4798      	blx	r3
}
 8002054:	bf00      	nop
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800206a:	2b00      	cmp	r3, #0
 800206c:	d002      	beq.n	8002074 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff ff69 	bl	8001f46 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8002074:	2100      	movs	r1, #0
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7ff ffd8 	bl	800202c <u8g2_SetBufferCurrTileRow>
}
 800207c:	bf00      	nop
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7ff ffa3 	bl	8001fd8 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002098:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
 80020a2:	4413      	add	r3, r2
 80020a4:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	7c5b      	ldrb	r3, [r3, #17]
 80020ac:	7bfa      	ldrb	r2, [r7, #15]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d304      	bcc.n	80020bc <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f001 fc79 	bl	80039aa <u8x8_RefreshDisplay>
    return 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	e00d      	b.n	80020d8 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d002      	beq.n	80020cc <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff ff3d 	bl	8001f46 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
 80020ce:	4619      	mov	r1, r3
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff ffab 	bl	800202c <u8g2_SetBufferCurrTileRow>
  return 1;
 80020d6:	2301      	movs	r3, #1
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff ffb7 	bl	800205c <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff ffc8 	bl	8002084 <u8g2_NextPage>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f9      	bne.n	80020ee <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 80020fa:	2100      	movs	r1, #0
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff ff95 	bl	800202c <u8g2_SetBufferCurrTileRow>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2208      	movs	r2, #8
 8002118:	701a      	strb	r2, [r3, #0]
  return buf;
 800211a:	4b03      	ldr	r3, [pc, #12]	@ (8002128 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	20000a5c 	.word	0x20000a5c

0800212c <u8g2_Setup_st7565_64128n_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_lm6063, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_64128n_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b088      	sub	sp, #32
 8002130:	af02      	add	r7, sp, #8
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
 8002138:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_64128n, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a0b      	ldr	r2, [pc, #44]	@ (8002170 <u8g2_Setup_st7565_64128n_f+0x44>)
 8002142:	490c      	ldr	r1, [pc, #48]	@ (8002174 <u8g2_Setup_st7565_64128n_f+0x48>)
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f001 fc91 	bl	8003a6c <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 800214a:	f107 0313 	add.w	r3, r7, #19
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff ffdc 	bl	800210c <u8g2_m_16_8_f>
 8002154:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8002156:	7cfa      	ldrb	r2, [r7, #19]
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <u8g2_Setup_st7565_64128n_f+0x4c>)
 800215e:	6979      	ldr	r1, [r7, #20]
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f000 ffc4 	bl	80030ee <u8g2_SetupBuffer>
}
 8002166:	bf00      	nop
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	08003601 	.word	0x08003601
 8002174:	080037a1 	.word	0x080037a1
 8002178:	08002f71 	.word	0x08002f71

0800217c <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8002188:	78fb      	ldrb	r3, [r7, #3]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	4413      	add	r3, r2
 800218e:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	781b      	ldrb	r3, [r3, #0]
}
 8002194:	4618      	mov	r0, r3
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	460b      	mov	r3, r1
 80021aa:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 80021ac:	78fb      	ldrb	r3, [r7, #3]
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	81fb      	strh	r3, [r7, #14]
    font++;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	3301      	adds	r3, #1
 80021be:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80021c0:	89fb      	ldrh	r3, [r7, #14]
 80021c2:	021b      	lsls	r3, r3, #8
 80021c4:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	461a      	mov	r2, r3
 80021cc:	89fb      	ldrh	r3, [r7, #14]
 80021ce:	4413      	add	r3, r2
 80021d0:	81fb      	strh	r3, [r7, #14]
    return pos;
 80021d2:	89fb      	ldrh	r3, [r7, #14]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80021ea:	2100      	movs	r1, #0
 80021ec:	6838      	ldr	r0, [r7, #0]
 80021ee:	f7ff ffc5 	bl	800217c <u8g2_font_get_byte>
 80021f2:	4603      	mov	r3, r0
 80021f4:	461a      	mov	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80021fa:	2101      	movs	r1, #1
 80021fc:	6838      	ldr	r0, [r7, #0]
 80021fe:	f7ff ffbd 	bl	800217c <u8g2_font_get_byte>
 8002202:	4603      	mov	r3, r0
 8002204:	461a      	mov	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 800220a:	2102      	movs	r1, #2
 800220c:	6838      	ldr	r0, [r7, #0]
 800220e:	f7ff ffb5 	bl	800217c <u8g2_font_get_byte>
 8002212:	4603      	mov	r3, r0
 8002214:	461a      	mov	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800221a:	2103      	movs	r1, #3
 800221c:	6838      	ldr	r0, [r7, #0]
 800221e:	f7ff ffad 	bl	800217c <u8g2_font_get_byte>
 8002222:	4603      	mov	r3, r0
 8002224:	461a      	mov	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800222a:	2104      	movs	r1, #4
 800222c:	6838      	ldr	r0, [r7, #0]
 800222e:	f7ff ffa5 	bl	800217c <u8g2_font_get_byte>
 8002232:	4603      	mov	r3, r0
 8002234:	461a      	mov	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800223a:	2105      	movs	r1, #5
 800223c:	6838      	ldr	r0, [r7, #0]
 800223e:	f7ff ff9d 	bl	800217c <u8g2_font_get_byte>
 8002242:	4603      	mov	r3, r0
 8002244:	461a      	mov	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800224a:	2106      	movs	r1, #6
 800224c:	6838      	ldr	r0, [r7, #0]
 800224e:	f7ff ff95 	bl	800217c <u8g2_font_get_byte>
 8002252:	4603      	mov	r3, r0
 8002254:	461a      	mov	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800225a:	2107      	movs	r1, #7
 800225c:	6838      	ldr	r0, [r7, #0]
 800225e:	f7ff ff8d 	bl	800217c <u8g2_font_get_byte>
 8002262:	4603      	mov	r3, r0
 8002264:	461a      	mov	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800226a:	2108      	movs	r1, #8
 800226c:	6838      	ldr	r0, [r7, #0]
 800226e:	f7ff ff85 	bl	800217c <u8g2_font_get_byte>
 8002272:	4603      	mov	r3, r0
 8002274:	461a      	mov	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800227a:	2109      	movs	r1, #9
 800227c:	6838      	ldr	r0, [r7, #0]
 800227e:	f7ff ff7d 	bl	800217c <u8g2_font_get_byte>
 8002282:	4603      	mov	r3, r0
 8002284:	b25a      	sxtb	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800228a:	210a      	movs	r1, #10
 800228c:	6838      	ldr	r0, [r7, #0]
 800228e:	f7ff ff75 	bl	800217c <u8g2_font_get_byte>
 8002292:	4603      	mov	r3, r0
 8002294:	b25a      	sxtb	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 800229a:	210b      	movs	r1, #11
 800229c:	6838      	ldr	r0, [r7, #0]
 800229e:	f7ff ff6d 	bl	800217c <u8g2_font_get_byte>
 80022a2:	4603      	mov	r3, r0
 80022a4:	b25a      	sxtb	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80022aa:	210c      	movs	r1, #12
 80022ac:	6838      	ldr	r0, [r7, #0]
 80022ae:	f7ff ff65 	bl	800217c <u8g2_font_get_byte>
 80022b2:	4603      	mov	r3, r0
 80022b4:	b25a      	sxtb	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80022ba:	210d      	movs	r1, #13
 80022bc:	6838      	ldr	r0, [r7, #0]
 80022be:	f7ff ff5d 	bl	800217c <u8g2_font_get_byte>
 80022c2:	4603      	mov	r3, r0
 80022c4:	b25a      	sxtb	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80022ca:	210e      	movs	r1, #14
 80022cc:	6838      	ldr	r0, [r7, #0]
 80022ce:	f7ff ff55 	bl	800217c <u8g2_font_get_byte>
 80022d2:	4603      	mov	r3, r0
 80022d4:	b25a      	sxtb	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80022da:	210f      	movs	r1, #15
 80022dc:	6838      	ldr	r0, [r7, #0]
 80022de:	f7ff ff4d 	bl	800217c <u8g2_font_get_byte>
 80022e2:	4603      	mov	r3, r0
 80022e4:	b25a      	sxtb	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80022ea:	2110      	movs	r1, #16
 80022ec:	6838      	ldr	r0, [r7, #0]
 80022ee:	f7ff ff45 	bl	800217c <u8g2_font_get_byte>
 80022f2:	4603      	mov	r3, r0
 80022f4:	b25a      	sxtb	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80022fa:	2111      	movs	r1, #17
 80022fc:	6838      	ldr	r0, [r7, #0]
 80022fe:	f7ff ff4f 	bl	80021a0 <u8g2_font_get_word>
 8002302:	4603      	mov	r3, r0
 8002304:	461a      	mov	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800230a:	2113      	movs	r1, #19
 800230c:	6838      	ldr	r0, [r7, #0]
 800230e:	f7ff ff47 	bl	80021a0 <u8g2_font_get_word>
 8002312:	4603      	mov	r3, r0
 8002314:	461a      	mov	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800231a:	2115      	movs	r1, #21
 800231c:	6838      	ldr	r0, [r7, #0]
 800231e:	f7ff ff3f 	bl	80021a0 <u8g2_font_get_word>
 8002322:	4603      	mov	r3, r0
 8002324:	461a      	mov	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	82da      	strh	r2, [r3, #22]
#endif
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8002332:	b480      	push	{r7}
 8002334:	b085      	sub	sp, #20
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	460b      	mov	r3, r1
 800233c:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	7b1b      	ldrb	r3, [r3, #12]
 8002342:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 800234c:	7bfa      	ldrb	r2, [r7, #15]
 800234e:	7b7b      	ldrb	r3, [r7, #13]
 8002350:	fa42 f303 	asr.w	r3, r2, r3
 8002354:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8002356:	7b7b      	ldrb	r3, [r7, #13]
 8002358:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800235a:	7bba      	ldrb	r2, [r7, #14]
 800235c:	78fb      	ldrb	r3, [r7, #3]
 800235e:	4413      	add	r3, r2
 8002360:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8002362:	7bbb      	ldrb	r3, [r7, #14]
 8002364:	2b07      	cmp	r3, #7
 8002366:	d91a      	bls.n	800239e <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8002368:	2308      	movs	r3, #8
 800236a:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 800236c:	7b3a      	ldrb	r2, [r7, #12]
 800236e:	7b7b      	ldrb	r3, [r7, #13]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	461a      	mov	r2, r3
 8002386:	7b3b      	ldrb	r3, [r7, #12]
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	b25a      	sxtb	r2, r3
 800238e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002392:	4313      	orrs	r3, r2
 8002394:	b25b      	sxtb	r3, r3
 8002396:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8002398:	7bbb      	ldrb	r3, [r7, #14]
 800239a:	3b08      	subs	r3, #8
 800239c:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 800239e:	78fb      	ldrb	r3, [r7, #3]
 80023a0:	f04f 32ff 	mov.w	r2, #4294967295
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	43db      	mvns	r3, r3
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
 80023b0:	4013      	ands	r3, r2
 80023b2:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	7bba      	ldrb	r2, [r7, #14]
 80023b8:	731a      	strb	r2, [r3, #12]
  return val;
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 80023d4:	78fb      	ldrb	r3, [r7, #3]
 80023d6:	4619      	mov	r1, r3
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff ffaa 	bl	8002332 <u8g2_font_decode_get_unsigned_bits>
 80023de:	4603      	mov	r3, r0
 80023e0:	73fb      	strb	r3, [r7, #15]
  d = 1;
 80023e2:	2301      	movs	r3, #1
 80023e4:	73bb      	strb	r3, [r7, #14]
  cnt--;
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	3b01      	subs	r3, #1
 80023ea:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 80023ec:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80023f0:	78fb      	ldrb	r3, [r7, #3]
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	73bb      	strb	r3, [r7, #14]
  v -= d;
 80023f8:	7bfa      	ldrb	r2, [r7, #15]
 80023fa:	7bbb      	ldrb	r3, [r7, #14]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	73fb      	strb	r3, [r7, #15]
  return v;
 8002402:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 800240e:	b490      	push	{r4, r7}
 8002410:	b082      	sub	sp, #8
 8002412:	af00      	add	r7, sp, #0
 8002414:	4604      	mov	r4, r0
 8002416:	4608      	mov	r0, r1
 8002418:	4611      	mov	r1, r2
 800241a:	461a      	mov	r2, r3
 800241c:	4623      	mov	r3, r4
 800241e:	80fb      	strh	r3, [r7, #6]
 8002420:	4603      	mov	r3, r0
 8002422:	717b      	strb	r3, [r7, #5]
 8002424:	460b      	mov	r3, r1
 8002426:	713b      	strb	r3, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 800242c:	78fb      	ldrb	r3, [r7, #3]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d014      	beq.n	800245c <u8g2_add_vector_y+0x4e>
 8002432:	2b02      	cmp	r3, #2
 8002434:	dc19      	bgt.n	800246a <u8g2_add_vector_y+0x5c>
 8002436:	2b00      	cmp	r3, #0
 8002438:	d002      	beq.n	8002440 <u8g2_add_vector_y+0x32>
 800243a:	2b01      	cmp	r3, #1
 800243c:	d007      	beq.n	800244e <u8g2_add_vector_y+0x40>
 800243e:	e014      	b.n	800246a <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8002440:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002444:	b29a      	uxth	r2, r3
 8002446:	88fb      	ldrh	r3, [r7, #6]
 8002448:	4413      	add	r3, r2
 800244a:	80fb      	strh	r3, [r7, #6]
      break;
 800244c:	e014      	b.n	8002478 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 800244e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002452:	b29a      	uxth	r2, r3
 8002454:	88fb      	ldrh	r3, [r7, #6]
 8002456:	4413      	add	r3, r2
 8002458:	80fb      	strh	r3, [r7, #6]
      break;
 800245a:	e00d      	b.n	8002478 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 800245c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002460:	b29b      	uxth	r3, r3
 8002462:	88fa      	ldrh	r2, [r7, #6]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	80fb      	strh	r3, [r7, #6]
      break;
 8002468:	e006      	b.n	8002478 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 800246a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800246e:	b29b      	uxth	r3, r3
 8002470:	88fa      	ldrh	r2, [r7, #6]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	80fb      	strh	r3, [r7, #6]
      break;      
 8002476:	bf00      	nop
  }
  return dy;
 8002478:	88fb      	ldrh	r3, [r7, #6]
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bc90      	pop	{r4, r7}
 8002482:	4770      	bx	lr

08002484 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8002484:	b490      	push	{r4, r7}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	4604      	mov	r4, r0
 800248c:	4608      	mov	r0, r1
 800248e:	4611      	mov	r1, r2
 8002490:	461a      	mov	r2, r3
 8002492:	4623      	mov	r3, r4
 8002494:	80fb      	strh	r3, [r7, #6]
 8002496:	4603      	mov	r3, r0
 8002498:	717b      	strb	r3, [r7, #5]
 800249a:	460b      	mov	r3, r1
 800249c:	713b      	strb	r3, [r7, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80024a2:	78fb      	ldrb	r3, [r7, #3]
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d014      	beq.n	80024d2 <u8g2_add_vector_x+0x4e>
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	dc19      	bgt.n	80024e0 <u8g2_add_vector_x+0x5c>
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d002      	beq.n	80024b6 <u8g2_add_vector_x+0x32>
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d007      	beq.n	80024c4 <u8g2_add_vector_x+0x40>
 80024b4:	e014      	b.n	80024e0 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 80024b6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	88fb      	ldrh	r3, [r7, #6]
 80024be:	4413      	add	r3, r2
 80024c0:	80fb      	strh	r3, [r7, #6]
      break;
 80024c2:	e014      	b.n	80024ee <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 80024c4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	88fa      	ldrh	r2, [r7, #6]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	80fb      	strh	r3, [r7, #6]
      break;
 80024d0:	e00d      	b.n	80024ee <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 80024d2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	88fa      	ldrh	r2, [r7, #6]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	80fb      	strh	r3, [r7, #6]
      break;
 80024de:	e006      	b.n	80024ee <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 80024e0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	88fb      	ldrh	r3, [r7, #6]
 80024e8:	4413      	add	r3, r2
 80024ea:	80fb      	strh	r3, [r7, #6]
      break;      
 80024ec:	bf00      	nop
  }
  return dx;
 80024ee:	88fb      	ldrh	r3, [r7, #6]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc90      	pop	{r4, r7}
 80024f8:	4770      	bx	lr

080024fa <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b088      	sub	sp, #32
 80024fe:	af02      	add	r7, sp, #8
 8002500:	6078      	str	r0, [r7, #4]
 8002502:	460b      	mov	r3, r1
 8002504:	70fb      	strb	r3, [r7, #3]
 8002506:	4613      	mov	r3, r2
 8002508:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3360      	adds	r3, #96	@ 0x60
 800250e:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8002510:	78fb      	ldrb	r3, [r7, #3]
 8002512:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800251a:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002522:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800252a:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 800252c:	7bfa      	ldrb	r2, [r7, #15]
 800252e:	7d7b      	ldrb	r3, [r7, #21]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8002534:	7bfb      	ldrb	r3, [r7, #15]
 8002536:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8002538:	7dfa      	ldrb	r2, [r7, #23]
 800253a:	7bfb      	ldrb	r3, [r7, #15]
 800253c:	429a      	cmp	r2, r3
 800253e:	d201      	bcs.n	8002544 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8002540:	7dfb      	ldrb	r3, [r7, #23]
 8002542:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	889b      	ldrh	r3, [r3, #4]
 8002548:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	88db      	ldrh	r3, [r3, #6]
 800254e:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8002550:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8002554:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	7c1b      	ldrb	r3, [r3, #16]
 800255c:	89b8      	ldrh	r0, [r7, #12]
 800255e:	f7ff ff91 	bl	8002484 <u8g2_add_vector_x>
 8002562:	4603      	mov	r3, r0
 8002564:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8002566:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800256a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	7c1b      	ldrb	r3, [r3, #16]
 8002572:	8978      	ldrh	r0, [r7, #10]
 8002574:	f7ff ff4b 	bl	800240e <u8g2_add_vector_y>
 8002578:	4603      	mov	r3, r0
 800257a:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 800257c:	78bb      	ldrb	r3, [r7, #2]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d010      	beq.n	80025a4 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	7b9a      	ldrb	r2, [r3, #14]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 800258c:	7dbb      	ldrb	r3, [r7, #22]
 800258e:	b298      	uxth	r0, r3
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	7c1b      	ldrb	r3, [r3, #16]
 8002594:	897a      	ldrh	r2, [r7, #10]
 8002596:	89b9      	ldrh	r1, [r7, #12]
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	4603      	mov	r3, r0
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 fbfe 	bl	8002d9e <u8g2_DrawHVLine>
 80025a2:	e013      	b.n	80025cc <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	7b5b      	ldrb	r3, [r3, #13]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10f      	bne.n	80025cc <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	7bda      	ldrb	r2, [r3, #15]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 80025b6:	7dbb      	ldrb	r3, [r7, #22]
 80025b8:	b298      	uxth	r0, r3
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	7c1b      	ldrb	r3, [r3, #16]
 80025be:	897a      	ldrh	r2, [r7, #10]
 80025c0:	89b9      	ldrh	r1, [r7, #12]
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	4603      	mov	r3, r0
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 fbe9 	bl	8002d9e <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 80025cc:	7dfa      	ldrb	r2, [r7, #23]
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d309      	bcc.n	80025e8 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 80025d4:	7dfa      	ldrb	r2, [r7, #23]
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 80025dc:	2300      	movs	r3, #0
 80025de:	757b      	strb	r3, [r7, #21]
    ly++;
 80025e0:	7d3b      	ldrb	r3, [r7, #20]
 80025e2:	3301      	adds	r3, #1
 80025e4:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 80025e6:	e79d      	b.n	8002524 <u8g2_font_decode_len+0x2a>
      break;
 80025e8:	bf00      	nop
  }
  lx += cnt;
 80025ea:	7d7a      	ldrb	r2, [r7, #21]
 80025ec:	7dfb      	ldrb	r3, [r7, #23]
 80025ee:	4413      	add	r3, r2
 80025f0:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 80025f2:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 80025fa:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	725a      	strb	r2, [r3, #9]
}
 8002602:	bf00      	nop
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b084      	sub	sp, #16
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
 8002612:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3360      	adds	r3, #96	@ 0x60
 8002618:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 800262c:	4619      	mov	r1, r3
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f7ff fe7f 	bl	8002332 <u8g2_font_decode_get_unsigned_bits>
 8002634:	4603      	mov	r3, r0
 8002636:	b25a      	sxtb	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8002642:	4619      	mov	r1, r3
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f7ff fe74 	bl	8002332 <u8g2_font_decode_get_unsigned_bits>
 800264a:	4603      	mov	r3, r0
 800264c:	b25a      	sxtb	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	7b9b      	ldrb	r3, [r3, #14]
 8002660:	2b00      	cmp	r3, #0
 8002662:	bf0c      	ite	eq
 8002664:	2301      	moveq	r3, #1
 8002666:	2300      	movne	r3, #0
 8002668:	b2db      	uxtb	r3, r3
 800266a:	461a      	mov	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	73da      	strb	r2, [r3, #15]
}
 8002670:	bf00      	nop
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08a      	sub	sp, #40	@ 0x28
 800267c:	af02      	add	r7, sp, #8
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	3360      	adds	r3, #96	@ 0x60
 8002686:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8002688:	6839      	ldr	r1, [r7, #0]
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff ffbd 	bl	800260a <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 8002696:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 800269e:	4619      	mov	r1, r3
 80026a0:	6978      	ldr	r0, [r7, #20]
 80026a2:	f7ff fe91 	bl	80023c8 <u8g2_font_decode_get_signed_bits>
 80026a6:	4603      	mov	r3, r0
 80026a8:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 80026b0:	4619      	mov	r1, r3
 80026b2:	6978      	ldr	r0, [r7, #20]
 80026b4:	f7ff fe88 	bl	80023c8 <u8g2_font_decode_get_signed_bits>
 80026b8:	4603      	mov	r3, r0
 80026ba:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80026c2:	4619      	mov	r1, r3
 80026c4:	6978      	ldr	r0, [r7, #20]
 80026c6:	f7ff fe7f 	bl	80023c8 <u8g2_font_decode_get_signed_bits>
 80026ca:	4603      	mov	r3, r0
 80026cc:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f340 80d7 	ble.w	8002888 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	8898      	ldrh	r0, [r3, #4]
 80026de:	7cfa      	ldrb	r2, [r7, #19]
 80026e0:	7c7b      	ldrb	r3, [r7, #17]
 80026e2:	4413      	add	r3, r2
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	425b      	negs	r3, r3
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	b25a      	sxtb	r2, r3
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	7c1b      	ldrb	r3, [r3, #16]
 80026f0:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80026f4:	f7ff fec6 	bl	8002484 <u8g2_add_vector_x>
 80026f8:	4603      	mov	r3, r0
 80026fa:	461a      	mov	r2, r3
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	88d8      	ldrh	r0, [r3, #6]
 8002704:	7cfa      	ldrb	r2, [r7, #19]
 8002706:	7c7b      	ldrb	r3, [r7, #17]
 8002708:	4413      	add	r3, r2
 800270a:	b2db      	uxtb	r3, r3
 800270c:	425b      	negs	r3, r3
 800270e:	b2db      	uxtb	r3, r3
 8002710:	b25a      	sxtb	r2, r3
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	7c1b      	ldrb	r3, [r3, #16]
 8002716:	f997 1012 	ldrsb.w	r1, [r7, #18]
 800271a:	f7ff fe78 	bl	800240e <u8g2_add_vector_y>
 800271e:	4603      	mov	r3, r0
 8002720:	461a      	mov	r2, r3
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	889b      	ldrh	r3, [r3, #4]
 800272a:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	88db      	ldrh	r3, [r3, #6]
 8002730:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8002732:	8bfb      	ldrh	r3, [r7, #30]
 8002734:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 8002736:	8b7b      	ldrh	r3, [r7, #26]
 8002738:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	7c1b      	ldrb	r3, [r3, #16]
 800273e:	2b03      	cmp	r3, #3
 8002740:	d85a      	bhi.n	80027f8 <u8g2_font_decode_glyph+0x180>
 8002742:	a201      	add	r2, pc, #4	@ (adr r2, 8002748 <u8g2_font_decode_glyph+0xd0>)
 8002744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002748:	08002759 	.word	0x08002759
 800274c:	08002775 	.word	0x08002775
 8002750:	0800279d 	.word	0x0800279d
 8002754:	080027d1 	.word	0x080027d1
      {
	case 0:
	    x1 += decode->glyph_width;
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800275e:	b29a      	uxth	r2, r3
 8002760:	8bbb      	ldrh	r3, [r7, #28]
 8002762:	4413      	add	r3, r2
 8002764:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8002766:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800276a:	b29a      	uxth	r2, r3
 800276c:	8b3b      	ldrh	r3, [r7, #24]
 800276e:	4413      	add	r3, r2
 8002770:	833b      	strh	r3, [r7, #24]
	    break;
 8002772:	e041      	b.n	80027f8 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8002774:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002778:	b29b      	uxth	r3, r3
 800277a:	8bfa      	ldrh	r2, [r7, #30]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8002780:	8bfb      	ldrh	r3, [r7, #30]
 8002782:	3301      	adds	r3, #1
 8002784:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8002786:	8bbb      	ldrh	r3, [r7, #28]
 8002788:	3301      	adds	r3, #1
 800278a:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002792:	b29a      	uxth	r2, r3
 8002794:	8b3b      	ldrh	r3, [r7, #24]
 8002796:	4413      	add	r3, r2
 8002798:	833b      	strh	r3, [r7, #24]
	    break;
 800279a:	e02d      	b.n	80027f8 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	8bfa      	ldrh	r2, [r7, #30]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80027aa:	8bfb      	ldrh	r3, [r7, #30]
 80027ac:	3301      	adds	r3, #1
 80027ae:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80027b0:	8bbb      	ldrh	r3, [r7, #28]
 80027b2:	3301      	adds	r3, #1
 80027b4:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 80027b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	8b7a      	ldrh	r2, [r7, #26]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80027c2:	8b7b      	ldrh	r3, [r7, #26]
 80027c4:	3301      	adds	r3, #1
 80027c6:	837b      	strh	r3, [r7, #26]
	    y1++;
 80027c8:	8b3b      	ldrh	r3, [r7, #24]
 80027ca:	3301      	adds	r3, #1
 80027cc:	833b      	strh	r3, [r7, #24]
	    break;	  
 80027ce:	e013      	b.n	80027f8 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 80027d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	8bbb      	ldrh	r3, [r7, #28]
 80027d8:	4413      	add	r3, r2
 80027da:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	8b7a      	ldrh	r2, [r7, #26]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80027ea:	8b7b      	ldrh	r3, [r7, #26]
 80027ec:	3301      	adds	r3, #1
 80027ee:	837b      	strh	r3, [r7, #26]
	    y1++;
 80027f0:	8b3b      	ldrh	r3, [r7, #24]
 80027f2:	3301      	adds	r3, #1
 80027f4:	833b      	strh	r3, [r7, #24]
	    break;	  
 80027f6:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 80027f8:	8bb8      	ldrh	r0, [r7, #28]
 80027fa:	8b7a      	ldrh	r2, [r7, #26]
 80027fc:	8bf9      	ldrh	r1, [r7, #30]
 80027fe:	8b3b      	ldrh	r3, [r7, #24]
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	4603      	mov	r3, r0
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 fb88 	bl	8002f1a <u8g2_IsIntersection>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d102      	bne.n	8002816 <u8g2_font_decode_glyph+0x19e>
	return d;
 8002810:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8002814:	e03a      	b.n	800288c <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	2200      	movs	r2, #0
 800281a:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	2200      	movs	r2, #0
 8002820:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8002828:	4619      	mov	r1, r3
 800282a:	6978      	ldr	r0, [r7, #20]
 800282c:	f7ff fd81 	bl	8002332 <u8g2_font_decode_get_unsigned_bits>
 8002830:	4603      	mov	r3, r0
 8002832:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 800283a:	4619      	mov	r1, r3
 800283c:	6978      	ldr	r0, [r7, #20]
 800283e:	f7ff fd78 	bl	8002332 <u8g2_font_decode_get_unsigned_bits>
 8002842:	4603      	mov	r3, r0
 8002844:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8002846:	7bfb      	ldrb	r3, [r7, #15]
 8002848:	2200      	movs	r2, #0
 800284a:	4619      	mov	r1, r3
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff fe54 	bl	80024fa <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8002852:	7bbb      	ldrb	r3, [r7, #14]
 8002854:	2201      	movs	r2, #1
 8002856:	4619      	mov	r1, r3
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f7ff fe4e 	bl	80024fa <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 800285e:	2101      	movs	r1, #1
 8002860:	6978      	ldr	r0, [r7, #20]
 8002862:	f7ff fd66 	bl	8002332 <u8g2_font_decode_get_unsigned_bits>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1ec      	bne.n	8002846 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002872:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8002876:	429a      	cmp	r2, r3
 8002878:	dd00      	ble.n	800287c <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800287a:	e7d2      	b.n	8002822 <u8g2_font_decode_glyph+0x1aa>
	break;
 800287c:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	7b9a      	ldrb	r2, [r3, #14]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  }
  return d;
 8002888:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3720      	adds	r7, #32
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a4:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	3317      	adds	r3, #23
 80028aa:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 80028ac:	887b      	ldrh	r3, [r7, #2]
 80028ae:	2bff      	cmp	r3, #255	@ 0xff
 80028b0:	d82a      	bhi.n	8002908 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 80028b2:	887b      	ldrh	r3, [r7, #2]
 80028b4:	2b60      	cmp	r3, #96	@ 0x60
 80028b6:	d907      	bls.n	80028c8 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 80028be:	461a      	mov	r2, r3
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	4413      	add	r3, r2
 80028c4:	617b      	str	r3, [r7, #20]
 80028c6:	e009      	b.n	80028dc <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 80028c8:	887b      	ldrh	r3, [r7, #2]
 80028ca:	2b40      	cmp	r3, #64	@ 0x40
 80028cc:	d906      	bls.n	80028dc <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 80028d4:	461a      	mov	r2, r3
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	4413      	add	r3, r2
 80028da:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	3301      	adds	r3, #1
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d04e      	beq.n	8002984 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	461a      	mov	r2, r3
 80028ec:	887b      	ldrh	r3, [r7, #2]
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d102      	bne.n	80028f8 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	3302      	adds	r3, #2
 80028f6:	e049      	b.n	800298c <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	3301      	adds	r3, #1
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	461a      	mov	r2, r3
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	4413      	add	r3, r2
 8002904:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8002906:	e7e9      	b.n	80028dc <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 800290e:	461a      	mov	r2, r3
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	4413      	add	r3, r2
 8002914:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 800291a:	2100      	movs	r1, #0
 800291c:	6938      	ldr	r0, [r7, #16]
 800291e:	f7ff fc3f 	bl	80021a0 <u8g2_font_get_word>
 8002922:	4603      	mov	r3, r0
 8002924:	461a      	mov	r2, r3
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	4413      	add	r3, r2
 800292a:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 800292c:	2102      	movs	r1, #2
 800292e:	6938      	ldr	r0, [r7, #16]
 8002930:	f7ff fc36 	bl	80021a0 <u8g2_font_get_word>
 8002934:	4603      	mov	r3, r0
 8002936:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	3304      	adds	r3, #4
 800293c:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 800293e:	89fa      	ldrh	r2, [r7, #14]
 8002940:	887b      	ldrh	r3, [r7, #2]
 8002942:	429a      	cmp	r2, r3
 8002944:	d3e9      	bcc.n	800291a <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 800294c:	89fb      	ldrh	r3, [r7, #14]
 800294e:	021b      	lsls	r3, r3, #8
 8002950:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	3301      	adds	r3, #1
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	461a      	mov	r2, r3
 800295a:	89fb      	ldrh	r3, [r7, #14]
 800295c:	4313      	orrs	r3, r2
 800295e:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8002960:	89fb      	ldrh	r3, [r7, #14]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d010      	beq.n	8002988 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8002966:	89fa      	ldrh	r2, [r7, #14]
 8002968:	887b      	ldrh	r3, [r7, #2]
 800296a:	429a      	cmp	r2, r3
 800296c:	d102      	bne.n	8002974 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	3303      	adds	r3, #3
 8002972:	e00b      	b.n	800298c <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	3302      	adds	r3, #2
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	461a      	mov	r2, r3
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	4413      	add	r3, r2
 8002980:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8002982:	e7e0      	b.n	8002946 <u8g2_font_get_glyph_data+0xb2>
	break;
 8002984:	bf00      	nop
 8002986:	e000      	b.n	800298a <u8g2_font_get_glyph_data+0xf6>
	break;
 8002988:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3718      	adds	r7, #24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	4608      	mov	r0, r1
 800299e:	4611      	mov	r1, r2
 80029a0:	461a      	mov	r2, r3
 80029a2:	4603      	mov	r3, r0
 80029a4:	817b      	strh	r3, [r7, #10]
 80029a6:	460b      	mov	r3, r1
 80029a8:	813b      	strh	r3, [r7, #8]
 80029aa:	4613      	mov	r3, r2
 80029ac:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 80029ae:	2300      	movs	r3, #0
 80029b0:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	897a      	ldrh	r2, [r7, #10]
 80029b6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  u8g2->font_decode.target_y = y;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	893a      	ldrh	r2, [r7, #8]
 80029be:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80029c2:	88fb      	ldrh	r3, [r7, #6]
 80029c4:	4619      	mov	r1, r3
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f7ff ff64 	bl	8002894 <u8g2_font_get_glyph_data>
 80029cc:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d005      	beq.n	80029e0 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 80029d4:	6939      	ldr	r1, [r7, #16]
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f7ff fe4e 	bl	8002678 <u8g2_font_decode_glyph>
 80029dc:	4603      	mov	r3, r0
 80029de:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 80029e0:	8afb      	ldrh	r3, [r7, #22]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	4608      	mov	r0, r1
 80029f6:	4611      	mov	r1, r2
 80029f8:	461a      	mov	r2, r3
 80029fa:	4603      	mov	r3, r0
 80029fc:	817b      	strh	r3, [r7, #10]
 80029fe:	460b      	mov	r3, r1
 8002a00:	813b      	strh	r3, [r7, #8]
 8002a02:	4613      	mov	r3, r2
 8002a04:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	d833      	bhi.n	8002a78 <u8g2_DrawGlyph+0x8c>
 8002a10:	a201      	add	r2, pc, #4	@ (adr r2, 8002a18 <u8g2_DrawGlyph+0x2c>)
 8002a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a16:	bf00      	nop
 8002a18:	08002a29 	.word	0x08002a29
 8002a1c:	08002a3d 	.word	0x08002a3d
 8002a20:	08002a51 	.word	0x08002a51
 8002a24:	08002a65 	.word	0x08002a65
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	4798      	blx	r3
 8002a30:	4603      	mov	r3, r0
 8002a32:	461a      	mov	r2, r3
 8002a34:	893b      	ldrh	r3, [r7, #8]
 8002a36:	4413      	add	r3, r2
 8002a38:	813b      	strh	r3, [r7, #8]
      break;
 8002a3a:	e01d      	b.n	8002a78 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	4798      	blx	r3
 8002a44:	4603      	mov	r3, r0
 8002a46:	461a      	mov	r2, r3
 8002a48:	897b      	ldrh	r3, [r7, #10]
 8002a4a:	1a9b      	subs	r3, r3, r2
 8002a4c:	817b      	strh	r3, [r7, #10]
      break;
 8002a4e:	e013      	b.n	8002a78 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	4798      	blx	r3
 8002a58:	4603      	mov	r3, r0
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	893b      	ldrh	r3, [r7, #8]
 8002a5e:	1a9b      	subs	r3, r3, r2
 8002a60:	813b      	strh	r3, [r7, #8]
      break;
 8002a62:	e009      	b.n	8002a78 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	4798      	blx	r3
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	461a      	mov	r2, r3
 8002a70:	897b      	ldrh	r3, [r7, #10]
 8002a72:	4413      	add	r3, r2
 8002a74:	817b      	strh	r3, [r7, #10]
      break;
 8002a76:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8002a78:	88fb      	ldrh	r3, [r7, #6]
 8002a7a:	893a      	ldrh	r2, [r7, #8]
 8002a7c:	8979      	ldrh	r1, [r7, #10]
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f7ff ff88 	bl	8002994 <u8g2_font_draw_glyph>
 8002a84:	4603      	mov	r3, r0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop

08002a90 <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	607b      	str	r3, [r7, #4]
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	817b      	strh	r3, [r7, #10]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 fca7 	bl	80033f6 <u8x8_utf8_init>
  sum = 0;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	7812      	ldrb	r2, [r2, #0]
 8002ab4:	4611      	mov	r1, r2
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	4798      	blx	r3
 8002aba:	4603      	mov	r3, r0
 8002abc:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8002abe:	8abb      	ldrh	r3, [r7, #20]
 8002ac0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d038      	beq.n	8002b3a <u8g2_draw_string+0xaa>
      break;
    str++;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3301      	adds	r3, #1
 8002acc:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8002ace:	8abb      	ldrh	r3, [r7, #20]
 8002ad0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d0e9      	beq.n	8002aac <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8002ad8:	8abb      	ldrh	r3, [r7, #20]
 8002ada:	893a      	ldrh	r2, [r7, #8]
 8002adc:	8979      	ldrh	r1, [r7, #10]
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f7ff ff84 	bl	80029ec <u8g2_DrawGlyph>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8002aee:	2b03      	cmp	r3, #3
 8002af0:	d81e      	bhi.n	8002b30 <u8g2_draw_string+0xa0>
 8002af2:	a201      	add	r2, pc, #4	@ (adr r2, 8002af8 <u8g2_draw_string+0x68>)
 8002af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af8:	08002b09 	.word	0x08002b09
 8002afc:	08002b13 	.word	0x08002b13
 8002b00:	08002b1d 	.word	0x08002b1d
 8002b04:	08002b27 	.word	0x08002b27
      {
	case 0:
	  x += delta;
 8002b08:	897a      	ldrh	r2, [r7, #10]
 8002b0a:	8a7b      	ldrh	r3, [r7, #18]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	817b      	strh	r3, [r7, #10]
	  break;
 8002b10:	e00e      	b.n	8002b30 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8002b12:	893a      	ldrh	r2, [r7, #8]
 8002b14:	8a7b      	ldrh	r3, [r7, #18]
 8002b16:	4413      	add	r3, r2
 8002b18:	813b      	strh	r3, [r7, #8]
	  break;
 8002b1a:	e009      	b.n	8002b30 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8002b1c:	897a      	ldrh	r2, [r7, #10]
 8002b1e:	8a7b      	ldrh	r3, [r7, #18]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	817b      	strh	r3, [r7, #10]
	  break;
 8002b24:	e004      	b.n	8002b30 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8002b26:	893a      	ldrh	r2, [r7, #8]
 8002b28:	8a7b      	ldrh	r3, [r7, #18]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	813b      	strh	r3, [r7, #8]
	  break;
 8002b2e:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8002b30:	8afa      	ldrh	r2, [r7, #22]
 8002b32:	8a7b      	ldrh	r3, [r7, #18]
 8002b34:	4413      	add	r3, r2
 8002b36:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002b38:	e7b8      	b.n	8002aac <u8g2_draw_string+0x1c>
      break;
 8002b3a:	bf00      	nop
    }
  }
  return sum;
 8002b3c:	8afb      	ldrh	r3, [r7, #22]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3718      	adds	r7, #24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop

08002b48 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	607b      	str	r3, [r7, #4]
 8002b52:	460b      	mov	r3, r1
 8002b54:	817b      	strh	r3, [r7, #10]
 8002b56:	4613      	mov	r3, r2
 8002b58:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	4a06      	ldr	r2, [pc, #24]	@ (8002b78 <u8g2_DrawStr+0x30>)
 8002b5e:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8002b60:	893a      	ldrh	r2, [r7, #8]
 8002b62:	8979      	ldrh	r1, [r7, #10]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f7ff ff92 	bl	8002a90 <u8g2_draw_string>
 8002b6c:	4603      	mov	r3, r0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	08003413 	.word	0x08003413

08002b7c <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d05d      	beq.n	8002c48 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f993 2081 	ldrsb.w	r2, [r3, #129]	@ 0x81
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f993 2082 	ldrsb.w	r2, [r3, #130]	@ 0x82
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d04d      	beq.n	8002c4a <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d11c      	bne.n	8002bf2 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f993 208e 	ldrsb.w	r2, [r3, #142]	@ 0x8e
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f993 3083 	ldrsb.w	r3, [r3, #131]	@ 0x83
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	da05      	bge.n	8002bd4 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f993 2083 	ldrsb.w	r2, [r3, #131]	@ 0x83
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f993 3084 	ldrsb.w	r3, [r3, #132]	@ 0x84
 8002be0:	429a      	cmp	r2, r3
 8002be2:	dd32      	ble.n	8002c4a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f993 2084 	ldrsb.w	r2, [r3, #132]	@ 0x84
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8002bf0:	e02b      	b.n	8002c4a <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f993 308e 	ldrsb.w	r3, [r3, #142]	@ 0x8e
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8002c00:	4619      	mov	r1, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8002c08:	440b      	add	r3, r1
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	da0d      	bge.n	8002c2a <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	4413      	add	r3, r2
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	b25a      	sxtb	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8002c36:	429a      	cmp	r2, r3
 8002c38:	dd07      	ble.n	8002c4a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f993 2080 	ldrsb.w	r2, [r3, #128]	@ 0x80
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8002c46:	e000      	b.n	8002c4a <u8g2_UpdateRefHeight+0xce>
    return;
 8002c48:	bf00      	nop
  }  
}
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  return 0;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
	...

08002c6c <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a04      	ldr	r2, [pc, #16]	@ (8002c88 <u8g2_SetFontPosBaseline+0x1c>)
 8002c78:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	08002c55 	.word	0x08002c55

08002c8c <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d00b      	beq.n	8002cb8 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	659a      	str	r2, [r3, #88]	@ 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	3374      	adds	r3, #116	@ 0x74
 8002caa:	6839      	ldr	r1, [r7, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff fa97 	bl	80021e0 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7ff ff62 	bl	8002b7c <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8002cb8:	bf00      	nop
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <u8g2_clip_intersection2>:
 will return 0 if there is no intersection and if a > b

 */

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len,
		u8g2_uint_t c, u8g2_uint_t d) {
 8002cc0:	b480      	push	{r7}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	4611      	mov	r1, r2
 8002ccc:	461a      	mov	r2, r3
 8002cce:	460b      	mov	r3, r1
 8002cd0:	80fb      	strh	r3, [r7, #6]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	80bb      	strh	r3, [r7, #4]
	u8g2_uint_t a = *ap;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	82fb      	strh	r3, [r7, #22]
	u8g2_uint_t b;
	b = a;
 8002cdc:	8afb      	ldrh	r3, [r7, #22]
 8002cde:	82bb      	strh	r3, [r7, #20]
	b += *len;
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	881a      	ldrh	r2, [r3, #0]
 8002ce4:	8abb      	ldrh	r3, [r7, #20]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	82bb      	strh	r3, [r7, #20]
	/* be removed completly (be aware about memory curruption for wrong */
	/* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
	/* arguments) */

	/* removing the following if clause completly may lead to memory corruption of a>b */
	if (a > b) {
 8002cea:	8afa      	ldrh	r2, [r7, #22]
 8002cec:	8abb      	ldrh	r3, [r7, #20]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d90b      	bls.n	8002d0a <u8g2_clip_intersection2+0x4a>
		/* replacing this if with a simple "return 0;" will not handle the case with negative a */
		if (a < d) {
 8002cf2:	8afa      	ldrh	r2, [r7, #22]
 8002cf4:	88bb      	ldrh	r3, [r7, #4]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d205      	bcs.n	8002d06 <u8g2_clip_intersection2+0x46>
			b = d;
 8002cfa:	88bb      	ldrh	r3, [r7, #4]
 8002cfc:	82bb      	strh	r3, [r7, #20]
			b--;
 8002cfe:	8abb      	ldrh	r3, [r7, #20]
 8002d00:	3b01      	subs	r3, #1
 8002d02:	82bb      	strh	r3, [r7, #20]
 8002d04:	e001      	b.n	8002d0a <u8g2_clip_intersection2+0x4a>
		} else {
			a = c;
 8002d06:	88fb      	ldrh	r3, [r7, #6]
 8002d08:	82fb      	strh	r3, [r7, #22]
		}
	}

	/* from now on, the asumption a <= b is ok */

	if (a >= d)
 8002d0a:	8afa      	ldrh	r2, [r7, #22]
 8002d0c:	88bb      	ldrh	r3, [r7, #4]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d301      	bcc.n	8002d16 <u8g2_clip_intersection2+0x56>
		return 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	e01c      	b.n	8002d50 <u8g2_clip_intersection2+0x90>
	if (b <= c)
 8002d16:	8aba      	ldrh	r2, [r7, #20]
 8002d18:	88fb      	ldrh	r3, [r7, #6]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d801      	bhi.n	8002d22 <u8g2_clip_intersection2+0x62>
		return 0;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	e016      	b.n	8002d50 <u8g2_clip_intersection2+0x90>
	if (a < c)
 8002d22:	8afa      	ldrh	r2, [r7, #22]
 8002d24:	88fb      	ldrh	r3, [r7, #6]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d201      	bcs.n	8002d2e <u8g2_clip_intersection2+0x6e>
		a = c;
 8002d2a:	88fb      	ldrh	r3, [r7, #6]
 8002d2c:	82fb      	strh	r3, [r7, #22]
	if (b > d)
 8002d2e:	8aba      	ldrh	r2, [r7, #20]
 8002d30:	88bb      	ldrh	r3, [r7, #4]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d901      	bls.n	8002d3a <u8g2_clip_intersection2+0x7a>
		b = d;
 8002d36:	88bb      	ldrh	r3, [r7, #4]
 8002d38:	82bb      	strh	r3, [r7, #20]

	*ap = a;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8afa      	ldrh	r2, [r7, #22]
 8002d3e:	801a      	strh	r2, [r3, #0]
	b -= a;
 8002d40:	8aba      	ldrh	r2, [r7, #20]
 8002d42:	8afb      	ldrh	r3, [r7, #22]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	82bb      	strh	r3, [r7, #20]
	*len = b;
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	8aba      	ldrh	r2, [r7, #20]
 8002d4c:	801a      	strh	r2, [r3, #0]
	return 1;
 8002d4e:	2301      	movs	r3, #1
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	371c      	adds	r7, #28
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <u8g2_draw_hv_line_2dir>:
 This function first adjusts the y position to the local buffer. Then it
 will clip the line and call u8g2_draw_low_level_hv_line()

 */
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		u8g2_uint_t len, uint8_t dir) {
 8002d5c:	b590      	push	{r4, r7, lr}
 8002d5e:	b087      	sub	sp, #28
 8002d60:	af02      	add	r7, sp, #8
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	4608      	mov	r0, r1
 8002d66:	4611      	mov	r1, r2
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	817b      	strh	r3, [r7, #10]
 8002d6e:	460b      	mov	r3, r1
 8002d70:	813b      	strh	r3, [r7, #8]
 8002d72:	4613      	mov	r3, r2
 8002d74:	80fb      	strh	r3, [r7, #6]

	/* clipping happens before the display rotation */

	/* transform to pixel buffer coordinates */
	y -= u8g2->pixel_curr_row;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d7a:	893a      	ldrh	r2, [r7, #8]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	813b      	strh	r3, [r7, #8]

	u8g2->ll_hvline(u8g2, x, y, len, dir);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8002d84:	88f8      	ldrh	r0, [r7, #6]
 8002d86:	893a      	ldrh	r2, [r7, #8]
 8002d88:	8979      	ldrh	r1, [r7, #10]
 8002d8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	4603      	mov	r3, r0
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	47a0      	blx	r4
}
 8002d96:	bf00      	nop
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd90      	pop	{r4, r7, pc}

08002d9e <u8g2_DrawHVLine>:
 This function should be called by the user.

 "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
 */
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		u8g2_uint_t len, uint8_t dir) {
 8002d9e:	b590      	push	{r4, r7, lr}
 8002da0:	b087      	sub	sp, #28
 8002da2:	af02      	add	r7, sp, #8
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	4608      	mov	r0, r1
 8002da8:	4611      	mov	r1, r2
 8002daa:	461a      	mov	r2, r3
 8002dac:	4603      	mov	r3, r0
 8002dae:	817b      	strh	r3, [r7, #10]
 8002db0:	460b      	mov	r3, r1
 8002db2:	813b      	strh	r3, [r7, #8]
 8002db4:	4613      	mov	r3, r2
 8002db6:	80fb      	strh	r3, [r7, #6]
	/* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
	/* The callback may rotate the hv line */
	/* after rotation this will call u8g2_draw_hv_line_4dir() */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
	if (u8g2->is_page_clip_window_intersection != 0)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d075      	beq.n	8002eae <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
		if (len != 0) {
 8002dc2:	88fb      	ldrh	r3, [r7, #6]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d072      	beq.n	8002eae <u8g2_DrawHVLine+0x110>

			/* convert to two directions */
			if (len > 1) {
 8002dc8:	88fb      	ldrh	r3, [r7, #6]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d91a      	bls.n	8002e04 <u8g2_DrawHVLine+0x66>
				if (dir == 2) {
 8002dce:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d109      	bne.n	8002dea <u8g2_DrawHVLine+0x4c>
					x -= len;
 8002dd6:	897a      	ldrh	r2, [r7, #10]
 8002dd8:	88fb      	ldrh	r3, [r7, #6]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	817b      	strh	r3, [r7, #10]
					x++;
 8002de0:	897b      	ldrh	r3, [r7, #10]
 8002de2:	3301      	adds	r3, #1
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	817b      	strh	r3, [r7, #10]
 8002de8:	e00c      	b.n	8002e04 <u8g2_DrawHVLine+0x66>
				} else if (dir == 3) {
 8002dea:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002dee:	2b03      	cmp	r3, #3
 8002df0:	d108      	bne.n	8002e04 <u8g2_DrawHVLine+0x66>
					y -= len;
 8002df2:	893a      	ldrh	r2, [r7, #8]
 8002df4:	88fb      	ldrh	r3, [r7, #6]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	813b      	strh	r3, [r7, #8]
					y++;
 8002dfc:	893b      	ldrh	r3, [r7, #8]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	813b      	strh	r3, [r7, #8]
				}
			}
			dir &= 1;
 8002e04:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	f887 3020 	strb.w	r3, [r7, #32]

			/* clip against the user window */
			if (dir == 0) {
 8002e10:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d11a      	bne.n	8002e4e <u8g2_DrawHVLine+0xb0>
				if (y < u8g2->user_y0)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8002e1e:	893b      	ldrh	r3, [r7, #8]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d83b      	bhi.n	8002e9c <u8g2_DrawHVLine+0xfe>
					return;
				if (y >= u8g2->user_y1)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8002e2a:	893b      	ldrh	r3, [r7, #8]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d937      	bls.n	8002ea0 <u8g2_DrawHVLine+0x102>
					return;
				if (u8g2_clip_intersection2(&x, &len, u8g2->user_x0,
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8002e3c:	1db9      	adds	r1, r7, #6
 8002e3e:	f107 000a 	add.w	r0, r7, #10
 8002e42:	f7ff ff3d 	bl	8002cc0 <u8g2_clip_intersection2>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d11a      	bne.n	8002e82 <u8g2_DrawHVLine+0xe4>
						u8g2->user_x1) == 0)
					return;
 8002e4c:	e02f      	b.n	8002eae <u8g2_DrawHVLine+0x110>
			} else {
				if (x < u8g2->user_x0)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8002e54:	897b      	ldrh	r3, [r7, #10]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d824      	bhi.n	8002ea4 <u8g2_DrawHVLine+0x106>
					return;
				if (x >= u8g2->user_x1)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8002e60:	897b      	ldrh	r3, [r7, #10]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d920      	bls.n	8002ea8 <u8g2_DrawHVLine+0x10a>
					return;
				if (u8g2_clip_intersection2(&y, &len, u8g2->user_y0,
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8002e72:	1db9      	adds	r1, r7, #6
 8002e74:	f107 0008 	add.w	r0, r7, #8
 8002e78:	f7ff ff22 	bl	8002cc0 <u8g2_clip_intersection2>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d014      	beq.n	8002eac <u8g2_DrawHVLine+0x10e>
						u8g2->user_y1) == 0)
					return;
			}

			u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e86:	689c      	ldr	r4, [r3, #8]
 8002e88:	8979      	ldrh	r1, [r7, #10]
 8002e8a:	893a      	ldrh	r2, [r7, #8]
 8002e8c:	88f8      	ldrh	r0, [r7, #6]
 8002e8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	4603      	mov	r3, r0
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	47a0      	blx	r4
 8002e9a:	e008      	b.n	8002eae <u8g2_DrawHVLine+0x110>
					return;
 8002e9c:	bf00      	nop
 8002e9e:	e006      	b.n	8002eae <u8g2_DrawHVLine+0x110>
					return;
 8002ea0:	bf00      	nop
 8002ea2:	e004      	b.n	8002eae <u8g2_DrawHVLine+0x110>
					return;
 8002ea4:	bf00      	nop
 8002ea6:	e002      	b.n	8002eae <u8g2_DrawHVLine+0x110>
					return;
 8002ea8:	bf00      	nop
 8002eaa:	e000      	b.n	8002eae <u8g2_DrawHVLine+0x110>
					return;
 8002eac:	bf00      	nop
		}
}
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd90      	pop	{r4, r7, pc}

08002eb4 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8002eb4:	b490      	push	{r4, r7}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4604      	mov	r4, r0
 8002ebc:	4608      	mov	r0, r1
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	4623      	mov	r3, r4
 8002ec4:	80fb      	strh	r3, [r7, #6]
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	80bb      	strh	r3, [r7, #4]
 8002eca:	460b      	mov	r3, r1
 8002ecc:	807b      	strh	r3, [r7, #2]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8002ed2:	887a      	ldrh	r2, [r7, #2]
 8002ed4:	88bb      	ldrh	r3, [r7, #4]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d20d      	bcs.n	8002ef6 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8002eda:	883a      	ldrh	r2, [r7, #0]
 8002edc:	88fb      	ldrh	r3, [r7, #6]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d901      	bls.n	8002ee6 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e014      	b.n	8002f10 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8002ee6:	887a      	ldrh	r2, [r7, #2]
 8002ee8:	883b      	ldrh	r3, [r7, #0]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d901      	bls.n	8002ef2 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e00e      	b.n	8002f10 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	e00c      	b.n	8002f10 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8002ef6:	883a      	ldrh	r2, [r7, #0]
 8002ef8:	88fb      	ldrh	r3, [r7, #6]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d907      	bls.n	8002f0e <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8002efe:	887a      	ldrh	r2, [r7, #2]
 8002f00:	883b      	ldrh	r3, [r7, #0]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d901      	bls.n	8002f0a <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e002      	b.n	8002f10 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	e000      	b.n	8002f10 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8002f0e:	2300      	movs	r3, #0
    }
  }
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bc90      	pop	{r4, r7}
 8002f18:	4770      	bx	lr

08002f1a <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b084      	sub	sp, #16
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	60f8      	str	r0, [r7, #12]
 8002f22:	4608      	mov	r0, r1
 8002f24:	4611      	mov	r1, r2
 8002f26:	461a      	mov	r2, r3
 8002f28:	4603      	mov	r3, r0
 8002f2a:	817b      	strh	r3, [r7, #10]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	813b      	strh	r3, [r7, #8]
 8002f30:	4613      	mov	r3, r2
 8002f32:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f8b3 104e 	ldrh.w	r1, [r3, #78]	@ 0x4e
 8002f40:	8b3b      	ldrh	r3, [r7, #24]
 8002f42:	893a      	ldrh	r2, [r7, #8]
 8002f44:	f7ff ffb6 	bl	8002eb4 <u8g2_is_intersection_decision_tree>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <u8g2_IsIntersection+0x38>
    return 0; 
 8002f4e:	2300      	movs	r3, #0
 8002f50:	e00a      	b.n	8002f68 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 8002f5e:	88fb      	ldrh	r3, [r7, #6]
 8002f60:	897a      	ldrh	r2, [r7, #10]
 8002f62:	f7ff ffa7 	bl	8002eb4 <u8g2_is_intersection_decision_tree>
 8002f66:	4603      	mov	r3, r0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b089      	sub	sp, #36	@ 0x24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	4608      	mov	r0, r1
 8002f7a:	4611      	mov	r1, r2
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	4603      	mov	r3, r0
 8002f80:	817b      	strh	r3, [r7, #10]
 8002f82:	460b      	mov	r3, r1
 8002f84:	813b      	strh	r3, [r7, #8]
 8002f86:	4613      	mov	r3, r2
 8002f88:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8002f8a:	893b      	ldrh	r3, [r7, #8]
 8002f8c:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8002f8e:	7efb      	ldrb	r3, [r7, #27]
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8002f96:	2301      	movs	r3, #1
 8002f98:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8002f9a:	7e3a      	ldrb	r2, [r7, #24]
 8002f9c:	7efb      	ldrb	r3, [r7, #27]
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d801      	bhi.n	8002fba <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8002fb6:	7e3b      	ldrb	r3, [r7, #24]
 8002fb8:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d001      	beq.n	8002fc8 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8002fc4:	7e3b      	ldrb	r3, [r7, #24]
 8002fc6:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8002fc8:	893b      	ldrh	r3, [r7, #8]
 8002fca:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8002fcc:	8afb      	ldrh	r3, [r7, #22]
 8002fce:	f023 0307 	bic.w	r3, r3, #7
 8002fd2:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	7c1b      	ldrb	r3, [r3, #16]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	8afb      	ldrh	r3, [r7, #22]
 8002fde:	fb13 f302 	smulbb	r3, r3, r2
 8002fe2:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fe8:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8002fea:	8afb      	ldrh	r3, [r7, #22]
 8002fec:	69fa      	ldr	r2, [r7, #28]
 8002fee:	4413      	add	r3, r2
 8002ff0:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8002ff2:	897b      	ldrh	r3, [r7, #10]
 8002ff4:	69fa      	ldr	r2, [r7, #28]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8002ffa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d117      	bne.n	8003032 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	781a      	ldrb	r2, [r3, #0]
 8003006:	7ebb      	ldrb	r3, [r7, #26]
 8003008:	4313      	orrs	r3, r2
 800300a:	b2da      	uxtb	r2, r3
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	781a      	ldrb	r2, [r3, #0]
 8003014:	7e7b      	ldrb	r3, [r7, #25]
 8003016:	4053      	eors	r3, r2
 8003018:	b2da      	uxtb	r2, r3
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	701a      	strb	r2, [r3, #0]
	ptr++;
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	3301      	adds	r3, #1
 8003022:	61fb      	str	r3, [r7, #28]
	len--;
 8003024:	88fb      	ldrh	r3, [r7, #6]
 8003026:	3b01      	subs	r3, #1
 8003028:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 800302a:	88fb      	ldrh	r3, [r7, #6]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1e8      	bne.n	8003002 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8003030:	e038      	b.n	80030a4 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	781a      	ldrb	r2, [r3, #0]
 8003036:	7ebb      	ldrb	r3, [r7, #26]
 8003038:	4313      	orrs	r3, r2
 800303a:	b2da      	uxtb	r2, r3
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	781a      	ldrb	r2, [r3, #0]
 8003044:	7e7b      	ldrb	r3, [r7, #25]
 8003046:	4053      	eors	r3, r2
 8003048:	b2da      	uxtb	r2, r3
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 800304e:	7efb      	ldrb	r3, [r7, #27]
 8003050:	3301      	adds	r3, #1
 8003052:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8003054:	7efb      	ldrb	r3, [r7, #27]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	76fb      	strb	r3, [r7, #27]
      len--;
 800305c:	88fb      	ldrh	r3, [r7, #6]
 800305e:	3b01      	subs	r3, #1
 8003060:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8003062:	7efb      	ldrb	r3, [r7, #27]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d114      	bne.n	8003092 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800306c:	461a      	mov	r2, r3
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	4413      	add	r3, r2
 8003072:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 800307a:	2b01      	cmp	r3, #1
 800307c:	d801      	bhi.n	8003082 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 800307e:	2301      	movs	r3, #1
 8003080:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8003088:	2b01      	cmp	r3, #1
 800308a:	d008      	beq.n	800309e <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 800308c:	2301      	movs	r3, #1
 800308e:	767b      	strb	r3, [r7, #25]
 8003090:	e005      	b.n	800309e <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8003092:	7ebb      	ldrb	r3, [r7, #26]
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8003098:	7e7b      	ldrb	r3, [r7, #25]
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 800309e:	88fb      	ldrh	r3, [r7, #6]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1c6      	bne.n	8003032 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 80030a4:	bf00      	nop
 80030a6:	3724      	adds	r7, #36	@ 0x24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  u8g2->clip_y0 = 0;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030ce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030d8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  
  u8g2->cb->update_page_win(u8g2);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	4798      	blx	r3
}
 80030e6:	bf00      	nop
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b084      	sub	sp, #16
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	60f8      	str	r0, [r7, #12]
 80030f6:	60b9      	str	r1, [r7, #8]
 80030f8:	603b      	str	r3, [r7, #0]
 80030fa:	4613      	mov	r3, r2
 80030fc:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	659a      	str	r2, [r3, #88]	@ 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	79fa      	ldrb	r2, [r7, #7]
 8003114:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
  u8g2->bitmap_transparency = 0;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
  u8g2->draw_color = 1;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  u8g2->is_auto_page_clear = 1;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
  
  u8g2->cb = u8g2_cb;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update_dimension(u8g2);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f7ff ffa9 	bl	80030b0 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f7ff fd84 	bl	8002c6c <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
#endif
}
 800316c:	bf00      	nop
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003188:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800318a:	89fb      	ldrh	r3, [r7, #14]
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	89fa      	ldrh	r2, [r7, #14]
 8003194:	879a      	strh	r2, [r3, #60]	@ 0x3c
  
  t = display_info->tile_width;
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	7c1b      	ldrb	r3, [r3, #16]
 800319a:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 800319c:	89fb      	ldrh	r3, [r7, #14]
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	89fa      	ldrh	r2, [r7, #14]
 80031a6:	875a      	strh	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80031ae:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80031b0:	89fb      	ldrh	r3, [r7, #14]
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	89fa      	ldrh	r2, [r7, #14]
 80031ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_buf_height;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80031c2:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80031c4:	89fb      	ldrh	r3, [r7, #14]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 80031cc:	4413      	add	r3, r2
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	7c52      	ldrb	r2, [r2, #17]
 80031d2:	4293      	cmp	r3, r2
 80031d4:	dd07      	ble.n	80031e6 <u8g2_update_dimension_common+0x72>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	7c5b      	ldrb	r3, [r3, #17]
 80031da:	461a      	mov	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80031e6:	89fb      	ldrh	r3, [r7, #14]
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  u8g2->buf_y1 += t;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8003208:	89fb      	ldrh	r3, [r7, #14]
 800320a:	4413      	add	r3, r2
 800320c:	b29a      	uxth	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	8a9a      	ldrh	r2, [r3, #20]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  u8g2->height = display_info->pixel_height;
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	8ada      	ldrh	r2, [r3, #22]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8003228:	bf00      	nop
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af02      	add	r7, sp, #8
 800323a:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f8b3 0052 	ldrh.w	r0, [r3, #82]	@ 0x52
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	4603      	mov	r3, r0
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7ff fe5e 	bl	8002f1a <u8g2_IsIntersection>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d104      	bne.n	800326e <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800326c:	e03b      	b.n	80032e6 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003282:	429a      	cmp	r2, r3
 8003284:	d205      	bcs.n	8003292 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800329e:	429a      	cmp	r2, r3
 80032a0:	d905      	bls.n	80032ae <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d205      	bcs.n	80032ca <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d905      	bls.n	80032e6 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 80032e6:	bf00      	nop
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b082      	sub	sp, #8
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7ff ff3c 	bl	8003174 <u8g2_update_dimension_common>
}
 80032fc:	bf00      	nop
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  if ( u8g2->height >= u8g2->buf_y1 )
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8003334:	429a      	cmp	r2, r3
 8003336:	d30a      	bcc.n	800334e <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	b29a      	uxth	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	b29a      	uxth	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7ff ff65 	bl	8003234 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800336a:	bf00      	nop
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b088      	sub	sp, #32
 8003376:	af02      	add	r7, sp, #8
 8003378:	60f8      	str	r0, [r7, #12]
 800337a:	4608      	mov	r0, r1
 800337c:	4611      	mov	r1, r2
 800337e:	461a      	mov	r2, r3
 8003380:	4603      	mov	r3, r0
 8003382:	817b      	strh	r3, [r7, #10]
 8003384:	460b      	mov	r3, r1
 8003386:	813b      	strh	r3, [r7, #8]
 8003388:	4613      	mov	r3, r2
 800338a:	80fb      	strh	r3, [r7, #6]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003392:	82bb      	strh	r3, [r7, #20]
  yy -= y;
 8003394:	8aba      	ldrh	r2, [r7, #20]
 8003396:	893b      	ldrh	r3, [r7, #8]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	82bb      	strh	r3, [r7, #20]
  
  xx = u8g2->width;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80033a2:	82fb      	strh	r3, [r7, #22]
  xx -= x;
 80033a4:	8afa      	ldrh	r2, [r7, #22]
 80033a6:	897b      	ldrh	r3, [r7, #10]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	82fb      	strh	r3, [r7, #22]
  
  if ( dir == 0 )
 80033ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d107      	bne.n	80033c4 <u8g2_draw_l90_r2+0x52>
  {
    yy--;
 80033b4:	8abb      	ldrh	r3, [r7, #20]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	82bb      	strh	r3, [r7, #20]
    xx -= len;
 80033ba:	8afa      	ldrh	r2, [r7, #22]
 80033bc:	88fb      	ldrh	r3, [r7, #6]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	82fb      	strh	r3, [r7, #22]
 80033c2:	e00a      	b.n	80033da <u8g2_draw_l90_r2+0x68>
  }
  else if ( dir == 1 )
 80033c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d106      	bne.n	80033da <u8g2_draw_l90_r2+0x68>
  {
    xx--;
 80033cc:	8afb      	ldrh	r3, [r7, #22]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	82fb      	strh	r3, [r7, #22]
    yy -= len;
 80033d2:	8aba      	ldrh	r2, [r7, #20]
 80033d4:	88fb      	ldrh	r3, [r7, #6]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	82bb      	strh	r3, [r7, #20]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 80033da:	88f8      	ldrh	r0, [r7, #6]
 80033dc:	8aba      	ldrh	r2, [r7, #20]
 80033de:	8af9      	ldrh	r1, [r7, #22]
 80033e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	4603      	mov	r3, r0
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f7ff fcb7 	bl	8002d5c <u8g2_draw_hv_line_2dir>
}
 80033ee:	bf00      	nop
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
 800341a:	460b      	mov	r3, r1
 800341c:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 800341e:	78fb      	ldrb	r3, [r7, #3]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d002      	beq.n	800342a <u8x8_ascii_next+0x18>
 8003424:	78fb      	ldrb	r3, [r7, #3]
 8003426:	2b0a      	cmp	r3, #10
 8003428:	d102      	bne.n	8003430 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 800342a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800342e:	e001      	b.n	8003434 <u8x8_ascii_next+0x22>
  return b;
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	b29b      	uxth	r3, r3
}
 8003434:	4618      	mov	r0, r3
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8003440:	b590      	push	{r4, r7, lr}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	460b      	mov	r3, r1
 800344a:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691c      	ldr	r4, [r3, #16]
 8003450:	78fa      	ldrb	r2, [r7, #3]
 8003452:	2300      	movs	r3, #0
 8003454:	2120      	movs	r1, #32
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	47a0      	blx	r4
 800345a:	4603      	mov	r3, r0
}
 800345c:	4618      	mov	r0, r3
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	bd90      	pop	{r4, r7, pc}

08003464 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8003464:	b590      	push	{r4, r7, lr}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	460b      	mov	r3, r1
 800346e:	607a      	str	r2, [r7, #4]
 8003470:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	691c      	ldr	r4, [r3, #16]
 8003476:	7afa      	ldrb	r2, [r7, #11]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2117      	movs	r1, #23
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	47a0      	blx	r4
 8003480:	4603      	mov	r3, r0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	bd90      	pop	{r4, r7, pc}

0800348a <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b082      	sub	sp, #8
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
 8003492:	460b      	mov	r3, r1
 8003494:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8003496:	1cfb      	adds	r3, r7, #3
 8003498:	461a      	mov	r2, r3
 800349a:	2101      	movs	r1, #1
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7ff ffe1 	bl	8003464 <u8x8_byte_SendBytes>
 80034a2:	4603      	mov	r3, r0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3708      	adds	r7, #8
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 80034ac:	b590      	push	{r4, r7, lr}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	460b      	mov	r3, r1
 80034b6:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68dc      	ldr	r4, [r3, #12]
 80034bc:	78fa      	ldrb	r2, [r7, #3]
 80034be:	2300      	movs	r3, #0
 80034c0:	2115      	movs	r1, #21
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	47a0      	blx	r4
 80034c6:	4603      	mov	r3, r0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd90      	pop	{r4, r7, pc}

080034d0 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 80034d0:	b590      	push	{r4, r7, lr}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	460b      	mov	r3, r1
 80034da:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68dc      	ldr	r4, [r3, #12]
 80034e0:	78fa      	ldrb	r2, [r7, #3]
 80034e2:	2300      	movs	r3, #0
 80034e4:	2116      	movs	r1, #22
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	47a0      	blx	r4
 80034ea:	4603      	mov	r3, r0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd90      	pop	{r4, r7, pc}

080034f4 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80034f4:	b590      	push	{r4, r7, lr}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	460b      	mov	r3, r1
 80034fe:	607a      	str	r2, [r7, #4]
 8003500:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	68dc      	ldr	r4, [r3, #12]
 8003506:	7afa      	ldrb	r2, [r7, #11]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2117      	movs	r1, #23
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	47a0      	blx	r4
 8003510:	4603      	mov	r3, r0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	bd90      	pop	{r4, r7, pc}

0800351a <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 800351a:	b590      	push	{r4, r7, lr}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68dc      	ldr	r4, [r3, #12]
 8003526:	2300      	movs	r3, #0
 8003528:	2200      	movs	r2, #0
 800352a:	2118      	movs	r1, #24
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	47a0      	blx	r4
 8003530:	4603      	mov	r3, r0
}
 8003532:	4618      	mov	r0, r3
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	bd90      	pop	{r4, r7, pc}

0800353a <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 800353a:	b590      	push	{r4, r7, lr}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68dc      	ldr	r4, [r3, #12]
 8003546:	2300      	movs	r3, #0
 8003548:	2200      	movs	r2, #0
 800354a:	2119      	movs	r1, #25
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	47a0      	blx	r4
 8003550:	4603      	mov	r3, r0
}
 8003552:	4618      	mov	r0, r3
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	bd90      	pop	{r4, r7, pc}

0800355a <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 800355a:	b590      	push	{r4, r7, lr}
 800355c:	b085      	sub	sp, #20
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
 8003562:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	73fb      	strb	r3, [r7, #15]
    data++;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	3301      	adds	r3, #1
 800356e:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8003570:	7bfb      	ldrb	r3, [r7, #15]
 8003572:	2bfe      	cmp	r3, #254	@ 0xfe
 8003574:	d031      	beq.n	80035da <u8x8_cad_SendSequence+0x80>
 8003576:	2bfe      	cmp	r3, #254	@ 0xfe
 8003578:	dc3d      	bgt.n	80035f6 <u8x8_cad_SendSequence+0x9c>
 800357a:	2b19      	cmp	r3, #25
 800357c:	dc3b      	bgt.n	80035f6 <u8x8_cad_SendSequence+0x9c>
 800357e:	2b18      	cmp	r3, #24
 8003580:	da23      	bge.n	80035ca <u8x8_cad_SendSequence+0x70>
 8003582:	2b16      	cmp	r3, #22
 8003584:	dc02      	bgt.n	800358c <u8x8_cad_SendSequence+0x32>
 8003586:	2b15      	cmp	r3, #21
 8003588:	da03      	bge.n	8003592 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 800358a:	e034      	b.n	80035f6 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 800358c:	2b17      	cmp	r3, #23
 800358e:	d00e      	beq.n	80035ae <u8x8_cad_SendSequence+0x54>
	return;
 8003590:	e031      	b.n	80035f6 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68dc      	ldr	r4, [r3, #12]
 800359c:	7bba      	ldrb	r2, [r7, #14]
 800359e:	7bf9      	ldrb	r1, [r7, #15]
 80035a0:	2300      	movs	r3, #0
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	47a0      	blx	r4
	  data++;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	3301      	adds	r3, #1
 80035aa:	603b      	str	r3, [r7, #0]
	  break;
 80035ac:	e022      	b.n	80035f4 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 80035b4:	f107 030e 	add.w	r3, r7, #14
 80035b8:	461a      	mov	r2, r3
 80035ba:	2101      	movs	r1, #1
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7ff ff99 	bl	80034f4 <u8x8_cad_SendData>
	  data++;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	3301      	adds	r3, #1
 80035c6:	603b      	str	r3, [r7, #0]
	  break;
 80035c8:	e014      	b.n	80035f4 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68dc      	ldr	r4, [r3, #12]
 80035ce:	7bf9      	ldrb	r1, [r7, #15]
 80035d0:	2300      	movs	r3, #0
 80035d2:	2200      	movs	r2, #0
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	47a0      	blx	r4
	  break;
 80035d8:	e00c      	b.n	80035f4 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80035e0:	7bbb      	ldrb	r3, [r7, #14]
 80035e2:	461a      	mov	r2, r3
 80035e4:	2129      	movs	r1, #41	@ 0x29
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f9ee 	bl	80039c8 <u8x8_gpio_call>
	  data++;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	3301      	adds	r3, #1
 80035f0:	603b      	str	r3, [r7, #0]
	  break;
 80035f2:	bf00      	nop
    cmd = *data;
 80035f4:	e7b6      	b.n	8003564 <u8x8_cad_SendSequence+0xa>
	return;
 80035f6:	bf00      	nop
    }
  }
}
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd90      	pop	{r4, r7, pc}
	...

08003600 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003600:	b590      	push	{r4, r7, lr}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	607b      	str	r3, [r7, #4]
 800360a:	460b      	mov	r3, r1
 800360c:	72fb      	strb	r3, [r7, #11]
 800360e:	4613      	mov	r3, r2
 8003610:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8003612:	7afb      	ldrb	r3, [r7, #11]
 8003614:	3b14      	subs	r3, #20
 8003616:	2b05      	cmp	r3, #5
 8003618:	d82f      	bhi.n	800367a <u8x8_cad_001+0x7a>
 800361a:	a201      	add	r2, pc, #4	@ (adr r2, 8003620 <u8x8_cad_001+0x20>)
 800361c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003620:	08003669 	.word	0x08003669
 8003624:	08003639 	.word	0x08003639
 8003628:	0800364d 	.word	0x0800364d
 800362c:	08003661 	.word	0x08003661
 8003630:	08003669 	.word	0x08003669
 8003634:	08003669 	.word	0x08003669
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8003638:	2100      	movs	r1, #0
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f7ff ff00 	bl	8003440 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003640:	7abb      	ldrb	r3, [r7, #10]
 8003642:	4619      	mov	r1, r3
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f7ff ff20 	bl	800348a <u8x8_byte_SendByte>
      break;
 800364a:	e018      	b.n	800367e <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 800364c:	2100      	movs	r1, #0
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f7ff fef6 	bl	8003440 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003654:	7abb      	ldrb	r3, [r7, #10]
 8003656:	4619      	mov	r1, r3
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f7ff ff16 	bl	800348a <u8x8_byte_SendByte>
      break;
 800365e:	e00e      	b.n	800367e <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8003660:	2101      	movs	r1, #1
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f7ff feec 	bl	8003440 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	691c      	ldr	r4, [r3, #16]
 800366c:	7aba      	ldrb	r2, [r7, #10]
 800366e:	7af9      	ldrb	r1, [r7, #11]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	47a0      	blx	r4
 8003676:	4603      	mov	r3, r0
 8003678:	e002      	b.n	8003680 <u8x8_cad_001+0x80>
    default:
      return 0;
 800367a:	2300      	movs	r3, #0
 800367c:	e000      	b.n	8003680 <u8x8_cad_001+0x80>
  }
  return 1;
 800367e:	2301      	movs	r3, #1
}
 8003680:	4618      	mov	r0, r3
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	bd90      	pop	{r4, r7, pc}

08003688 <u8x8_d_st7565_common>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	607b      	str	r3, [r7, #4]
 8003692:	460b      	mov	r3, r1
 8003694:	72fb      	strb	r3, [r7, #11]
 8003696:	4613      	mov	r3, r2
 8003698:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800369a:	7afb      	ldrb	r3, [r7, #11]
 800369c:	2b0f      	cmp	r3, #15
 800369e:	d006      	beq.n	80036ae <u8x8_d_st7565_common+0x26>
 80036a0:	2b0f      	cmp	r3, #15
 80036a2:	dc71      	bgt.n	8003788 <u8x8_d_st7565_common+0x100>
 80036a4:	2b0b      	cmp	r3, #11
 80036a6:	d050      	beq.n	800374a <u8x8_d_st7565_common+0xc2>
 80036a8:	2b0e      	cmp	r3, #14
 80036aa:	d05b      	beq.n	8003764 <u8x8_d_st7565_common+0xdc>
 80036ac:	e06c      	b.n	8003788 <u8x8_d_st7565_common+0x100>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f7ff ff33 	bl	800351a <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	795b      	ldrb	r3, [r3, #5]
 80036b8:	75bb      	strb	r3, [r7, #22]
      x *= 8;
 80036ba:	7dbb      	ldrb	r3, [r7, #22]
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	75bb      	strb	r3, [r7, #22]
      x += u8x8->x_offset;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80036c6:	7dbb      	ldrb	r3, [r7, #22]
 80036c8:	4413      	add	r3, r2
 80036ca:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 80036cc:	7dbb      	ldrb	r3, [r7, #22]
 80036ce:	091b      	lsrs	r3, r3, #4
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	f043 0310 	orr.w	r3, r3, #16
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	4619      	mov	r1, r3
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f7ff fee6 	bl	80034ac <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 80036e0:	7dbb      	ldrb	r3, [r7, #22]
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	4619      	mov	r1, r3
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f7ff fede 	bl	80034ac <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	799b      	ldrb	r3, [r3, #6]
 80036f4:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	4619      	mov	r1, r3
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f7ff fed5 	bl	80034ac <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	791b      	ldrb	r3, [r3, #4]
 8003706:	75fb      	strb	r3, [r7, #23]
      c *= 8;
 8003708:	7dfb      	ldrb	r3, [r7, #23]
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	613b      	str	r3, [r7, #16]
      /* 
	The following if condition checks the hardware limits of the st7565 
	controller: It is not allowed to write beyond the display limits.
	This is in fact an issue within flip mode.
      */
      if ( c + x > 132u )
 8003714:	7dfa      	ldrb	r2, [r7, #23]
 8003716:	7dbb      	ldrb	r3, [r7, #22]
 8003718:	4413      	add	r3, r2
 800371a:	2b84      	cmp	r3, #132	@ 0x84
 800371c:	d905      	bls.n	800372a <u8x8_d_st7565_common+0xa2>
      {
	c = 132u;
 800371e:	2384      	movs	r3, #132	@ 0x84
 8003720:	75fb      	strb	r3, [r7, #23]
	c -= x;
 8003722:	7dfa      	ldrb	r2, [r7, #23]
 8003724:	7dbb      	ldrb	r3, [r7, #22]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	75fb      	strb	r3, [r7, #23]
      }
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 800372a:	7dfb      	ldrb	r3, [r7, #23]
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	4619      	mov	r1, r3
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f7ff fedf 	bl	80034f4 <u8x8_cad_SendData>
	arg_int--;
 8003736:	7abb      	ldrb	r3, [r7, #10]
 8003738:	3b01      	subs	r3, #1
 800373a:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 800373c:	7abb      	ldrb	r3, [r7, #10]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f3      	bne.n	800372a <u8x8_d_st7565_common+0xa2>
      
      u8x8_cad_EndTransfer(u8x8);
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f7ff fef9 	bl	800353a <u8x8_cad_EndTransfer>
      break;
 8003748:	e020      	b.n	800378c <u8x8_d_st7565_common+0x104>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 800374a:	7abb      	ldrb	r3, [r7, #10]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d104      	bne.n	800375a <u8x8_d_st7565_common+0xd2>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
 8003750:	4911      	ldr	r1, [pc, #68]	@ (8003798 <u8x8_d_st7565_common+0x110>)
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f7ff ff01 	bl	800355a <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
      break;
 8003758:	e018      	b.n	800378c <u8x8_d_st7565_common+0x104>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
 800375a:	4910      	ldr	r1, [pc, #64]	@ (800379c <u8x8_d_st7565_common+0x114>)
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f7ff fefc 	bl	800355a <u8x8_cad_SendSequence>
      break;
 8003762:	e013      	b.n	800378c <u8x8_d_st7565_common+0x104>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f7ff fed8 	bl	800351a <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800376a:	2181      	movs	r1, #129	@ 0x81
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f7ff fe9d 	bl	80034ac <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
 8003772:	7abb      	ldrb	r3, [r7, #10]
 8003774:	089b      	lsrs	r3, r3, #2
 8003776:	b2db      	uxtb	r3, r3
 8003778:	4619      	mov	r1, r3
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f7ff fea8 	bl	80034d0 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f7ff feda 	bl	800353a <u8x8_cad_EndTransfer>
      break;
 8003786:	e001      	b.n	800378c <u8x8_d_st7565_common+0x104>
#endif
    default:
      return 0;
 8003788:	2300      	movs	r3, #0
 800378a:	e000      	b.n	800378e <u8x8_d_st7565_common+0x106>
  }
  return 1;
 800378c:	2301      	movs	r3, #1
}
 800378e:	4618      	mov	r0, r3
 8003790:	3718      	adds	r7, #24
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	0800d774 	.word	0x0800d774
 800379c:	0800d77c 	.word	0x0800d77c

080037a0 <u8x8_d_st7565_64128n>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_64128n(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	607b      	str	r3, [r7, #4]
 80037aa:	460b      	mov	r3, r1
 80037ac:	72fb      	strb	r3, [r7, #11]
 80037ae:	4613      	mov	r3, r2
 80037b0:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 80037b2:	7aba      	ldrb	r2, [r7, #10]
 80037b4:	7af9      	ldrb	r1, [r7, #11]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f7ff ff65 	bl	8003688 <u8x8_d_st7565_common>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d131      	bne.n	8003828 <u8x8_d_st7565_64128n+0x88>
  {
    /* msg not handled, then try here */
    switch(msg)
 80037c4:	7afb      	ldrb	r3, [r7, #11]
 80037c6:	2b0d      	cmp	r3, #13
 80037c8:	d013      	beq.n	80037f2 <u8x8_d_st7565_64128n+0x52>
 80037ca:	2b0d      	cmp	r3, #13
 80037cc:	dc2a      	bgt.n	8003824 <u8x8_d_st7565_64128n+0x84>
 80037ce:	2b09      	cmp	r3, #9
 80037d0:	d002      	beq.n	80037d8 <u8x8_d_st7565_64128n+0x38>
 80037d2:	2b0a      	cmp	r3, #10
 80037d4:	d005      	beq.n	80037e2 <u8x8_d_st7565_64128n+0x42>
 80037d6:	e025      	b.n	8003824 <u8x8_d_st7565_64128n+0x84>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_64128n_display_info);
 80037d8:	4916      	ldr	r1, [pc, #88]	@ (8003834 <u8x8_d_st7565_64128n+0x94>)
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 f832 	bl	8003844 <u8x8_d_helper_display_setup_memory>
	break;
 80037e0:	e022      	b.n	8003828 <u8x8_d_st7565_64128n+0x88>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 f842 	bl	800386c <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_64128n_init_seq);
 80037e8:	4913      	ldr	r1, [pc, #76]	@ (8003838 <u8x8_d_st7565_64128n+0x98>)
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f7ff feb5 	bl	800355a <u8x8_cad_SendSequence>
	break;
 80037f0:	e01a      	b.n	8003828 <u8x8_d_st7565_64128n+0x88>
      case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
	if ( arg_int == 0 )
 80037f2:	7abb      	ldrb	r3, [r7, #10]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10a      	bne.n	800380e <u8x8_d_st7565_64128n+0x6e>
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
 80037f8:	4910      	ldr	r1, [pc, #64]	@ (800383c <u8x8_d_st7565_64128n+0x9c>)
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f7ff fead 	bl	800355a <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	7c9a      	ldrb	r2, [r3, #18]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	else
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
	}	
	break;
 800380c:	e00c      	b.n	8003828 <u8x8_d_st7565_64128n+0x88>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
 800380e:	490c      	ldr	r1, [pc, #48]	@ (8003840 <u8x8_d_st7565_64128n+0xa0>)
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f7ff fea2 	bl	800355a <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	7cda      	ldrb	r2, [r3, #19]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	break;
 8003822:	e001      	b.n	8003828 <u8x8_d_st7565_64128n+0x88>
      default:
	return 0;		/* msg unknown */
 8003824:	2300      	movs	r3, #0
 8003826:	e000      	b.n	800382a <u8x8_d_st7565_64128n+0x8a>
    }
  }
  return 1;
 8003828:	2301      	movs	r3, #1
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	0800d7b4 	.word	0x0800d7b4
 8003838:	0800d794 	.word	0x0800d794
 800383c:	0800d784 	.word	0x0800d784
 8003840:	0800d78c 	.word	0x0800d78c

08003844 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	7c9a      	ldrb	r2, [r3, #18]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800386c:	b590      	push	{r4, r7, lr}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	695c      	ldr	r4, [r3, #20]
 8003878:	2300      	movs	r3, #0
 800387a:	2200      	movs	r2, #0
 800387c:	2128      	movs	r1, #40	@ 0x28
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68dc      	ldr	r4, [r3, #12]
 8003886:	2300      	movs	r3, #0
 8003888:	2200      	movs	r2, #0
 800388a:	2114      	movs	r1, #20
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8003890:	2201      	movs	r2, #1
 8003892:	214b      	movs	r1, #75	@ 0x4b
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f897 	bl	80039c8 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	791b      	ldrb	r3, [r3, #4]
 80038a0:	461a      	mov	r2, r3
 80038a2:	2129      	movs	r1, #41	@ 0x29
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 f88f 	bl	80039c8 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 80038aa:	2200      	movs	r2, #0
 80038ac:	214b      	movs	r1, #75	@ 0x4b
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f88a 	bl	80039c8 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	791b      	ldrb	r3, [r3, #4]
 80038ba:	461a      	mov	r2, r3
 80038bc:	2129      	movs	r1, #41	@ 0x29
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f882 	bl	80039c8 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80038c4:	2201      	movs	r2, #1
 80038c6:	214b      	movs	r1, #75	@ 0x4b
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f87d 	bl	80039c8 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	795b      	ldrb	r3, [r3, #5]
 80038d4:	461a      	mov	r2, r3
 80038d6:	2129      	movs	r1, #41	@ 0x29
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 f875 	bl	80039c8 <u8x8_gpio_call>
}    
 80038de:	bf00      	nop
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd90      	pop	{r4, r7, pc}

080038e6 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80038e6:	b590      	push	{r4, r7, lr}
 80038e8:	b085      	sub	sp, #20
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	4608      	mov	r0, r1
 80038f0:	4611      	mov	r1, r2
 80038f2:	461a      	mov	r2, r3
 80038f4:	4603      	mov	r3, r0
 80038f6:	70fb      	strb	r3, [r7, #3]
 80038f8:	460b      	mov	r3, r1
 80038fa:	70bb      	strb	r3, [r7, #2]
 80038fc:	4613      	mov	r3, r2
 80038fe:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8003900:	78fb      	ldrb	r3, [r7, #3]
 8003902:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8003904:	78bb      	ldrb	r3, [r7, #2]
 8003906:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8003908:	787b      	ldrb	r3, [r7, #1]
 800390a:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689c      	ldr	r4, [r3, #8]
 8003914:	f107 0308 	add.w	r3, r7, #8
 8003918:	2201      	movs	r2, #1
 800391a:	210f      	movs	r1, #15
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	47a0      	blx	r4
 8003920:	4603      	mov	r3, r0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	bd90      	pop	{r4, r7, pc}

0800392a <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 800392a:	b590      	push	{r4, r7, lr}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689c      	ldr	r4, [r3, #8]
 8003936:	2300      	movs	r3, #0
 8003938:	2200      	movs	r2, #0
 800393a:	2109      	movs	r1, #9
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	47a0      	blx	r4
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	bd90      	pop	{r4, r7, pc}

08003948 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8003948:	b590      	push	{r4, r7, lr}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689c      	ldr	r4, [r3, #8]
 8003954:	2300      	movs	r3, #0
 8003956:	2200      	movs	r2, #0
 8003958:	210a      	movs	r1, #10
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	bd90      	pop	{r4, r7, pc}

08003966 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8003966:	b590      	push	{r4, r7, lr}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
 800396e:	460b      	mov	r3, r1
 8003970:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689c      	ldr	r4, [r3, #8]
 8003976:	78fa      	ldrb	r2, [r7, #3]
 8003978:	2300      	movs	r3, #0
 800397a:	210b      	movs	r1, #11
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	47a0      	blx	r4
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	bd90      	pop	{r4, r7, pc}

08003988 <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 8003988:	b590      	push	{r4, r7, lr}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689c      	ldr	r4, [r3, #8]
 8003998:	78fa      	ldrb	r2, [r7, #3]
 800399a:	2300      	movs	r3, #0
 800399c:	210e      	movs	r1, #14
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	47a0      	blx	r4
}
 80039a2:	bf00      	nop
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd90      	pop	{r4, r7, pc}

080039aa <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80039aa:	b590      	push	{r4, r7, lr}
 80039ac:	b083      	sub	sp, #12
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689c      	ldr	r4, [r3, #8]
 80039b6:	2300      	movs	r3, #0
 80039b8:	2200      	movs	r2, #0
 80039ba:	2110      	movs	r1, #16
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	47a0      	blx	r4
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd90      	pop	{r4, r7, pc}

080039c8 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80039c8:	b590      	push	{r4, r7, lr}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	460b      	mov	r3, r1
 80039d2:	70fb      	strb	r3, [r7, #3]
 80039d4:	4613      	mov	r3, r2
 80039d6:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	695c      	ldr	r4, [r3, #20]
 80039dc:	78ba      	ldrb	r2, [r7, #2]
 80039de:	78f9      	ldrb	r1, [r7, #3]
 80039e0:	2300      	movs	r3, #0
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	47a0      	blx	r4
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd90      	pop	{r4, r7, pc}

080039ee <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b085      	sub	sp, #20
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	607b      	str	r3, [r7, #4]
 80039f8:	460b      	mov	r3, r1
 80039fa:	72fb      	strb	r3, [r7, #11]
 80039fc:	4613      	mov	r3, r2
 80039fe:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3714      	adds	r7, #20
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
	...

08003a10 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a11      	ldr	r2, [pc, #68]	@ (8003a68 <u8x8_SetupDefaults+0x58>)
 8003a22:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a10      	ldr	r2, [pc, #64]	@ (8003a68 <u8x8_SetupDefaults+0x58>)
 8003a28:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a0e      	ldr	r2, [pc, #56]	@ (8003a68 <u8x8_SetupDefaults+0x58>)
 8003a2e:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a0d      	ldr	r2, [pc, #52]	@ (8003a68 <u8x8_SetupDefaults+0x58>)
 8003a34:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	22ff      	movs	r2, #255	@ 0xff
 8003a50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	22ff      	movs	r2, #255	@ 0xff
 8003a58:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	080039ef 	.word	0x080039ef

08003a6c <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
 8003a78:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f7ff ffc8 	bl	8003a10 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f7ff ff46 	bl	800392a <u8x8_SetupMemory>
}
 8003a9e:	bf00      	nop
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <Expander_InitPinDirections>:
 * @param hi2c          Pointer to the I2C handle.
 * @param deviceAddress I2C address of the expander.
 * @return HAL_StatusTypeDef HAL_OK if successful, or an error code.
 */
HAL_StatusTypeDef Expander_InitPinDirections(I2C_HandleTypeDef *hi2c, uint8_t deviceAddress)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b088      	sub	sp, #32
 8003aaa:	af04      	add	r7, sp, #16
 8003aac:	6078      	str	r0, [r7, #4]
 8003aae:	460b      	mov	r3, r1
 8003ab0:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef status;
    uint8_t port0_config = 0;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	73bb      	strb	r3, [r7, #14]

    // Build Port 0 configuration mask using the defined direction macros:
    port0_config |= (ALERT_PIN_CELL_01_DIR   == PIN_INPUT) ? ALERT_PIN_CELL_01  : 0;
 8003ab6:	7bbb      	ldrb	r3, [r7, #14]
 8003ab8:	f043 0301 	orr.w	r3, r3, #1
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_VOLTAGE_01_DIR  == PIN_INPUT) ? CELL_01_VOLTAGE_01 : 0;
 8003ac0:	7bbb      	ldrb	r3, [r7, #14]
 8003ac2:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_VOLTAGE_02_DIR  == PIN_INPUT) ? CELL_01_VOLTAGE_02 : 0;
 8003ac4:	7bbb      	ldrb	r3, [r7, #14]
 8003ac6:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_VOLTAGE_03_DIR  == PIN_INPUT) ? CELL_01_VOLTAGE_03 : 0;
 8003ac8:	7bbb      	ldrb	r3, [r7, #14]
 8003aca:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_LED_01_DIR      == PIN_INPUT) ? CELL_01_LED_01     : 0;
 8003acc:	7bbb      	ldrb	r3, [r7, #14]
 8003ace:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_02_VOLTAGE_03_DIR  == PIN_INPUT) ? CELL_02_VOLTAGE_03 : 0;
 8003ad0:	7bbb      	ldrb	r3, [r7, #14]
 8003ad2:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_02_VOLTAGE_02_DIR  == PIN_INPUT) ? CELL_02_VOLTAGE_02 : 0;
 8003ad4:	7bbb      	ldrb	r3, [r7, #14]
 8003ad6:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_02_VOLTAGE_01_DIR  == PIN_INPUT) ? CELL_02_VOLTAGE_01 : 0;
 8003ad8:	7bbb      	ldrb	r3, [r7, #14]
 8003ada:	73bb      	strb	r3, [r7, #14]

    // For Port 1, use the corresponding direction macros if needed.
    // In this example, we build Port 1 configuration mask similarly:
    uint8_t port1_config = 0;
 8003adc:	2300      	movs	r3, #0
 8003ade:	737b      	strb	r3, [r7, #13]
    port1_config |= (ALERT_PIN_CELL_02_DIR   == PIN_INPUT) ? ALERT_PIN_CELL_02  : 0;
 8003ae0:	7b7b      	ldrb	r3, [r7, #13]
 8003ae2:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_02_LED_01_DIR      == PIN_INPUT) ? CELL_02_LED_01 	: 0;
 8003ae4:	7b7b      	ldrb	r3, [r7, #13]
 8003ae6:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_LED_01_DIR      == PIN_INPUT) ? CELL_03_LED_01 	: 0;
 8003ae8:	7b7b      	ldrb	r3, [r7, #13]
 8003aea:	737b      	strb	r3, [r7, #13]
    port1_config |= (EXPANDER_FAN_CTRL_DIR   == PIN_INPUT) ? EXPANDER_FAN_CTRL 	: 0;
 8003aec:	7b7b      	ldrb	r3, [r7, #13]
 8003aee:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_VOLTAGE_03_DIR  == PIN_INPUT) ? CELL_03_VOLTAGE_03	: 0;
 8003af0:	7b7b      	ldrb	r3, [r7, #13]
 8003af2:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_VOLTAGE_02_DIR  == PIN_INPUT) ? CELL_03_VOLTAGE_02 : 0;
 8003af4:	7b7b      	ldrb	r3, [r7, #13]
 8003af6:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_VOLTAGE_01_DIR  == PIN_INPUT) ? CELL_03_VOLTAGE_01 : 0;
 8003af8:	7b7b      	ldrb	r3, [r7, #13]
 8003afa:	737b      	strb	r3, [r7, #13]
    port1_config |= (ALERT_PIN_CELL_03_DIR   == PIN_INPUT) ? ALERT_PIN_CELL_03 	: 0;
 8003afc:	7b7b      	ldrb	r3, [r7, #13]
 8003afe:	737b      	strb	r3, [r7, #13]

    // Write configuration to Port 0 register.
    status = HAL_I2C_Mem_Write(hi2c,
 8003b00:	78fb      	ldrb	r3, [r7, #3]
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	b299      	uxth	r1, r3
 8003b08:	2364      	movs	r3, #100	@ 0x64
 8003b0a:	9302      	str	r3, [sp, #8]
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	9301      	str	r3, [sp, #4]
 8003b10:	f107 030e 	add.w	r3, r7, #14
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	2301      	movs	r3, #1
 8003b18:	2206      	movs	r2, #6
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f005 fb72 	bl	8009204 <HAL_I2C_Mem_Write>
 8003b20:	4603      	mov	r3, r0
 8003b22:	73fb      	strb	r3, [r7, #15]
                               PCA9535_REG_CONFIG_PORT0,
                               I2C_MEMADD_SIZE_8BIT,
                               &port0_config,
                               1,
                               EXPANDER_I2C_TIMEOUT);
    if (status != HAL_OK)
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <Expander_InitPinDirections+0x88>
    {
        return status;
 8003b2a:	7bfb      	ldrb	r3, [r7, #15]
 8003b2c:	e012      	b.n	8003b54 <Expander_InitPinDirections+0xae>
    }

    // Write configuration to Port 1 register.
    status = HAL_I2C_Mem_Write(hi2c,
 8003b2e:	78fb      	ldrb	r3, [r7, #3]
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	b299      	uxth	r1, r3
 8003b36:	2364      	movs	r3, #100	@ 0x64
 8003b38:	9302      	str	r3, [sp, #8]
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	9301      	str	r3, [sp, #4]
 8003b3e:	f107 030d 	add.w	r3, r7, #13
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	2301      	movs	r3, #1
 8003b46:	2207      	movs	r2, #7
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f005 fb5b 	bl	8009204 <HAL_I2C_Mem_Write>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	73fb      	strb	r3, [r7, #15]
                               PCA9535_REG_CONFIG_PORT1,
                               I2C_MEMADD_SIZE_8BIT,
                               &port1_config,
                               1,
                               EXPANDER_I2C_TIMEOUT);
    return status;
 8003b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <Expander_SetPinState>:
 */
HAL_StatusTypeDef Expander_SetPinState(I2C_HandleTypeDef *hi2c,
                                       uint8_t deviceAddress,
                                       uint16_t pin,
                                       uint8_t state)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b088      	sub	sp, #32
 8003b60:	af04      	add	r7, sp, #16
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	4608      	mov	r0, r1
 8003b66:	4611      	mov	r1, r2
 8003b68:	461a      	mov	r2, r3
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	70fb      	strb	r3, [r7, #3]
 8003b6e:	460b      	mov	r3, r1
 8003b70:	803b      	strh	r3, [r7, #0]
 8003b72:	4613      	mov	r3, r2
 8003b74:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef status;
    uint8_t regAddress;
    uint8_t currentOutput;

    // Determine which port the pin belongs to.
    if ((pin & 0xFF00) == 0)
 8003b76:	883b      	ldrh	r3, [r7, #0]
 8003b78:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d142      	bne.n	8003c06 <Expander_SetPinState+0xaa>
    {
        // Pin belongs to Port 0.
        regAddress = PCA9535_REG_OUTPUT_PORT0;
 8003b80:	2302      	movs	r3, #2
 8003b82:	73fb      	strb	r3, [r7, #15]
        status = HAL_I2C_Mem_Read(hi2c,
 8003b84:	78fb      	ldrb	r3, [r7, #3]
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	b299      	uxth	r1, r3
 8003b8c:	7bfb      	ldrb	r3, [r7, #15]
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	2364      	movs	r3, #100	@ 0x64
 8003b92:	9302      	str	r3, [sp, #8]
 8003b94:	2301      	movs	r3, #1
 8003b96:	9301      	str	r3, [sp, #4]
 8003b98:	f107 030c 	add.w	r3, r7, #12
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f005 fc29 	bl	80093f8 <HAL_I2C_Mem_Read>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	73bb      	strb	r3, [r7, #14]
                                  regAddress,
                                  I2C_MEMADD_SIZE_8BIT,
                                  &currentOutput,
                                  1,
                                  EXPANDER_I2C_TIMEOUT);
        if (status != HAL_OK) {
 8003baa:	7bbb      	ldrb	r3, [r7, #14]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <Expander_SetPinState+0x58>
            return status;
 8003bb0:	7bbb      	ldrb	r3, [r7, #14]
 8003bb2:	e073      	b.n	8003c9c <Expander_SetPinState+0x140>
        }
        if (state == HIGH) {
 8003bb4:	78bb      	ldrb	r3, [r7, #2]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d106      	bne.n	8003bc8 <Expander_SetPinState+0x6c>
            currentOutput |= (uint8_t)pin;
 8003bba:	883b      	ldrh	r3, [r7, #0]
 8003bbc:	b2da      	uxtb	r2, r3
 8003bbe:	7b3b      	ldrb	r3, [r7, #12]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	733b      	strb	r3, [r7, #12]
 8003bc6:	e009      	b.n	8003bdc <Expander_SetPinState+0x80>
        } else {
            currentOutput &= ~(uint8_t)pin;
 8003bc8:	883b      	ldrh	r3, [r7, #0]
 8003bca:	b25b      	sxtb	r3, r3
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	b25a      	sxtb	r2, r3
 8003bd0:	7b3b      	ldrb	r3, [r7, #12]
 8003bd2:	b25b      	sxtb	r3, r3
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	b25b      	sxtb	r3, r3
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	733b      	strb	r3, [r7, #12]
        }
        status = HAL_I2C_Mem_Write(hi2c,
 8003bdc:	78fb      	ldrb	r3, [r7, #3]
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	b299      	uxth	r1, r3
 8003be4:	7bfb      	ldrb	r3, [r7, #15]
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	2364      	movs	r3, #100	@ 0x64
 8003bea:	9302      	str	r3, [sp, #8]
 8003bec:	2301      	movs	r3, #1
 8003bee:	9301      	str	r3, [sp, #4]
 8003bf0:	f107 030c 	add.w	r3, r7, #12
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f005 fb03 	bl	8009204 <HAL_I2C_Mem_Write>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	73bb      	strb	r3, [r7, #14]
                                   regAddress,
                                   I2C_MEMADD_SIZE_8BIT,
                                   &currentOutput,
                                   1,
                                   EXPANDER_I2C_TIMEOUT);
        return status;
 8003c02:	7bbb      	ldrb	r3, [r7, #14]
 8003c04:	e04a      	b.n	8003c9c <Expander_SetPinState+0x140>
    }
    else if ((pin & 0x00FF) == 0)
 8003c06:	883b      	ldrh	r3, [r7, #0]
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d145      	bne.n	8003c9a <Expander_SetPinState+0x13e>
    {
        // Pin belongs to Port 1.
        regAddress = PCA9535_REG_OUTPUT_PORT1;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	73fb      	strb	r3, [r7, #15]
        status = HAL_I2C_Mem_Read(hi2c,
 8003c12:	78fb      	ldrb	r3, [r7, #3]
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	b299      	uxth	r1, r3
 8003c1a:	7bfb      	ldrb	r3, [r7, #15]
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	2364      	movs	r3, #100	@ 0x64
 8003c20:	9302      	str	r3, [sp, #8]
 8003c22:	2301      	movs	r3, #1
 8003c24:	9301      	str	r3, [sp, #4]
 8003c26:	f107 030c 	add.w	r3, r7, #12
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f005 fbe2 	bl	80093f8 <HAL_I2C_Mem_Read>
 8003c34:	4603      	mov	r3, r0
 8003c36:	73bb      	strb	r3, [r7, #14]
                                  regAddress,
                                  I2C_MEMADD_SIZE_8BIT,
                                  &currentOutput,
                                  1,
                                  EXPANDER_I2C_TIMEOUT);
        if (status != HAL_OK) {
 8003c38:	7bbb      	ldrb	r3, [r7, #14]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <Expander_SetPinState+0xe6>
            return status;
 8003c3e:	7bbb      	ldrb	r3, [r7, #14]
 8003c40:	e02c      	b.n	8003c9c <Expander_SetPinState+0x140>
        }
        uint8_t pin_mask = (uint8_t)(pin >> 8);
 8003c42:	883b      	ldrh	r3, [r7, #0]
 8003c44:	0a1b      	lsrs	r3, r3, #8
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	737b      	strb	r3, [r7, #13]
        if (state == HIGH) {
 8003c4a:	78bb      	ldrb	r3, [r7, #2]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d105      	bne.n	8003c5c <Expander_SetPinState+0x100>
            currentOutput |= pin_mask;
 8003c50:	7b3a      	ldrb	r2, [r7, #12]
 8003c52:	7b7b      	ldrb	r3, [r7, #13]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	733b      	strb	r3, [r7, #12]
 8003c5a:	e009      	b.n	8003c70 <Expander_SetPinState+0x114>
        } else {
            currentOutput &= ~pin_mask;
 8003c5c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003c60:	43db      	mvns	r3, r3
 8003c62:	b25a      	sxtb	r2, r3
 8003c64:	7b3b      	ldrb	r3, [r7, #12]
 8003c66:	b25b      	sxtb	r3, r3
 8003c68:	4013      	ands	r3, r2
 8003c6a:	b25b      	sxtb	r3, r3
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	733b      	strb	r3, [r7, #12]
        }
        status = HAL_I2C_Mem_Write(hi2c,
 8003c70:	78fb      	ldrb	r3, [r7, #3]
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	b299      	uxth	r1, r3
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	2364      	movs	r3, #100	@ 0x64
 8003c7e:	9302      	str	r3, [sp, #8]
 8003c80:	2301      	movs	r3, #1
 8003c82:	9301      	str	r3, [sp, #4]
 8003c84:	f107 030c 	add.w	r3, r7, #12
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f005 fab9 	bl	8009204 <HAL_I2C_Mem_Write>
 8003c92:	4603      	mov	r3, r0
 8003c94:	73bb      	strb	r3, [r7, #14]
                                   regAddress,
                                   I2C_MEMADD_SIZE_8BIT,
                                   &currentOutput,
                                   1,
                                   EXPANDER_I2C_TIMEOUT);
        return status;
 8003c96:	7bbb      	ldrb	r3, [r7, #14]
 8003c98:	e000      	b.n	8003c9c <Expander_SetPinState+0x140>
    }
    else {
        // Invalid pin mask.
        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
    }
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <Expander_InitAllDevices>:
 *
 * @param hi2c Pointer to the I2C handle.
 * @return HAL_StatusTypeDef HAL_OK if all devices are initialized successfully, or an error code.
 */
HAL_StatusTypeDef Expander_InitAllDevices(I2C_HandleTypeDef *hi2c)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;

    // List of expander addresses.
    uint8_t addresses[] = {
 8003cac:	4b11      	ldr	r3, [pc, #68]	@ (8003cf4 <Expander_InitAllDevices+0x50>)
 8003cae:	60bb      	str	r3, [r7, #8]
        GPIO_EXPANDER_ID_02,
        GPIO_EXPANDER_ID_03,
        GPIO_EXPANDER_ID_04
    };

    size_t count = sizeof(addresses) / sizeof(addresses[0]);
 8003cb0:	2304      	movs	r3, #4
 8003cb2:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < count; i++)
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	e012      	b.n	8003ce0 <Expander_InitAllDevices+0x3c>
    {
        status = Expander_InitPinDirections(hi2c, addresses[i]);
 8003cba:	f107 0208 	add.w	r2, r7, #8
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7ff feed 	bl	8003aa6 <Expander_InitPinDirections>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <Expander_InitAllDevices+0x36>
        {
            return status;
 8003cd6:	7bfb      	ldrb	r3, [r7, #15]
 8003cd8:	e007      	b.n	8003cea <Expander_InitAllDevices+0x46>
    for (size_t i = 0; i < count; i++)
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d3e8      	bcc.n	8003cba <Expander_InitAllDevices+0x16>
        }
    }
    return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	24232221 	.word	0x24232221

08003cf8 <get_cell_control_params>:


// Helper function to get the expander address and MUX control pin definitions for a given cell.
// Each cell has three control pins (S0, S1, S2) that drive your MUX select lines.
static void get_cell_control_params(CellID cell, uint8_t *expander_Address, uint16_t *v_set_pin_01, uint16_t *v_set_pin_02, uint16_t *v_set_pin_03 ,uint16_t *LED_PIN )
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60b9      	str	r1, [r7, #8]
 8003d00:	607a      	str	r2, [r7, #4]
 8003d02:	603b      	str	r3, [r7, #0]
 8003d04:	4603      	mov	r3, r0
 8003d06:	73fb      	strb	r3, [r7, #15]
    switch(cell)
 8003d08:	7bfb      	ldrb	r3, [r7, #15]
 8003d0a:	2b17      	cmp	r3, #23
 8003d0c:	f200 81dc 	bhi.w	80040c8 <get_cell_control_params+0x3d0>
 8003d10:	a201      	add	r2, pc, #4	@ (adr r2, 8003d18 <get_cell_control_params+0x20>)
 8003d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d16:	bf00      	nop
 8003d18:	08003d79 	.word	0x08003d79
 8003d1c:	08003d99 	.word	0x08003d99
 8003d20:	08003dbb 	.word	0x08003dbb
 8003d24:	08003de3 	.word	0x08003de3
 8003d28:	08003e03 	.word	0x08003e03
 8003d2c:	08003e25 	.word	0x08003e25
 8003d30:	08003e4d 	.word	0x08003e4d
 8003d34:	08003e6d 	.word	0x08003e6d
 8003d38:	08003e8f 	.word	0x08003e8f
 8003d3c:	08003eb7 	.word	0x08003eb7
 8003d40:	08003ed7 	.word	0x08003ed7
 8003d44:	08003ef9 	.word	0x08003ef9
 8003d48:	08003f21 	.word	0x08003f21
 8003d4c:	08003f41 	.word	0x08003f41
 8003d50:	08003f63 	.word	0x08003f63
 8003d54:	08003f8b 	.word	0x08003f8b
 8003d58:	08003fab 	.word	0x08003fab
 8003d5c:	08003fcd 	.word	0x08003fcd
 8003d60:	08003ff5 	.word	0x08003ff5
 8003d64:	08004015 	.word	0x08004015
 8003d68:	08004037 	.word	0x08004037
 8003d6c:	0800405f 	.word	0x0800405f
 8003d70:	0800407f 	.word	0x0800407f
 8003d74:	080040a1 	.word	0x080040a1
    {

    // for the cell 01 to 12
        case CELL_1:
            *expander_Address = GPIO_EXPANDER_ID_01;
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2221      	movs	r2, #33	@ 0x21
 8003d7c:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2202      	movs	r2, #2
 8003d82:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	2204      	movs	r2, #4
 8003d88:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	2208      	movs	r2, #8
 8003d8e:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	2210      	movs	r2, #16
 8003d94:	801a      	strh	r2, [r3, #0]
            break;
 8003d96:	e1a7      	b.n	80040e8 <get_cell_control_params+0x3f0>

        case CELL_2:
            *expander_Address = GPIO_EXPANDER_ID_01;
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	2221      	movs	r2, #33	@ 0x21
 8003d9c:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2280      	movs	r2, #128	@ 0x80
 8003da2:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	2240      	movs	r2, #64	@ 0x40
 8003da8:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	2220      	movs	r2, #32
 8003dae:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003db6:	801a      	strh	r2, [r3, #0]
            break;
 8003db8:	e196      	b.n	80040e8 <get_cell_control_params+0x3f0>

        case CELL_3:
            *expander_Address = GPIO_EXPANDER_ID_01;
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	2221      	movs	r2, #33	@ 0x21
 8003dbe:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003dc6:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003dce:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003dd6:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003dde:	801a      	strh	r2, [r3, #0]
            break;
 8003de0:	e182      	b.n	80040e8 <get_cell_control_params+0x3f0>

        case CELL_4:
            *expander_Address = GPIO_EXPANDER_ID_02;
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	2222      	movs	r2, #34	@ 0x22
 8003de6:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	2204      	movs	r2, #4
 8003df2:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	2208      	movs	r2, #8
 8003df8:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	2210      	movs	r2, #16
 8003dfe:	801a      	strh	r2, [r3, #0]
            break;
 8003e00:	e172      	b.n	80040e8 <get_cell_control_params+0x3f0>

        case CELL_5:
            *expander_Address = GPIO_EXPANDER_ID_02;
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	2222      	movs	r2, #34	@ 0x22
 8003e06:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2280      	movs	r2, #128	@ 0x80
 8003e0c:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	2240      	movs	r2, #64	@ 0x40
 8003e12:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	2220      	movs	r2, #32
 8003e18:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e20:	801a      	strh	r2, [r3, #0]
            break;
 8003e22:	e161      	b.n	80040e8 <get_cell_control_params+0x3f0>

        case CELL_6:
            *expander_Address = GPIO_EXPANDER_ID_02;
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2222      	movs	r2, #34	@ 0x22
 8003e28:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003e30:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e38:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003e40:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e48:	801a      	strh	r2, [r3, #0]
            break;
 8003e4a:	e14d      	b.n	80040e8 <get_cell_control_params+0x3f0>

        case CELL_7:
            *expander_Address = GPIO_EXPANDER_ID_03;
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	2223      	movs	r2, #35	@ 0x23
 8003e50:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2202      	movs	r2, #2
 8003e56:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	2204      	movs	r2, #4
 8003e5c:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	2208      	movs	r2, #8
 8003e62:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	2210      	movs	r2, #16
 8003e68:	801a      	strh	r2, [r3, #0]
            break;
 8003e6a:	e13d      	b.n	80040e8 <get_cell_control_params+0x3f0>

        case CELL_8:
            *expander_Address = GPIO_EXPANDER_ID_03;
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2223      	movs	r2, #35	@ 0x23
 8003e70:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2280      	movs	r2, #128	@ 0x80
 8003e76:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	2240      	movs	r2, #64	@ 0x40
 8003e7c:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	2220      	movs	r2, #32
 8003e82:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e8a:	801a      	strh	r2, [r3, #0]
            break;
 8003e8c:	e12c      	b.n	80040e8 <get_cell_control_params+0x3f0>

        case CELL_9:
            *expander_Address = GPIO_EXPANDER_ID_03;
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2223      	movs	r2, #35	@ 0x23
 8003e92:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003e9a:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ea2:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003eaa:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003eb2:	801a      	strh	r2, [r3, #0]
            break;
 8003eb4:	e118      	b.n	80040e8 <get_cell_control_params+0x3f0>

        case CELL_10:
            *expander_Address = GPIO_EXPANDER_ID_04;
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	2224      	movs	r2, #36	@ 0x24
 8003eba:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	2204      	movs	r2, #4
 8003ec6:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	2208      	movs	r2, #8
 8003ecc:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	2210      	movs	r2, #16
 8003ed2:	801a      	strh	r2, [r3, #0]
            break;
 8003ed4:	e108      	b.n	80040e8 <get_cell_control_params+0x3f0>

        case CELL_11:
            *expander_Address = GPIO_EXPANDER_ID_04;
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2224      	movs	r2, #36	@ 0x24
 8003eda:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2280      	movs	r2, #128	@ 0x80
 8003ee0:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2240      	movs	r2, #64	@ 0x40
 8003ee6:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	2220      	movs	r2, #32
 8003eec:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ef4:	801a      	strh	r2, [r3, #0]
            break;
 8003ef6:	e0f7      	b.n	80040e8 <get_cell_control_params+0x3f0>

        case CELL_12:
            *expander_Address = GPIO_EXPANDER_ID_04;
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	2224      	movs	r2, #36	@ 0x24
 8003efc:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003f04:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f0c:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003f14:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f1c:	801a      	strh	r2, [r3, #0]
            break;
 8003f1e:	e0e3      	b.n	80040e8 <get_cell_control_params+0x3f0>

            // for the cell 12 to 24

        case CELL_13:
            *expander_Address = GPIO_EXPANDER_ID_01;
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2221      	movs	r2, #33	@ 0x21
 8003f24:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2202      	movs	r2, #2
 8003f2a:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	2204      	movs	r2, #4
 8003f30:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	2208      	movs	r2, #8
 8003f36:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	2210      	movs	r2, #16
 8003f3c:	801a      	strh	r2, [r3, #0]

            break;
 8003f3e:	e0d3      	b.n	80040e8 <get_cell_control_params+0x3f0>

        case CELL_14:
            *expander_Address = GPIO_EXPANDER_ID_01;
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2221      	movs	r2, #33	@ 0x21
 8003f44:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2280      	movs	r2, #128	@ 0x80
 8003f4a:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	2240      	movs	r2, #64	@ 0x40
 8003f50:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	2220      	movs	r2, #32
 8003f56:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f5e:	801a      	strh	r2, [r3, #0]

            break;
 8003f60:	e0c2      	b.n	80040e8 <get_cell_control_params+0x3f0>

        case CELL_15:
            *expander_Address = GPIO_EXPANDER_ID_01;
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	2221      	movs	r2, #33	@ 0x21
 8003f66:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003f6e:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f76:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003f7e:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f86:	801a      	strh	r2, [r3, #0]
            break;
 8003f88:	e0ae      	b.n	80040e8 <get_cell_control_params+0x3f0>

        case CELL_16:
            *expander_Address = GPIO_EXPANDER_ID_02;
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2222      	movs	r2, #34	@ 0x22
 8003f8e:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2204      	movs	r2, #4
 8003f9a:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	2208      	movs	r2, #8
 8003fa0:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	2210      	movs	r2, #16
 8003fa6:	801a      	strh	r2, [r3, #0]
            break;
 8003fa8:	e09e      	b.n	80040e8 <get_cell_control_params+0x3f0>

        case CELL_17:
            *expander_Address = GPIO_EXPANDER_ID_02;
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2222      	movs	r2, #34	@ 0x22
 8003fae:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2280      	movs	r2, #128	@ 0x80
 8003fb4:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2240      	movs	r2, #64	@ 0x40
 8003fba:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fc8:	801a      	strh	r2, [r3, #0]
            break;
 8003fca:	e08d      	b.n	80040e8 <get_cell_control_params+0x3f0>

        case CELL_18:
            *expander_Address = GPIO_EXPANDER_ID_02;
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	2222      	movs	r2, #34	@ 0x22
 8003fd0:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003fd8:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003fe0:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003fe8:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ff0:	801a      	strh	r2, [r3, #0]
            break;
 8003ff2:	e079      	b.n	80040e8 <get_cell_control_params+0x3f0>

        case CELL_19:
            *expander_Address = GPIO_EXPANDER_ID_03;
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	2223      	movs	r2, #35	@ 0x23
 8003ff8:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	2204      	movs	r2, #4
 8004004:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	2208      	movs	r2, #8
 800400a:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	2210      	movs	r2, #16
 8004010:	801a      	strh	r2, [r3, #0]
            break;
 8004012:	e069      	b.n	80040e8 <get_cell_control_params+0x3f0>

        case CELL_20:
            *expander_Address = GPIO_EXPANDER_ID_03;
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2223      	movs	r2, #35	@ 0x23
 8004018:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2280      	movs	r2, #128	@ 0x80
 800401e:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	2240      	movs	r2, #64	@ 0x40
 8004024:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	2220      	movs	r2, #32
 800402a:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004032:	801a      	strh	r2, [r3, #0]
            break;
 8004034:	e058      	b.n	80040e8 <get_cell_control_params+0x3f0>

        case CELL_21:
            *expander_Address = GPIO_EXPANDER_ID_03;
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	2223      	movs	r2, #35	@ 0x23
 800403a:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004042:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800404a:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004052:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800405a:	801a      	strh	r2, [r3, #0]
            break;
 800405c:	e044      	b.n	80040e8 <get_cell_control_params+0x3f0>

        case CELL_22:
            *expander_Address = GPIO_EXPANDER_ID_04;
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2224      	movs	r2, #36	@ 0x24
 8004062:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	2204      	movs	r2, #4
 800406e:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	2208      	movs	r2, #8
 8004074:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	2210      	movs	r2, #16
 800407a:	801a      	strh	r2, [r3, #0]
            break;
 800407c:	e034      	b.n	80040e8 <get_cell_control_params+0x3f0>

        case CELL_23:
            *expander_Address = GPIO_EXPANDER_ID_04;
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2224      	movs	r2, #36	@ 0x24
 8004082:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2280      	movs	r2, #128	@ 0x80
 8004088:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	2240      	movs	r2, #64	@ 0x40
 800408e:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	2220      	movs	r2, #32
 8004094:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_02_LED_01;
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800409c:	801a      	strh	r2, [r3, #0]
            break;
 800409e:	e023      	b.n	80040e8 <get_cell_control_params+0x3f0>

        case CELL_24:
            *expander_Address = GPIO_EXPANDER_ID_04;
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	2224      	movs	r2, #36	@ 0x24
 80040a4:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80040ac:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80040b4:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80040bc:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_03_LED_01 ;
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80040c4:	801a      	strh	r2, [r3, #0]
            break;
 80040c6:	e00f      	b.n	80040e8 <get_cell_control_params+0x3f0>



        default:
            // Default to CELL_1 if an invalid cell is specified
            *expander_Address = GPIO_EXPANDER_ID_01;
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2221      	movs	r2, #33	@ 0x21
 80040cc:	701a      	strb	r2, [r3, #0]
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2202      	movs	r2, #2
 80040d2:	801a      	strh	r2, [r3, #0]
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	2204      	movs	r2, #4
 80040d8:	801a      	strh	r2, [r3, #0]
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	2208      	movs	r2, #8
 80040de:	801a      	strh	r2, [r3, #0]
            *LED_PIN  =     CELL_01_LED_01;
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	2210      	movs	r2, #16
 80040e4:	801a      	strh	r2, [r3, #0]
            break;
 80040e6:	bf00      	nop
    }
}
 80040e8:	bf00      	nop
 80040ea:	3714      	adds	r7, #20
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <Set_Output_Voltage>:

// Function to set the output voltage for a given cell by selecting the appropriate MUX channel.
// Example usage: Set_Output_Voltage(&hi2c2, CELL_1, 2.5f);
void Set_Output_Voltage( CellID cell, float voltage)
{
 80040f4:	b590      	push	{r4, r7, lr}
 80040f6:	b08b      	sub	sp, #44	@ 0x2c
 80040f8:	af02      	add	r7, sp, #8
 80040fa:	4603      	mov	r3, r0
 80040fc:	ed87 0a00 	vstr	s0, [r7]
 8004100:	71fb      	strb	r3, [r7, #7]

    // Get the correct I2C handle based on cell ID
    I2C_HandleTypeDef *target_i2c;
    if (cell <= 11) {
 8004102:	79fb      	ldrb	r3, [r7, #7]
 8004104:	2b0b      	cmp	r3, #11
 8004106:	d802      	bhi.n	800410e <Set_Output_Voltage+0x1a>
        target_i2c = &hi2c2;
 8004108:	4b2e      	ldr	r3, [pc, #184]	@ (80041c4 <Set_Output_Voltage+0xd0>)
 800410a:	61fb      	str	r3, [r7, #28]
 800410c:	e001      	b.n	8004112 <Set_Output_Voltage+0x1e>
    } else {
        target_i2c = &hi2c3;
 800410e:	4b2e      	ldr	r3, [pc, #184]	@ (80041c8 <Set_Output_Voltage+0xd4>)
 8004110:	61fb      	str	r3, [r7, #28]
    }

    // Look up the MUX channel for the desired voltage.
    uint8_t mux_channel = 0xFF;
 8004112:	23ff      	movs	r3, #255	@ 0xff
 8004114:	76fb      	strb	r3, [r7, #27]
    for (int i = 0; i < 8; i++) {
 8004116:	2300      	movs	r3, #0
 8004118:	617b      	str	r3, [r7, #20]
 800411a:	e016      	b.n	800414a <Set_Output_Voltage+0x56>
        if (default_map[i].voltage == voltage) {
 800411c:	4a2b      	ldr	r2, [pc, #172]	@ (80041cc <Set_Output_Voltage+0xd8>)
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	4413      	add	r3, r2
 8004124:	edd3 7a00 	vldr	s15, [r3]
 8004128:	ed97 7a00 	vldr	s14, [r7]
 800412c:	eeb4 7a67 	vcmp.f32	s14, s15
 8004130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004134:	d106      	bne.n	8004144 <Set_Output_Voltage+0x50>
            mux_channel = default_map[i].mux_channel;
 8004136:	4a25      	ldr	r2, [pc, #148]	@ (80041cc <Set_Output_Voltage+0xd8>)
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	4413      	add	r3, r2
 800413e:	791b      	ldrb	r3, [r3, #4]
 8004140:	76fb      	strb	r3, [r7, #27]
            break;
 8004142:	e005      	b.n	8004150 <Set_Output_Voltage+0x5c>
    for (int i = 0; i < 8; i++) {
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	3301      	adds	r3, #1
 8004148:	617b      	str	r3, [r7, #20]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2b07      	cmp	r3, #7
 800414e:	dde5      	ble.n	800411c <Set_Output_Voltage+0x28>
        }
    }
    if (mux_channel == 0xFF) return; // Voltage not found
 8004150:	7efb      	ldrb	r3, [r7, #27]
 8004152:	2bff      	cmp	r3, #255	@ 0xff
 8004154:	d032      	beq.n	80041bc <Set_Output_Voltage+0xc8>

    // Convert mux_channel into its 3 select bits.This is use for the Analog mux switch
    uint8_t ANG_MUX_PIN_A = (mux_channel >> 0) & 0x01;
 8004156:	7efb      	ldrb	r3, [r7, #27]
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	74fb      	strb	r3, [r7, #19]
    uint8_t ANG_MUX_PIN_B = (mux_channel >> 1) & 0x01;
 800415e:	7efb      	ldrb	r3, [r7, #27]
 8004160:	085b      	lsrs	r3, r3, #1
 8004162:	b2db      	uxtb	r3, r3
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	74bb      	strb	r3, [r7, #18]
    uint8_t ANG_MUX_PIN_C = (mux_channel >> 2) & 0x01;
 800416a:	7efb      	ldrb	r3, [r7, #27]
 800416c:	089b      	lsrs	r3, r3, #2
 800416e:	b2db      	uxtb	r3, r3
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	747b      	strb	r3, [r7, #17]

    // Get the expander address and control pins for this cell.
    uint8_t expander_Address;
    uint16_t v_set_pin_01, v_set_pin_02, v_set_pin_03, LED_PIN ;
    get_cell_control_params(cell, &expander_Address, &v_set_pin_01, &v_set_pin_02, &v_set_pin_03 ,&LED_PIN);
 8004176:	f107 040c 	add.w	r4, r7, #12
 800417a:	f107 020e 	add.w	r2, r7, #14
 800417e:	f107 0110 	add.w	r1, r7, #16
 8004182:	79f8      	ldrb	r0, [r7, #7]
 8004184:	f107 0308 	add.w	r3, r7, #8
 8004188:	9301      	str	r3, [sp, #4]
 800418a:	f107 030a 	add.w	r3, r7, #10
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	4623      	mov	r3, r4
 8004192:	f7ff fdb1 	bl	8003cf8 <get_cell_control_params>

    // Set the multiplexer select lines accordingly.
    Expander_SetPinState(target_i2c, expander_Address, v_set_pin_01, ANG_MUX_PIN_A);
 8004196:	7c39      	ldrb	r1, [r7, #16]
 8004198:	89fa      	ldrh	r2, [r7, #14]
 800419a:	7cfb      	ldrb	r3, [r7, #19]
 800419c:	69f8      	ldr	r0, [r7, #28]
 800419e:	f7ff fcdd 	bl	8003b5c <Expander_SetPinState>
    Expander_SetPinState(target_i2c, expander_Address, v_set_pin_02, ANG_MUX_PIN_B);
 80041a2:	7c39      	ldrb	r1, [r7, #16]
 80041a4:	89ba      	ldrh	r2, [r7, #12]
 80041a6:	7cbb      	ldrb	r3, [r7, #18]
 80041a8:	69f8      	ldr	r0, [r7, #28]
 80041aa:	f7ff fcd7 	bl	8003b5c <Expander_SetPinState>
    Expander_SetPinState(target_i2c, expander_Address, v_set_pin_03, ANG_MUX_PIN_C);
 80041ae:	7c39      	ldrb	r1, [r7, #16]
 80041b0:	897a      	ldrh	r2, [r7, #10]
 80041b2:	7c7b      	ldrb	r3, [r7, #17]
 80041b4:	69f8      	ldr	r0, [r7, #28]
 80041b6:	f7ff fcd1 	bl	8003b5c <Expander_SetPinState>
 80041ba:	e000      	b.n	80041be <Set_Output_Voltage+0xca>
    if (mux_channel == 0xFF) return; // Voltage not found
 80041bc:	bf00      	nop
}
 80041be:	3724      	adds	r7, #36	@ 0x24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd90      	pop	{r4, r7, pc}
 80041c4:	20001828 	.word	0x20001828
 80041c8:	2000187c 	.word	0x2000187c
 80041cc:	20000568 	.word	0x20000568

080041d0 <Set_LED_status>:

void Set_LED_status ( CellID cell, uint8_t LED_state)

{
 80041d0:	b590      	push	{r4, r7, lr}
 80041d2:	b089      	sub	sp, #36	@ 0x24
 80041d4:	af02      	add	r7, sp, #8
 80041d6:	4603      	mov	r3, r0
 80041d8:	460a      	mov	r2, r1
 80041da:	71fb      	strb	r3, [r7, #7]
 80041dc:	4613      	mov	r3, r2
 80041de:	71bb      	strb	r3, [r7, #6]

    // Get the correct I2C handle based on cell ID
    I2C_HandleTypeDef *target_i2c;
    if (cell <= 11) {
 80041e0:	79fb      	ldrb	r3, [r7, #7]
 80041e2:	2b0b      	cmp	r3, #11
 80041e4:	d802      	bhi.n	80041ec <Set_LED_status+0x1c>
        target_i2c = &hi2c2;
 80041e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004224 <Set_LED_status+0x54>)
 80041e8:	617b      	str	r3, [r7, #20]
 80041ea:	e001      	b.n	80041f0 <Set_LED_status+0x20>
    } else {
        target_i2c = &hi2c3;
 80041ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004228 <Set_LED_status+0x58>)
 80041ee:	617b      	str	r3, [r7, #20]

    // Get the expander address and control pins for this cell.
    uint8_t expander_Address;
    uint16_t v_set_pin_01, v_set_pin_02, v_set_pin_03, LED_PIN;

    get_cell_control_params(cell, &expander_Address, &v_set_pin_01, &v_set_pin_02, &v_set_pin_03 ,&LED_PIN);
 80041f0:	f107 040e 	add.w	r4, r7, #14
 80041f4:	f107 0210 	add.w	r2, r7, #16
 80041f8:	f107 0113 	add.w	r1, r7, #19
 80041fc:	79f8      	ldrb	r0, [r7, #7]
 80041fe:	f107 030a 	add.w	r3, r7, #10
 8004202:	9301      	str	r3, [sp, #4]
 8004204:	f107 030c 	add.w	r3, r7, #12
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	4623      	mov	r3, r4
 800420c:	f7ff fd74 	bl	8003cf8 <get_cell_control_params>

    // Set the multiplexer select lines accordingly.
    Expander_SetPinState(target_i2c, expander_Address, LED_PIN, LED_state);
 8004210:	7cf9      	ldrb	r1, [r7, #19]
 8004212:	897a      	ldrh	r2, [r7, #10]
 8004214:	79bb      	ldrb	r3, [r7, #6]
 8004216:	6978      	ldr	r0, [r7, #20]
 8004218:	f7ff fca0 	bl	8003b5c <Expander_SetPinState>

}
 800421c:	bf00      	nop
 800421e:	371c      	adds	r7, #28
 8004220:	46bd      	mov	sp, r7
 8004222:	bd90      	pop	{r4, r7, pc}
 8004224:	20001828 	.word	0x20001828
 8004228:	2000187c 	.word	0x2000187c

0800422c <INA229_writeReg>:
/*
 *  ======== INA229_writeReg ========
 * Write register
 */
void INA229_writeReg(INA229_Handle sensor, uint8_t regAddr, uint16_t value)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af02      	add	r7, sp, #8
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	460b      	mov	r3, r1
 8004236:	70fb      	strb	r3, [r7, #3]
 8004238:	4613      	mov	r3, r2
 800423a:	803b      	strh	r3, [r7, #0]
    uint8_t txBuf[3] = {0}; //All writable registers are 2 bytes
 800423c:	f107 030c 	add.w	r3, r7, #12
 8004240:	2100      	movs	r1, #0
 8004242:	460a      	mov	r2, r1
 8004244:	801a      	strh	r2, [r3, #0]
 8004246:	460a      	mov	r2, r1
 8004248:	709a      	strb	r2, [r3, #2]
    uint8_t rxBuf[3] = {0};
 800424a:	f107 0308 	add.w	r3, r7, #8
 800424e:	2100      	movs	r1, #0
 8004250:	460a      	mov	r2, r1
 8004252:	801a      	strh	r2, [r3, #0]
 8004254:	460a      	mov	r2, r1
 8004256:	709a      	strb	r2, [r3, #2]

    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8004258:	78fb      	ldrb	r3, [r7, #3]
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	b2db      	uxtb	r3, r3
 800425e:	733b      	strb	r3, [r7, #12]
    txBuf[1] = MSB(value);
 8004260:	883b      	ldrh	r3, [r7, #0]
 8004262:	0a1b      	lsrs	r3, r3, #8
 8004264:	b29b      	uxth	r3, r3
 8004266:	b2db      	uxtb	r3, r3
 8004268:	737b      	strb	r3, [r7, #13]
    txBuf[2] = LSB(value);
 800426a:	883b      	ldrh	r3, [r7, #0]
 800426c:	b2db      	uxtb	r3, r3
 800426e:	73bb      	strb	r3, [r7, #14]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	7f18      	ldrb	r0, [r3, #28]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	7f59      	ldrb	r1, [r3, #29]
 8004278:	f107 020c 	add.w	r2, r7, #12
 800427c:	f107 0308 	add.w	r3, r7, #8
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	4613      	mov	r3, r2
 8004284:	2203      	movs	r2, #3
 8004286:	f000 f97d 	bl	8004584 <mcu_spiTransfer>

    //check for change in ADCRANGE 
    if(regAddr == INA229_config_register)
 800428a:	78fb      	ldrb	r3, [r7, #3]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d105      	bne.n	800429c <INA229_writeReg+0x70>
    {
        sensor->adcrange = value & INA229_config_register_adcrange_4096mV;
 8004290:	883b      	ldrh	r3, [r7, #0]
 8004292:	f003 0310 	and.w	r3, r3, #16
 8004296:	b29a      	uxth	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	82da      	strh	r2, [r3, #22]
    }
}
 800429c:	bf00      	nop
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <INA229_config>:
/*
 *  ======== INA229_config ========
 * Configure device with current settings.
 */
void INA229_config(INA229_Handle sensor)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
    //Initialize the bus containing this sensor
    mcu_spiInit(sensor->busId);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	7f1b      	ldrb	r3, [r3, #28]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 f95b 	bl	800456c <mcu_spiInit>

    //Write sensor Configuration Registers
    INA229_writeReg(sensor, INA229_config_register, sensor->configRegister);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	881b      	ldrh	r3, [r3, #0]
 80042ba:	461a      	mov	r2, r3
 80042bc:	2100      	movs	r1, #0
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7ff ffb4 	bl	800422c <INA229_writeReg>
    INA229_writeReg(sensor, INA229_adc_config_register, sensor->adcConfigRegister);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	885b      	ldrh	r3, [r3, #2]
 80042c8:	461a      	mov	r2, r3
 80042ca:	2101      	movs	r1, #1
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f7ff ffad 	bl	800422c <INA229_writeReg>
    INA229_writeReg(sensor, INA229_shunt_cal_register, sensor->shuntCalRegister);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	889b      	ldrh	r3, [r3, #4]
 80042d6:	461a      	mov	r2, r3
 80042d8:	2102      	movs	r1, #2
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7ff ffa6 	bl	800422c <INA229_writeReg>
    INA229_writeReg(sensor, INA229_shunt_tempco_register, sensor->shuntTempcoRegister);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	88db      	ldrh	r3, [r3, #6]
 80042e4:	461a      	mov	r2, r3
 80042e6:	2103      	movs	r1, #3
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f7ff ff9f 	bl	800422c <INA229_writeReg>
    INA229_writeReg(sensor, INA229_diag_alrt_register, sensor->diagAlrtRegister);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	891b      	ldrh	r3, [r3, #8]
 80042f2:	461a      	mov	r2, r3
 80042f4:	210b      	movs	r1, #11
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7ff ff98 	bl	800422c <INA229_writeReg>
    INA229_writeReg(sensor, INA229_sovl_register, sensor->sovlRegister);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	895b      	ldrh	r3, [r3, #10]
 8004300:	461a      	mov	r2, r3
 8004302:	210c      	movs	r1, #12
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f7ff ff91 	bl	800422c <INA229_writeReg>
    INA229_writeReg(sensor, INA229_suvl_register, sensor->suvlRegister);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	899b      	ldrh	r3, [r3, #12]
 800430e:	461a      	mov	r2, r3
 8004310:	210d      	movs	r1, #13
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7ff ff8a 	bl	800422c <INA229_writeReg>
    INA229_writeReg(sensor, INA229_bovl_register, sensor->bovlRegister);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	89db      	ldrh	r3, [r3, #14]
 800431c:	461a      	mov	r2, r3
 800431e:	210e      	movs	r1, #14
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f7ff ff83 	bl	800422c <INA229_writeReg>
    INA229_writeReg(sensor, INA229_buvl_register, sensor->buvlRegister);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	8a1b      	ldrh	r3, [r3, #16]
 800432a:	461a      	mov	r2, r3
 800432c:	210f      	movs	r1, #15
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7ff ff7c 	bl	800422c <INA229_writeReg>
    INA229_writeReg(sensor, INA229_temp_limit_register, sensor->tempLimitRegister);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	8a5b      	ldrh	r3, [r3, #18]
 8004338:	461a      	mov	r2, r3
 800433a:	2110      	movs	r1, #16
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f7ff ff75 	bl	800422c <INA229_writeReg>
    INA229_writeReg(sensor, INA229_pwr_limit_register, sensor->pwrLimitRegister);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	8a9b      	ldrh	r3, [r3, #20]
 8004346:	461a      	mov	r2, r3
 8004348:	2111      	movs	r1, #17
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7ff ff6e 	bl	800422c <INA229_writeReg>

}
 8004350:	bf00      	nop
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <INA229_readReg>:
/*
 *  ======== INA229_readReg ========
 *  Read register
 */
uint64_t INA229_readReg(INA229_Handle sensor, uint8_t regAddr)
{
 8004358:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800435c:	b08b      	sub	sp, #44	@ 0x2c
 800435e:	af02      	add	r7, sp, #8
 8004360:	6078      	str	r0, [r7, #4]
 8004362:	460b      	mov	r3, r1
 8004364:	70fb      	strb	r3, [r7, #3]
    uint64_t value;
    int i;
    
    uint8_t txBuf[1] = {0};
 8004366:	2300      	movs	r3, #0
 8004368:	743b      	strb	r3, [r7, #16]
    uint8_t rxBuf[6] = {0}; //max buffer size
 800436a:	f107 0308 	add.w	r3, r7, #8
 800436e:	2200      	movs	r2, #0
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	809a      	strh	r2, [r3, #4]

    txBuf[0] = (regAddr << 2 ) | 0x01; //Address + read bit (ending in 1)
 8004374:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	b25b      	sxtb	r3, r3
 800437c:	f043 0301 	orr.w	r3, r3, #1
 8004380:	b25b      	sxtb	r3, r3
 8004382:	b2db      	uxtb	r3, r3
 8004384:	743b      	strb	r3, [r7, #16]

    //Read register
    mcu_spiTransfer(sensor->busId, sensor->devCS, INA229_regSize[regAddr]+1, txBuf, rxBuf);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	7f18      	ldrb	r0, [r3, #28]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	7f59      	ldrb	r1, [r3, #29]
 800438e:	78fb      	ldrb	r3, [r7, #3]
 8004390:	4a1f      	ldr	r2, [pc, #124]	@ (8004410 <INA229_readReg+0xb8>)
 8004392:	5cd3      	ldrb	r3, [r2, r3]
 8004394:	3301      	adds	r3, #1
 8004396:	b2da      	uxtb	r2, r3
 8004398:	f107 0610 	add.w	r6, r7, #16
 800439c:	f107 0308 	add.w	r3, r7, #8
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	4633      	mov	r3, r6
 80043a4:	f000 f8ee 	bl	8004584 <mcu_spiTransfer>

    //Combine bytes
    value = 0; // initialize to 0, toss rxBuf[0];
 80043a8:	f04f 0200 	mov.w	r2, #0
 80043ac:	f04f 0300 	mov.w	r3, #0
 80043b0:	e9c7 2306 	strd	r2, r3, [r7, #24]

    for(i = 1; i < INA229_regSize[regAddr]+1; i++)
 80043b4:	2301      	movs	r3, #1
 80043b6:	617b      	str	r3, [r7, #20]
 80043b8:	e01b      	b.n	80043f2 <INA229_readReg+0x9a>
    {
        value = (value << 8) | rxBuf[i];
 80043ba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80043be:	f04f 0200 	mov.w	r2, #0
 80043c2:	f04f 0300 	mov.w	r3, #0
 80043c6:	020b      	lsls	r3, r1, #8
 80043c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80043cc:	0202      	lsls	r2, r0, #8
 80043ce:	f107 0008 	add.w	r0, r7, #8
 80043d2:	6979      	ldr	r1, [r7, #20]
 80043d4:	4401      	add	r1, r0
 80043d6:	7809      	ldrb	r1, [r1, #0]
 80043d8:	b2c9      	uxtb	r1, r1
 80043da:	2000      	movs	r0, #0
 80043dc:	460c      	mov	r4, r1
 80043de:	4605      	mov	r5, r0
 80043e0:	ea42 0804 	orr.w	r8, r2, r4
 80043e4:	ea43 0905 	orr.w	r9, r3, r5
 80043e8:	e9c7 8906 	strd	r8, r9, [r7, #24]
    for(i = 1; i < INA229_regSize[regAddr]+1; i++)
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	3301      	adds	r3, #1
 80043f0:	617b      	str	r3, [r7, #20]
 80043f2:	78fb      	ldrb	r3, [r7, #3]
 80043f4:	4a06      	ldr	r2, [pc, #24]	@ (8004410 <INA229_readReg+0xb8>)
 80043f6:	5cd3      	ldrb	r3, [r2, r3]
 80043f8:	461a      	mov	r2, r3
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	4293      	cmp	r3, r2
 80043fe:	dddc      	ble.n	80043ba <INA229_readReg+0x62>
    }

    return value;
 8004400:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8004404:	4610      	mov	r0, r2
 8004406:	4619      	mov	r1, r3
 8004408:	3724      	adds	r7, #36	@ 0x24
 800440a:	46bd      	mov	sp, r7
 800440c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004410:	0800d7cc 	.word	0x0800d7cc
 8004414:	00000000 	.word	0x00000000

08004418 <INA229_getVBUS_V>:
/*
 *  ======== INA229_getVBUS_V ========
 *  Get VBUS value (V)
 */
float INA229_getVBUS_V(INA229_Handle sensor)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
    uint64_t value = INA229_readReg(sensor, INA229_vbus_register);
 8004420:	2105      	movs	r1, #5
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f7ff ff98 	bl	8004358 <INA229_readReg>
 8004428:	e9c7 0102 	strd	r0, r1, [r7, #8]
    float data;

    //Remove reserved bits
    value = value >> 4;
 800442c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	f04f 0300 	mov.w	r3, #0
 8004438:	0902      	lsrs	r2, r0, #4
 800443a:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800443e:	090b      	lsrs	r3, r1, #4
 8004440:	e9c7 2302 	strd	r2, r3, [r7, #8]

    //Convert for 2's compliment and signed value (though always positive)
    if(value > 0x7FFFF)
 8004444:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004448:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 800444c:	f173 0300 	sbcs.w	r3, r3, #0
 8004450:	d30c      	bcc.n	800446c <INA229_getVBUS_V+0x54>
    {
        data = (float)value - 0x100000; //left for redundancy and error checking, should never get used
 8004452:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004456:	f7fc fbd9 	bl	8000c0c <__aeabi_ul2f>
 800445a:	ee07 0a10 	vmov	s14, r0
 800445e:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 80044d0 <INA229_getVBUS_V+0xb8>
 8004462:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004466:	edc7 7a05 	vstr	s15, [r7, #20]
 800446a:	e005      	b.n	8004478 <INA229_getVBUS_V+0x60>
    }
    else
    {
        data = (float)value;
 800446c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004470:	f7fc fbcc 	bl	8000c0c <__aeabi_ul2f>
 8004474:	4603      	mov	r3, r0
 8004476:	617b      	str	r3, [r7, #20]
    }

    //Convert to V
    data = (data * 195.3125) / 1000000;
 8004478:	6978      	ldr	r0, [r7, #20]
 800447a:	f7fc f81d 	bl	80004b8 <__aeabi_f2d>
 800447e:	a310      	add	r3, pc, #64	@ (adr r3, 80044c0 <INA229_getVBUS_V+0xa8>)
 8004480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004484:	f7fc f870 	bl	8000568 <__aeabi_dmul>
 8004488:	4602      	mov	r2, r0
 800448a:	460b      	mov	r3, r1
 800448c:	4610      	mov	r0, r2
 800448e:	4619      	mov	r1, r3
 8004490:	a30d      	add	r3, pc, #52	@ (adr r3, 80044c8 <INA229_getVBUS_V+0xb0>)
 8004492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004496:	f7fc f991 	bl	80007bc <__aeabi_ddiv>
 800449a:	4602      	mov	r2, r0
 800449c:	460b      	mov	r3, r1
 800449e:	4610      	mov	r0, r2
 80044a0:	4619      	mov	r1, r3
 80044a2:	f7fc fa9b 	bl	80009dc <__aeabi_d2f>
 80044a6:	4603      	mov	r3, r0
 80044a8:	617b      	str	r3, [r7, #20]

    return data;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	ee07 3a90 	vmov	s15, r3
}
 80044b0:	eeb0 0a67 	vmov.f32	s0, s15
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	f3af 8000 	nop.w
 80044c0:	00000000 	.word	0x00000000
 80044c4:	40686a00 	.word	0x40686a00
 80044c8:	00000000 	.word	0x00000000
 80044cc:	412e8480 	.word	0x412e8480
 80044d0:	49800000 	.word	0x49800000

080044d4 <INA229_getDIETEMP_C>:
/*
 *  ======== INA229_getDIETEMP_C ========
 *  Get DIETMEP value (C)
 */
float INA229_getDIETEMP_C(INA229_Handle sensor)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
    uint64_t value = INA229_readReg(sensor, INA229_dietemp_register);
 80044dc:	2106      	movs	r1, #6
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7ff ff3a 	bl	8004358 <INA229_readReg>
 80044e4:	e9c7 0102 	strd	r0, r1, [r7, #8]
    float data;

    //Convert for 2's compliment and signed value
    if(value > 0x7FFF)
 80044e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044ec:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80044f0:	f173 0300 	sbcs.w	r3, r3, #0
 80044f4:	d30c      	bcc.n	8004510 <INA229_getDIETEMP_C+0x3c>
    {
        data = (float)value - 0x10000; 
 80044f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80044fa:	f7fc fb87 	bl	8000c0c <__aeabi_ul2f>
 80044fe:	ee07 0a10 	vmov	s14, r0
 8004502:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8004560 <INA229_getDIETEMP_C+0x8c>
 8004506:	ee77 7a67 	vsub.f32	s15, s14, s15
 800450a:	edc7 7a05 	vstr	s15, [r7, #20]
 800450e:	e005      	b.n	800451c <INA229_getDIETEMP_C+0x48>
    }
    else
    {
        data = (float)value;
 8004510:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004514:	f7fc fb7a 	bl	8000c0c <__aeabi_ul2f>
 8004518:	4603      	mov	r3, r0
 800451a:	617b      	str	r3, [r7, #20]
    }

    //Convert to C
    data = (data * 7.8125) / 1000;
 800451c:	6978      	ldr	r0, [r7, #20]
 800451e:	f7fb ffcb 	bl	80004b8 <__aeabi_f2d>
 8004522:	f04f 0200 	mov.w	r2, #0
 8004526:	4b0f      	ldr	r3, [pc, #60]	@ (8004564 <INA229_getDIETEMP_C+0x90>)
 8004528:	f7fc f81e 	bl	8000568 <__aeabi_dmul>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	4610      	mov	r0, r2
 8004532:	4619      	mov	r1, r3
 8004534:	f04f 0200 	mov.w	r2, #0
 8004538:	4b0b      	ldr	r3, [pc, #44]	@ (8004568 <INA229_getDIETEMP_C+0x94>)
 800453a:	f7fc f93f 	bl	80007bc <__aeabi_ddiv>
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	4610      	mov	r0, r2
 8004544:	4619      	mov	r1, r3
 8004546:	f7fc fa49 	bl	80009dc <__aeabi_d2f>
 800454a:	4603      	mov	r3, r0
 800454c:	617b      	str	r3, [r7, #20]

    return data;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	ee07 3a90 	vmov	s15, r3
}
 8004554:	eeb0 0a67 	vmov.f32	s0, s15
 8004558:	3718      	adds	r7, #24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	47800000 	.word	0x47800000
 8004564:	401f4000 	.word	0x401f4000
 8004568:	408f4000 	.word	0x408f4000

0800456c <mcu_spiInit>:



/********* MCU SPECIFIC SPI CODE STARTS HERE **********/
void mcu_spiInit(uint8_t busId)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	4603      	mov	r3, r0
 8004574:	71fb      	strb	r3, [r7, #7]
    /* Add MCU specific init necessary for I2C to be used */




}
 8004576:	bf00      	nop
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
	...

08004584 <mcu_spiTransfer>:

uint8_t mcu_spiTransfer(uint8_t busId, uint8_t csGPIOId, uint8_t count, uint8_t* txBuf, uint8_t* rxBuf)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af02      	add	r7, sp, #8
 800458a:	603b      	str	r3, [r7, #0]
 800458c:	4603      	mov	r3, r0
 800458e:	71fb      	strb	r3, [r7, #7]
 8004590:	460b      	mov	r3, r1
 8004592:	71bb      	strb	r3, [r7, #6]
 8004594:	4613      	mov	r3, r2
 8004596:	717b      	strb	r3, [r7, #5]
    /*
     *  Add MCU specific SPI read/write code here.
     */

    SPI_HandleTypeDef *hspi = NULL; // Declare local SPI handle variable
 8004598:	2300      	movs	r3, #0
 800459a:	60fb      	str	r3, [r7, #12]

    // Select the SPI handle based on the busId value
    if(busId == 0)
 800459c:	79fb      	ldrb	r3, [r7, #7]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d102      	bne.n	80045a8 <mcu_spiTransfer+0x24>
    {
        hspi = &hspi1;  // Map busId 0 to SPI1
 80045a2:	4b0f      	ldr	r3, [pc, #60]	@ (80045e0 <mcu_spiTransfer+0x5c>)
 80045a4:	60fb      	str	r3, [r7, #12]
 80045a6:	e007      	b.n	80045b8 <mcu_spiTransfer+0x34>
    }
    else if(busId == 1)
 80045a8:	79fb      	ldrb	r3, [r7, #7]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d102      	bne.n	80045b4 <mcu_spiTransfer+0x30>
    {
        hspi = &hspi2;  // Map busId 1 to SPI2
 80045ae:	4b0d      	ldr	r3, [pc, #52]	@ (80045e4 <mcu_spiTransfer+0x60>)
 80045b0:	60fb      	str	r3, [r7, #12]
 80045b2:	e001      	b.n	80045b8 <mcu_spiTransfer+0x34>
    }
    else
    {
        // Invalid bus id, return error
        return 1;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e00f      	b.n	80045d8 <mcu_spiTransfer+0x54>
    }
//    HAL_SPI_TransmitReceive(hspi, txBuf, rxBuf, count, HAL_MAX_DELAY);
    // Perform the SPI transfer using the selected SPI handle
    if (HAL_SPI_TransmitReceive(hspi, txBuf, rxBuf, count, HAL_MAX_DELAY) != HAL_OK)
 80045b8:	797b      	ldrb	r3, [r7, #5]
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	f04f 32ff 	mov.w	r2, #4294967295
 80045c0:	9200      	str	r2, [sp, #0]
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	6839      	ldr	r1, [r7, #0]
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f006 fcb6 	bl	800af38 <HAL_SPI_TransmitReceive>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <mcu_spiTransfer+0x52>
    {
        return 1; // SPI transaction failed
 80045d2:	2301      	movs	r3, #1
 80045d4:	e000      	b.n	80045d8 <mcu_spiTransfer+0x54>
    }
    return 0; // Transaction successful
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	200018d0 	.word	0x200018d0
 80045e4:	20001928 	.word	0x20001928

080045e8 <LTC6811_init_reg_limits>:

/* Initialize the Register limits */
void LTC6811_init_reg_limits(uint8_t total_ic, //The number of ICs in the system
        cell_asic *ic  //A two dimensional array where data will be written
        )
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	4603      	mov	r3, r0
 80045f0:	6039      	str	r1, [r7, #0]
 80045f2:	71fb      	strb	r3, [r7, #7]
    uint8_t cic;
    for (cic = 0; cic < total_ic; cic++)
 80045f4:	2300      	movs	r3, #0
 80045f6:	73fb      	strb	r3, [r7, #15]
 80045f8:	e044      	b.n	8004684 <LTC6811_init_reg_limits+0x9c>
    {
        ic[cic].ic_reg.cell_channels = 12;
 80045fa:	7bfa      	ldrb	r2, [r7, #15]
 80045fc:	4613      	mov	r3, r2
 80045fe:	019b      	lsls	r3, r3, #6
 8004600:	4413      	add	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	461a      	mov	r2, r3
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	4413      	add	r3, r2
 800460a:	220c      	movs	r2, #12
 800460c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
        ic[cic].ic_reg.stat_channels = 4;
 8004610:	7bfa      	ldrb	r2, [r7, #15]
 8004612:	4613      	mov	r3, r2
 8004614:	019b      	lsls	r3, r3, #6
 8004616:	4413      	add	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	461a      	mov	r2, r3
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	4413      	add	r3, r2
 8004620:	2204      	movs	r2, #4
 8004622:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
        ic[cic].ic_reg.aux_channels = 6;
 8004626:	7bfa      	ldrb	r2, [r7, #15]
 8004628:	4613      	mov	r3, r2
 800462a:	019b      	lsls	r3, r3, #6
 800462c:	4413      	add	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	461a      	mov	r2, r3
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	4413      	add	r3, r2
 8004636:	2206      	movs	r2, #6
 8004638:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
        ic[cic].ic_reg.num_cv_reg = 4;
 800463c:	7bfa      	ldrb	r2, [r7, #15]
 800463e:	4613      	mov	r3, r2
 8004640:	019b      	lsls	r3, r3, #6
 8004642:	4413      	add	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	461a      	mov	r2, r3
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	4413      	add	r3, r2
 800464c:	2204      	movs	r2, #4
 800464e:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
        ic[cic].ic_reg.num_gpio_reg = 2;
 8004652:	7bfa      	ldrb	r2, [r7, #15]
 8004654:	4613      	mov	r3, r2
 8004656:	019b      	lsls	r3, r3, #6
 8004658:	4413      	add	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	461a      	mov	r2, r3
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	4413      	add	r3, r2
 8004662:	2202      	movs	r2, #2
 8004664:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
        ic[cic].ic_reg.num_stat_reg = 3;
 8004668:	7bfa      	ldrb	r2, [r7, #15]
 800466a:	4613      	mov	r3, r2
 800466c:	019b      	lsls	r3, r3, #6
 800466e:	4413      	add	r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	461a      	mov	r2, r3
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	4413      	add	r3, r2
 8004678:	2203      	movs	r2, #3
 800467a:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
    for (cic = 0; cic < total_ic; cic++)
 800467e:	7bfb      	ldrb	r3, [r7, #15]
 8004680:	3301      	adds	r3, #1
 8004682:	73fb      	strb	r3, [r7, #15]
 8004684:	7bfa      	ldrb	r2, [r7, #15]
 8004686:	79fb      	ldrb	r3, [r7, #7]
 8004688:	429a      	cmp	r2, r3
 800468a:	d3b6      	bcc.n	80045fa <LTC6811_init_reg_limits+0x12>
    }
}
 800468c:	bf00      	nop
 800468e:	bf00      	nop
 8004690:	3714      	adds	r7, #20
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <LTC6811_wrcfg>:
 order so the last device's configuration is written first.
 */
void LTC6811_wrcfg(uint8_t total_ic, //The number of ICs being written to
        cell_asic *ic //A two dimensional array of the configuration data that will be written
        )
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b082      	sub	sp, #8
 800469e:	af00      	add	r7, sp, #0
 80046a0:	4603      	mov	r3, r0
 80046a2:	6039      	str	r1, [r7, #0]
 80046a4:	71fb      	strb	r3, [r7, #7]
    LTC681x_wrcfg(total_ic, ic);
 80046a6:	79fb      	ldrb	r3, [r7, #7]
 80046a8:	6839      	ldr	r1, [r7, #0]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 f976 	bl	800499c <LTC681x_wrcfg>
}
 80046b0:	bf00      	nop
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <LTC6811_adcv>:
/* Starts cell voltage conversion */
void LTC6811_adcv(uint8_t MD, //ADC Mode
        uint8_t DCP, //Discharge Permit
        uint8_t CH //Cell Channels to be measured
        )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	4603      	mov	r3, r0
 80046c0:	71fb      	strb	r3, [r7, #7]
 80046c2:	460b      	mov	r3, r1
 80046c4:	71bb      	strb	r3, [r7, #6]
 80046c6:	4613      	mov	r3, r2
 80046c8:	717b      	strb	r3, [r7, #5]
    LTC681x_adcv(MD, DCP, CH);
 80046ca:	797a      	ldrb	r2, [r7, #5]
 80046cc:	79b9      	ldrb	r1, [r7, #6]
 80046ce:	79fb      	ldrb	r3, [r7, #7]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f000 f9e1 	bl	8004a98 <LTC681x_adcv>
}
 80046d6:	bf00      	nop
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <LTC6811_rdcv>:
 */
uint8_t LTC6811_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
        uint8_t total_ic, // The number of ICs in the system
        cell_asic *ic // Array of the parsed cell codes
        )
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b084      	sub	sp, #16
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	4603      	mov	r3, r0
 80046e6:	603a      	str	r2, [r7, #0]
 80046e8:	71fb      	strb	r3, [r7, #7]
 80046ea:	460b      	mov	r3, r1
 80046ec:	71bb      	strb	r3, [r7, #6]
    int8_t pec_error = 0;
 80046ee:	2300      	movs	r3, #0
 80046f0:	73fb      	strb	r3, [r7, #15]
    pec_error = LTC681x_rdcv(reg, total_ic, ic);
 80046f2:	79b9      	ldrb	r1, [r7, #6]
 80046f4:	79fb      	ldrb	r3, [r7, #7]
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 f9f8 	bl	8004aee <LTC681x_rdcv>
 80046fe:	4603      	mov	r3, r0
 8004700:	73fb      	strb	r3, [r7, #15]
    return (pec_error);
 8004702:	7bfb      	ldrb	r3, [r7, #15]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <LTC6811_pollAdc>:
    return (LTC681x_pladc());
}

//This function will block operation until the ADC has finished it's conversion */
uint32_t LTC6811_pollAdc()
{
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
    return (LTC681x_pollAdc());
 8004710:	f000 fb70 	bl	8004df4 <LTC681x_pollAdc>
 8004714:	4603      	mov	r3, r0
}
 8004716:	4618      	mov	r0, r3
 8004718:	bd80      	pop	{r7, pc}

0800471a <LTC6811_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC6811_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that will store the data
        )
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b082      	sub	sp, #8
 800471e:	af00      	add	r7, sp, #0
 8004720:	4603      	mov	r3, r0
 8004722:	6039      	str	r1, [r7, #0]
 8004724:	71fb      	strb	r3, [r7, #7]
    LTC681x_reset_crc_count(total_ic, ic);
 8004726:	79fb      	ldrb	r3, [r7, #7]
 8004728:	6839      	ldr	r1, [r7, #0]
 800472a:	4618      	mov	r0, r3
 800472c:	f000 fd8a 	bl	8005244 <LTC681x_reset_crc_count>
}
 8004730:	bf00      	nop
 8004732:	3708      	adds	r7, #8
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <LTC6811_init_cfg>:

/* Helper function to initialize CFG variables.*/
void LTC6811_init_cfg(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that will store the data
        )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	4603      	mov	r3, r0
 8004740:	6039      	str	r1, [r7, #0]
 8004742:	71fb      	strb	r3, [r7, #7]
    LTC681x_init_cfg(total_ic, ic);
 8004744:	79fb      	ldrb	r3, [r7, #7]
 8004746:	6839      	ldr	r1, [r7, #0]
 8004748:	4618      	mov	r0, r3
 800474a:	f000 fded 	bl	8005328 <LTC681x_init_cfg>
}
 800474e:	bf00      	nop
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <LTC6811_set_cfgr>:
        bool dcc[12], // The DCC bit
        bool dcto[4], // The Dcto bit
        uint16_t uv, // The UV bit
        uint16_t ov // The OV bit
        )
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b088      	sub	sp, #32
 800475a:	af06      	add	r7, sp, #24
 800475c:	6039      	str	r1, [r7, #0]
 800475e:	4611      	mov	r1, r2
 8004760:	461a      	mov	r2, r3
 8004762:	4603      	mov	r3, r0
 8004764:	71fb      	strb	r3, [r7, #7]
 8004766:	460b      	mov	r3, r1
 8004768:	71bb      	strb	r3, [r7, #6]
 800476a:	4613      	mov	r3, r2
 800476c:	717b      	strb	r3, [r7, #5]
    LTC681x_set_cfgr(nIC, ic, refon, adcopt, gpio, dcc, dcto, uv, ov);
 800476e:	7979      	ldrb	r1, [r7, #5]
 8004770:	79ba      	ldrb	r2, [r7, #6]
 8004772:	79f8      	ldrb	r0, [r7, #7]
 8004774:	8c3b      	ldrh	r3, [r7, #32]
 8004776:	9304      	str	r3, [sp, #16]
 8004778:	8bbb      	ldrh	r3, [r7, #28]
 800477a:	9303      	str	r3, [sp, #12]
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	9302      	str	r3, [sp, #8]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	9301      	str	r3, [sp, #4]
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	460b      	mov	r3, r1
 800478a:	6839      	ldr	r1, [r7, #0]
 800478c:	f000 fe02 	bl	8005394 <LTC681x_set_cfgr>
}
 8004790:	bf00      	nop
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <wakeup_sleep>:
 * @param parameters   :  Total number of BMS ICs
 * @return Value       :  none
 */

void wakeup_sleep(uint8_t total_ic) //Number of ICs in the system
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	4603      	mov	r3, r0
 80047a0:	71fb      	strb	r3, [r7, #7]
    int i;
    for (i = 0; i < total_ic; i++)
 80047a2:	2300      	movs	r3, #0
 80047a4:	60fb      	str	r3, [r7, #12]
 80047a6:	e00c      	b.n	80047c2 <wakeup_sleep+0x2a>
    {
        cs_low();
 80047a8:	f001 f892 	bl	80058d0 <cs_low>
        delay_time_us(160);
 80047ac:	20a0      	movs	r0, #160	@ 0xa0
 80047ae:	f001 f8b7 	bl	8005920 <delay_time_us>
//       HAL_Delay(2500); // Guarantees the LTC681x will be in standby
        cs_high();
 80047b2:	f001 f8a1 	bl	80058f8 <cs_high>
        delay_time_us(18);
 80047b6:	2012      	movs	r0, #18
 80047b8:	f001 f8b2 	bl	8005920 <delay_time_us>
    for (i = 0; i < total_ic; i++)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	3301      	adds	r3, #1
 80047c0:	60fb      	str	r3, [r7, #12]
 80047c2:	79fb      	ldrb	r3, [r7, #7]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	dbee      	blt.n	80047a8 <wakeup_sleep+0x10>
//        HAL_Delay(2500);
    }
}
 80047ca:	bf00      	nop
 80047cc:	bf00      	nop
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <cmd_68>:
 * @brief Description  :  Generic function to write 68xx commands. Function calculates PEC for tx_cmd data.
 * @param parameters   :  transmit commands
 * @return Value       :  none
 */
void cmd_68(uint8_t tx_cmd[2]) //The command to be transmitted
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
    uint8_t cmd[4];
    uint16_t cmd_pec;

    cmd[0] = tx_cmd[0];
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	723b      	strb	r3, [r7, #8]
    cmd[1] = tx_cmd[1];
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	785b      	ldrb	r3, [r3, #1]
 80047e6:	727b      	strb	r3, [r7, #9]
    cmd_pec = pec15_calc(2, cmd);
 80047e8:	f107 0308 	add.w	r3, r7, #8
 80047ec:	4619      	mov	r1, r3
 80047ee:	2002      	movs	r0, #2
 80047f0:	f000 f8a2 	bl	8004938 <pec15_calc>
 80047f4:	4603      	mov	r3, r0
 80047f6:	81fb      	strh	r3, [r7, #14]
    cmd[2] = (uint8_t) (cmd_pec >> 8);
 80047f8:	89fb      	ldrh	r3, [r7, #14]
 80047fa:	0a1b      	lsrs	r3, r3, #8
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	72bb      	strb	r3, [r7, #10]
    cmd[3] = (uint8_t) (cmd_pec);
 8004802:	89fb      	ldrh	r3, [r7, #14]
 8004804:	b2db      	uxtb	r3, r3
 8004806:	72fb      	strb	r3, [r7, #11]

    cs_low();
 8004808:	f001 f862 	bl	80058d0 <cs_low>
    spi_write_array(4, cmd);
 800480c:	f107 0308 	add.w	r3, r7, #8
 8004810:	4619      	mov	r1, r3
 8004812:	2004      	movs	r0, #4
 8004814:	f001 f8a0 	bl	8005958 <spi_write_array>
    cs_high();
 8004818:	f001 f86e 	bl	80058f8 <cs_high>
}
 800481c:	bf00      	nop
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <write_68>:
 */
void write_68(uint8_t total_ic, //Number of ICs to be written to
        uint8_t tx_cmd[2], //The command to be transmitted
        uint8_t data[] // Payload Data
        )
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b088      	sub	sp, #32
 8004828:	af00      	add	r7, sp, #0
 800482a:	4603      	mov	r3, r0
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
 8004830:	73fb      	strb	r3, [r7, #15]
    const uint8_t BYTES_IN_REG = 6;
 8004832:	2306      	movs	r3, #6
 8004834:	773b      	strb	r3, [r7, #28]
    const uint8_t CMD_LEN = 4 + (8 * total_ic);
 8004836:	7bfb      	ldrb	r3, [r7, #15]
 8004838:	00db      	lsls	r3, r3, #3
 800483a:	b2db      	uxtb	r3, r3
 800483c:	3304      	adds	r3, #4
 800483e:	76fb      	strb	r3, [r7, #27]
    uint16_t data_pec;
    uint16_t cmd_pec;
    uint8_t cmd_index;
    uint8_t *cmd;

    cmd = (uint8_t *) malloc(CMD_LEN * sizeof(uint8_t));
 8004840:	7efb      	ldrb	r3, [r7, #27]
 8004842:	4618      	mov	r0, r3
 8004844:	f007 ffcc 	bl	800c7e0 <malloc>
 8004848:	4603      	mov	r3, r0
 800484a:	617b      	str	r3, [r7, #20]
    cmd[0] = tx_cmd[0];
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	781a      	ldrb	r2, [r3, #0]
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	701a      	strb	r2, [r3, #0]
    cmd[1] = tx_cmd[1];
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	3301      	adds	r3, #1
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	7852      	ldrb	r2, [r2, #1]
 800485c:	701a      	strb	r2, [r3, #0]
    cmd_pec = pec15_calc(2, cmd);
 800485e:	6979      	ldr	r1, [r7, #20]
 8004860:	2002      	movs	r0, #2
 8004862:	f000 f869 	bl	8004938 <pec15_calc>
 8004866:	4603      	mov	r3, r0
 8004868:	827b      	strh	r3, [r7, #18]
    cmd[2] = (uint8_t) (cmd_pec >> 8);
 800486a:	8a7b      	ldrh	r3, [r7, #18]
 800486c:	0a1b      	lsrs	r3, r3, #8
 800486e:	b29a      	uxth	r2, r3
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	3302      	adds	r3, #2
 8004874:	b2d2      	uxtb	r2, r2
 8004876:	701a      	strb	r2, [r3, #0]
    cmd[3] = (uint8_t) (cmd_pec);
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	3303      	adds	r3, #3
 800487c:	8a7a      	ldrh	r2, [r7, #18]
 800487e:	b2d2      	uxtb	r2, r2
 8004880:	701a      	strb	r2, [r3, #0]

    cmd_index = 4;
 8004882:	2304      	movs	r3, #4
 8004884:	77fb      	strb	r3, [r7, #31]
    uint8_t current_ic;
    uint8_t current_byte;
    for (current_ic = total_ic; current_ic > 0; current_ic--) // Executes for each LTC681x, this loops starts with the last IC on the stack.
 8004886:	7bfb      	ldrb	r3, [r7, #15]
 8004888:	77bb      	strb	r3, [r7, #30]
 800488a:	e042      	b.n	8004912 <write_68+0xee>
    { //The first configuration written is received by the last IC in the daisy chain
        for (current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 800488c:	2300      	movs	r3, #0
 800488e:	777b      	strb	r3, [r7, #29]
 8004890:	e016      	b.n	80048c0 <write_68+0x9c>
        {
            cmd[cmd_index] = data[((current_ic - 1) * 6) + current_byte];
 8004892:	7fbb      	ldrb	r3, [r7, #30]
 8004894:	1e5a      	subs	r2, r3, #1
 8004896:	4613      	mov	r3, r2
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	4413      	add	r3, r2
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	461a      	mov	r2, r3
 80048a0:	7f7b      	ldrb	r3, [r7, #29]
 80048a2:	4413      	add	r3, r2
 80048a4:	461a      	mov	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	441a      	add	r2, r3
 80048aa:	7ffb      	ldrb	r3, [r7, #31]
 80048ac:	6979      	ldr	r1, [r7, #20]
 80048ae:	440b      	add	r3, r1
 80048b0:	7812      	ldrb	r2, [r2, #0]
 80048b2:	701a      	strb	r2, [r3, #0]
            cmd_index = cmd_index + 1;
 80048b4:	7ffb      	ldrb	r3, [r7, #31]
 80048b6:	3301      	adds	r3, #1
 80048b8:	77fb      	strb	r3, [r7, #31]
        for (current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80048ba:	7f7b      	ldrb	r3, [r7, #29]
 80048bc:	3301      	adds	r3, #1
 80048be:	777b      	strb	r3, [r7, #29]
 80048c0:	7f7a      	ldrb	r2, [r7, #29]
 80048c2:	7f3b      	ldrb	r3, [r7, #28]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d3e4      	bcc.n	8004892 <write_68+0x6e>
        }

        data_pec = (uint16_t) pec15_calc(BYTES_IN_REG,
                                         &data[(current_ic - 1) * 6]); // Calculating the PEC for each ICs configuration register data
 80048c8:	7fbb      	ldrb	r3, [r7, #30]
 80048ca:	1e5a      	subs	r2, r3, #1
 80048cc:	4613      	mov	r3, r2
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	4413      	add	r3, r2
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	461a      	mov	r2, r3
        data_pec = (uint16_t) pec15_calc(BYTES_IN_REG,
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	441a      	add	r2, r3
 80048da:	7f3b      	ldrb	r3, [r7, #28]
 80048dc:	4611      	mov	r1, r2
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 f82a 	bl	8004938 <pec15_calc>
 80048e4:	4603      	mov	r3, r0
 80048e6:	823b      	strh	r3, [r7, #16]
        cmd[cmd_index] = (uint8_t) (data_pec >> 8);
 80048e8:	8a3b      	ldrh	r3, [r7, #16]
 80048ea:	0a1b      	lsrs	r3, r3, #8
 80048ec:	b299      	uxth	r1, r3
 80048ee:	7ffb      	ldrb	r3, [r7, #31]
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	4413      	add	r3, r2
 80048f4:	b2ca      	uxtb	r2, r1
 80048f6:	701a      	strb	r2, [r3, #0]
        cmd[cmd_index + 1] = (uint8_t) data_pec;
 80048f8:	7ffb      	ldrb	r3, [r7, #31]
 80048fa:	3301      	adds	r3, #1
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	4413      	add	r3, r2
 8004900:	8a3a      	ldrh	r2, [r7, #16]
 8004902:	b2d2      	uxtb	r2, r2
 8004904:	701a      	strb	r2, [r3, #0]
        cmd_index = cmd_index + 2;
 8004906:	7ffb      	ldrb	r3, [r7, #31]
 8004908:	3302      	adds	r3, #2
 800490a:	77fb      	strb	r3, [r7, #31]
    for (current_ic = total_ic; current_ic > 0; current_ic--) // Executes for each LTC681x, this loops starts with the last IC on the stack.
 800490c:	7fbb      	ldrb	r3, [r7, #30]
 800490e:	3b01      	subs	r3, #1
 8004910:	77bb      	strb	r3, [r7, #30]
 8004912:	7fbb      	ldrb	r3, [r7, #30]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1b9      	bne.n	800488c <write_68+0x68>
    }

    cs_low();
 8004918:	f000 ffda 	bl	80058d0 <cs_low>
    spi_write_array(CMD_LEN, cmd);
 800491c:	7efb      	ldrb	r3, [r7, #27]
 800491e:	6979      	ldr	r1, [r7, #20]
 8004920:	4618      	mov	r0, r3
 8004922:	f001 f819 	bl	8005958 <spi_write_array>
    cs_high();
 8004926:	f000 ffe7 	bl	80058f8 <cs_high>

    free(cmd);
 800492a:	6978      	ldr	r0, [r7, #20]
 800492c:	f007 ff60 	bl	800c7f0 <free>
}
 8004930:	bf00      	nop
 8004932:	3720      	adds	r7, #32
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <pec15_calc>:
 */
/* Calculates  and returns the CRC15 */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
        uint8_t *data //Array of data that will be used to calculate  a PEC
        )
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	4603      	mov	r3, r0
 8004940:	6039      	str	r1, [r7, #0]
 8004942:	71fb      	strb	r3, [r7, #7]
    uint16_t remainder, addr;
    remainder = 16; //initialize the PEC
 8004944:	2310      	movs	r3, #16
 8004946:	81fb      	strh	r3, [r7, #14]
    uint8_t i;

    for (i = 0; i < len; i++) // loops for each byte in data array
 8004948:	2300      	movs	r3, #0
 800494a:	737b      	strb	r3, [r7, #13]
 800494c:	e017      	b.n	800497e <pec15_calc+0x46>
    {
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 800494e:	89fb      	ldrh	r3, [r7, #14]
 8004950:	09db      	lsrs	r3, r3, #7
 8004952:	b29b      	uxth	r3, r3
 8004954:	7b7a      	ldrb	r2, [r7, #13]
 8004956:	6839      	ldr	r1, [r7, #0]
 8004958:	440a      	add	r2, r1
 800495a:	7812      	ldrb	r2, [r2, #0]
 800495c:	4053      	eors	r3, r2
 800495e:	b29b      	uxth	r3, r3
 8004960:	b2db      	uxtb	r3, r3
 8004962:	817b      	strh	r3, [r7, #10]
        remainder = (remainder << 8) ^ crc15Table[addr];
 8004964:	89fb      	ldrh	r3, [r7, #14]
 8004966:	021b      	lsls	r3, r3, #8
 8004968:	b29a      	uxth	r2, r3
 800496a:	897b      	ldrh	r3, [r7, #10]
 800496c:	490a      	ldr	r1, [pc, #40]	@ (8004998 <pec15_calc+0x60>)
 800496e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004972:	b29b      	uxth	r3, r3
 8004974:	4053      	eors	r3, r2
 8004976:	81fb      	strh	r3, [r7, #14]
    for (i = 0; i < len; i++) // loops for each byte in data array
 8004978:	7b7b      	ldrb	r3, [r7, #13]
 800497a:	3301      	adds	r3, #1
 800497c:	737b      	strb	r3, [r7, #13]
 800497e:	7b7a      	ldrb	r2, [r7, #13]
 8004980:	79fb      	ldrb	r3, [r7, #7]
 8004982:	429a      	cmp	r2, r3
 8004984:	d3e3      	bcc.n	800494e <pec15_calc+0x16>
    }
    return (remainder * 2); //The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8004986:	89fb      	ldrh	r3, [r7, #14]
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	b29b      	uxth	r3, r3
}
 800498c:	4618      	mov	r0, r3
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	0800d874 	.word	0x0800d874

0800499c <LTC681x_wrcfg>:

/* Write the LTC681x CFGRA */
void LTC681x_wrcfg(uint8_t total_ic, //The number of ICs being written to
        cell_asic ic[] // A two dimensional array of the configuration data that will be written
        )
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b0c4      	sub	sp, #272	@ 0x110
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	4602      	mov	r2, r0
 80049a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80049a8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80049ac:	6019      	str	r1, [r3, #0]
 80049ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80049b2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80049b6:	701a      	strb	r2, [r3, #0]
    uint8_t cmd[2] = { 0x00, 0x01 };
 80049b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80049bc:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
    uint8_t write_buffer[256];
    uint8_t write_count = 0;
 80049c0:	2300      	movs	r3, #0
 80049c2:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
    uint8_t c_ic = 0;
 80049c6:	2300      	movs	r3, #0
 80049c8:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
    uint8_t current_ic;
    uint8_t data;

    for (current_ic = 0; current_ic < total_ic; current_ic++)
 80049cc:	2300      	movs	r3, #0
 80049ce:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 80049d2:	e047      	b.n	8004a64 <LTC681x_wrcfg+0xc8>
    {
        if (ic->isospi_reverse == false)
 80049d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80049d8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d104      	bne.n	80049f0 <LTC681x_wrcfg+0x54>
        {
            c_ic = current_ic;
 80049e6:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80049ea:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 80049ee:	e00b      	b.n	8004a08 <LTC681x_wrcfg+0x6c>
        }
        else
        {
            c_ic = total_ic - current_ic - 1;
 80049f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80049f4:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80049f8:	781a      	ldrb	r2, [r3, #0]
 80049fa:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	3b01      	subs	r3, #1
 8004a04:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
        }

        for (data = 0; data < 6; data++)
 8004a08:	2300      	movs	r3, #0
 8004a0a:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 8004a0e:	e020      	b.n	8004a52 <LTC681x_wrcfg+0xb6>
        {
            write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 8004a10:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 8004a14:	4613      	mov	r3, r2
 8004a16:	019b      	lsls	r3, r3, #6
 8004a18:	4413      	add	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004a22:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	1899      	adds	r1, r3, r2
 8004a2a:	f897 210c 	ldrb.w	r2, [r7, #268]	@ 0x10c
 8004a2e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004a32:	5c89      	ldrb	r1, [r1, r2]
 8004a34:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004a38:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8004a3c:	54d1      	strb	r1, [r2, r3]
            write_count++;
 8004a3e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004a42:	3301      	adds	r3, #1
 8004a44:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        for (data = 0; data < 6; data++)
 8004a48:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 8004a52:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8004a56:	2b05      	cmp	r3, #5
 8004a58:	d9da      	bls.n	8004a10 <LTC681x_wrcfg+0x74>
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004a5a:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8004a5e:	3301      	adds	r3, #1
 8004a60:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 8004a64:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004a68:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8004a6c:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d3ae      	bcc.n	80049d4 <LTC681x_wrcfg+0x38>
        }
    }
    write_68(total_ic, cmd, write_buffer);
 8004a76:	f107 0208 	add.w	r2, r7, #8
 8004a7a:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8004a7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004a82:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7ff fecb 	bl	8004824 <write_68>
}
 8004a8e:	bf00      	nop
 8004a90:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <LTC681x_adcv>:
/* Starts ADC conversion for cell voltage */
void LTC681x_adcv(uint8_t MD, //ADC Mode
        uint8_t DCP, //Discharge Permit
        uint8_t CH //Cell Channels to be measured
        )
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	71fb      	strb	r3, [r7, #7]
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	71bb      	strb	r3, [r7, #6]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	717b      	strb	r3, [r7, #5]
    uint8_t cmd[2];
    uint8_t md_bits;

    md_bits = (MD & 0x02) >> 1;
 8004aaa:	79fb      	ldrb	r3, [r7, #7]
 8004aac:	105b      	asrs	r3, r3, #1
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	73fb      	strb	r3, [r7, #15]
    cmd[0] = md_bits + 0x02;
 8004ab6:	7bfb      	ldrb	r3, [r7, #15]
 8004ab8:	3302      	adds	r3, #2
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	733b      	strb	r3, [r7, #12]
    md_bits = (MD & 0x01) << 7;
 8004abe:	79fb      	ldrb	r3, [r7, #7]
 8004ac0:	01db      	lsls	r3, r3, #7
 8004ac2:	73fb      	strb	r3, [r7, #15]
    cmd[1] = md_bits + 0x60 + (DCP << 4) + CH;
 8004ac4:	79bb      	ldrb	r3, [r7, #6]
 8004ac6:	011b      	lsls	r3, r3, #4
 8004ac8:	b2da      	uxtb	r2, r3
 8004aca:	7bfb      	ldrb	r3, [r7, #15]
 8004acc:	4413      	add	r3, r2
 8004ace:	b2da      	uxtb	r2, r3
 8004ad0:	797b      	ldrb	r3, [r7, #5]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	3360      	adds	r3, #96	@ 0x60
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	737b      	strb	r3, [r7, #13]

    cmd_68(cmd);
 8004adc:	f107 030c 	add.w	r3, r7, #12
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7ff fe77 	bl	80047d4 <cmd_68>
}
 8004ae6:	bf00      	nop
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <LTC681x_rdcv>:
 */
uint8_t LTC681x_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
        uint8_t total_ic, // The number of ICs in the system
        cell_asic *ic // Array of the parsed cell codes
        )
{
 8004aee:	b5b0      	push	{r4, r5, r7, lr}
 8004af0:	b088      	sub	sp, #32
 8004af2:	af02      	add	r7, sp, #8
 8004af4:	4603      	mov	r3, r0
 8004af6:	603a      	str	r2, [r7, #0]
 8004af8:	71fb      	strb	r3, [r7, #7]
 8004afa:	460b      	mov	r3, r1
 8004afc:	71bb      	strb	r3, [r7, #6]
    int8_t pec_error = 0;
 8004afe:	2300      	movs	r3, #0
 8004b00:	75fb      	strb	r3, [r7, #23]
    uint8_t *cell_data;
    uint8_t c_ic = 0;
 8004b02:	2300      	movs	r3, #0
 8004b04:	75bb      	strb	r3, [r7, #22]
    uint8_t cell_reg;
    int current_ic;
    cell_data = (uint8_t *) malloc((NUM_RX_BYT * total_ic) * sizeof(uint8_t));
 8004b06:	79bb      	ldrb	r3, [r7, #6]
 8004b08:	00db      	lsls	r3, r3, #3
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f007 fe68 	bl	800c7e0 <malloc>
 8004b10:	4603      	mov	r3, r0
 8004b12:	60fb      	str	r3, [r7, #12]

    if (reg == 0)
 8004b14:	79fb      	ldrb	r3, [r7, #7]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d14c      	bne.n	8004bb4 <LTC681x_rdcv+0xc6>
    {
        for (cell_reg = 1; cell_reg < ic[0].ic_reg.num_cv_reg + 1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	757b      	strb	r3, [r7, #21]
 8004b1e:	e042      	b.n	8004ba6 <LTC681x_rdcv+0xb8>
        {
            LTC681x_rdcv_reg(cell_reg, total_ic, cell_data);
 8004b20:	79b9      	ldrb	r1, [r7, #6]
 8004b22:	7d7b      	ldrb	r3, [r7, #21]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 f897 	bl	8004c5a <LTC681x_rdcv_reg>
            for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	613b      	str	r3, [r7, #16]
 8004b30:	e032      	b.n	8004b98 <LTC681x_rdcv+0xaa>
            {
                if (ic->isospi_reverse == false)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d102      	bne.n	8004b42 <LTC681x_rdcv+0x54>
                {
                    c_ic = current_ic;
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	75bb      	strb	r3, [r7, #22]
 8004b40:	e006      	b.n	8004b50 <LTC681x_rdcv+0x62>
                }
                else
                {
                    c_ic = total_ic - current_ic - 1;
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	79ba      	ldrb	r2, [r7, #6]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	75bb      	strb	r3, [r7, #22]
                }
                pec_error = pec_error + parse_cells(current_ic, cell_reg, cell_data,
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	b2d8      	uxtb	r0, r3
                                                    &ic[c_ic].cells.c_codes[0],
 8004b54:	7dba      	ldrb	r2, [r7, #22]
 8004b56:	4613      	mov	r3, r2
 8004b58:	019b      	lsls	r3, r3, #6
 8004b5a:	4413      	add	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	461a      	mov	r2, r3
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	4413      	add	r3, r2
                pec_error = pec_error + parse_cells(current_ic, cell_reg, cell_data,
 8004b64:	f103 041e 	add.w	r4, r3, #30
                                                    &ic[c_ic].cells.pec_match[0]);;
 8004b68:	7dba      	ldrb	r2, [r7, #22]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	019b      	lsls	r3, r3, #6
 8004b6e:	4413      	add	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	461a      	mov	r2, r3
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	4413      	add	r3, r2
                pec_error = pec_error + parse_cells(current_ic, cell_reg, cell_data,
 8004b78:	3342      	adds	r3, #66	@ 0x42
 8004b7a:	7d79      	ldrb	r1, [r7, #21]
 8004b7c:	9300      	str	r3, [sp, #0]
 8004b7e:	4623      	mov	r3, r4
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	f000 f8c5 	bl	8004d10 <parse_cells>
 8004b86:	4603      	mov	r3, r0
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	7dfb      	ldrb	r3, [r7, #23]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	75fb      	strb	r3, [r7, #23]
            for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	3301      	adds	r3, #1
 8004b96:	613b      	str	r3, [r7, #16]
 8004b98:	79bb      	ldrb	r3, [r7, #6]
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	dbc8      	blt.n	8004b32 <LTC681x_rdcv+0x44>
        for (cell_reg = 1; cell_reg < ic[0].ic_reg.num_cv_reg + 1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 8004ba0:	7d7b      	ldrb	r3, [r7, #21]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	757b      	strb	r3, [r7, #21]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 8004bac:	7d7a      	ldrb	r2, [r7, #21]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d9b6      	bls.n	8004b20 <LTC681x_rdcv+0x32>
 8004bb2:	e044      	b.n	8004c3e <LTC681x_rdcv+0x150>
        }
    }

    else
    {
        LTC681x_rdcv_reg(reg, total_ic, cell_data);
 8004bb4:	79b9      	ldrb	r1, [r7, #6]
 8004bb6:	79fb      	ldrb	r3, [r7, #7]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 f84d 	bl	8004c5a <LTC681x_rdcv_reg>

        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	613b      	str	r3, [r7, #16]
 8004bc4:	e037      	b.n	8004c36 <LTC681x_rdcv+0x148>
        {
            if (ic->isospi_reverse == false)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d102      	bne.n	8004bd6 <LTC681x_rdcv+0xe8>
            {
                c_ic = current_ic;
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	75bb      	strb	r3, [r7, #22]
 8004bd4:	e006      	b.n	8004be4 <LTC681x_rdcv+0xf6>
            }
            else
            {
                c_ic = total_ic - current_ic - 1;
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	79ba      	ldrb	r2, [r7, #6]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	3b01      	subs	r3, #1
 8004be2:	75bb      	strb	r3, [r7, #22]
            }
            pec_error = pec_error
                    + parse_cells(current_ic, reg, &cell_data[8 * c_ic],
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	b2d8      	uxtb	r0, r3
 8004be8:	7dbb      	ldrb	r3, [r7, #22]
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	461a      	mov	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	189c      	adds	r4, r3, r2
                                  &ic[c_ic].cells.c_codes[0],
 8004bf2:	7dba      	ldrb	r2, [r7, #22]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	019b      	lsls	r3, r3, #6
 8004bf8:	4413      	add	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	4413      	add	r3, r2
                    + parse_cells(current_ic, reg, &cell_data[8 * c_ic],
 8004c02:	f103 051e 	add.w	r5, r3, #30
                                  &ic[c_ic].cells.pec_match[0]);;
 8004c06:	7dba      	ldrb	r2, [r7, #22]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	019b      	lsls	r3, r3, #6
 8004c0c:	4413      	add	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	461a      	mov	r2, r3
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	4413      	add	r3, r2
                    + parse_cells(current_ic, reg, &cell_data[8 * c_ic],
 8004c16:	3342      	adds	r3, #66	@ 0x42
 8004c18:	79f9      	ldrb	r1, [r7, #7]
 8004c1a:	9300      	str	r3, [sp, #0]
 8004c1c:	462b      	mov	r3, r5
 8004c1e:	4622      	mov	r2, r4
 8004c20:	f000 f876 	bl	8004d10 <parse_cells>
 8004c24:	4603      	mov	r3, r0
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	7dfb      	ldrb	r3, [r7, #23]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	b2db      	uxtb	r3, r3
            pec_error = pec_error
 8004c2e:	75fb      	strb	r3, [r7, #23]
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	3301      	adds	r3, #1
 8004c34:	613b      	str	r3, [r7, #16]
 8004c36:	79bb      	ldrb	r3, [r7, #6]
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	dbc3      	blt.n	8004bc6 <LTC681x_rdcv+0xd8>
        }
    }
    LTC681x_check_pec(total_ic, CELL, ic);
 8004c3e:	79bb      	ldrb	r3, [r7, #6]
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	2101      	movs	r1, #1
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 f917 	bl	8004e78 <LTC681x_check_pec>
    free(cell_data);
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f007 fdd0 	bl	800c7f0 <free>

    return (pec_error);
 8004c50:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3718      	adds	r7, #24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bdb0      	pop	{r4, r5, r7, pc}

08004c5a <LTC681x_rdcv_reg>:
/* Writes the command and reads the raw cell voltage register data */
void LTC681x_rdcv_reg(uint8_t reg, //Determines which cell voltage register is read back
        uint8_t total_ic, //the number of ICs in the
        uint8_t *data //An array of the unparsed cell codes
        )
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b084      	sub	sp, #16
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	4603      	mov	r3, r0
 8004c62:	603a      	str	r2, [r7, #0]
 8004c64:	71fb      	strb	r3, [r7, #7]
 8004c66:	460b      	mov	r3, r1
 8004c68:	71bb      	strb	r3, [r7, #6]
    const uint8_t REG_LEN = 8; //Number of bytes in each ICs register + 2 bytes for the PEC
 8004c6a:	2308      	movs	r3, #8
 8004c6c:	73fb      	strb	r3, [r7, #15]
    uint8_t cmd[4];
    uint16_t cmd_pec;

    if (reg == 1)     //1: RDCVA
 8004c6e:	79fb      	ldrb	r3, [r7, #7]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d104      	bne.n	8004c7e <LTC681x_rdcv_reg+0x24>
    {
        cmd[1] = 0x04;
 8004c74:	2304      	movs	r3, #4
 8004c76:	727b      	strb	r3, [r7, #9]
        cmd[0] = 0x00;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	723b      	strb	r3, [r7, #8]
 8004c7c:	e026      	b.n	8004ccc <LTC681x_rdcv_reg+0x72>
    }
    else if (reg == 2) //2: RDCVB
 8004c7e:	79fb      	ldrb	r3, [r7, #7]
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d104      	bne.n	8004c8e <LTC681x_rdcv_reg+0x34>
    {
        cmd[1] = 0x06;
 8004c84:	2306      	movs	r3, #6
 8004c86:	727b      	strb	r3, [r7, #9]
        cmd[0] = 0x00;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	723b      	strb	r3, [r7, #8]
 8004c8c:	e01e      	b.n	8004ccc <LTC681x_rdcv_reg+0x72>
    }
    else if (reg == 3) //3: RDCVC
 8004c8e:	79fb      	ldrb	r3, [r7, #7]
 8004c90:	2b03      	cmp	r3, #3
 8004c92:	d104      	bne.n	8004c9e <LTC681x_rdcv_reg+0x44>
    {
        cmd[1] = 0x08;
 8004c94:	2308      	movs	r3, #8
 8004c96:	727b      	strb	r3, [r7, #9]
        cmd[0] = 0x00;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	723b      	strb	r3, [r7, #8]
 8004c9c:	e016      	b.n	8004ccc <LTC681x_rdcv_reg+0x72>
    }
    else if (reg == 4) //4: RDCVD
 8004c9e:	79fb      	ldrb	r3, [r7, #7]
 8004ca0:	2b04      	cmp	r3, #4
 8004ca2:	d104      	bne.n	8004cae <LTC681x_rdcv_reg+0x54>
    {
        cmd[1] = 0x0A;
 8004ca4:	230a      	movs	r3, #10
 8004ca6:	727b      	strb	r3, [r7, #9]
        cmd[0] = 0x00;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	723b      	strb	r3, [r7, #8]
 8004cac:	e00e      	b.n	8004ccc <LTC681x_rdcv_reg+0x72>
    }
    else if (reg == 5) //4: RDCVE
 8004cae:	79fb      	ldrb	r3, [r7, #7]
 8004cb0:	2b05      	cmp	r3, #5
 8004cb2:	d104      	bne.n	8004cbe <LTC681x_rdcv_reg+0x64>
    {
        cmd[1] = 0x09;
 8004cb4:	2309      	movs	r3, #9
 8004cb6:	727b      	strb	r3, [r7, #9]
        cmd[0] = 0x00;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	723b      	strb	r3, [r7, #8]
 8004cbc:	e006      	b.n	8004ccc <LTC681x_rdcv_reg+0x72>
    }
    else if (reg == 6) //4: RDCVF
 8004cbe:	79fb      	ldrb	r3, [r7, #7]
 8004cc0:	2b06      	cmp	r3, #6
 8004cc2:	d103      	bne.n	8004ccc <LTC681x_rdcv_reg+0x72>
    {
        cmd[1] = 0x0B;
 8004cc4:	230b      	movs	r3, #11
 8004cc6:	727b      	strb	r3, [r7, #9]
        cmd[0] = 0x00;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	723b      	strb	r3, [r7, #8]
    }

    cmd_pec = pec15_calc(2, cmd);
 8004ccc:	f107 0308 	add.w	r3, r7, #8
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	2002      	movs	r0, #2
 8004cd4:	f7ff fe30 	bl	8004938 <pec15_calc>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	81bb      	strh	r3, [r7, #12]
    cmd[2] = (uint8_t) (cmd_pec >> 8);
 8004cdc:	89bb      	ldrh	r3, [r7, #12]
 8004cde:	0a1b      	lsrs	r3, r3, #8
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	72bb      	strb	r3, [r7, #10]
    cmd[3] = (uint8_t) (cmd_pec);
 8004ce6:	89bb      	ldrh	r3, [r7, #12]
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	72fb      	strb	r3, [r7, #11]

    cs_low();
 8004cec:	f000 fdf0 	bl	80058d0 <cs_low>
    spi_write_read(cmd, 4, data, (REG_LEN * total_ic));
 8004cf0:	7bfb      	ldrb	r3, [r7, #15]
 8004cf2:	79ba      	ldrb	r2, [r7, #6]
 8004cf4:	fb02 f303 	mul.w	r3, r2, r3
 8004cf8:	f107 0008 	add.w	r0, r7, #8
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	2104      	movs	r1, #4
 8004d00:	f000 fe4e 	bl	80059a0 <spi_write_read>
    cs_high();
 8004d04:	f000 fdf8 	bl	80058f8 <cs_high>
}
 8004d08:	bf00      	nop
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <parse_cells>:
        uint8_t cell_reg,  // Type of register
        uint8_t cell_data[], // Unparsed data
        uint16_t *cell_codes, // Parsed data
        uint8_t *ic_pec // PEC error
        )
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b088      	sub	sp, #32
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60ba      	str	r2, [r7, #8]
 8004d18:	607b      	str	r3, [r7, #4]
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	73fb      	strb	r3, [r7, #15]
 8004d1e:	460b      	mov	r3, r1
 8004d20:	73bb      	strb	r3, [r7, #14]
    const uint8_t BYT_IN_REG = 6;
 8004d22:	2306      	movs	r3, #6
 8004d24:	773b      	strb	r3, [r7, #28]
    const uint8_t CELL_IN_REG = 3;
 8004d26:	2303      	movs	r3, #3
 8004d28:	76fb      	strb	r3, [r7, #27]
    int8_t pec_error = 0;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	77fb      	strb	r3, [r7, #31]
    uint16_t parsed_cell;
    uint16_t received_pec;
    uint16_t data_pec;
    uint8_t data_counter = current_ic * NUM_RX_BYT; //data counter
 8004d2e:	7bfb      	ldrb	r3, [r7, #15]
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	77bb      	strb	r3, [r7, #30]
    uint8_t current_cell;

    for (current_cell = 0; current_cell < CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 8004d34:	2300      	movs	r3, #0
 8004d36:	777b      	strb	r3, [r7, #29]
 8004d38:	e01f      	b.n	8004d7a <parse_cells+0x6a>
    {                      // loops once for each of the 3 codes in the register

        parsed_cell = cell_data[data_counter]
 8004d3a:	7fbb      	ldrb	r3, [r7, #30]
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	4413      	add	r3, r2
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	4619      	mov	r1, r3
                + (cell_data[data_counter + 1] << 8); //Each code is received as two bytes and is combined to
 8004d44:	7fbb      	ldrb	r3, [r7, #30]
 8004d46:	3301      	adds	r3, #1
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	021b      	lsls	r3, r3, #8
 8004d50:	b29b      	uxth	r3, r3
        parsed_cell = cell_data[data_counter]
 8004d52:	440b      	add	r3, r1
 8004d54:	82bb      	strh	r3, [r7, #20]
                                                      // create the parsed code
        cell_codes[current_cell + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8004d56:	7f7a      	ldrb	r2, [r7, #29]
 8004d58:	7bbb      	ldrb	r3, [r7, #14]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	7ef9      	ldrb	r1, [r7, #27]
 8004d5e:	fb01 f303 	mul.w	r3, r1, r3
 8004d62:	4413      	add	r3, r2
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	4413      	add	r3, r2
 8004d6a:	8aba      	ldrh	r2, [r7, #20]
 8004d6c:	801a      	strh	r2, [r3, #0]

        data_counter = data_counter + 2; //Because the codes are two bytes, the data counter
 8004d6e:	7fbb      	ldrb	r3, [r7, #30]
 8004d70:	3302      	adds	r3, #2
 8004d72:	77bb      	strb	r3, [r7, #30]
    for (current_cell = 0; current_cell < CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 8004d74:	7f7b      	ldrb	r3, [r7, #29]
 8004d76:	3301      	adds	r3, #1
 8004d78:	777b      	strb	r3, [r7, #29]
 8004d7a:	7f7a      	ldrb	r2, [r7, #29]
 8004d7c:	7efb      	ldrb	r3, [r7, #27]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d3db      	bcc.n	8004d3a <parse_cells+0x2a>
                                         //must increment by two for each parsed code
    }

    received_pec = (cell_data[data_counter] << 8) | cell_data[data_counter + 1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 8004d82:	7fbb      	ldrb	r3, [r7, #30]
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	4413      	add	r3, r2
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	b21b      	sxth	r3, r3
 8004d8c:	021b      	lsls	r3, r3, #8
 8004d8e:	b21a      	sxth	r2, r3
 8004d90:	7fbb      	ldrb	r3, [r7, #30]
 8004d92:	3301      	adds	r3, #1
 8004d94:	68b9      	ldr	r1, [r7, #8]
 8004d96:	440b      	add	r3, r1
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	b21b      	sxth	r3, r3
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	b21b      	sxth	r3, r3
 8004da0:	833b      	strh	r3, [r7, #24]
                                                                                 //after the 6 cell voltage data bytes
    data_pec = pec15_calc(BYT_IN_REG, &cell_data[(current_ic) * NUM_RX_BYT]);
 8004da2:	7bfb      	ldrb	r3, [r7, #15]
 8004da4:	00db      	lsls	r3, r3, #3
 8004da6:	461a      	mov	r2, r3
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	441a      	add	r2, r3
 8004dac:	7f3b      	ldrb	r3, [r7, #28]
 8004dae:	4611      	mov	r1, r2
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7ff fdc1 	bl	8004938 <pec15_calc>
 8004db6:	4603      	mov	r3, r0
 8004db8:	82fb      	strh	r3, [r7, #22]

    if (received_pec != data_pec)
 8004dba:	8b3a      	ldrh	r2, [r7, #24]
 8004dbc:	8afb      	ldrh	r3, [r7, #22]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d008      	beq.n	8004dd4 <parse_cells+0xc4>
    {
        pec_error = 1; //The pec_error variable is simply set negative if any PEC errors
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	77fb      	strb	r3, [r7, #31]
        ic_pec[cell_reg - 1] = 1;
 8004dc6:	7bbb      	ldrb	r3, [r7, #14]
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004dcc:	4413      	add	r3, r2
 8004dce:	2201      	movs	r2, #1
 8004dd0:	701a      	strb	r2, [r3, #0]
 8004dd2:	e005      	b.n	8004de0 <parse_cells+0xd0>
    }
    else
    {
        ic_pec[cell_reg - 1] = 0;
 8004dd4:	7bbb      	ldrb	r3, [r7, #14]
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004dda:	4413      	add	r3, r2
 8004ddc:	2200      	movs	r2, #0
 8004dde:	701a      	strb	r2, [r3, #0]
    }
    data_counter = data_counter + 2;
 8004de0:	7fbb      	ldrb	r3, [r7, #30]
 8004de2:	3302      	adds	r3, #2
 8004de4:	77bb      	strb	r3, [r7, #30]

    return (pec_error);
 8004de6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3720      	adds	r7, #32
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
	...

08004df4 <LTC681x_pollAdc>:
    return (adc_state);
}

/* This function will block operation until the ADC has finished it's conversion */
uint32_t LTC681x_pollAdc()
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
    uint32_t counter = 0;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	60fb      	str	r3, [r7, #12]
    uint8_t finished = 0;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	72fb      	strb	r3, [r7, #11]
    uint8_t current_time = 0;
 8004e02:	2300      	movs	r3, #0
 8004e04:	72bb      	strb	r3, [r7, #10]
    uint8_t cmd[4];
    uint16_t cmd_pec;

    cmd[0] = 0x07;
 8004e06:	2307      	movs	r3, #7
 8004e08:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0x14;
 8004e0a:	2314      	movs	r3, #20
 8004e0c:	717b      	strb	r3, [r7, #5]
    cmd_pec = pec15_calc(2, cmd);
 8004e0e:	1d3b      	adds	r3, r7, #4
 8004e10:	4619      	mov	r1, r3
 8004e12:	2002      	movs	r0, #2
 8004e14:	f7ff fd90 	bl	8004938 <pec15_calc>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	813b      	strh	r3, [r7, #8]
    cmd[2] = (uint8_t) (cmd_pec >> 8);
 8004e1c:	893b      	ldrh	r3, [r7, #8]
 8004e1e:	0a1b      	lsrs	r3, r3, #8
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	71bb      	strb	r3, [r7, #6]
    cmd[3] = (uint8_t) (cmd_pec);
 8004e26:	893b      	ldrh	r3, [r7, #8]
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	71fb      	strb	r3, [r7, #7]

    cs_low();
 8004e2c:	f000 fd50 	bl	80058d0 <cs_low>
    spi_write_array(4, cmd);
 8004e30:	1d3b      	adds	r3, r7, #4
 8004e32:	4619      	mov	r1, r3
 8004e34:	2004      	movs	r0, #4
 8004e36:	f000 fd8f 	bl	8005958 <spi_write_array>
    while ((counter < 400000) && (finished == 0))
 8004e3a:	e00d      	b.n	8004e58 <LTC681x_pollAdc+0x64>
    {
        current_time = spi_read_byte(0xFF);
 8004e3c:	20ff      	movs	r0, #255	@ 0xff
 8004e3e:	f000 fdeb 	bl	8005a18 <spi_read_byte>
 8004e42:	4603      	mov	r3, r0
 8004e44:	72bb      	strb	r3, [r7, #10]
        if (current_time > 0)
 8004e46:	7abb      	ldrb	r3, [r7, #10]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d002      	beq.n	8004e52 <LTC681x_pollAdc+0x5e>
        {
            finished = 1;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	72fb      	strb	r3, [r7, #11]
 8004e50:	e002      	b.n	8004e58 <LTC681x_pollAdc+0x64>

        }
        else
        {
            counter = counter + 10;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	330a      	adds	r3, #10
 8004e56:	60fb      	str	r3, [r7, #12]
    while ((counter < 400000) && (finished == 0))
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4a06      	ldr	r2, [pc, #24]	@ (8004e74 <LTC681x_pollAdc+0x80>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d802      	bhi.n	8004e66 <LTC681x_pollAdc+0x72>
 8004e60:	7afb      	ldrb	r3, [r7, #11]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d0ea      	beq.n	8004e3c <LTC681x_pollAdc+0x48>
        }
    }
    cs_high();
 8004e66:	f000 fd47 	bl	80058f8 <cs_high>

    return ((uint32_t)current_time);
 8004e6a:	7abb      	ldrb	r3, [r7, #10]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	00061a7f 	.word	0x00061a7f

08004e78 <LTC681x_check_pec>:
/* Helper function that increments PEC counters */
void LTC681x_check_pec(uint8_t total_ic, //Number of ICs in the system
        uint8_t reg, //Type of Register
        cell_asic *ic //A two dimensional array that stores the data
        )
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	4603      	mov	r3, r0
 8004e80:	603a      	str	r2, [r7, #0]
 8004e82:	71fb      	strb	r3, [r7, #7]
 8004e84:	460b      	mov	r3, r1
 8004e86:	71bb      	strb	r3, [r7, #6]
    int current_ic;
    int i;
    switch (reg)
 8004e88:	79bb      	ldrb	r3, [r7, #6]
 8004e8a:	2b04      	cmp	r3, #4
 8004e8c:	f200 81d3 	bhi.w	8005236 <LTC681x_check_pec+0x3be>
 8004e90:	a201      	add	r2, pc, #4	@ (adr r2, 8004e98 <LTC681x_check_pec+0x20>)
 8004e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e96:	bf00      	nop
 8004e98:	08004ead 	.word	0x08004ead
 8004e9c:	08004fd9 	.word	0x08004fd9
 8004ea0:	080050a3 	.word	0x080050a3
 8004ea4:	0800516d 	.word	0x0800516d
 8004ea8:	08004f43 	.word	0x08004f43
    {
    case CFGR:
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004eac:	2300      	movs	r3, #0
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	e042      	b.n	8004f38 <LTC681x_check_pec+0xc0>
        {
            ic[current_ic].crc_count.pec_count =
                    ic[current_ic].crc_count.pec_count
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	019b      	lsls	r3, r3, #6
 8004eb8:	4413      	add	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	@ 0xc6
                            + ic[current_ic].config.rx_pec_match;
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	019b      	lsls	r3, r3, #6
 8004ecc:	4413      	add	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	7b9b      	ldrb	r3, [r3, #14]
 8004ed8:	4618      	mov	r0, r3
            ic[current_ic].crc_count.pec_count =
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	4613      	mov	r3, r2
 8004ede:	019b      	lsls	r3, r3, #6
 8004ee0:	4413      	add	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	4413      	add	r3, r2
                            + ic[current_ic].config.rx_pec_match;
 8004eea:	180a      	adds	r2, r1, r0
 8004eec:	b292      	uxth	r2, r2
            ic[current_ic].crc_count.pec_count =
 8004eee:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
            ic[current_ic].crc_count.cfgr_pec =
                    ic[current_ic].crc_count.cfgr_pec
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	019b      	lsls	r3, r3, #6
 8004ef8:	4413      	add	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	461a      	mov	r2, r3
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	4413      	add	r3, r2
 8004f02:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	@ 0xc8
                            + ic[current_ic].config.rx_pec_match;
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	019b      	lsls	r3, r3, #6
 8004f0c:	4413      	add	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	461a      	mov	r2, r3
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	4413      	add	r3, r2
 8004f16:	7b9b      	ldrb	r3, [r3, #14]
 8004f18:	4618      	mov	r0, r3
            ic[current_ic].crc_count.cfgr_pec =
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	019b      	lsls	r3, r3, #6
 8004f20:	4413      	add	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	461a      	mov	r2, r3
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	4413      	add	r3, r2
                            + ic[current_ic].config.rx_pec_match;
 8004f2a:	180a      	adds	r2, r1, r0
 8004f2c:	b292      	uxth	r2, r2
            ic[current_ic].crc_count.cfgr_pec =
 8004f2e:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	3301      	adds	r3, #1
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	79fb      	ldrb	r3, [r7, #7]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	dbb8      	blt.n	8004eb2 <LTC681x_check_pec+0x3a>
        }
        break;
 8004f40:	e17a      	b.n	8005238 <LTC681x_check_pec+0x3c0>

    case CFGRB:
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004f42:	2300      	movs	r3, #0
 8004f44:	60fb      	str	r3, [r7, #12]
 8004f46:	e042      	b.n	8004fce <LTC681x_check_pec+0x156>
        {
            ic[current_ic].crc_count.pec_count =
                    ic[current_ic].crc_count.pec_count
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	019b      	lsls	r3, r3, #6
 8004f4e:	4413      	add	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	461a      	mov	r2, r3
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	4413      	add	r3, r2
 8004f58:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	@ 0xc6
                            + ic[current_ic].configb.rx_pec_match;
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	019b      	lsls	r3, r3, #6
 8004f62:	4413      	add	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	461a      	mov	r2, r3
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	7f5b      	ldrb	r3, [r3, #29]
 8004f6e:	4618      	mov	r0, r3
            ic[current_ic].crc_count.pec_count =
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	4613      	mov	r3, r2
 8004f74:	019b      	lsls	r3, r3, #6
 8004f76:	4413      	add	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	4413      	add	r3, r2
                            + ic[current_ic].configb.rx_pec_match;
 8004f80:	180a      	adds	r2, r1, r0
 8004f82:	b292      	uxth	r2, r2
            ic[current_ic].crc_count.pec_count =
 8004f84:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
            ic[current_ic].crc_count.cfgr_pec =
                    ic[current_ic].crc_count.cfgr_pec
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	019b      	lsls	r3, r3, #6
 8004f8e:	4413      	add	r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	461a      	mov	r2, r3
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	4413      	add	r3, r2
 8004f98:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	@ 0xc8
                            + ic[current_ic].configb.rx_pec_match;
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	019b      	lsls	r3, r3, #6
 8004fa2:	4413      	add	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	4413      	add	r3, r2
 8004fac:	7f5b      	ldrb	r3, [r3, #29]
 8004fae:	4618      	mov	r0, r3
            ic[current_ic].crc_count.cfgr_pec =
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	019b      	lsls	r3, r3, #6
 8004fb6:	4413      	add	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	461a      	mov	r2, r3
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	4413      	add	r3, r2
                            + ic[current_ic].configb.rx_pec_match;
 8004fc0:	180a      	adds	r2, r1, r0
 8004fc2:	b292      	uxth	r2, r2
            ic[current_ic].crc_count.cfgr_pec =
 8004fc4:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	79fb      	ldrb	r3, [r7, #7]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	dbb8      	blt.n	8004f48 <LTC681x_check_pec+0xd0>
        }
        break;
 8004fd6:	e12f      	b.n	8005238 <LTC681x_check_pec+0x3c0>
    case CELL:
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004fd8:	2300      	movs	r3, #0
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	e05c      	b.n	8005098 <LTC681x_check_pec+0x220>
        {
            for (i = 0; i < ic[0].ic_reg.num_cv_reg; i++)
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60bb      	str	r3, [r7, #8]
 8004fe2:	e04f      	b.n	8005084 <LTC681x_check_pec+0x20c>
            {
                ic[current_ic].crc_count.pec_count =
                        ic[current_ic].crc_count.pec_count
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	019b      	lsls	r3, r3, #6
 8004fea:	4413      	add	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	461a      	mov	r2, r3
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	@ 0xc6
                                + ic[current_ic].cells.pec_match[i];
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	019b      	lsls	r3, r3, #6
 8004ffe:	4413      	add	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	461a      	mov	r2, r3
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	441a      	add	r2, r3
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	4413      	add	r3, r2
 800500c:	3342      	adds	r3, #66	@ 0x42
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	4618      	mov	r0, r3
                ic[current_ic].crc_count.pec_count =
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	4613      	mov	r3, r2
 8005016:	019b      	lsls	r3, r3, #6
 8005018:	4413      	add	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	461a      	mov	r2, r3
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	4413      	add	r3, r2
                                + ic[current_ic].cells.pec_match[i];
 8005022:	180a      	adds	r2, r1, r0
 8005024:	b292      	uxth	r2, r2
                ic[current_ic].crc_count.pec_count =
 8005026:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
                ic[current_ic].crc_count.cell_pec[i] =
                        ic[current_ic].crc_count.cell_pec[i]
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	4613      	mov	r3, r2
 800502e:	019b      	lsls	r3, r3, #6
 8005030:	4413      	add	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	461a      	mov	r2, r3
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	441a      	add	r2, r3
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	3360      	adds	r3, #96	@ 0x60
 800503e:	005b      	lsls	r3, r3, #1
 8005040:	4413      	add	r3, r2
 8005042:	8959      	ldrh	r1, [r3, #10]
                                + ic[current_ic].cells.pec_match[i];
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	4613      	mov	r3, r2
 8005048:	019b      	lsls	r3, r3, #6
 800504a:	4413      	add	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	461a      	mov	r2, r3
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	441a      	add	r2, r3
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	4413      	add	r3, r2
 8005058:	3342      	adds	r3, #66	@ 0x42
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	4618      	mov	r0, r3
                ic[current_ic].crc_count.cell_pec[i] =
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	4613      	mov	r3, r2
 8005062:	019b      	lsls	r3, r3, #6
 8005064:	4413      	add	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	461a      	mov	r2, r3
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	441a      	add	r2, r3
                                + ic[current_ic].cells.pec_match[i];
 800506e:	180b      	adds	r3, r1, r0
 8005070:	b299      	uxth	r1, r3
                ic[current_ic].crc_count.cell_pec[i] =
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	3360      	adds	r3, #96	@ 0x60
 8005076:	005b      	lsls	r3, r3, #1
 8005078:	4413      	add	r3, r2
 800507a:	460a      	mov	r2, r1
 800507c:	815a      	strh	r2, [r3, #10]
            for (i = 0; i < ic[0].ic_reg.num_cv_reg; i++)
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	3301      	adds	r3, #1
 8005082:	60bb      	str	r3, [r7, #8]
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 800508a:	461a      	mov	r2, r3
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	4293      	cmp	r3, r2
 8005090:	dba8      	blt.n	8004fe4 <LTC681x_check_pec+0x16c>
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	3301      	adds	r3, #1
 8005096:	60fb      	str	r3, [r7, #12]
 8005098:	79fb      	ldrb	r3, [r7, #7]
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	429a      	cmp	r2, r3
 800509e:	db9e      	blt.n	8004fde <LTC681x_check_pec+0x166>
            }
        }
        break;
 80050a0:	e0ca      	b.n	8005238 <LTC681x_check_pec+0x3c0>
    case AUX:
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 80050a2:	2300      	movs	r3, #0
 80050a4:	60fb      	str	r3, [r7, #12]
 80050a6:	e05c      	b.n	8005162 <LTC681x_check_pec+0x2ea>
        {
            for (i = 0; i < ic[0].ic_reg.num_gpio_reg; i++)
 80050a8:	2300      	movs	r3, #0
 80050aa:	60bb      	str	r3, [r7, #8]
 80050ac:	e04f      	b.n	800514e <LTC681x_check_pec+0x2d6>
            {
                ic[current_ic].crc_count.pec_count =
                        ic[current_ic].crc_count.pec_count
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	4613      	mov	r3, r2
 80050b2:	019b      	lsls	r3, r3, #6
 80050b4:	4413      	add	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	461a      	mov	r2, r3
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	4413      	add	r3, r2
 80050be:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	@ 0xc6
                                + (ic[current_ic].aux.pec_match[i]);
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	4613      	mov	r3, r2
 80050c6:	019b      	lsls	r3, r3, #6
 80050c8:	4413      	add	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	461a      	mov	r2, r3
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	441a      	add	r2, r3
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	4413      	add	r3, r2
 80050d6:	3360      	adds	r3, #96	@ 0x60
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	4618      	mov	r0, r3
                ic[current_ic].crc_count.pec_count =
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	4613      	mov	r3, r2
 80050e0:	019b      	lsls	r3, r3, #6
 80050e2:	4413      	add	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	461a      	mov	r2, r3
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	4413      	add	r3, r2
                                + (ic[current_ic].aux.pec_match[i]);
 80050ec:	180a      	adds	r2, r1, r0
 80050ee:	b292      	uxth	r2, r2
                ic[current_ic].crc_count.pec_count =
 80050f0:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
                ic[current_ic].crc_count.aux_pec[i] =
                        ic[current_ic].crc_count.aux_pec[i]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	4613      	mov	r3, r2
 80050f8:	019b      	lsls	r3, r3, #6
 80050fa:	4413      	add	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	461a      	mov	r2, r3
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	441a      	add	r2, r3
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	3368      	adds	r3, #104	@ 0x68
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	4413      	add	r3, r2
 800510c:	88d9      	ldrh	r1, [r3, #6]
                                + (ic[current_ic].aux.pec_match[i]);
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	4613      	mov	r3, r2
 8005112:	019b      	lsls	r3, r3, #6
 8005114:	4413      	add	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	461a      	mov	r2, r3
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	441a      	add	r2, r3
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	4413      	add	r3, r2
 8005122:	3360      	adds	r3, #96	@ 0x60
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	4618      	mov	r0, r3
                ic[current_ic].crc_count.aux_pec[i] =
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	4613      	mov	r3, r2
 800512c:	019b      	lsls	r3, r3, #6
 800512e:	4413      	add	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	461a      	mov	r2, r3
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	441a      	add	r2, r3
                                + (ic[current_ic].aux.pec_match[i]);
 8005138:	180b      	adds	r3, r1, r0
 800513a:	b299      	uxth	r1, r3
                ic[current_ic].crc_count.aux_pec[i] =
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	3368      	adds	r3, #104	@ 0x68
 8005140:	005b      	lsls	r3, r3, #1
 8005142:	4413      	add	r3, r2
 8005144:	460a      	mov	r2, r1
 8005146:	80da      	strh	r2, [r3, #6]
            for (i = 0; i < ic[0].ic_reg.num_gpio_reg; i++)
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	3301      	adds	r3, #1
 800514c:	60bb      	str	r3, [r7, #8]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8005154:	461a      	mov	r2, r3
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	4293      	cmp	r3, r2
 800515a:	dba8      	blt.n	80050ae <LTC681x_check_pec+0x236>
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	3301      	adds	r3, #1
 8005160:	60fb      	str	r3, [r7, #12]
 8005162:	79fb      	ldrb	r3, [r7, #7]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	429a      	cmp	r2, r3
 8005168:	db9e      	blt.n	80050a8 <LTC681x_check_pec+0x230>
            }
        }

        break;
 800516a:	e065      	b.n	8005238 <LTC681x_check_pec+0x3c0>
    case STAT:
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 800516c:	2300      	movs	r3, #0
 800516e:	60fb      	str	r3, [r7, #12]
 8005170:	e05c      	b.n	800522c <LTC681x_check_pec+0x3b4>
        {

            for (i = 0; i < ic[0].ic_reg.num_stat_reg - 1; i++)
 8005172:	2300      	movs	r3, #0
 8005174:	60bb      	str	r3, [r7, #8]
 8005176:	e04f      	b.n	8005218 <LTC681x_check_pec+0x3a0>
            {
                ic[current_ic].crc_count.pec_count =
                        ic[current_ic].crc_count.pec_count
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	4613      	mov	r3, r2
 800517c:	019b      	lsls	r3, r3, #6
 800517e:	4413      	add	r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	461a      	mov	r2, r3
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	4413      	add	r3, r2
 8005188:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	@ 0xc6
                                + ic[current_ic].stat.pec_match[i];
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	4613      	mov	r3, r2
 8005190:	019b      	lsls	r3, r3, #6
 8005192:	4413      	add	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	461a      	mov	r2, r3
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	441a      	add	r2, r3
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	4413      	add	r3, r2
 80051a0:	3371      	adds	r3, #113	@ 0x71
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	4618      	mov	r0, r3
                ic[current_ic].crc_count.pec_count =
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	4613      	mov	r3, r2
 80051aa:	019b      	lsls	r3, r3, #6
 80051ac:	4413      	add	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	461a      	mov	r2, r3
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	4413      	add	r3, r2
                                + ic[current_ic].stat.pec_match[i];
 80051b6:	180a      	adds	r2, r1, r0
 80051b8:	b292      	uxth	r2, r2
                ic[current_ic].crc_count.pec_count =
 80051ba:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
                ic[current_ic].crc_count.stat_pec[i] =
                        ic[current_ic].crc_count.stat_pec[i]
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	4613      	mov	r3, r2
 80051c2:	019b      	lsls	r3, r3, #6
 80051c4:	4413      	add	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	461a      	mov	r2, r3
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	441a      	add	r2, r3
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	336c      	adds	r3, #108	@ 0x6c
 80051d2:	005b      	lsls	r3, r3, #1
 80051d4:	4413      	add	r3, r2
 80051d6:	88d9      	ldrh	r1, [r3, #6]
                                + ic[current_ic].stat.pec_match[i];
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	4613      	mov	r3, r2
 80051dc:	019b      	lsls	r3, r3, #6
 80051de:	4413      	add	r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	461a      	mov	r2, r3
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	441a      	add	r2, r3
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	4413      	add	r3, r2
 80051ec:	3371      	adds	r3, #113	@ 0x71
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	4618      	mov	r0, r3
                ic[current_ic].crc_count.stat_pec[i] =
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	4613      	mov	r3, r2
 80051f6:	019b      	lsls	r3, r3, #6
 80051f8:	4413      	add	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	461a      	mov	r2, r3
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	441a      	add	r2, r3
                                + ic[current_ic].stat.pec_match[i];
 8005202:	180b      	adds	r3, r1, r0
 8005204:	b299      	uxth	r1, r3
                ic[current_ic].crc_count.stat_pec[i] =
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	336c      	adds	r3, #108	@ 0x6c
 800520a:	005b      	lsls	r3, r3, #1
 800520c:	4413      	add	r3, r2
 800520e:	460a      	mov	r2, r1
 8005210:	80da      	strh	r2, [r3, #6]
            for (i = 0; i < ic[0].ic_reg.num_stat_reg - 1; i++)
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	3301      	adds	r3, #1
 8005216:	60bb      	str	r3, [r7, #8]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
 800521e:	3b01      	subs	r3, #1
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	429a      	cmp	r2, r3
 8005224:	dba8      	blt.n	8005178 <LTC681x_check_pec+0x300>
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	3301      	adds	r3, #1
 800522a:	60fb      	str	r3, [r7, #12]
 800522c:	79fb      	ldrb	r3, [r7, #7]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	429a      	cmp	r2, r3
 8005232:	db9e      	blt.n	8005172 <LTC681x_check_pec+0x2fa>
            }
        }
        break;
 8005234:	e000      	b.n	8005238 <LTC681x_check_pec+0x3c0>
    default:
        break;
 8005236:	bf00      	nop
    }
}
 8005238:	bf00      	nop
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <LTC681x_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC681x_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that stores the data
        )
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	4603      	mov	r3, r0
 800524c:	6039      	str	r1, [r7, #0]
 800524e:	71fb      	strb	r3, [r7, #7]
    int i, current_ic;
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8005250:	2300      	movs	r3, #0
 8005252:	60bb      	str	r3, [r7, #8]
 8005254:	e05d      	b.n	8005312 <LTC681x_reset_crc_count+0xce>
    {
        ic[current_ic].crc_count.pec_count = 0;
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	4613      	mov	r3, r2
 800525a:	019b      	lsls	r3, r3, #6
 800525c:	4413      	add	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	461a      	mov	r2, r3
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	4413      	add	r3, r2
 8005266:	2200      	movs	r2, #0
 8005268:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
        ic[current_ic].crc_count.cfgr_pec = 0;
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	4613      	mov	r3, r2
 8005270:	019b      	lsls	r3, r3, #6
 8005272:	4413      	add	r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	461a      	mov	r2, r3
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	4413      	add	r3, r2
 800527c:	2200      	movs	r2, #0
 800527e:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
        for (i = 0; i < 6; i++)
 8005282:	2300      	movs	r3, #0
 8005284:	60fb      	str	r3, [r7, #12]
 8005286:	e010      	b.n	80052aa <LTC681x_reset_crc_count+0x66>
        {
            ic[current_ic].crc_count.cell_pec[i] = 0;
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	4613      	mov	r3, r2
 800528c:	019b      	lsls	r3, r3, #6
 800528e:	4413      	add	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	461a      	mov	r2, r3
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	441a      	add	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	3360      	adds	r3, #96	@ 0x60
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	4413      	add	r3, r2
 80052a0:	2200      	movs	r2, #0
 80052a2:	815a      	strh	r2, [r3, #10]
        for (i = 0; i < 6; i++)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	3301      	adds	r3, #1
 80052a8:	60fb      	str	r3, [r7, #12]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2b05      	cmp	r3, #5
 80052ae:	ddeb      	ble.n	8005288 <LTC681x_reset_crc_count+0x44>
        }
        for (i = 0; i < 4; i++)
 80052b0:	2300      	movs	r3, #0
 80052b2:	60fb      	str	r3, [r7, #12]
 80052b4:	e010      	b.n	80052d8 <LTC681x_reset_crc_count+0x94>
        {
            ic[current_ic].crc_count.aux_pec[i] = 0;
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	4613      	mov	r3, r2
 80052ba:	019b      	lsls	r3, r3, #6
 80052bc:	4413      	add	r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	461a      	mov	r2, r3
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	441a      	add	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	3368      	adds	r3, #104	@ 0x68
 80052ca:	005b      	lsls	r3, r3, #1
 80052cc:	4413      	add	r3, r2
 80052ce:	2200      	movs	r2, #0
 80052d0:	80da      	strh	r2, [r3, #6]
        for (i = 0; i < 4; i++)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	3301      	adds	r3, #1
 80052d6:	60fb      	str	r3, [r7, #12]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2b03      	cmp	r3, #3
 80052dc:	ddeb      	ble.n	80052b6 <LTC681x_reset_crc_count+0x72>
        }
        for (i = 0; i < 2; i++)
 80052de:	2300      	movs	r3, #0
 80052e0:	60fb      	str	r3, [r7, #12]
 80052e2:	e010      	b.n	8005306 <LTC681x_reset_crc_count+0xc2>
        {
            ic[current_ic].crc_count.stat_pec[i] = 0;
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	4613      	mov	r3, r2
 80052e8:	019b      	lsls	r3, r3, #6
 80052ea:	4413      	add	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	461a      	mov	r2, r3
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	441a      	add	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	336c      	adds	r3, #108	@ 0x6c
 80052f8:	005b      	lsls	r3, r3, #1
 80052fa:	4413      	add	r3, r2
 80052fc:	2200      	movs	r2, #0
 80052fe:	80da      	strh	r2, [r3, #6]
        for (i = 0; i < 2; i++)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	3301      	adds	r3, #1
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2b01      	cmp	r3, #1
 800530a:	ddeb      	ble.n	80052e4 <LTC681x_reset_crc_count+0xa0>
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	3301      	adds	r3, #1
 8005310:	60bb      	str	r3, [r7, #8]
 8005312:	79fb      	ldrb	r3, [r7, #7]
 8005314:	68ba      	ldr	r2, [r7, #8]
 8005316:	429a      	cmp	r2, r3
 8005318:	db9d      	blt.n	8005256 <LTC681x_reset_crc_count+0x12>
        }
    }
}
 800531a:	bf00      	nop
 800531c:	bf00      	nop
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <LTC681x_init_cfg>:

/* Helper function to initialize CFG variables */
void LTC681x_init_cfg(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that stores the data
        )
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	4603      	mov	r3, r0
 8005330:	6039      	str	r1, [r7, #0]
 8005332:	71fb      	strb	r3, [r7, #7]
    uint8_t current_ic, j;
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8005334:	2300      	movs	r3, #0
 8005336:	73fb      	strb	r3, [r7, #15]
 8005338:	e021      	b.n	800537e <LTC681x_init_cfg+0x56>
    {
        for (j = 0; j < 6; j++)
 800533a:	2300      	movs	r3, #0
 800533c:	73bb      	strb	r3, [r7, #14]
 800533e:	e00d      	b.n	800535c <LTC681x_init_cfg+0x34>
        {
            ic[current_ic].config.tx_data[j] = 0;
 8005340:	7bfa      	ldrb	r2, [r7, #15]
 8005342:	4613      	mov	r3, r2
 8005344:	019b      	lsls	r3, r3, #6
 8005346:	4413      	add	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	461a      	mov	r2, r3
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	441a      	add	r2, r3
 8005350:	7bbb      	ldrb	r3, [r7, #14]
 8005352:	2100      	movs	r1, #0
 8005354:	54d1      	strb	r1, [r2, r3]
        for (j = 0; j < 6; j++)
 8005356:	7bbb      	ldrb	r3, [r7, #14]
 8005358:	3301      	adds	r3, #1
 800535a:	73bb      	strb	r3, [r7, #14]
 800535c:	7bbb      	ldrb	r3, [r7, #14]
 800535e:	2b05      	cmp	r3, #5
 8005360:	d9ee      	bls.n	8005340 <LTC681x_init_cfg+0x18>
        }
        ic[current_ic].isospi_reverse = 0;
 8005362:	7bfa      	ldrb	r2, [r7, #15]
 8005364:	4613      	mov	r3, r2
 8005366:	019b      	lsls	r3, r3, #6
 8005368:	4413      	add	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	461a      	mov	r2, r3
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	4413      	add	r3, r2
 8005372:	2200      	movs	r2, #0
 8005374:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8005378:	7bfb      	ldrb	r3, [r7, #15]
 800537a:	3301      	adds	r3, #1
 800537c:	73fb      	strb	r3, [r7, #15]
 800537e:	7bfa      	ldrb	r2, [r7, #15]
 8005380:	79fb      	ldrb	r3, [r7, #7]
 8005382:	429a      	cmp	r2, r3
 8005384:	d3d9      	bcc.n	800533a <LTC681x_init_cfg+0x12>
    }
}
 8005386:	bf00      	nop
 8005388:	bf00      	nop
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <LTC681x_set_cfgr>:
        bool dcc[12], // The DCC bits
        bool dcto[4], // The Dcto bits
        uint16_t uv, // The UV value
        uint16_t ov // The OV value
        )
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6039      	str	r1, [r7, #0]
 800539c:	4611      	mov	r1, r2
 800539e:	461a      	mov	r2, r3
 80053a0:	4603      	mov	r3, r0
 80053a2:	71fb      	strb	r3, [r7, #7]
 80053a4:	460b      	mov	r3, r1
 80053a6:	71bb      	strb	r3, [r7, #6]
 80053a8:	4613      	mov	r3, r2
 80053aa:	717b      	strb	r3, [r7, #5]
    LTC681x_set_cfgr_refon(nIC, ic, refon);
 80053ac:	79ba      	ldrb	r2, [r7, #6]
 80053ae:	79fb      	ldrb	r3, [r7, #7]
 80053b0:	6839      	ldr	r1, [r7, #0]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 f828 	bl	8005408 <LTC681x_set_cfgr_refon>
    LTC681x_set_cfgr_adcopt(nIC, ic, adcopt);
 80053b8:	797a      	ldrb	r2, [r7, #5]
 80053ba:	79fb      	ldrb	r3, [r7, #7]
 80053bc:	6839      	ldr	r1, [r7, #0]
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 f85e 	bl	8005480 <LTC681x_set_cfgr_adcopt>
    LTC681x_set_cfgr_gpio(nIC, ic, gpio);
 80053c4:	79fb      	ldrb	r3, [r7, #7]
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	6839      	ldr	r1, [r7, #0]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 f894 	bl	80054f8 <LTC681x_set_cfgr_gpio>
    LTC681x_set_cfgr_dis(nIC, ic, dcc);
 80053d0:	79fb      	ldrb	r3, [r7, #7]
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	6839      	ldr	r1, [r7, #0]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 f8e6 	bl	80055a8 <LTC681x_set_cfgr_dis>
    LTC681x_set_cfgr_dcto(nIC, ic, dcto);
 80053dc:	79fb      	ldrb	r3, [r7, #7]
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	6839      	ldr	r1, [r7, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 f97f 	bl	80056e6 <LTC681x_set_cfgr_dcto>
    LTC681x_set_cfgr_uv(nIC, ic, uv);
 80053e8:	8bba      	ldrh	r2, [r7, #28]
 80053ea:	79fb      	ldrb	r3, [r7, #7]
 80053ec:	6839      	ldr	r1, [r7, #0]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 f9d1 	bl	8005796 <LTC681x_set_cfgr_uv>
    LTC681x_set_cfgr_ov(nIC, ic, ov);
 80053f4:	8c3a      	ldrh	r2, [r7, #32]
 80053f6:	79fb      	ldrb	r3, [r7, #7]
 80053f8:	6839      	ldr	r1, [r7, #0]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 fa1b 	bl	8005836 <LTC681x_set_cfgr_ov>
}
 8005400:	bf00      	nop
 8005402:	3708      	adds	r7, #8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <LTC681x_set_cfgr_refon>:

/* Helper function to set the REFON bit */
void LTC681x_set_cfgr_refon(uint8_t nIC, cell_asic *ic, bool refon)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	4603      	mov	r3, r0
 8005410:	6039      	str	r1, [r7, #0]
 8005412:	71fb      	strb	r3, [r7, #7]
 8005414:	4613      	mov	r3, r2
 8005416:	71bb      	strb	r3, [r7, #6]
    if (refon)
 8005418:	79bb      	ldrb	r3, [r7, #6]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d015      	beq.n	800544a <LTC681x_set_cfgr_refon+0x42>
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] | 0x04;
 800541e:	79fa      	ldrb	r2, [r7, #7]
 8005420:	4613      	mov	r3, r2
 8005422:	019b      	lsls	r3, r3, #6
 8005424:	4413      	add	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	461a      	mov	r2, r3
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	4413      	add	r3, r2
 800542e:	7819      	ldrb	r1, [r3, #0]
 8005430:	79fa      	ldrb	r2, [r7, #7]
 8005432:	4613      	mov	r3, r2
 8005434:	019b      	lsls	r3, r3, #6
 8005436:	4413      	add	r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	461a      	mov	r2, r3
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	4413      	add	r3, r2
 8005440:	f041 0204 	orr.w	r2, r1, #4
 8005444:	b2d2      	uxtb	r2, r2
 8005446:	701a      	strb	r2, [r3, #0]
    else
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] & 0xFB;
}
 8005448:	e014      	b.n	8005474 <LTC681x_set_cfgr_refon+0x6c>
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] & 0xFB;
 800544a:	79fa      	ldrb	r2, [r7, #7]
 800544c:	4613      	mov	r3, r2
 800544e:	019b      	lsls	r3, r3, #6
 8005450:	4413      	add	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	461a      	mov	r2, r3
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	4413      	add	r3, r2
 800545a:	7819      	ldrb	r1, [r3, #0]
 800545c:	79fa      	ldrb	r2, [r7, #7]
 800545e:	4613      	mov	r3, r2
 8005460:	019b      	lsls	r3, r3, #6
 8005462:	4413      	add	r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	461a      	mov	r2, r3
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	4413      	add	r3, r2
 800546c:	f021 0204 	bic.w	r2, r1, #4
 8005470:	b2d2      	uxtb	r2, r2
 8005472:	701a      	strb	r2, [r3, #0]
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <LTC681x_set_cfgr_adcopt>:

/* Helper function to set the ADCOPT bit */
void LTC681x_set_cfgr_adcopt(uint8_t nIC, cell_asic *ic, bool adcopt)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	4603      	mov	r3, r0
 8005488:	6039      	str	r1, [r7, #0]
 800548a:	71fb      	strb	r3, [r7, #7]
 800548c:	4613      	mov	r3, r2
 800548e:	71bb      	strb	r3, [r7, #6]
    if (adcopt)
 8005490:	79bb      	ldrb	r3, [r7, #6]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d015      	beq.n	80054c2 <LTC681x_set_cfgr_adcopt+0x42>
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] | 0x01;
 8005496:	79fa      	ldrb	r2, [r7, #7]
 8005498:	4613      	mov	r3, r2
 800549a:	019b      	lsls	r3, r3, #6
 800549c:	4413      	add	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	461a      	mov	r2, r3
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	4413      	add	r3, r2
 80054a6:	7819      	ldrb	r1, [r3, #0]
 80054a8:	79fa      	ldrb	r2, [r7, #7]
 80054aa:	4613      	mov	r3, r2
 80054ac:	019b      	lsls	r3, r3, #6
 80054ae:	4413      	add	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	461a      	mov	r2, r3
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	4413      	add	r3, r2
 80054b8:	f041 0201 	orr.w	r2, r1, #1
 80054bc:	b2d2      	uxtb	r2, r2
 80054be:	701a      	strb	r2, [r3, #0]
    else
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] & 0xFE;
}
 80054c0:	e014      	b.n	80054ec <LTC681x_set_cfgr_adcopt+0x6c>
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] & 0xFE;
 80054c2:	79fa      	ldrb	r2, [r7, #7]
 80054c4:	4613      	mov	r3, r2
 80054c6:	019b      	lsls	r3, r3, #6
 80054c8:	4413      	add	r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	461a      	mov	r2, r3
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	4413      	add	r3, r2
 80054d2:	7819      	ldrb	r1, [r3, #0]
 80054d4:	79fa      	ldrb	r2, [r7, #7]
 80054d6:	4613      	mov	r3, r2
 80054d8:	019b      	lsls	r3, r3, #6
 80054da:	4413      	add	r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	461a      	mov	r2, r3
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	4413      	add	r3, r2
 80054e4:	f021 0201 	bic.w	r2, r1, #1
 80054e8:	b2d2      	uxtb	r2, r2
 80054ea:	701a      	strb	r2, [r3, #0]
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <LTC681x_set_cfgr_gpio>:

/* Helper function to set GPIO bits */
void LTC681x_set_cfgr_gpio(uint8_t nIC, cell_asic *ic, bool gpio[5])
{
 80054f8:	b480      	push	{r7}
 80054fa:	b087      	sub	sp, #28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	4603      	mov	r3, r0
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
 8005504:	73fb      	strb	r3, [r7, #15]
    int i;
    for (i = 0; i < 5; i++)
 8005506:	2300      	movs	r3, #0
 8005508:	617b      	str	r3, [r7, #20]
 800550a:	e043      	b.n	8005594 <LTC681x_set_cfgr_gpio+0x9c>
    {
        if (gpio[i])
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	4413      	add	r3, r2
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d01c      	beq.n	8005552 <LTC681x_set_cfgr_gpio+0x5a>
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 8005518:	7bfa      	ldrb	r2, [r7, #15]
 800551a:	4613      	mov	r3, r2
 800551c:	019b      	lsls	r3, r3, #6
 800551e:	4413      	add	r3, r2
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	461a      	mov	r2, r3
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	4413      	add	r3, r2
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	b25a      	sxtb	r2, r3
                    | (0x01 << (i + 3));
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	3303      	adds	r3, #3
 8005530:	2101      	movs	r1, #1
 8005532:	fa01 f303 	lsl.w	r3, r1, r3
 8005536:	b25b      	sxtb	r3, r3
 8005538:	4313      	orrs	r3, r2
 800553a:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 800553c:	7bfa      	ldrb	r2, [r7, #15]
 800553e:	4613      	mov	r3, r2
 8005540:	019b      	lsls	r3, r3, #6
 8005542:	4413      	add	r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	461a      	mov	r2, r3
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	4413      	add	r3, r2
                    | (0x01 << (i + 3));
 800554c:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 800554e:	701a      	strb	r2, [r3, #0]
 8005550:	e01d      	b.n	800558e <LTC681x_set_cfgr_gpio+0x96>
        else
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 8005552:	7bfa      	ldrb	r2, [r7, #15]
 8005554:	4613      	mov	r3, r2
 8005556:	019b      	lsls	r3, r3, #6
 8005558:	4413      	add	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	461a      	mov	r2, r3
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	4413      	add	r3, r2
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	b25a      	sxtb	r2, r3
                    & (~(0x01 << (i + 3)));
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	3303      	adds	r3, #3
 800556a:	2101      	movs	r1, #1
 800556c:	fa01 f303 	lsl.w	r3, r1, r3
 8005570:	b25b      	sxtb	r3, r3
 8005572:	43db      	mvns	r3, r3
 8005574:	b25b      	sxtb	r3, r3
 8005576:	4013      	ands	r3, r2
 8005578:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 800557a:	7bfa      	ldrb	r2, [r7, #15]
 800557c:	4613      	mov	r3, r2
 800557e:	019b      	lsls	r3, r3, #6
 8005580:	4413      	add	r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	461a      	mov	r2, r3
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	4413      	add	r3, r2
                    & (~(0x01 << (i + 3)));
 800558a:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 800558c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 5; i++)
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	3301      	adds	r3, #1
 8005592:	617b      	str	r3, [r7, #20]
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	2b04      	cmp	r3, #4
 8005598:	ddb8      	ble.n	800550c <LTC681x_set_cfgr_gpio+0x14>
    }
}
 800559a:	bf00      	nop
 800559c:	bf00      	nop
 800559e:	371c      	adds	r7, #28
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <LTC681x_set_cfgr_dis>:

/* Helper function to control discharge */
void LTC681x_set_cfgr_dis(uint8_t nIC, cell_asic *ic, bool dcc[12])
{
 80055a8:	b480      	push	{r7}
 80055aa:	b087      	sub	sp, #28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	4603      	mov	r3, r0
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
 80055b4:	73fb      	strb	r3, [r7, #15]
    int i;
    for (i = 0; i < 8; i++)
 80055b6:	2300      	movs	r3, #0
 80055b8:	617b      	str	r3, [r7, #20]
 80055ba:	e041      	b.n	8005640 <LTC681x_set_cfgr_dis+0x98>
    {
        if (dcc[i])
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	4413      	add	r3, r2
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d01b      	beq.n	8005600 <LTC681x_set_cfgr_dis+0x58>
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4] | (0x01 << i);
 80055c8:	7bfa      	ldrb	r2, [r7, #15]
 80055ca:	4613      	mov	r3, r2
 80055cc:	019b      	lsls	r3, r3, #6
 80055ce:	4413      	add	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	461a      	mov	r2, r3
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	4413      	add	r3, r2
 80055d8:	791b      	ldrb	r3, [r3, #4]
 80055da:	b25a      	sxtb	r2, r3
 80055dc:	2101      	movs	r1, #1
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	fa01 f303 	lsl.w	r3, r1, r3
 80055e4:	b25b      	sxtb	r3, r3
 80055e6:	4313      	orrs	r3, r2
 80055e8:	b259      	sxtb	r1, r3
 80055ea:	7bfa      	ldrb	r2, [r7, #15]
 80055ec:	4613      	mov	r3, r2
 80055ee:	019b      	lsls	r3, r3, #6
 80055f0:	4413      	add	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	461a      	mov	r2, r3
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	4413      	add	r3, r2
 80055fa:	b2ca      	uxtb	r2, r1
 80055fc:	711a      	strb	r2, [r3, #4]
 80055fe:	e01c      	b.n	800563a <LTC681x_set_cfgr_dis+0x92>
        else
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]
 8005600:	7bfa      	ldrb	r2, [r7, #15]
 8005602:	4613      	mov	r3, r2
 8005604:	019b      	lsls	r3, r3, #6
 8005606:	4413      	add	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	461a      	mov	r2, r3
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	4413      	add	r3, r2
 8005610:	791b      	ldrb	r3, [r3, #4]
 8005612:	b25a      	sxtb	r2, r3
                    & (~(0x01 << i));
 8005614:	2101      	movs	r1, #1
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	fa01 f303 	lsl.w	r3, r1, r3
 800561c:	b25b      	sxtb	r3, r3
 800561e:	43db      	mvns	r3, r3
 8005620:	b25b      	sxtb	r3, r3
 8005622:	4013      	ands	r3, r2
 8005624:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]
 8005626:	7bfa      	ldrb	r2, [r7, #15]
 8005628:	4613      	mov	r3, r2
 800562a:	019b      	lsls	r3, r3, #6
 800562c:	4413      	add	r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	461a      	mov	r2, r3
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	4413      	add	r3, r2
                    & (~(0x01 << i));
 8005636:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]
 8005638:	711a      	strb	r2, [r3, #4]
    for (i = 0; i < 8; i++)
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	3301      	adds	r3, #1
 800563e:	617b      	str	r3, [r7, #20]
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	2b07      	cmp	r3, #7
 8005644:	ddba      	ble.n	80055bc <LTC681x_set_cfgr_dis+0x14>
    }
    for (i = 0; i < 4; i++)
 8005646:	2300      	movs	r3, #0
 8005648:	617b      	str	r3, [r7, #20]
 800564a:	e042      	b.n	80056d2 <LTC681x_set_cfgr_dis+0x12a>
    {
        if (dcc[i + 8])
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	3308      	adds	r3, #8
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	4413      	add	r3, r2
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d01b      	beq.n	8005692 <LTC681x_set_cfgr_dis+0xea>
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5] | (0x01 << i);
 800565a:	7bfa      	ldrb	r2, [r7, #15]
 800565c:	4613      	mov	r3, r2
 800565e:	019b      	lsls	r3, r3, #6
 8005660:	4413      	add	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	461a      	mov	r2, r3
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	4413      	add	r3, r2
 800566a:	795b      	ldrb	r3, [r3, #5]
 800566c:	b25a      	sxtb	r2, r3
 800566e:	2101      	movs	r1, #1
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	fa01 f303 	lsl.w	r3, r1, r3
 8005676:	b25b      	sxtb	r3, r3
 8005678:	4313      	orrs	r3, r2
 800567a:	b259      	sxtb	r1, r3
 800567c:	7bfa      	ldrb	r2, [r7, #15]
 800567e:	4613      	mov	r3, r2
 8005680:	019b      	lsls	r3, r3, #6
 8005682:	4413      	add	r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	461a      	mov	r2, r3
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	4413      	add	r3, r2
 800568c:	b2ca      	uxtb	r2, r1
 800568e:	715a      	strb	r2, [r3, #5]
 8005690:	e01c      	b.n	80056cc <LTC681x_set_cfgr_dis+0x124>
        else
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8005692:	7bfa      	ldrb	r2, [r7, #15]
 8005694:	4613      	mov	r3, r2
 8005696:	019b      	lsls	r3, r3, #6
 8005698:	4413      	add	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	461a      	mov	r2, r3
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	4413      	add	r3, r2
 80056a2:	795b      	ldrb	r3, [r3, #5]
 80056a4:	b25a      	sxtb	r2, r3
                    & (~(0x01 << i));
 80056a6:	2101      	movs	r1, #1
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	fa01 f303 	lsl.w	r3, r1, r3
 80056ae:	b25b      	sxtb	r3, r3
 80056b0:	43db      	mvns	r3, r3
 80056b2:	b25b      	sxtb	r3, r3
 80056b4:	4013      	ands	r3, r2
 80056b6:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 80056b8:	7bfa      	ldrb	r2, [r7, #15]
 80056ba:	4613      	mov	r3, r2
 80056bc:	019b      	lsls	r3, r3, #6
 80056be:	4413      	add	r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	461a      	mov	r2, r3
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	4413      	add	r3, r2
                    & (~(0x01 << i));
 80056c8:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 80056ca:	715a      	strb	r2, [r3, #5]
    for (i = 0; i < 4; i++)
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	3301      	adds	r3, #1
 80056d0:	617b      	str	r3, [r7, #20]
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	2b03      	cmp	r3, #3
 80056d6:	ddb9      	ble.n	800564c <LTC681x_set_cfgr_dis+0xa4>
    }
}
 80056d8:	bf00      	nop
 80056da:	bf00      	nop
 80056dc:	371c      	adds	r7, #28
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <LTC681x_set_cfgr_dcto>:

/* Helper function to control discharge time value */
void LTC681x_set_cfgr_dcto(uint8_t nIC, cell_asic *ic, bool dcto[4])
{
 80056e6:	b480      	push	{r7}
 80056e8:	b087      	sub	sp, #28
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	4603      	mov	r3, r0
 80056ee:	60b9      	str	r1, [r7, #8]
 80056f0:	607a      	str	r2, [r7, #4]
 80056f2:	73fb      	strb	r3, [r7, #15]
    int i;
    for (i = 0; i < 4; i++)
 80056f4:	2300      	movs	r3, #0
 80056f6:	617b      	str	r3, [r7, #20]
 80056f8:	e043      	b.n	8005782 <LTC681x_set_cfgr_dcto+0x9c>
    {
        if (dcto[i])
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	4413      	add	r3, r2
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d01c      	beq.n	8005740 <LTC681x_set_cfgr_dcto+0x5a>
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8005706:	7bfa      	ldrb	r2, [r7, #15]
 8005708:	4613      	mov	r3, r2
 800570a:	019b      	lsls	r3, r3, #6
 800570c:	4413      	add	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	461a      	mov	r2, r3
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	4413      	add	r3, r2
 8005716:	795b      	ldrb	r3, [r3, #5]
 8005718:	b25a      	sxtb	r2, r3
                    | (0x01 << (i + 4));
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	3304      	adds	r3, #4
 800571e:	2101      	movs	r1, #1
 8005720:	fa01 f303 	lsl.w	r3, r1, r3
 8005724:	b25b      	sxtb	r3, r3
 8005726:	4313      	orrs	r3, r2
 8005728:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 800572a:	7bfa      	ldrb	r2, [r7, #15]
 800572c:	4613      	mov	r3, r2
 800572e:	019b      	lsls	r3, r3, #6
 8005730:	4413      	add	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	461a      	mov	r2, r3
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	4413      	add	r3, r2
                    | (0x01 << (i + 4));
 800573a:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 800573c:	715a      	strb	r2, [r3, #5]
 800573e:	e01d      	b.n	800577c <LTC681x_set_cfgr_dcto+0x96>
        else
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8005740:	7bfa      	ldrb	r2, [r7, #15]
 8005742:	4613      	mov	r3, r2
 8005744:	019b      	lsls	r3, r3, #6
 8005746:	4413      	add	r3, r2
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	461a      	mov	r2, r3
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	4413      	add	r3, r2
 8005750:	795b      	ldrb	r3, [r3, #5]
 8005752:	b25a      	sxtb	r2, r3
                    & (~(0x01 << (i + 4)));
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	3304      	adds	r3, #4
 8005758:	2101      	movs	r1, #1
 800575a:	fa01 f303 	lsl.w	r3, r1, r3
 800575e:	b25b      	sxtb	r3, r3
 8005760:	43db      	mvns	r3, r3
 8005762:	b25b      	sxtb	r3, r3
 8005764:	4013      	ands	r3, r2
 8005766:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8005768:	7bfa      	ldrb	r2, [r7, #15]
 800576a:	4613      	mov	r3, r2
 800576c:	019b      	lsls	r3, r3, #6
 800576e:	4413      	add	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	461a      	mov	r2, r3
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	4413      	add	r3, r2
                    & (~(0x01 << (i + 4)));
 8005778:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 800577a:	715a      	strb	r2, [r3, #5]
    for (i = 0; i < 4; i++)
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	3301      	adds	r3, #1
 8005780:	617b      	str	r3, [r7, #20]
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	2b03      	cmp	r3, #3
 8005786:	ddb8      	ble.n	80056fa <LTC681x_set_cfgr_dcto+0x14>
    }
}
 8005788:	bf00      	nop
 800578a:	bf00      	nop
 800578c:	371c      	adds	r7, #28
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <LTC681x_set_cfgr_uv>:

/* Helper Function to set UV value in CFG register */
void LTC681x_set_cfgr_uv(uint8_t nIC, cell_asic *ic, uint16_t uv)
{
 8005796:	b480      	push	{r7}
 8005798:	b085      	sub	sp, #20
 800579a:	af00      	add	r7, sp, #0
 800579c:	4603      	mov	r3, r0
 800579e:	6039      	str	r1, [r7, #0]
 80057a0:	71fb      	strb	r3, [r7, #7]
 80057a2:	4613      	mov	r3, r2
 80057a4:	80bb      	strh	r3, [r7, #4]
    uint16_t tmp = (uv / 16) - 1;
 80057a6:	88bb      	ldrh	r3, [r7, #4]
 80057a8:	091b      	lsrs	r3, r3, #4
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	3b01      	subs	r3, #1
 80057ae:	81fb      	strh	r3, [r7, #14]
    ic[nIC].config.tx_data[1] = 0x00FF & tmp;
 80057b0:	79fa      	ldrb	r2, [r7, #7]
 80057b2:	4613      	mov	r3, r2
 80057b4:	019b      	lsls	r3, r3, #6
 80057b6:	4413      	add	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	461a      	mov	r2, r3
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	4413      	add	r3, r2
 80057c0:	89fa      	ldrh	r2, [r7, #14]
 80057c2:	b2d2      	uxtb	r2, r2
 80057c4:	705a      	strb	r2, [r3, #1]
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2] & 0xF0;
 80057c6:	79fa      	ldrb	r2, [r7, #7]
 80057c8:	4613      	mov	r3, r2
 80057ca:	019b      	lsls	r3, r3, #6
 80057cc:	4413      	add	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	461a      	mov	r2, r3
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	4413      	add	r3, r2
 80057d6:	7899      	ldrb	r1, [r3, #2]
 80057d8:	79fa      	ldrb	r2, [r7, #7]
 80057da:	4613      	mov	r3, r2
 80057dc:	019b      	lsls	r3, r3, #6
 80057de:	4413      	add	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	461a      	mov	r2, r3
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	4413      	add	r3, r2
 80057e8:	f021 020f 	bic.w	r2, r1, #15
 80057ec:	b2d2      	uxtb	r2, r2
 80057ee:	709a      	strb	r2, [r3, #2]
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 80057f0:	79fa      	ldrb	r2, [r7, #7]
 80057f2:	4613      	mov	r3, r2
 80057f4:	019b      	lsls	r3, r3, #6
 80057f6:	4413      	add	r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	461a      	mov	r2, r3
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	4413      	add	r3, r2
 8005800:	789b      	ldrb	r3, [r3, #2]
 8005802:	b25a      	sxtb	r2, r3
            | ((0x0F00 & tmp) >> 8);
 8005804:	89fb      	ldrh	r3, [r7, #14]
 8005806:	0a1b      	lsrs	r3, r3, #8
 8005808:	b29b      	uxth	r3, r3
 800580a:	b25b      	sxtb	r3, r3
 800580c:	f003 030f 	and.w	r3, r3, #15
 8005810:	b25b      	sxtb	r3, r3
 8005812:	4313      	orrs	r3, r2
 8005814:	b259      	sxtb	r1, r3
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 8005816:	79fa      	ldrb	r2, [r7, #7]
 8005818:	4613      	mov	r3, r2
 800581a:	019b      	lsls	r3, r3, #6
 800581c:	4413      	add	r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	461a      	mov	r2, r3
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	4413      	add	r3, r2
            | ((0x0F00 & tmp) >> 8);
 8005826:	b2ca      	uxtb	r2, r1
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 8005828:	709a      	strb	r2, [r3, #2]
}
 800582a:	bf00      	nop
 800582c:	3714      	adds	r7, #20
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr

08005836 <LTC681x_set_cfgr_ov>:

/* Helper function to set OV value in CFG register */
void LTC681x_set_cfgr_ov(uint8_t nIC, cell_asic *ic, uint16_t ov)
{
 8005836:	b480      	push	{r7}
 8005838:	b085      	sub	sp, #20
 800583a:	af00      	add	r7, sp, #0
 800583c:	4603      	mov	r3, r0
 800583e:	6039      	str	r1, [r7, #0]
 8005840:	71fb      	strb	r3, [r7, #7]
 8005842:	4613      	mov	r3, r2
 8005844:	80bb      	strh	r3, [r7, #4]
    uint16_t tmp = (ov / 16);
 8005846:	88bb      	ldrh	r3, [r7, #4]
 8005848:	091b      	lsrs	r3, r3, #4
 800584a:	81fb      	strh	r3, [r7, #14]
    ic[nIC].config.tx_data[3] = 0x00FF & (tmp >> 4);
 800584c:	89fb      	ldrh	r3, [r7, #14]
 800584e:	091b      	lsrs	r3, r3, #4
 8005850:	b299      	uxth	r1, r3
 8005852:	79fa      	ldrb	r2, [r7, #7]
 8005854:	4613      	mov	r3, r2
 8005856:	019b      	lsls	r3, r3, #6
 8005858:	4413      	add	r3, r2
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	461a      	mov	r2, r3
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	4413      	add	r3, r2
 8005862:	b2ca      	uxtb	r2, r1
 8005864:	70da      	strb	r2, [r3, #3]
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2] & 0x0F;
 8005866:	79fa      	ldrb	r2, [r7, #7]
 8005868:	4613      	mov	r3, r2
 800586a:	019b      	lsls	r3, r3, #6
 800586c:	4413      	add	r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	461a      	mov	r2, r3
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	4413      	add	r3, r2
 8005876:	7899      	ldrb	r1, [r3, #2]
 8005878:	79fa      	ldrb	r2, [r7, #7]
 800587a:	4613      	mov	r3, r2
 800587c:	019b      	lsls	r3, r3, #6
 800587e:	4413      	add	r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	461a      	mov	r2, r3
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	4413      	add	r3, r2
 8005888:	f001 020f 	and.w	r2, r1, #15
 800588c:	b2d2      	uxtb	r2, r2
 800588e:	709a      	strb	r2, [r3, #2]
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 8005890:	79fa      	ldrb	r2, [r7, #7]
 8005892:	4613      	mov	r3, r2
 8005894:	019b      	lsls	r3, r3, #6
 8005896:	4413      	add	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	461a      	mov	r2, r3
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	4413      	add	r3, r2
 80058a0:	789b      	ldrb	r3, [r3, #2]
 80058a2:	b25a      	sxtb	r2, r3
            | ((0x000F & tmp) << 4);
 80058a4:	89fb      	ldrh	r3, [r7, #14]
 80058a6:	b25b      	sxtb	r3, r3
 80058a8:	011b      	lsls	r3, r3, #4
 80058aa:	b25b      	sxtb	r3, r3
 80058ac:	4313      	orrs	r3, r2
 80058ae:	b259      	sxtb	r1, r3
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 80058b0:	79fa      	ldrb	r2, [r7, #7]
 80058b2:	4613      	mov	r3, r2
 80058b4:	019b      	lsls	r3, r3, #6
 80058b6:	4413      	add	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	461a      	mov	r2, r3
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	4413      	add	r3, r2
            | ((0x000F & tmp) << 4);
 80058c0:	b2ca      	uxtb	r2, r1
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 80058c2:	709a      	strb	r2, [r3, #2]
}
 80058c4:	bf00      	nop
 80058c6:	3714      	adds	r7, #20
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <cs_low>:
		4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 0, 0, 0, -1, -1, -1, -2, -2, -2, -3,
		-3, -3, -4, -4, -4, -5, -5, -5, -5, -6, -6, -6, -7, -7, -7, -8, -8, -8,
		-9, -9, -9, -10, -10, -10, -10, -11, -11, -11, -12, -12, -12, -13, -13,
		-13, -13, -14, -14, -14, -15, -15, -15, -16, -16, -16, -16, -25 };

void cs_low() {
 80058d0:	b580      	push	{r7, lr}
 80058d2:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80058d4:	2200      	movs	r2, #0
 80058d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80058da:	4805      	ldr	r0, [pc, #20]	@ (80058f0 <cs_low+0x20>)
 80058dc:	f003 fb02 	bl	8008ee4 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);// Enable Pack, /CS asserted
 80058e0:	2201      	movs	r2, #1
 80058e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80058e6:	4803      	ldr	r0, [pc, #12]	@ (80058f4 <cs_low+0x24>)
 80058e8:	f003 fafc 	bl	8008ee4 <HAL_GPIO_WritePin>


}
 80058ec:	bf00      	nop
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	40020400 	.word	0x40020400
 80058f4:	40020c00 	.word	0x40020c00

080058f8 <cs_high>:

void cs_high() {
 80058f8:	b580      	push	{r7, lr}
 80058fa:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80058fc:	2201      	movs	r2, #1
 80058fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005902:	4805      	ldr	r0, [pc, #20]	@ (8005918 <cs_high+0x20>)
 8005904:	f003 faee 	bl	8008ee4 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);// Disable Pack, /CS deasserted
 8005908:	2201      	movs	r2, #1
 800590a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800590e:	4803      	ldr	r0, [pc, #12]	@ (800591c <cs_high+0x24>)
 8005910:	f003 fae8 	bl	8008ee4 <HAL_GPIO_WritePin>


}
 8005914:	bf00      	nop
 8005916:	bd80      	pop	{r7, pc}
 8005918:	40020400 	.word	0x40020400
 800591c:	40020c00 	.word	0x40020c00

08005920 <delay_time_us>:

void delay_time_us(uint32_t time_delay_val) {
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
	uint32_t time_delay_count;
	uint32_t time_delay_val_temp = time_delay_val * 9;
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	4613      	mov	r3, r2
 800592c:	00db      	lsls	r3, r3, #3
 800592e:	4413      	add	r3, r2
 8005930:	60bb      	str	r3, [r7, #8]
	for (time_delay_count = 0; time_delay_count < time_delay_val_temp;
 8005932:	2300      	movs	r3, #0
 8005934:	60fb      	str	r3, [r7, #12]
 8005936:	e003      	b.n	8005940 <delay_time_us+0x20>
			time_delay_count++) {
		__NOP();
 8005938:	bf00      	nop
			time_delay_count++) {
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	3301      	adds	r3, #1
 800593e:	60fb      	str	r3, [r7, #12]
	for (time_delay_count = 0; time_delay_count < time_delay_val_temp;
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	429a      	cmp	r2, r3
 8005946:	d3f7      	bcc.n	8005938 <delay_time_us+0x18>
	}
}
 8005948:	bf00      	nop
 800594a:	bf00      	nop
 800594c:	3714      	adds	r7, #20
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
	...

08005958 <spi_write_array>:
 * @param parameters   :  Data length, data to transmit
 */

void spi_write_array(uint8_t len, // Option: Number of bytes to be written on the SPI port
		uint8_t data[] //Array of bytes to be written on the SPI port
		) {
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	4603      	mov	r3, r0
 8005960:	6039      	str	r1, [r7, #0]
 8005962:	71fb      	strb	r3, [r7, #7]
	uint8_t len_t;
	for (len_t = 0; len_t < len; len_t++) {
 8005964:	2300      	movs	r3, #0
 8005966:	73fb      	strb	r3, [r7, #15]
 8005968:	e00f      	b.n	800598a <spi_write_array+0x32>
		if (HAL_SPI_Transmit(&hspi4, &data[len_t], 1, 20) != HAL_OK) {
 800596a:	7bfb      	ldrb	r3, [r7, #15]
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	18d1      	adds	r1, r2, r3
 8005970:	2314      	movs	r3, #20
 8005972:	2201      	movs	r2, #1
 8005974:	4809      	ldr	r0, [pc, #36]	@ (800599c <spi_write_array+0x44>)
 8005976:	f005 f882 	bl	800aa7e <HAL_SPI_Transmit>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d001      	beq.n	8005984 <spi_write_array+0x2c>
			/* Transfer error in transmission process */
			Error_Handler();
 8005980:	f001 ff0b 	bl	800779a <Error_Handler>
	for (len_t = 0; len_t < len; len_t++) {
 8005984:	7bfb      	ldrb	r3, [r7, #15]
 8005986:	3301      	adds	r3, #1
 8005988:	73fb      	strb	r3, [r7, #15]
 800598a:	7bfa      	ldrb	r2, [r7, #15]
 800598c:	79fb      	ldrb	r3, [r7, #7]
 800598e:	429a      	cmp	r2, r3
 8005990:	d3eb      	bcc.n	800596a <spi_write_array+0x12>
		}
	}

}
 8005992:	bf00      	nop
 8005994:	bf00      	nop
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	200019d8 	.word	0x200019d8

080059a0 <spi_write_read>:

void spi_write_read(uint8_t tx_Data[], //array of data to be written on SPI port
		uint8_t tx_len, //length of the tx data array
		uint8_t *rx_data, //Input: array that will store the data read by the SPI port
		uint8_t rx_len //Option: number of bytes to be read from the SPI port
		) {
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	607a      	str	r2, [r7, #4]
 80059aa:	461a      	mov	r2, r3
 80059ac:	460b      	mov	r3, r1
 80059ae:	72fb      	strb	r3, [r7, #11]
 80059b0:	4613      	mov	r3, r2
 80059b2:	72bb      	strb	r3, [r7, #10]
	status_spi_out = HAL_SPI_Transmit(&hspi4, tx_Data, tx_len, 20);
 80059b4:	7afb      	ldrb	r3, [r7, #11]
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	2314      	movs	r3, #20
 80059ba:	68f9      	ldr	r1, [r7, #12]
 80059bc:	4812      	ldr	r0, [pc, #72]	@ (8005a08 <spi_write_read+0x68>)
 80059be:	f005 f85e 	bl	800aa7e <HAL_SPI_Transmit>
 80059c2:	4603      	mov	r3, r0
 80059c4:	461a      	mov	r2, r3
 80059c6:	4b11      	ldr	r3, [pc, #68]	@ (8005a0c <spi_write_read+0x6c>)
 80059c8:	701a      	strb	r2, [r3, #0]
	rx_len_local = rx_len;
 80059ca:	4a11      	ldr	r2, [pc, #68]	@ (8005a10 <spi_write_read+0x70>)
 80059cc:	7abb      	ldrb	r3, [r7, #10]
 80059ce:	7013      	strb	r3, [r2, #0]
	if (status_spi_out != HAL_OK) {
 80059d0:	4b0e      	ldr	r3, [pc, #56]	@ (8005a0c <spi_write_read+0x6c>)
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d001      	beq.n	80059dc <spi_write_read+0x3c>

		Error_Handler();
 80059d8:	f001 fedf 	bl	800779a <Error_Handler>
	}
	status_spi_in = HAL_SPI_Receive(&hspi4, rx_data, rx_len, 20);
 80059dc:	7abb      	ldrb	r3, [r7, #10]
 80059de:	b29a      	uxth	r2, r3
 80059e0:	2314      	movs	r3, #20
 80059e2:	6879      	ldr	r1, [r7, #4]
 80059e4:	4808      	ldr	r0, [pc, #32]	@ (8005a08 <spi_write_read+0x68>)
 80059e6:	f005 f98e 	bl	800ad06 <HAL_SPI_Receive>
 80059ea:	4603      	mov	r3, r0
 80059ec:	461a      	mov	r2, r3
 80059ee:	4b09      	ldr	r3, [pc, #36]	@ (8005a14 <spi_write_read+0x74>)
 80059f0:	701a      	strb	r2, [r3, #0]
	if (status_spi_in != HAL_OK) {
 80059f2:	4b08      	ldr	r3, [pc, #32]	@ (8005a14 <spi_write_read+0x74>)
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <spi_write_read+0x5e>

		Error_Handler();
 80059fa:	f001 fece 	bl	800779a <Error_Handler>
	}

}
 80059fe:	bf00      	nop
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	200019d8 	.word	0x200019d8
 8005a0c:	20001215 	.word	0x20001215
 8005a10:	20001214 	.word	0x20001214
 8005a14:	20001216 	.word	0x20001216

08005a18 <spi_read_byte>:
 * @brief Description  :  Read just 1 byte using the SPI port
 * @param parameters   :  TX data array, TX data length, RX data pointer, number of bytes to be read from the SPI port
 * @return Value       :  return the data RX buffer
 */

uint8_t spi_read_byte(uint8_t tx_dat) {
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b086      	sub	sp, #24
 8005a1c:	af02      	add	r7, sp, #8
 8005a1e:	4603      	mov	r3, r0
 8005a20:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	if (HAL_SPI_TransmitReceive(&hspi4, &tx_dat, &data, 1, 20) != HAL_OK) {
 8005a22:	f107 020f 	add.w	r2, r7, #15
 8005a26:	1df9      	adds	r1, r7, #7
 8005a28:	2314      	movs	r3, #20
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	4806      	ldr	r0, [pc, #24]	@ (8005a48 <spi_read_byte+0x30>)
 8005a30:	f005 fa82 	bl	800af38 <HAL_SPI_TransmitReceive>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d001      	beq.n	8005a3e <spi_read_byte+0x26>
		Error_Handler();
 8005a3a:	f001 feae 	bl	800779a <Error_Handler>
	}
	return (data);
 8005a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	200019d8 	.word	0x200019d8

08005a4c <cell_voltage_read>:
        temperature_val_tb = TemperatureDataTable[temp_val_tp];
    }
    return temperature_val_tb;
}

int8_t cell_voltage_read(void) {
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
	int8_t error = 0;
 8005a52:	2300      	movs	r3, #0
 8005a54:	717b      	strb	r3, [r7, #5]
	wakeup_sleep(TOTAL_IC);
 8005a56:	2002      	movs	r0, #2
 8005a58:	f7fe fe9e 	bl	8004798 <wakeup_sleep>
	LTC6811_adcv(ADC_CONVERSION_MODE, ADC_DCP, CELL_CH_TO_CONVERT);
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	2100      	movs	r1, #0
 8005a60:	2200      	movs	r2, #0
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fe fe28 	bl	80046b8 <LTC6811_adcv>
	 LTC6811_pollAdc();
 8005a68:	f7fe fe50 	bl	800470c <LTC6811_pollAdc>
	wakeup_sleep(TOTAL_IC);
 8005a6c:	2002      	movs	r0, #2
 8005a6e:	f7fe fe93 	bl	8004798 <wakeup_sleep>
	error = LTC6811_rdcv(SEL_ALL_REG, TOTAL_IC, BMS_IC);
 8005a72:	2300      	movs	r3, #0
 8005a74:	4a19      	ldr	r2, [pc, #100]	@ (8005adc <cell_voltage_read+0x90>)
 8005a76:	2102      	movs	r1, #2
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7fe fe30 	bl	80046de <LTC6811_rdcv>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	717b      	strb	r3, [r7, #5]
//	check_error(error);
	uint8_t i_1, current_ic_1;
	if (error == -1) {
 8005a82:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a8a:	d121      	bne.n	8005ad0 <cell_voltage_read+0x84>
		for (current_ic_1 = 0; current_ic_1 < TOTAL_IC; current_ic_1++) {
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	71bb      	strb	r3, [r7, #6]
 8005a90:	e01b      	b.n	8005aca <cell_voltage_read+0x7e>
			for (i_1 = 0; i_1 < BMS_IC[0].ic_reg.cell_channels; i_1++) {
 8005a92:	2300      	movs	r3, #0
 8005a94:	71fb      	strb	r3, [r7, #7]
 8005a96:	e00f      	b.n	8005ab8 <cell_voltage_read+0x6c>
				BMS_IC[current_ic_1].cells.c_codes[i_1] = 0;
 8005a98:	79ba      	ldrb	r2, [r7, #6]
 8005a9a:	79f9      	ldrb	r1, [r7, #7]
 8005a9c:	480f      	ldr	r0, [pc, #60]	@ (8005adc <cell_voltage_read+0x90>)
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	019b      	lsls	r3, r3, #6
 8005aa2:	4413      	add	r3, r2
 8005aa4:	005b      	lsls	r3, r3, #1
 8005aa6:	440b      	add	r3, r1
 8005aa8:	330c      	adds	r3, #12
 8005aaa:	005b      	lsls	r3, r3, #1
 8005aac:	4403      	add	r3, r0
 8005aae:	2200      	movs	r2, #0
 8005ab0:	80da      	strh	r2, [r3, #6]
			for (i_1 = 0; i_1 < BMS_IC[0].ic_reg.cell_channels; i_1++) {
 8005ab2:	79fb      	ldrb	r3, [r7, #7]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	71fb      	strb	r3, [r7, #7]
 8005ab8:	4b08      	ldr	r3, [pc, #32]	@ (8005adc <cell_voltage_read+0x90>)
 8005aba:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8005abe:	79fa      	ldrb	r2, [r7, #7]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d3e9      	bcc.n	8005a98 <cell_voltage_read+0x4c>
		for (current_ic_1 = 0; current_ic_1 < TOTAL_IC; current_ic_1++) {
 8005ac4:	79bb      	ldrb	r3, [r7, #6]
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	71bb      	strb	r3, [r7, #6]
 8005aca:	79bb      	ldrb	r3, [r7, #6]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d9e0      	bls.n	8005a92 <cell_voltage_read+0x46>
			}
		}
	}
	//cell_data_print(error, conv_time);
	return error;
 8005ad0:	f997 3005 	ldrsb.w	r3, [r7, #5]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3708      	adds	r7, #8
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	20000ffc 	.word	0x20000ffc

08005ae0 <sendData>:
extern UART_HandleTypeDef huart3;
extern UART_HandleTypeDef huart6;


void sendData (uint8_t *data, int size)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]



	// we will calculate the CRC in this function itself
	uint16_t crc = crc16(data, size);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	4619      	mov	r1, r3
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 f82d 	bl	8005b50 <crc16>
 8005af6:	4603      	mov	r3, r0
 8005af8:	81fb      	strh	r3, [r7, #14]
	data[size] = crc&0xFF;   // CRC LOW
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	4413      	add	r3, r2
 8005b00:	89fa      	ldrh	r2, [r7, #14]
 8005b02:	b2d2      	uxtb	r2, r2
 8005b04:	701a      	strb	r2, [r3, #0]
	data[size+1] = (crc>>8)&0xFF;  // CRC HIGH
 8005b06:	89fb      	ldrh	r3, [r7, #14]
 8005b08:	0a1b      	lsrs	r3, r3, #8
 8005b0a:	b299      	uxth	r1, r3
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	4413      	add	r3, r2
 8005b14:	b2ca      	uxtb	r2, r1
 8005b16:	701a      	strb	r2, [r3, #0]

	// Pull DE high to enable TX operation
	HAL_GPIO_WritePin(GPIOB, USART1_ENABLE_Pin, GPIO_PIN_SET);
 8005b18:	2201      	movs	r2, #1
 8005b1a:	2120      	movs	r1, #32
 8005b1c:	480a      	ldr	r0, [pc, #40]	@ (8005b48 <sendData+0x68>)
 8005b1e:	f003 f9e1 	bl	8008ee4 <HAL_GPIO_WritePin>

	HAL_UART_Transmit(&huart1, data, size+2, 1000);
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	3302      	adds	r3, #2
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005b2e:	6879      	ldr	r1, [r7, #4]
 8005b30:	4806      	ldr	r0, [pc, #24]	@ (8005b4c <sendData+0x6c>)
 8005b32:	f005 fd3d 	bl	800b5b0 <HAL_UART_Transmit>

	// Pull RE Low to enable RX operation

	HAL_GPIO_WritePin(GPIOB, USART1_ENABLE_Pin, GPIO_PIN_RESET);
 8005b36:	2200      	movs	r2, #0
 8005b38:	2120      	movs	r1, #32
 8005b3a:	4803      	ldr	r0, [pc, #12]	@ (8005b48 <sendData+0x68>)
 8005b3c:	f003 f9d2 	bl	8008ee4 <HAL_GPIO_WritePin>
}
 8005b40:	bf00      	nop
 8005b42:	3710      	adds	r7, #16
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	40020400 	.word	0x40020400
 8005b4c:	20001a30 	.word	0x20001a30

08005b50 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	460b      	mov	r3, r1
 8005b5a:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8005b5c:	23ff      	movs	r3, #255	@ 0xff
 8005b5e:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8005b60:	23ff      	movs	r3, #255	@ 0xff
 8005b62:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8005b64:	e013      	b.n	8005b8e <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	1c5a      	adds	r2, r3, #1
 8005b6a:	607a      	str	r2, [r7, #4]
 8005b6c:	781a      	ldrb	r2, [r3, #0]
 8005b6e:	7bbb      	ldrb	r3, [r7, #14]
 8005b70:	4053      	eors	r3, r2
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8005b76:	4a10      	ldr	r2, [pc, #64]	@ (8005bb8 <crc16+0x68>)
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	781a      	ldrb	r2, [r3, #0]
 8005b7e:	7bfb      	ldrb	r3, [r7, #15]
 8005b80:	4053      	eors	r3, r2
 8005b82:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8005b84:	4a0d      	ldr	r2, [pc, #52]	@ (8005bbc <crc16+0x6c>)
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	4413      	add	r3, r2
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 8005b8e:	887b      	ldrh	r3, [r7, #2]
 8005b90:	1e5a      	subs	r2, r3, #1
 8005b92:	807a      	strh	r2, [r7, #2]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1e6      	bne.n	8005b66 <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 8005b98:	7bfb      	ldrb	r3, [r7, #15]
 8005b9a:	b21b      	sxth	r3, r3
 8005b9c:	021b      	lsls	r3, r3, #8
 8005b9e:	b21a      	sxth	r2, r3
 8005ba0:	7bbb      	ldrb	r3, [r7, #14]
 8005ba2:	b21b      	sxth	r3, r3
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	b21b      	sxth	r3, r3
 8005ba8:	b29b      	uxth	r3, r3
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	0800dc74 	.word	0x0800dc74
 8005bbc:	0800dd74 	.word	0x0800dd74

08005bc0 <RTC_Init>:
static int BCD2DEC(uint8_t val) {
    return (int)((val / 16 * 10) + (val % 16));
}

void RTC_Init(void)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af04      	add	r7, sp, #16
    uint8_t ctrl;

    // Step 1: Clear oscillator start bit first
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8005bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8005bca:	9302      	str	r3, [sp, #8]
 8005bcc:	2301      	movs	r3, #1
 8005bce:	9301      	str	r3, [sp, #4]
 8005bd0:	1dfb      	adds	r3, r7, #7
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	21df      	movs	r1, #223	@ 0xdf
 8005bda:	4848      	ldr	r0, [pc, #288]	@ (8005cfc <RTC_Init+0x13c>)
 8005bdc:	f003 fc0c 	bl	80093f8 <HAL_I2C_Mem_Read>
    ctrl &= ~MCP7940N_ST;
 8005be0:	79fb      	ldrb	r3, [r7, #7]
 8005be2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8005bea:	f04f 33ff 	mov.w	r3, #4294967295
 8005bee:	9302      	str	r3, [sp, #8]
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	9301      	str	r3, [sp, #4]
 8005bf4:	1dfb      	adds	r3, r7, #7
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	21df      	movs	r1, #223	@ 0xdf
 8005bfe:	483f      	ldr	r0, [pc, #252]	@ (8005cfc <RTC_Init+0x13c>)
 8005c00:	f003 fb00 	bl	8009204 <HAL_I2C_Mem_Write>
    HAL_Delay(10);  // Wait for oscillator to stop
 8005c04:	200a      	movs	r0, #10
 8005c06:	f002 fac5 	bl	8008194 <HAL_Delay>

    // Step 2: Enable battery backup
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8005c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c0e:	9302      	str	r3, [sp, #8]
 8005c10:	2301      	movs	r3, #1
 8005c12:	9301      	str	r3, [sp, #4]
 8005c14:	1dfb      	adds	r3, r7, #7
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	2301      	movs	r3, #1
 8005c1a:	2203      	movs	r2, #3
 8005c1c:	21df      	movs	r1, #223	@ 0xdf
 8005c1e:	4837      	ldr	r0, [pc, #220]	@ (8005cfc <RTC_Init+0x13c>)
 8005c20:	f003 fbea 	bl	80093f8 <HAL_I2C_Mem_Read>
    ctrl |= MCP7940N_VBATEN;
 8005c24:	79fb      	ldrb	r3, [r7, #7]
 8005c26:	f043 0308 	orr.w	r3, r3, #8
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8005c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c32:	9302      	str	r3, [sp, #8]
 8005c34:	2301      	movs	r3, #1
 8005c36:	9301      	str	r3, [sp, #4]
 8005c38:	1dfb      	adds	r3, r7, #7
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	2203      	movs	r2, #3
 8005c40:	21df      	movs	r1, #223	@ 0xdf
 8005c42:	482e      	ldr	r0, [pc, #184]	@ (8005cfc <RTC_Init+0x13c>)
 8005c44:	f003 fade 	bl	8009204 <HAL_I2C_Mem_Write>

    // Step 3: Start oscillator
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8005c48:	f04f 33ff 	mov.w	r3, #4294967295
 8005c4c:	9302      	str	r3, [sp, #8]
 8005c4e:	2301      	movs	r3, #1
 8005c50:	9301      	str	r3, [sp, #4]
 8005c52:	1dfb      	adds	r3, r7, #7
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	2301      	movs	r3, #1
 8005c58:	2200      	movs	r2, #0
 8005c5a:	21df      	movs	r1, #223	@ 0xdf
 8005c5c:	4827      	ldr	r0, [pc, #156]	@ (8005cfc <RTC_Init+0x13c>)
 8005c5e:	f003 fbcb 	bl	80093f8 <HAL_I2C_Mem_Read>
    ctrl |= MCP7940N_ST;
 8005c62:	79fb      	ldrb	r3, [r7, #7]
 8005c64:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8005c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c70:	9302      	str	r3, [sp, #8]
 8005c72:	2301      	movs	r3, #1
 8005c74:	9301      	str	r3, [sp, #4]
 8005c76:	1dfb      	adds	r3, r7, #7
 8005c78:	9300      	str	r3, [sp, #0]
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	21df      	movs	r1, #223	@ 0xdf
 8005c80:	481e      	ldr	r0, [pc, #120]	@ (8005cfc <RTC_Init+0x13c>)
 8005c82:	f003 fabf 	bl	8009204 <HAL_I2C_Mem_Write>

    // Step 4: Wait for oscillator to start running
    do {
        HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8005c86:	f04f 33ff 	mov.w	r3, #4294967295
 8005c8a:	9302      	str	r3, [sp, #8]
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	9301      	str	r3, [sp, #4]
 8005c90:	1dfb      	adds	r3, r7, #7
 8005c92:	9300      	str	r3, [sp, #0]
 8005c94:	2301      	movs	r3, #1
 8005c96:	2203      	movs	r2, #3
 8005c98:	21df      	movs	r1, #223	@ 0xdf
 8005c9a:	4818      	ldr	r0, [pc, #96]	@ (8005cfc <RTC_Init+0x13c>)
 8005c9c:	f003 fbac 	bl	80093f8 <HAL_I2C_Mem_Read>
    } while(!(ctrl & MCP7940N_OSCON));
 8005ca0:	79fb      	ldrb	r3, [r7, #7]
 8005ca2:	f003 0320 	and.w	r3, r3, #32
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d0ed      	beq.n	8005c86 <RTC_Init+0xc6>

    // Step 5: Clear power fail flag if set
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8005caa:	f04f 33ff 	mov.w	r3, #4294967295
 8005cae:	9302      	str	r3, [sp, #8]
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	9301      	str	r3, [sp, #4]
 8005cb4:	1dfb      	adds	r3, r7, #7
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	2301      	movs	r3, #1
 8005cba:	2203      	movs	r2, #3
 8005cbc:	21df      	movs	r1, #223	@ 0xdf
 8005cbe:	480f      	ldr	r0, [pc, #60]	@ (8005cfc <RTC_Init+0x13c>)
 8005cc0:	f003 fb9a 	bl	80093f8 <HAL_I2C_Mem_Read>
    if(ctrl & MCP7940N_PWRFAIL) {
 8005cc4:	79fb      	ldrb	r3, [r7, #7]
 8005cc6:	f003 0310 	and.w	r3, r3, #16
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d011      	beq.n	8005cf2 <RTC_Init+0x132>
        ctrl &= ~MCP7940N_PWRFAIL;
 8005cce:	79fb      	ldrb	r3, [r7, #7]
 8005cd0:	f023 0310 	bic.w	r3, r3, #16
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	71fb      	strb	r3, [r7, #7]
        HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8005cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8005cdc:	9302      	str	r3, [sp, #8]
 8005cde:	2301      	movs	r3, #1
 8005ce0:	9301      	str	r3, [sp, #4]
 8005ce2:	1dfb      	adds	r3, r7, #7
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	2203      	movs	r2, #3
 8005cea:	21df      	movs	r1, #223	@ 0xdf
 8005cec:	4803      	ldr	r0, [pc, #12]	@ (8005cfc <RTC_Init+0x13c>)
 8005cee:	f003 fa89 	bl	8009204 <HAL_I2C_Mem_Write>
    }
}
 8005cf2:	bf00      	nop
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	200017d4 	.word	0x200017d4

08005d00 <tester_setup>:

extern flag_1 ;


void tester_setup(void)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b090      	sub	sp, #64	@ 0x40
 8005d04:	af00      	add	r7, sp, #0
    if(RxData_modbus_01[0] == 0x7)  // Slave ID check
 8005d06:	4bb6      	ldr	r3, [pc, #728]	@ (8005fe0 <tester_setup+0x2e0>)
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	2b07      	cmp	r3, #7
 8005d0c:	f040 8327 	bne.w	800635e <tester_setup+0x65e>
    {
    	flag_1 = 0 ;
 8005d10:	4bb4      	ldr	r3, [pc, #720]	@ (8005fe4 <tester_setup+0x2e4>)
 8005d12:	2200      	movs	r2, #0
 8005d14:	601a      	str	r2, [r3, #0]

        if(RxData_modbus_01[1] == 0x3)  // SET function (0x3)
 8005d16:	4bb2      	ldr	r3, [pc, #712]	@ (8005fe0 <tester_setup+0x2e0>)
 8005d18:	785b      	ldrb	r3, [r3, #1]
 8005d1a:	2b03      	cmp	r3, #3
 8005d1c:	f040 8117 	bne.w	8005f4e <tester_setup+0x24e>
        {
            uint8_t number_of_cells_and_temps = RxData_modbus_01[1];
 8005d20:	4baf      	ldr	r3, [pc, #700]	@ (8005fe0 <tester_setup+0x2e0>)
 8005d22:	785b      	ldrb	r3, [r3, #1]
 8005d24:	76fb      	strb	r3, [r7, #27]
            uint8_t number_of_status = RxData_modbus_01[2];
 8005d26:	4bae      	ldr	r3, [pc, #696]	@ (8005fe0 <tester_setup+0x2e0>)
 8005d28:	789b      	ldrb	r3, [r3, #2]
 8005d2a:	76bb      	strb	r3, [r7, #26]
            uint8_t commnd = RxData_modbus_01[3];
 8005d2c:	4bac      	ldr	r3, [pc, #688]	@ (8005fe0 <tester_setup+0x2e0>)
 8005d2e:	78db      	ldrb	r3, [r3, #3]
 8005d30:	767b      	strb	r3, [r7, #25]

            uint8_t id_LED = RxData_modbus_01[6];
 8005d32:	4bab      	ldr	r3, [pc, #684]	@ (8005fe0 <tester_setup+0x2e0>)
 8005d34:	799b      	ldrb	r3, [r3, #6]
 8005d36:	763b      	strb	r3, [r7, #24]
            uint8_t LED_State = RxData_modbus_01[7];
 8005d38:	4ba9      	ldr	r3, [pc, #676]	@ (8005fe0 <tester_setup+0x2e0>)
 8005d3a:	79db      	ldrb	r3, [r3, #7]
 8005d3c:	75fb      	strb	r3, [r7, #23]
            uint8_t time = RxData_modbus_01[8];
 8005d3e:	4ba8      	ldr	r3, [pc, #672]	@ (8005fe0 <tester_setup+0x2e0>)
 8005d40:	7a1b      	ldrb	r3, [r3, #8]
 8005d42:	75bb      	strb	r3, [r7, #22]
            uint8_t temp_set = RxData_modbus_01[9];
 8005d44:	4ba6      	ldr	r3, [pc, #664]	@ (8005fe0 <tester_setup+0x2e0>)
 8005d46:	7a5b      	ldrb	r3, [r3, #9]
 8005d48:	757b      	strb	r3, [r7, #21]
            uint8_t temp_get = RxData_modbus_01[10];
 8005d4a:	4ba5      	ldr	r3, [pc, #660]	@ (8005fe0 <tester_setup+0x2e0>)
 8005d4c:	7a9b      	ldrb	r3, [r3, #10]
 8005d4e:	753b      	strb	r3, [r7, #20]
            uint8_t iso_spi_reading_cell = RxData_modbus_01[11];
 8005d50:	4ba3      	ldr	r3, [pc, #652]	@ (8005fe0 <tester_setup+0x2e0>)
 8005d52:	7adb      	ldrb	r3, [r3, #11]
 8005d54:	74fb      	strb	r3, [r7, #19]

            // Declare variables at function scope to avoid scope issues
            uint8_t id = 0;
 8005d56:	2300      	movs	r3, #0
 8005d58:	74bb      	strb	r3, [r7, #18]
            float volt = 0.0;  // Changed to float to handle decimal values
 8005d5a:	f04f 0300 	mov.w	r3, #0
 8005d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            uint8_t tempCardId = 0;
 8005d60:	2300      	movs	r3, #0
 8005d62:	747b      	strb	r3, [r7, #17]
            uint8_t res = 0;
 8005d64:	2300      	movs	r3, #0
 8005d66:	743b      	strb	r3, [r7, #16]

            switch (RxData_modbus_01[2])  // Function code from table
 8005d68:	4b9d      	ldr	r3, [pc, #628]	@ (8005fe0 <tester_setup+0x2e0>)
 8005d6a:	789b      	ldrb	r3, [r3, #2]
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	2b07      	cmp	r3, #7
 8005d70:	f200 82c6 	bhi.w	8006300 <tester_setup+0x600>
 8005d74:	a201      	add	r2, pc, #4	@ (adr r2, 8005d7c <tester_setup+0x7c>)
 8005d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7a:	bf00      	nop
 8005d7c:	08005d9d 	.word	0x08005d9d
 8005d80:	08005e2b 	.word	0x08005e2b
 8005d84:	08005e69 	.word	0x08005e69
 8005d88:	08005ea1 	.word	0x08005ea1
 8005d8c:	08005ed9 	.word	0x08005ed9
 8005d90:	08005ef7 	.word	0x08005ef7
 8005d94:	08005f17 	.word	0x08005f17
 8005d98:	08005f31 	.word	0x08005f31
            {
                case 0x01:  // Voltage function (Range: 1-23, Value: 1-8)
                    id = RxData_modbus_01[3];  // Cell ID (1-23)
 8005d9c:	4b90      	ldr	r3, [pc, #576]	@ (8005fe0 <tester_setup+0x2e0>)
 8005d9e:	78db      	ldrb	r3, [r3, #3]
 8005da0:	74bb      	strb	r3, [r7, #18]
                    uint8_t volt_code = RxData_modbus_01[4];  // Voltage code (1-8)
 8005da2:	4b8f      	ldr	r3, [pc, #572]	@ (8005fe0 <tester_setup+0x2e0>)
 8005da4:	791b      	ldrb	r3, [r3, #4]
 8005da6:	71bb      	strb	r3, [r7, #6]

                    // Validate range (1-23 for cell ID)
                    if (id >= 0 && id <= 23)
 8005da8:	7cbb      	ldrb	r3, [r7, #18]
 8005daa:	2b17      	cmp	r3, #23
 8005dac:	f200 82aa 	bhi.w	8006304 <tester_setup+0x604>
                    {
                        switch (volt_code)
 8005db0:	79bb      	ldrb	r3, [r7, #6]
 8005db2:	3b01      	subs	r3, #1
 8005db4:	2b07      	cmp	r3, #7
 8005db6:	d82d      	bhi.n	8005e14 <tester_setup+0x114>
 8005db8:	a201      	add	r2, pc, #4	@ (adr r2, 8005dc0 <tester_setup+0xc0>)
 8005dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dbe:	bf00      	nop
 8005dc0:	08005de1 	.word	0x08005de1
 8005dc4:	08005de9 	.word	0x08005de9
 8005dc8:	08005def 	.word	0x08005def
 8005dcc:	08005df5 	.word	0x08005df5
 8005dd0:	08005dfb 	.word	0x08005dfb
 8005dd4:	08005e01 	.word	0x08005e01
 8005dd8:	08005e07 	.word	0x08005e07
 8005ddc:	08005e0f 	.word	0x08005e0f
                        {
                            case 0x01:
                                volt = 2.0;
 8005de0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                break;
 8005de6:	e019      	b.n	8005e1c <tester_setup+0x11c>
                            case 0x02:
                                volt = 2.5;
 8005de8:	4b7f      	ldr	r3, [pc, #508]	@ (8005fe8 <tester_setup+0x2e8>)
 8005dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                break;
 8005dec:	e016      	b.n	8005e1c <tester_setup+0x11c>
                            case 0x03:
                                volt = 2.8;
 8005dee:	4b7f      	ldr	r3, [pc, #508]	@ (8005fec <tester_setup+0x2ec>)
 8005df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                break;
 8005df2:	e013      	b.n	8005e1c <tester_setup+0x11c>
                            case 0x04:
                                volt = 3.3;
 8005df4:	4b7e      	ldr	r3, [pc, #504]	@ (8005ff0 <tester_setup+0x2f0>)
 8005df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                break;
 8005df8:	e010      	b.n	8005e1c <tester_setup+0x11c>
                            case 0x05:
                                volt = 3.4;
 8005dfa:	4b7e      	ldr	r3, [pc, #504]	@ (8005ff4 <tester_setup+0x2f4>)
 8005dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                break;
 8005dfe:	e00d      	b.n	8005e1c <tester_setup+0x11c>
                            case 0x06:
                                volt = 3.6;
 8005e00:	4b7d      	ldr	r3, [pc, #500]	@ (8005ff8 <tester_setup+0x2f8>)
 8005e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                break;
 8005e04:	e00a      	b.n	8005e1c <tester_setup+0x11c>
                            case 0x07:
                                volt = 4.0;
 8005e06:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8005e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                break;
 8005e0c:	e006      	b.n	8005e1c <tester_setup+0x11c>
                            case 0x08:
                                volt = 4.2;
 8005e0e:	4b7b      	ldr	r3, [pc, #492]	@ (8005ffc <tester_setup+0x2fc>)
 8005e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                break;
 8005e12:	e003      	b.n	8005e1c <tester_setup+0x11c>
                            default:
                                volt = 0.0;
 8005e14:	f04f 0300 	mov.w	r3, #0
 8005e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                break;
 8005e1a:	bf00      	nop
                        }
                        Set_Output_Voltage(id, volt);
 8005e1c:	7cbb      	ldrb	r3, [r7, #18]
 8005e1e:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7fe f966 	bl	80040f4 <Set_Output_Voltage>
                    }
                    break;
 8005e28:	e26c      	b.n	8006304 <tester_setup+0x604>

                case 0x02:  // Temperature function (Range: 1-6, Value: 0-256)
                    tempCardId = RxData_modbus_01[3];  // Temp card ID (1-6)
 8005e2a:	4b6d      	ldr	r3, [pc, #436]	@ (8005fe0 <tester_setup+0x2e0>)
 8005e2c:	78db      	ldrb	r3, [r3, #3]
 8005e2e:	747b      	strb	r3, [r7, #17]
                    res = RxData_modbus_01[4];  // Resistance value (0-256)
 8005e30:	4b6b      	ldr	r3, [pc, #428]	@ (8005fe0 <tester_setup+0x2e0>)
 8005e32:	791b      	ldrb	r3, [r3, #4]
 8005e34:	743b      	strb	r3, [r7, #16]

                    // Validate range (1-6 for temp card ID)
                    if (tempCardId >= 1 && tempCardId <= 6)
 8005e36:	7c7b      	ldrb	r3, [r7, #17]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 8265 	beq.w	8006308 <tester_setup+0x608>
 8005e3e:	7c7b      	ldrb	r3, [r7, #17]
 8005e40:	2b06      	cmp	r3, #6
 8005e42:	f200 8261 	bhi.w	8006308 <tester_setup+0x608>
                    {
                        Set_Resistance(tempCardId, res);
 8005e46:	7c3a      	ldrb	r2, [r7, #16]
 8005e48:	7c7b      	ldrb	r3, [r7, #17]
 8005e4a:	4611      	mov	r1, r2
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7fb fe59 	bl	8001b04 <Set_Resistance>
                        Set_LED_status(id_LED, LED_State);
 8005e52:	7dfa      	ldrb	r2, [r7, #23]
 8005e54:	7e3b      	ldrb	r3, [r7, #24]
 8005e56:	4611      	mov	r1, r2
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7fe f9b9 	bl	80041d0 <Set_LED_status>
                        HAL_Delay(1000);
 8005e5e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005e62:	f002 f997 	bl	8008194 <HAL_Delay>
                    }
                    break;
 8005e66:	e24f      	b.n	8006308 <tester_setup+0x608>

                case 0x03:  // Balance function (Range: 1-23, Value: 1/0)
                    id = RxData_modbus_01[3];  // Cell ID (1-23)
 8005e68:	4b5d      	ldr	r3, [pc, #372]	@ (8005fe0 <tester_setup+0x2e0>)
 8005e6a:	78db      	ldrb	r3, [r3, #3]
 8005e6c:	74bb      	strb	r3, [r7, #18]
                    uint8_t balance_state = RxData_modbus_01[4];  // 1 = on, 0 = off
 8005e6e:	4b5c      	ldr	r3, [pc, #368]	@ (8005fe0 <tester_setup+0x2e0>)
 8005e70:	791b      	ldrb	r3, [r3, #4]
 8005e72:	71fb      	strb	r3, [r7, #7]

                    // Validate range and value
                    if (id >= 1 && id <= 23 && (balance_state == 0 || balance_state == 1))
 8005e74:	7cbb      	ldrb	r3, [r7, #18]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f000 8248 	beq.w	800630c <tester_setup+0x60c>
 8005e7c:	7cbb      	ldrb	r3, [r7, #18]
 8005e7e:	2b17      	cmp	r3, #23
 8005e80:	f200 8244 	bhi.w	800630c <tester_setup+0x60c>
 8005e84:	79fb      	ldrb	r3, [r7, #7]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <tester_setup+0x192>
 8005e8a:	79fb      	ldrb	r3, [r7, #7]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	f040 823d 	bne.w	800630c <tester_setup+0x60c>
                    {
                        Set_Balance_State(id, balance_state);
 8005e92:	79fa      	ldrb	r2, [r7, #7]
 8005e94:	7cbb      	ldrb	r3, [r7, #18]
 8005e96:	4611      	mov	r1, r2
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f000 fcd3 	bl	8006844 <Set_Balance_State>
                    }
                    break;
 8005e9e:	e235      	b.n	800630c <tester_setup+0x60c>

                case 0x04:  // Open wire test (Range: 1-24, Value: 1/0)
                    id = RxData_modbus_01[3];  // Wire ID (1-24)
 8005ea0:	4b4f      	ldr	r3, [pc, #316]	@ (8005fe0 <tester_setup+0x2e0>)
 8005ea2:	78db      	ldrb	r3, [r3, #3]
 8005ea4:	74bb      	strb	r3, [r7, #18]
                    uint8_t test_enable = RxData_modbus_01[4];  // 1 = enable, 0 = disable
 8005ea6:	4b4e      	ldr	r3, [pc, #312]	@ (8005fe0 <tester_setup+0x2e0>)
 8005ea8:	791b      	ldrb	r3, [r3, #4]
 8005eaa:	723b      	strb	r3, [r7, #8]

                    // Validate range and value
                    if (id >= 1 && id <= 24 && (test_enable == 0 || test_enable == 1))
 8005eac:	7cbb      	ldrb	r3, [r7, #18]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f000 8234 	beq.w	800631c <tester_setup+0x61c>
 8005eb4:	7cbb      	ldrb	r3, [r7, #18]
 8005eb6:	2b18      	cmp	r3, #24
 8005eb8:	f200 8230 	bhi.w	800631c <tester_setup+0x61c>
 8005ebc:	7a3b      	ldrb	r3, [r7, #8]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d003      	beq.n	8005eca <tester_setup+0x1ca>
 8005ec2:	7a3b      	ldrb	r3, [r7, #8]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	f040 8229 	bne.w	800631c <tester_setup+0x61c>
                    {
                        Open_Wire_Test(id, test_enable);
 8005eca:	7a3a      	ldrb	r2, [r7, #8]
 8005ecc:	7cbb      	ldrb	r3, [r7, #18]
 8005ece:	4611      	mov	r1, r2
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f000 fcc5 	bl	8006860 <Open_Wire_Test>
                    }
                    break;
 8005ed6:	e221      	b.n	800631c <tester_setup+0x61c>

                case 0x05:  // Daisy chain function (Range: 1, Value: 1/0)
                    uint8_t chain_state = RxData_modbus_01[4];  // 1 = enable, 0 = disable
 8005ed8:	4b41      	ldr	r3, [pc, #260]	@ (8005fe0 <tester_setup+0x2e0>)
 8005eda:	791b      	ldrb	r3, [r3, #4]
 8005edc:	727b      	strb	r3, [r7, #9]

                    if (chain_state == 0 || chain_state == 1)
 8005ede:	7a7b      	ldrb	r3, [r7, #9]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d003      	beq.n	8005eec <tester_setup+0x1ec>
 8005ee4:	7a7b      	ldrb	r3, [r7, #9]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	f040 821a 	bne.w	8006320 <tester_setup+0x620>
                    {
                        Set_Daisy_Chain(chain_state);
 8005eec:	7a7b      	ldrb	r3, [r7, #9]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f000 fcc4 	bl	800687c <Set_Daisy_Chain>
                    }
                    break;
 8005ef4:	e214      	b.n	8006320 <tester_setup+0x620>

                case 0x06:  // Delay function
                    uint16_t delay_time = (RxData_modbus_01[3] << 8) | RxData_modbus_01[4];  // Combine bytes for delay time
 8005ef6:	4b3a      	ldr	r3, [pc, #232]	@ (8005fe0 <tester_setup+0x2e0>)
 8005ef8:	78db      	ldrb	r3, [r3, #3]
 8005efa:	b21b      	sxth	r3, r3
 8005efc:	021b      	lsls	r3, r3, #8
 8005efe:	b21a      	sxth	r2, r3
 8005f00:	4b37      	ldr	r3, [pc, #220]	@ (8005fe0 <tester_setup+0x2e0>)
 8005f02:	791b      	ldrb	r3, [r3, #4]
 8005f04:	b21b      	sxth	r3, r3
 8005f06:	4313      	orrs	r3, r2
 8005f08:	b21b      	sxth	r3, r3
 8005f0a:	817b      	strh	r3, [r7, #10]
                    HAL_Delay(delay_time);
 8005f0c:	897b      	ldrh	r3, [r7, #10]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f002 f940 	bl	8008194 <HAL_Delay>
                    break;
 8005f14:	e223      	b.n	800635e <tester_setup+0x65e>

                case 0x07:  // Cell LED function
                    id = RxData_modbus_01[3];  // LED ID
 8005f16:	4b32      	ldr	r3, [pc, #200]	@ (8005fe0 <tester_setup+0x2e0>)
 8005f18:	78db      	ldrb	r3, [r3, #3]
 8005f1a:	74bb      	strb	r3, [r7, #18]
                    uint8_t led_state = RxData_modbus_01[4];  // LED state
 8005f1c:	4b30      	ldr	r3, [pc, #192]	@ (8005fe0 <tester_setup+0x2e0>)
 8005f1e:	791b      	ldrb	r3, [r3, #4]
 8005f20:	737b      	strb	r3, [r7, #13]

                    Set_LED_status(id, led_state);
 8005f22:	7b7a      	ldrb	r2, [r7, #13]
 8005f24:	7cbb      	ldrb	r3, [r7, #18]
 8005f26:	4611      	mov	r1, r2
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7fe f951 	bl	80041d0 <Set_LED_status>
                    break;
 8005f2e:	e216      	b.n	800635e <tester_setup+0x65e>

                case 0x08:  // Automatic sequence function
                    uint8_t sequence_id = RxData_modbus_01[3];  // Sequence ID
 8005f30:	4b2b      	ldr	r3, [pc, #172]	@ (8005fe0 <tester_setup+0x2e0>)
 8005f32:	78db      	ldrb	r3, [r3, #3]
 8005f34:	73fb      	strb	r3, [r7, #15]
                    uint8_t sequence_state = RxData_modbus_01[4];  // Sequence state
 8005f36:	4b2a      	ldr	r3, [pc, #168]	@ (8005fe0 <tester_setup+0x2e0>)
 8005f38:	791b      	ldrb	r3, [r3, #4]
 8005f3a:	73bb      	strb	r3, [r7, #14]

                    Run_Automatic_Sequence(sequence_id, sequence_state);
 8005f3c:	7bba      	ldrb	r2, [r7, #14]
 8005f3e:	7bfb      	ldrb	r3, [r7, #15]
 8005f40:	4611      	mov	r1, r2
 8005f42:	4618      	mov	r0, r3
 8005f44:	f000 fcb6 	bl	80068b4 <Run_Automatic_Sequence>
                    Voltage_Sequence_Automatic();
 8005f48:	f000 fad4 	bl	80064f4 <Voltage_Sequence_Automatic>
                    break;
 8005f4c:	e207      	b.n	800635e <tester_setup+0x65e>
            // setting_test_arrangement[]={};  // Fixed typo in comment
        }



        else if(RxData_modbus_01[1] == 0x4)  // GET function (0x4)
 8005f4e:	4b24      	ldr	r3, [pc, #144]	@ (8005fe0 <tester_setup+0x2e0>)
 8005f50:	785b      	ldrb	r3, [r3, #1]
 8005f52:	2b04      	cmp	r3, #4
 8005f54:	f040 8203 	bne.w	800635e <tester_setup+0x65e>
        {
        	flag_1 = 2 ;
 8005f58:	4b22      	ldr	r3, [pc, #136]	@ (8005fe4 <tester_setup+0x2e4>)
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	601a      	str	r2, [r3, #0]
            uint8_t function_code = RxData_modbus_01[2];
 8005f5e:	4b20      	ldr	r3, [pc, #128]	@ (8005fe0 <tester_setup+0x2e0>)
 8005f60:	789b      	ldrb	r3, [r3, #2]
 8005f62:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            uint8_t id = RxData_modbus_01[3];
 8005f66:	4b1e      	ldr	r3, [pc, #120]	@ (8005fe0 <tester_setup+0x2e0>)
 8005f68:	78db      	ldrb	r3, [r3, #3]
 8005f6a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

            //SET Voltage Card LEDs on for the SPI bus Data Request

	        for (int cell = CELL_1; cell <= CELL_24; cell++) {
 8005f6e:	2300      	movs	r3, #0
 8005f70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f72:	e008      	b.n	8005f86 <tester_setup+0x286>
	        	Set_LED_status(cell, ON);
 8005f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	2100      	movs	r1, #0
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7fe f928 	bl	80041d0 <Set_LED_status>
	        for (int cell = CELL_1; cell <= CELL_24; cell++) {
 8005f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f82:	3301      	adds	r3, #1
 8005f84:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f88:	2b17      	cmp	r3, #23
 8005f8a:	ddf3      	ble.n	8005f74 <tester_setup+0x274>

	        //	        for (int cell = CELL_1; cell <= CELL_24; cell++) {
	        //	        	Set_LED_status(cell, OFF);
	        //	        }

            switch (function_code)
 8005f8c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005f90:	3b01      	subs	r3, #1
 8005f92:	2b0f      	cmp	r3, #15
 8005f94:	f200 81c6 	bhi.w	8006324 <tester_setup+0x624>
 8005f98:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa0 <tester_setup+0x2a0>)
 8005f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f9e:	bf00      	nop
 8005fa0:	08006001 	.word	0x08006001
 8005fa4:	08006091 	.word	0x08006091
 8005fa8:	08006121 	.word	0x08006121
 8005fac:	08006325 	.word	0x08006325
 8005fb0:	08006325 	.word	0x08006325
 8005fb4:	080061bb 	.word	0x080061bb
 8005fb8:	080061db 	.word	0x080061db
 8005fbc:	080061fb 	.word	0x080061fb
 8005fc0:	0800621b 	.word	0x0800621b
 8005fc4:	0800623b 	.word	0x0800623b
 8005fc8:	08006259 	.word	0x08006259
 8005fcc:	08006275 	.word	0x08006275
 8005fd0:	08006291 	.word	0x08006291
 8005fd4:	080062ad 	.word	0x080062ad
 8005fd8:	080062c9 	.word	0x080062c9
 8005fdc:	080062e5 	.word	0x080062e5
 8005fe0:	2000121c 	.word	0x2000121c
 8005fe4:	20001218 	.word	0x20001218
 8005fe8:	40200000 	.word	0x40200000
 8005fec:	40333333 	.word	0x40333333
 8005ff0:	40533333 	.word	0x40533333
 8005ff4:	4059999a 	.word	0x4059999a
 8005ff8:	40666666 	.word	0x40666666
 8005ffc:	40866666 	.word	0x40866666
            {
                case 0x01:  // Cell-voltage (Range: 1-23, Value: 2.0-4.2V)
                    if (id >= 0 && id <= 23)
 8006000:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006004:	2b17      	cmp	r3, #23
 8006006:	f200 818f 	bhi.w	8006328 <tester_setup+0x628>
                    {
//                    	Voltage_Sequence_Automatic();
                    	float get_voltage = Get_INA_Voltage(&cell_configs[id]);
 800600a:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800600e:	4613      	mov	r3, r2
 8006010:	005b      	lsls	r3, r3, #1
 8006012:	4413      	add	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4abe      	ldr	r2, [pc, #760]	@ (8006310 <tester_setup+0x610>)
 8006018:	4413      	add	r3, r2
 800601a:	4618      	mov	r0, r3
 800601c:	f000 fb38 	bl	8006690 <Get_INA_Voltage>
 8006020:	ed87 0a08 	vstr	s0, [r7, #32]
                    	uint16_t voltage_scaled = (uint16_t)(get_voltage * 10000); // Scale as needed
 8006024:	edd7 7a08 	vldr	s15, [r7, #32]
 8006028:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 8006314 <tester_setup+0x614>
 800602c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006030:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006034:	ee17 3a90 	vmov	r3, s15
 8006038:	83fb      	strh	r3, [r7, #30]

                    	TxData_modbus_01[0] = 0x07;  // slave address
 800603a:	4bb7      	ldr	r3, [pc, #732]	@ (8006318 <tester_setup+0x618>)
 800603c:	2207      	movs	r2, #7
 800603e:	701a      	strb	r2, [r3, #0]
                    	TxData_modbus_01[1] = voltage_scaled >> 8;
 8006040:	8bfb      	ldrh	r3, [r7, #30]
 8006042:	0a1b      	lsrs	r3, r3, #8
 8006044:	b29b      	uxth	r3, r3
 8006046:	b2da      	uxtb	r2, r3
 8006048:	4bb3      	ldr	r3, [pc, #716]	@ (8006318 <tester_setup+0x618>)
 800604a:	705a      	strb	r2, [r3, #1]

                    	TxData_modbus_01[2] = voltage_scaled & 0xFF;
 800604c:	8bfb      	ldrh	r3, [r7, #30]
 800604e:	b2da      	uxtb	r2, r3
 8006050:	4bb1      	ldr	r3, [pc, #708]	@ (8006318 <tester_setup+0x618>)
 8006052:	709a      	strb	r2, [r3, #2]
                    	TxData_modbus_01[3] = 0;
 8006054:	4bb0      	ldr	r3, [pc, #704]	@ (8006318 <tester_setup+0x618>)
 8006056:	2200      	movs	r2, #0
 8006058:	70da      	strb	r2, [r3, #3]
                    	//The coil address will be 00000000 00000000 = 0 + 1 = 1

                    	TxData_modbus_01[4] = 0;  // force data high
 800605a:	4baf      	ldr	r3, [pc, #700]	@ (8006318 <tester_setup+0x618>)
 800605c:	2200      	movs	r2, #0
 800605e:	711a      	strb	r2, [r3, #4]
                    	TxData_modbus_01[5] = 0;  // force data low
 8006060:	4bad      	ldr	r3, [pc, #692]	@ (8006318 <tester_setup+0x618>)
 8006062:	2200      	movs	r2, #0
 8006064:	715a      	strb	r2, [r3, #5]

                    	uint16_t crc = crc16(TxData_modbus_01, 6);
 8006066:	2106      	movs	r1, #6
 8006068:	48ab      	ldr	r0, [pc, #684]	@ (8006318 <tester_setup+0x618>)
 800606a:	f7ff fd71 	bl	8005b50 <crc16>
 800606e:	4603      	mov	r3, r0
 8006070:	83bb      	strh	r3, [r7, #28]
                    	TxData_modbus_01[6] = crc&0xFF;   // CRC LOW
 8006072:	8bbb      	ldrh	r3, [r7, #28]
 8006074:	b2da      	uxtb	r2, r3
 8006076:	4ba8      	ldr	r3, [pc, #672]	@ (8006318 <tester_setup+0x618>)
 8006078:	719a      	strb	r2, [r3, #6]
                    	TxData_modbus_01[7] = (crc>>8)&0xFF;  // CRC HIGH
 800607a:	8bbb      	ldrh	r3, [r7, #28]
 800607c:	0a1b      	lsrs	r3, r3, #8
 800607e:	b29b      	uxth	r3, r3
 8006080:	b2da      	uxtb	r2, r3
 8006082:	4ba5      	ldr	r3, [pc, #660]	@ (8006318 <tester_setup+0x618>)
 8006084:	71da      	strb	r2, [r3, #7]

                    	sendData(TxData_modbus_01,6);
 8006086:	2106      	movs	r1, #6
 8006088:	48a3      	ldr	r0, [pc, #652]	@ (8006318 <tester_setup+0x618>)
 800608a:	f7ff fd29 	bl	8005ae0 <sendData>



                    }
                    break;
 800608e:	e14b      	b.n	8006328 <tester_setup+0x628>

                case 0x02:  // Cell-temp (Range: 1-6, Value: -20 to 100°C)
                    if (id >= 0 && id <= 23)
 8006090:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006094:	2b17      	cmp	r3, #23
 8006096:	f200 8149 	bhi.w	800632c <tester_setup+0x62c>
                    {

						float get_Temp = Get_INA_Temp(&cell_configs[id]);
 800609a:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800609e:	4613      	mov	r3, r2
 80060a0:	005b      	lsls	r3, r3, #1
 80060a2:	4413      	add	r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4a9a      	ldr	r2, [pc, #616]	@ (8006310 <tester_setup+0x610>)
 80060a8:	4413      	add	r3, r2
 80060aa:	4618      	mov	r0, r3
 80060ac:	f000 fb80 	bl	80067b0 <Get_INA_Temp>
 80060b0:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
						uint16_t Temp_scaled = (uint16_t)(get_Temp * 10000); // Scale as needed
 80060b4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80060b8:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8006314 <tester_setup+0x614>
 80060bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060c4:	ee17 3a90 	vmov	r3, s15
 80060c8:	84fb      	strh	r3, [r7, #38]	@ 0x26

						TxData_modbus_01[0] = 0x07;  // slave address
 80060ca:	4b93      	ldr	r3, [pc, #588]	@ (8006318 <tester_setup+0x618>)
 80060cc:	2207      	movs	r2, #7
 80060ce:	701a      	strb	r2, [r3, #0]
						TxData_modbus_01[1] = Temp_scaled >> 8;
 80060d0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80060d2:	0a1b      	lsrs	r3, r3, #8
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	b2da      	uxtb	r2, r3
 80060d8:	4b8f      	ldr	r3, [pc, #572]	@ (8006318 <tester_setup+0x618>)
 80060da:	705a      	strb	r2, [r3, #1]

						TxData_modbus_01[2] = Temp_scaled & 0xFF;
 80060dc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	4b8d      	ldr	r3, [pc, #564]	@ (8006318 <tester_setup+0x618>)
 80060e2:	709a      	strb	r2, [r3, #2]
						TxData_modbus_01[3] = 0;
 80060e4:	4b8c      	ldr	r3, [pc, #560]	@ (8006318 <tester_setup+0x618>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	70da      	strb	r2, [r3, #3]
													//The coil address will be 00000000 00000000 = 0 + 1 = 1

						TxData_modbus_01[4] = 0;  // force data high
 80060ea:	4b8b      	ldr	r3, [pc, #556]	@ (8006318 <tester_setup+0x618>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	711a      	strb	r2, [r3, #4]
						TxData_modbus_01[5] = 0;  // force data low
 80060f0:	4b89      	ldr	r3, [pc, #548]	@ (8006318 <tester_setup+0x618>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	715a      	strb	r2, [r3, #5]

						uint16_t crc = crc16(TxData_modbus_01, 6);
 80060f6:	2106      	movs	r1, #6
 80060f8:	4887      	ldr	r0, [pc, #540]	@ (8006318 <tester_setup+0x618>)
 80060fa:	f7ff fd29 	bl	8005b50 <crc16>
 80060fe:	4603      	mov	r3, r0
 8006100:	84bb      	strh	r3, [r7, #36]	@ 0x24
						TxData_modbus_01[6] = crc&0xFF;   // CRC LOW
 8006102:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006104:	b2da      	uxtb	r2, r3
 8006106:	4b84      	ldr	r3, [pc, #528]	@ (8006318 <tester_setup+0x618>)
 8006108:	719a      	strb	r2, [r3, #6]
						TxData_modbus_01[7] = (crc>>8)&0xFF;  // CRC HIGH
 800610a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800610c:	0a1b      	lsrs	r3, r3, #8
 800610e:	b29b      	uxth	r3, r3
 8006110:	b2da      	uxtb	r2, r3
 8006112:	4b81      	ldr	r3, [pc, #516]	@ (8006318 <tester_setup+0x618>)
 8006114:	71da      	strb	r2, [r3, #7]

						sendData(TxData_modbus_01,6);
 8006116:	2106      	movs	r1, #6
 8006118:	487f      	ldr	r0, [pc, #508]	@ (8006318 <tester_setup+0x618>)
 800611a:	f7ff fce1 	bl	8005ae0 <sendData>
                    }
                    break;
 800611e:	e105      	b.n	800632c <tester_setup+0x62c>

                case 0x03:  // Cell-current (Range: 1-23, Value: 1/0)
                    if (id >= 1 && id <= 23)
 8006120:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 8103 	beq.w	8006330 <tester_setup+0x630>
 800612a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800612e:	2b17      	cmp	r3, #23
 8006130:	f200 80fe 	bhi.w	8006330 <tester_setup+0x630>
                    {


						float get_current = Get_INA_Current(&cell_configs[id]);
 8006134:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8006138:	4613      	mov	r3, r2
 800613a:	005b      	lsls	r3, r3, #1
 800613c:	4413      	add	r3, r2
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4a73      	ldr	r2, [pc, #460]	@ (8006310 <tester_setup+0x610>)
 8006142:	4413      	add	r3, r2
 8006144:	4618      	mov	r0, r3
 8006146:	f000 faeb 	bl	8006720 <Get_INA_Current>
 800614a:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
						uint16_t Current_scaled = (uint16_t)(get_current * 10000); // Scale as needed
 800614e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8006152:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8006314 <tester_setup+0x614>
 8006156:	ee67 7a87 	vmul.f32	s15, s15, s14
 800615a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800615e:	ee17 3a90 	vmov	r3, s15
 8006162:	85fb      	strh	r3, [r7, #46]	@ 0x2e

						TxData_modbus_01[0] = 0x07;  // slave address
 8006164:	4b6c      	ldr	r3, [pc, #432]	@ (8006318 <tester_setup+0x618>)
 8006166:	2207      	movs	r2, #7
 8006168:	701a      	strb	r2, [r3, #0]
						TxData_modbus_01[1] = Current_scaled >> 8;
 800616a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800616c:	0a1b      	lsrs	r3, r3, #8
 800616e:	b29b      	uxth	r3, r3
 8006170:	b2da      	uxtb	r2, r3
 8006172:	4b69      	ldr	r3, [pc, #420]	@ (8006318 <tester_setup+0x618>)
 8006174:	705a      	strb	r2, [r3, #1]

						TxData_modbus_01[2] = Current_scaled & 0xFF;
 8006176:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006178:	b2da      	uxtb	r2, r3
 800617a:	4b67      	ldr	r3, [pc, #412]	@ (8006318 <tester_setup+0x618>)
 800617c:	709a      	strb	r2, [r3, #2]
						TxData_modbus_01[3] = 0;
 800617e:	4b66      	ldr	r3, [pc, #408]	@ (8006318 <tester_setup+0x618>)
 8006180:	2200      	movs	r2, #0
 8006182:	70da      	strb	r2, [r3, #3]
													//The coil address will be 00000000 00000000 = 0 + 1 = 1

						TxData_modbus_01[4] = 0;  // force data high
 8006184:	4b64      	ldr	r3, [pc, #400]	@ (8006318 <tester_setup+0x618>)
 8006186:	2200      	movs	r2, #0
 8006188:	711a      	strb	r2, [r3, #4]
						TxData_modbus_01[5] = 0;  // force data low
 800618a:	4b63      	ldr	r3, [pc, #396]	@ (8006318 <tester_setup+0x618>)
 800618c:	2200      	movs	r2, #0
 800618e:	715a      	strb	r2, [r3, #5]

						uint16_t crc = crc16(TxData_modbus_01, 6);
 8006190:	2106      	movs	r1, #6
 8006192:	4861      	ldr	r0, [pc, #388]	@ (8006318 <tester_setup+0x618>)
 8006194:	f7ff fcdc 	bl	8005b50 <crc16>
 8006198:	4603      	mov	r3, r0
 800619a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
						TxData_modbus_01[6] = crc&0xFF;   // CRC LOW
 800619c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800619e:	b2da      	uxtb	r2, r3
 80061a0:	4b5d      	ldr	r3, [pc, #372]	@ (8006318 <tester_setup+0x618>)
 80061a2:	719a      	strb	r2, [r3, #6]
						TxData_modbus_01[7] = (crc>>8)&0xFF;  // CRC HIGH
 80061a4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80061a6:	0a1b      	lsrs	r3, r3, #8
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	b2da      	uxtb	r2, r3
 80061ac:	4b5a      	ldr	r3, [pc, #360]	@ (8006318 <tester_setup+0x618>)
 80061ae:	71da      	strb	r2, [r3, #7]

						sendData(TxData_modbus_01,6);
 80061b0:	2106      	movs	r1, #6
 80061b2:	4859      	ldr	r0, [pc, #356]	@ (8006318 <tester_setup+0x618>)
 80061b4:	f7ff fc94 	bl	8005ae0 <sendData>
                    }
                    break;
 80061b8:	e0ba      	b.n	8006330 <tester_setup+0x630>

                    }
                    break;

                case 0x06:  // DC-CSU-Temp (Range: 1-6, Value: -20 to 100°C)
                    if (id >= 1 && id <= 6)
 80061ba:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f000 80b8 	beq.w	8006334 <tester_setup+0x634>
 80061c4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80061c8:	2b06      	cmp	r3, #6
 80061ca:	f200 80b3 	bhi.w	8006334 <tester_setup+0x634>
                    {
                        Get_DC_CSU_Temperature(id);
 80061ce:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 fb7c 	bl	80068d0 <Get_DC_CSU_Temperature>
                    }
                    break;
 80061d8:	e0ac      	b.n	8006334 <tester_setup+0x634>

                case 0x07:  // DC-CSU-Balance_reg (Range: 1-23, Value: 1/0)
                    if (id >= 1 && id <= 23)
 80061da:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f000 80aa 	beq.w	8006338 <tester_setup+0x638>
 80061e4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80061e8:	2b17      	cmp	r3, #23
 80061ea:	f200 80a5 	bhi.w	8006338 <tester_setup+0x638>
                    {
                        Get_DC_CSU_Balance_Register(id);
 80061ee:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 fb79 	bl	80068ea <Get_DC_CSU_Balance_Register>
                    }
                    break;
 80061f8:	e09e      	b.n	8006338 <tester_setup+0x638>

                case 0x08:  // DC-CSU-OW (Range: 1-24, Value: 1/0)
                    if (id >= 1 && id <= 24)
 80061fa:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f000 809c 	beq.w	800633c <tester_setup+0x63c>
 8006204:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006208:	2b18      	cmp	r3, #24
 800620a:	f200 8097 	bhi.w	800633c <tester_setup+0x63c>
                    {
                        Get_DC_CSU_Open_Wire(id);
 800620e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006212:	4618      	mov	r0, r3
 8006214:	f000 fb75 	bl	8006902 <Get_DC_CSU_Open_Wire>
                    }
                    break;
 8006218:	e090      	b.n	800633c <tester_setup+0x63c>

                case 0x09:  // 11-CSU-Volt (Range: 1-23, Value: 2.0-4.2V)
                    if (id >= 1 && id <= 23)
 800621a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800621e:	2b00      	cmp	r3, #0
 8006220:	f000 808e 	beq.w	8006340 <tester_setup+0x640>
 8006224:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006228:	2b17      	cmp	r3, #23
 800622a:	f200 8089 	bhi.w	8006340 <tester_setup+0x640>
                    {
                        Get_11_CSU_Voltage(id);
 800622e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006232:	4618      	mov	r0, r3
 8006234:	f000 fb71 	bl	800691a <Get_11_CSU_Voltage>
                    }
                    break;
 8006238:	e082      	b.n	8006340 <tester_setup+0x640>

                case 0x0A:  // 11-CSU-Temp (Range: 1-6, Value: -20 to 100°C)
                    if (id >= 1 && id <= 6)
 800623a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800623e:	2b00      	cmp	r3, #0
 8006240:	f000 8080 	beq.w	8006344 <tester_setup+0x644>
 8006244:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006248:	2b06      	cmp	r3, #6
 800624a:	d87b      	bhi.n	8006344 <tester_setup+0x644>
                    {
                        Get_11_CSU_Temperature(id);
 800624c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006250:	4618      	mov	r0, r3
 8006252:	f000 fb6f 	bl	8006934 <Get_11_CSU_Temperature>
                    }
                    break;
 8006256:	e075      	b.n	8006344 <tester_setup+0x644>

                case 0x0B:  // 11-CSU-Balance_reg (Range: 1-23, Value: 1/0)
                    if (id >= 1 && id <= 23)
 8006258:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800625c:	2b00      	cmp	r3, #0
 800625e:	d073      	beq.n	8006348 <tester_setup+0x648>
 8006260:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006264:	2b17      	cmp	r3, #23
 8006266:	d86f      	bhi.n	8006348 <tester_setup+0x648>
                    {
                        Get_11_CSU_Balance_Register(id);
 8006268:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800626c:	4618      	mov	r0, r3
 800626e:	f000 fb6e 	bl	800694e <Get_11_CSU_Balance_Register>
                    }
                    break;
 8006272:	e069      	b.n	8006348 <tester_setup+0x648>

                case 0x0C:  // 11-CSU-OW (Range: 1-24, Value: 1/0)
                    if (id >= 1 && id <= 24)
 8006274:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006278:	2b00      	cmp	r3, #0
 800627a:	d067      	beq.n	800634c <tester_setup+0x64c>
 800627c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006280:	2b18      	cmp	r3, #24
 8006282:	d863      	bhi.n	800634c <tester_setup+0x64c>
                    {
                        Get_11_CSU_Open_Wire(id);
 8006284:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006288:	4618      	mov	r0, r3
 800628a:	f000 fb6c 	bl	8006966 <Get_11_CSU_Open_Wire>
                    }
                    break;
 800628e:	e05d      	b.n	800634c <tester_setup+0x64c>

                case 0x0D:  // 12-CSU-Volt (Range: 1-23, Value: 2.0-4.2V)
                    if (id >= 1 && id <= 23)
 8006290:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006294:	2b00      	cmp	r3, #0
 8006296:	d05b      	beq.n	8006350 <tester_setup+0x650>
 8006298:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800629c:	2b17      	cmp	r3, #23
 800629e:	d857      	bhi.n	8006350 <tester_setup+0x650>
                    {
                        Get_12_CSU_Voltage(id);
 80062a0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80062a4:	4618      	mov	r0, r3
 80062a6:	f000 fb6a 	bl	800697e <Get_12_CSU_Voltage>
                    }
                    break;
 80062aa:	e051      	b.n	8006350 <tester_setup+0x650>

                case 0x0E:  // 12-CSU-Temp (Range: 1-6, Value: -20 to 100°C)
                    if (id >= 1 && id <= 6)
 80062ac:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d04f      	beq.n	8006354 <tester_setup+0x654>
 80062b4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80062b8:	2b06      	cmp	r3, #6
 80062ba:	d84b      	bhi.n	8006354 <tester_setup+0x654>
                    {
                        Get_12_CSU_Temperature(id);
 80062bc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80062c0:	4618      	mov	r0, r3
 80062c2:	f000 fb69 	bl	8006998 <Get_12_CSU_Temperature>
                    }
                    break;
 80062c6:	e045      	b.n	8006354 <tester_setup+0x654>

                case 0x0F:  // 12-CSU-Balance_reg (Range: 1-23, Value: 1/0)
                    if (id >= 1 && id <= 23)
 80062c8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d043      	beq.n	8006358 <tester_setup+0x658>
 80062d0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80062d4:	2b17      	cmp	r3, #23
 80062d6:	d83f      	bhi.n	8006358 <tester_setup+0x658>
                    {
                        Get_12_CSU_Balance_Register(id);
 80062d8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80062dc:	4618      	mov	r0, r3
 80062de:	f000 fb68 	bl	80069b2 <Get_12_CSU_Balance_Register>
                    }
                    break;
 80062e2:	e039      	b.n	8006358 <tester_setup+0x658>

                case 0x10:  // 12-CSU-OW (Range: 1-24, Value: 1/0)
                    if (id >= 1 && id <= 24)
 80062e4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d037      	beq.n	800635c <tester_setup+0x65c>
 80062ec:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80062f0:	2b18      	cmp	r3, #24
 80062f2:	d833      	bhi.n	800635c <tester_setup+0x65c>
                    {
                        Get_12_CSU_Open_Wire(id);
 80062f4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 fb66 	bl	80069ca <Get_12_CSU_Open_Wire>
                    }
                    break;
 80062fe:	e02d      	b.n	800635c <tester_setup+0x65c>
                    break;
 8006300:	bf00      	nop
 8006302:	e02c      	b.n	800635e <tester_setup+0x65e>
                    break;
 8006304:	bf00      	nop
 8006306:	e02a      	b.n	800635e <tester_setup+0x65e>
                    break;
 8006308:	bf00      	nop
 800630a:	e028      	b.n	800635e <tester_setup+0x65e>
                    break;
 800630c:	bf00      	nop
 800630e:	e026      	b.n	800635e <tester_setup+0x65e>
 8006310:	0800de74 	.word	0x0800de74
 8006314:	461c4000 	.word	0x461c4000
 8006318:	2000131c 	.word	0x2000131c
                    break;
 800631c:	bf00      	nop
 800631e:	e01e      	b.n	800635e <tester_setup+0x65e>
                    break;
 8006320:	bf00      	nop
 8006322:	e01c      	b.n	800635e <tester_setup+0x65e>

                default:
                    // Handle unknown GET function code
                    break;
 8006324:	bf00      	nop
 8006326:	e01a      	b.n	800635e <tester_setup+0x65e>
                    break;
 8006328:	bf00      	nop
 800632a:	e018      	b.n	800635e <tester_setup+0x65e>
                    break;
 800632c:	bf00      	nop
 800632e:	e016      	b.n	800635e <tester_setup+0x65e>
                    break;
 8006330:	bf00      	nop
 8006332:	e014      	b.n	800635e <tester_setup+0x65e>
                    break;
 8006334:	bf00      	nop
 8006336:	e012      	b.n	800635e <tester_setup+0x65e>
                    break;
 8006338:	bf00      	nop
 800633a:	e010      	b.n	800635e <tester_setup+0x65e>
                    break;
 800633c:	bf00      	nop
 800633e:	e00e      	b.n	800635e <tester_setup+0x65e>
                    break;
 8006340:	bf00      	nop
 8006342:	e00c      	b.n	800635e <tester_setup+0x65e>
                    break;
 8006344:	bf00      	nop
 8006346:	e00a      	b.n	800635e <tester_setup+0x65e>
                    break;
 8006348:	bf00      	nop
 800634a:	e008      	b.n	800635e <tester_setup+0x65e>
                    break;
 800634c:	bf00      	nop
 800634e:	e006      	b.n	800635e <tester_setup+0x65e>
                    break;
 8006350:	bf00      	nop
 8006352:	e004      	b.n	800635e <tester_setup+0x65e>
                    break;
 8006354:	bf00      	nop
 8006356:	e002      	b.n	800635e <tester_setup+0x65e>
                    break;
 8006358:	bf00      	nop
 800635a:	e000      	b.n	800635e <tester_setup+0x65e>
                    break;
 800635c:	bf00      	nop
    else
    {

    }

	memset(RxData_modbus_01, 0, sizeof(RxData_modbus_01));
 800635e:	2280      	movs	r2, #128	@ 0x80
 8006360:	2100      	movs	r1, #0
 8006362:	4806      	ldr	r0, [pc, #24]	@ (800637c <tester_setup+0x67c>)
 8006364:	f006 fafa 	bl	800c95c <memset>
	memset(TxData_modbus_01, 0, sizeof(TxData_modbus_01));
 8006368:	2280      	movs	r2, #128	@ 0x80
 800636a:	2100      	movs	r1, #0
 800636c:	4804      	ldr	r0, [pc, #16]	@ (8006380 <tester_setup+0x680>)
 800636e:	f006 faf5 	bl	800c95c <memset>
}
 8006372:	bf00      	nop
 8006374:	3740      	adds	r7, #64	@ 0x40
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	2000121c 	.word	0x2000121c
 8006380:	2000131c 	.word	0x2000131c

08006384 <init_ina229_devices>:


void init_ina229_devices(void) {
 8006384:	b480      	push	{r7}
 8006386:	af00      	add	r7, sp, #0
    ina229_devices[0] = INA229_0;
 8006388:	4b36      	ldr	r3, [pc, #216]	@ (8006464 <init_ina229_devices+0xe0>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a36      	ldr	r2, [pc, #216]	@ (8006468 <init_ina229_devices+0xe4>)
 800638e:	6013      	str	r3, [r2, #0]
    ina229_devices[1] = INA229_1;
 8006390:	4b36      	ldr	r3, [pc, #216]	@ (800646c <init_ina229_devices+0xe8>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a34      	ldr	r2, [pc, #208]	@ (8006468 <init_ina229_devices+0xe4>)
 8006396:	6053      	str	r3, [r2, #4]
    ina229_devices[2] = INA229_2;
 8006398:	4b35      	ldr	r3, [pc, #212]	@ (8006470 <init_ina229_devices+0xec>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a32      	ldr	r2, [pc, #200]	@ (8006468 <init_ina229_devices+0xe4>)
 800639e:	6093      	str	r3, [r2, #8]
    ina229_devices[3] = INA229_3;
 80063a0:	4b34      	ldr	r3, [pc, #208]	@ (8006474 <init_ina229_devices+0xf0>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a30      	ldr	r2, [pc, #192]	@ (8006468 <init_ina229_devices+0xe4>)
 80063a6:	60d3      	str	r3, [r2, #12]
    ina229_devices[4] = INA229_4;
 80063a8:	4b33      	ldr	r3, [pc, #204]	@ (8006478 <init_ina229_devices+0xf4>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a2e      	ldr	r2, [pc, #184]	@ (8006468 <init_ina229_devices+0xe4>)
 80063ae:	6113      	str	r3, [r2, #16]
    ina229_devices[5] = INA229_5;
 80063b0:	4b32      	ldr	r3, [pc, #200]	@ (800647c <init_ina229_devices+0xf8>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a2c      	ldr	r2, [pc, #176]	@ (8006468 <init_ina229_devices+0xe4>)
 80063b6:	6153      	str	r3, [r2, #20]
    ina229_devices[6] = INA229_6;
 80063b8:	4b31      	ldr	r3, [pc, #196]	@ (8006480 <init_ina229_devices+0xfc>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a2a      	ldr	r2, [pc, #168]	@ (8006468 <init_ina229_devices+0xe4>)
 80063be:	6193      	str	r3, [r2, #24]
    ina229_devices[7] = INA229_7;
 80063c0:	4b30      	ldr	r3, [pc, #192]	@ (8006484 <init_ina229_devices+0x100>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a28      	ldr	r2, [pc, #160]	@ (8006468 <init_ina229_devices+0xe4>)
 80063c6:	61d3      	str	r3, [r2, #28]
    ina229_devices[8] = INA229_8;
 80063c8:	4b2f      	ldr	r3, [pc, #188]	@ (8006488 <init_ina229_devices+0x104>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a26      	ldr	r2, [pc, #152]	@ (8006468 <init_ina229_devices+0xe4>)
 80063ce:	6213      	str	r3, [r2, #32]
    ina229_devices[9] = INA229_9;
 80063d0:	4b2e      	ldr	r3, [pc, #184]	@ (800648c <init_ina229_devices+0x108>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a24      	ldr	r2, [pc, #144]	@ (8006468 <init_ina229_devices+0xe4>)
 80063d6:	6253      	str	r3, [r2, #36]	@ 0x24
    ina229_devices[10] = INA229_10;
 80063d8:	4b2d      	ldr	r3, [pc, #180]	@ (8006490 <init_ina229_devices+0x10c>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a22      	ldr	r2, [pc, #136]	@ (8006468 <init_ina229_devices+0xe4>)
 80063de:	6293      	str	r3, [r2, #40]	@ 0x28
    ina229_devices[11] = INA229_11;
 80063e0:	4b2c      	ldr	r3, [pc, #176]	@ (8006494 <init_ina229_devices+0x110>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a20      	ldr	r2, [pc, #128]	@ (8006468 <init_ina229_devices+0xe4>)
 80063e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
    ina229_devices[12] = INA229_12;
 80063e8:	4b2b      	ldr	r3, [pc, #172]	@ (8006498 <init_ina229_devices+0x114>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a1e      	ldr	r2, [pc, #120]	@ (8006468 <init_ina229_devices+0xe4>)
 80063ee:	6313      	str	r3, [r2, #48]	@ 0x30
    ina229_devices[13] = INA229_13;
 80063f0:	4b2a      	ldr	r3, [pc, #168]	@ (800649c <init_ina229_devices+0x118>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a1c      	ldr	r2, [pc, #112]	@ (8006468 <init_ina229_devices+0xe4>)
 80063f6:	6353      	str	r3, [r2, #52]	@ 0x34
    ina229_devices[14] = INA229_14;
 80063f8:	4b29      	ldr	r3, [pc, #164]	@ (80064a0 <init_ina229_devices+0x11c>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a1a      	ldr	r2, [pc, #104]	@ (8006468 <init_ina229_devices+0xe4>)
 80063fe:	6393      	str	r3, [r2, #56]	@ 0x38
    ina229_devices[15] = INA229_15;
 8006400:	4b28      	ldr	r3, [pc, #160]	@ (80064a4 <init_ina229_devices+0x120>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a18      	ldr	r2, [pc, #96]	@ (8006468 <init_ina229_devices+0xe4>)
 8006406:	63d3      	str	r3, [r2, #60]	@ 0x3c
    ina229_devices[16] = INA229_16;
 8006408:	4b27      	ldr	r3, [pc, #156]	@ (80064a8 <init_ina229_devices+0x124>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a16      	ldr	r2, [pc, #88]	@ (8006468 <init_ina229_devices+0xe4>)
 800640e:	6413      	str	r3, [r2, #64]	@ 0x40
    ina229_devices[17] = INA229_17;
 8006410:	4b26      	ldr	r3, [pc, #152]	@ (80064ac <init_ina229_devices+0x128>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a14      	ldr	r2, [pc, #80]	@ (8006468 <init_ina229_devices+0xe4>)
 8006416:	6453      	str	r3, [r2, #68]	@ 0x44
    ina229_devices[18] = INA229_18;
 8006418:	4b25      	ldr	r3, [pc, #148]	@ (80064b0 <init_ina229_devices+0x12c>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a12      	ldr	r2, [pc, #72]	@ (8006468 <init_ina229_devices+0xe4>)
 800641e:	6493      	str	r3, [r2, #72]	@ 0x48
    ina229_devices[19] = INA229_19;
 8006420:	4b24      	ldr	r3, [pc, #144]	@ (80064b4 <init_ina229_devices+0x130>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a10      	ldr	r2, [pc, #64]	@ (8006468 <init_ina229_devices+0xe4>)
 8006426:	64d3      	str	r3, [r2, #76]	@ 0x4c
    ina229_devices[20] = INA229_20;
 8006428:	4b23      	ldr	r3, [pc, #140]	@ (80064b8 <init_ina229_devices+0x134>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a0e      	ldr	r2, [pc, #56]	@ (8006468 <init_ina229_devices+0xe4>)
 800642e:	6513      	str	r3, [r2, #80]	@ 0x50
    ina229_devices[21] = INA229_21;
 8006430:	4b22      	ldr	r3, [pc, #136]	@ (80064bc <init_ina229_devices+0x138>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a0c      	ldr	r2, [pc, #48]	@ (8006468 <init_ina229_devices+0xe4>)
 8006436:	6553      	str	r3, [r2, #84]	@ 0x54
    ina229_devices[22] = INA229_22;
 8006438:	4b21      	ldr	r3, [pc, #132]	@ (80064c0 <init_ina229_devices+0x13c>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a0a      	ldr	r2, [pc, #40]	@ (8006468 <init_ina229_devices+0xe4>)
 800643e:	6593      	str	r3, [r2, #88]	@ 0x58
    ina229_devices[23] = INA229_23;
 8006440:	4b20      	ldr	r3, [pc, #128]	@ (80064c4 <init_ina229_devices+0x140>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a08      	ldr	r2, [pc, #32]	@ (8006468 <init_ina229_devices+0xe4>)
 8006446:	65d3      	str	r3, [r2, #92]	@ 0x5c
    ina229_devices[24] = INA229_24;
 8006448:	4b1f      	ldr	r3, [pc, #124]	@ (80064c8 <init_ina229_devices+0x144>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a06      	ldr	r2, [pc, #24]	@ (8006468 <init_ina229_devices+0xe4>)
 800644e:	6613      	str	r3, [r2, #96]	@ 0x60
    ina229_devices[25] = INA229_25;
 8006450:	4b1e      	ldr	r3, [pc, #120]	@ (80064cc <init_ina229_devices+0x148>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a04      	ldr	r2, [pc, #16]	@ (8006468 <init_ina229_devices+0xe4>)
 8006456:	6653      	str	r3, [r2, #100]	@ 0x64
}
 8006458:	bf00      	nop
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	0800d80c 	.word	0x0800d80c
 8006468:	2000171c 	.word	0x2000171c
 800646c:	0800d810 	.word	0x0800d810
 8006470:	0800d814 	.word	0x0800d814
 8006474:	0800d818 	.word	0x0800d818
 8006478:	0800d81c 	.word	0x0800d81c
 800647c:	0800d820 	.word	0x0800d820
 8006480:	0800d824 	.word	0x0800d824
 8006484:	0800d828 	.word	0x0800d828
 8006488:	0800d82c 	.word	0x0800d82c
 800648c:	0800d830 	.word	0x0800d830
 8006490:	0800d834 	.word	0x0800d834
 8006494:	0800d838 	.word	0x0800d838
 8006498:	0800d83c 	.word	0x0800d83c
 800649c:	0800d840 	.word	0x0800d840
 80064a0:	0800d844 	.word	0x0800d844
 80064a4:	0800d848 	.word	0x0800d848
 80064a8:	0800d84c 	.word	0x0800d84c
 80064ac:	0800d850 	.word	0x0800d850
 80064b0:	0800d854 	.word	0x0800d854
 80064b4:	0800d858 	.word	0x0800d858
 80064b8:	0800d85c 	.word	0x0800d85c
 80064bc:	0800d860 	.word	0x0800d860
 80064c0:	0800d864 	.word	0x0800d864
 80064c4:	0800d868 	.word	0x0800d868
 80064c8:	0800d86c 	.word	0x0800d86c
 80064cc:	0800d870 	.word	0x0800d870

080064d0 <get_ina_handle>:

};


// Helper function to get INA handle from index
static INA229_Handle get_ina_handle(uint8_t index) {
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	4603      	mov	r3, r0
 80064d8:	71fb      	strb	r3, [r7, #7]
    return INA229_0 + index;  // Assuming INA handles are sequential
 80064da:	4b05      	ldr	r3, [pc, #20]	@ (80064f0 <get_ina_handle+0x20>)
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	79fb      	ldrb	r3, [r7, #7]
 80064e0:	015b      	lsls	r3, r3, #5
 80064e2:	4413      	add	r3, r2
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr
 80064f0:	0800d80c 	.word	0x0800d80c

080064f4 <Voltage_Sequence_Automatic>:

void Voltage_Sequence_Automatic(void)
{
 80064f4:	b5b0      	push	{r4, r5, r7, lr}
 80064f6:	b08c      	sub	sp, #48	@ 0x30
 80064f8:	af00      	add	r7, sp, #0

    const float test_voltages[] = {2.0f, 2.5f, 2.8f, 3.3f, 3.4f, 3.6f, 4.0f, 4.2f};
 80064fa:	4b20      	ldr	r3, [pc, #128]	@ (800657c <Voltage_Sequence_Automatic+0x88>)
 80064fc:	463c      	mov	r4, r7
 80064fe:	461d      	mov	r5, r3
 8006500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006504:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006508:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const int num_voltages = sizeof(test_voltages) / sizeof(test_voltages[0]);
 800650c:	2308      	movs	r3, #8
 800650e:	627b      	str	r3, [r7, #36]	@ 0x24
    const int num_cells = sizeof(cell_configs) / sizeof(cell_configs[0]);
 8006510:	231a      	movs	r3, #26
 8006512:	623b      	str	r3, [r7, #32]

    for(int v = 0; v < num_voltages; v++) {
 8006514:	2300      	movs	r3, #0
 8006516:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006518:	e027      	b.n	800656a <Voltage_Sequence_Automatic+0x76>
        for(int c = 0; c < num_cells; c++) {
 800651a:	2300      	movs	r3, #0
 800651c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800651e:	e01a      	b.n	8006556 <Voltage_Sequence_Automatic+0x62>
        	Set_voltage_and_measure(&cell_configs[c], test_voltages[v]);
 8006520:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006522:	4613      	mov	r3, r2
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	4413      	add	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4a15      	ldr	r2, [pc, #84]	@ (8006580 <Voltage_Sequence_Automatic+0x8c>)
 800652c:	441a      	add	r2, r3
 800652e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	3330      	adds	r3, #48	@ 0x30
 8006534:	443b      	add	r3, r7
 8006536:	3b30      	subs	r3, #48	@ 0x30
 8006538:	edd3 7a00 	vldr	s15, [r3]
 800653c:	eeb0 0a67 	vmov.f32	s0, s15
 8006540:	4610      	mov	r0, r2
 8006542:	f000 f81f 	bl	8006584 <Set_voltage_and_measure>

        	cell_voltage_read();
 8006546:	f7ff fa81 	bl	8005a4c <cell_voltage_read>

            HAL_Delay(10);  // Delay between cells
 800654a:	200a      	movs	r0, #10
 800654c:	f001 fe22 	bl	8008194 <HAL_Delay>
        for(int c = 0; c < num_cells; c++) {
 8006550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006552:	3301      	adds	r3, #1
 8006554:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006556:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006558:	6a3b      	ldr	r3, [r7, #32]
 800655a:	429a      	cmp	r2, r3
 800655c:	dbe0      	blt.n	8006520 <Voltage_Sequence_Automatic+0x2c>
        }
        HAL_Delay(10);  // Delay between voltage levels
 800655e:	200a      	movs	r0, #10
 8006560:	f001 fe18 	bl	8008194 <HAL_Delay>
    for(int v = 0; v < num_voltages; v++) {
 8006564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006566:	3301      	adds	r3, #1
 8006568:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800656a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800656c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656e:	429a      	cmp	r2, r3
 8006570:	dbd3      	blt.n	800651a <Voltage_Sequence_Automatic+0x26>





}
 8006572:	bf00      	nop
 8006574:	bf00      	nop
 8006576:	3730      	adds	r7, #48	@ 0x30
 8006578:	46bd      	mov	sp, r7
 800657a:	bdb0      	pop	{r4, r5, r7, pc}
 800657c:	0800cae8 	.word	0x0800cae8
 8006580:	0800de74 	.word	0x0800de74

08006584 <Set_voltage_and_measure>:

void Set_voltage_and_measure(const Cell_Config* cell, float voltage)

{
 8006584:	b590      	push	{r4, r7, lr}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	ed87 0a00 	vstr	s0, [r7]
    // Get the actual handles from the configuration
    INA229_Handle ina = get_ina_handle(cell->ina_index);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	785b      	ldrb	r3, [r3, #1]
 8006594:	4618      	mov	r0, r3
 8006596:	f7ff ff9b 	bl	80064d0 <get_ina_handle>
 800659a:	60f8      	str	r0, [r7, #12]

    // Only set voltage and control LED for cells 0-11 (skip CSU cells 12 and 13) COZ this is for the slave board reading
    if (cell->cell_id != 24 && cell->cell_id != 25)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	2b18      	cmp	r3, #24
 80065a2:	d010      	beq.n	80065c6 <Set_voltage_and_measure+0x42>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	2b19      	cmp	r3, #25
 80065aa:	d00c      	beq.n	80065c6 <Set_voltage_and_measure+0x42>

    {

    // Set voltage for the cell
    Set_Output_Voltage(cell->cell_id, voltage);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	ed97 0a00 	vldr	s0, [r7]
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7fd fd9d 	bl	80040f4 <Set_Output_Voltage>

    // Turn on LED

    Set_LED_status(cell->cell_id, OFF);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	2101      	movs	r1, #1
 80065c0:	4618      	mov	r0, r3
 80065c2:	f7fd fe05 	bl	80041d0 <Set_LED_status>

    }
    HAL_Delay(10);
 80065c6:	200a      	movs	r0, #10
 80065c8:	f001 fde4 	bl	8008194 <HAL_Delay>
    // Read voltage and temperature
    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_RESET);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6858      	ldr	r0, [r3, #4]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	891b      	ldrh	r3, [r3, #8]
 80065d4:	2200      	movs	r2, #0
 80065d6:	4619      	mov	r1, r3
 80065d8:	f002 fc84 	bl	8008ee4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80065dc:	2001      	movs	r0, #1
 80065de:	f001 fdd9 	bl	8008194 <HAL_Delay>
    INA229_Readings[cell->ina_index].voltage_V = INA229_getVBUS_V(ina);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	785b      	ldrb	r3, [r3, #1]
 80065e6:	461c      	mov	r4, r3
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f7fd ff15 	bl	8004418 <INA229_getVBUS_V>
 80065ee:	eef0 7a40 	vmov.f32	s15, s0
 80065f2:	4a26      	ldr	r2, [pc, #152]	@ (800668c <Set_voltage_and_measure+0x108>)
 80065f4:	0123      	lsls	r3, r4, #4
 80065f6:	4413      	add	r3, r2
 80065f8:	edc3 7a00 	vstr	s15, [r3]
    HAL_Delay(1);
 80065fc:	2001      	movs	r0, #1
 80065fe:	f001 fdc9 	bl	8008194 <HAL_Delay>
    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_SET);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6858      	ldr	r0, [r3, #4]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	891b      	ldrh	r3, [r3, #8]
 800660a:	2201      	movs	r2, #1
 800660c:	4619      	mov	r1, r3
 800660e:	f002 fc69 	bl	8008ee4 <HAL_GPIO_WritePin>

    HAL_Delay(10);
 8006612:	200a      	movs	r0, #10
 8006614:	f001 fdbe 	bl	8008194 <HAL_Delay>

    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_RESET);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6858      	ldr	r0, [r3, #4]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	891b      	ldrh	r3, [r3, #8]
 8006620:	2200      	movs	r2, #0
 8006622:	4619      	mov	r1, r3
 8006624:	f002 fc5e 	bl	8008ee4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8006628:	2001      	movs	r0, #1
 800662a:	f001 fdb3 	bl	8008194 <HAL_Delay>
    INA229_Readings[cell->ina_index].temperature_C = INA229_getDIETEMP_C(ina);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	785b      	ldrb	r3, [r3, #1]
 8006632:	461c      	mov	r4, r3
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f7fd ff4d 	bl	80044d4 <INA229_getDIETEMP_C>
 800663a:	eef0 7a40 	vmov.f32	s15, s0
 800663e:	4a13      	ldr	r2, [pc, #76]	@ (800668c <Set_voltage_and_measure+0x108>)
 8006640:	0123      	lsls	r3, r4, #4
 8006642:	4413      	add	r3, r2
 8006644:	3308      	adds	r3, #8
 8006646:	edc3 7a00 	vstr	s15, [r3]
    HAL_Delay(1);
 800664a:	2001      	movs	r0, #1
 800664c:	f001 fda2 	bl	8008194 <HAL_Delay>
    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_SET);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6858      	ldr	r0, [r3, #4]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	891b      	ldrh	r3, [r3, #8]
 8006658:	2201      	movs	r2, #1
 800665a:	4619      	mov	r1, r3
 800665c:	f002 fc42 	bl	8008ee4 <HAL_GPIO_WritePin>

    // Turn off LED
    HAL_Delay(10);
 8006660:	200a      	movs	r0, #10
 8006662:	f001 fd97 	bl	8008194 <HAL_Delay>

    // Only turn off LED for cells 0-11 (skip CSU cells 12 and 13)
    if (cell->cell_id != 24 && cell->cell_id != 25)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	2b18      	cmp	r3, #24
 800666c:	d009      	beq.n	8006682 <Set_voltage_and_measure+0xfe>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	2b19      	cmp	r3, #25
 8006674:	d005      	beq.n	8006682 <Set_voltage_and_measure+0xfe>

    {

    Set_LED_status(cell->cell_id, ON);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	2100      	movs	r1, #0
 800667c:	4618      	mov	r0, r3
 800667e:	f7fd fda7 	bl	80041d0 <Set_LED_status>

    }
}
 8006682:	bf00      	nop
 8006684:	3714      	adds	r7, #20
 8006686:	46bd      	mov	sp, r7
 8006688:	bd90      	pop	{r4, r7, pc}
 800668a:	bf00      	nop
 800668c:	20000e5c 	.word	0x20000e5c

08006690 <Get_INA_Voltage>:


float Get_INA_Voltage(Cell_Config* cell)
{
 8006690:	b590      	push	{r4, r7, lr}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]

    // Get the actual handles from the configuration
    INA229_Handle ina = get_ina_handle(cell->ina_index);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	785b      	ldrb	r3, [r3, #1]
 800669c:	4618      	mov	r0, r3
 800669e:	f7ff ff17 	bl	80064d0 <get_ina_handle>
 80066a2:	60f8      	str	r0, [r7, #12]

	Set_LED_status(cell->cell_id, OFF);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	2101      	movs	r1, #1
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7fd fd90 	bl	80041d0 <Set_LED_status>

    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_RESET);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6858      	ldr	r0, [r3, #4]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	891b      	ldrh	r3, [r3, #8]
 80066b8:	2200      	movs	r2, #0
 80066ba:	4619      	mov	r1, r3
 80066bc:	f002 fc12 	bl	8008ee4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80066c0:	2001      	movs	r0, #1
 80066c2:	f001 fd67 	bl	8008194 <HAL_Delay>
    INA229_Readings[cell->ina_index].voltage_V = INA229_getVBUS_V(ina);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	785b      	ldrb	r3, [r3, #1]
 80066ca:	461c      	mov	r4, r3
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f7fd fea3 	bl	8004418 <INA229_getVBUS_V>
 80066d2:	eef0 7a40 	vmov.f32	s15, s0
 80066d6:	4a11      	ldr	r2, [pc, #68]	@ (800671c <Get_INA_Voltage+0x8c>)
 80066d8:	0123      	lsls	r3, r4, #4
 80066da:	4413      	add	r3, r2
 80066dc:	edc3 7a00 	vstr	s15, [r3]
    HAL_Delay(1);
 80066e0:	2001      	movs	r0, #1
 80066e2:	f001 fd57 	bl	8008194 <HAL_Delay>
    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_SET);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6858      	ldr	r0, [r3, #4]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	891b      	ldrh	r3, [r3, #8]
 80066ee:	2201      	movs	r2, #1
 80066f0:	4619      	mov	r1, r3
 80066f2:	f002 fbf7 	bl	8008ee4 <HAL_GPIO_WritePin>

	Set_LED_status(cell->cell_id, ON);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	2100      	movs	r1, #0
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7fd fd67 	bl	80041d0 <Set_LED_status>

	return INA229_Readings[cell->ina_index].voltage_V;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	785b      	ldrb	r3, [r3, #1]
 8006706:	4a05      	ldr	r2, [pc, #20]	@ (800671c <Get_INA_Voltage+0x8c>)
 8006708:	011b      	lsls	r3, r3, #4
 800670a:	4413      	add	r3, r2
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	ee07 3a90 	vmov	s15, r3
}
 8006712:	eeb0 0a67 	vmov.f32	s0, s15
 8006716:	3714      	adds	r7, #20
 8006718:	46bd      	mov	sp, r7
 800671a:	bd90      	pop	{r4, r7, pc}
 800671c:	20000e5c 	.word	0x20000e5c

08006720 <Get_INA_Current>:


float Get_INA_Current(const Cell_Config* cell)
{
 8006720:	b590      	push	{r4, r7, lr}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]

    // Get the actual handles from the configuration
    INA229_Handle ina = get_ina_handle(cell->ina_index);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	785b      	ldrb	r3, [r3, #1]
 800672c:	4618      	mov	r0, r3
 800672e:	f7ff fecf 	bl	80064d0 <get_ina_handle>
 8006732:	60f8      	str	r0, [r7, #12]

	Set_LED_status(cell->cell_id, OFF);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	2101      	movs	r1, #1
 800673a:	4618      	mov	r0, r3
 800673c:	f7fd fd48 	bl	80041d0 <Set_LED_status>

    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_RESET);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6858      	ldr	r0, [r3, #4]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	891b      	ldrh	r3, [r3, #8]
 8006748:	2200      	movs	r2, #0
 800674a:	4619      	mov	r1, r3
 800674c:	f002 fbca 	bl	8008ee4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8006750:	2001      	movs	r0, #1
 8006752:	f001 fd1f 	bl	8008194 <HAL_Delay>
    INA229_Readings[cell->ina_index].voltage_V = INA229_getVBUS_V(ina);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	785b      	ldrb	r3, [r3, #1]
 800675a:	461c      	mov	r4, r3
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f7fd fe5b 	bl	8004418 <INA229_getVBUS_V>
 8006762:	eef0 7a40 	vmov.f32	s15, s0
 8006766:	4a11      	ldr	r2, [pc, #68]	@ (80067ac <Get_INA_Current+0x8c>)
 8006768:	0123      	lsls	r3, r4, #4
 800676a:	4413      	add	r3, r2
 800676c:	edc3 7a00 	vstr	s15, [r3]
    HAL_Delay(1);
 8006770:	2001      	movs	r0, #1
 8006772:	f001 fd0f 	bl	8008194 <HAL_Delay>
    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_SET);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6858      	ldr	r0, [r3, #4]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	891b      	ldrh	r3, [r3, #8]
 800677e:	2201      	movs	r2, #1
 8006780:	4619      	mov	r1, r3
 8006782:	f002 fbaf 	bl	8008ee4 <HAL_GPIO_WritePin>

	Set_LED_status(cell->cell_id, ON);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	2100      	movs	r1, #0
 800678c:	4618      	mov	r0, r3
 800678e:	f7fd fd1f 	bl	80041d0 <Set_LED_status>

	return INA229_Readings[cell->ina_index].voltage_V;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	785b      	ldrb	r3, [r3, #1]
 8006796:	4a05      	ldr	r2, [pc, #20]	@ (80067ac <Get_INA_Current+0x8c>)
 8006798:	011b      	lsls	r3, r3, #4
 800679a:	4413      	add	r3, r2
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	ee07 3a90 	vmov	s15, r3
}
 80067a2:	eeb0 0a67 	vmov.f32	s0, s15
 80067a6:	3714      	adds	r7, #20
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd90      	pop	{r4, r7, pc}
 80067ac:	20000e5c 	.word	0x20000e5c

080067b0 <Get_INA_Temp>:

float Get_INA_Temp(const Cell_Config* cell)
{
 80067b0:	b590      	push	{r4, r7, lr}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]

    // Get the actual handles from the configuration
    INA229_Handle ina = get_ina_handle(cell->ina_index);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	785b      	ldrb	r3, [r3, #1]
 80067bc:	4618      	mov	r0, r3
 80067be:	f7ff fe87 	bl	80064d0 <get_ina_handle>
 80067c2:	60f8      	str	r0, [r7, #12]

	Set_LED_status(cell->cell_id, OFF);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	2101      	movs	r1, #1
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7fd fd00 	bl	80041d0 <Set_LED_status>

    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_RESET);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6858      	ldr	r0, [r3, #4]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	891b      	ldrh	r3, [r3, #8]
 80067d8:	2200      	movs	r2, #0
 80067da:	4619      	mov	r1, r3
 80067dc:	f002 fb82 	bl	8008ee4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80067e0:	2001      	movs	r0, #1
 80067e2:	f001 fcd7 	bl	8008194 <HAL_Delay>
    INA229_Readings[cell->ina_index].temperature_C = INA229_getDIETEMP_C(ina);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	785b      	ldrb	r3, [r3, #1]
 80067ea:	461c      	mov	r4, r3
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f7fd fe71 	bl	80044d4 <INA229_getDIETEMP_C>
 80067f2:	eef0 7a40 	vmov.f32	s15, s0
 80067f6:	4a12      	ldr	r2, [pc, #72]	@ (8006840 <Get_INA_Temp+0x90>)
 80067f8:	0123      	lsls	r3, r4, #4
 80067fa:	4413      	add	r3, r2
 80067fc:	3308      	adds	r3, #8
 80067fe:	edc3 7a00 	vstr	s15, [r3]
    HAL_Delay(1);
 8006802:	2001      	movs	r0, #1
 8006804:	f001 fcc6 	bl	8008194 <HAL_Delay>
    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_SET);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6858      	ldr	r0, [r3, #4]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	891b      	ldrh	r3, [r3, #8]
 8006810:	2201      	movs	r2, #1
 8006812:	4619      	mov	r1, r3
 8006814:	f002 fb66 	bl	8008ee4 <HAL_GPIO_WritePin>

	Set_LED_status(cell->cell_id, ON);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	2100      	movs	r1, #0
 800681e:	4618      	mov	r0, r3
 8006820:	f7fd fcd6 	bl	80041d0 <Set_LED_status>

	return INA229_Readings[cell->ina_index].temperature_C;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	785b      	ldrb	r3, [r3, #1]
 8006828:	4a05      	ldr	r2, [pc, #20]	@ (8006840 <Get_INA_Temp+0x90>)
 800682a:	011b      	lsls	r3, r3, #4
 800682c:	4413      	add	r3, r2
 800682e:	3308      	adds	r3, #8
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	ee07 3a90 	vmov	s15, r3
}
 8006836:	eeb0 0a67 	vmov.f32	s0, s15
 800683a:	3714      	adds	r7, #20
 800683c:	46bd      	mov	sp, r7
 800683e:	bd90      	pop	{r4, r7, pc}
 8006840:	20000e5c 	.word	0x20000e5c

08006844 <Set_Balance_State>:
}



void Set_Balance_State(uint8_t id, uint8_t balance_state)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	4603      	mov	r3, r0
 800684c:	460a      	mov	r2, r1
 800684e:	71fb      	strb	r3, [r7, #7]
 8006850:	4613      	mov	r3, r2
 8006852:	71bb      	strb	r3, [r7, #6]

}
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <Open_Wire_Test>:
void Open_Wire_Test(uint8_t id, uint8_t test_enable)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	4603      	mov	r3, r0
 8006868:	460a      	mov	r2, r1
 800686a:	71fb      	strb	r3, [r7, #7]
 800686c:	4613      	mov	r3, r2
 800686e:	71bb      	strb	r3, [r7, #6]

}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <Set_Daisy_Chain>:
void Set_Daisy_Chain(uint8_t chain_state)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	4603      	mov	r3, r0
 8006884:	71fb      	strb	r3, [r7, #7]
	if(chain_state == 1)
 8006886:	79fb      	ldrb	r3, [r7, #7]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d105      	bne.n	8006898 <Set_Daisy_Chain+0x1c>
	{
	HAL_GPIO_WritePin(GPIOC, SPI3_CS_03_Pin|SPI3_CS_02_Pin, GPIO_PIN_RESET);
 800688c:	2200      	movs	r2, #0
 800688e:	2130      	movs	r1, #48	@ 0x30
 8006890:	4807      	ldr	r0, [pc, #28]	@ (80068b0 <Set_Daisy_Chain+0x34>)
 8006892:	f002 fb27 	bl	8008ee4 <HAL_GPIO_WritePin>
	else if (chain_state == 0)
	{
	HAL_GPIO_WritePin(GPIOC, SPI3_CS_03_Pin|SPI3_CS_02_Pin, GPIO_PIN_SET);
	}

}
 8006896:	e007      	b.n	80068a8 <Set_Daisy_Chain+0x2c>
	else if (chain_state == 0)
 8006898:	79fb      	ldrb	r3, [r7, #7]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d104      	bne.n	80068a8 <Set_Daisy_Chain+0x2c>
	HAL_GPIO_WritePin(GPIOC, SPI3_CS_03_Pin|SPI3_CS_02_Pin, GPIO_PIN_SET);
 800689e:	2201      	movs	r2, #1
 80068a0:	2130      	movs	r1, #48	@ 0x30
 80068a2:	4803      	ldr	r0, [pc, #12]	@ (80068b0 <Set_Daisy_Chain+0x34>)
 80068a4:	f002 fb1e 	bl	8008ee4 <HAL_GPIO_WritePin>
}
 80068a8:	bf00      	nop
 80068aa:	3708      	adds	r7, #8
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	40020800 	.word	0x40020800

080068b4 <Run_Automatic_Sequence>:
void Run_Automatic_Sequence(uint8_t sequence_id, uint8_t sequence_state)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	4603      	mov	r3, r0
 80068bc:	460a      	mov	r2, r1
 80068be:	71fb      	strb	r3, [r7, #7]
 80068c0:	4613      	mov	r3, r2
 80068c2:	71bb      	strb	r3, [r7, #6]

}
 80068c4:	bf00      	nop
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <Get_DC_CSU_Temperature>:
float Get_DC_CSU_Voltage(uint8_t id)
{

}
float Get_DC_CSU_Temperature(uint8_t id)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	4603      	mov	r3, r0
 80068d8:	71fb      	strb	r3, [r7, #7]

}
 80068da:	bf00      	nop
 80068dc:	eeb0 0a67 	vmov.f32	s0, s15
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <Get_DC_CSU_Balance_Register>:
uint8_t Get_DC_CSU_Balance_Register(uint8_t id)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b083      	sub	sp, #12
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	4603      	mov	r3, r0
 80068f2:	71fb      	strb	r3, [r7, #7]

}
 80068f4:	bf00      	nop
 80068f6:	4618      	mov	r0, r3
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <Get_DC_CSU_Open_Wire>:
uint8_t Get_DC_CSU_Open_Wire(uint8_t id)
{
 8006902:	b480      	push	{r7}
 8006904:	b083      	sub	sp, #12
 8006906:	af00      	add	r7, sp, #0
 8006908:	4603      	mov	r3, r0
 800690a:	71fb      	strb	r3, [r7, #7]

}
 800690c:	bf00      	nop
 800690e:	4618      	mov	r0, r3
 8006910:	370c      	adds	r7, #12
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr

0800691a <Get_11_CSU_Voltage>:

// GET functions - 11-CSU measurements
float Get_11_CSU_Voltage(uint8_t id)
{
 800691a:	b480      	push	{r7}
 800691c:	b083      	sub	sp, #12
 800691e:	af00      	add	r7, sp, #0
 8006920:	4603      	mov	r3, r0
 8006922:	71fb      	strb	r3, [r7, #7]

}
 8006924:	bf00      	nop
 8006926:	eeb0 0a67 	vmov.f32	s0, s15
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <Get_11_CSU_Temperature>:
float Get_11_CSU_Temperature(uint8_t id)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	4603      	mov	r3, r0
 800693c:	71fb      	strb	r3, [r7, #7]

}
 800693e:	bf00      	nop
 8006940:	eeb0 0a67 	vmov.f32	s0, s15
 8006944:	370c      	adds	r7, #12
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr

0800694e <Get_11_CSU_Balance_Register>:
uint8_t Get_11_CSU_Balance_Register(uint8_t id)
{
 800694e:	b480      	push	{r7}
 8006950:	b083      	sub	sp, #12
 8006952:	af00      	add	r7, sp, #0
 8006954:	4603      	mov	r3, r0
 8006956:	71fb      	strb	r3, [r7, #7]

}
 8006958:	bf00      	nop
 800695a:	4618      	mov	r0, r3
 800695c:	370c      	adds	r7, #12
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <Get_11_CSU_Open_Wire>:
uint8_t Get_11_CSU_Open_Wire(uint8_t id)
{
 8006966:	b480      	push	{r7}
 8006968:	b083      	sub	sp, #12
 800696a:	af00      	add	r7, sp, #0
 800696c:	4603      	mov	r3, r0
 800696e:	71fb      	strb	r3, [r7, #7]

}
 8006970:	bf00      	nop
 8006972:	4618      	mov	r0, r3
 8006974:	370c      	adds	r7, #12
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <Get_12_CSU_Voltage>:

// GET functions - 12-CSU measurements
float Get_12_CSU_Voltage(uint8_t id)
{
 800697e:	b480      	push	{r7}
 8006980:	b083      	sub	sp, #12
 8006982:	af00      	add	r7, sp, #0
 8006984:	4603      	mov	r3, r0
 8006986:	71fb      	strb	r3, [r7, #7]

}
 8006988:	bf00      	nop
 800698a:	eeb0 0a67 	vmov.f32	s0, s15
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <Get_12_CSU_Temperature>:
float Get_12_CSU_Temperature(uint8_t id)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	4603      	mov	r3, r0
 80069a0:	71fb      	strb	r3, [r7, #7]

}
 80069a2:	bf00      	nop
 80069a4:	eeb0 0a67 	vmov.f32	s0, s15
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <Get_12_CSU_Balance_Register>:
uint8_t Get_12_CSU_Balance_Register(uint8_t id)
{
 80069b2:	b480      	push	{r7}
 80069b4:	b083      	sub	sp, #12
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	4603      	mov	r3, r0
 80069ba:	71fb      	strb	r3, [r7, #7]

}
 80069bc:	bf00      	nop
 80069be:	4618      	mov	r0, r3
 80069c0:	370c      	adds	r7, #12
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr

080069ca <Get_12_CSU_Open_Wire>:
uint8_t Get_12_CSU_Open_Wire(uint8_t id)
{
 80069ca:	b480      	push	{r7}
 80069cc:	b083      	sub	sp, #12
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	4603      	mov	r3, r0
 80069d2:	71fb      	strb	r3, [r7, #7]

}
 80069d4:	bf00      	nop
 80069d6:	4618      	mov	r0, r3
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
	...

080069e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80069e4:	b590      	push	{r4, r7, lr}
 80069e6:	b089      	sub	sp, #36	@ 0x24
 80069e8:	af06      	add	r7, sp, #24

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

    memset(RxData_modbus_01, 0, sizeof(RxData_modbus_01));
 80069ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80069ee:	2100      	movs	r1, #0
 80069f0:	4876      	ldr	r0, [pc, #472]	@ (8006bcc <main+0x1e8>)
 80069f2:	f005 ffb3 	bl	800c95c <memset>
    memset(TxData_modbus_01, 0, sizeof(TxData_modbus_01));
 80069f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80069fa:	2100      	movs	r1, #0
 80069fc:	4874      	ldr	r0, [pc, #464]	@ (8006bd0 <main+0x1ec>)
 80069fe:	f005 ffad 	bl	800c95c <memset>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006a02:	f001 fb55 	bl	80080b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006a06:	f000 f90f 	bl	8006c28 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006a0a:	f000 fc23 	bl	8007254 <MX_GPIO_Init>
  MX_SPI1_Init();
 8006a0e:	f000 faa1 	bl	8006f54 <MX_SPI1_Init>
  MX_SPI2_Init();
 8006a12:	f000 fad5 	bl	8006fc0 <MX_SPI2_Init>
  MX_I2C2_Init();
 8006a16:	f000 fa1d 	bl	8006e54 <MX_I2C2_Init>
  MX_I2C3_Init();
 8006a1a:	f000 fa5b 	bl	8006ed4 <MX_I2C3_Init>
  MX_SPI3_Init();
 8006a1e:	f000 fb05 	bl	800702c <MX_SPI3_Init>
  MX_SPI4_Init();
 8006a22:	f000 fb39 	bl	8007098 <MX_SPI4_Init>
  MX_CAN1_Init();
 8006a26:	f000 f96b 	bl	8006d00 <MX_CAN1_Init>
  MX_CAN2_Init();
 8006a2a:	f000 f99f 	bl	8006d6c <MX_CAN2_Init>
  MX_I2C1_Init();
 8006a2e:	f000 f9d1 	bl	8006dd4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8006a32:	f000 fb67 	bl	8007104 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8006a36:	f000 fb8f 	bl	8007158 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8006a3a:	f000 fbb7 	bl	80071ac <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8006a3e:	f000 fbdf 	bl	8007200 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8006a42:	f005 fe07 	bl	800c654 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  RTC_Init();
 8006a46:	f7ff f8bb 	bl	8005bc0 <RTC_Init>
  LED_Init();		/* Reset all LEDs */
 8006a4a:	f7fa fabb 	bl	8000fc4 <LED_Init>

  init_ina229_devices();
 8006a4e:	f7ff fc99 	bl	8006384 <init_ina229_devices>

  for (int i = 0; i < NUM_INA229; i++)
 8006a52:	2300      	movs	r3, #0
 8006a54:	607b      	str	r3, [r7, #4]
 8006a56:	e00c      	b.n	8006a72 <main+0x8e>
  { INA229_config(ina229_devices[i]); HAL_Delay(10); }
 8006a58:	4a5e      	ldr	r2, [pc, #376]	@ (8006bd4 <main+0x1f0>)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7fd fc1f 	bl	80042a4 <INA229_config>
 8006a66:	200a      	movs	r0, #10
 8006a68:	f001 fb94 	bl	8008194 <HAL_Delay>
  for (int i = 0; i < NUM_INA229; i++)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	607b      	str	r3, [r7, #4]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b19      	cmp	r3, #25
 8006a76:	ddef      	ble.n	8006a58 <main+0x74>



  mcu_spiInit(0);
 8006a78:	2000      	movs	r0, #0
 8006a7a:	f7fd fd77 	bl	800456c <mcu_spiInit>
  HAL_Delay(10);
 8006a7e:	200a      	movs	r0, #10
 8006a80:	f001 fb88 	bl	8008194 <HAL_Delay>

  //init ltc ics

  //--------------------------------------------------------------//

	LTC6811_init_cfg(TOTAL_IC, BMS_IC);
 8006a84:	4954      	ldr	r1, [pc, #336]	@ (8006bd8 <main+0x1f4>)
 8006a86:	2002      	movs	r0, #2
 8006a88:	f7fd fe56 	bl	8004738 <LTC6811_init_cfg>
	uint8_t main_current_ic;
	for (main_current_ic = 0; main_current_ic < TOTAL_IC; main_current_ic++) {
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	70fb      	strb	r3, [r7, #3]
 8006a90:	e018      	b.n	8006ac4 <main+0xe0>
		LTC6811_set_cfgr(main_current_ic, BMS_IC, REF_ON, ADCOPT, GPIOBITS_A,
 8006a92:	4b52      	ldr	r3, [pc, #328]	@ (8006bdc <main+0x1f8>)
 8006a94:	7819      	ldrb	r1, [r3, #0]
 8006a96:	4b52      	ldr	r3, [pc, #328]	@ (8006be0 <main+0x1fc>)
 8006a98:	781c      	ldrb	r4, [r3, #0]
 8006a9a:	4b52      	ldr	r3, [pc, #328]	@ (8006be4 <main+0x200>)
 8006a9c:	881b      	ldrh	r3, [r3, #0]
 8006a9e:	4a52      	ldr	r2, [pc, #328]	@ (8006be8 <main+0x204>)
 8006aa0:	8812      	ldrh	r2, [r2, #0]
 8006aa2:	78f8      	ldrb	r0, [r7, #3]
 8006aa4:	9204      	str	r2, [sp, #16]
 8006aa6:	9303      	str	r3, [sp, #12]
 8006aa8:	4b50      	ldr	r3, [pc, #320]	@ (8006bec <main+0x208>)
 8006aaa:	9302      	str	r3, [sp, #8]
 8006aac:	4b50      	ldr	r3, [pc, #320]	@ (8006bf0 <main+0x20c>)
 8006aae:	9301      	str	r3, [sp, #4]
 8006ab0:	4b50      	ldr	r3, [pc, #320]	@ (8006bf4 <main+0x210>)
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	4623      	mov	r3, r4
 8006ab6:	460a      	mov	r2, r1
 8006ab8:	4947      	ldr	r1, [pc, #284]	@ (8006bd8 <main+0x1f4>)
 8006aba:	f7fd fe4c 	bl	8004756 <LTC6811_set_cfgr>
	for (main_current_ic = 0; main_current_ic < TOTAL_IC; main_current_ic++) {
 8006abe:	78fb      	ldrb	r3, [r7, #3]
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	70fb      	strb	r3, [r7, #3]
 8006ac4:	78fb      	ldrb	r3, [r7, #3]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d9e3      	bls.n	8006a92 <main+0xae>
				DCCBITS_A, DCTOBITS, UV, OV);
	}
	LTC6811_wrcfg(TOTAL_IC, BMS_IC);
 8006aca:	4943      	ldr	r1, [pc, #268]	@ (8006bd8 <main+0x1f4>)
 8006acc:	2002      	movs	r0, #2
 8006ace:	f7fd fde4 	bl	800469a <LTC6811_wrcfg>
	LTC6811_reset_crc_count(TOTAL_IC, BMS_IC);
 8006ad2:	4941      	ldr	r1, [pc, #260]	@ (8006bd8 <main+0x1f4>)
 8006ad4:	2002      	movs	r0, #2
 8006ad6:	f7fd fe20 	bl	800471a <LTC6811_reset_crc_count>
	LTC6811_init_reg_limits(TOTAL_IC, BMS_IC);
 8006ada:	493f      	ldr	r1, [pc, #252]	@ (8006bd8 <main+0x1f4>)
 8006adc:	2002      	movs	r0, #2
 8006ade:	f7fd fd83 	bl	80045e8 <LTC6811_init_reg_limits>

  //--------------------------------------------------------------//

  /* Initialize the display module */
  Display_Init();
 8006ae2:	f7fb f8ff 	bl	8001ce4 <Display_Init>

  /* Display the main title page */
  Display_MainTitlePage();
 8006ae6:	f7fb f925 	bl	8001d34 <Display_MainTitlePage>

  /* Initialize the expander at address 0x20 by configuring all its pins as outputs */
  Expander_InitAllDevices(&hi2c2);
 8006aea:	4843      	ldr	r0, [pc, #268]	@ (8006bf8 <main+0x214>)
 8006aec:	f7fd f8da 	bl	8003ca4 <Expander_InitAllDevices>
  Expander_InitAllDevices(&hi2c3);
 8006af0:	4842      	ldr	r0, [pc, #264]	@ (8006bfc <main+0x218>)
 8006af2:	f7fd f8d7 	bl	8003ca4 <Expander_InitAllDevices>

	HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData_modbus_01, 256);
 8006af6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006afa:	4934      	ldr	r1, [pc, #208]	@ (8006bcc <main+0x1e8>)
 8006afc:	4840      	ldr	r0, [pc, #256]	@ (8006c00 <main+0x21c>)
 8006afe:	f004 fde2 	bl	800b6c6 <HAL_UARTEx_ReceiveToIdle_IT>

	HAL_UARTEx_ReceiveToIdle_IT(&huart2, RxData_modbus_02, 256);
 8006b02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006b06:	493f      	ldr	r1, [pc, #252]	@ (8006c04 <main+0x220>)
 8006b08:	483f      	ldr	r0, [pc, #252]	@ (8006c08 <main+0x224>)
 8006b0a:	f004 fddc 	bl	800b6c6 <HAL_UARTEx_ReceiveToIdle_IT>

	HAL_UARTEx_ReceiveToIdle_IT(&huart3, RxData_modbus_03, 256);
 8006b0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006b12:	493e      	ldr	r1, [pc, #248]	@ (8006c0c <main+0x228>)
 8006b14:	483e      	ldr	r0, [pc, #248]	@ (8006c10 <main+0x22c>)
 8006b16:	f004 fdd6 	bl	800b6c6 <HAL_UARTEx_ReceiveToIdle_IT>

	HAL_UARTEx_ReceiveToIdle_IT(&huart6, RxData_modbus_04, 256);
 8006b1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006b1e:	493d      	ldr	r1, [pc, #244]	@ (8006c14 <main+0x230>)
 8006b20:	483d      	ldr	r0, [pc, #244]	@ (8006c18 <main+0x234>)
 8006b22:	f004 fdd0 	bl	800b6c6 <HAL_UARTEx_ReceiveToIdle_IT>

    /* USER CODE BEGIN 3 */



	  if (modebus_rx_flag == 1 )
 8006b26:	4b3d      	ldr	r3, [pc, #244]	@ (8006c1c <main+0x238>)
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d116      	bne.n	8006b5c <main+0x178>
	  {
//		  memset(Rx_Data, 0, sizeof(Rx_Data));

//		  sprintf(Tx_Data, "F103 %d", indx++);
//		    send_Data (Tx_Data);
		    HAL_Delay(10);
 8006b2e:	200a      	movs	r0, #10
 8006b30:	f001 fb30 	bl	8008194 <HAL_Delay>
	        tester_setup();
 8006b34:	f7ff f8e4 	bl	8005d00 <tester_setup>


	    	memset(RxData_modbus_01, 0, sizeof(RxData_modbus_01));
 8006b38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	4823      	ldr	r0, [pc, #140]	@ (8006bcc <main+0x1e8>)
 8006b40:	f005 ff0c 	bl	800c95c <memset>
	    	memset(TxData_modbus_01, 0, sizeof(TxData_modbus_01));
 8006b44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006b48:	2100      	movs	r1, #0
 8006b4a:	4821      	ldr	r0, [pc, #132]	@ (8006bd0 <main+0x1ec>)
 8006b4c:	f005 ff06 	bl	800c95c <memset>
		  modebus_rx_flag = 0 ;
 8006b50:	4b32      	ldr	r3, [pc, #200]	@ (8006c1c <main+0x238>)
 8006b52:	2200      	movs	r2, #0
 8006b54:	701a      	strb	r2, [r3, #0]

		  flag_1 = 5 ;
 8006b56:	4b32      	ldr	r3, [pc, #200]	@ (8006c20 <main+0x23c>)
 8006b58:	2205      	movs	r2, #5
 8006b5a:	701a      	strb	r2, [r3, #0]

//		  HAL_TIM_Base_Stop_IT(&htim1);

	  }

		  cell12_Temp_01_Set(10);
 8006b5c:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8006b60:	f7fa fb64 	bl	800122c <cell12_Temp_01_Set>
		  cell12_Temp_02_Set(resistance[1]);
 8006b64:	4b2f      	ldr	r3, [pc, #188]	@ (8006c24 <main+0x240>)
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	ee07 3a90 	vmov	s15, r3
 8006b6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b70:	eeb0 0a67 	vmov.f32	s0, s15
 8006b74:	f7fa fc10 	bl	8001398 <cell12_Temp_02_Set>
		  cell12_Temp_03_Set(resistance[2]);
 8006b78:	4b2a      	ldr	r3, [pc, #168]	@ (8006c24 <main+0x240>)
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	ee07 3a90 	vmov	s15, r3
 8006b80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b84:	eeb0 0a67 	vmov.f32	s0, s15
 8006b88:	f7fa fcc6 	bl	8001518 <cell12_Temp_03_Set>
		  cell11_Temp_01_Set(resistance[3]);
 8006b8c:	4b25      	ldr	r3, [pc, #148]	@ (8006c24 <main+0x240>)
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	ee07 3a90 	vmov	s15, r3
 8006b94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b98:	eeb0 0a67 	vmov.f32	s0, s15
 8006b9c:	f7fa fd72 	bl	8001684 <cell11_Temp_01_Set>
		  cell11_Temp_02_Set(resistance[4]);
 8006ba0:	4b20      	ldr	r3, [pc, #128]	@ (8006c24 <main+0x240>)
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	ee07 3a90 	vmov	s15, r3
 8006ba8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006bac:	eeb0 0a67 	vmov.f32	s0, s15
 8006bb0:	f7fa fe28 	bl	8001804 <cell11_Temp_02_Set>
		  cell11_Temp_03_Set(resistance[4]);
 8006bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8006c24 <main+0x240>)
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	ee07 3a90 	vmov	s15, r3
 8006bbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006bc0:	eeb0 0a67 	vmov.f32	s0, s15
 8006bc4:	f7fa fede 	bl	8001984 <cell11_Temp_03_Set>
	  if (modebus_rx_flag == 1 )
 8006bc8:	e7ad      	b.n	8006b26 <main+0x142>
 8006bca:	bf00      	nop
 8006bcc:	2000121c 	.word	0x2000121c
 8006bd0:	2000131c 	.word	0x2000131c
 8006bd4:	2000171c 	.word	0x2000171c
 8006bd8:	20000ffc 	.word	0x20000ffc
 8006bdc:	20000900 	.word	0x20000900
 8006be0:	20001204 	.word	0x20001204
 8006be4:	2000090a 	.word	0x2000090a
 8006be8:	2000090c 	.word	0x2000090c
 8006bec:	20000910 	.word	0x20000910
 8006bf0:	20001208 	.word	0x20001208
 8006bf4:	20000904 	.word	0x20000904
 8006bf8:	20001828 	.word	0x20001828
 8006bfc:	2000187c 	.word	0x2000187c
 8006c00:	20001a30 	.word	0x20001a30
 8006c04:	2000141c 	.word	0x2000141c
 8006c08:	20001a78 	.word	0x20001a78
 8006c0c:	2000151c 	.word	0x2000151c
 8006c10:	20001ac0 	.word	0x20001ac0
 8006c14:	2000161c 	.word	0x2000161c
 8006c18:	20001b08 	.word	0x20001b08
 8006c1c:	20001217 	.word	0x20001217
 8006c20:	20001218 	.word	0x20001218
 8006c24:	200008e8 	.word	0x200008e8

08006c28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b094      	sub	sp, #80	@ 0x50
 8006c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006c2e:	f107 0320 	add.w	r3, r7, #32
 8006c32:	2230      	movs	r2, #48	@ 0x30
 8006c34:	2100      	movs	r1, #0
 8006c36:	4618      	mov	r0, r3
 8006c38:	f005 fe90 	bl	800c95c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006c3c:	f107 030c 	add.w	r3, r7, #12
 8006c40:	2200      	movs	r2, #0
 8006c42:	601a      	str	r2, [r3, #0]
 8006c44:	605a      	str	r2, [r3, #4]
 8006c46:	609a      	str	r2, [r3, #8]
 8006c48:	60da      	str	r2, [r3, #12]
 8006c4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	60bb      	str	r3, [r7, #8]
 8006c50:	4b29      	ldr	r3, [pc, #164]	@ (8006cf8 <SystemClock_Config+0xd0>)
 8006c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c54:	4a28      	ldr	r2, [pc, #160]	@ (8006cf8 <SystemClock_Config+0xd0>)
 8006c56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8006c5c:	4b26      	ldr	r3, [pc, #152]	@ (8006cf8 <SystemClock_Config+0xd0>)
 8006c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c64:	60bb      	str	r3, [r7, #8]
 8006c66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8006c68:	2300      	movs	r3, #0
 8006c6a:	607b      	str	r3, [r7, #4]
 8006c6c:	4b23      	ldr	r3, [pc, #140]	@ (8006cfc <SystemClock_Config+0xd4>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8006c74:	4a21      	ldr	r2, [pc, #132]	@ (8006cfc <SystemClock_Config+0xd4>)
 8006c76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006c7a:	6013      	str	r3, [r2, #0]
 8006c7c:	4b1f      	ldr	r3, [pc, #124]	@ (8006cfc <SystemClock_Config+0xd4>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006c84:	607b      	str	r3, [r7, #4]
 8006c86:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006c88:	2302      	movs	r3, #2
 8006c8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006c90:	2310      	movs	r3, #16
 8006c92:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006c94:	2302      	movs	r3, #2
 8006c96:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8006c9c:	230f      	movs	r3, #15
 8006c9e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8006ca0:	2390      	movs	r3, #144	@ 0x90
 8006ca2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8006ca8:	2305      	movs	r3, #5
 8006caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006cac:	f107 0320 	add.w	r3, r7, #32
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f003 fa03 	bl	800a0bc <HAL_RCC_OscConfig>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d001      	beq.n	8006cc0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8006cbc:	f000 fd6d 	bl	800779a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006cc0:	230f      	movs	r3, #15
 8006cc2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006ccc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8006cd0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006cd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006cd6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006cd8:	f107 030c 	add.w	r3, r7, #12
 8006cdc:	2102      	movs	r1, #2
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f003 fc64 	bl	800a5ac <HAL_RCC_ClockConfig>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d001      	beq.n	8006cee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8006cea:	f000 fd56 	bl	800779a <Error_Handler>
  }
}
 8006cee:	bf00      	nop
 8006cf0:	3750      	adds	r7, #80	@ 0x50
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	40023800 	.word	0x40023800
 8006cfc:	40007000 	.word	0x40007000

08006d00 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8006d04:	4b17      	ldr	r3, [pc, #92]	@ (8006d64 <MX_CAN1_Init+0x64>)
 8006d06:	4a18      	ldr	r2, [pc, #96]	@ (8006d68 <MX_CAN1_Init+0x68>)
 8006d08:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 8006d0a:	4b16      	ldr	r3, [pc, #88]	@ (8006d64 <MX_CAN1_Init+0x64>)
 8006d0c:	220a      	movs	r2, #10
 8006d0e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8006d10:	4b14      	ldr	r3, [pc, #80]	@ (8006d64 <MX_CAN1_Init+0x64>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8006d16:	4b13      	ldr	r3, [pc, #76]	@ (8006d64 <MX_CAN1_Init+0x64>)
 8006d18:	2200      	movs	r2, #0
 8006d1a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8006d1c:	4b11      	ldr	r3, [pc, #68]	@ (8006d64 <MX_CAN1_Init+0x64>)
 8006d1e:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8006d22:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8006d24:	4b0f      	ldr	r3, [pc, #60]	@ (8006d64 <MX_CAN1_Init+0x64>)
 8006d26:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8006d2a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8006d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8006d64 <MX_CAN1_Init+0x64>)
 8006d2e:	2200      	movs	r2, #0
 8006d30:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8006d32:	4b0c      	ldr	r3, [pc, #48]	@ (8006d64 <MX_CAN1_Init+0x64>)
 8006d34:	2200      	movs	r2, #0
 8006d36:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8006d38:	4b0a      	ldr	r3, [pc, #40]	@ (8006d64 <MX_CAN1_Init+0x64>)
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8006d3e:	4b09      	ldr	r3, [pc, #36]	@ (8006d64 <MX_CAN1_Init+0x64>)
 8006d40:	2200      	movs	r2, #0
 8006d42:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8006d44:	4b07      	ldr	r3, [pc, #28]	@ (8006d64 <MX_CAN1_Init+0x64>)
 8006d46:	2200      	movs	r2, #0
 8006d48:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8006d4a:	4b06      	ldr	r3, [pc, #24]	@ (8006d64 <MX_CAN1_Init+0x64>)
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8006d50:	4804      	ldr	r0, [pc, #16]	@ (8006d64 <MX_CAN1_Init+0x64>)
 8006d52:	f001 fa43 	bl	80081dc <HAL_CAN_Init>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d001      	beq.n	8006d60 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8006d5c:	f000 fd1d 	bl	800779a <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8006d60:	bf00      	nop
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	20001784 	.word	0x20001784
 8006d68:	40006400 	.word	0x40006400

08006d6c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8006d70:	4b16      	ldr	r3, [pc, #88]	@ (8006dcc <MX_CAN2_Init+0x60>)
 8006d72:	4a17      	ldr	r2, [pc, #92]	@ (8006dd0 <MX_CAN2_Init+0x64>)
 8006d74:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8006d76:	4b15      	ldr	r3, [pc, #84]	@ (8006dcc <MX_CAN2_Init+0x60>)
 8006d78:	2210      	movs	r2, #16
 8006d7a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8006d7c:	4b13      	ldr	r3, [pc, #76]	@ (8006dcc <MX_CAN2_Init+0x60>)
 8006d7e:	2200      	movs	r2, #0
 8006d80:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8006d82:	4b12      	ldr	r3, [pc, #72]	@ (8006dcc <MX_CAN2_Init+0x60>)
 8006d84:	2200      	movs	r2, #0
 8006d86:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8006d88:	4b10      	ldr	r3, [pc, #64]	@ (8006dcc <MX_CAN2_Init+0x60>)
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8006d8e:	4b0f      	ldr	r3, [pc, #60]	@ (8006dcc <MX_CAN2_Init+0x60>)
 8006d90:	2200      	movs	r2, #0
 8006d92:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8006d94:	4b0d      	ldr	r3, [pc, #52]	@ (8006dcc <MX_CAN2_Init+0x60>)
 8006d96:	2200      	movs	r2, #0
 8006d98:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8006d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8006dcc <MX_CAN2_Init+0x60>)
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8006da0:	4b0a      	ldr	r3, [pc, #40]	@ (8006dcc <MX_CAN2_Init+0x60>)
 8006da2:	2200      	movs	r2, #0
 8006da4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8006da6:	4b09      	ldr	r3, [pc, #36]	@ (8006dcc <MX_CAN2_Init+0x60>)
 8006da8:	2200      	movs	r2, #0
 8006daa:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8006dac:	4b07      	ldr	r3, [pc, #28]	@ (8006dcc <MX_CAN2_Init+0x60>)
 8006dae:	2200      	movs	r2, #0
 8006db0:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8006db2:	4b06      	ldr	r3, [pc, #24]	@ (8006dcc <MX_CAN2_Init+0x60>)
 8006db4:	2200      	movs	r2, #0
 8006db6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8006db8:	4804      	ldr	r0, [pc, #16]	@ (8006dcc <MX_CAN2_Init+0x60>)
 8006dba:	f001 fa0f 	bl	80081dc <HAL_CAN_Init>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d001      	beq.n	8006dc8 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8006dc4:	f000 fce9 	bl	800779a <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8006dc8:	bf00      	nop
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	200017ac 	.word	0x200017ac
 8006dd0:	40006800 	.word	0x40006800

08006dd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8006e48 <MX_I2C1_Init+0x74>)
 8006dda:	4a1c      	ldr	r2, [pc, #112]	@ (8006e4c <MX_I2C1_Init+0x78>)
 8006ddc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8006dde:	4b1a      	ldr	r3, [pc, #104]	@ (8006e48 <MX_I2C1_Init+0x74>)
 8006de0:	4a1b      	ldr	r2, [pc, #108]	@ (8006e50 <MX_I2C1_Init+0x7c>)
 8006de2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006de4:	4b18      	ldr	r3, [pc, #96]	@ (8006e48 <MX_I2C1_Init+0x74>)
 8006de6:	2200      	movs	r2, #0
 8006de8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006dea:	4b17      	ldr	r3, [pc, #92]	@ (8006e48 <MX_I2C1_Init+0x74>)
 8006dec:	2200      	movs	r2, #0
 8006dee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006df0:	4b15      	ldr	r3, [pc, #84]	@ (8006e48 <MX_I2C1_Init+0x74>)
 8006df2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006df6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006df8:	4b13      	ldr	r3, [pc, #76]	@ (8006e48 <MX_I2C1_Init+0x74>)
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006dfe:	4b12      	ldr	r3, [pc, #72]	@ (8006e48 <MX_I2C1_Init+0x74>)
 8006e00:	2200      	movs	r2, #0
 8006e02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006e04:	4b10      	ldr	r3, [pc, #64]	@ (8006e48 <MX_I2C1_Init+0x74>)
 8006e06:	2200      	movs	r2, #0
 8006e08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8006e48 <MX_I2C1_Init+0x74>)
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006e10:	480d      	ldr	r0, [pc, #52]	@ (8006e48 <MX_I2C1_Init+0x74>)
 8006e12:	f002 f8b3 	bl	8008f7c <HAL_I2C_Init>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d001      	beq.n	8006e20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006e1c:	f000 fcbd 	bl	800779a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006e20:	2100      	movs	r1, #0
 8006e22:	4809      	ldr	r0, [pc, #36]	@ (8006e48 <MX_I2C1_Init+0x74>)
 8006e24:	f003 f8ce 	bl	8009fc4 <HAL_I2CEx_ConfigAnalogFilter>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d001      	beq.n	8006e32 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8006e2e:	f000 fcb4 	bl	800779a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006e32:	2100      	movs	r1, #0
 8006e34:	4804      	ldr	r0, [pc, #16]	@ (8006e48 <MX_I2C1_Init+0x74>)
 8006e36:	f003 f901 	bl	800a03c <HAL_I2CEx_ConfigDigitalFilter>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d001      	beq.n	8006e44 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8006e40:	f000 fcab 	bl	800779a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006e44:	bf00      	nop
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	200017d4 	.word	0x200017d4
 8006e4c:	40005400 	.word	0x40005400
 8006e50:	000186a0 	.word	0x000186a0

08006e54 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006e58:	4b1b      	ldr	r3, [pc, #108]	@ (8006ec8 <MX_I2C2_Init+0x74>)
 8006e5a:	4a1c      	ldr	r2, [pc, #112]	@ (8006ecc <MX_I2C2_Init+0x78>)
 8006e5c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8006e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ec8 <MX_I2C2_Init+0x74>)
 8006e60:	4a1b      	ldr	r2, [pc, #108]	@ (8006ed0 <MX_I2C2_Init+0x7c>)
 8006e62:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006e64:	4b18      	ldr	r3, [pc, #96]	@ (8006ec8 <MX_I2C2_Init+0x74>)
 8006e66:	2200      	movs	r2, #0
 8006e68:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8006e6a:	4b17      	ldr	r3, [pc, #92]	@ (8006ec8 <MX_I2C2_Init+0x74>)
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006e70:	4b15      	ldr	r3, [pc, #84]	@ (8006ec8 <MX_I2C2_Init+0x74>)
 8006e72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006e76:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006e78:	4b13      	ldr	r3, [pc, #76]	@ (8006ec8 <MX_I2C2_Init+0x74>)
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8006e7e:	4b12      	ldr	r3, [pc, #72]	@ (8006ec8 <MX_I2C2_Init+0x74>)
 8006e80:	2200      	movs	r2, #0
 8006e82:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006e84:	4b10      	ldr	r3, [pc, #64]	@ (8006ec8 <MX_I2C2_Init+0x74>)
 8006e86:	2200      	movs	r2, #0
 8006e88:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8006ec8 <MX_I2C2_Init+0x74>)
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006e90:	480d      	ldr	r0, [pc, #52]	@ (8006ec8 <MX_I2C2_Init+0x74>)
 8006e92:	f002 f873 	bl	8008f7c <HAL_I2C_Init>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d001      	beq.n	8006ea0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8006e9c:	f000 fc7d 	bl	800779a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006ea0:	2100      	movs	r1, #0
 8006ea2:	4809      	ldr	r0, [pc, #36]	@ (8006ec8 <MX_I2C2_Init+0x74>)
 8006ea4:	f003 f88e 	bl	8009fc4 <HAL_I2CEx_ConfigAnalogFilter>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d001      	beq.n	8006eb2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8006eae:	f000 fc74 	bl	800779a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006eb2:	2100      	movs	r1, #0
 8006eb4:	4804      	ldr	r0, [pc, #16]	@ (8006ec8 <MX_I2C2_Init+0x74>)
 8006eb6:	f003 f8c1 	bl	800a03c <HAL_I2CEx_ConfigDigitalFilter>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d001      	beq.n	8006ec4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8006ec0:	f000 fc6b 	bl	800779a <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006ec4:	bf00      	nop
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	20001828 	.word	0x20001828
 8006ecc:	40005800 	.word	0x40005800
 8006ed0:	00061a80 	.word	0x00061a80

08006ed4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8006ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8006f48 <MX_I2C3_Init+0x74>)
 8006eda:	4a1c      	ldr	r2, [pc, #112]	@ (8006f4c <MX_I2C3_Init+0x78>)
 8006edc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8006ede:	4b1a      	ldr	r3, [pc, #104]	@ (8006f48 <MX_I2C3_Init+0x74>)
 8006ee0:	4a1b      	ldr	r2, [pc, #108]	@ (8006f50 <MX_I2C3_Init+0x7c>)
 8006ee2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006ee4:	4b18      	ldr	r3, [pc, #96]	@ (8006f48 <MX_I2C3_Init+0x74>)
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8006eea:	4b17      	ldr	r3, [pc, #92]	@ (8006f48 <MX_I2C3_Init+0x74>)
 8006eec:	2200      	movs	r2, #0
 8006eee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006ef0:	4b15      	ldr	r3, [pc, #84]	@ (8006f48 <MX_I2C3_Init+0x74>)
 8006ef2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006ef6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006ef8:	4b13      	ldr	r3, [pc, #76]	@ (8006f48 <MX_I2C3_Init+0x74>)
 8006efa:	2200      	movs	r2, #0
 8006efc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8006efe:	4b12      	ldr	r3, [pc, #72]	@ (8006f48 <MX_I2C3_Init+0x74>)
 8006f00:	2200      	movs	r2, #0
 8006f02:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006f04:	4b10      	ldr	r3, [pc, #64]	@ (8006f48 <MX_I2C3_Init+0x74>)
 8006f06:	2200      	movs	r2, #0
 8006f08:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8006f48 <MX_I2C3_Init+0x74>)
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8006f10:	480d      	ldr	r0, [pc, #52]	@ (8006f48 <MX_I2C3_Init+0x74>)
 8006f12:	f002 f833 	bl	8008f7c <HAL_I2C_Init>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d001      	beq.n	8006f20 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8006f1c:	f000 fc3d 	bl	800779a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006f20:	2100      	movs	r1, #0
 8006f22:	4809      	ldr	r0, [pc, #36]	@ (8006f48 <MX_I2C3_Init+0x74>)
 8006f24:	f003 f84e 	bl	8009fc4 <HAL_I2CEx_ConfigAnalogFilter>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d001      	beq.n	8006f32 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8006f2e:	f000 fc34 	bl	800779a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8006f32:	2100      	movs	r1, #0
 8006f34:	4804      	ldr	r0, [pc, #16]	@ (8006f48 <MX_I2C3_Init+0x74>)
 8006f36:	f003 f881 	bl	800a03c <HAL_I2CEx_ConfigDigitalFilter>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d001      	beq.n	8006f44 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8006f40:	f000 fc2b 	bl	800779a <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8006f44:	bf00      	nop
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	2000187c 	.word	0x2000187c
 8006f4c:	40005c00 	.word	0x40005c00
 8006f50:	00061a80 	.word	0x00061a80

08006f54 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8006f58:	4b17      	ldr	r3, [pc, #92]	@ (8006fb8 <MX_SPI1_Init+0x64>)
 8006f5a:	4a18      	ldr	r2, [pc, #96]	@ (8006fbc <MX_SPI1_Init+0x68>)
 8006f5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006f5e:	4b16      	ldr	r3, [pc, #88]	@ (8006fb8 <MX_SPI1_Init+0x64>)
 8006f60:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006f64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006f66:	4b14      	ldr	r3, [pc, #80]	@ (8006fb8 <MX_SPI1_Init+0x64>)
 8006f68:	2200      	movs	r2, #0
 8006f6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006f6c:	4b12      	ldr	r3, [pc, #72]	@ (8006fb8 <MX_SPI1_Init+0x64>)
 8006f6e:	2200      	movs	r2, #0
 8006f70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f72:	4b11      	ldr	r3, [pc, #68]	@ (8006fb8 <MX_SPI1_Init+0x64>)
 8006f74:	2200      	movs	r2, #0
 8006f76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006f78:	4b0f      	ldr	r3, [pc, #60]	@ (8006fb8 <MX_SPI1_Init+0x64>)
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8006fb8 <MX_SPI1_Init+0x64>)
 8006f80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8006f86:	4b0c      	ldr	r3, [pc, #48]	@ (8006fb8 <MX_SPI1_Init+0x64>)
 8006f88:	2228      	movs	r2, #40	@ 0x28
 8006f8a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8006fb8 <MX_SPI1_Init+0x64>)
 8006f8e:	2200      	movs	r2, #0
 8006f90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006f92:	4b09      	ldr	r3, [pc, #36]	@ (8006fb8 <MX_SPI1_Init+0x64>)
 8006f94:	2200      	movs	r2, #0
 8006f96:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f98:	4b07      	ldr	r3, [pc, #28]	@ (8006fb8 <MX_SPI1_Init+0x64>)
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8006f9e:	4b06      	ldr	r3, [pc, #24]	@ (8006fb8 <MX_SPI1_Init+0x64>)
 8006fa0:	220a      	movs	r2, #10
 8006fa2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006fa4:	4804      	ldr	r0, [pc, #16]	@ (8006fb8 <MX_SPI1_Init+0x64>)
 8006fa6:	f003 fce1 	bl	800a96c <HAL_SPI_Init>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d001      	beq.n	8006fb4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8006fb0:	f000 fbf3 	bl	800779a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006fb4:	bf00      	nop
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	200018d0 	.word	0x200018d0
 8006fbc:	40013000 	.word	0x40013000

08006fc0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006fc4:	4b17      	ldr	r3, [pc, #92]	@ (8007024 <MX_SPI2_Init+0x64>)
 8006fc6:	4a18      	ldr	r2, [pc, #96]	@ (8007028 <MX_SPI2_Init+0x68>)
 8006fc8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006fca:	4b16      	ldr	r3, [pc, #88]	@ (8007024 <MX_SPI2_Init+0x64>)
 8006fcc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006fd0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006fd2:	4b14      	ldr	r3, [pc, #80]	@ (8007024 <MX_SPI2_Init+0x64>)
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006fd8:	4b12      	ldr	r3, [pc, #72]	@ (8007024 <MX_SPI2_Init+0x64>)
 8006fda:	2200      	movs	r2, #0
 8006fdc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006fde:	4b11      	ldr	r3, [pc, #68]	@ (8007024 <MX_SPI2_Init+0x64>)
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8007024 <MX_SPI2_Init+0x64>)
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006fea:	4b0e      	ldr	r3, [pc, #56]	@ (8007024 <MX_SPI2_Init+0x64>)
 8006fec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ff0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8006ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8007024 <MX_SPI2_Init+0x64>)
 8006ff4:	2218      	movs	r2, #24
 8006ff6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8007024 <MX_SPI2_Init+0x64>)
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006ffe:	4b09      	ldr	r3, [pc, #36]	@ (8007024 <MX_SPI2_Init+0x64>)
 8007000:	2200      	movs	r2, #0
 8007002:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007004:	4b07      	ldr	r3, [pc, #28]	@ (8007024 <MX_SPI2_Init+0x64>)
 8007006:	2200      	movs	r2, #0
 8007008:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800700a:	4b06      	ldr	r3, [pc, #24]	@ (8007024 <MX_SPI2_Init+0x64>)
 800700c:	220a      	movs	r2, #10
 800700e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007010:	4804      	ldr	r0, [pc, #16]	@ (8007024 <MX_SPI2_Init+0x64>)
 8007012:	f003 fcab 	bl	800a96c <HAL_SPI_Init>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d001      	beq.n	8007020 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800701c:	f000 fbbd 	bl	800779a <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8007020:	bf00      	nop
 8007022:	bd80      	pop	{r7, pc}
 8007024:	20001928 	.word	0x20001928
 8007028:	40003800 	.word	0x40003800

0800702c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8007030:	4b17      	ldr	r3, [pc, #92]	@ (8007090 <MX_SPI3_Init+0x64>)
 8007032:	4a18      	ldr	r2, [pc, #96]	@ (8007094 <MX_SPI3_Init+0x68>)
 8007034:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007036:	4b16      	ldr	r3, [pc, #88]	@ (8007090 <MX_SPI3_Init+0x64>)
 8007038:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800703c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800703e:	4b14      	ldr	r3, [pc, #80]	@ (8007090 <MX_SPI3_Init+0x64>)
 8007040:	2200      	movs	r2, #0
 8007042:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8007044:	4b12      	ldr	r3, [pc, #72]	@ (8007090 <MX_SPI3_Init+0x64>)
 8007046:	2200      	movs	r2, #0
 8007048:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800704a:	4b11      	ldr	r3, [pc, #68]	@ (8007090 <MX_SPI3_Init+0x64>)
 800704c:	2200      	movs	r2, #0
 800704e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007050:	4b0f      	ldr	r3, [pc, #60]	@ (8007090 <MX_SPI3_Init+0x64>)
 8007052:	2200      	movs	r2, #0
 8007054:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007056:	4b0e      	ldr	r3, [pc, #56]	@ (8007090 <MX_SPI3_Init+0x64>)
 8007058:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800705c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800705e:	4b0c      	ldr	r3, [pc, #48]	@ (8007090 <MX_SPI3_Init+0x64>)
 8007060:	2220      	movs	r2, #32
 8007062:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007064:	4b0a      	ldr	r3, [pc, #40]	@ (8007090 <MX_SPI3_Init+0x64>)
 8007066:	2200      	movs	r2, #0
 8007068:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800706a:	4b09      	ldr	r3, [pc, #36]	@ (8007090 <MX_SPI3_Init+0x64>)
 800706c:	2200      	movs	r2, #0
 800706e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007070:	4b07      	ldr	r3, [pc, #28]	@ (8007090 <MX_SPI3_Init+0x64>)
 8007072:	2200      	movs	r2, #0
 8007074:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8007076:	4b06      	ldr	r3, [pc, #24]	@ (8007090 <MX_SPI3_Init+0x64>)
 8007078:	220a      	movs	r2, #10
 800707a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800707c:	4804      	ldr	r0, [pc, #16]	@ (8007090 <MX_SPI3_Init+0x64>)
 800707e:	f003 fc75 	bl	800a96c <HAL_SPI_Init>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d001      	beq.n	800708c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8007088:	f000 fb87 	bl	800779a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800708c:	bf00      	nop
 800708e:	bd80      	pop	{r7, pc}
 8007090:	20001980 	.word	0x20001980
 8007094:	40003c00 	.word	0x40003c00

08007098 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800709c:	4b17      	ldr	r3, [pc, #92]	@ (80070fc <MX_SPI4_Init+0x64>)
 800709e:	4a18      	ldr	r2, [pc, #96]	@ (8007100 <MX_SPI4_Init+0x68>)
 80070a0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80070a2:	4b16      	ldr	r3, [pc, #88]	@ (80070fc <MX_SPI4_Init+0x64>)
 80070a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80070a8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80070aa:	4b14      	ldr	r3, [pc, #80]	@ (80070fc <MX_SPI4_Init+0x64>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80070b0:	4b12      	ldr	r3, [pc, #72]	@ (80070fc <MX_SPI4_Init+0x64>)
 80070b2:	2200      	movs	r2, #0
 80070b4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80070b6:	4b11      	ldr	r3, [pc, #68]	@ (80070fc <MX_SPI4_Init+0x64>)
 80070b8:	2200      	movs	r2, #0
 80070ba:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80070bc:	4b0f      	ldr	r3, [pc, #60]	@ (80070fc <MX_SPI4_Init+0x64>)
 80070be:	2200      	movs	r2, #0
 80070c0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80070c2:	4b0e      	ldr	r3, [pc, #56]	@ (80070fc <MX_SPI4_Init+0x64>)
 80070c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070c8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80070ca:	4b0c      	ldr	r3, [pc, #48]	@ (80070fc <MX_SPI4_Init+0x64>)
 80070cc:	2230      	movs	r2, #48	@ 0x30
 80070ce:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80070d0:	4b0a      	ldr	r3, [pc, #40]	@ (80070fc <MX_SPI4_Init+0x64>)
 80070d2:	2200      	movs	r2, #0
 80070d4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80070d6:	4b09      	ldr	r3, [pc, #36]	@ (80070fc <MX_SPI4_Init+0x64>)
 80070d8:	2200      	movs	r2, #0
 80070da:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070dc:	4b07      	ldr	r3, [pc, #28]	@ (80070fc <MX_SPI4_Init+0x64>)
 80070de:	2200      	movs	r2, #0
 80070e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 80070e2:	4b06      	ldr	r3, [pc, #24]	@ (80070fc <MX_SPI4_Init+0x64>)
 80070e4:	220a      	movs	r2, #10
 80070e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80070e8:	4804      	ldr	r0, [pc, #16]	@ (80070fc <MX_SPI4_Init+0x64>)
 80070ea:	f003 fc3f 	bl	800a96c <HAL_SPI_Init>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d001      	beq.n	80070f8 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 80070f4:	f000 fb51 	bl	800779a <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80070f8:	bf00      	nop
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	200019d8 	.word	0x200019d8
 8007100:	40013400 	.word	0x40013400

08007104 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007108:	4b11      	ldr	r3, [pc, #68]	@ (8007150 <MX_USART1_UART_Init+0x4c>)
 800710a:	4a12      	ldr	r2, [pc, #72]	@ (8007154 <MX_USART1_UART_Init+0x50>)
 800710c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800710e:	4b10      	ldr	r3, [pc, #64]	@ (8007150 <MX_USART1_UART_Init+0x4c>)
 8007110:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007114:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007116:	4b0e      	ldr	r3, [pc, #56]	@ (8007150 <MX_USART1_UART_Init+0x4c>)
 8007118:	2200      	movs	r2, #0
 800711a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800711c:	4b0c      	ldr	r3, [pc, #48]	@ (8007150 <MX_USART1_UART_Init+0x4c>)
 800711e:	2200      	movs	r2, #0
 8007120:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007122:	4b0b      	ldr	r3, [pc, #44]	@ (8007150 <MX_USART1_UART_Init+0x4c>)
 8007124:	2200      	movs	r2, #0
 8007126:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007128:	4b09      	ldr	r3, [pc, #36]	@ (8007150 <MX_USART1_UART_Init+0x4c>)
 800712a:	220c      	movs	r2, #12
 800712c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800712e:	4b08      	ldr	r3, [pc, #32]	@ (8007150 <MX_USART1_UART_Init+0x4c>)
 8007130:	2200      	movs	r2, #0
 8007132:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007134:	4b06      	ldr	r3, [pc, #24]	@ (8007150 <MX_USART1_UART_Init+0x4c>)
 8007136:	2200      	movs	r2, #0
 8007138:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800713a:	4805      	ldr	r0, [pc, #20]	@ (8007150 <MX_USART1_UART_Init+0x4c>)
 800713c:	f004 f9e8 	bl	800b510 <HAL_UART_Init>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d001      	beq.n	800714a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007146:	f000 fb28 	bl	800779a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800714a:	bf00      	nop
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	20001a30 	.word	0x20001a30
 8007154:	40011000 	.word	0x40011000

08007158 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800715c:	4b11      	ldr	r3, [pc, #68]	@ (80071a4 <MX_USART2_UART_Init+0x4c>)
 800715e:	4a12      	ldr	r2, [pc, #72]	@ (80071a8 <MX_USART2_UART_Init+0x50>)
 8007160:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8007162:	4b10      	ldr	r3, [pc, #64]	@ (80071a4 <MX_USART2_UART_Init+0x4c>)
 8007164:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007168:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800716a:	4b0e      	ldr	r3, [pc, #56]	@ (80071a4 <MX_USART2_UART_Init+0x4c>)
 800716c:	2200      	movs	r2, #0
 800716e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007170:	4b0c      	ldr	r3, [pc, #48]	@ (80071a4 <MX_USART2_UART_Init+0x4c>)
 8007172:	2200      	movs	r2, #0
 8007174:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007176:	4b0b      	ldr	r3, [pc, #44]	@ (80071a4 <MX_USART2_UART_Init+0x4c>)
 8007178:	2200      	movs	r2, #0
 800717a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800717c:	4b09      	ldr	r3, [pc, #36]	@ (80071a4 <MX_USART2_UART_Init+0x4c>)
 800717e:	220c      	movs	r2, #12
 8007180:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007182:	4b08      	ldr	r3, [pc, #32]	@ (80071a4 <MX_USART2_UART_Init+0x4c>)
 8007184:	2200      	movs	r2, #0
 8007186:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007188:	4b06      	ldr	r3, [pc, #24]	@ (80071a4 <MX_USART2_UART_Init+0x4c>)
 800718a:	2200      	movs	r2, #0
 800718c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800718e:	4805      	ldr	r0, [pc, #20]	@ (80071a4 <MX_USART2_UART_Init+0x4c>)
 8007190:	f004 f9be 	bl	800b510 <HAL_UART_Init>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d001      	beq.n	800719e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800719a:	f000 fafe 	bl	800779a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800719e:	bf00      	nop
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	20001a78 	.word	0x20001a78
 80071a8:	40004400 	.word	0x40004400

080071ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80071b0:	4b11      	ldr	r3, [pc, #68]	@ (80071f8 <MX_USART3_UART_Init+0x4c>)
 80071b2:	4a12      	ldr	r2, [pc, #72]	@ (80071fc <MX_USART3_UART_Init+0x50>)
 80071b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80071b6:	4b10      	ldr	r3, [pc, #64]	@ (80071f8 <MX_USART3_UART_Init+0x4c>)
 80071b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80071bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80071be:	4b0e      	ldr	r3, [pc, #56]	@ (80071f8 <MX_USART3_UART_Init+0x4c>)
 80071c0:	2200      	movs	r2, #0
 80071c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80071c4:	4b0c      	ldr	r3, [pc, #48]	@ (80071f8 <MX_USART3_UART_Init+0x4c>)
 80071c6:	2200      	movs	r2, #0
 80071c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80071ca:	4b0b      	ldr	r3, [pc, #44]	@ (80071f8 <MX_USART3_UART_Init+0x4c>)
 80071cc:	2200      	movs	r2, #0
 80071ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80071d0:	4b09      	ldr	r3, [pc, #36]	@ (80071f8 <MX_USART3_UART_Init+0x4c>)
 80071d2:	220c      	movs	r2, #12
 80071d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80071d6:	4b08      	ldr	r3, [pc, #32]	@ (80071f8 <MX_USART3_UART_Init+0x4c>)
 80071d8:	2200      	movs	r2, #0
 80071da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80071dc:	4b06      	ldr	r3, [pc, #24]	@ (80071f8 <MX_USART3_UART_Init+0x4c>)
 80071de:	2200      	movs	r2, #0
 80071e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80071e2:	4805      	ldr	r0, [pc, #20]	@ (80071f8 <MX_USART3_UART_Init+0x4c>)
 80071e4:	f004 f994 	bl	800b510 <HAL_UART_Init>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d001      	beq.n	80071f2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80071ee:	f000 fad4 	bl	800779a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80071f2:	bf00      	nop
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	20001ac0 	.word	0x20001ac0
 80071fc:	40004800 	.word	0x40004800

08007200 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8007204:	4b11      	ldr	r3, [pc, #68]	@ (800724c <MX_USART6_UART_Init+0x4c>)
 8007206:	4a12      	ldr	r2, [pc, #72]	@ (8007250 <MX_USART6_UART_Init+0x50>)
 8007208:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800720a:	4b10      	ldr	r3, [pc, #64]	@ (800724c <MX_USART6_UART_Init+0x4c>)
 800720c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007210:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8007212:	4b0e      	ldr	r3, [pc, #56]	@ (800724c <MX_USART6_UART_Init+0x4c>)
 8007214:	2200      	movs	r2, #0
 8007216:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8007218:	4b0c      	ldr	r3, [pc, #48]	@ (800724c <MX_USART6_UART_Init+0x4c>)
 800721a:	2200      	movs	r2, #0
 800721c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800721e:	4b0b      	ldr	r3, [pc, #44]	@ (800724c <MX_USART6_UART_Init+0x4c>)
 8007220:	2200      	movs	r2, #0
 8007222:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8007224:	4b09      	ldr	r3, [pc, #36]	@ (800724c <MX_USART6_UART_Init+0x4c>)
 8007226:	220c      	movs	r2, #12
 8007228:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800722a:	4b08      	ldr	r3, [pc, #32]	@ (800724c <MX_USART6_UART_Init+0x4c>)
 800722c:	2200      	movs	r2, #0
 800722e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8007230:	4b06      	ldr	r3, [pc, #24]	@ (800724c <MX_USART6_UART_Init+0x4c>)
 8007232:	2200      	movs	r2, #0
 8007234:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8007236:	4805      	ldr	r0, [pc, #20]	@ (800724c <MX_USART6_UART_Init+0x4c>)
 8007238:	f004 f96a 	bl	800b510 <HAL_UART_Init>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d001      	beq.n	8007246 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8007242:	f000 faaa 	bl	800779a <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8007246:	bf00      	nop
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	20001b08 	.word	0x20001b08
 8007250:	40011400 	.word	0x40011400

08007254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b08e      	sub	sp, #56	@ 0x38
 8007258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800725a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800725e:	2200      	movs	r2, #0
 8007260:	601a      	str	r2, [r3, #0]
 8007262:	605a      	str	r2, [r3, #4]
 8007264:	609a      	str	r2, [r3, #8]
 8007266:	60da      	str	r2, [r3, #12]
 8007268:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800726a:	2300      	movs	r3, #0
 800726c:	623b      	str	r3, [r7, #32]
 800726e:	4bb6      	ldr	r3, [pc, #728]	@ (8007548 <MX_GPIO_Init+0x2f4>)
 8007270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007272:	4ab5      	ldr	r2, [pc, #724]	@ (8007548 <MX_GPIO_Init+0x2f4>)
 8007274:	f043 0310 	orr.w	r3, r3, #16
 8007278:	6313      	str	r3, [r2, #48]	@ 0x30
 800727a:	4bb3      	ldr	r3, [pc, #716]	@ (8007548 <MX_GPIO_Init+0x2f4>)
 800727c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800727e:	f003 0310 	and.w	r3, r3, #16
 8007282:	623b      	str	r3, [r7, #32]
 8007284:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8007286:	2300      	movs	r3, #0
 8007288:	61fb      	str	r3, [r7, #28]
 800728a:	4baf      	ldr	r3, [pc, #700]	@ (8007548 <MX_GPIO_Init+0x2f4>)
 800728c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800728e:	4aae      	ldr	r2, [pc, #696]	@ (8007548 <MX_GPIO_Init+0x2f4>)
 8007290:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007294:	6313      	str	r3, [r2, #48]	@ 0x30
 8007296:	4bac      	ldr	r3, [pc, #688]	@ (8007548 <MX_GPIO_Init+0x2f4>)
 8007298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800729a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800729e:	61fb      	str	r3, [r7, #28]
 80072a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80072a2:	2300      	movs	r3, #0
 80072a4:	61bb      	str	r3, [r7, #24]
 80072a6:	4ba8      	ldr	r3, [pc, #672]	@ (8007548 <MX_GPIO_Init+0x2f4>)
 80072a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072aa:	4aa7      	ldr	r2, [pc, #668]	@ (8007548 <MX_GPIO_Init+0x2f4>)
 80072ac:	f043 0304 	orr.w	r3, r3, #4
 80072b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80072b2:	4ba5      	ldr	r3, [pc, #660]	@ (8007548 <MX_GPIO_Init+0x2f4>)
 80072b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072b6:	f003 0304 	and.w	r3, r3, #4
 80072ba:	61bb      	str	r3, [r7, #24]
 80072bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80072be:	2300      	movs	r3, #0
 80072c0:	617b      	str	r3, [r7, #20]
 80072c2:	4ba1      	ldr	r3, [pc, #644]	@ (8007548 <MX_GPIO_Init+0x2f4>)
 80072c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072c6:	4aa0      	ldr	r2, [pc, #640]	@ (8007548 <MX_GPIO_Init+0x2f4>)
 80072c8:	f043 0320 	orr.w	r3, r3, #32
 80072cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80072ce:	4b9e      	ldr	r3, [pc, #632]	@ (8007548 <MX_GPIO_Init+0x2f4>)
 80072d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072d2:	f003 0320 	and.w	r3, r3, #32
 80072d6:	617b      	str	r3, [r7, #20]
 80072d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80072da:	2300      	movs	r3, #0
 80072dc:	613b      	str	r3, [r7, #16]
 80072de:	4b9a      	ldr	r3, [pc, #616]	@ (8007548 <MX_GPIO_Init+0x2f4>)
 80072e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072e2:	4a99      	ldr	r2, [pc, #612]	@ (8007548 <MX_GPIO_Init+0x2f4>)
 80072e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80072ea:	4b97      	ldr	r3, [pc, #604]	@ (8007548 <MX_GPIO_Init+0x2f4>)
 80072ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072f2:	613b      	str	r3, [r7, #16]
 80072f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80072f6:	2300      	movs	r3, #0
 80072f8:	60fb      	str	r3, [r7, #12]
 80072fa:	4b93      	ldr	r3, [pc, #588]	@ (8007548 <MX_GPIO_Init+0x2f4>)
 80072fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072fe:	4a92      	ldr	r2, [pc, #584]	@ (8007548 <MX_GPIO_Init+0x2f4>)
 8007300:	f043 0301 	orr.w	r3, r3, #1
 8007304:	6313      	str	r3, [r2, #48]	@ 0x30
 8007306:	4b90      	ldr	r3, [pc, #576]	@ (8007548 <MX_GPIO_Init+0x2f4>)
 8007308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800730a:	f003 0301 	and.w	r3, r3, #1
 800730e:	60fb      	str	r3, [r7, #12]
 8007310:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007312:	2300      	movs	r3, #0
 8007314:	60bb      	str	r3, [r7, #8]
 8007316:	4b8c      	ldr	r3, [pc, #560]	@ (8007548 <MX_GPIO_Init+0x2f4>)
 8007318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800731a:	4a8b      	ldr	r2, [pc, #556]	@ (8007548 <MX_GPIO_Init+0x2f4>)
 800731c:	f043 0302 	orr.w	r3, r3, #2
 8007320:	6313      	str	r3, [r2, #48]	@ 0x30
 8007322:	4b89      	ldr	r3, [pc, #548]	@ (8007548 <MX_GPIO_Init+0x2f4>)
 8007324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007326:	f003 0302 	and.w	r3, r3, #2
 800732a:	60bb      	str	r3, [r7, #8]
 800732c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800732e:	2300      	movs	r3, #0
 8007330:	607b      	str	r3, [r7, #4]
 8007332:	4b85      	ldr	r3, [pc, #532]	@ (8007548 <MX_GPIO_Init+0x2f4>)
 8007334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007336:	4a84      	ldr	r2, [pc, #528]	@ (8007548 <MX_GPIO_Init+0x2f4>)
 8007338:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800733c:	6313      	str	r3, [r2, #48]	@ 0x30
 800733e:	4b82      	ldr	r3, [pc, #520]	@ (8007548 <MX_GPIO_Init+0x2f4>)
 8007340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007346:	607b      	str	r3, [r7, #4]
 8007348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800734a:	2300      	movs	r3, #0
 800734c:	603b      	str	r3, [r7, #0]
 800734e:	4b7e      	ldr	r3, [pc, #504]	@ (8007548 <MX_GPIO_Init+0x2f4>)
 8007350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007352:	4a7d      	ldr	r2, [pc, #500]	@ (8007548 <MX_GPIO_Init+0x2f4>)
 8007354:	f043 0308 	orr.w	r3, r3, #8
 8007358:	6313      	str	r3, [r2, #48]	@ 0x30
 800735a:	4b7b      	ldr	r3, [pc, #492]	@ (8007548 <MX_GPIO_Init+0x2f4>)
 800735c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800735e:	f003 0308 	and.w	r3, r3, #8
 8007362:	603b      	str	r3, [r7, #0]
 8007364:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CELL12_CS_01_Pin|CELL12_CS_02_Pin|CELL12_CS_03_Pin|CELL12_CS_04_Pin
 8007366:	2201      	movs	r2, #1
 8007368:	f240 71fc 	movw	r1, #2044	@ 0x7fc
 800736c:	4877      	ldr	r0, [pc, #476]	@ (800754c <MX_GPIO_Init+0x2f8>)
 800736e:	f001 fdb9 	bl	8008ee4 <HAL_GPIO_WritePin>
                          |CELL12_CS_05_Pin|CELL11_CS_10_Pin|CELL11_CS_11_Pin|CELL11_CS_12_Pin
                          |CSU_11_CELLS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, CELL12_CS_06_Pin|CELL12_CS_08_Pin|CELL12_CS_09_Pin|CELL12_CS_10_Pin, GPIO_PIN_SET);
 8007372:	2201      	movs	r2, #1
 8007374:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8007378:	4875      	ldr	r0, [pc, #468]	@ (8007550 <MX_GPIO_Init+0x2fc>)
 800737a:	f001 fdb3 	bl	8008ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CELL12_CS_07_Pin|CELL12_TEMP_02_LED_Pin|CELL12_TEMP_01_CS_Pin|SPI3_CS_03_Pin
 800737e:	2201      	movs	r2, #1
 8007380:	f242 0133 	movw	r1, #8243	@ 0x2033
 8007384:	4873      	ldr	r0, [pc, #460]	@ (8007554 <MX_GPIO_Init+0x300>)
 8007386:	f001 fdad 	bl	8008ee4 <HAL_GPIO_WritePin>
                          |SPI3_CS_02_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CELL12_CS_11_Pin|CELL12_CS_12_Pin|CSU_12_CELLS_Pin|CELL12_TEMP_03_CS_Pin
 800738a:	2201      	movs	r2, #1
 800738c:	f64f 5147 	movw	r1, #64839	@ 0xfd47
 8007390:	4871      	ldr	r0, [pc, #452]	@ (8007558 <MX_GPIO_Init+0x304>)
 8007392:	f001 fda7 	bl	8008ee4 <HAL_GPIO_WritePin>
                          |CELL12_TEMP_03_LED_Pin|CELL12_TEMP_02_CS_Pin|CELL11_CS_03_Pin|CELL11_CS_04_Pin
                          |CELL11_CS_05_Pin|CELL11_CS_06_Pin|CELL11_CS_07_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_02_Pin|GPIO_03_Pin|GPIO_04_Pin|GPIO_05_Pin
 8007396:	2200      	movs	r2, #0
 8007398:	f44f 712e 	mov.w	r1, #696	@ 0x2b8
 800739c:	486e      	ldr	r0, [pc, #440]	@ (8007558 <MX_GPIO_Init+0x304>)
 800739e:	f001 fda1 	bl	8008ee4 <HAL_GPIO_WritePin>
                          |GPIO_06_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CELL12_TEMP_01_LED_GPIO_Port, CELL12_TEMP_01_LED_Pin, GPIO_PIN_SET);
 80073a2:	2201      	movs	r2, #1
 80073a4:	2101      	movs	r1, #1
 80073a6:	486d      	ldr	r0, [pc, #436]	@ (800755c <MX_GPIO_Init+0x308>)
 80073a8:	f001 fd9c 	bl	8008ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USART2_ENABLE_GPIO_Port, USART2_ENABLE_Pin, GPIO_PIN_RESET);
 80073ac:	2200      	movs	r2, #0
 80073ae:	2102      	movs	r1, #2
 80073b0:	486a      	ldr	r0, [pc, #424]	@ (800755c <MX_GPIO_Init+0x308>)
 80073b2:	f001 fd97 	bl	8008ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_14_Pin|GPIO_07_Pin|LED_01_Pin|LED_02_Pin, GPIO_PIN_RESET);
 80073b6:	2200      	movs	r2, #0
 80073b8:	f24c 010c 	movw	r1, #49164	@ 0xc00c
 80073bc:	4868      	ldr	r0, [pc, #416]	@ (8007560 <MX_GPIO_Init+0x30c>)
 80073be:	f001 fd91 	bl	8008ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CELL11_CS_01_Pin|CELL11_CS_02_Pin|CELL11_TEMP_03_CS_Pin|CS_Pin, GPIO_PIN_SET);
 80073c2:	2201      	movs	r2, #1
 80073c4:	f648 0103 	movw	r1, #34819	@ 0x8803
 80073c8:	4866      	ldr	r0, [pc, #408]	@ (8007564 <MX_GPIO_Init+0x310>)
 80073ca:	f001 fd8b 	bl	8008ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, CELL11_CS_08_Pin|CELL11_CS_09_Pin, GPIO_PIN_SET);
 80073ce:	2201      	movs	r2, #1
 80073d0:	2103      	movs	r1, #3
 80073d2:	4865      	ldr	r0, [pc, #404]	@ (8007568 <MX_GPIO_Init+0x314>)
 80073d4:	f001 fd86 	bl	8008ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_09_Pin|GPIO_10_Pin|LED_06_Pin|LED_05_Pin, GPIO_PIN_RESET);
 80073d8:	2200      	movs	r2, #0
 80073da:	f648 0103 	movw	r1, #34819	@ 0x8803
 80073de:	485b      	ldr	r0, [pc, #364]	@ (800754c <MX_GPIO_Init+0x2f8>)
 80073e0:	f001 fd80 	bl	8008ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_11_Pin|GPIO_12_Pin|LED_03_Pin|LED_07_Pin
 80073e4:	2200      	movs	r2, #0
 80073e6:	f244 4138 	movw	r1, #17464	@ 0x4438
 80073ea:	485e      	ldr	r0, [pc, #376]	@ (8007564 <MX_GPIO_Init+0x310>)
 80073ec:	f001 fd7a 	bl	8008ee4 <HAL_GPIO_WritePin>
                          |USART1_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_03_LED_Pin|CELL11_TEMP_02_CS_Pin|CELL11_TEMP_02_LED_Pin|CELL11_TEMP_01_CS_Pin
 80073f0:	2201      	movs	r2, #1
 80073f2:	f44f 51f2 	mov.w	r1, #7744	@ 0x1e40
 80073f6:	485a      	ldr	r0, [pc, #360]	@ (8007560 <MX_GPIO_Init+0x30c>)
 80073f8:	f001 fd74 	bl	8008ee4 <HAL_GPIO_WritePin>
                          |CELL11_TEMP_01_LED_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 80073fc:	2201      	movs	r2, #1
 80073fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007402:	485a      	ldr	r0, [pc, #360]	@ (800756c <MX_GPIO_Init+0x318>)
 8007404:	f001 fd6e 	bl	8008ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USART3_ENABLE_Pin|DISPLAY_CS_Pin|SPI5_CS_02_Pin, GPIO_PIN_RESET);
 8007408:	2200      	movs	r2, #0
 800740a:	f640 010c 	movw	r1, #2060	@ 0x80c
 800740e:	4857      	ldr	r0, [pc, #348]	@ (800756c <MX_GPIO_Init+0x318>)
 8007410:	f001 fd68 	bl	8008ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, DISPLAY_IO_1_Pin|DISPLAY_IO_2_Pin|BACKLIGHT_1_Pin|BACKLIGHT_2_Pin
 8007414:	2200      	movs	r2, #0
 8007416:	f24e 013c 	movw	r1, #57404	@ 0xe03c
 800741a:	4853      	ldr	r0, [pc, #332]	@ (8007568 <MX_GPIO_Init+0x314>)
 800741c:	f001 fd62 	bl	8008ee4 <HAL_GPIO_WritePin>
                          |LED_09_Pin|LED_04_Pin|LED_08_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USART6_ENABLE_GPIO_Port, USART6_ENABLE_Pin, GPIO_PIN_RESET);
 8007420:	2200      	movs	r2, #0
 8007422:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007426:	484b      	ldr	r0, [pc, #300]	@ (8007554 <MX_GPIO_Init+0x300>)
 8007428:	f001 fd5c 	bl	8008ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED_DC_Y_Pin|LED_DC_G_Pin|LED_PC_Y_Pin|LED_PC_G_Pin, GPIO_PIN_RESET);
 800742c:	2200      	movs	r2, #0
 800742e:	21f0      	movs	r1, #240	@ 0xf0
 8007430:	4847      	ldr	r0, [pc, #284]	@ (8007550 <MX_GPIO_Init+0x2fc>)
 8007432:	f001 fd57 	bl	8008ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CELL12_CS_01_Pin CELL12_CS_02_Pin CELL12_CS_03_Pin CELL12_CS_04_Pin
                           CELL12_CS_05_Pin CELL11_CS_10_Pin CELL11_CS_11_Pin CELL11_CS_12_Pin
                           CSU_11_CELLS_Pin GPIO_09_Pin GPIO_10_Pin LED_06_Pin
                           LED_05_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_01_Pin|CELL12_CS_02_Pin|CELL12_CS_03_Pin|CELL12_CS_04_Pin
 8007436:	f648 73ff 	movw	r3, #36863	@ 0x8fff
 800743a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |CELL12_CS_05_Pin|CELL11_CS_10_Pin|CELL11_CS_11_Pin|CELL11_CS_12_Pin
                          |CSU_11_CELLS_Pin|GPIO_09_Pin|GPIO_10_Pin|LED_06_Pin
                          |LED_05_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800743c:	2301      	movs	r3, #1
 800743e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007440:	2300      	movs	r3, #0
 8007442:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007444:	2300      	movs	r3, #0
 8007446:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007448:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800744c:	4619      	mov	r1, r3
 800744e:	483f      	ldr	r0, [pc, #252]	@ (800754c <MX_GPIO_Init+0x2f8>)
 8007450:	f001 fb9c 	bl	8008b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_CS_06_Pin CELL12_CS_08_Pin CELL12_CS_09_Pin CELL12_CS_10_Pin
                           LED_DC_Y_Pin LED_DC_G_Pin LED_PC_Y_Pin LED_PC_G_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_06_Pin|CELL12_CS_08_Pin|CELL12_CS_09_Pin|CELL12_CS_10_Pin
 8007454:	f44f 637f 	mov.w	r3, #4080	@ 0xff0
 8007458:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LED_DC_Y_Pin|LED_DC_G_Pin|LED_PC_Y_Pin|LED_PC_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800745a:	2301      	movs	r3, #1
 800745c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800745e:	2300      	movs	r3, #0
 8007460:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007462:	2300      	movs	r3, #0
 8007464:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8007466:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800746a:	4619      	mov	r1, r3
 800746c:	4838      	ldr	r0, [pc, #224]	@ (8007550 <MX_GPIO_Init+0x2fc>)
 800746e:	f001 fb8d 	bl	8008b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_CS_07_Pin SPI3_CS_03_Pin SPI3_CS_02_Pin USART6_ENABLE_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_07_Pin|SPI3_CS_03_Pin|SPI3_CS_02_Pin|USART6_ENABLE_Pin;
 8007472:	f242 1330 	movw	r3, #8496	@ 0x2130
 8007476:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007478:	2301      	movs	r3, #1
 800747a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800747c:	2300      	movs	r3, #0
 800747e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007480:	2300      	movs	r3, #0
 8007482:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007484:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007488:	4619      	mov	r1, r3
 800748a:	4832      	ldr	r0, [pc, #200]	@ (8007554 <MX_GPIO_Init+0x300>)
 800748c:	f001 fb7e 	bl	8008b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_CS_11_Pin CELL12_CS_12_Pin GPIO_02_Pin GPIO_03_Pin
                           GPIO_04_Pin GPIO_05_Pin GPIO_06_Pin CELL11_CS_03_Pin
                           CELL11_CS_04_Pin CELL11_CS_05_Pin CELL11_CS_06_Pin CELL11_CS_07_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_11_Pin|CELL12_CS_12_Pin|GPIO_02_Pin|GPIO_03_Pin
 8007490:	f64f 23bb 	movw	r3, #64187	@ 0xfabb
 8007494:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_04_Pin|GPIO_05_Pin|GPIO_06_Pin|CELL11_CS_03_Pin
                          |CELL11_CS_04_Pin|CELL11_CS_05_Pin|CELL11_CS_06_Pin|CELL11_CS_07_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007496:	2301      	movs	r3, #1
 8007498:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800749a:	2300      	movs	r3, #0
 800749c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800749e:	2300      	movs	r3, #0
 80074a0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80074a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80074a6:	4619      	mov	r1, r3
 80074a8:	482b      	ldr	r0, [pc, #172]	@ (8007558 <MX_GPIO_Init+0x304>)
 80074aa:	f001 fb6f 	bl	8008b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : CSU_12_CELLS_Pin */
  GPIO_InitStruct.Pin = CSU_12_CELLS_Pin;
 80074ae:	2304      	movs	r3, #4
 80074b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074b2:	2301      	movs	r3, #1
 80074b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074b6:	2300      	movs	r3, #0
 80074b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80074ba:	2302      	movs	r3, #2
 80074bc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CSU_12_CELLS_GPIO_Port, &GPIO_InitStruct);
 80074be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80074c2:	4619      	mov	r1, r3
 80074c4:	4824      	ldr	r0, [pc, #144]	@ (8007558 <MX_GPIO_Init+0x304>)
 80074c6:	f001 fb61 	bl	8008b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_TEMP_03_CS_Pin CELL12_TEMP_02_CS_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_03_CS_Pin|CELL12_TEMP_02_CS_Pin;
 80074ca:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 80074ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074d0:	2301      	movs	r3, #1
 80074d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80074d4:	2301      	movs	r3, #1
 80074d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074d8:	2303      	movs	r3, #3
 80074da:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80074dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80074e0:	4619      	mov	r1, r3
 80074e2:	481d      	ldr	r0, [pc, #116]	@ (8007558 <MX_GPIO_Init+0x304>)
 80074e4:	f001 fb52 	bl	8008b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_03_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_03_LED_Pin;
 80074e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80074ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074ee:	2301      	movs	r3, #1
 80074f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80074f2:	2302      	movs	r3, #2
 80074f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074f6:	2303      	movs	r3, #3
 80074f8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_03_LED_GPIO_Port, &GPIO_InitStruct);
 80074fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80074fe:	4619      	mov	r1, r3
 8007500:	4815      	ldr	r0, [pc, #84]	@ (8007558 <MX_GPIO_Init+0x304>)
 8007502:	f001 fb43 	bl	8008b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_02_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_02_LED_Pin;
 8007506:	2301      	movs	r3, #1
 8007508:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800750a:	2301      	movs	r3, #1
 800750c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800750e:	2302      	movs	r3, #2
 8007510:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007512:	2303      	movs	r3, #3
 8007514:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_02_LED_GPIO_Port, &GPIO_InitStruct);
 8007516:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800751a:	4619      	mov	r1, r3
 800751c:	480d      	ldr	r0, [pc, #52]	@ (8007554 <MX_GPIO_Init+0x300>)
 800751e:	f001 fb35 	bl	8008b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_01_CS_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_01_CS_Pin;
 8007522:	2302      	movs	r3, #2
 8007524:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007526:	2301      	movs	r3, #1
 8007528:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800752a:	2301      	movs	r3, #1
 800752c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800752e:	2303      	movs	r3, #3
 8007530:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_01_CS_GPIO_Port, &GPIO_InitStruct);
 8007532:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007536:	4619      	mov	r1, r3
 8007538:	4806      	ldr	r0, [pc, #24]	@ (8007554 <MX_GPIO_Init+0x300>)
 800753a:	f001 fb27 	bl	8008b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_01_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_01_LED_Pin;
 800753e:	2301      	movs	r3, #1
 8007540:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007542:	2301      	movs	r3, #1
 8007544:	e014      	b.n	8007570 <MX_GPIO_Init+0x31c>
 8007546:	bf00      	nop
 8007548:	40023800 	.word	0x40023800
 800754c:	40021000 	.word	0x40021000
 8007550:	40022000 	.word	0x40022000
 8007554:	40020800 	.word	0x40020800
 8007558:	40021400 	.word	0x40021400
 800755c:	40020000 	.word	0x40020000
 8007560:	40021c00 	.word	0x40021c00
 8007564:	40020400 	.word	0x40020400
 8007568:	40021800 	.word	0x40021800
 800756c:	40020c00 	.word	0x40020c00
 8007570:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007572:	2302      	movs	r3, #2
 8007574:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007576:	2303      	movs	r3, #3
 8007578:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_01_LED_GPIO_Port, &GPIO_InitStruct);
 800757a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800757e:	4619      	mov	r1, r3
 8007580:	485c      	ldr	r0, [pc, #368]	@ (80076f4 <MX_GPIO_Init+0x4a0>)
 8007582:	f001 fb03 	bl	8008b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USART2_ENABLE_Pin */
  GPIO_InitStruct.Pin = USART2_ENABLE_Pin;
 8007586:	2302      	movs	r3, #2
 8007588:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800758a:	2301      	movs	r3, #1
 800758c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800758e:	2300      	movs	r3, #0
 8007590:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007592:	2302      	movs	r3, #2
 8007594:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USART2_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8007596:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800759a:	4619      	mov	r1, r3
 800759c:	4855      	ldr	r0, [pc, #340]	@ (80076f4 <MX_GPIO_Init+0x4a0>)
 800759e:	f001 faf5 	bl	8008b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_14_Pin GPIO_07_Pin LED_01_Pin LED_02_Pin */
  GPIO_InitStruct.Pin = GPIO_14_Pin|GPIO_07_Pin|LED_01_Pin|LED_02_Pin;
 80075a2:	f24c 030c 	movw	r3, #49164	@ 0xc00c
 80075a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075a8:	2301      	movs	r3, #1
 80075aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075ac:	2300      	movs	r3, #0
 80075ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075b0:	2300      	movs	r3, #0
 80075b2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80075b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075b8:	4619      	mov	r1, r3
 80075ba:	484f      	ldr	r0, [pc, #316]	@ (80076f8 <MX_GPIO_Init+0x4a4>)
 80075bc:	f001 fae6 	bl	8008b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_CS_01_Pin CELL11_CS_02_Pin GPIO_11_Pin GPIO_12_Pin
                           CS_Pin LED_03_Pin LED_07_Pin USART1_ENABLE_Pin */
  GPIO_InitStruct.Pin = CELL11_CS_01_Pin|CELL11_CS_02_Pin|GPIO_11_Pin|GPIO_12_Pin
 80075c0:	f24c 433b 	movw	r3, #50235	@ 0xc43b
 80075c4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |CS_Pin|LED_03_Pin|LED_07_Pin|USART1_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075c6:	2301      	movs	r3, #1
 80075c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075ca:	2300      	movs	r3, #0
 80075cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075ce:	2300      	movs	r3, #0
 80075d0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075d6:	4619      	mov	r1, r3
 80075d8:	4848      	ldr	r0, [pc, #288]	@ (80076fc <MX_GPIO_Init+0x4a8>)
 80075da:	f001 fad7 	bl	8008b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_CS_08_Pin CELL11_CS_09_Pin DISPLAY_IO_1_Pin DISPLAY_IO_2_Pin
                           BACKLIGHT_1_Pin BACKLIGHT_2_Pin LED_09_Pin LED_04_Pin
                           LED_08_Pin */
  GPIO_InitStruct.Pin = CELL11_CS_08_Pin|CELL11_CS_09_Pin|DISPLAY_IO_1_Pin|DISPLAY_IO_2_Pin
 80075de:	f24e 033f 	movw	r3, #57407	@ 0xe03f
 80075e2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |BACKLIGHT_1_Pin|BACKLIGHT_2_Pin|LED_09_Pin|LED_04_Pin
                          |LED_08_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075e4:	2301      	movs	r3, #1
 80075e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075e8:	2300      	movs	r3, #0
 80075ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075ec:	2300      	movs	r3, #0
 80075ee:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80075f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075f4:	4619      	mov	r1, r3
 80075f6:	4842      	ldr	r0, [pc, #264]	@ (8007700 <MX_GPIO_Init+0x4ac>)
 80075f8:	f001 fac8 	bl	8008b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL11_TEMP_03_CS_Pin */
  GPIO_InitStruct.Pin = CELL11_TEMP_03_CS_Pin;
 80075fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007600:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007602:	2301      	movs	r3, #1
 8007604:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007606:	2301      	movs	r3, #1
 8007608:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800760a:	2303      	movs	r3, #3
 800760c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL11_TEMP_03_CS_GPIO_Port, &GPIO_InitStruct);
 800760e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007612:	4619      	mov	r1, r3
 8007614:	4839      	ldr	r0, [pc, #228]	@ (80076fc <MX_GPIO_Init+0x4a8>)
 8007616:	f001 fab9 	bl	8008b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_TEMP_03_LED_Pin CELL11_TEMP_02_LED_Pin CELL11_TEMP_01_LED_Pin */
  GPIO_InitStruct.Pin = CELL11_TEMP_03_LED_Pin|CELL11_TEMP_02_LED_Pin|CELL11_TEMP_01_LED_Pin;
 800761a:	f44f 53a2 	mov.w	r3, #5184	@ 0x1440
 800761e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007620:	2301      	movs	r3, #1
 8007622:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007624:	2302      	movs	r3, #2
 8007626:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007628:	2303      	movs	r3, #3
 800762a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800762c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007630:	4619      	mov	r1, r3
 8007632:	4831      	ldr	r0, [pc, #196]	@ (80076f8 <MX_GPIO_Init+0x4a4>)
 8007634:	f001 faaa 	bl	8008b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_TEMP_02_CS_Pin CELL11_TEMP_01_CS_Pin */
  GPIO_InitStruct.Pin = CELL11_TEMP_02_CS_Pin|CELL11_TEMP_01_CS_Pin;
 8007638:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800763c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800763e:	2301      	movs	r3, #1
 8007640:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007642:	2301      	movs	r3, #1
 8007644:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007646:	2303      	movs	r3, #3
 8007648:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800764a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800764e:	4619      	mov	r1, r3
 8007650:	4829      	ldr	r0, [pc, #164]	@ (80076f8 <MX_GPIO_Init+0x4a4>)
 8007652:	f001 fa9b 	bl	8008b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS1_Pin USART3_ENABLE_Pin DISPLAY_CS_Pin SPI5_CS_02_Pin */
  GPIO_InitStruct.Pin = CS1_Pin|USART3_ENABLE_Pin|DISPLAY_CS_Pin|SPI5_CS_02_Pin;
 8007656:	f640 430c 	movw	r3, #3084	@ 0xc0c
 800765a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800765c:	2301      	movs	r3, #1
 800765e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007660:	2300      	movs	r3, #0
 8007662:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007664:	2300      	movs	r3, #0
 8007666:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007668:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800766c:	4619      	mov	r1, r3
 800766e:	4825      	ldr	r0, [pc, #148]	@ (8007704 <MX_GPIO_Init+0x4b0>)
 8007670:	f001 fa8c 	bl	8008b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PUSH_BUTTON_01_Pin PUSH_BUTTON_02_Pin PUSH_BUTTON_03_Pin PUSH_BUTTON_04_Pin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_01_Pin|PUSH_BUTTON_02_Pin|PUSH_BUTTON_03_Pin|PUSH_BUTTON_04_Pin;
 8007674:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8007678:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800767a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800767e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007680:	2300      	movs	r3, #0
 8007682:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007684:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007688:	4619      	mov	r1, r3
 800768a:	481e      	ldr	r0, [pc, #120]	@ (8007704 <MX_GPIO_Init+0x4b0>)
 800768c:	f001 fa7e 	bl	8008b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : CD_Pin */
  GPIO_InitStruct.Pin = CD_Pin;
 8007690:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007694:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007696:	2300      	movs	r3, #0
 8007698:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800769a:	2301      	movs	r3, #1
 800769c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 800769e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076a2:	4619      	mov	r1, r3
 80076a4:	4814      	ldr	r0, [pc, #80]	@ (80076f8 <MX_GPIO_Init+0x4a4>)
 80076a6:	f001 fa71 	bl	8008b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIP_SWITCH_01_Pin DIP_SWITCH_02_Pin DIP_SWITCH_03_Pin DIP_SWITCH_04_Pin */
  GPIO_InitStruct.Pin = DIP_SWITCH_01_Pin|DIP_SWITCH_02_Pin|DIP_SWITCH_03_Pin|DIP_SWITCH_04_Pin;
 80076aa:	23f0      	movs	r3, #240	@ 0xf0
 80076ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80076ae:	2300      	movs	r3, #0
 80076b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076b2:	2300      	movs	r3, #0
 80076b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80076b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076ba:	4619      	mov	r1, r3
 80076bc:	4811      	ldr	r0, [pc, #68]	@ (8007704 <MX_GPIO_Init+0x4b0>)
 80076be:	f001 fa65 	bl	8008b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIP_SWITCH_MODE_01_Pin DIP_SWITCH_MODE_02_Pin DIP_SWITCH_MODE_03_Pin DIP_SWITCH_MODE_04_Pin */
  GPIO_InitStruct.Pin = DIP_SWITCH_MODE_01_Pin|DIP_SWITCH_MODE_02_Pin|DIP_SWITCH_MODE_03_Pin|DIP_SWITCH_MODE_04_Pin;
 80076c2:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 80076c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80076c8:	2300      	movs	r3, #0
 80076ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076cc:	2300      	movs	r3, #0
 80076ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80076d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076d4:	4619      	mov	r1, r3
 80076d6:	480a      	ldr	r0, [pc, #40]	@ (8007700 <MX_GPIO_Init+0x4ac>)
 80076d8:	f001 fa58 	bl	8008b8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80076dc:	2200      	movs	r2, #0
 80076de:	2100      	movs	r1, #0
 80076e0:	2028      	movs	r0, #40	@ 0x28
 80076e2:	f001 f98a 	bl	80089fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80076e6:	2028      	movs	r0, #40	@ 0x28
 80076e8:	f001 f9a3 	bl	8008a32 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80076ec:	bf00      	nop
 80076ee:	3738      	adds	r7, #56	@ 0x38
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	40020000 	.word	0x40020000
 80076f8:	40021c00 	.word	0x40021c00
 80076fc:	40020400 	.word	0x40020400
 8007700:	40021800 	.word	0x40021800
 8007704:	40020c00 	.word	0x40020c00

08007708 <HAL_UARTEx_RxEventCallback>:
//    }
//}


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	460b      	mov	r3, r1
 8007712:	807b      	strh	r3, [r7, #2]
			break;
		}
	}
    */

	HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData_modbus_01, sizeof(RxData_modbus_01));
 8007714:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007718:	490f      	ldr	r1, [pc, #60]	@ (8007758 <HAL_UARTEx_RxEventCallback+0x50>)
 800771a:	4810      	ldr	r0, [pc, #64]	@ (800775c <HAL_UARTEx_RxEventCallback+0x54>)
 800771c:	f003 ffd3 	bl	800b6c6 <HAL_UARTEx_ReceiveToIdle_IT>

	HAL_UARTEx_ReceiveToIdle_IT(&huart2, RxData_modbus_02, sizeof(RxData_modbus_02));
 8007720:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007724:	490e      	ldr	r1, [pc, #56]	@ (8007760 <HAL_UARTEx_RxEventCallback+0x58>)
 8007726:	480f      	ldr	r0, [pc, #60]	@ (8007764 <HAL_UARTEx_RxEventCallback+0x5c>)
 8007728:	f003 ffcd 	bl	800b6c6 <HAL_UARTEx_ReceiveToIdle_IT>

	HAL_UARTEx_ReceiveToIdle_IT(&huart3, RxData_modbus_03, sizeof(RxData_modbus_03));
 800772c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007730:	490d      	ldr	r1, [pc, #52]	@ (8007768 <HAL_UARTEx_RxEventCallback+0x60>)
 8007732:	480e      	ldr	r0, [pc, #56]	@ (800776c <HAL_UARTEx_RxEventCallback+0x64>)
 8007734:	f003 ffc7 	bl	800b6c6 <HAL_UARTEx_ReceiveToIdle_IT>

	HAL_UARTEx_ReceiveToIdle_IT(&huart6, RxData_modbus_04, sizeof(RxData_modbus_04));
 8007738:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800773c:	490c      	ldr	r1, [pc, #48]	@ (8007770 <HAL_UARTEx_RxEventCallback+0x68>)
 800773e:	480d      	ldr	r0, [pc, #52]	@ (8007774 <HAL_UARTEx_RxEventCallback+0x6c>)
 8007740:	f003 ffc1 	bl	800b6c6 <HAL_UARTEx_ReceiveToIdle_IT>



	modebus_rx_flag = 1 ;
 8007744:	4b0c      	ldr	r3, [pc, #48]	@ (8007778 <HAL_UARTEx_RxEventCallback+0x70>)
 8007746:	2201      	movs	r2, #1
 8007748:	701a      	strb	r2, [r3, #0]

	  flag_1 = 2 ;
 800774a:	4b0c      	ldr	r3, [pc, #48]	@ (800777c <HAL_UARTEx_RxEventCallback+0x74>)
 800774c:	2202      	movs	r2, #2
 800774e:	701a      	strb	r2, [r3, #0]

//	modebus_rx_flag = 0;


//	HAL_UART_RxCpltCallback
}
 8007750:	bf00      	nop
 8007752:	3708      	adds	r7, #8
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	2000121c 	.word	0x2000121c
 800775c:	20001a30 	.word	0x20001a30
 8007760:	2000141c 	.word	0x2000141c
 8007764:	20001a78 	.word	0x20001a78
 8007768:	2000151c 	.word	0x2000151c
 800776c:	20001ac0 	.word	0x20001ac0
 8007770:	2000161c 	.word	0x2000161c
 8007774:	20001b08 	.word	0x20001b08
 8007778:	20001217 	.word	0x20001217
 800777c:	20001218 	.word	0x20001218

08007780 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	4603      	mov	r3, r0
 8007788:	80fb      	strh	r3, [r7, #6]
    UNUSED(GPIO_Pin);
    Push_ButtonHandler(GPIO_Pin);
 800778a:	88fb      	ldrh	r3, [r7, #6]
 800778c:	4618      	mov	r0, r3
 800778e:	f7f9 fcaf 	bl	80010f0 <Push_ButtonHandler>
}
 8007792:	bf00      	nop
 8007794:	3708      	adds	r7, #8
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800779a:	b480      	push	{r7}
 800779c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800779e:	b672      	cpsid	i
}
 80077a0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80077a2:	bf00      	nop
 80077a4:	e7fd      	b.n	80077a2 <Error_Handler+0x8>
	...

080077a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80077ae:	2300      	movs	r3, #0
 80077b0:	607b      	str	r3, [r7, #4]
 80077b2:	4b10      	ldr	r3, [pc, #64]	@ (80077f4 <HAL_MspInit+0x4c>)
 80077b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077b6:	4a0f      	ldr	r2, [pc, #60]	@ (80077f4 <HAL_MspInit+0x4c>)
 80077b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80077bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80077be:	4b0d      	ldr	r3, [pc, #52]	@ (80077f4 <HAL_MspInit+0x4c>)
 80077c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077c6:	607b      	str	r3, [r7, #4]
 80077c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80077ca:	2300      	movs	r3, #0
 80077cc:	603b      	str	r3, [r7, #0]
 80077ce:	4b09      	ldr	r3, [pc, #36]	@ (80077f4 <HAL_MspInit+0x4c>)
 80077d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077d2:	4a08      	ldr	r2, [pc, #32]	@ (80077f4 <HAL_MspInit+0x4c>)
 80077d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80077da:	4b06      	ldr	r3, [pc, #24]	@ (80077f4 <HAL_MspInit+0x4c>)
 80077dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077e2:	603b      	str	r3, [r7, #0]
 80077e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80077e6:	bf00      	nop
 80077e8:	370c      	adds	r7, #12
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	40023800 	.word	0x40023800

080077f8 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b08c      	sub	sp, #48	@ 0x30
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007800:	f107 031c 	add.w	r3, r7, #28
 8007804:	2200      	movs	r2, #0
 8007806:	601a      	str	r2, [r3, #0]
 8007808:	605a      	str	r2, [r3, #4]
 800780a:	609a      	str	r2, [r3, #8]
 800780c:	60da      	str	r2, [r3, #12]
 800780e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a4a      	ldr	r2, [pc, #296]	@ (8007940 <HAL_CAN_MspInit+0x148>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d145      	bne.n	80078a6 <HAL_CAN_MspInit+0xae>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800781a:	4b4a      	ldr	r3, [pc, #296]	@ (8007944 <HAL_CAN_MspInit+0x14c>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	3301      	adds	r3, #1
 8007820:	4a48      	ldr	r2, [pc, #288]	@ (8007944 <HAL_CAN_MspInit+0x14c>)
 8007822:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8007824:	4b47      	ldr	r3, [pc, #284]	@ (8007944 <HAL_CAN_MspInit+0x14c>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2b01      	cmp	r3, #1
 800782a:	d10d      	bne.n	8007848 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800782c:	2300      	movs	r3, #0
 800782e:	61bb      	str	r3, [r7, #24]
 8007830:	4b45      	ldr	r3, [pc, #276]	@ (8007948 <HAL_CAN_MspInit+0x150>)
 8007832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007834:	4a44      	ldr	r2, [pc, #272]	@ (8007948 <HAL_CAN_MspInit+0x150>)
 8007836:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800783a:	6413      	str	r3, [r2, #64]	@ 0x40
 800783c:	4b42      	ldr	r3, [pc, #264]	@ (8007948 <HAL_CAN_MspInit+0x150>)
 800783e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007840:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007844:	61bb      	str	r3, [r7, #24]
 8007846:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007848:	2300      	movs	r3, #0
 800784a:	617b      	str	r3, [r7, #20]
 800784c:	4b3e      	ldr	r3, [pc, #248]	@ (8007948 <HAL_CAN_MspInit+0x150>)
 800784e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007850:	4a3d      	ldr	r2, [pc, #244]	@ (8007948 <HAL_CAN_MspInit+0x150>)
 8007852:	f043 0308 	orr.w	r3, r3, #8
 8007856:	6313      	str	r3, [r2, #48]	@ 0x30
 8007858:	4b3b      	ldr	r3, [pc, #236]	@ (8007948 <HAL_CAN_MspInit+0x150>)
 800785a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800785c:	f003 0308 	and.w	r3, r3, #8
 8007860:	617b      	str	r3, [r7, #20]
 8007862:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007864:	2303      	movs	r3, #3
 8007866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007868:	2302      	movs	r3, #2
 800786a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800786c:	2300      	movs	r3, #0
 800786e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007870:	2303      	movs	r3, #3
 8007872:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8007874:	2309      	movs	r3, #9
 8007876:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007878:	f107 031c 	add.w	r3, r7, #28
 800787c:	4619      	mov	r1, r3
 800787e:	4833      	ldr	r0, [pc, #204]	@ (800794c <HAL_CAN_MspInit+0x154>)
 8007880:	f001 f984 	bl	8008b8c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8007884:	2200      	movs	r2, #0
 8007886:	2100      	movs	r1, #0
 8007888:	2014      	movs	r0, #20
 800788a:	f001 f8b6 	bl	80089fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800788e:	2014      	movs	r0, #20
 8007890:	f001 f8cf 	bl	8008a32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8007894:	2200      	movs	r2, #0
 8007896:	2100      	movs	r1, #0
 8007898:	2015      	movs	r0, #21
 800789a:	f001 f8ae 	bl	80089fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800789e:	2015      	movs	r0, #21
 80078a0:	f001 f8c7 	bl	8008a32 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 80078a4:	e048      	b.n	8007938 <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a29      	ldr	r2, [pc, #164]	@ (8007950 <HAL_CAN_MspInit+0x158>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d143      	bne.n	8007938 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80078b0:	2300      	movs	r3, #0
 80078b2:	613b      	str	r3, [r7, #16]
 80078b4:	4b24      	ldr	r3, [pc, #144]	@ (8007948 <HAL_CAN_MspInit+0x150>)
 80078b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078b8:	4a23      	ldr	r2, [pc, #140]	@ (8007948 <HAL_CAN_MspInit+0x150>)
 80078ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80078be:	6413      	str	r3, [r2, #64]	@ 0x40
 80078c0:	4b21      	ldr	r3, [pc, #132]	@ (8007948 <HAL_CAN_MspInit+0x150>)
 80078c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80078c8:	613b      	str	r3, [r7, #16]
 80078ca:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80078cc:	4b1d      	ldr	r3, [pc, #116]	@ (8007944 <HAL_CAN_MspInit+0x14c>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	3301      	adds	r3, #1
 80078d2:	4a1c      	ldr	r2, [pc, #112]	@ (8007944 <HAL_CAN_MspInit+0x14c>)
 80078d4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80078d6:	4b1b      	ldr	r3, [pc, #108]	@ (8007944 <HAL_CAN_MspInit+0x14c>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d10d      	bne.n	80078fa <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80078de:	2300      	movs	r3, #0
 80078e0:	60fb      	str	r3, [r7, #12]
 80078e2:	4b19      	ldr	r3, [pc, #100]	@ (8007948 <HAL_CAN_MspInit+0x150>)
 80078e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078e6:	4a18      	ldr	r2, [pc, #96]	@ (8007948 <HAL_CAN_MspInit+0x150>)
 80078e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80078ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80078ee:	4b16      	ldr	r3, [pc, #88]	@ (8007948 <HAL_CAN_MspInit+0x150>)
 80078f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078f6:	60fb      	str	r3, [r7, #12]
 80078f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80078fa:	2300      	movs	r3, #0
 80078fc:	60bb      	str	r3, [r7, #8]
 80078fe:	4b12      	ldr	r3, [pc, #72]	@ (8007948 <HAL_CAN_MspInit+0x150>)
 8007900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007902:	4a11      	ldr	r2, [pc, #68]	@ (8007948 <HAL_CAN_MspInit+0x150>)
 8007904:	f043 0302 	orr.w	r3, r3, #2
 8007908:	6313      	str	r3, [r2, #48]	@ 0x30
 800790a:	4b0f      	ldr	r3, [pc, #60]	@ (8007948 <HAL_CAN_MspInit+0x150>)
 800790c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800790e:	f003 0302 	and.w	r3, r3, #2
 8007912:	60bb      	str	r3, [r7, #8]
 8007914:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8007916:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800791a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800791c:	2302      	movs	r3, #2
 800791e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007920:	2300      	movs	r3, #0
 8007922:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007924:	2303      	movs	r3, #3
 8007926:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8007928:	2309      	movs	r3, #9
 800792a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800792c:	f107 031c 	add.w	r3, r7, #28
 8007930:	4619      	mov	r1, r3
 8007932:	4808      	ldr	r0, [pc, #32]	@ (8007954 <HAL_CAN_MspInit+0x15c>)
 8007934:	f001 f92a 	bl	8008b8c <HAL_GPIO_Init>
}
 8007938:	bf00      	nop
 800793a:	3730      	adds	r7, #48	@ 0x30
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	40006400 	.word	0x40006400
 8007944:	20001b50 	.word	0x20001b50
 8007948:	40023800 	.word	0x40023800
 800794c:	40020c00 	.word	0x40020c00
 8007950:	40006800 	.word	0x40006800
 8007954:	40020400 	.word	0x40020400

08007958 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b08e      	sub	sp, #56	@ 0x38
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007960:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007964:	2200      	movs	r2, #0
 8007966:	601a      	str	r2, [r3, #0]
 8007968:	605a      	str	r2, [r3, #4]
 800796a:	609a      	str	r2, [r3, #8]
 800796c:	60da      	str	r2, [r3, #12]
 800796e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a4c      	ldr	r2, [pc, #304]	@ (8007aa8 <HAL_I2C_MspInit+0x150>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d12d      	bne.n	80079d6 <HAL_I2C_MspInit+0x7e>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800797a:	2300      	movs	r3, #0
 800797c:	623b      	str	r3, [r7, #32]
 800797e:	4b4b      	ldr	r3, [pc, #300]	@ (8007aac <HAL_I2C_MspInit+0x154>)
 8007980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007982:	4a4a      	ldr	r2, [pc, #296]	@ (8007aac <HAL_I2C_MspInit+0x154>)
 8007984:	f043 0302 	orr.w	r3, r3, #2
 8007988:	6313      	str	r3, [r2, #48]	@ 0x30
 800798a:	4b48      	ldr	r3, [pc, #288]	@ (8007aac <HAL_I2C_MspInit+0x154>)
 800798c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800798e:	f003 0302 	and.w	r3, r3, #2
 8007992:	623b      	str	r3, [r7, #32]
 8007994:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007996:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800799a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800799c:	2312      	movs	r3, #18
 800799e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079a0:	2300      	movs	r3, #0
 80079a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079a4:	2303      	movs	r3, #3
 80079a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80079a8:	2304      	movs	r3, #4
 80079aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80079ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80079b0:	4619      	mov	r1, r3
 80079b2:	483f      	ldr	r0, [pc, #252]	@ (8007ab0 <HAL_I2C_MspInit+0x158>)
 80079b4:	f001 f8ea 	bl	8008b8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80079b8:	2300      	movs	r3, #0
 80079ba:	61fb      	str	r3, [r7, #28]
 80079bc:	4b3b      	ldr	r3, [pc, #236]	@ (8007aac <HAL_I2C_MspInit+0x154>)
 80079be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079c0:	4a3a      	ldr	r2, [pc, #232]	@ (8007aac <HAL_I2C_MspInit+0x154>)
 80079c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80079c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80079c8:	4b38      	ldr	r3, [pc, #224]	@ (8007aac <HAL_I2C_MspInit+0x154>)
 80079ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80079d0:	61fb      	str	r3, [r7, #28]
 80079d2:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 80079d4:	e063      	b.n	8007a9e <HAL_I2C_MspInit+0x146>
  else if(hi2c->Instance==I2C2)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a36      	ldr	r2, [pc, #216]	@ (8007ab4 <HAL_I2C_MspInit+0x15c>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d12c      	bne.n	8007a3a <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80079e0:	2300      	movs	r3, #0
 80079e2:	61bb      	str	r3, [r7, #24]
 80079e4:	4b31      	ldr	r3, [pc, #196]	@ (8007aac <HAL_I2C_MspInit+0x154>)
 80079e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079e8:	4a30      	ldr	r2, [pc, #192]	@ (8007aac <HAL_I2C_MspInit+0x154>)
 80079ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80079f0:	4b2e      	ldr	r3, [pc, #184]	@ (8007aac <HAL_I2C_MspInit+0x154>)
 80079f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079f8:	61bb      	str	r3, [r7, #24]
 80079fa:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80079fc:	2330      	movs	r3, #48	@ 0x30
 80079fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007a00:	2312      	movs	r3, #18
 8007a02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a04:	2300      	movs	r3, #0
 8007a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007a0c:	2304      	movs	r3, #4
 8007a0e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007a10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a14:	4619      	mov	r1, r3
 8007a16:	4828      	ldr	r0, [pc, #160]	@ (8007ab8 <HAL_I2C_MspInit+0x160>)
 8007a18:	f001 f8b8 	bl	8008b8c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	617b      	str	r3, [r7, #20]
 8007a20:	4b22      	ldr	r3, [pc, #136]	@ (8007aac <HAL_I2C_MspInit+0x154>)
 8007a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a24:	4a21      	ldr	r2, [pc, #132]	@ (8007aac <HAL_I2C_MspInit+0x154>)
 8007a26:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007a2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8007a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8007aac <HAL_I2C_MspInit+0x154>)
 8007a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a34:	617b      	str	r3, [r7, #20]
 8007a36:	697b      	ldr	r3, [r7, #20]
}
 8007a38:	e031      	b.n	8007a9e <HAL_I2C_MspInit+0x146>
  else if(hi2c->Instance==I2C3)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a1f      	ldr	r2, [pc, #124]	@ (8007abc <HAL_I2C_MspInit+0x164>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d12c      	bne.n	8007a9e <HAL_I2C_MspInit+0x146>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8007a44:	2300      	movs	r3, #0
 8007a46:	613b      	str	r3, [r7, #16]
 8007a48:	4b18      	ldr	r3, [pc, #96]	@ (8007aac <HAL_I2C_MspInit+0x154>)
 8007a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a4c:	4a17      	ldr	r2, [pc, #92]	@ (8007aac <HAL_I2C_MspInit+0x154>)
 8007a4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a52:	6313      	str	r3, [r2, #48]	@ 0x30
 8007a54:	4b15      	ldr	r3, [pc, #84]	@ (8007aac <HAL_I2C_MspInit+0x154>)
 8007a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a5c:	613b      	str	r3, [r7, #16]
 8007a5e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8007a60:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8007a64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007a66:	2312      	movs	r3, #18
 8007a68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007a72:	2304      	movs	r3, #4
 8007a74:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007a76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	480e      	ldr	r0, [pc, #56]	@ (8007ab8 <HAL_I2C_MspInit+0x160>)
 8007a7e:	f001 f885 	bl	8008b8c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8007a82:	2300      	movs	r3, #0
 8007a84:	60fb      	str	r3, [r7, #12]
 8007a86:	4b09      	ldr	r3, [pc, #36]	@ (8007aac <HAL_I2C_MspInit+0x154>)
 8007a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a8a:	4a08      	ldr	r2, [pc, #32]	@ (8007aac <HAL_I2C_MspInit+0x154>)
 8007a8c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007a90:	6413      	str	r3, [r2, #64]	@ 0x40
 8007a92:	4b06      	ldr	r3, [pc, #24]	@ (8007aac <HAL_I2C_MspInit+0x154>)
 8007a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a9a:	60fb      	str	r3, [r7, #12]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
}
 8007a9e:	bf00      	nop
 8007aa0:	3738      	adds	r7, #56	@ 0x38
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	40005400 	.word	0x40005400
 8007aac:	40023800 	.word	0x40023800
 8007ab0:	40020400 	.word	0x40020400
 8007ab4:	40005800 	.word	0x40005800
 8007ab8:	40021c00 	.word	0x40021c00
 8007abc:	40005c00 	.word	0x40005c00

08007ac0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b090      	sub	sp, #64	@ 0x40
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ac8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007acc:	2200      	movs	r2, #0
 8007ace:	601a      	str	r2, [r3, #0]
 8007ad0:	605a      	str	r2, [r3, #4]
 8007ad2:	609a      	str	r2, [r3, #8]
 8007ad4:	60da      	str	r2, [r3, #12]
 8007ad6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a6d      	ldr	r2, [pc, #436]	@ (8007c94 <HAL_SPI_MspInit+0x1d4>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d12c      	bne.n	8007b3c <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ae6:	4b6c      	ldr	r3, [pc, #432]	@ (8007c98 <HAL_SPI_MspInit+0x1d8>)
 8007ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aea:	4a6b      	ldr	r2, [pc, #428]	@ (8007c98 <HAL_SPI_MspInit+0x1d8>)
 8007aec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007af0:	6453      	str	r3, [r2, #68]	@ 0x44
 8007af2:	4b69      	ldr	r3, [pc, #420]	@ (8007c98 <HAL_SPI_MspInit+0x1d8>)
 8007af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007af6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007afa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007afe:	2300      	movs	r3, #0
 8007b00:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b02:	4b65      	ldr	r3, [pc, #404]	@ (8007c98 <HAL_SPI_MspInit+0x1d8>)
 8007b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b06:	4a64      	ldr	r2, [pc, #400]	@ (8007c98 <HAL_SPI_MspInit+0x1d8>)
 8007b08:	f043 0301 	orr.w	r3, r3, #1
 8007b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8007b0e:	4b62      	ldr	r3, [pc, #392]	@ (8007c98 <HAL_SPI_MspInit+0x1d8>)
 8007b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b12:	f003 0301 	and.w	r3, r3, #1
 8007b16:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8007b1a:	23e0      	movs	r3, #224	@ 0xe0
 8007b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b1e:	2302      	movs	r3, #2
 8007b20:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b22:	2300      	movs	r3, #0
 8007b24:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b26:	2303      	movs	r3, #3
 8007b28:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007b2a:	2305      	movs	r3, #5
 8007b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007b32:	4619      	mov	r1, r3
 8007b34:	4859      	ldr	r0, [pc, #356]	@ (8007c9c <HAL_SPI_MspInit+0x1dc>)
 8007b36:	f001 f829 	bl	8008b8c <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI4_MspInit 1 */

    /* USER CODE END SPI4_MspInit 1 */
  }

}
 8007b3a:	e0a7      	b.n	8007c8c <HAL_SPI_MspInit+0x1cc>
  else if(hspi->Instance==SPI2)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a57      	ldr	r2, [pc, #348]	@ (8007ca0 <HAL_SPI_MspInit+0x1e0>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d12c      	bne.n	8007ba0 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007b46:	2300      	movs	r3, #0
 8007b48:	623b      	str	r3, [r7, #32]
 8007b4a:	4b53      	ldr	r3, [pc, #332]	@ (8007c98 <HAL_SPI_MspInit+0x1d8>)
 8007b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b4e:	4a52      	ldr	r2, [pc, #328]	@ (8007c98 <HAL_SPI_MspInit+0x1d8>)
 8007b50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007b54:	6413      	str	r3, [r2, #64]	@ 0x40
 8007b56:	4b50      	ldr	r3, [pc, #320]	@ (8007c98 <HAL_SPI_MspInit+0x1d8>)
 8007b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b5e:	623b      	str	r3, [r7, #32]
 8007b60:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8007b62:	2300      	movs	r3, #0
 8007b64:	61fb      	str	r3, [r7, #28]
 8007b66:	4b4c      	ldr	r3, [pc, #304]	@ (8007c98 <HAL_SPI_MspInit+0x1d8>)
 8007b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b6a:	4a4b      	ldr	r2, [pc, #300]	@ (8007c98 <HAL_SPI_MspInit+0x1d8>)
 8007b6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8007b72:	4b49      	ldr	r3, [pc, #292]	@ (8007c98 <HAL_SPI_MspInit+0x1d8>)
 8007b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b7a:	61fb      	str	r3, [r7, #28]
 8007b7c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8007b7e:	230e      	movs	r3, #14
 8007b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b82:	2302      	movs	r3, #2
 8007b84:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b86:	2300      	movs	r3, #0
 8007b88:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007b8e:	2305      	movs	r3, #5
 8007b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8007b92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007b96:	4619      	mov	r1, r3
 8007b98:	4842      	ldr	r0, [pc, #264]	@ (8007ca4 <HAL_SPI_MspInit+0x1e4>)
 8007b9a:	f000 fff7 	bl	8008b8c <HAL_GPIO_Init>
}
 8007b9e:	e075      	b.n	8007c8c <HAL_SPI_MspInit+0x1cc>
  else if(hspi->Instance==SPI3)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a40      	ldr	r2, [pc, #256]	@ (8007ca8 <HAL_SPI_MspInit+0x1e8>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d12d      	bne.n	8007c06 <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007baa:	2300      	movs	r3, #0
 8007bac:	61bb      	str	r3, [r7, #24]
 8007bae:	4b3a      	ldr	r3, [pc, #232]	@ (8007c98 <HAL_SPI_MspInit+0x1d8>)
 8007bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bb2:	4a39      	ldr	r2, [pc, #228]	@ (8007c98 <HAL_SPI_MspInit+0x1d8>)
 8007bb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8007bba:	4b37      	ldr	r3, [pc, #220]	@ (8007c98 <HAL_SPI_MspInit+0x1d8>)
 8007bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007bc2:	61bb      	str	r3, [r7, #24]
 8007bc4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	617b      	str	r3, [r7, #20]
 8007bca:	4b33      	ldr	r3, [pc, #204]	@ (8007c98 <HAL_SPI_MspInit+0x1d8>)
 8007bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bce:	4a32      	ldr	r2, [pc, #200]	@ (8007c98 <HAL_SPI_MspInit+0x1d8>)
 8007bd0:	f043 0304 	orr.w	r3, r3, #4
 8007bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8007bd6:	4b30      	ldr	r3, [pc, #192]	@ (8007c98 <HAL_SPI_MspInit+0x1d8>)
 8007bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bda:	f003 0304 	and.w	r3, r3, #4
 8007bde:	617b      	str	r3, [r7, #20]
 8007be0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8007be2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8007be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007be8:	2302      	movs	r3, #2
 8007bea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bec:	2300      	movs	r3, #0
 8007bee:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007bf4:	2306      	movs	r3, #6
 8007bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007bf8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	482b      	ldr	r0, [pc, #172]	@ (8007cac <HAL_SPI_MspInit+0x1ec>)
 8007c00:	f000 ffc4 	bl	8008b8c <HAL_GPIO_Init>
}
 8007c04:	e042      	b.n	8007c8c <HAL_SPI_MspInit+0x1cc>
  else if(hspi->Instance==SPI4)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a29      	ldr	r2, [pc, #164]	@ (8007cb0 <HAL_SPI_MspInit+0x1f0>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d13d      	bne.n	8007c8c <HAL_SPI_MspInit+0x1cc>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8007c10:	2300      	movs	r3, #0
 8007c12:	613b      	str	r3, [r7, #16]
 8007c14:	4b20      	ldr	r3, [pc, #128]	@ (8007c98 <HAL_SPI_MspInit+0x1d8>)
 8007c16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c18:	4a1f      	ldr	r2, [pc, #124]	@ (8007c98 <HAL_SPI_MspInit+0x1d8>)
 8007c1a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007c1e:	6453      	str	r3, [r2, #68]	@ 0x44
 8007c20:	4b1d      	ldr	r3, [pc, #116]	@ (8007c98 <HAL_SPI_MspInit+0x1d8>)
 8007c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c28:	613b      	str	r3, [r7, #16]
 8007c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	60fb      	str	r3, [r7, #12]
 8007c30:	4b19      	ldr	r3, [pc, #100]	@ (8007c98 <HAL_SPI_MspInit+0x1d8>)
 8007c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c34:	4a18      	ldr	r2, [pc, #96]	@ (8007c98 <HAL_SPI_MspInit+0x1d8>)
 8007c36:	f043 0310 	orr.w	r3, r3, #16
 8007c3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8007c3c:	4b16      	ldr	r3, [pc, #88]	@ (8007c98 <HAL_SPI_MspInit+0x1d8>)
 8007c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c40:	f003 0310 	and.w	r3, r3, #16
 8007c44:	60fb      	str	r3, [r7, #12]
 8007c46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8007c48:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8007c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c4e:	2302      	movs	r3, #2
 8007c50:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c52:	2300      	movs	r3, #0
 8007c54:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c56:	2303      	movs	r3, #3
 8007c58:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8007c5a:	2305      	movs	r3, #5
 8007c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007c5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007c62:	4619      	mov	r1, r3
 8007c64:	4813      	ldr	r0, [pc, #76]	@ (8007cb4 <HAL_SPI_MspInit+0x1f4>)
 8007c66:	f000 ff91 	bl	8008b8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007c6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c70:	2302      	movs	r3, #2
 8007c72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007c74:	2301      	movs	r3, #1
 8007c76:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c78:	2303      	movs	r3, #3
 8007c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8007c7c:	2305      	movs	r3, #5
 8007c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007c80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007c84:	4619      	mov	r1, r3
 8007c86:	480b      	ldr	r0, [pc, #44]	@ (8007cb4 <HAL_SPI_MspInit+0x1f4>)
 8007c88:	f000 ff80 	bl	8008b8c <HAL_GPIO_Init>
}
 8007c8c:	bf00      	nop
 8007c8e:	3740      	adds	r7, #64	@ 0x40
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	40013000 	.word	0x40013000
 8007c98:	40023800 	.word	0x40023800
 8007c9c:	40020000 	.word	0x40020000
 8007ca0:	40003800 	.word	0x40003800
 8007ca4:	40022000 	.word	0x40022000
 8007ca8:	40003c00 	.word	0x40003c00
 8007cac:	40020800 	.word	0x40020800
 8007cb0:	40013400 	.word	0x40013400
 8007cb4:	40021000 	.word	0x40021000

08007cb8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b090      	sub	sp, #64	@ 0x40
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cc0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	601a      	str	r2, [r3, #0]
 8007cc8:	605a      	str	r2, [r3, #4]
 8007cca:	609a      	str	r2, [r3, #8]
 8007ccc:	60da      	str	r2, [r3, #12]
 8007cce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a74      	ldr	r2, [pc, #464]	@ (8007ea8 <HAL_UART_MspInit+0x1f0>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d134      	bne.n	8007d44 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007cda:	2300      	movs	r3, #0
 8007cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007cde:	4b73      	ldr	r3, [pc, #460]	@ (8007eac <HAL_UART_MspInit+0x1f4>)
 8007ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ce2:	4a72      	ldr	r2, [pc, #456]	@ (8007eac <HAL_UART_MspInit+0x1f4>)
 8007ce4:	f043 0310 	orr.w	r3, r3, #16
 8007ce8:	6453      	str	r3, [r2, #68]	@ 0x44
 8007cea:	4b70      	ldr	r3, [pc, #448]	@ (8007eac <HAL_UART_MspInit+0x1f4>)
 8007cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cee:	f003 0310 	and.w	r3, r3, #16
 8007cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cfa:	4b6c      	ldr	r3, [pc, #432]	@ (8007eac <HAL_UART_MspInit+0x1f4>)
 8007cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cfe:	4a6b      	ldr	r2, [pc, #428]	@ (8007eac <HAL_UART_MspInit+0x1f4>)
 8007d00:	f043 0302 	orr.w	r3, r3, #2
 8007d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8007d06:	4b69      	ldr	r3, [pc, #420]	@ (8007eac <HAL_UART_MspInit+0x1f4>)
 8007d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d0a:	f003 0302 	and.w	r3, r3, #2
 8007d0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007d12:	23c0      	movs	r3, #192	@ 0xc0
 8007d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d16:	2302      	movs	r3, #2
 8007d18:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d1e:	2303      	movs	r3, #3
 8007d20:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007d22:	2307      	movs	r3, #7
 8007d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	4860      	ldr	r0, [pc, #384]	@ (8007eb0 <HAL_UART_MspInit+0x1f8>)
 8007d2e:	f000 ff2d 	bl	8008b8c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007d32:	2200      	movs	r2, #0
 8007d34:	2100      	movs	r1, #0
 8007d36:	2025      	movs	r0, #37	@ 0x25
 8007d38:	f000 fe5f 	bl	80089fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007d3c:	2025      	movs	r0, #37	@ 0x25
 8007d3e:	f000 fe78 	bl	8008a32 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8007d42:	e0ad      	b.n	8007ea0 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART2)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a5a      	ldr	r2, [pc, #360]	@ (8007eb4 <HAL_UART_MspInit+0x1fc>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d134      	bne.n	8007db8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007d4e:	2300      	movs	r3, #0
 8007d50:	623b      	str	r3, [r7, #32]
 8007d52:	4b56      	ldr	r3, [pc, #344]	@ (8007eac <HAL_UART_MspInit+0x1f4>)
 8007d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d56:	4a55      	ldr	r2, [pc, #340]	@ (8007eac <HAL_UART_MspInit+0x1f4>)
 8007d58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8007d5e:	4b53      	ldr	r3, [pc, #332]	@ (8007eac <HAL_UART_MspInit+0x1f4>)
 8007d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d66:	623b      	str	r3, [r7, #32]
 8007d68:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	61fb      	str	r3, [r7, #28]
 8007d6e:	4b4f      	ldr	r3, [pc, #316]	@ (8007eac <HAL_UART_MspInit+0x1f4>)
 8007d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d72:	4a4e      	ldr	r2, [pc, #312]	@ (8007eac <HAL_UART_MspInit+0x1f4>)
 8007d74:	f043 0301 	orr.w	r3, r3, #1
 8007d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8007d7a:	4b4c      	ldr	r3, [pc, #304]	@ (8007eac <HAL_UART_MspInit+0x1f4>)
 8007d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d7e:	f003 0301 	and.w	r3, r3, #1
 8007d82:	61fb      	str	r3, [r7, #28]
 8007d84:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007d86:	230c      	movs	r3, #12
 8007d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d8a:	2302      	movs	r3, #2
 8007d8c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d92:	2303      	movs	r3, #3
 8007d94:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007d96:	2307      	movs	r3, #7
 8007d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007d9e:	4619      	mov	r1, r3
 8007da0:	4845      	ldr	r0, [pc, #276]	@ (8007eb8 <HAL_UART_MspInit+0x200>)
 8007da2:	f000 fef3 	bl	8008b8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007da6:	2200      	movs	r2, #0
 8007da8:	2100      	movs	r1, #0
 8007daa:	2026      	movs	r0, #38	@ 0x26
 8007dac:	f000 fe25 	bl	80089fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007db0:	2026      	movs	r0, #38	@ 0x26
 8007db2:	f000 fe3e 	bl	8008a32 <HAL_NVIC_EnableIRQ>
}
 8007db6:	e073      	b.n	8007ea0 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART3)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a3f      	ldr	r2, [pc, #252]	@ (8007ebc <HAL_UART_MspInit+0x204>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d135      	bne.n	8007e2e <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	61bb      	str	r3, [r7, #24]
 8007dc6:	4b39      	ldr	r3, [pc, #228]	@ (8007eac <HAL_UART_MspInit+0x1f4>)
 8007dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dca:	4a38      	ldr	r2, [pc, #224]	@ (8007eac <HAL_UART_MspInit+0x1f4>)
 8007dcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007dd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8007dd2:	4b36      	ldr	r3, [pc, #216]	@ (8007eac <HAL_UART_MspInit+0x1f4>)
 8007dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007dda:	61bb      	str	r3, [r7, #24]
 8007ddc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007dde:	2300      	movs	r3, #0
 8007de0:	617b      	str	r3, [r7, #20]
 8007de2:	4b32      	ldr	r3, [pc, #200]	@ (8007eac <HAL_UART_MspInit+0x1f4>)
 8007de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007de6:	4a31      	ldr	r2, [pc, #196]	@ (8007eac <HAL_UART_MspInit+0x1f4>)
 8007de8:	f043 0308 	orr.w	r3, r3, #8
 8007dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8007dee:	4b2f      	ldr	r3, [pc, #188]	@ (8007eac <HAL_UART_MspInit+0x1f4>)
 8007df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007df2:	f003 0308 	and.w	r3, r3, #8
 8007df6:	617b      	str	r3, [r7, #20]
 8007df8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007dfa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e00:	2302      	movs	r3, #2
 8007e02:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e04:	2300      	movs	r3, #0
 8007e06:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007e0c:	2307      	movs	r3, #7
 8007e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007e10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007e14:	4619      	mov	r1, r3
 8007e16:	482a      	ldr	r0, [pc, #168]	@ (8007ec0 <HAL_UART_MspInit+0x208>)
 8007e18:	f000 feb8 	bl	8008b8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	2100      	movs	r1, #0
 8007e20:	2027      	movs	r0, #39	@ 0x27
 8007e22:	f000 fdea 	bl	80089fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8007e26:	2027      	movs	r0, #39	@ 0x27
 8007e28:	f000 fe03 	bl	8008a32 <HAL_NVIC_EnableIRQ>
}
 8007e2c:	e038      	b.n	8007ea0 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART6)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a24      	ldr	r2, [pc, #144]	@ (8007ec4 <HAL_UART_MspInit+0x20c>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d133      	bne.n	8007ea0 <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART6_CLK_ENABLE();
 8007e38:	2300      	movs	r3, #0
 8007e3a:	613b      	str	r3, [r7, #16]
 8007e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8007eac <HAL_UART_MspInit+0x1f4>)
 8007e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e40:	4a1a      	ldr	r2, [pc, #104]	@ (8007eac <HAL_UART_MspInit+0x1f4>)
 8007e42:	f043 0320 	orr.w	r3, r3, #32
 8007e46:	6453      	str	r3, [r2, #68]	@ 0x44
 8007e48:	4b18      	ldr	r3, [pc, #96]	@ (8007eac <HAL_UART_MspInit+0x1f4>)
 8007e4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e4c:	f003 0320 	and.w	r3, r3, #32
 8007e50:	613b      	str	r3, [r7, #16]
 8007e52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007e54:	2300      	movs	r3, #0
 8007e56:	60fb      	str	r3, [r7, #12]
 8007e58:	4b14      	ldr	r3, [pc, #80]	@ (8007eac <HAL_UART_MspInit+0x1f4>)
 8007e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e5c:	4a13      	ldr	r2, [pc, #76]	@ (8007eac <HAL_UART_MspInit+0x1f4>)
 8007e5e:	f043 0304 	orr.w	r3, r3, #4
 8007e62:	6313      	str	r3, [r2, #48]	@ 0x30
 8007e64:	4b11      	ldr	r3, [pc, #68]	@ (8007eac <HAL_UART_MspInit+0x1f4>)
 8007e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e68:	f003 0304 	and.w	r3, r3, #4
 8007e6c:	60fb      	str	r3, [r7, #12]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007e70:	23c0      	movs	r3, #192	@ 0xc0
 8007e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e74:	2302      	movs	r3, #2
 8007e76:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e7c:	2303      	movs	r3, #3
 8007e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007e80:	2308      	movs	r3, #8
 8007e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007e84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007e88:	4619      	mov	r1, r3
 8007e8a:	480f      	ldr	r0, [pc, #60]	@ (8007ec8 <HAL_UART_MspInit+0x210>)
 8007e8c:	f000 fe7e 	bl	8008b8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8007e90:	2200      	movs	r2, #0
 8007e92:	2100      	movs	r1, #0
 8007e94:	2047      	movs	r0, #71	@ 0x47
 8007e96:	f000 fdb0 	bl	80089fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8007e9a:	2047      	movs	r0, #71	@ 0x47
 8007e9c:	f000 fdc9 	bl	8008a32 <HAL_NVIC_EnableIRQ>
}
 8007ea0:	bf00      	nop
 8007ea2:	3740      	adds	r7, #64	@ 0x40
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	40011000 	.word	0x40011000
 8007eac:	40023800 	.word	0x40023800
 8007eb0:	40020400 	.word	0x40020400
 8007eb4:	40004400 	.word	0x40004400
 8007eb8:	40020000 	.word	0x40020000
 8007ebc:	40004800 	.word	0x40004800
 8007ec0:	40020c00 	.word	0x40020c00
 8007ec4:	40011400 	.word	0x40011400
 8007ec8:	40020800 	.word	0x40020800

08007ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007ed0:	bf00      	nop
 8007ed2:	e7fd      	b.n	8007ed0 <NMI_Handler+0x4>

08007ed4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007ed8:	bf00      	nop
 8007eda:	e7fd      	b.n	8007ed8 <HardFault_Handler+0x4>

08007edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007edc:	b480      	push	{r7}
 8007ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007ee0:	bf00      	nop
 8007ee2:	e7fd      	b.n	8007ee0 <MemManage_Handler+0x4>

08007ee4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007ee8:	bf00      	nop
 8007eea:	e7fd      	b.n	8007ee8 <BusFault_Handler+0x4>

08007eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007eec:	b480      	push	{r7}
 8007eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007ef0:	bf00      	nop
 8007ef2:	e7fd      	b.n	8007ef0 <UsageFault_Handler+0x4>

08007ef4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007ef8:	bf00      	nop
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr

08007f02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007f02:	b480      	push	{r7}
 8007f04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007f06:	bf00      	nop
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007f10:	b480      	push	{r7}
 8007f12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007f14:	bf00      	nop
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007f22:	f000 f917 	bl	8008154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007f26:	bf00      	nop
 8007f28:	bd80      	pop	{r7, pc}
	...

08007f2c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007f30:	4802      	ldr	r0, [pc, #8]	@ (8007f3c <CAN1_RX0_IRQHandler+0x10>)
 8007f32:	f000 fa4e 	bl	80083d2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8007f36:	bf00      	nop
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	20001784 	.word	0x20001784

08007f40 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007f44:	4802      	ldr	r0, [pc, #8]	@ (8007f50 <CAN1_RX1_IRQHandler+0x10>)
 8007f46:	f000 fa44 	bl	80083d2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8007f4a:	bf00      	nop
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	20001784 	.word	0x20001784

08007f54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007f58:	4802      	ldr	r0, [pc, #8]	@ (8007f64 <USART1_IRQHandler+0x10>)
 8007f5a:	f003 fc11 	bl	800b780 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007f5e:	bf00      	nop
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	20001a30 	.word	0x20001a30

08007f68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007f6c:	4802      	ldr	r0, [pc, #8]	@ (8007f78 <USART2_IRQHandler+0x10>)
 8007f6e:	f003 fc07 	bl	800b780 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007f72:	bf00      	nop
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	20001a78 	.word	0x20001a78

08007f7c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8007f80:	4802      	ldr	r0, [pc, #8]	@ (8007f8c <USART3_IRQHandler+0x10>)
 8007f82:	f003 fbfd 	bl	800b780 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8007f86:	bf00      	nop
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	20001ac0 	.word	0x20001ac0

08007f90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_01_Pin);
 8007f94:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8007f98:	f000 ffd8 	bl	8008f4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_02_Pin);
 8007f9c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8007fa0:	f000 ffd4 	bl	8008f4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_03_Pin);
 8007fa4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8007fa8:	f000 ffd0 	bl	8008f4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_04_Pin);
 8007fac:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007fb0:	f000 ffcc 	bl	8008f4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007fb4:	bf00      	nop
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8007fbc:	4802      	ldr	r0, [pc, #8]	@ (8007fc8 <USART6_IRQHandler+0x10>)
 8007fbe:	f003 fbdf 	bl	800b780 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8007fc2:	bf00      	nop
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	20001b08 	.word	0x20001b08

08007fcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b086      	sub	sp, #24
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007fd4:	4a14      	ldr	r2, [pc, #80]	@ (8008028 <_sbrk+0x5c>)
 8007fd6:	4b15      	ldr	r3, [pc, #84]	@ (800802c <_sbrk+0x60>)
 8007fd8:	1ad3      	subs	r3, r2, r3
 8007fda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007fe0:	4b13      	ldr	r3, [pc, #76]	@ (8008030 <_sbrk+0x64>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d102      	bne.n	8007fee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007fe8:	4b11      	ldr	r3, [pc, #68]	@ (8008030 <_sbrk+0x64>)
 8007fea:	4a12      	ldr	r2, [pc, #72]	@ (8008034 <_sbrk+0x68>)
 8007fec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007fee:	4b10      	ldr	r3, [pc, #64]	@ (8008030 <_sbrk+0x64>)
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4413      	add	r3, r2
 8007ff6:	693a      	ldr	r2, [r7, #16]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d207      	bcs.n	800800c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007ffc:	f004 fcc6 	bl	800c98c <__errno>
 8008000:	4603      	mov	r3, r0
 8008002:	220c      	movs	r2, #12
 8008004:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008006:	f04f 33ff 	mov.w	r3, #4294967295
 800800a:	e009      	b.n	8008020 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800800c:	4b08      	ldr	r3, [pc, #32]	@ (8008030 <_sbrk+0x64>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008012:	4b07      	ldr	r3, [pc, #28]	@ (8008030 <_sbrk+0x64>)
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4413      	add	r3, r2
 800801a:	4a05      	ldr	r2, [pc, #20]	@ (8008030 <_sbrk+0x64>)
 800801c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800801e:	68fb      	ldr	r3, [r7, #12]
}
 8008020:	4618      	mov	r0, r3
 8008022:	3718      	adds	r7, #24
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}
 8008028:	20030000 	.word	0x20030000
 800802c:	00000400 	.word	0x00000400
 8008030:	20001b54 	.word	0x20001b54
 8008034:	20001cb8 	.word	0x20001cb8

08008038 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008038:	b480      	push	{r7}
 800803a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800803c:	4b06      	ldr	r3, [pc, #24]	@ (8008058 <SystemInit+0x20>)
 800803e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008042:	4a05      	ldr	r2, [pc, #20]	@ (8008058 <SystemInit+0x20>)
 8008044:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008048:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800804c:	bf00      	nop
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop
 8008058:	e000ed00 	.word	0xe000ed00

0800805c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800805c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008094 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008060:	f7ff ffea 	bl	8008038 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008064:	480c      	ldr	r0, [pc, #48]	@ (8008098 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008066:	490d      	ldr	r1, [pc, #52]	@ (800809c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008068:	4a0d      	ldr	r2, [pc, #52]	@ (80080a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800806a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800806c:	e002      	b.n	8008074 <LoopCopyDataInit>

0800806e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800806e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008072:	3304      	adds	r3, #4

08008074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008078:	d3f9      	bcc.n	800806e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800807a:	4a0a      	ldr	r2, [pc, #40]	@ (80080a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800807c:	4c0a      	ldr	r4, [pc, #40]	@ (80080a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800807e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008080:	e001      	b.n	8008086 <LoopFillZerobss>

08008082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008084:	3204      	adds	r2, #4

08008086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008088:	d3fb      	bcc.n	8008082 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800808a:	f004 fc85 	bl	800c998 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800808e:	f7fe fca9 	bl	80069e4 <main>
  bx  lr    
 8008092:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8008094:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8008098:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800809c:	20000984 	.word	0x20000984
  ldr r2, =_sidata
 80080a0:	0800dfd4 	.word	0x0800dfd4
  ldr r2, =_sbss
 80080a4:	20000984 	.word	0x20000984
  ldr r4, =_ebss
 80080a8:	20001cb8 	.word	0x20001cb8

080080ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80080ac:	e7fe      	b.n	80080ac <ADC_IRQHandler>
	...

080080b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80080b4:	4b0e      	ldr	r3, [pc, #56]	@ (80080f0 <HAL_Init+0x40>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a0d      	ldr	r2, [pc, #52]	@ (80080f0 <HAL_Init+0x40>)
 80080ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80080be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80080c0:	4b0b      	ldr	r3, [pc, #44]	@ (80080f0 <HAL_Init+0x40>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a0a      	ldr	r2, [pc, #40]	@ (80080f0 <HAL_Init+0x40>)
 80080c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80080ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80080cc:	4b08      	ldr	r3, [pc, #32]	@ (80080f0 <HAL_Init+0x40>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a07      	ldr	r2, [pc, #28]	@ (80080f0 <HAL_Init+0x40>)
 80080d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80080d8:	2003      	movs	r0, #3
 80080da:	f000 fc83 	bl	80089e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80080de:	200f      	movs	r0, #15
 80080e0:	f000 f808 	bl	80080f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80080e4:	f7ff fb60 	bl	80077a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	40023c00 	.word	0x40023c00

080080f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80080fc:	4b12      	ldr	r3, [pc, #72]	@ (8008148 <HAL_InitTick+0x54>)
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	4b12      	ldr	r3, [pc, #72]	@ (800814c <HAL_InitTick+0x58>)
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	4619      	mov	r1, r3
 8008106:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800810a:	fbb3 f3f1 	udiv	r3, r3, r1
 800810e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008112:	4618      	mov	r0, r3
 8008114:	f000 fc9b 	bl	8008a4e <HAL_SYSTICK_Config>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d001      	beq.n	8008122 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	e00e      	b.n	8008140 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2b0f      	cmp	r3, #15
 8008126:	d80a      	bhi.n	800813e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008128:	2200      	movs	r2, #0
 800812a:	6879      	ldr	r1, [r7, #4]
 800812c:	f04f 30ff 	mov.w	r0, #4294967295
 8008130:	f000 fc63 	bl	80089fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008134:	4a06      	ldr	r2, [pc, #24]	@ (8008150 <HAL_InitTick+0x5c>)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800813a:	2300      	movs	r3, #0
 800813c:	e000      	b.n	8008140 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800813e:	2301      	movs	r3, #1
}
 8008140:	4618      	mov	r0, r3
 8008142:	3708      	adds	r7, #8
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	20000914 	.word	0x20000914
 800814c:	2000091c 	.word	0x2000091c
 8008150:	20000918 	.word	0x20000918

08008154 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008154:	b480      	push	{r7}
 8008156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008158:	4b06      	ldr	r3, [pc, #24]	@ (8008174 <HAL_IncTick+0x20>)
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	461a      	mov	r2, r3
 800815e:	4b06      	ldr	r3, [pc, #24]	@ (8008178 <HAL_IncTick+0x24>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4413      	add	r3, r2
 8008164:	4a04      	ldr	r2, [pc, #16]	@ (8008178 <HAL_IncTick+0x24>)
 8008166:	6013      	str	r3, [r2, #0]
}
 8008168:	bf00      	nop
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	2000091c 	.word	0x2000091c
 8008178:	20001b58 	.word	0x20001b58

0800817c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800817c:	b480      	push	{r7}
 800817e:	af00      	add	r7, sp, #0
  return uwTick;
 8008180:	4b03      	ldr	r3, [pc, #12]	@ (8008190 <HAL_GetTick+0x14>)
 8008182:	681b      	ldr	r3, [r3, #0]
}
 8008184:	4618      	mov	r0, r3
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr
 800818e:	bf00      	nop
 8008190:	20001b58 	.word	0x20001b58

08008194 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800819c:	f7ff ffee 	bl	800817c <HAL_GetTick>
 80081a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ac:	d005      	beq.n	80081ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80081ae:	4b0a      	ldr	r3, [pc, #40]	@ (80081d8 <HAL_Delay+0x44>)
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	461a      	mov	r2, r3
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	4413      	add	r3, r2
 80081b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80081ba:	bf00      	nop
 80081bc:	f7ff ffde 	bl	800817c <HAL_GetTick>
 80081c0:	4602      	mov	r2, r0
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	1ad3      	subs	r3, r2, r3
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d8f7      	bhi.n	80081bc <HAL_Delay+0x28>
  {
  }
}
 80081cc:	bf00      	nop
 80081ce:	bf00      	nop
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	2000091c 	.word	0x2000091c

080081dc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d101      	bne.n	80081ee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	e0ed      	b.n	80083ca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d102      	bne.n	8008200 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f7ff fafc 	bl	80077f8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f042 0201 	orr.w	r2, r2, #1
 800820e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008210:	f7ff ffb4 	bl	800817c <HAL_GetTick>
 8008214:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008216:	e012      	b.n	800823e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008218:	f7ff ffb0 	bl	800817c <HAL_GetTick>
 800821c:	4602      	mov	r2, r0
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	2b0a      	cmp	r3, #10
 8008224:	d90b      	bls.n	800823e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800822a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2205      	movs	r2, #5
 8008236:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	e0c5      	b.n	80083ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	f003 0301 	and.w	r3, r3, #1
 8008248:	2b00      	cmp	r3, #0
 800824a:	d0e5      	beq.n	8008218 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f022 0202 	bic.w	r2, r2, #2
 800825a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800825c:	f7ff ff8e 	bl	800817c <HAL_GetTick>
 8008260:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008262:	e012      	b.n	800828a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008264:	f7ff ff8a 	bl	800817c <HAL_GetTick>
 8008268:	4602      	mov	r2, r0
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	1ad3      	subs	r3, r2, r3
 800826e:	2b0a      	cmp	r3, #10
 8008270:	d90b      	bls.n	800828a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008276:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2205      	movs	r2, #5
 8008282:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	e09f      	b.n	80083ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	f003 0302 	and.w	r3, r3, #2
 8008294:	2b00      	cmp	r3, #0
 8008296:	d1e5      	bne.n	8008264 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	7e1b      	ldrb	r3, [r3, #24]
 800829c:	2b01      	cmp	r3, #1
 800829e:	d108      	bne.n	80082b2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80082ae:	601a      	str	r2, [r3, #0]
 80082b0:	e007      	b.n	80082c2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80082c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	7e5b      	ldrb	r3, [r3, #25]
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d108      	bne.n	80082dc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80082d8:	601a      	str	r2, [r3, #0]
 80082da:	e007      	b.n	80082ec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80082ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	7e9b      	ldrb	r3, [r3, #26]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d108      	bne.n	8008306 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f042 0220 	orr.w	r2, r2, #32
 8008302:	601a      	str	r2, [r3, #0]
 8008304:	e007      	b.n	8008316 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f022 0220 	bic.w	r2, r2, #32
 8008314:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	7edb      	ldrb	r3, [r3, #27]
 800831a:	2b01      	cmp	r3, #1
 800831c:	d108      	bne.n	8008330 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f022 0210 	bic.w	r2, r2, #16
 800832c:	601a      	str	r2, [r3, #0]
 800832e:	e007      	b.n	8008340 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f042 0210 	orr.w	r2, r2, #16
 800833e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	7f1b      	ldrb	r3, [r3, #28]
 8008344:	2b01      	cmp	r3, #1
 8008346:	d108      	bne.n	800835a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f042 0208 	orr.w	r2, r2, #8
 8008356:	601a      	str	r2, [r3, #0]
 8008358:	e007      	b.n	800836a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f022 0208 	bic.w	r2, r2, #8
 8008368:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	7f5b      	ldrb	r3, [r3, #29]
 800836e:	2b01      	cmp	r3, #1
 8008370:	d108      	bne.n	8008384 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f042 0204 	orr.w	r2, r2, #4
 8008380:	601a      	str	r2, [r3, #0]
 8008382:	e007      	b.n	8008394 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f022 0204 	bic.w	r2, r2, #4
 8008392:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	689a      	ldr	r2, [r3, #8]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	431a      	orrs	r2, r3
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	431a      	orrs	r2, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	695b      	ldr	r3, [r3, #20]
 80083a8:	ea42 0103 	orr.w	r1, r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	1e5a      	subs	r2, r3, #1
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	430a      	orrs	r2, r1
 80083b8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b08a      	sub	sp, #40	@ 0x28
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80083da:	2300      	movs	r3, #0
 80083dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	695b      	ldr	r3, [r3, #20]
 80083e4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	699b      	ldr	r3, [r3, #24]
 800840c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800840e:	6a3b      	ldr	r3, [r7, #32]
 8008410:	f003 0301 	and.w	r3, r3, #1
 8008414:	2b00      	cmp	r3, #0
 8008416:	d07c      	beq.n	8008512 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	f003 0301 	and.w	r3, r3, #1
 800841e:	2b00      	cmp	r3, #0
 8008420:	d023      	beq.n	800846a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2201      	movs	r2, #1
 8008428:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	f003 0302 	and.w	r3, r3, #2
 8008430:	2b00      	cmp	r3, #0
 8008432:	d003      	beq.n	800843c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 f983 	bl	8008740 <HAL_CAN_TxMailbox0CompleteCallback>
 800843a:	e016      	b.n	800846a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800843c:	69bb      	ldr	r3, [r7, #24]
 800843e:	f003 0304 	and.w	r3, r3, #4
 8008442:	2b00      	cmp	r3, #0
 8008444:	d004      	beq.n	8008450 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8008446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008448:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800844c:	627b      	str	r3, [r7, #36]	@ 0x24
 800844e:	e00c      	b.n	800846a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	f003 0308 	and.w	r3, r3, #8
 8008456:	2b00      	cmp	r3, #0
 8008458:	d004      	beq.n	8008464 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800845a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800845c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008460:	627b      	str	r3, [r7, #36]	@ 0x24
 8008462:	e002      	b.n	800846a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 f989 	bl	800877c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008470:	2b00      	cmp	r3, #0
 8008472:	d024      	beq.n	80084be <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800847c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008484:	2b00      	cmp	r3, #0
 8008486:	d003      	beq.n	8008490 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 f963 	bl	8008754 <HAL_CAN_TxMailbox1CompleteCallback>
 800848e:	e016      	b.n	80084be <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008496:	2b00      	cmp	r3, #0
 8008498:	d004      	beq.n	80084a4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800849a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80084a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80084a2:	e00c      	b.n	80084be <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80084a4:	69bb      	ldr	r3, [r7, #24]
 80084a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d004      	beq.n	80084b8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80084ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80084b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80084b6:	e002      	b.n	80084be <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 f969 	bl	8008790 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d024      	beq.n	8008512 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80084d0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d003      	beq.n	80084e4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 f943 	bl	8008768 <HAL_CAN_TxMailbox2CompleteCallback>
 80084e2:	e016      	b.n	8008512 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d004      	beq.n	80084f8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80084ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80084f6:	e00c      	b.n	8008512 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d004      	beq.n	800850c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8008502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008508:	627b      	str	r3, [r7, #36]	@ 0x24
 800850a:	e002      	b.n	8008512 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 f949 	bl	80087a4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8008512:	6a3b      	ldr	r3, [r7, #32]
 8008514:	f003 0308 	and.w	r3, r3, #8
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00c      	beq.n	8008536 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	f003 0310 	and.w	r3, r3, #16
 8008522:	2b00      	cmp	r3, #0
 8008524:	d007      	beq.n	8008536 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8008526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008528:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800852c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2210      	movs	r2, #16
 8008534:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8008536:	6a3b      	ldr	r3, [r7, #32]
 8008538:	f003 0304 	and.w	r3, r3, #4
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00b      	beq.n	8008558 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	f003 0308 	and.w	r3, r3, #8
 8008546:	2b00      	cmp	r3, #0
 8008548:	d006      	beq.n	8008558 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2208      	movs	r2, #8
 8008550:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 f93a 	bl	80087cc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8008558:	6a3b      	ldr	r3, [r7, #32]
 800855a:	f003 0302 	and.w	r3, r3, #2
 800855e:	2b00      	cmp	r3, #0
 8008560:	d009      	beq.n	8008576 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	f003 0303 	and.w	r3, r3, #3
 800856c:	2b00      	cmp	r3, #0
 800856e:	d002      	beq.n	8008576 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 f921 	bl	80087b8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8008576:	6a3b      	ldr	r3, [r7, #32]
 8008578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800857c:	2b00      	cmp	r3, #0
 800857e:	d00c      	beq.n	800859a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	f003 0310 	and.w	r3, r3, #16
 8008586:	2b00      	cmp	r3, #0
 8008588:	d007      	beq.n	800859a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800858a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800858c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008590:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	2210      	movs	r2, #16
 8008598:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800859a:	6a3b      	ldr	r3, [r7, #32]
 800859c:	f003 0320 	and.w	r3, r3, #32
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00b      	beq.n	80085bc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	f003 0308 	and.w	r3, r3, #8
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d006      	beq.n	80085bc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2208      	movs	r2, #8
 80085b4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f91c 	bl	80087f4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80085bc:	6a3b      	ldr	r3, [r7, #32]
 80085be:	f003 0310 	and.w	r3, r3, #16
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d009      	beq.n	80085da <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	691b      	ldr	r3, [r3, #16]
 80085cc:	f003 0303 	and.w	r3, r3, #3
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d002      	beq.n	80085da <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 f903 	bl	80087e0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80085da:	6a3b      	ldr	r3, [r7, #32]
 80085dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00b      	beq.n	80085fc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	f003 0310 	and.w	r3, r3, #16
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d006      	beq.n	80085fc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	2210      	movs	r2, #16
 80085f4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 f906 	bl	8008808 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80085fc:	6a3b      	ldr	r3, [r7, #32]
 80085fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00b      	beq.n	800861e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	f003 0308 	and.w	r3, r3, #8
 800860c:	2b00      	cmp	r3, #0
 800860e:	d006      	beq.n	800861e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2208      	movs	r2, #8
 8008616:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 f8ff 	bl	800881c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800861e:	6a3b      	ldr	r3, [r7, #32]
 8008620:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008624:	2b00      	cmp	r3, #0
 8008626:	d07b      	beq.n	8008720 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	f003 0304 	and.w	r3, r3, #4
 800862e:	2b00      	cmp	r3, #0
 8008630:	d072      	beq.n	8008718 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8008632:	6a3b      	ldr	r3, [r7, #32]
 8008634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008638:	2b00      	cmp	r3, #0
 800863a:	d008      	beq.n	800864e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8008642:	2b00      	cmp	r3, #0
 8008644:	d003      	beq.n	800864e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8008646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008648:	f043 0301 	orr.w	r3, r3, #1
 800864c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800864e:	6a3b      	ldr	r3, [r7, #32]
 8008650:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008654:	2b00      	cmp	r3, #0
 8008656:	d008      	beq.n	800866a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800865e:	2b00      	cmp	r3, #0
 8008660:	d003      	beq.n	800866a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8008662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008664:	f043 0302 	orr.w	r3, r3, #2
 8008668:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800866a:	6a3b      	ldr	r3, [r7, #32]
 800866c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008670:	2b00      	cmp	r3, #0
 8008672:	d008      	beq.n	8008686 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800867a:	2b00      	cmp	r3, #0
 800867c:	d003      	beq.n	8008686 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800867e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008680:	f043 0304 	orr.w	r3, r3, #4
 8008684:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8008686:	6a3b      	ldr	r3, [r7, #32]
 8008688:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800868c:	2b00      	cmp	r3, #0
 800868e:	d043      	beq.n	8008718 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8008696:	2b00      	cmp	r3, #0
 8008698:	d03e      	beq.n	8008718 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80086a0:	2b60      	cmp	r3, #96	@ 0x60
 80086a2:	d02b      	beq.n	80086fc <HAL_CAN_IRQHandler+0x32a>
 80086a4:	2b60      	cmp	r3, #96	@ 0x60
 80086a6:	d82e      	bhi.n	8008706 <HAL_CAN_IRQHandler+0x334>
 80086a8:	2b50      	cmp	r3, #80	@ 0x50
 80086aa:	d022      	beq.n	80086f2 <HAL_CAN_IRQHandler+0x320>
 80086ac:	2b50      	cmp	r3, #80	@ 0x50
 80086ae:	d82a      	bhi.n	8008706 <HAL_CAN_IRQHandler+0x334>
 80086b0:	2b40      	cmp	r3, #64	@ 0x40
 80086b2:	d019      	beq.n	80086e8 <HAL_CAN_IRQHandler+0x316>
 80086b4:	2b40      	cmp	r3, #64	@ 0x40
 80086b6:	d826      	bhi.n	8008706 <HAL_CAN_IRQHandler+0x334>
 80086b8:	2b30      	cmp	r3, #48	@ 0x30
 80086ba:	d010      	beq.n	80086de <HAL_CAN_IRQHandler+0x30c>
 80086bc:	2b30      	cmp	r3, #48	@ 0x30
 80086be:	d822      	bhi.n	8008706 <HAL_CAN_IRQHandler+0x334>
 80086c0:	2b10      	cmp	r3, #16
 80086c2:	d002      	beq.n	80086ca <HAL_CAN_IRQHandler+0x2f8>
 80086c4:	2b20      	cmp	r3, #32
 80086c6:	d005      	beq.n	80086d4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80086c8:	e01d      	b.n	8008706 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80086ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086cc:	f043 0308 	orr.w	r3, r3, #8
 80086d0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80086d2:	e019      	b.n	8008708 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80086d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d6:	f043 0310 	orr.w	r3, r3, #16
 80086da:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80086dc:	e014      	b.n	8008708 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80086de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e0:	f043 0320 	orr.w	r3, r3, #32
 80086e4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80086e6:	e00f      	b.n	8008708 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80086e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086ee:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80086f0:	e00a      	b.n	8008708 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80086f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086f8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80086fa:	e005      	b.n	8008708 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80086fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008702:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8008704:	e000      	b.n	8008708 <HAL_CAN_IRQHandler+0x336>
            break;
 8008706:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	699a      	ldr	r2, [r3, #24]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8008716:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2204      	movs	r2, #4
 800871e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8008720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008722:	2b00      	cmp	r3, #0
 8008724:	d008      	beq.n	8008738 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800872a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800872c:	431a      	orrs	r2, r3
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 f87c 	bl	8008830 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8008738:	bf00      	nop
 800873a:	3728      	adds	r7, #40	@ 0x28
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800875c:	bf00      	nop
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8008770:	bf00      	nop
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8008784:	bf00      	nop
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8008798:	bf00      	nop
 800879a:	370c      	adds	r7, #12
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80087ac:	bf00      	nop
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80087c0:	bf00      	nop
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr

080087cc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80087d4:	bf00      	nop
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80087e8:	bf00      	nop
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80087fc:	bf00      	nop
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8008810:	bf00      	nop
 8008812:	370c      	adds	r7, #12
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8008824:	bf00      	nop
 8008826:	370c      	adds	r7, #12
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr

08008830 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8008838:	bf00      	nop
 800883a:	370c      	adds	r7, #12
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008844:	b480      	push	{r7}
 8008846:	b085      	sub	sp, #20
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f003 0307 	and.w	r3, r3, #7
 8008852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008854:	4b0c      	ldr	r3, [pc, #48]	@ (8008888 <__NVIC_SetPriorityGrouping+0x44>)
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800885a:	68ba      	ldr	r2, [r7, #8]
 800885c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008860:	4013      	ands	r3, r2
 8008862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800886c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008870:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008876:	4a04      	ldr	r2, [pc, #16]	@ (8008888 <__NVIC_SetPriorityGrouping+0x44>)
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	60d3      	str	r3, [r2, #12]
}
 800887c:	bf00      	nop
 800887e:	3714      	adds	r7, #20
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr
 8008888:	e000ed00 	.word	0xe000ed00

0800888c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800888c:	b480      	push	{r7}
 800888e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008890:	4b04      	ldr	r3, [pc, #16]	@ (80088a4 <__NVIC_GetPriorityGrouping+0x18>)
 8008892:	68db      	ldr	r3, [r3, #12]
 8008894:	0a1b      	lsrs	r3, r3, #8
 8008896:	f003 0307 	and.w	r3, r3, #7
}
 800889a:	4618      	mov	r0, r3
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr
 80088a4:	e000ed00 	.word	0xe000ed00

080088a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	4603      	mov	r3, r0
 80088b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80088b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	db0b      	blt.n	80088d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80088ba:	79fb      	ldrb	r3, [r7, #7]
 80088bc:	f003 021f 	and.w	r2, r3, #31
 80088c0:	4907      	ldr	r1, [pc, #28]	@ (80088e0 <__NVIC_EnableIRQ+0x38>)
 80088c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088c6:	095b      	lsrs	r3, r3, #5
 80088c8:	2001      	movs	r0, #1
 80088ca:	fa00 f202 	lsl.w	r2, r0, r2
 80088ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80088d2:	bf00      	nop
 80088d4:	370c      	adds	r7, #12
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop
 80088e0:	e000e100 	.word	0xe000e100

080088e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	4603      	mov	r3, r0
 80088ec:	6039      	str	r1, [r7, #0]
 80088ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80088f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	db0a      	blt.n	800890e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	b2da      	uxtb	r2, r3
 80088fc:	490c      	ldr	r1, [pc, #48]	@ (8008930 <__NVIC_SetPriority+0x4c>)
 80088fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008902:	0112      	lsls	r2, r2, #4
 8008904:	b2d2      	uxtb	r2, r2
 8008906:	440b      	add	r3, r1
 8008908:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800890c:	e00a      	b.n	8008924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	b2da      	uxtb	r2, r3
 8008912:	4908      	ldr	r1, [pc, #32]	@ (8008934 <__NVIC_SetPriority+0x50>)
 8008914:	79fb      	ldrb	r3, [r7, #7]
 8008916:	f003 030f 	and.w	r3, r3, #15
 800891a:	3b04      	subs	r3, #4
 800891c:	0112      	lsls	r2, r2, #4
 800891e:	b2d2      	uxtb	r2, r2
 8008920:	440b      	add	r3, r1
 8008922:	761a      	strb	r2, [r3, #24]
}
 8008924:	bf00      	nop
 8008926:	370c      	adds	r7, #12
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr
 8008930:	e000e100 	.word	0xe000e100
 8008934:	e000ed00 	.word	0xe000ed00

08008938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008938:	b480      	push	{r7}
 800893a:	b089      	sub	sp, #36	@ 0x24
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f003 0307 	and.w	r3, r3, #7
 800894a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800894c:	69fb      	ldr	r3, [r7, #28]
 800894e:	f1c3 0307 	rsb	r3, r3, #7
 8008952:	2b04      	cmp	r3, #4
 8008954:	bf28      	it	cs
 8008956:	2304      	movcs	r3, #4
 8008958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	3304      	adds	r3, #4
 800895e:	2b06      	cmp	r3, #6
 8008960:	d902      	bls.n	8008968 <NVIC_EncodePriority+0x30>
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	3b03      	subs	r3, #3
 8008966:	e000      	b.n	800896a <NVIC_EncodePriority+0x32>
 8008968:	2300      	movs	r3, #0
 800896a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800896c:	f04f 32ff 	mov.w	r2, #4294967295
 8008970:	69bb      	ldr	r3, [r7, #24]
 8008972:	fa02 f303 	lsl.w	r3, r2, r3
 8008976:	43da      	mvns	r2, r3
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	401a      	ands	r2, r3
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008980:	f04f 31ff 	mov.w	r1, #4294967295
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	fa01 f303 	lsl.w	r3, r1, r3
 800898a:	43d9      	mvns	r1, r3
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008990:	4313      	orrs	r3, r2
         );
}
 8008992:	4618      	mov	r0, r3
 8008994:	3724      	adds	r7, #36	@ 0x24
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr
	...

080089a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	3b01      	subs	r3, #1
 80089ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80089b0:	d301      	bcc.n	80089b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80089b2:	2301      	movs	r3, #1
 80089b4:	e00f      	b.n	80089d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80089b6:	4a0a      	ldr	r2, [pc, #40]	@ (80089e0 <SysTick_Config+0x40>)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	3b01      	subs	r3, #1
 80089bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80089be:	210f      	movs	r1, #15
 80089c0:	f04f 30ff 	mov.w	r0, #4294967295
 80089c4:	f7ff ff8e 	bl	80088e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80089c8:	4b05      	ldr	r3, [pc, #20]	@ (80089e0 <SysTick_Config+0x40>)
 80089ca:	2200      	movs	r2, #0
 80089cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80089ce:	4b04      	ldr	r3, [pc, #16]	@ (80089e0 <SysTick_Config+0x40>)
 80089d0:	2207      	movs	r2, #7
 80089d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3708      	adds	r7, #8
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	e000e010 	.word	0xe000e010

080089e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f7ff ff29 	bl	8008844 <__NVIC_SetPriorityGrouping>
}
 80089f2:	bf00      	nop
 80089f4:	3708      	adds	r7, #8
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b086      	sub	sp, #24
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	4603      	mov	r3, r0
 8008a02:	60b9      	str	r1, [r7, #8]
 8008a04:	607a      	str	r2, [r7, #4]
 8008a06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008a0c:	f7ff ff3e 	bl	800888c <__NVIC_GetPriorityGrouping>
 8008a10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	68b9      	ldr	r1, [r7, #8]
 8008a16:	6978      	ldr	r0, [r7, #20]
 8008a18:	f7ff ff8e 	bl	8008938 <NVIC_EncodePriority>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a22:	4611      	mov	r1, r2
 8008a24:	4618      	mov	r0, r3
 8008a26:	f7ff ff5d 	bl	80088e4 <__NVIC_SetPriority>
}
 8008a2a:	bf00      	nop
 8008a2c:	3718      	adds	r7, #24
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b082      	sub	sp, #8
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	4603      	mov	r3, r0
 8008a3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7ff ff31 	bl	80088a8 <__NVIC_EnableIRQ>
}
 8008a46:	bf00      	nop
 8008a48:	3708      	adds	r7, #8
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b082      	sub	sp, #8
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f7ff ffa2 	bl	80089a0 <SysTick_Config>
 8008a5c:	4603      	mov	r3, r0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3708      	adds	r7, #8
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b084      	sub	sp, #16
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a72:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008a74:	f7ff fb82 	bl	800817c <HAL_GetTick>
 8008a78:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	2b02      	cmp	r3, #2
 8008a84:	d008      	beq.n	8008a98 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2280      	movs	r2, #128	@ 0x80
 8008a8a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	e052      	b.n	8008b3e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f022 0216 	bic.w	r2, r2, #22
 8008aa6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	695a      	ldr	r2, [r3, #20]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008ab6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d103      	bne.n	8008ac8 <HAL_DMA_Abort+0x62>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d007      	beq.n	8008ad8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f022 0208 	bic.w	r2, r2, #8
 8008ad6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f022 0201 	bic.w	r2, r2, #1
 8008ae6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008ae8:	e013      	b.n	8008b12 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008aea:	f7ff fb47 	bl	800817c <HAL_GetTick>
 8008aee:	4602      	mov	r2, r0
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	1ad3      	subs	r3, r2, r3
 8008af4:	2b05      	cmp	r3, #5
 8008af6:	d90c      	bls.n	8008b12 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2220      	movs	r2, #32
 8008afc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2203      	movs	r2, #3
 8008b02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8008b0e:	2303      	movs	r3, #3
 8008b10:	e015      	b.n	8008b3e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f003 0301 	and.w	r3, r3, #1
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d1e4      	bne.n	8008aea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b24:	223f      	movs	r2, #63	@ 0x3f
 8008b26:	409a      	lsls	r2, r3
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8008b3c:	2300      	movs	r3, #0
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008b46:	b480      	push	{r7}
 8008b48:	b083      	sub	sp, #12
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d004      	beq.n	8008b64 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2280      	movs	r2, #128	@ 0x80
 8008b5e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	e00c      	b.n	8008b7e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2205      	movs	r2, #5
 8008b68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f022 0201 	bic.w	r2, r2, #1
 8008b7a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008b7c:	2300      	movs	r3, #0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	370c      	adds	r7, #12
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr
	...

08008b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b089      	sub	sp, #36	@ 0x24
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008b96:	2300      	movs	r3, #0
 8008b98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	61fb      	str	r3, [r7, #28]
 8008ba6:	e177      	b.n	8008e98 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008ba8:	2201      	movs	r2, #1
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	697a      	ldr	r2, [r7, #20]
 8008bb8:	4013      	ands	r3, r2
 8008bba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008bbc:	693a      	ldr	r2, [r7, #16]
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	f040 8166 	bne.w	8008e92 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	f003 0303 	and.w	r3, r3, #3
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d005      	beq.n	8008bde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008bda:	2b02      	cmp	r3, #2
 8008bdc:	d130      	bne.n	8008c40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	005b      	lsls	r3, r3, #1
 8008be8:	2203      	movs	r2, #3
 8008bea:	fa02 f303 	lsl.w	r3, r2, r3
 8008bee:	43db      	mvns	r3, r3
 8008bf0:	69ba      	ldr	r2, [r7, #24]
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	68da      	ldr	r2, [r3, #12]
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	005b      	lsls	r3, r3, #1
 8008bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8008c02:	69ba      	ldr	r2, [r7, #24]
 8008c04:	4313      	orrs	r3, r2
 8008c06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	69ba      	ldr	r2, [r7, #24]
 8008c0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008c14:	2201      	movs	r2, #1
 8008c16:	69fb      	ldr	r3, [r7, #28]
 8008c18:	fa02 f303 	lsl.w	r3, r2, r3
 8008c1c:	43db      	mvns	r3, r3
 8008c1e:	69ba      	ldr	r2, [r7, #24]
 8008c20:	4013      	ands	r3, r2
 8008c22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	091b      	lsrs	r3, r3, #4
 8008c2a:	f003 0201 	and.w	r2, r3, #1
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	fa02 f303 	lsl.w	r3, r2, r3
 8008c34:	69ba      	ldr	r2, [r7, #24]
 8008c36:	4313      	orrs	r3, r2
 8008c38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	69ba      	ldr	r2, [r7, #24]
 8008c3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	f003 0303 	and.w	r3, r3, #3
 8008c48:	2b03      	cmp	r3, #3
 8008c4a:	d017      	beq.n	8008c7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	68db      	ldr	r3, [r3, #12]
 8008c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	005b      	lsls	r3, r3, #1
 8008c56:	2203      	movs	r2, #3
 8008c58:	fa02 f303 	lsl.w	r3, r2, r3
 8008c5c:	43db      	mvns	r3, r3
 8008c5e:	69ba      	ldr	r2, [r7, #24]
 8008c60:	4013      	ands	r3, r2
 8008c62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	689a      	ldr	r2, [r3, #8]
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	005b      	lsls	r3, r3, #1
 8008c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c70:	69ba      	ldr	r2, [r7, #24]
 8008c72:	4313      	orrs	r3, r2
 8008c74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	69ba      	ldr	r2, [r7, #24]
 8008c7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	f003 0303 	and.w	r3, r3, #3
 8008c84:	2b02      	cmp	r3, #2
 8008c86:	d123      	bne.n	8008cd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	08da      	lsrs	r2, r3, #3
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	3208      	adds	r2, #8
 8008c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	f003 0307 	and.w	r3, r3, #7
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	220f      	movs	r2, #15
 8008ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca4:	43db      	mvns	r3, r3
 8008ca6:	69ba      	ldr	r2, [r7, #24]
 8008ca8:	4013      	ands	r3, r2
 8008caa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	691a      	ldr	r2, [r3, #16]
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	f003 0307 	and.w	r3, r3, #7
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8008cbc:	69ba      	ldr	r2, [r7, #24]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008cc2:	69fb      	ldr	r3, [r7, #28]
 8008cc4:	08da      	lsrs	r2, r3, #3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	3208      	adds	r2, #8
 8008cca:	69b9      	ldr	r1, [r7, #24]
 8008ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	005b      	lsls	r3, r3, #1
 8008cda:	2203      	movs	r2, #3
 8008cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce0:	43db      	mvns	r3, r3
 8008ce2:	69ba      	ldr	r2, [r7, #24]
 8008ce4:	4013      	ands	r3, r2
 8008ce6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	f003 0203 	and.w	r2, r3, #3
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	005b      	lsls	r3, r3, #1
 8008cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8008cf8:	69ba      	ldr	r2, [r7, #24]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	69ba      	ldr	r2, [r7, #24]
 8008d02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	f000 80c0 	beq.w	8008e92 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d12:	2300      	movs	r3, #0
 8008d14:	60fb      	str	r3, [r7, #12]
 8008d16:	4b66      	ldr	r3, [pc, #408]	@ (8008eb0 <HAL_GPIO_Init+0x324>)
 8008d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d1a:	4a65      	ldr	r2, [pc, #404]	@ (8008eb0 <HAL_GPIO_Init+0x324>)
 8008d1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008d20:	6453      	str	r3, [r2, #68]	@ 0x44
 8008d22:	4b63      	ldr	r3, [pc, #396]	@ (8008eb0 <HAL_GPIO_Init+0x324>)
 8008d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d2a:	60fb      	str	r3, [r7, #12]
 8008d2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008d2e:	4a61      	ldr	r2, [pc, #388]	@ (8008eb4 <HAL_GPIO_Init+0x328>)
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	089b      	lsrs	r3, r3, #2
 8008d34:	3302      	adds	r3, #2
 8008d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	f003 0303 	and.w	r3, r3, #3
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	220f      	movs	r2, #15
 8008d46:	fa02 f303 	lsl.w	r3, r2, r3
 8008d4a:	43db      	mvns	r3, r3
 8008d4c:	69ba      	ldr	r2, [r7, #24]
 8008d4e:	4013      	ands	r3, r2
 8008d50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4a58      	ldr	r2, [pc, #352]	@ (8008eb8 <HAL_GPIO_Init+0x32c>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d037      	beq.n	8008dca <HAL_GPIO_Init+0x23e>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4a57      	ldr	r2, [pc, #348]	@ (8008ebc <HAL_GPIO_Init+0x330>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d031      	beq.n	8008dc6 <HAL_GPIO_Init+0x23a>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a56      	ldr	r2, [pc, #344]	@ (8008ec0 <HAL_GPIO_Init+0x334>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d02b      	beq.n	8008dc2 <HAL_GPIO_Init+0x236>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4a55      	ldr	r2, [pc, #340]	@ (8008ec4 <HAL_GPIO_Init+0x338>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d025      	beq.n	8008dbe <HAL_GPIO_Init+0x232>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	4a54      	ldr	r2, [pc, #336]	@ (8008ec8 <HAL_GPIO_Init+0x33c>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d01f      	beq.n	8008dba <HAL_GPIO_Init+0x22e>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	4a53      	ldr	r2, [pc, #332]	@ (8008ecc <HAL_GPIO_Init+0x340>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d019      	beq.n	8008db6 <HAL_GPIO_Init+0x22a>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	4a52      	ldr	r2, [pc, #328]	@ (8008ed0 <HAL_GPIO_Init+0x344>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d013      	beq.n	8008db2 <HAL_GPIO_Init+0x226>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4a51      	ldr	r2, [pc, #324]	@ (8008ed4 <HAL_GPIO_Init+0x348>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d00d      	beq.n	8008dae <HAL_GPIO_Init+0x222>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4a50      	ldr	r2, [pc, #320]	@ (8008ed8 <HAL_GPIO_Init+0x34c>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d007      	beq.n	8008daa <HAL_GPIO_Init+0x21e>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4a4f      	ldr	r2, [pc, #316]	@ (8008edc <HAL_GPIO_Init+0x350>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d101      	bne.n	8008da6 <HAL_GPIO_Init+0x21a>
 8008da2:	2309      	movs	r3, #9
 8008da4:	e012      	b.n	8008dcc <HAL_GPIO_Init+0x240>
 8008da6:	230a      	movs	r3, #10
 8008da8:	e010      	b.n	8008dcc <HAL_GPIO_Init+0x240>
 8008daa:	2308      	movs	r3, #8
 8008dac:	e00e      	b.n	8008dcc <HAL_GPIO_Init+0x240>
 8008dae:	2307      	movs	r3, #7
 8008db0:	e00c      	b.n	8008dcc <HAL_GPIO_Init+0x240>
 8008db2:	2306      	movs	r3, #6
 8008db4:	e00a      	b.n	8008dcc <HAL_GPIO_Init+0x240>
 8008db6:	2305      	movs	r3, #5
 8008db8:	e008      	b.n	8008dcc <HAL_GPIO_Init+0x240>
 8008dba:	2304      	movs	r3, #4
 8008dbc:	e006      	b.n	8008dcc <HAL_GPIO_Init+0x240>
 8008dbe:	2303      	movs	r3, #3
 8008dc0:	e004      	b.n	8008dcc <HAL_GPIO_Init+0x240>
 8008dc2:	2302      	movs	r3, #2
 8008dc4:	e002      	b.n	8008dcc <HAL_GPIO_Init+0x240>
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e000      	b.n	8008dcc <HAL_GPIO_Init+0x240>
 8008dca:	2300      	movs	r3, #0
 8008dcc:	69fa      	ldr	r2, [r7, #28]
 8008dce:	f002 0203 	and.w	r2, r2, #3
 8008dd2:	0092      	lsls	r2, r2, #2
 8008dd4:	4093      	lsls	r3, r2
 8008dd6:	69ba      	ldr	r2, [r7, #24]
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008ddc:	4935      	ldr	r1, [pc, #212]	@ (8008eb4 <HAL_GPIO_Init+0x328>)
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	089b      	lsrs	r3, r3, #2
 8008de2:	3302      	adds	r3, #2
 8008de4:	69ba      	ldr	r2, [r7, #24]
 8008de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008dea:	4b3d      	ldr	r3, [pc, #244]	@ (8008ee0 <HAL_GPIO_Init+0x354>)
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	43db      	mvns	r3, r3
 8008df4:	69ba      	ldr	r2, [r7, #24]
 8008df6:	4013      	ands	r3, r2
 8008df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d003      	beq.n	8008e0e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008e06:	69ba      	ldr	r2, [r7, #24]
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008e0e:	4a34      	ldr	r2, [pc, #208]	@ (8008ee0 <HAL_GPIO_Init+0x354>)
 8008e10:	69bb      	ldr	r3, [r7, #24]
 8008e12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008e14:	4b32      	ldr	r3, [pc, #200]	@ (8008ee0 <HAL_GPIO_Init+0x354>)
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	43db      	mvns	r3, r3
 8008e1e:	69ba      	ldr	r2, [r7, #24]
 8008e20:	4013      	ands	r3, r2
 8008e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d003      	beq.n	8008e38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008e30:	69ba      	ldr	r2, [r7, #24]
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	4313      	orrs	r3, r2
 8008e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008e38:	4a29      	ldr	r2, [pc, #164]	@ (8008ee0 <HAL_GPIO_Init+0x354>)
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008e3e:	4b28      	ldr	r3, [pc, #160]	@ (8008ee0 <HAL_GPIO_Init+0x354>)
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	43db      	mvns	r3, r3
 8008e48:	69ba      	ldr	r2, [r7, #24]
 8008e4a:	4013      	ands	r3, r2
 8008e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d003      	beq.n	8008e62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008e5a:	69ba      	ldr	r2, [r7, #24]
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008e62:	4a1f      	ldr	r2, [pc, #124]	@ (8008ee0 <HAL_GPIO_Init+0x354>)
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008e68:	4b1d      	ldr	r3, [pc, #116]	@ (8008ee0 <HAL_GPIO_Init+0x354>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	43db      	mvns	r3, r3
 8008e72:	69ba      	ldr	r2, [r7, #24]
 8008e74:	4013      	ands	r3, r2
 8008e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d003      	beq.n	8008e8c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008e84:	69ba      	ldr	r2, [r7, #24]
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008e8c:	4a14      	ldr	r2, [pc, #80]	@ (8008ee0 <HAL_GPIO_Init+0x354>)
 8008e8e:	69bb      	ldr	r3, [r7, #24]
 8008e90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	3301      	adds	r3, #1
 8008e96:	61fb      	str	r3, [r7, #28]
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	2b0f      	cmp	r3, #15
 8008e9c:	f67f ae84 	bls.w	8008ba8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008ea0:	bf00      	nop
 8008ea2:	bf00      	nop
 8008ea4:	3724      	adds	r7, #36	@ 0x24
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	40023800 	.word	0x40023800
 8008eb4:	40013800 	.word	0x40013800
 8008eb8:	40020000 	.word	0x40020000
 8008ebc:	40020400 	.word	0x40020400
 8008ec0:	40020800 	.word	0x40020800
 8008ec4:	40020c00 	.word	0x40020c00
 8008ec8:	40021000 	.word	0x40021000
 8008ecc:	40021400 	.word	0x40021400
 8008ed0:	40021800 	.word	0x40021800
 8008ed4:	40021c00 	.word	0x40021c00
 8008ed8:	40022000 	.word	0x40022000
 8008edc:	40022400 	.word	0x40022400
 8008ee0:	40013c00 	.word	0x40013c00

08008ee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	460b      	mov	r3, r1
 8008eee:	807b      	strh	r3, [r7, #2]
 8008ef0:	4613      	mov	r3, r2
 8008ef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008ef4:	787b      	ldrb	r3, [r7, #1]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d003      	beq.n	8008f02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008efa:	887a      	ldrh	r2, [r7, #2]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008f00:	e003      	b.n	8008f0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008f02:	887b      	ldrh	r3, [r7, #2]
 8008f04:	041a      	lsls	r2, r3, #16
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	619a      	str	r2, [r3, #24]
}
 8008f0a:	bf00      	nop
 8008f0c:	370c      	adds	r7, #12
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr

08008f16 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008f16:	b480      	push	{r7}
 8008f18:	b085      	sub	sp, #20
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
 8008f1e:	460b      	mov	r3, r1
 8008f20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	695b      	ldr	r3, [r3, #20]
 8008f26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008f28:	887a      	ldrh	r2, [r7, #2]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	4013      	ands	r3, r2
 8008f2e:	041a      	lsls	r2, r3, #16
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	43d9      	mvns	r1, r3
 8008f34:	887b      	ldrh	r3, [r7, #2]
 8008f36:	400b      	ands	r3, r1
 8008f38:	431a      	orrs	r2, r3
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	619a      	str	r2, [r3, #24]
}
 8008f3e:	bf00      	nop
 8008f40:	3714      	adds	r7, #20
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr
	...

08008f4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	4603      	mov	r3, r0
 8008f54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008f56:	4b08      	ldr	r3, [pc, #32]	@ (8008f78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008f58:	695a      	ldr	r2, [r3, #20]
 8008f5a:	88fb      	ldrh	r3, [r7, #6]
 8008f5c:	4013      	ands	r3, r2
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d006      	beq.n	8008f70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008f62:	4a05      	ldr	r2, [pc, #20]	@ (8008f78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008f64:	88fb      	ldrh	r3, [r7, #6]
 8008f66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008f68:	88fb      	ldrh	r3, [r7, #6]
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7fe fc08 	bl	8007780 <HAL_GPIO_EXTI_Callback>
  }
}
 8008f70:	bf00      	nop
 8008f72:	3708      	adds	r7, #8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	40013c00 	.word	0x40013c00

08008f7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d101      	bne.n	8008f8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e12b      	b.n	80091e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f94:	b2db      	uxtb	r3, r3
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d106      	bne.n	8008fa8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f7fe fcd8 	bl	8007958 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2224      	movs	r2, #36	@ 0x24
 8008fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f022 0201 	bic.w	r2, r2, #1
 8008fbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008fce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008fde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008fe0:	f001 fc9c 	bl	800a91c <HAL_RCC_GetPCLK1Freq>
 8008fe4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	4a81      	ldr	r2, [pc, #516]	@ (80091f0 <HAL_I2C_Init+0x274>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d807      	bhi.n	8009000 <HAL_I2C_Init+0x84>
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	4a80      	ldr	r2, [pc, #512]	@ (80091f4 <HAL_I2C_Init+0x278>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	bf94      	ite	ls
 8008ff8:	2301      	movls	r3, #1
 8008ffa:	2300      	movhi	r3, #0
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	e006      	b.n	800900e <HAL_I2C_Init+0x92>
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	4a7d      	ldr	r2, [pc, #500]	@ (80091f8 <HAL_I2C_Init+0x27c>)
 8009004:	4293      	cmp	r3, r2
 8009006:	bf94      	ite	ls
 8009008:	2301      	movls	r3, #1
 800900a:	2300      	movhi	r3, #0
 800900c:	b2db      	uxtb	r3, r3
 800900e:	2b00      	cmp	r3, #0
 8009010:	d001      	beq.n	8009016 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009012:	2301      	movs	r3, #1
 8009014:	e0e7      	b.n	80091e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	4a78      	ldr	r2, [pc, #480]	@ (80091fc <HAL_I2C_Init+0x280>)
 800901a:	fba2 2303 	umull	r2, r3, r2, r3
 800901e:	0c9b      	lsrs	r3, r3, #18
 8009020:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	68ba      	ldr	r2, [r7, #8]
 8009032:	430a      	orrs	r2, r1
 8009034:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	6a1b      	ldr	r3, [r3, #32]
 800903c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	4a6a      	ldr	r2, [pc, #424]	@ (80091f0 <HAL_I2C_Init+0x274>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d802      	bhi.n	8009050 <HAL_I2C_Init+0xd4>
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	3301      	adds	r3, #1
 800904e:	e009      	b.n	8009064 <HAL_I2C_Init+0xe8>
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8009056:	fb02 f303 	mul.w	r3, r2, r3
 800905a:	4a69      	ldr	r2, [pc, #420]	@ (8009200 <HAL_I2C_Init+0x284>)
 800905c:	fba2 2303 	umull	r2, r3, r2, r3
 8009060:	099b      	lsrs	r3, r3, #6
 8009062:	3301      	adds	r3, #1
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	6812      	ldr	r2, [r2, #0]
 8009068:	430b      	orrs	r3, r1
 800906a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	69db      	ldr	r3, [r3, #28]
 8009072:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8009076:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	495c      	ldr	r1, [pc, #368]	@ (80091f0 <HAL_I2C_Init+0x274>)
 8009080:	428b      	cmp	r3, r1
 8009082:	d819      	bhi.n	80090b8 <HAL_I2C_Init+0x13c>
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	1e59      	subs	r1, r3, #1
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	005b      	lsls	r3, r3, #1
 800908e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009092:	1c59      	adds	r1, r3, #1
 8009094:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009098:	400b      	ands	r3, r1
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00a      	beq.n	80090b4 <HAL_I2C_Init+0x138>
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	1e59      	subs	r1, r3, #1
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	005b      	lsls	r3, r3, #1
 80090a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80090ac:	3301      	adds	r3, #1
 80090ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090b2:	e051      	b.n	8009158 <HAL_I2C_Init+0x1dc>
 80090b4:	2304      	movs	r3, #4
 80090b6:	e04f      	b.n	8009158 <HAL_I2C_Init+0x1dc>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d111      	bne.n	80090e4 <HAL_I2C_Init+0x168>
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	1e58      	subs	r0, r3, #1
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6859      	ldr	r1, [r3, #4]
 80090c8:	460b      	mov	r3, r1
 80090ca:	005b      	lsls	r3, r3, #1
 80090cc:	440b      	add	r3, r1
 80090ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80090d2:	3301      	adds	r3, #1
 80090d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090d8:	2b00      	cmp	r3, #0
 80090da:	bf0c      	ite	eq
 80090dc:	2301      	moveq	r3, #1
 80090de:	2300      	movne	r3, #0
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	e012      	b.n	800910a <HAL_I2C_Init+0x18e>
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	1e58      	subs	r0, r3, #1
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6859      	ldr	r1, [r3, #4]
 80090ec:	460b      	mov	r3, r1
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	440b      	add	r3, r1
 80090f2:	0099      	lsls	r1, r3, #2
 80090f4:	440b      	add	r3, r1
 80090f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80090fa:	3301      	adds	r3, #1
 80090fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009100:	2b00      	cmp	r3, #0
 8009102:	bf0c      	ite	eq
 8009104:	2301      	moveq	r3, #1
 8009106:	2300      	movne	r3, #0
 8009108:	b2db      	uxtb	r3, r3
 800910a:	2b00      	cmp	r3, #0
 800910c:	d001      	beq.n	8009112 <HAL_I2C_Init+0x196>
 800910e:	2301      	movs	r3, #1
 8009110:	e022      	b.n	8009158 <HAL_I2C_Init+0x1dc>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d10e      	bne.n	8009138 <HAL_I2C_Init+0x1bc>
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	1e58      	subs	r0, r3, #1
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6859      	ldr	r1, [r3, #4]
 8009122:	460b      	mov	r3, r1
 8009124:	005b      	lsls	r3, r3, #1
 8009126:	440b      	add	r3, r1
 8009128:	fbb0 f3f3 	udiv	r3, r0, r3
 800912c:	3301      	adds	r3, #1
 800912e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009132:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009136:	e00f      	b.n	8009158 <HAL_I2C_Init+0x1dc>
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	1e58      	subs	r0, r3, #1
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6859      	ldr	r1, [r3, #4]
 8009140:	460b      	mov	r3, r1
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	440b      	add	r3, r1
 8009146:	0099      	lsls	r1, r3, #2
 8009148:	440b      	add	r3, r1
 800914a:	fbb0 f3f3 	udiv	r3, r0, r3
 800914e:	3301      	adds	r3, #1
 8009150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009154:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009158:	6879      	ldr	r1, [r7, #4]
 800915a:	6809      	ldr	r1, [r1, #0]
 800915c:	4313      	orrs	r3, r2
 800915e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	69da      	ldr	r2, [r3, #28]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6a1b      	ldr	r3, [r3, #32]
 8009172:	431a      	orrs	r2, r3
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	430a      	orrs	r2, r1
 800917a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	689b      	ldr	r3, [r3, #8]
 8009182:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8009186:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	6911      	ldr	r1, [r2, #16]
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	68d2      	ldr	r2, [r2, #12]
 8009192:	4311      	orrs	r1, r2
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	6812      	ldr	r2, [r2, #0]
 8009198:	430b      	orrs	r3, r1
 800919a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	695a      	ldr	r2, [r3, #20]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	699b      	ldr	r3, [r3, #24]
 80091ae:	431a      	orrs	r2, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	430a      	orrs	r2, r1
 80091b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f042 0201 	orr.w	r2, r2, #1
 80091c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2200      	movs	r2, #0
 80091cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2220      	movs	r2, #32
 80091d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2200      	movs	r2, #0
 80091e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80091e4:	2300      	movs	r3, #0
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3710      	adds	r7, #16
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop
 80091f0:	000186a0 	.word	0x000186a0
 80091f4:	001e847f 	.word	0x001e847f
 80091f8:	003d08ff 	.word	0x003d08ff
 80091fc:	431bde83 	.word	0x431bde83
 8009200:	10624dd3 	.word	0x10624dd3

08009204 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b088      	sub	sp, #32
 8009208:	af02      	add	r7, sp, #8
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	4608      	mov	r0, r1
 800920e:	4611      	mov	r1, r2
 8009210:	461a      	mov	r2, r3
 8009212:	4603      	mov	r3, r0
 8009214:	817b      	strh	r3, [r7, #10]
 8009216:	460b      	mov	r3, r1
 8009218:	813b      	strh	r3, [r7, #8]
 800921a:	4613      	mov	r3, r2
 800921c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800921e:	f7fe ffad 	bl	800817c <HAL_GetTick>
 8009222:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800922a:	b2db      	uxtb	r3, r3
 800922c:	2b20      	cmp	r3, #32
 800922e:	f040 80d9 	bne.w	80093e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	9300      	str	r3, [sp, #0]
 8009236:	2319      	movs	r3, #25
 8009238:	2201      	movs	r2, #1
 800923a:	496d      	ldr	r1, [pc, #436]	@ (80093f0 <HAL_I2C_Mem_Write+0x1ec>)
 800923c:	68f8      	ldr	r0, [r7, #12]
 800923e:	f000 fc8b 	bl	8009b58 <I2C_WaitOnFlagUntilTimeout>
 8009242:	4603      	mov	r3, r0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d001      	beq.n	800924c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009248:	2302      	movs	r3, #2
 800924a:	e0cc      	b.n	80093e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009252:	2b01      	cmp	r3, #1
 8009254:	d101      	bne.n	800925a <HAL_I2C_Mem_Write+0x56>
 8009256:	2302      	movs	r3, #2
 8009258:	e0c5      	b.n	80093e6 <HAL_I2C_Mem_Write+0x1e2>
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2201      	movs	r2, #1
 800925e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f003 0301 	and.w	r3, r3, #1
 800926c:	2b01      	cmp	r3, #1
 800926e:	d007      	beq.n	8009280 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f042 0201 	orr.w	r2, r2, #1
 800927e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800928e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2221      	movs	r2, #33	@ 0x21
 8009294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2240      	movs	r2, #64	@ 0x40
 800929c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2200      	movs	r2, #0
 80092a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	6a3a      	ldr	r2, [r7, #32]
 80092aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80092b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092b6:	b29a      	uxth	r2, r3
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	4a4d      	ldr	r2, [pc, #308]	@ (80093f4 <HAL_I2C_Mem_Write+0x1f0>)
 80092c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80092c2:	88f8      	ldrh	r0, [r7, #6]
 80092c4:	893a      	ldrh	r2, [r7, #8]
 80092c6:	8979      	ldrh	r1, [r7, #10]
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	9301      	str	r3, [sp, #4]
 80092cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ce:	9300      	str	r3, [sp, #0]
 80092d0:	4603      	mov	r3, r0
 80092d2:	68f8      	ldr	r0, [r7, #12]
 80092d4:	f000 fac2 	bl	800985c <I2C_RequestMemoryWrite>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d052      	beq.n	8009384 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80092de:	2301      	movs	r3, #1
 80092e0:	e081      	b.n	80093e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092e2:	697a      	ldr	r2, [r7, #20]
 80092e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092e6:	68f8      	ldr	r0, [r7, #12]
 80092e8:	f000 fd50 	bl	8009d8c <I2C_WaitOnTXEFlagUntilTimeout>
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d00d      	beq.n	800930e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092f6:	2b04      	cmp	r3, #4
 80092f8:	d107      	bne.n	800930a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009308:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	e06b      	b.n	80093e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009312:	781a      	ldrb	r2, [r3, #0]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800931e:	1c5a      	adds	r2, r3, #1
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009328:	3b01      	subs	r3, #1
 800932a:	b29a      	uxth	r2, r3
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009334:	b29b      	uxth	r3, r3
 8009336:	3b01      	subs	r3, #1
 8009338:	b29a      	uxth	r2, r3
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	695b      	ldr	r3, [r3, #20]
 8009344:	f003 0304 	and.w	r3, r3, #4
 8009348:	2b04      	cmp	r3, #4
 800934a:	d11b      	bne.n	8009384 <HAL_I2C_Mem_Write+0x180>
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009350:	2b00      	cmp	r3, #0
 8009352:	d017      	beq.n	8009384 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009358:	781a      	ldrb	r2, [r3, #0]
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009364:	1c5a      	adds	r2, r3, #1
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800936e:	3b01      	subs	r3, #1
 8009370:	b29a      	uxth	r2, r3
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800937a:	b29b      	uxth	r3, r3
 800937c:	3b01      	subs	r3, #1
 800937e:	b29a      	uxth	r2, r3
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009388:	2b00      	cmp	r3, #0
 800938a:	d1aa      	bne.n	80092e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800938c:	697a      	ldr	r2, [r7, #20]
 800938e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	f000 fd43 	bl	8009e1c <I2C_WaitOnBTFFlagUntilTimeout>
 8009396:	4603      	mov	r3, r0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d00d      	beq.n	80093b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093a0:	2b04      	cmp	r3, #4
 80093a2:	d107      	bne.n	80093b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80093b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80093b4:	2301      	movs	r3, #1
 80093b6:	e016      	b.n	80093e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80093c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2220      	movs	r2, #32
 80093cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2200      	movs	r2, #0
 80093d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2200      	movs	r2, #0
 80093dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80093e0:	2300      	movs	r3, #0
 80093e2:	e000      	b.n	80093e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80093e4:	2302      	movs	r3, #2
  }
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3718      	adds	r7, #24
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
 80093ee:	bf00      	nop
 80093f0:	00100002 	.word	0x00100002
 80093f4:	ffff0000 	.word	0xffff0000

080093f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b08c      	sub	sp, #48	@ 0x30
 80093fc:	af02      	add	r7, sp, #8
 80093fe:	60f8      	str	r0, [r7, #12]
 8009400:	4608      	mov	r0, r1
 8009402:	4611      	mov	r1, r2
 8009404:	461a      	mov	r2, r3
 8009406:	4603      	mov	r3, r0
 8009408:	817b      	strh	r3, [r7, #10]
 800940a:	460b      	mov	r3, r1
 800940c:	813b      	strh	r3, [r7, #8]
 800940e:	4613      	mov	r3, r2
 8009410:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009412:	f7fe feb3 	bl	800817c <HAL_GetTick>
 8009416:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800941e:	b2db      	uxtb	r3, r3
 8009420:	2b20      	cmp	r3, #32
 8009422:	f040 8214 	bne.w	800984e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009428:	9300      	str	r3, [sp, #0]
 800942a:	2319      	movs	r3, #25
 800942c:	2201      	movs	r2, #1
 800942e:	497b      	ldr	r1, [pc, #492]	@ (800961c <HAL_I2C_Mem_Read+0x224>)
 8009430:	68f8      	ldr	r0, [r7, #12]
 8009432:	f000 fb91 	bl	8009b58 <I2C_WaitOnFlagUntilTimeout>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d001      	beq.n	8009440 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800943c:	2302      	movs	r3, #2
 800943e:	e207      	b.n	8009850 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009446:	2b01      	cmp	r3, #1
 8009448:	d101      	bne.n	800944e <HAL_I2C_Mem_Read+0x56>
 800944a:	2302      	movs	r3, #2
 800944c:	e200      	b.n	8009850 <HAL_I2C_Mem_Read+0x458>
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2201      	movs	r2, #1
 8009452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f003 0301 	and.w	r3, r3, #1
 8009460:	2b01      	cmp	r3, #1
 8009462:	d007      	beq.n	8009474 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f042 0201 	orr.w	r2, r2, #1
 8009472:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009482:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2222      	movs	r2, #34	@ 0x22
 8009488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2240      	movs	r2, #64	@ 0x40
 8009490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2200      	movs	r2, #0
 8009498:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800949e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80094a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094aa:	b29a      	uxth	r2, r3
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	4a5b      	ldr	r2, [pc, #364]	@ (8009620 <HAL_I2C_Mem_Read+0x228>)
 80094b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80094b6:	88f8      	ldrh	r0, [r7, #6]
 80094b8:	893a      	ldrh	r2, [r7, #8]
 80094ba:	8979      	ldrh	r1, [r7, #10]
 80094bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094be:	9301      	str	r3, [sp, #4]
 80094c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094c2:	9300      	str	r3, [sp, #0]
 80094c4:	4603      	mov	r3, r0
 80094c6:	68f8      	ldr	r0, [r7, #12]
 80094c8:	f000 fa5e 	bl	8009988 <I2C_RequestMemoryRead>
 80094cc:	4603      	mov	r3, r0
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d001      	beq.n	80094d6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80094d2:	2301      	movs	r3, #1
 80094d4:	e1bc      	b.n	8009850 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d113      	bne.n	8009506 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094de:	2300      	movs	r3, #0
 80094e0:	623b      	str	r3, [r7, #32]
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	695b      	ldr	r3, [r3, #20]
 80094e8:	623b      	str	r3, [r7, #32]
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	699b      	ldr	r3, [r3, #24]
 80094f0:	623b      	str	r3, [r7, #32]
 80094f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009502:	601a      	str	r2, [r3, #0]
 8009504:	e190      	b.n	8009828 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800950a:	2b01      	cmp	r3, #1
 800950c:	d11b      	bne.n	8009546 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800951c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800951e:	2300      	movs	r3, #0
 8009520:	61fb      	str	r3, [r7, #28]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	695b      	ldr	r3, [r3, #20]
 8009528:	61fb      	str	r3, [r7, #28]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	699b      	ldr	r3, [r3, #24]
 8009530:	61fb      	str	r3, [r7, #28]
 8009532:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009542:	601a      	str	r2, [r3, #0]
 8009544:	e170      	b.n	8009828 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800954a:	2b02      	cmp	r3, #2
 800954c:	d11b      	bne.n	8009586 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800955c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800956c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800956e:	2300      	movs	r3, #0
 8009570:	61bb      	str	r3, [r7, #24]
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	695b      	ldr	r3, [r3, #20]
 8009578:	61bb      	str	r3, [r7, #24]
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	699b      	ldr	r3, [r3, #24]
 8009580:	61bb      	str	r3, [r7, #24]
 8009582:	69bb      	ldr	r3, [r7, #24]
 8009584:	e150      	b.n	8009828 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009586:	2300      	movs	r3, #0
 8009588:	617b      	str	r3, [r7, #20]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	695b      	ldr	r3, [r3, #20]
 8009590:	617b      	str	r3, [r7, #20]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	699b      	ldr	r3, [r3, #24]
 8009598:	617b      	str	r3, [r7, #20]
 800959a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800959c:	e144      	b.n	8009828 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095a2:	2b03      	cmp	r3, #3
 80095a4:	f200 80f1 	bhi.w	800978a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d123      	bne.n	80095f8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80095b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80095b4:	68f8      	ldr	r0, [r7, #12]
 80095b6:	f000 fc79 	bl	8009eac <I2C_WaitOnRXNEFlagUntilTimeout>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d001      	beq.n	80095c4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80095c0:	2301      	movs	r3, #1
 80095c2:	e145      	b.n	8009850 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	691a      	ldr	r2, [r3, #16]
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095ce:	b2d2      	uxtb	r2, r2
 80095d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095d6:	1c5a      	adds	r2, r3, #1
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095e0:	3b01      	subs	r3, #1
 80095e2:	b29a      	uxth	r2, r3
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	3b01      	subs	r3, #1
 80095f0:	b29a      	uxth	r2, r3
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80095f6:	e117      	b.n	8009828 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095fc:	2b02      	cmp	r3, #2
 80095fe:	d14e      	bne.n	800969e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009602:	9300      	str	r3, [sp, #0]
 8009604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009606:	2200      	movs	r2, #0
 8009608:	4906      	ldr	r1, [pc, #24]	@ (8009624 <HAL_I2C_Mem_Read+0x22c>)
 800960a:	68f8      	ldr	r0, [r7, #12]
 800960c:	f000 faa4 	bl	8009b58 <I2C_WaitOnFlagUntilTimeout>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	d008      	beq.n	8009628 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8009616:	2301      	movs	r3, #1
 8009618:	e11a      	b.n	8009850 <HAL_I2C_Mem_Read+0x458>
 800961a:	bf00      	nop
 800961c:	00100002 	.word	0x00100002
 8009620:	ffff0000 	.word	0xffff0000
 8009624:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	681a      	ldr	r2, [r3, #0]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009636:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	691a      	ldr	r2, [r3, #16]
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009642:	b2d2      	uxtb	r2, r2
 8009644:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800964a:	1c5a      	adds	r2, r3, #1
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009654:	3b01      	subs	r3, #1
 8009656:	b29a      	uxth	r2, r3
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009660:	b29b      	uxth	r3, r3
 8009662:	3b01      	subs	r3, #1
 8009664:	b29a      	uxth	r2, r3
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	691a      	ldr	r2, [r3, #16]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009674:	b2d2      	uxtb	r2, r2
 8009676:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800967c:	1c5a      	adds	r2, r3, #1
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009686:	3b01      	subs	r3, #1
 8009688:	b29a      	uxth	r2, r3
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009692:	b29b      	uxth	r3, r3
 8009694:	3b01      	subs	r3, #1
 8009696:	b29a      	uxth	r2, r3
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800969c:	e0c4      	b.n	8009828 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800969e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a0:	9300      	str	r3, [sp, #0]
 80096a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a4:	2200      	movs	r2, #0
 80096a6:	496c      	ldr	r1, [pc, #432]	@ (8009858 <HAL_I2C_Mem_Read+0x460>)
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	f000 fa55 	bl	8009b58 <I2C_WaitOnFlagUntilTimeout>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d001      	beq.n	80096b8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	e0cb      	b.n	8009850 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80096c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	691a      	ldr	r2, [r3, #16]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096d2:	b2d2      	uxtb	r2, r2
 80096d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096da:	1c5a      	adds	r2, r3, #1
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096e4:	3b01      	subs	r3, #1
 80096e6:	b29a      	uxth	r2, r3
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	3b01      	subs	r3, #1
 80096f4:	b29a      	uxth	r2, r3
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80096fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096fc:	9300      	str	r3, [sp, #0]
 80096fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009700:	2200      	movs	r2, #0
 8009702:	4955      	ldr	r1, [pc, #340]	@ (8009858 <HAL_I2C_Mem_Read+0x460>)
 8009704:	68f8      	ldr	r0, [r7, #12]
 8009706:	f000 fa27 	bl	8009b58 <I2C_WaitOnFlagUntilTimeout>
 800970a:	4603      	mov	r3, r0
 800970c:	2b00      	cmp	r3, #0
 800970e:	d001      	beq.n	8009714 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009710:	2301      	movs	r3, #1
 8009712:	e09d      	b.n	8009850 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009722:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	691a      	ldr	r2, [r3, #16]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800972e:	b2d2      	uxtb	r2, r2
 8009730:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009736:	1c5a      	adds	r2, r3, #1
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009740:	3b01      	subs	r3, #1
 8009742:	b29a      	uxth	r2, r3
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800974c:	b29b      	uxth	r3, r3
 800974e:	3b01      	subs	r3, #1
 8009750:	b29a      	uxth	r2, r3
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	691a      	ldr	r2, [r3, #16]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009760:	b2d2      	uxtb	r2, r2
 8009762:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009768:	1c5a      	adds	r2, r3, #1
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009772:	3b01      	subs	r3, #1
 8009774:	b29a      	uxth	r2, r3
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800977e:	b29b      	uxth	r3, r3
 8009780:	3b01      	subs	r3, #1
 8009782:	b29a      	uxth	r2, r3
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009788:	e04e      	b.n	8009828 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800978a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800978c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800978e:	68f8      	ldr	r0, [r7, #12]
 8009790:	f000 fb8c 	bl	8009eac <I2C_WaitOnRXNEFlagUntilTimeout>
 8009794:	4603      	mov	r3, r0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d001      	beq.n	800979e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	e058      	b.n	8009850 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	691a      	ldr	r2, [r3, #16]
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097a8:	b2d2      	uxtb	r2, r2
 80097aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097b0:	1c5a      	adds	r2, r3, #1
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097ba:	3b01      	subs	r3, #1
 80097bc:	b29a      	uxth	r2, r3
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	3b01      	subs	r3, #1
 80097ca:	b29a      	uxth	r2, r3
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	695b      	ldr	r3, [r3, #20]
 80097d6:	f003 0304 	and.w	r3, r3, #4
 80097da:	2b04      	cmp	r3, #4
 80097dc:	d124      	bne.n	8009828 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097e2:	2b03      	cmp	r3, #3
 80097e4:	d107      	bne.n	80097f6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80097f4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	691a      	ldr	r2, [r3, #16]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009800:	b2d2      	uxtb	r2, r2
 8009802:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009808:	1c5a      	adds	r2, r3, #1
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009812:	3b01      	subs	r3, #1
 8009814:	b29a      	uxth	r2, r3
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800981e:	b29b      	uxth	r3, r3
 8009820:	3b01      	subs	r3, #1
 8009822:	b29a      	uxth	r2, r3
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800982c:	2b00      	cmp	r3, #0
 800982e:	f47f aeb6 	bne.w	800959e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2220      	movs	r2, #32
 8009836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2200      	movs	r2, #0
 800983e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2200      	movs	r2, #0
 8009846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800984a:	2300      	movs	r3, #0
 800984c:	e000      	b.n	8009850 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800984e:	2302      	movs	r3, #2
  }
}
 8009850:	4618      	mov	r0, r3
 8009852:	3728      	adds	r7, #40	@ 0x28
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}
 8009858:	00010004 	.word	0x00010004

0800985c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b088      	sub	sp, #32
 8009860:	af02      	add	r7, sp, #8
 8009862:	60f8      	str	r0, [r7, #12]
 8009864:	4608      	mov	r0, r1
 8009866:	4611      	mov	r1, r2
 8009868:	461a      	mov	r2, r3
 800986a:	4603      	mov	r3, r0
 800986c:	817b      	strh	r3, [r7, #10]
 800986e:	460b      	mov	r3, r1
 8009870:	813b      	strh	r3, [r7, #8]
 8009872:	4613      	mov	r3, r2
 8009874:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009884:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009888:	9300      	str	r3, [sp, #0]
 800988a:	6a3b      	ldr	r3, [r7, #32]
 800988c:	2200      	movs	r2, #0
 800988e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009892:	68f8      	ldr	r0, [r7, #12]
 8009894:	f000 f960 	bl	8009b58 <I2C_WaitOnFlagUntilTimeout>
 8009898:	4603      	mov	r3, r0
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00d      	beq.n	80098ba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098ac:	d103      	bne.n	80098b6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80098b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80098b6:	2303      	movs	r3, #3
 80098b8:	e05f      	b.n	800997a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80098ba:	897b      	ldrh	r3, [r7, #10]
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	461a      	mov	r2, r3
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80098c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80098ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098cc:	6a3a      	ldr	r2, [r7, #32]
 80098ce:	492d      	ldr	r1, [pc, #180]	@ (8009984 <I2C_RequestMemoryWrite+0x128>)
 80098d0:	68f8      	ldr	r0, [r7, #12]
 80098d2:	f000 f9bb 	bl	8009c4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d001      	beq.n	80098e0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80098dc:	2301      	movs	r3, #1
 80098de:	e04c      	b.n	800997a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098e0:	2300      	movs	r3, #0
 80098e2:	617b      	str	r3, [r7, #20]
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	695b      	ldr	r3, [r3, #20]
 80098ea:	617b      	str	r3, [r7, #20]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	699b      	ldr	r3, [r3, #24]
 80098f2:	617b      	str	r3, [r7, #20]
 80098f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80098f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098f8:	6a39      	ldr	r1, [r7, #32]
 80098fa:	68f8      	ldr	r0, [r7, #12]
 80098fc:	f000 fa46 	bl	8009d8c <I2C_WaitOnTXEFlagUntilTimeout>
 8009900:	4603      	mov	r3, r0
 8009902:	2b00      	cmp	r3, #0
 8009904:	d00d      	beq.n	8009922 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800990a:	2b04      	cmp	r3, #4
 800990c:	d107      	bne.n	800991e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800991c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800991e:	2301      	movs	r3, #1
 8009920:	e02b      	b.n	800997a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009922:	88fb      	ldrh	r3, [r7, #6]
 8009924:	2b01      	cmp	r3, #1
 8009926:	d105      	bne.n	8009934 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009928:	893b      	ldrh	r3, [r7, #8]
 800992a:	b2da      	uxtb	r2, r3
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	611a      	str	r2, [r3, #16]
 8009932:	e021      	b.n	8009978 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009934:	893b      	ldrh	r3, [r7, #8]
 8009936:	0a1b      	lsrs	r3, r3, #8
 8009938:	b29b      	uxth	r3, r3
 800993a:	b2da      	uxtb	r2, r3
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009944:	6a39      	ldr	r1, [r7, #32]
 8009946:	68f8      	ldr	r0, [r7, #12]
 8009948:	f000 fa20 	bl	8009d8c <I2C_WaitOnTXEFlagUntilTimeout>
 800994c:	4603      	mov	r3, r0
 800994e:	2b00      	cmp	r3, #0
 8009950:	d00d      	beq.n	800996e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009956:	2b04      	cmp	r3, #4
 8009958:	d107      	bne.n	800996a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009968:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800996a:	2301      	movs	r3, #1
 800996c:	e005      	b.n	800997a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800996e:	893b      	ldrh	r3, [r7, #8]
 8009970:	b2da      	uxtb	r2, r3
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009978:	2300      	movs	r3, #0
}
 800997a:	4618      	mov	r0, r3
 800997c:	3718      	adds	r7, #24
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	00010002 	.word	0x00010002

08009988 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b088      	sub	sp, #32
 800998c:	af02      	add	r7, sp, #8
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	4608      	mov	r0, r1
 8009992:	4611      	mov	r1, r2
 8009994:	461a      	mov	r2, r3
 8009996:	4603      	mov	r3, r0
 8009998:	817b      	strh	r3, [r7, #10]
 800999a:	460b      	mov	r3, r1
 800999c:	813b      	strh	r3, [r7, #8]
 800999e:	4613      	mov	r3, r2
 80099a0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80099b0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	681a      	ldr	r2, [r3, #0]
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80099c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80099c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099c4:	9300      	str	r3, [sp, #0]
 80099c6:	6a3b      	ldr	r3, [r7, #32]
 80099c8:	2200      	movs	r2, #0
 80099ca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80099ce:	68f8      	ldr	r0, [r7, #12]
 80099d0:	f000 f8c2 	bl	8009b58 <I2C_WaitOnFlagUntilTimeout>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d00d      	beq.n	80099f6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099e8:	d103      	bne.n	80099f2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80099f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80099f2:	2303      	movs	r3, #3
 80099f4:	e0aa      	b.n	8009b4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80099f6:	897b      	ldrh	r3, [r7, #10]
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	461a      	mov	r2, r3
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009a04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a08:	6a3a      	ldr	r2, [r7, #32]
 8009a0a:	4952      	ldr	r1, [pc, #328]	@ (8009b54 <I2C_RequestMemoryRead+0x1cc>)
 8009a0c:	68f8      	ldr	r0, [r7, #12]
 8009a0e:	f000 f91d 	bl	8009c4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d001      	beq.n	8009a1c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	e097      	b.n	8009b4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	617b      	str	r3, [r7, #20]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	695b      	ldr	r3, [r3, #20]
 8009a26:	617b      	str	r3, [r7, #20]
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	699b      	ldr	r3, [r3, #24]
 8009a2e:	617b      	str	r3, [r7, #20]
 8009a30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a34:	6a39      	ldr	r1, [r7, #32]
 8009a36:	68f8      	ldr	r0, [r7, #12]
 8009a38:	f000 f9a8 	bl	8009d8c <I2C_WaitOnTXEFlagUntilTimeout>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d00d      	beq.n	8009a5e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a46:	2b04      	cmp	r3, #4
 8009a48:	d107      	bne.n	8009a5a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e076      	b.n	8009b4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009a5e:	88fb      	ldrh	r3, [r7, #6]
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d105      	bne.n	8009a70 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009a64:	893b      	ldrh	r3, [r7, #8]
 8009a66:	b2da      	uxtb	r2, r3
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	611a      	str	r2, [r3, #16]
 8009a6e:	e021      	b.n	8009ab4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009a70:	893b      	ldrh	r3, [r7, #8]
 8009a72:	0a1b      	lsrs	r3, r3, #8
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	b2da      	uxtb	r2, r3
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a80:	6a39      	ldr	r1, [r7, #32]
 8009a82:	68f8      	ldr	r0, [r7, #12]
 8009a84:	f000 f982 	bl	8009d8c <I2C_WaitOnTXEFlagUntilTimeout>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d00d      	beq.n	8009aaa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a92:	2b04      	cmp	r3, #4
 8009a94:	d107      	bne.n	8009aa6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009aa4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e050      	b.n	8009b4c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009aaa:	893b      	ldrh	r3, [r7, #8]
 8009aac:	b2da      	uxtb	r2, r3
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ab4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ab6:	6a39      	ldr	r1, [r7, #32]
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	f000 f967 	bl	8009d8c <I2C_WaitOnTXEFlagUntilTimeout>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d00d      	beq.n	8009ae0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ac8:	2b04      	cmp	r3, #4
 8009aca:	d107      	bne.n	8009adc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009ada:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009adc:	2301      	movs	r3, #1
 8009ade:	e035      	b.n	8009b4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	681a      	ldr	r2, [r3, #0]
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009aee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009af2:	9300      	str	r3, [sp, #0]
 8009af4:	6a3b      	ldr	r3, [r7, #32]
 8009af6:	2200      	movs	r2, #0
 8009af8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009afc:	68f8      	ldr	r0, [r7, #12]
 8009afe:	f000 f82b 	bl	8009b58 <I2C_WaitOnFlagUntilTimeout>
 8009b02:	4603      	mov	r3, r0
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00d      	beq.n	8009b24 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b16:	d103      	bne.n	8009b20 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009b1e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009b20:	2303      	movs	r3, #3
 8009b22:	e013      	b.n	8009b4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009b24:	897b      	ldrh	r3, [r7, #10]
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	f043 0301 	orr.w	r3, r3, #1
 8009b2c:	b2da      	uxtb	r2, r3
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b36:	6a3a      	ldr	r2, [r7, #32]
 8009b38:	4906      	ldr	r1, [pc, #24]	@ (8009b54 <I2C_RequestMemoryRead+0x1cc>)
 8009b3a:	68f8      	ldr	r0, [r7, #12]
 8009b3c:	f000 f886 	bl	8009c4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b40:	4603      	mov	r3, r0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d001      	beq.n	8009b4a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	e000      	b.n	8009b4c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009b4a:	2300      	movs	r3, #0
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3718      	adds	r7, #24
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	00010002 	.word	0x00010002

08009b58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	60f8      	str	r0, [r7, #12]
 8009b60:	60b9      	str	r1, [r7, #8]
 8009b62:	603b      	str	r3, [r7, #0]
 8009b64:	4613      	mov	r3, r2
 8009b66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009b68:	e048      	b.n	8009bfc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b70:	d044      	beq.n	8009bfc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b72:	f7fe fb03 	bl	800817c <HAL_GetTick>
 8009b76:	4602      	mov	r2, r0
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	1ad3      	subs	r3, r2, r3
 8009b7c:	683a      	ldr	r2, [r7, #0]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d302      	bcc.n	8009b88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d139      	bne.n	8009bfc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	0c1b      	lsrs	r3, r3, #16
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d10d      	bne.n	8009bae <I2C_WaitOnFlagUntilTimeout+0x56>
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	695b      	ldr	r3, [r3, #20]
 8009b98:	43da      	mvns	r2, r3
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	4013      	ands	r3, r2
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	bf0c      	ite	eq
 8009ba4:	2301      	moveq	r3, #1
 8009ba6:	2300      	movne	r3, #0
 8009ba8:	b2db      	uxtb	r3, r3
 8009baa:	461a      	mov	r2, r3
 8009bac:	e00c      	b.n	8009bc8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	699b      	ldr	r3, [r3, #24]
 8009bb4:	43da      	mvns	r2, r3
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	4013      	ands	r3, r2
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	bf0c      	ite	eq
 8009bc0:	2301      	moveq	r3, #1
 8009bc2:	2300      	movne	r3, #0
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	79fb      	ldrb	r3, [r7, #7]
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d116      	bne.n	8009bfc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2220      	movs	r2, #32
 8009bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2200      	movs	r2, #0
 8009be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009be8:	f043 0220 	orr.w	r2, r3, #32
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	e023      	b.n	8009c44 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	0c1b      	lsrs	r3, r3, #16
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	d10d      	bne.n	8009c22 <I2C_WaitOnFlagUntilTimeout+0xca>
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	695b      	ldr	r3, [r3, #20]
 8009c0c:	43da      	mvns	r2, r3
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	4013      	ands	r3, r2
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	bf0c      	ite	eq
 8009c18:	2301      	moveq	r3, #1
 8009c1a:	2300      	movne	r3, #0
 8009c1c:	b2db      	uxtb	r3, r3
 8009c1e:	461a      	mov	r2, r3
 8009c20:	e00c      	b.n	8009c3c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	699b      	ldr	r3, [r3, #24]
 8009c28:	43da      	mvns	r2, r3
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	4013      	ands	r3, r2
 8009c2e:	b29b      	uxth	r3, r3
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	bf0c      	ite	eq
 8009c34:	2301      	moveq	r3, #1
 8009c36:	2300      	movne	r3, #0
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	79fb      	ldrb	r3, [r7, #7]
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d093      	beq.n	8009b6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009c42:	2300      	movs	r3, #0
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3710      	adds	r7, #16
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	60b9      	str	r1, [r7, #8]
 8009c56:	607a      	str	r2, [r7, #4]
 8009c58:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009c5a:	e071      	b.n	8009d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	695b      	ldr	r3, [r3, #20]
 8009c62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009c66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c6a:	d123      	bne.n	8009cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009c7a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009c84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2220      	movs	r2, #32
 8009c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2200      	movs	r2, #0
 8009c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ca0:	f043 0204 	orr.w	r2, r3, #4
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2200      	movs	r2, #0
 8009cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	e067      	b.n	8009d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cba:	d041      	beq.n	8009d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cbc:	f7fe fa5e 	bl	800817c <HAL_GetTick>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	1ad3      	subs	r3, r2, r3
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d302      	bcc.n	8009cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d136      	bne.n	8009d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	0c1b      	lsrs	r3, r3, #16
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d10c      	bne.n	8009cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	695b      	ldr	r3, [r3, #20]
 8009ce2:	43da      	mvns	r2, r3
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	4013      	ands	r3, r2
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	bf14      	ite	ne
 8009cee:	2301      	movne	r3, #1
 8009cf0:	2300      	moveq	r3, #0
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	e00b      	b.n	8009d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	699b      	ldr	r3, [r3, #24]
 8009cfc:	43da      	mvns	r2, r3
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	4013      	ands	r3, r2
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	bf14      	ite	ne
 8009d08:	2301      	movne	r3, #1
 8009d0a:	2300      	moveq	r3, #0
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d016      	beq.n	8009d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2200      	movs	r2, #0
 8009d16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2220      	movs	r2, #32
 8009d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2200      	movs	r2, #0
 8009d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d2c:	f043 0220 	orr.w	r2, r3, #32
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2200      	movs	r2, #0
 8009d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	e021      	b.n	8009d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	0c1b      	lsrs	r3, r3, #16
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d10c      	bne.n	8009d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	695b      	ldr	r3, [r3, #20]
 8009d50:	43da      	mvns	r2, r3
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	4013      	ands	r3, r2
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	bf14      	ite	ne
 8009d5c:	2301      	movne	r3, #1
 8009d5e:	2300      	moveq	r3, #0
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	e00b      	b.n	8009d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	699b      	ldr	r3, [r3, #24]
 8009d6a:	43da      	mvns	r2, r3
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	4013      	ands	r3, r2
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	bf14      	ite	ne
 8009d76:	2301      	movne	r3, #1
 8009d78:	2300      	moveq	r3, #0
 8009d7a:	b2db      	uxtb	r3, r3
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	f47f af6d 	bne.w	8009c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009d82:	2300      	movs	r3, #0
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3710      	adds	r7, #16
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009d98:	e034      	b.n	8009e04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009d9a:	68f8      	ldr	r0, [r7, #12]
 8009d9c:	f000 f8e3 	bl	8009f66 <I2C_IsAcknowledgeFailed>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d001      	beq.n	8009daa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	e034      	b.n	8009e14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db0:	d028      	beq.n	8009e04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009db2:	f7fe f9e3 	bl	800817c <HAL_GetTick>
 8009db6:	4602      	mov	r2, r0
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	1ad3      	subs	r3, r2, r3
 8009dbc:	68ba      	ldr	r2, [r7, #8]
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	d302      	bcc.n	8009dc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d11d      	bne.n	8009e04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	695b      	ldr	r3, [r3, #20]
 8009dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dd2:	2b80      	cmp	r3, #128	@ 0x80
 8009dd4:	d016      	beq.n	8009e04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2220      	movs	r2, #32
 8009de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	2200      	movs	r2, #0
 8009de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009df0:	f043 0220 	orr.w	r2, r3, #32
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009e00:	2301      	movs	r3, #1
 8009e02:	e007      	b.n	8009e14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	695b      	ldr	r3, [r3, #20]
 8009e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e0e:	2b80      	cmp	r3, #128	@ 0x80
 8009e10:	d1c3      	bne.n	8009d9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009e12:	2300      	movs	r3, #0
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3710      	adds	r7, #16
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b084      	sub	sp, #16
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009e28:	e034      	b.n	8009e94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009e2a:	68f8      	ldr	r0, [r7, #12]
 8009e2c:	f000 f89b 	bl	8009f66 <I2C_IsAcknowledgeFailed>
 8009e30:	4603      	mov	r3, r0
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d001      	beq.n	8009e3a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009e36:	2301      	movs	r3, #1
 8009e38:	e034      	b.n	8009ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e40:	d028      	beq.n	8009e94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e42:	f7fe f99b 	bl	800817c <HAL_GetTick>
 8009e46:	4602      	mov	r2, r0
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	1ad3      	subs	r3, r2, r3
 8009e4c:	68ba      	ldr	r2, [r7, #8]
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d302      	bcc.n	8009e58 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d11d      	bne.n	8009e94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	695b      	ldr	r3, [r3, #20]
 8009e5e:	f003 0304 	and.w	r3, r3, #4
 8009e62:	2b04      	cmp	r3, #4
 8009e64:	d016      	beq.n	8009e94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2220      	movs	r2, #32
 8009e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2200      	movs	r2, #0
 8009e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e80:	f043 0220 	orr.w	r2, r3, #32
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009e90:	2301      	movs	r3, #1
 8009e92:	e007      	b.n	8009ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	695b      	ldr	r3, [r3, #20]
 8009e9a:	f003 0304 	and.w	r3, r3, #4
 8009e9e:	2b04      	cmp	r3, #4
 8009ea0:	d1c3      	bne.n	8009e2a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009ea2:	2300      	movs	r3, #0
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3710      	adds	r7, #16
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009eb8:	e049      	b.n	8009f4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	695b      	ldr	r3, [r3, #20]
 8009ec0:	f003 0310 	and.w	r3, r3, #16
 8009ec4:	2b10      	cmp	r3, #16
 8009ec6:	d119      	bne.n	8009efc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f06f 0210 	mvn.w	r2, #16
 8009ed0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2220      	movs	r2, #32
 8009edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	e030      	b.n	8009f5e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009efc:	f7fe f93e 	bl	800817c <HAL_GetTick>
 8009f00:	4602      	mov	r2, r0
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	1ad3      	subs	r3, r2, r3
 8009f06:	68ba      	ldr	r2, [r7, #8]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d302      	bcc.n	8009f12 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d11d      	bne.n	8009f4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	695b      	ldr	r3, [r3, #20]
 8009f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f1c:	2b40      	cmp	r3, #64	@ 0x40
 8009f1e:	d016      	beq.n	8009f4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2200      	movs	r2, #0
 8009f24:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2220      	movs	r2, #32
 8009f2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2200      	movs	r2, #0
 8009f32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f3a:	f043 0220 	orr.w	r2, r3, #32
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2200      	movs	r2, #0
 8009f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	e007      	b.n	8009f5e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	695b      	ldr	r3, [r3, #20]
 8009f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f58:	2b40      	cmp	r3, #64	@ 0x40
 8009f5a:	d1ae      	bne.n	8009eba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009f5c:	2300      	movs	r3, #0
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}

08009f66 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009f66:	b480      	push	{r7}
 8009f68:	b083      	sub	sp, #12
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	695b      	ldr	r3, [r3, #20]
 8009f74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f7c:	d11b      	bne.n	8009fb6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009f86:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2220      	movs	r2, #32
 8009f92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fa2:	f043 0204 	orr.w	r2, r3, #4
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	e000      	b.n	8009fb8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009fb6:	2300      	movs	r3, #0
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	370c      	adds	r7, #12
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr

08009fc4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	2b20      	cmp	r3, #32
 8009fd8:	d129      	bne.n	800a02e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2224      	movs	r2, #36	@ 0x24
 8009fde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	681a      	ldr	r2, [r3, #0]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f022 0201 	bic.w	r2, r2, #1
 8009ff0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f022 0210 	bic.w	r2, r2, #16
 800a000:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	683a      	ldr	r2, [r7, #0]
 800a00e:	430a      	orrs	r2, r1
 800a010:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f042 0201 	orr.w	r2, r2, #1
 800a020:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2220      	movs	r2, #32
 800a026:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800a02a:	2300      	movs	r3, #0
 800a02c:	e000      	b.n	800a030 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800a02e:	2302      	movs	r3, #2
  }
}
 800a030:	4618      	mov	r0, r3
 800a032:	370c      	adds	r7, #12
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr

0800a03c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b085      	sub	sp, #20
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800a046:	2300      	movs	r3, #0
 800a048:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a050:	b2db      	uxtb	r3, r3
 800a052:	2b20      	cmp	r3, #32
 800a054:	d12a      	bne.n	800a0ac <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2224      	movs	r2, #36	@ 0x24
 800a05a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f022 0201 	bic.w	r2, r2, #1
 800a06c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a074:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800a076:	89fb      	ldrh	r3, [r7, #14]
 800a078:	f023 030f 	bic.w	r3, r3, #15
 800a07c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	b29a      	uxth	r2, r3
 800a082:	89fb      	ldrh	r3, [r7, #14]
 800a084:	4313      	orrs	r3, r2
 800a086:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	89fa      	ldrh	r2, [r7, #14]
 800a08e:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	681a      	ldr	r2, [r3, #0]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f042 0201 	orr.w	r2, r2, #1
 800a09e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2220      	movs	r2, #32
 800a0a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	e000      	b.n	800a0ae <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800a0ac:	2302      	movs	r3, #2
  }
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3714      	adds	r7, #20
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr
	...

0800a0bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b086      	sub	sp, #24
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d101      	bne.n	800a0ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e267      	b.n	800a59e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f003 0301 	and.w	r3, r3, #1
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d075      	beq.n	800a1c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800a0da:	4b88      	ldr	r3, [pc, #544]	@ (800a2fc <HAL_RCC_OscConfig+0x240>)
 800a0dc:	689b      	ldr	r3, [r3, #8]
 800a0de:	f003 030c 	and.w	r3, r3, #12
 800a0e2:	2b04      	cmp	r3, #4
 800a0e4:	d00c      	beq.n	800a100 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a0e6:	4b85      	ldr	r3, [pc, #532]	@ (800a2fc <HAL_RCC_OscConfig+0x240>)
 800a0e8:	689b      	ldr	r3, [r3, #8]
 800a0ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800a0ee:	2b08      	cmp	r3, #8
 800a0f0:	d112      	bne.n	800a118 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a0f2:	4b82      	ldr	r3, [pc, #520]	@ (800a2fc <HAL_RCC_OscConfig+0x240>)
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a0fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a0fe:	d10b      	bne.n	800a118 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a100:	4b7e      	ldr	r3, [pc, #504]	@ (800a2fc <HAL_RCC_OscConfig+0x240>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d05b      	beq.n	800a1c4 <HAL_RCC_OscConfig+0x108>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d157      	bne.n	800a1c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a114:	2301      	movs	r3, #1
 800a116:	e242      	b.n	800a59e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a120:	d106      	bne.n	800a130 <HAL_RCC_OscConfig+0x74>
 800a122:	4b76      	ldr	r3, [pc, #472]	@ (800a2fc <HAL_RCC_OscConfig+0x240>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4a75      	ldr	r2, [pc, #468]	@ (800a2fc <HAL_RCC_OscConfig+0x240>)
 800a128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a12c:	6013      	str	r3, [r2, #0]
 800a12e:	e01d      	b.n	800a16c <HAL_RCC_OscConfig+0xb0>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a138:	d10c      	bne.n	800a154 <HAL_RCC_OscConfig+0x98>
 800a13a:	4b70      	ldr	r3, [pc, #448]	@ (800a2fc <HAL_RCC_OscConfig+0x240>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a6f      	ldr	r2, [pc, #444]	@ (800a2fc <HAL_RCC_OscConfig+0x240>)
 800a140:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a144:	6013      	str	r3, [r2, #0]
 800a146:	4b6d      	ldr	r3, [pc, #436]	@ (800a2fc <HAL_RCC_OscConfig+0x240>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a6c      	ldr	r2, [pc, #432]	@ (800a2fc <HAL_RCC_OscConfig+0x240>)
 800a14c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a150:	6013      	str	r3, [r2, #0]
 800a152:	e00b      	b.n	800a16c <HAL_RCC_OscConfig+0xb0>
 800a154:	4b69      	ldr	r3, [pc, #420]	@ (800a2fc <HAL_RCC_OscConfig+0x240>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a68      	ldr	r2, [pc, #416]	@ (800a2fc <HAL_RCC_OscConfig+0x240>)
 800a15a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a15e:	6013      	str	r3, [r2, #0]
 800a160:	4b66      	ldr	r3, [pc, #408]	@ (800a2fc <HAL_RCC_OscConfig+0x240>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4a65      	ldr	r2, [pc, #404]	@ (800a2fc <HAL_RCC_OscConfig+0x240>)
 800a166:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a16a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d013      	beq.n	800a19c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a174:	f7fe f802 	bl	800817c <HAL_GetTick>
 800a178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a17a:	e008      	b.n	800a18e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a17c:	f7fd fffe 	bl	800817c <HAL_GetTick>
 800a180:	4602      	mov	r2, r0
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	1ad3      	subs	r3, r2, r3
 800a186:	2b64      	cmp	r3, #100	@ 0x64
 800a188:	d901      	bls.n	800a18e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a18a:	2303      	movs	r3, #3
 800a18c:	e207      	b.n	800a59e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a18e:	4b5b      	ldr	r3, [pc, #364]	@ (800a2fc <HAL_RCC_OscConfig+0x240>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a196:	2b00      	cmp	r3, #0
 800a198:	d0f0      	beq.n	800a17c <HAL_RCC_OscConfig+0xc0>
 800a19a:	e014      	b.n	800a1c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a19c:	f7fd ffee 	bl	800817c <HAL_GetTick>
 800a1a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a1a2:	e008      	b.n	800a1b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a1a4:	f7fd ffea 	bl	800817c <HAL_GetTick>
 800a1a8:	4602      	mov	r2, r0
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	1ad3      	subs	r3, r2, r3
 800a1ae:	2b64      	cmp	r3, #100	@ 0x64
 800a1b0:	d901      	bls.n	800a1b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a1b2:	2303      	movs	r3, #3
 800a1b4:	e1f3      	b.n	800a59e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a1b6:	4b51      	ldr	r3, [pc, #324]	@ (800a2fc <HAL_RCC_OscConfig+0x240>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d1f0      	bne.n	800a1a4 <HAL_RCC_OscConfig+0xe8>
 800a1c2:	e000      	b.n	800a1c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a1c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f003 0302 	and.w	r3, r3, #2
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d063      	beq.n	800a29a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800a1d2:	4b4a      	ldr	r3, [pc, #296]	@ (800a2fc <HAL_RCC_OscConfig+0x240>)
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	f003 030c 	and.w	r3, r3, #12
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d00b      	beq.n	800a1f6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a1de:	4b47      	ldr	r3, [pc, #284]	@ (800a2fc <HAL_RCC_OscConfig+0x240>)
 800a1e0:	689b      	ldr	r3, [r3, #8]
 800a1e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800a1e6:	2b08      	cmp	r3, #8
 800a1e8:	d11c      	bne.n	800a224 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a1ea:	4b44      	ldr	r3, [pc, #272]	@ (800a2fc <HAL_RCC_OscConfig+0x240>)
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d116      	bne.n	800a224 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a1f6:	4b41      	ldr	r3, [pc, #260]	@ (800a2fc <HAL_RCC_OscConfig+0x240>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f003 0302 	and.w	r3, r3, #2
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d005      	beq.n	800a20e <HAL_RCC_OscConfig+0x152>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	2b01      	cmp	r3, #1
 800a208:	d001      	beq.n	800a20e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a20a:	2301      	movs	r3, #1
 800a20c:	e1c7      	b.n	800a59e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a20e:	4b3b      	ldr	r3, [pc, #236]	@ (800a2fc <HAL_RCC_OscConfig+0x240>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	691b      	ldr	r3, [r3, #16]
 800a21a:	00db      	lsls	r3, r3, #3
 800a21c:	4937      	ldr	r1, [pc, #220]	@ (800a2fc <HAL_RCC_OscConfig+0x240>)
 800a21e:	4313      	orrs	r3, r2
 800a220:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a222:	e03a      	b.n	800a29a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	68db      	ldr	r3, [r3, #12]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d020      	beq.n	800a26e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a22c:	4b34      	ldr	r3, [pc, #208]	@ (800a300 <HAL_RCC_OscConfig+0x244>)
 800a22e:	2201      	movs	r2, #1
 800a230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a232:	f7fd ffa3 	bl	800817c <HAL_GetTick>
 800a236:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a238:	e008      	b.n	800a24c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a23a:	f7fd ff9f 	bl	800817c <HAL_GetTick>
 800a23e:	4602      	mov	r2, r0
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	1ad3      	subs	r3, r2, r3
 800a244:	2b02      	cmp	r3, #2
 800a246:	d901      	bls.n	800a24c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a248:	2303      	movs	r3, #3
 800a24a:	e1a8      	b.n	800a59e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a24c:	4b2b      	ldr	r3, [pc, #172]	@ (800a2fc <HAL_RCC_OscConfig+0x240>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f003 0302 	and.w	r3, r3, #2
 800a254:	2b00      	cmp	r3, #0
 800a256:	d0f0      	beq.n	800a23a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a258:	4b28      	ldr	r3, [pc, #160]	@ (800a2fc <HAL_RCC_OscConfig+0x240>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	691b      	ldr	r3, [r3, #16]
 800a264:	00db      	lsls	r3, r3, #3
 800a266:	4925      	ldr	r1, [pc, #148]	@ (800a2fc <HAL_RCC_OscConfig+0x240>)
 800a268:	4313      	orrs	r3, r2
 800a26a:	600b      	str	r3, [r1, #0]
 800a26c:	e015      	b.n	800a29a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a26e:	4b24      	ldr	r3, [pc, #144]	@ (800a300 <HAL_RCC_OscConfig+0x244>)
 800a270:	2200      	movs	r2, #0
 800a272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a274:	f7fd ff82 	bl	800817c <HAL_GetTick>
 800a278:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a27a:	e008      	b.n	800a28e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a27c:	f7fd ff7e 	bl	800817c <HAL_GetTick>
 800a280:	4602      	mov	r2, r0
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	1ad3      	subs	r3, r2, r3
 800a286:	2b02      	cmp	r3, #2
 800a288:	d901      	bls.n	800a28e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a28a:	2303      	movs	r3, #3
 800a28c:	e187      	b.n	800a59e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a28e:	4b1b      	ldr	r3, [pc, #108]	@ (800a2fc <HAL_RCC_OscConfig+0x240>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f003 0302 	and.w	r3, r3, #2
 800a296:	2b00      	cmp	r3, #0
 800a298:	d1f0      	bne.n	800a27c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f003 0308 	and.w	r3, r3, #8
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d036      	beq.n	800a314 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	695b      	ldr	r3, [r3, #20]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d016      	beq.n	800a2dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a2ae:	4b15      	ldr	r3, [pc, #84]	@ (800a304 <HAL_RCC_OscConfig+0x248>)
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2b4:	f7fd ff62 	bl	800817c <HAL_GetTick>
 800a2b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a2ba:	e008      	b.n	800a2ce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a2bc:	f7fd ff5e 	bl	800817c <HAL_GetTick>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	1ad3      	subs	r3, r2, r3
 800a2c6:	2b02      	cmp	r3, #2
 800a2c8:	d901      	bls.n	800a2ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a2ca:	2303      	movs	r3, #3
 800a2cc:	e167      	b.n	800a59e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a2ce:	4b0b      	ldr	r3, [pc, #44]	@ (800a2fc <HAL_RCC_OscConfig+0x240>)
 800a2d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2d2:	f003 0302 	and.w	r3, r3, #2
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d0f0      	beq.n	800a2bc <HAL_RCC_OscConfig+0x200>
 800a2da:	e01b      	b.n	800a314 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a2dc:	4b09      	ldr	r3, [pc, #36]	@ (800a304 <HAL_RCC_OscConfig+0x248>)
 800a2de:	2200      	movs	r2, #0
 800a2e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a2e2:	f7fd ff4b 	bl	800817c <HAL_GetTick>
 800a2e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a2e8:	e00e      	b.n	800a308 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a2ea:	f7fd ff47 	bl	800817c <HAL_GetTick>
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	1ad3      	subs	r3, r2, r3
 800a2f4:	2b02      	cmp	r3, #2
 800a2f6:	d907      	bls.n	800a308 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a2f8:	2303      	movs	r3, #3
 800a2fa:	e150      	b.n	800a59e <HAL_RCC_OscConfig+0x4e2>
 800a2fc:	40023800 	.word	0x40023800
 800a300:	42470000 	.word	0x42470000
 800a304:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a308:	4b88      	ldr	r3, [pc, #544]	@ (800a52c <HAL_RCC_OscConfig+0x470>)
 800a30a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a30c:	f003 0302 	and.w	r3, r3, #2
 800a310:	2b00      	cmp	r3, #0
 800a312:	d1ea      	bne.n	800a2ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f003 0304 	and.w	r3, r3, #4
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	f000 8097 	beq.w	800a450 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a322:	2300      	movs	r3, #0
 800a324:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a326:	4b81      	ldr	r3, [pc, #516]	@ (800a52c <HAL_RCC_OscConfig+0x470>)
 800a328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a32a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d10f      	bne.n	800a352 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a332:	2300      	movs	r3, #0
 800a334:	60bb      	str	r3, [r7, #8]
 800a336:	4b7d      	ldr	r3, [pc, #500]	@ (800a52c <HAL_RCC_OscConfig+0x470>)
 800a338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a33a:	4a7c      	ldr	r2, [pc, #496]	@ (800a52c <HAL_RCC_OscConfig+0x470>)
 800a33c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a340:	6413      	str	r3, [r2, #64]	@ 0x40
 800a342:	4b7a      	ldr	r3, [pc, #488]	@ (800a52c <HAL_RCC_OscConfig+0x470>)
 800a344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a34a:	60bb      	str	r3, [r7, #8]
 800a34c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a34e:	2301      	movs	r3, #1
 800a350:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a352:	4b77      	ldr	r3, [pc, #476]	@ (800a530 <HAL_RCC_OscConfig+0x474>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d118      	bne.n	800a390 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a35e:	4b74      	ldr	r3, [pc, #464]	@ (800a530 <HAL_RCC_OscConfig+0x474>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a73      	ldr	r2, [pc, #460]	@ (800a530 <HAL_RCC_OscConfig+0x474>)
 800a364:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a368:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a36a:	f7fd ff07 	bl	800817c <HAL_GetTick>
 800a36e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a370:	e008      	b.n	800a384 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a372:	f7fd ff03 	bl	800817c <HAL_GetTick>
 800a376:	4602      	mov	r2, r0
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	1ad3      	subs	r3, r2, r3
 800a37c:	2b02      	cmp	r3, #2
 800a37e:	d901      	bls.n	800a384 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a380:	2303      	movs	r3, #3
 800a382:	e10c      	b.n	800a59e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a384:	4b6a      	ldr	r3, [pc, #424]	@ (800a530 <HAL_RCC_OscConfig+0x474>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d0f0      	beq.n	800a372 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	689b      	ldr	r3, [r3, #8]
 800a394:	2b01      	cmp	r3, #1
 800a396:	d106      	bne.n	800a3a6 <HAL_RCC_OscConfig+0x2ea>
 800a398:	4b64      	ldr	r3, [pc, #400]	@ (800a52c <HAL_RCC_OscConfig+0x470>)
 800a39a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a39c:	4a63      	ldr	r2, [pc, #396]	@ (800a52c <HAL_RCC_OscConfig+0x470>)
 800a39e:	f043 0301 	orr.w	r3, r3, #1
 800a3a2:	6713      	str	r3, [r2, #112]	@ 0x70
 800a3a4:	e01c      	b.n	800a3e0 <HAL_RCC_OscConfig+0x324>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	689b      	ldr	r3, [r3, #8]
 800a3aa:	2b05      	cmp	r3, #5
 800a3ac:	d10c      	bne.n	800a3c8 <HAL_RCC_OscConfig+0x30c>
 800a3ae:	4b5f      	ldr	r3, [pc, #380]	@ (800a52c <HAL_RCC_OscConfig+0x470>)
 800a3b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3b2:	4a5e      	ldr	r2, [pc, #376]	@ (800a52c <HAL_RCC_OscConfig+0x470>)
 800a3b4:	f043 0304 	orr.w	r3, r3, #4
 800a3b8:	6713      	str	r3, [r2, #112]	@ 0x70
 800a3ba:	4b5c      	ldr	r3, [pc, #368]	@ (800a52c <HAL_RCC_OscConfig+0x470>)
 800a3bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3be:	4a5b      	ldr	r2, [pc, #364]	@ (800a52c <HAL_RCC_OscConfig+0x470>)
 800a3c0:	f043 0301 	orr.w	r3, r3, #1
 800a3c4:	6713      	str	r3, [r2, #112]	@ 0x70
 800a3c6:	e00b      	b.n	800a3e0 <HAL_RCC_OscConfig+0x324>
 800a3c8:	4b58      	ldr	r3, [pc, #352]	@ (800a52c <HAL_RCC_OscConfig+0x470>)
 800a3ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3cc:	4a57      	ldr	r2, [pc, #348]	@ (800a52c <HAL_RCC_OscConfig+0x470>)
 800a3ce:	f023 0301 	bic.w	r3, r3, #1
 800a3d2:	6713      	str	r3, [r2, #112]	@ 0x70
 800a3d4:	4b55      	ldr	r3, [pc, #340]	@ (800a52c <HAL_RCC_OscConfig+0x470>)
 800a3d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3d8:	4a54      	ldr	r2, [pc, #336]	@ (800a52c <HAL_RCC_OscConfig+0x470>)
 800a3da:	f023 0304 	bic.w	r3, r3, #4
 800a3de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	689b      	ldr	r3, [r3, #8]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d015      	beq.n	800a414 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3e8:	f7fd fec8 	bl	800817c <HAL_GetTick>
 800a3ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a3ee:	e00a      	b.n	800a406 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3f0:	f7fd fec4 	bl	800817c <HAL_GetTick>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	1ad3      	subs	r3, r2, r3
 800a3fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d901      	bls.n	800a406 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a402:	2303      	movs	r3, #3
 800a404:	e0cb      	b.n	800a59e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a406:	4b49      	ldr	r3, [pc, #292]	@ (800a52c <HAL_RCC_OscConfig+0x470>)
 800a408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a40a:	f003 0302 	and.w	r3, r3, #2
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d0ee      	beq.n	800a3f0 <HAL_RCC_OscConfig+0x334>
 800a412:	e014      	b.n	800a43e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a414:	f7fd feb2 	bl	800817c <HAL_GetTick>
 800a418:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a41a:	e00a      	b.n	800a432 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a41c:	f7fd feae 	bl	800817c <HAL_GetTick>
 800a420:	4602      	mov	r2, r0
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	1ad3      	subs	r3, r2, r3
 800a426:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d901      	bls.n	800a432 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a42e:	2303      	movs	r3, #3
 800a430:	e0b5      	b.n	800a59e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a432:	4b3e      	ldr	r3, [pc, #248]	@ (800a52c <HAL_RCC_OscConfig+0x470>)
 800a434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a436:	f003 0302 	and.w	r3, r3, #2
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d1ee      	bne.n	800a41c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a43e:	7dfb      	ldrb	r3, [r7, #23]
 800a440:	2b01      	cmp	r3, #1
 800a442:	d105      	bne.n	800a450 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a444:	4b39      	ldr	r3, [pc, #228]	@ (800a52c <HAL_RCC_OscConfig+0x470>)
 800a446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a448:	4a38      	ldr	r2, [pc, #224]	@ (800a52c <HAL_RCC_OscConfig+0x470>)
 800a44a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a44e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	699b      	ldr	r3, [r3, #24]
 800a454:	2b00      	cmp	r3, #0
 800a456:	f000 80a1 	beq.w	800a59c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a45a:	4b34      	ldr	r3, [pc, #208]	@ (800a52c <HAL_RCC_OscConfig+0x470>)
 800a45c:	689b      	ldr	r3, [r3, #8]
 800a45e:	f003 030c 	and.w	r3, r3, #12
 800a462:	2b08      	cmp	r3, #8
 800a464:	d05c      	beq.n	800a520 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	699b      	ldr	r3, [r3, #24]
 800a46a:	2b02      	cmp	r3, #2
 800a46c:	d141      	bne.n	800a4f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a46e:	4b31      	ldr	r3, [pc, #196]	@ (800a534 <HAL_RCC_OscConfig+0x478>)
 800a470:	2200      	movs	r2, #0
 800a472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a474:	f7fd fe82 	bl	800817c <HAL_GetTick>
 800a478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a47a:	e008      	b.n	800a48e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a47c:	f7fd fe7e 	bl	800817c <HAL_GetTick>
 800a480:	4602      	mov	r2, r0
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	1ad3      	subs	r3, r2, r3
 800a486:	2b02      	cmp	r3, #2
 800a488:	d901      	bls.n	800a48e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a48a:	2303      	movs	r3, #3
 800a48c:	e087      	b.n	800a59e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a48e:	4b27      	ldr	r3, [pc, #156]	@ (800a52c <HAL_RCC_OscConfig+0x470>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a496:	2b00      	cmp	r3, #0
 800a498:	d1f0      	bne.n	800a47c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	69da      	ldr	r2, [r3, #28]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6a1b      	ldr	r3, [r3, #32]
 800a4a2:	431a      	orrs	r2, r3
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4a8:	019b      	lsls	r3, r3, #6
 800a4aa:	431a      	orrs	r2, r3
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4b0:	085b      	lsrs	r3, r3, #1
 800a4b2:	3b01      	subs	r3, #1
 800a4b4:	041b      	lsls	r3, r3, #16
 800a4b6:	431a      	orrs	r2, r3
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4bc:	061b      	lsls	r3, r3, #24
 800a4be:	491b      	ldr	r1, [pc, #108]	@ (800a52c <HAL_RCC_OscConfig+0x470>)
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a4c4:	4b1b      	ldr	r3, [pc, #108]	@ (800a534 <HAL_RCC_OscConfig+0x478>)
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4ca:	f7fd fe57 	bl	800817c <HAL_GetTick>
 800a4ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a4d0:	e008      	b.n	800a4e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a4d2:	f7fd fe53 	bl	800817c <HAL_GetTick>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	1ad3      	subs	r3, r2, r3
 800a4dc:	2b02      	cmp	r3, #2
 800a4de:	d901      	bls.n	800a4e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a4e0:	2303      	movs	r3, #3
 800a4e2:	e05c      	b.n	800a59e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a4e4:	4b11      	ldr	r3, [pc, #68]	@ (800a52c <HAL_RCC_OscConfig+0x470>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d0f0      	beq.n	800a4d2 <HAL_RCC_OscConfig+0x416>
 800a4f0:	e054      	b.n	800a59c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a4f2:	4b10      	ldr	r3, [pc, #64]	@ (800a534 <HAL_RCC_OscConfig+0x478>)
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4f8:	f7fd fe40 	bl	800817c <HAL_GetTick>
 800a4fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a4fe:	e008      	b.n	800a512 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a500:	f7fd fe3c 	bl	800817c <HAL_GetTick>
 800a504:	4602      	mov	r2, r0
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	1ad3      	subs	r3, r2, r3
 800a50a:	2b02      	cmp	r3, #2
 800a50c:	d901      	bls.n	800a512 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a50e:	2303      	movs	r3, #3
 800a510:	e045      	b.n	800a59e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a512:	4b06      	ldr	r3, [pc, #24]	@ (800a52c <HAL_RCC_OscConfig+0x470>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d1f0      	bne.n	800a500 <HAL_RCC_OscConfig+0x444>
 800a51e:	e03d      	b.n	800a59c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	699b      	ldr	r3, [r3, #24]
 800a524:	2b01      	cmp	r3, #1
 800a526:	d107      	bne.n	800a538 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a528:	2301      	movs	r3, #1
 800a52a:	e038      	b.n	800a59e <HAL_RCC_OscConfig+0x4e2>
 800a52c:	40023800 	.word	0x40023800
 800a530:	40007000 	.word	0x40007000
 800a534:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a538:	4b1b      	ldr	r3, [pc, #108]	@ (800a5a8 <HAL_RCC_OscConfig+0x4ec>)
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	699b      	ldr	r3, [r3, #24]
 800a542:	2b01      	cmp	r3, #1
 800a544:	d028      	beq.n	800a598 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a550:	429a      	cmp	r2, r3
 800a552:	d121      	bne.n	800a598 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a55e:	429a      	cmp	r2, r3
 800a560:	d11a      	bne.n	800a598 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a562:	68fa      	ldr	r2, [r7, #12]
 800a564:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a568:	4013      	ands	r3, r2
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a56e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a570:	4293      	cmp	r3, r2
 800a572:	d111      	bne.n	800a598 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a57e:	085b      	lsrs	r3, r3, #1
 800a580:	3b01      	subs	r3, #1
 800a582:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a584:	429a      	cmp	r2, r3
 800a586:	d107      	bne.n	800a598 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a592:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a594:	429a      	cmp	r2, r3
 800a596:	d001      	beq.n	800a59c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800a598:	2301      	movs	r3, #1
 800a59a:	e000      	b.n	800a59e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a59c:	2300      	movs	r3, #0
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3718      	adds	r7, #24
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}
 800a5a6:	bf00      	nop
 800a5a8:	40023800 	.word	0x40023800

0800a5ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d101      	bne.n	800a5c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	e0cc      	b.n	800a75a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a5c0:	4b68      	ldr	r3, [pc, #416]	@ (800a764 <HAL_RCC_ClockConfig+0x1b8>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f003 030f 	and.w	r3, r3, #15
 800a5c8:	683a      	ldr	r2, [r7, #0]
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d90c      	bls.n	800a5e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a5ce:	4b65      	ldr	r3, [pc, #404]	@ (800a764 <HAL_RCC_ClockConfig+0x1b8>)
 800a5d0:	683a      	ldr	r2, [r7, #0]
 800a5d2:	b2d2      	uxtb	r2, r2
 800a5d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a5d6:	4b63      	ldr	r3, [pc, #396]	@ (800a764 <HAL_RCC_ClockConfig+0x1b8>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f003 030f 	and.w	r3, r3, #15
 800a5de:	683a      	ldr	r2, [r7, #0]
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d001      	beq.n	800a5e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	e0b8      	b.n	800a75a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f003 0302 	and.w	r3, r3, #2
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d020      	beq.n	800a636 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f003 0304 	and.w	r3, r3, #4
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d005      	beq.n	800a60c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a600:	4b59      	ldr	r3, [pc, #356]	@ (800a768 <HAL_RCC_ClockConfig+0x1bc>)
 800a602:	689b      	ldr	r3, [r3, #8]
 800a604:	4a58      	ldr	r2, [pc, #352]	@ (800a768 <HAL_RCC_ClockConfig+0x1bc>)
 800a606:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a60a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f003 0308 	and.w	r3, r3, #8
 800a614:	2b00      	cmp	r3, #0
 800a616:	d005      	beq.n	800a624 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a618:	4b53      	ldr	r3, [pc, #332]	@ (800a768 <HAL_RCC_ClockConfig+0x1bc>)
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	4a52      	ldr	r2, [pc, #328]	@ (800a768 <HAL_RCC_ClockConfig+0x1bc>)
 800a61e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a622:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a624:	4b50      	ldr	r3, [pc, #320]	@ (800a768 <HAL_RCC_ClockConfig+0x1bc>)
 800a626:	689b      	ldr	r3, [r3, #8]
 800a628:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	689b      	ldr	r3, [r3, #8]
 800a630:	494d      	ldr	r1, [pc, #308]	@ (800a768 <HAL_RCC_ClockConfig+0x1bc>)
 800a632:	4313      	orrs	r3, r2
 800a634:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f003 0301 	and.w	r3, r3, #1
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d044      	beq.n	800a6cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	2b01      	cmp	r3, #1
 800a648:	d107      	bne.n	800a65a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a64a:	4b47      	ldr	r3, [pc, #284]	@ (800a768 <HAL_RCC_ClockConfig+0x1bc>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a652:	2b00      	cmp	r3, #0
 800a654:	d119      	bne.n	800a68a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a656:	2301      	movs	r3, #1
 800a658:	e07f      	b.n	800a75a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	2b02      	cmp	r3, #2
 800a660:	d003      	beq.n	800a66a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a666:	2b03      	cmp	r3, #3
 800a668:	d107      	bne.n	800a67a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a66a:	4b3f      	ldr	r3, [pc, #252]	@ (800a768 <HAL_RCC_ClockConfig+0x1bc>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a672:	2b00      	cmp	r3, #0
 800a674:	d109      	bne.n	800a68a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a676:	2301      	movs	r3, #1
 800a678:	e06f      	b.n	800a75a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a67a:	4b3b      	ldr	r3, [pc, #236]	@ (800a768 <HAL_RCC_ClockConfig+0x1bc>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f003 0302 	and.w	r3, r3, #2
 800a682:	2b00      	cmp	r3, #0
 800a684:	d101      	bne.n	800a68a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a686:	2301      	movs	r3, #1
 800a688:	e067      	b.n	800a75a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a68a:	4b37      	ldr	r3, [pc, #220]	@ (800a768 <HAL_RCC_ClockConfig+0x1bc>)
 800a68c:	689b      	ldr	r3, [r3, #8]
 800a68e:	f023 0203 	bic.w	r2, r3, #3
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	4934      	ldr	r1, [pc, #208]	@ (800a768 <HAL_RCC_ClockConfig+0x1bc>)
 800a698:	4313      	orrs	r3, r2
 800a69a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a69c:	f7fd fd6e 	bl	800817c <HAL_GetTick>
 800a6a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6a2:	e00a      	b.n	800a6ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a6a4:	f7fd fd6a 	bl	800817c <HAL_GetTick>
 800a6a8:	4602      	mov	r2, r0
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	1ad3      	subs	r3, r2, r3
 800a6ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d901      	bls.n	800a6ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a6b6:	2303      	movs	r3, #3
 800a6b8:	e04f      	b.n	800a75a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6ba:	4b2b      	ldr	r3, [pc, #172]	@ (800a768 <HAL_RCC_ClockConfig+0x1bc>)
 800a6bc:	689b      	ldr	r3, [r3, #8]
 800a6be:	f003 020c 	and.w	r2, r3, #12
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	009b      	lsls	r3, r3, #2
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d1eb      	bne.n	800a6a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a6cc:	4b25      	ldr	r3, [pc, #148]	@ (800a764 <HAL_RCC_ClockConfig+0x1b8>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f003 030f 	and.w	r3, r3, #15
 800a6d4:	683a      	ldr	r2, [r7, #0]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d20c      	bcs.n	800a6f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6da:	4b22      	ldr	r3, [pc, #136]	@ (800a764 <HAL_RCC_ClockConfig+0x1b8>)
 800a6dc:	683a      	ldr	r2, [r7, #0]
 800a6de:	b2d2      	uxtb	r2, r2
 800a6e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6e2:	4b20      	ldr	r3, [pc, #128]	@ (800a764 <HAL_RCC_ClockConfig+0x1b8>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f003 030f 	and.w	r3, r3, #15
 800a6ea:	683a      	ldr	r2, [r7, #0]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d001      	beq.n	800a6f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	e032      	b.n	800a75a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f003 0304 	and.w	r3, r3, #4
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d008      	beq.n	800a712 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a700:	4b19      	ldr	r3, [pc, #100]	@ (800a768 <HAL_RCC_ClockConfig+0x1bc>)
 800a702:	689b      	ldr	r3, [r3, #8]
 800a704:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	68db      	ldr	r3, [r3, #12]
 800a70c:	4916      	ldr	r1, [pc, #88]	@ (800a768 <HAL_RCC_ClockConfig+0x1bc>)
 800a70e:	4313      	orrs	r3, r2
 800a710:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f003 0308 	and.w	r3, r3, #8
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d009      	beq.n	800a732 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a71e:	4b12      	ldr	r3, [pc, #72]	@ (800a768 <HAL_RCC_ClockConfig+0x1bc>)
 800a720:	689b      	ldr	r3, [r3, #8]
 800a722:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	691b      	ldr	r3, [r3, #16]
 800a72a:	00db      	lsls	r3, r3, #3
 800a72c:	490e      	ldr	r1, [pc, #56]	@ (800a768 <HAL_RCC_ClockConfig+0x1bc>)
 800a72e:	4313      	orrs	r3, r2
 800a730:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a732:	f000 f821 	bl	800a778 <HAL_RCC_GetSysClockFreq>
 800a736:	4602      	mov	r2, r0
 800a738:	4b0b      	ldr	r3, [pc, #44]	@ (800a768 <HAL_RCC_ClockConfig+0x1bc>)
 800a73a:	689b      	ldr	r3, [r3, #8]
 800a73c:	091b      	lsrs	r3, r3, #4
 800a73e:	f003 030f 	and.w	r3, r3, #15
 800a742:	490a      	ldr	r1, [pc, #40]	@ (800a76c <HAL_RCC_ClockConfig+0x1c0>)
 800a744:	5ccb      	ldrb	r3, [r1, r3]
 800a746:	fa22 f303 	lsr.w	r3, r2, r3
 800a74a:	4a09      	ldr	r2, [pc, #36]	@ (800a770 <HAL_RCC_ClockConfig+0x1c4>)
 800a74c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800a74e:	4b09      	ldr	r3, [pc, #36]	@ (800a774 <HAL_RCC_ClockConfig+0x1c8>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	4618      	mov	r0, r3
 800a754:	f7fd fcce 	bl	80080f4 <HAL_InitTick>

  return HAL_OK;
 800a758:	2300      	movs	r3, #0
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3710      	adds	r7, #16
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
 800a762:	bf00      	nop
 800a764:	40023c00 	.word	0x40023c00
 800a768:	40023800 	.word	0x40023800
 800a76c:	0800dfac 	.word	0x0800dfac
 800a770:	20000914 	.word	0x20000914
 800a774:	20000918 	.word	0x20000918

0800a778 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a77c:	b090      	sub	sp, #64	@ 0x40
 800a77e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800a780:	2300      	movs	r3, #0
 800a782:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800a784:	2300      	movs	r3, #0
 800a786:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800a788:	2300      	movs	r3, #0
 800a78a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800a78c:	2300      	movs	r3, #0
 800a78e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a790:	4b59      	ldr	r3, [pc, #356]	@ (800a8f8 <HAL_RCC_GetSysClockFreq+0x180>)
 800a792:	689b      	ldr	r3, [r3, #8]
 800a794:	f003 030c 	and.w	r3, r3, #12
 800a798:	2b08      	cmp	r3, #8
 800a79a:	d00d      	beq.n	800a7b8 <HAL_RCC_GetSysClockFreq+0x40>
 800a79c:	2b08      	cmp	r3, #8
 800a79e:	f200 80a1 	bhi.w	800a8e4 <HAL_RCC_GetSysClockFreq+0x16c>
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d002      	beq.n	800a7ac <HAL_RCC_GetSysClockFreq+0x34>
 800a7a6:	2b04      	cmp	r3, #4
 800a7a8:	d003      	beq.n	800a7b2 <HAL_RCC_GetSysClockFreq+0x3a>
 800a7aa:	e09b      	b.n	800a8e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a7ac:	4b53      	ldr	r3, [pc, #332]	@ (800a8fc <HAL_RCC_GetSysClockFreq+0x184>)
 800a7ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a7b0:	e09b      	b.n	800a8ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a7b2:	4b53      	ldr	r3, [pc, #332]	@ (800a900 <HAL_RCC_GetSysClockFreq+0x188>)
 800a7b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a7b6:	e098      	b.n	800a8ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a7b8:	4b4f      	ldr	r3, [pc, #316]	@ (800a8f8 <HAL_RCC_GetSysClockFreq+0x180>)
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a7c0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a7c2:	4b4d      	ldr	r3, [pc, #308]	@ (800a8f8 <HAL_RCC_GetSysClockFreq+0x180>)
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d028      	beq.n	800a820 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a7ce:	4b4a      	ldr	r3, [pc, #296]	@ (800a8f8 <HAL_RCC_GetSysClockFreq+0x180>)
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	099b      	lsrs	r3, r3, #6
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	623b      	str	r3, [r7, #32]
 800a7d8:	627a      	str	r2, [r7, #36]	@ 0x24
 800a7da:	6a3b      	ldr	r3, [r7, #32]
 800a7dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a7e0:	2100      	movs	r1, #0
 800a7e2:	4b47      	ldr	r3, [pc, #284]	@ (800a900 <HAL_RCC_GetSysClockFreq+0x188>)
 800a7e4:	fb03 f201 	mul.w	r2, r3, r1
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	fb00 f303 	mul.w	r3, r0, r3
 800a7ee:	4413      	add	r3, r2
 800a7f0:	4a43      	ldr	r2, [pc, #268]	@ (800a900 <HAL_RCC_GetSysClockFreq+0x188>)
 800a7f2:	fba0 1202 	umull	r1, r2, r0, r2
 800a7f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a7f8:	460a      	mov	r2, r1
 800a7fa:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a7fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a7fe:	4413      	add	r3, r2
 800a800:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a804:	2200      	movs	r2, #0
 800a806:	61bb      	str	r3, [r7, #24]
 800a808:	61fa      	str	r2, [r7, #28]
 800a80a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a80e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a812:	f7f6 fa41 	bl	8000c98 <__aeabi_uldivmod>
 800a816:	4602      	mov	r2, r0
 800a818:	460b      	mov	r3, r1
 800a81a:	4613      	mov	r3, r2
 800a81c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a81e:	e053      	b.n	800a8c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a820:	4b35      	ldr	r3, [pc, #212]	@ (800a8f8 <HAL_RCC_GetSysClockFreq+0x180>)
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	099b      	lsrs	r3, r3, #6
 800a826:	2200      	movs	r2, #0
 800a828:	613b      	str	r3, [r7, #16]
 800a82a:	617a      	str	r2, [r7, #20]
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a832:	f04f 0b00 	mov.w	fp, #0
 800a836:	4652      	mov	r2, sl
 800a838:	465b      	mov	r3, fp
 800a83a:	f04f 0000 	mov.w	r0, #0
 800a83e:	f04f 0100 	mov.w	r1, #0
 800a842:	0159      	lsls	r1, r3, #5
 800a844:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a848:	0150      	lsls	r0, r2, #5
 800a84a:	4602      	mov	r2, r0
 800a84c:	460b      	mov	r3, r1
 800a84e:	ebb2 080a 	subs.w	r8, r2, sl
 800a852:	eb63 090b 	sbc.w	r9, r3, fp
 800a856:	f04f 0200 	mov.w	r2, #0
 800a85a:	f04f 0300 	mov.w	r3, #0
 800a85e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a862:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a866:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a86a:	ebb2 0408 	subs.w	r4, r2, r8
 800a86e:	eb63 0509 	sbc.w	r5, r3, r9
 800a872:	f04f 0200 	mov.w	r2, #0
 800a876:	f04f 0300 	mov.w	r3, #0
 800a87a:	00eb      	lsls	r3, r5, #3
 800a87c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a880:	00e2      	lsls	r2, r4, #3
 800a882:	4614      	mov	r4, r2
 800a884:	461d      	mov	r5, r3
 800a886:	eb14 030a 	adds.w	r3, r4, sl
 800a88a:	603b      	str	r3, [r7, #0]
 800a88c:	eb45 030b 	adc.w	r3, r5, fp
 800a890:	607b      	str	r3, [r7, #4]
 800a892:	f04f 0200 	mov.w	r2, #0
 800a896:	f04f 0300 	mov.w	r3, #0
 800a89a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a89e:	4629      	mov	r1, r5
 800a8a0:	028b      	lsls	r3, r1, #10
 800a8a2:	4621      	mov	r1, r4
 800a8a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a8a8:	4621      	mov	r1, r4
 800a8aa:	028a      	lsls	r2, r1, #10
 800a8ac:	4610      	mov	r0, r2
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	60bb      	str	r3, [r7, #8]
 800a8b6:	60fa      	str	r2, [r7, #12]
 800a8b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a8bc:	f7f6 f9ec 	bl	8000c98 <__aeabi_uldivmod>
 800a8c0:	4602      	mov	r2, r0
 800a8c2:	460b      	mov	r3, r1
 800a8c4:	4613      	mov	r3, r2
 800a8c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800a8c8:	4b0b      	ldr	r3, [pc, #44]	@ (800a8f8 <HAL_RCC_GetSysClockFreq+0x180>)
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	0c1b      	lsrs	r3, r3, #16
 800a8ce:	f003 0303 	and.w	r3, r3, #3
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	005b      	lsls	r3, r3, #1
 800a8d6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800a8d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a8e2:	e002      	b.n	800a8ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a8e4:	4b05      	ldr	r3, [pc, #20]	@ (800a8fc <HAL_RCC_GetSysClockFreq+0x184>)
 800a8e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a8e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a8ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3740      	adds	r7, #64	@ 0x40
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a8f6:	bf00      	nop
 800a8f8:	40023800 	.word	0x40023800
 800a8fc:	00f42400 	.word	0x00f42400
 800a900:	017d7840 	.word	0x017d7840

0800a904 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a904:	b480      	push	{r7}
 800a906:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a908:	4b03      	ldr	r3, [pc, #12]	@ (800a918 <HAL_RCC_GetHCLKFreq+0x14>)
 800a90a:	681b      	ldr	r3, [r3, #0]
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	46bd      	mov	sp, r7
 800a910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a914:	4770      	bx	lr
 800a916:	bf00      	nop
 800a918:	20000914 	.word	0x20000914

0800a91c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a920:	f7ff fff0 	bl	800a904 <HAL_RCC_GetHCLKFreq>
 800a924:	4602      	mov	r2, r0
 800a926:	4b05      	ldr	r3, [pc, #20]	@ (800a93c <HAL_RCC_GetPCLK1Freq+0x20>)
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	0a9b      	lsrs	r3, r3, #10
 800a92c:	f003 0307 	and.w	r3, r3, #7
 800a930:	4903      	ldr	r1, [pc, #12]	@ (800a940 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a932:	5ccb      	ldrb	r3, [r1, r3]
 800a934:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a938:	4618      	mov	r0, r3
 800a93a:	bd80      	pop	{r7, pc}
 800a93c:	40023800 	.word	0x40023800
 800a940:	0800dfbc 	.word	0x0800dfbc

0800a944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a948:	f7ff ffdc 	bl	800a904 <HAL_RCC_GetHCLKFreq>
 800a94c:	4602      	mov	r2, r0
 800a94e:	4b05      	ldr	r3, [pc, #20]	@ (800a964 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a950:	689b      	ldr	r3, [r3, #8]
 800a952:	0b5b      	lsrs	r3, r3, #13
 800a954:	f003 0307 	and.w	r3, r3, #7
 800a958:	4903      	ldr	r1, [pc, #12]	@ (800a968 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a95a:	5ccb      	ldrb	r3, [r1, r3]
 800a95c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a960:	4618      	mov	r0, r3
 800a962:	bd80      	pop	{r7, pc}
 800a964:	40023800 	.word	0x40023800
 800a968:	0800dfbc 	.word	0x0800dfbc

0800a96c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b082      	sub	sp, #8
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d101      	bne.n	800a97e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a97a:	2301      	movs	r3, #1
 800a97c:	e07b      	b.n	800aa76 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a982:	2b00      	cmp	r3, #0
 800a984:	d108      	bne.n	800a998 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a98e:	d009      	beq.n	800a9a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2200      	movs	r2, #0
 800a994:	61da      	str	r2, [r3, #28]
 800a996:	e005      	b.n	800a9a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2200      	movs	r2, #0
 800a99c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a9b0:	b2db      	uxtb	r3, r3
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d106      	bne.n	800a9c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f7fd f87e 	bl	8007ac0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2202      	movs	r2, #2
 800a9c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a9da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	689b      	ldr	r3, [r3, #8]
 800a9e8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a9ec:	431a      	orrs	r2, r3
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	68db      	ldr	r3, [r3, #12]
 800a9f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a9f6:	431a      	orrs	r2, r3
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	691b      	ldr	r3, [r3, #16]
 800a9fc:	f003 0302 	and.w	r3, r3, #2
 800aa00:	431a      	orrs	r2, r3
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	695b      	ldr	r3, [r3, #20]
 800aa06:	f003 0301 	and.w	r3, r3, #1
 800aa0a:	431a      	orrs	r2, r3
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	699b      	ldr	r3, [r3, #24]
 800aa10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aa14:	431a      	orrs	r2, r3
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	69db      	ldr	r3, [r3, #28]
 800aa1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aa1e:	431a      	orrs	r2, r3
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6a1b      	ldr	r3, [r3, #32]
 800aa24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa28:	ea42 0103 	orr.w	r1, r2, r3
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa30:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	430a      	orrs	r2, r1
 800aa3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	699b      	ldr	r3, [r3, #24]
 800aa40:	0c1b      	lsrs	r3, r3, #16
 800aa42:	f003 0104 	and.w	r1, r3, #4
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa4a:	f003 0210 	and.w	r2, r3, #16
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	430a      	orrs	r2, r1
 800aa54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	69da      	ldr	r2, [r3, #28]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800aa64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800aa74:	2300      	movs	r3, #0
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3708      	adds	r7, #8
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}

0800aa7e <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa7e:	b580      	push	{r7, lr}
 800aa80:	b088      	sub	sp, #32
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	60f8      	str	r0, [r7, #12]
 800aa86:	60b9      	str	r1, [r7, #8]
 800aa88:	603b      	str	r3, [r7, #0]
 800aa8a:	4613      	mov	r3, r2
 800aa8c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aa8e:	f7fd fb75 	bl	800817c <HAL_GetTick>
 800aa92:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800aa94:	88fb      	ldrh	r3, [r7, #6]
 800aa96:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	d001      	beq.n	800aaa8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800aaa4:	2302      	movs	r3, #2
 800aaa6:	e12a      	b.n	800acfe <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d002      	beq.n	800aab4 <HAL_SPI_Transmit+0x36>
 800aaae:	88fb      	ldrh	r3, [r7, #6]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d101      	bne.n	800aab8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800aab4:	2301      	movs	r3, #1
 800aab6:	e122      	b.n	800acfe <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800aabe:	2b01      	cmp	r3, #1
 800aac0:	d101      	bne.n	800aac6 <HAL_SPI_Transmit+0x48>
 800aac2:	2302      	movs	r3, #2
 800aac4:	e11b      	b.n	800acfe <HAL_SPI_Transmit+0x280>
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2201      	movs	r2, #1
 800aaca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2203      	movs	r2, #3
 800aad2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2200      	movs	r2, #0
 800aada:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	68ba      	ldr	r2, [r7, #8]
 800aae0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	88fa      	ldrh	r2, [r7, #6]
 800aae6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	88fa      	ldrh	r2, [r7, #6]
 800aaec:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	2200      	movs	r2, #0
 800aafe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	2200      	movs	r2, #0
 800ab04:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ab14:	d10f      	bne.n	800ab36 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ab24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ab34:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab40:	2b40      	cmp	r3, #64	@ 0x40
 800ab42:	d007      	beq.n	800ab54 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	681a      	ldr	r2, [r3, #0]
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ab52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	68db      	ldr	r3, [r3, #12]
 800ab58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ab5c:	d152      	bne.n	800ac04 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d002      	beq.n	800ab6c <HAL_SPI_Transmit+0xee>
 800ab66:	8b7b      	ldrh	r3, [r7, #26]
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d145      	bne.n	800abf8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab70:	881a      	ldrh	r2, [r3, #0]
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab7c:	1c9a      	adds	r2, r3, #2
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	3b01      	subs	r3, #1
 800ab8a:	b29a      	uxth	r2, r3
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ab90:	e032      	b.n	800abf8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	689b      	ldr	r3, [r3, #8]
 800ab98:	f003 0302 	and.w	r3, r3, #2
 800ab9c:	2b02      	cmp	r3, #2
 800ab9e:	d112      	bne.n	800abc6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aba4:	881a      	ldrh	r2, [r3, #0]
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abb0:	1c9a      	adds	r2, r3, #2
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800abba:	b29b      	uxth	r3, r3
 800abbc:	3b01      	subs	r3, #1
 800abbe:	b29a      	uxth	r2, r3
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	86da      	strh	r2, [r3, #54]	@ 0x36
 800abc4:	e018      	b.n	800abf8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800abc6:	f7fd fad9 	bl	800817c <HAL_GetTick>
 800abca:	4602      	mov	r2, r0
 800abcc:	69fb      	ldr	r3, [r7, #28]
 800abce:	1ad3      	subs	r3, r2, r3
 800abd0:	683a      	ldr	r2, [r7, #0]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d803      	bhi.n	800abde <HAL_SPI_Transmit+0x160>
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abdc:	d102      	bne.n	800abe4 <HAL_SPI_Transmit+0x166>
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d109      	bne.n	800abf8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2201      	movs	r2, #1
 800abe8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2200      	movs	r2, #0
 800abf0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800abf4:	2303      	movs	r3, #3
 800abf6:	e082      	b.n	800acfe <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800abfc:	b29b      	uxth	r3, r3
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d1c7      	bne.n	800ab92 <HAL_SPI_Transmit+0x114>
 800ac02:	e053      	b.n	800acac <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d002      	beq.n	800ac12 <HAL_SPI_Transmit+0x194>
 800ac0c:	8b7b      	ldrh	r3, [r7, #26]
 800ac0e:	2b01      	cmp	r3, #1
 800ac10:	d147      	bne.n	800aca2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	330c      	adds	r3, #12
 800ac1c:	7812      	ldrb	r2, [r2, #0]
 800ac1e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac24:	1c5a      	adds	r2, r3, #1
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ac2e:	b29b      	uxth	r3, r3
 800ac30:	3b01      	subs	r3, #1
 800ac32:	b29a      	uxth	r2, r3
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800ac38:	e033      	b.n	800aca2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	689b      	ldr	r3, [r3, #8]
 800ac40:	f003 0302 	and.w	r3, r3, #2
 800ac44:	2b02      	cmp	r3, #2
 800ac46:	d113      	bne.n	800ac70 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	330c      	adds	r3, #12
 800ac52:	7812      	ldrb	r2, [r2, #0]
 800ac54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac5a:	1c5a      	adds	r2, r3, #1
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	3b01      	subs	r3, #1
 800ac68:	b29a      	uxth	r2, r3
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800ac6e:	e018      	b.n	800aca2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ac70:	f7fd fa84 	bl	800817c <HAL_GetTick>
 800ac74:	4602      	mov	r2, r0
 800ac76:	69fb      	ldr	r3, [r7, #28]
 800ac78:	1ad3      	subs	r3, r2, r3
 800ac7a:	683a      	ldr	r2, [r7, #0]
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d803      	bhi.n	800ac88 <HAL_SPI_Transmit+0x20a>
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac86:	d102      	bne.n	800ac8e <HAL_SPI_Transmit+0x210>
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d109      	bne.n	800aca2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2201      	movs	r2, #1
 800ac92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800ac9e:	2303      	movs	r3, #3
 800aca0:	e02d      	b.n	800acfe <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d1c6      	bne.n	800ac3a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800acac:	69fa      	ldr	r2, [r7, #28]
 800acae:	6839      	ldr	r1, [r7, #0]
 800acb0:	68f8      	ldr	r0, [r7, #12]
 800acb2:	f000 fbd9 	bl	800b468 <SPI_EndRxTxTransaction>
 800acb6:	4603      	mov	r3, r0
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d002      	beq.n	800acc2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2220      	movs	r2, #32
 800acc0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	689b      	ldr	r3, [r3, #8]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d10a      	bne.n	800ace0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800acca:	2300      	movs	r3, #0
 800accc:	617b      	str	r3, [r7, #20]
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	68db      	ldr	r3, [r3, #12]
 800acd4:	617b      	str	r3, [r7, #20]
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	689b      	ldr	r3, [r3, #8]
 800acdc:	617b      	str	r3, [r7, #20]
 800acde:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2201      	movs	r2, #1
 800ace4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	2200      	movs	r2, #0
 800acec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d001      	beq.n	800acfc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800acf8:	2301      	movs	r3, #1
 800acfa:	e000      	b.n	800acfe <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800acfc:	2300      	movs	r3, #0
  }
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3720      	adds	r7, #32
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}

0800ad06 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad06:	b580      	push	{r7, lr}
 800ad08:	b088      	sub	sp, #32
 800ad0a:	af02      	add	r7, sp, #8
 800ad0c:	60f8      	str	r0, [r7, #12]
 800ad0e:	60b9      	str	r1, [r7, #8]
 800ad10:	603b      	str	r3, [r7, #0]
 800ad12:	4613      	mov	r3, r2
 800ad14:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	2b01      	cmp	r3, #1
 800ad20:	d001      	beq.n	800ad26 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800ad22:	2302      	movs	r3, #2
 800ad24:	e104      	b.n	800af30 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d002      	beq.n	800ad32 <HAL_SPI_Receive+0x2c>
 800ad2c:	88fb      	ldrh	r3, [r7, #6]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d101      	bne.n	800ad36 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800ad32:	2301      	movs	r3, #1
 800ad34:	e0fc      	b.n	800af30 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ad3e:	d112      	bne.n	800ad66 <HAL_SPI_Receive+0x60>
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	689b      	ldr	r3, [r3, #8]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d10e      	bne.n	800ad66 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	2204      	movs	r2, #4
 800ad4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ad50:	88fa      	ldrh	r2, [r7, #6]
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	9300      	str	r3, [sp, #0]
 800ad56:	4613      	mov	r3, r2
 800ad58:	68ba      	ldr	r2, [r7, #8]
 800ad5a:	68b9      	ldr	r1, [r7, #8]
 800ad5c:	68f8      	ldr	r0, [r7, #12]
 800ad5e:	f000 f8eb 	bl	800af38 <HAL_SPI_TransmitReceive>
 800ad62:	4603      	mov	r3, r0
 800ad64:	e0e4      	b.n	800af30 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ad66:	f7fd fa09 	bl	800817c <HAL_GetTick>
 800ad6a:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ad72:	2b01      	cmp	r3, #1
 800ad74:	d101      	bne.n	800ad7a <HAL_SPI_Receive+0x74>
 800ad76:	2302      	movs	r3, #2
 800ad78:	e0da      	b.n	800af30 <HAL_SPI_Receive+0x22a>
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	2204      	movs	r2, #4
 800ad86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	68ba      	ldr	r2, [r7, #8]
 800ad94:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	88fa      	ldrh	r2, [r7, #6]
 800ad9a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	88fa      	ldrh	r2, [r7, #6]
 800ada0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2200      	movs	r2, #0
 800ada6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	2200      	movs	r2, #0
 800adac:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2200      	movs	r2, #0
 800adb2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2200      	movs	r2, #0
 800adb8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2200      	movs	r2, #0
 800adbe:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	689b      	ldr	r3, [r3, #8]
 800adc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800adc8:	d10f      	bne.n	800adea <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	681a      	ldr	r2, [r3, #0]
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800add8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	681a      	ldr	r2, [r3, #0]
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ade8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adf4:	2b40      	cmp	r3, #64	@ 0x40
 800adf6:	d007      	beq.n	800ae08 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ae06:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	68db      	ldr	r3, [r3, #12]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d170      	bne.n	800aef2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800ae10:	e035      	b.n	800ae7e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	689b      	ldr	r3, [r3, #8]
 800ae18:	f003 0301 	and.w	r3, r3, #1
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d115      	bne.n	800ae4c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f103 020c 	add.w	r2, r3, #12
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae2c:	7812      	ldrb	r2, [r2, #0]
 800ae2e:	b2d2      	uxtb	r2, r2
 800ae30:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae36:	1c5a      	adds	r2, r3, #1
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ae40:	b29b      	uxth	r3, r3
 800ae42:	3b01      	subs	r3, #1
 800ae44:	b29a      	uxth	r2, r3
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ae4a:	e018      	b.n	800ae7e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ae4c:	f7fd f996 	bl	800817c <HAL_GetTick>
 800ae50:	4602      	mov	r2, r0
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	1ad3      	subs	r3, r2, r3
 800ae56:	683a      	ldr	r2, [r7, #0]
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d803      	bhi.n	800ae64 <HAL_SPI_Receive+0x15e>
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae62:	d102      	bne.n	800ae6a <HAL_SPI_Receive+0x164>
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d109      	bne.n	800ae7e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2200      	movs	r2, #0
 800ae76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800ae7a:	2303      	movs	r3, #3
 800ae7c:	e058      	b.n	800af30 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d1c4      	bne.n	800ae12 <HAL_SPI_Receive+0x10c>
 800ae88:	e038      	b.n	800aefc <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	689b      	ldr	r3, [r3, #8]
 800ae90:	f003 0301 	and.w	r3, r3, #1
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	d113      	bne.n	800aec0 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	68da      	ldr	r2, [r3, #12]
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aea2:	b292      	uxth	r2, r2
 800aea4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aeaa:	1c9a      	adds	r2, r3, #2
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aeb4:	b29b      	uxth	r3, r3
 800aeb6:	3b01      	subs	r3, #1
 800aeb8:	b29a      	uxth	r2, r3
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800aebe:	e018      	b.n	800aef2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aec0:	f7fd f95c 	bl	800817c <HAL_GetTick>
 800aec4:	4602      	mov	r2, r0
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	1ad3      	subs	r3, r2, r3
 800aeca:	683a      	ldr	r2, [r7, #0]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d803      	bhi.n	800aed8 <HAL_SPI_Receive+0x1d2>
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aed6:	d102      	bne.n	800aede <HAL_SPI_Receive+0x1d8>
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d109      	bne.n	800aef2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2201      	movs	r2, #1
 800aee2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2200      	movs	r2, #0
 800aeea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800aeee:	2303      	movs	r3, #3
 800aef0:	e01e      	b.n	800af30 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d1c6      	bne.n	800ae8a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800aefc:	697a      	ldr	r2, [r7, #20]
 800aefe:	6839      	ldr	r1, [r7, #0]
 800af00:	68f8      	ldr	r0, [r7, #12]
 800af02:	f000 fa4b 	bl	800b39c <SPI_EndRxTransaction>
 800af06:	4603      	mov	r3, r0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d002      	beq.n	800af12 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2220      	movs	r2, #32
 800af10:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	2201      	movs	r2, #1
 800af16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	2200      	movs	r2, #0
 800af1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af26:	2b00      	cmp	r3, #0
 800af28:	d001      	beq.n	800af2e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800af2a:	2301      	movs	r3, #1
 800af2c:	e000      	b.n	800af30 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800af2e:	2300      	movs	r3, #0
  }
}
 800af30:	4618      	mov	r0, r3
 800af32:	3718      	adds	r7, #24
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b08a      	sub	sp, #40	@ 0x28
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	60f8      	str	r0, [r7, #12]
 800af40:	60b9      	str	r1, [r7, #8]
 800af42:	607a      	str	r2, [r7, #4]
 800af44:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800af46:	2301      	movs	r3, #1
 800af48:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800af4a:	f7fd f917 	bl	800817c <HAL_GetTick>
 800af4e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800af56:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800af5e:	887b      	ldrh	r3, [r7, #2]
 800af60:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800af62:	7ffb      	ldrb	r3, [r7, #31]
 800af64:	2b01      	cmp	r3, #1
 800af66:	d00c      	beq.n	800af82 <HAL_SPI_TransmitReceive+0x4a>
 800af68:	69bb      	ldr	r3, [r7, #24]
 800af6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800af6e:	d106      	bne.n	800af7e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	689b      	ldr	r3, [r3, #8]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d102      	bne.n	800af7e <HAL_SPI_TransmitReceive+0x46>
 800af78:	7ffb      	ldrb	r3, [r7, #31]
 800af7a:	2b04      	cmp	r3, #4
 800af7c:	d001      	beq.n	800af82 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800af7e:	2302      	movs	r3, #2
 800af80:	e17f      	b.n	800b282 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d005      	beq.n	800af94 <HAL_SPI_TransmitReceive+0x5c>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d002      	beq.n	800af94 <HAL_SPI_TransmitReceive+0x5c>
 800af8e:	887b      	ldrh	r3, [r7, #2]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d101      	bne.n	800af98 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800af94:	2301      	movs	r3, #1
 800af96:	e174      	b.n	800b282 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800af9e:	2b01      	cmp	r3, #1
 800afa0:	d101      	bne.n	800afa6 <HAL_SPI_TransmitReceive+0x6e>
 800afa2:	2302      	movs	r3, #2
 800afa4:	e16d      	b.n	800b282 <HAL_SPI_TransmitReceive+0x34a>
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2201      	movs	r2, #1
 800afaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800afb4:	b2db      	uxtb	r3, r3
 800afb6:	2b04      	cmp	r3, #4
 800afb8:	d003      	beq.n	800afc2 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2205      	movs	r2, #5
 800afbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2200      	movs	r2, #0
 800afc6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	687a      	ldr	r2, [r7, #4]
 800afcc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	887a      	ldrh	r2, [r7, #2]
 800afd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	887a      	ldrh	r2, [r7, #2]
 800afd8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	68ba      	ldr	r2, [r7, #8]
 800afde:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	887a      	ldrh	r2, [r7, #2]
 800afe4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	887a      	ldrh	r2, [r7, #2]
 800afea:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2200      	movs	r2, #0
 800aff0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	2200      	movs	r2, #0
 800aff6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b002:	2b40      	cmp	r3, #64	@ 0x40
 800b004:	d007      	beq.n	800b016 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	681a      	ldr	r2, [r3, #0]
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b014:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	68db      	ldr	r3, [r3, #12]
 800b01a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b01e:	d17e      	bne.n	800b11e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	685b      	ldr	r3, [r3, #4]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d002      	beq.n	800b02e <HAL_SPI_TransmitReceive+0xf6>
 800b028:	8afb      	ldrh	r3, [r7, #22]
 800b02a:	2b01      	cmp	r3, #1
 800b02c:	d16c      	bne.n	800b108 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b032:	881a      	ldrh	r2, [r3, #0]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b03e:	1c9a      	adds	r2, r3, #2
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b048:	b29b      	uxth	r3, r3
 800b04a:	3b01      	subs	r3, #1
 800b04c:	b29a      	uxth	r2, r3
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b052:	e059      	b.n	800b108 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	689b      	ldr	r3, [r3, #8]
 800b05a:	f003 0302 	and.w	r3, r3, #2
 800b05e:	2b02      	cmp	r3, #2
 800b060:	d11b      	bne.n	800b09a <HAL_SPI_TransmitReceive+0x162>
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b066:	b29b      	uxth	r3, r3
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d016      	beq.n	800b09a <HAL_SPI_TransmitReceive+0x162>
 800b06c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b06e:	2b01      	cmp	r3, #1
 800b070:	d113      	bne.n	800b09a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b076:	881a      	ldrh	r2, [r3, #0]
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b082:	1c9a      	adds	r2, r3, #2
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b08c:	b29b      	uxth	r3, r3
 800b08e:	3b01      	subs	r3, #1
 800b090:	b29a      	uxth	r2, r3
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b096:	2300      	movs	r3, #0
 800b098:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	689b      	ldr	r3, [r3, #8]
 800b0a0:	f003 0301 	and.w	r3, r3, #1
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	d119      	bne.n	800b0dc <HAL_SPI_TransmitReceive+0x1a4>
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d014      	beq.n	800b0dc <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	68da      	ldr	r2, [r3, #12]
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0bc:	b292      	uxth	r2, r2
 800b0be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0c4:	1c9a      	adds	r2, r3, #2
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	3b01      	subs	r3, #1
 800b0d2:	b29a      	uxth	r2, r3
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b0dc:	f7fd f84e 	bl	800817c <HAL_GetTick>
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	6a3b      	ldr	r3, [r7, #32]
 800b0e4:	1ad3      	subs	r3, r2, r3
 800b0e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0e8:	429a      	cmp	r2, r3
 800b0ea:	d80d      	bhi.n	800b108 <HAL_SPI_TransmitReceive+0x1d0>
 800b0ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0f2:	d009      	beq.n	800b108 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	2200      	movs	r2, #0
 800b100:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800b104:	2303      	movs	r3, #3
 800b106:	e0bc      	b.n	800b282 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b10c:	b29b      	uxth	r3, r3
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d1a0      	bne.n	800b054 <HAL_SPI_TransmitReceive+0x11c>
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b116:	b29b      	uxth	r3, r3
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d19b      	bne.n	800b054 <HAL_SPI_TransmitReceive+0x11c>
 800b11c:	e082      	b.n	800b224 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d002      	beq.n	800b12c <HAL_SPI_TransmitReceive+0x1f4>
 800b126:	8afb      	ldrh	r3, [r7, #22]
 800b128:	2b01      	cmp	r3, #1
 800b12a:	d171      	bne.n	800b210 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	330c      	adds	r3, #12
 800b136:	7812      	ldrb	r2, [r2, #0]
 800b138:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b13e:	1c5a      	adds	r2, r3, #1
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b148:	b29b      	uxth	r3, r3
 800b14a:	3b01      	subs	r3, #1
 800b14c:	b29a      	uxth	r2, r3
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b152:	e05d      	b.n	800b210 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	689b      	ldr	r3, [r3, #8]
 800b15a:	f003 0302 	and.w	r3, r3, #2
 800b15e:	2b02      	cmp	r3, #2
 800b160:	d11c      	bne.n	800b19c <HAL_SPI_TransmitReceive+0x264>
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b166:	b29b      	uxth	r3, r3
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d017      	beq.n	800b19c <HAL_SPI_TransmitReceive+0x264>
 800b16c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d114      	bne.n	800b19c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	330c      	adds	r3, #12
 800b17c:	7812      	ldrb	r2, [r2, #0]
 800b17e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b184:	1c5a      	adds	r2, r3, #1
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b18e:	b29b      	uxth	r3, r3
 800b190:	3b01      	subs	r3, #1
 800b192:	b29a      	uxth	r2, r3
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b198:	2300      	movs	r3, #0
 800b19a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	689b      	ldr	r3, [r3, #8]
 800b1a2:	f003 0301 	and.w	r3, r3, #1
 800b1a6:	2b01      	cmp	r3, #1
 800b1a8:	d119      	bne.n	800b1de <HAL_SPI_TransmitReceive+0x2a6>
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b1ae:	b29b      	uxth	r3, r3
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d014      	beq.n	800b1de <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	68da      	ldr	r2, [r3, #12]
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1be:	b2d2      	uxtb	r2, r2
 800b1c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1c6:	1c5a      	adds	r2, r3, #1
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	3b01      	subs	r3, #1
 800b1d4:	b29a      	uxth	r2, r3
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b1da:	2301      	movs	r3, #1
 800b1dc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b1de:	f7fc ffcd 	bl	800817c <HAL_GetTick>
 800b1e2:	4602      	mov	r2, r0
 800b1e4:	6a3b      	ldr	r3, [r7, #32]
 800b1e6:	1ad3      	subs	r3, r2, r3
 800b1e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d803      	bhi.n	800b1f6 <HAL_SPI_TransmitReceive+0x2be>
 800b1ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1f4:	d102      	bne.n	800b1fc <HAL_SPI_TransmitReceive+0x2c4>
 800b1f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d109      	bne.n	800b210 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2201      	movs	r2, #1
 800b200:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2200      	movs	r2, #0
 800b208:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800b20c:	2303      	movs	r3, #3
 800b20e:	e038      	b.n	800b282 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b214:	b29b      	uxth	r3, r3
 800b216:	2b00      	cmp	r3, #0
 800b218:	d19c      	bne.n	800b154 <HAL_SPI_TransmitReceive+0x21c>
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b21e:	b29b      	uxth	r3, r3
 800b220:	2b00      	cmp	r3, #0
 800b222:	d197      	bne.n	800b154 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b224:	6a3a      	ldr	r2, [r7, #32]
 800b226:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b228:	68f8      	ldr	r0, [r7, #12]
 800b22a:	f000 f91d 	bl	800b468 <SPI_EndRxTxTransaction>
 800b22e:	4603      	mov	r3, r0
 800b230:	2b00      	cmp	r3, #0
 800b232:	d008      	beq.n	800b246 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2220      	movs	r2, #32
 800b238:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	2200      	movs	r2, #0
 800b23e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800b242:	2301      	movs	r3, #1
 800b244:	e01d      	b.n	800b282 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	689b      	ldr	r3, [r3, #8]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d10a      	bne.n	800b264 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b24e:	2300      	movs	r3, #0
 800b250:	613b      	str	r3, [r7, #16]
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	68db      	ldr	r3, [r3, #12]
 800b258:	613b      	str	r3, [r7, #16]
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	689b      	ldr	r3, [r3, #8]
 800b260:	613b      	str	r3, [r7, #16]
 800b262:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	2201      	movs	r2, #1
 800b268:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	2200      	movs	r2, #0
 800b270:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d001      	beq.n	800b280 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800b27c:	2301      	movs	r3, #1
 800b27e:	e000      	b.n	800b282 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800b280:	2300      	movs	r3, #0
  }
}
 800b282:	4618      	mov	r0, r3
 800b284:	3728      	adds	r7, #40	@ 0x28
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
	...

0800b28c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b088      	sub	sp, #32
 800b290:	af00      	add	r7, sp, #0
 800b292:	60f8      	str	r0, [r7, #12]
 800b294:	60b9      	str	r1, [r7, #8]
 800b296:	603b      	str	r3, [r7, #0]
 800b298:	4613      	mov	r3, r2
 800b29a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b29c:	f7fc ff6e 	bl	800817c <HAL_GetTick>
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2a4:	1a9b      	subs	r3, r3, r2
 800b2a6:	683a      	ldr	r2, [r7, #0]
 800b2a8:	4413      	add	r3, r2
 800b2aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b2ac:	f7fc ff66 	bl	800817c <HAL_GetTick>
 800b2b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b2b2:	4b39      	ldr	r3, [pc, #228]	@ (800b398 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	015b      	lsls	r3, r3, #5
 800b2b8:	0d1b      	lsrs	r3, r3, #20
 800b2ba:	69fa      	ldr	r2, [r7, #28]
 800b2bc:	fb02 f303 	mul.w	r3, r2, r3
 800b2c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b2c2:	e055      	b.n	800b370 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2ca:	d051      	beq.n	800b370 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b2cc:	f7fc ff56 	bl	800817c <HAL_GetTick>
 800b2d0:	4602      	mov	r2, r0
 800b2d2:	69bb      	ldr	r3, [r7, #24]
 800b2d4:	1ad3      	subs	r3, r2, r3
 800b2d6:	69fa      	ldr	r2, [r7, #28]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d902      	bls.n	800b2e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b2dc:	69fb      	ldr	r3, [r7, #28]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d13d      	bne.n	800b35e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	685a      	ldr	r2, [r3, #4]
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800b2f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	685b      	ldr	r3, [r3, #4]
 800b2f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b2fa:	d111      	bne.n	800b320 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	689b      	ldr	r3, [r3, #8]
 800b300:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b304:	d004      	beq.n	800b310 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	689b      	ldr	r3, [r3, #8]
 800b30a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b30e:	d107      	bne.n	800b320 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	681a      	ldr	r2, [r3, #0]
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b31e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b324:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b328:	d10f      	bne.n	800b34a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	681a      	ldr	r2, [r3, #0]
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b338:	601a      	str	r2, [r3, #0]
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	681a      	ldr	r2, [r3, #0]
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b348:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	2201      	movs	r2, #1
 800b34e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2200      	movs	r2, #0
 800b356:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800b35a:	2303      	movs	r3, #3
 800b35c:	e018      	b.n	800b390 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d102      	bne.n	800b36a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800b364:	2300      	movs	r3, #0
 800b366:	61fb      	str	r3, [r7, #28]
 800b368:	e002      	b.n	800b370 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	3b01      	subs	r3, #1
 800b36e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	689a      	ldr	r2, [r3, #8]
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	4013      	ands	r3, r2
 800b37a:	68ba      	ldr	r2, [r7, #8]
 800b37c:	429a      	cmp	r2, r3
 800b37e:	bf0c      	ite	eq
 800b380:	2301      	moveq	r3, #1
 800b382:	2300      	movne	r3, #0
 800b384:	b2db      	uxtb	r3, r3
 800b386:	461a      	mov	r2, r3
 800b388:	79fb      	ldrb	r3, [r7, #7]
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d19a      	bne.n	800b2c4 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800b38e:	2300      	movs	r3, #0
}
 800b390:	4618      	mov	r0, r3
 800b392:	3720      	adds	r7, #32
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}
 800b398:	20000914 	.word	0x20000914

0800b39c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b086      	sub	sp, #24
 800b3a0:	af02      	add	r7, sp, #8
 800b3a2:	60f8      	str	r0, [r7, #12]
 800b3a4:	60b9      	str	r1, [r7, #8]
 800b3a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b3b0:	d111      	bne.n	800b3d6 <SPI_EndRxTransaction+0x3a>
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	689b      	ldr	r3, [r3, #8]
 800b3b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b3ba:	d004      	beq.n	800b3c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	689b      	ldr	r3, [r3, #8]
 800b3c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b3c4:	d107      	bne.n	800b3d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	681a      	ldr	r2, [r3, #0]
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b3d4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	685b      	ldr	r3, [r3, #4]
 800b3da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b3de:	d12a      	bne.n	800b436 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b3e8:	d012      	beq.n	800b410 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	9300      	str	r3, [sp, #0]
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	2180      	movs	r1, #128	@ 0x80
 800b3f4:	68f8      	ldr	r0, [r7, #12]
 800b3f6:	f7ff ff49 	bl	800b28c <SPI_WaitFlagStateUntilTimeout>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d02d      	beq.n	800b45c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b404:	f043 0220 	orr.w	r2, r3, #32
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800b40c:	2303      	movs	r3, #3
 800b40e:	e026      	b.n	800b45e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	9300      	str	r3, [sp, #0]
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	2200      	movs	r2, #0
 800b418:	2101      	movs	r1, #1
 800b41a:	68f8      	ldr	r0, [r7, #12]
 800b41c:	f7ff ff36 	bl	800b28c <SPI_WaitFlagStateUntilTimeout>
 800b420:	4603      	mov	r3, r0
 800b422:	2b00      	cmp	r3, #0
 800b424:	d01a      	beq.n	800b45c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b42a:	f043 0220 	orr.w	r2, r3, #32
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800b432:	2303      	movs	r3, #3
 800b434:	e013      	b.n	800b45e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	9300      	str	r3, [sp, #0]
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	2200      	movs	r2, #0
 800b43e:	2101      	movs	r1, #1
 800b440:	68f8      	ldr	r0, [r7, #12]
 800b442:	f7ff ff23 	bl	800b28c <SPI_WaitFlagStateUntilTimeout>
 800b446:	4603      	mov	r3, r0
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d007      	beq.n	800b45c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b450:	f043 0220 	orr.w	r2, r3, #32
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800b458:	2303      	movs	r3, #3
 800b45a:	e000      	b.n	800b45e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800b45c:	2300      	movs	r3, #0
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3710      	adds	r7, #16
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
	...

0800b468 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b088      	sub	sp, #32
 800b46c:	af02      	add	r7, sp, #8
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	9300      	str	r3, [sp, #0]
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	2201      	movs	r2, #1
 800b47c:	2102      	movs	r1, #2
 800b47e:	68f8      	ldr	r0, [r7, #12]
 800b480:	f7ff ff04 	bl	800b28c <SPI_WaitFlagStateUntilTimeout>
 800b484:	4603      	mov	r3, r0
 800b486:	2b00      	cmp	r3, #0
 800b488:	d007      	beq.n	800b49a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b48e:	f043 0220 	orr.w	r2, r3, #32
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800b496:	2303      	movs	r3, #3
 800b498:	e032      	b.n	800b500 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b49a:	4b1b      	ldr	r3, [pc, #108]	@ (800b508 <SPI_EndRxTxTransaction+0xa0>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	4a1b      	ldr	r2, [pc, #108]	@ (800b50c <SPI_EndRxTxTransaction+0xa4>)
 800b4a0:	fba2 2303 	umull	r2, r3, r2, r3
 800b4a4:	0d5b      	lsrs	r3, r3, #21
 800b4a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b4aa:	fb02 f303 	mul.w	r3, r2, r3
 800b4ae:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b4b8:	d112      	bne.n	800b4e0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	9300      	str	r3, [sp, #0]
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	2180      	movs	r1, #128	@ 0x80
 800b4c4:	68f8      	ldr	r0, [r7, #12]
 800b4c6:	f7ff fee1 	bl	800b28c <SPI_WaitFlagStateUntilTimeout>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d016      	beq.n	800b4fe <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4d4:	f043 0220 	orr.w	r2, r3, #32
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800b4dc:	2303      	movs	r3, #3
 800b4de:	e00f      	b.n	800b500 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d00a      	beq.n	800b4fc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	3b01      	subs	r3, #1
 800b4ea:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	689b      	ldr	r3, [r3, #8]
 800b4f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b4f6:	2b80      	cmp	r3, #128	@ 0x80
 800b4f8:	d0f2      	beq.n	800b4e0 <SPI_EndRxTxTransaction+0x78>
 800b4fa:	e000      	b.n	800b4fe <SPI_EndRxTxTransaction+0x96>
        break;
 800b4fc:	bf00      	nop
  }

  return HAL_OK;
 800b4fe:	2300      	movs	r3, #0
}
 800b500:	4618      	mov	r0, r3
 800b502:	3718      	adds	r7, #24
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}
 800b508:	20000914 	.word	0x20000914
 800b50c:	165e9f81 	.word	0x165e9f81

0800b510 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b082      	sub	sp, #8
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d101      	bne.n	800b522 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b51e:	2301      	movs	r3, #1
 800b520:	e042      	b.n	800b5a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b528:	b2db      	uxtb	r3, r3
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d106      	bne.n	800b53c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2200      	movs	r2, #0
 800b532:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f7fc fbbe 	bl	8007cb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2224      	movs	r2, #36	@ 0x24
 800b540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	68da      	ldr	r2, [r3, #12]
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b552:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f000 fe09 	bl	800c16c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	691a      	ldr	r2, [r3, #16]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b568:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	695a      	ldr	r2, [r3, #20]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b578:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	68da      	ldr	r2, [r3, #12]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b588:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2200      	movs	r2, #0
 800b58e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2220      	movs	r2, #32
 800b594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2220      	movs	r2, #32
 800b59c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b5a6:	2300      	movs	r3, #0
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3708      	adds	r7, #8
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}

0800b5b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b08a      	sub	sp, #40	@ 0x28
 800b5b4:	af02      	add	r7, sp, #8
 800b5b6:	60f8      	str	r0, [r7, #12]
 800b5b8:	60b9      	str	r1, [r7, #8]
 800b5ba:	603b      	str	r3, [r7, #0]
 800b5bc:	4613      	mov	r3, r2
 800b5be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b5ca:	b2db      	uxtb	r3, r3
 800b5cc:	2b20      	cmp	r3, #32
 800b5ce:	d175      	bne.n	800b6bc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d002      	beq.n	800b5dc <HAL_UART_Transmit+0x2c>
 800b5d6:	88fb      	ldrh	r3, [r7, #6]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d101      	bne.n	800b5e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b5dc:	2301      	movs	r3, #1
 800b5de:	e06e      	b.n	800b6be <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2221      	movs	r2, #33	@ 0x21
 800b5ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b5ee:	f7fc fdc5 	bl	800817c <HAL_GetTick>
 800b5f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	88fa      	ldrh	r2, [r7, #6]
 800b5f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	88fa      	ldrh	r2, [r7, #6]
 800b5fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	689b      	ldr	r3, [r3, #8]
 800b604:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b608:	d108      	bne.n	800b61c <HAL_UART_Transmit+0x6c>
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	691b      	ldr	r3, [r3, #16]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d104      	bne.n	800b61c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b612:	2300      	movs	r3, #0
 800b614:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	61bb      	str	r3, [r7, #24]
 800b61a:	e003      	b.n	800b624 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b620:	2300      	movs	r3, #0
 800b622:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b624:	e02e      	b.n	800b684 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	9300      	str	r3, [sp, #0]
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	2200      	movs	r2, #0
 800b62e:	2180      	movs	r1, #128	@ 0x80
 800b630:	68f8      	ldr	r0, [r7, #12]
 800b632:	f000 fb6d 	bl	800bd10 <UART_WaitOnFlagUntilTimeout>
 800b636:	4603      	mov	r3, r0
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d005      	beq.n	800b648 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	2220      	movs	r2, #32
 800b640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800b644:	2303      	movs	r3, #3
 800b646:	e03a      	b.n	800b6be <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800b648:	69fb      	ldr	r3, [r7, #28]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d10b      	bne.n	800b666 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b64e:	69bb      	ldr	r3, [r7, #24]
 800b650:	881b      	ldrh	r3, [r3, #0]
 800b652:	461a      	mov	r2, r3
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b65c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b65e:	69bb      	ldr	r3, [r7, #24]
 800b660:	3302      	adds	r3, #2
 800b662:	61bb      	str	r3, [r7, #24]
 800b664:	e007      	b.n	800b676 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b666:	69fb      	ldr	r3, [r7, #28]
 800b668:	781a      	ldrb	r2, [r3, #0]
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b670:	69fb      	ldr	r3, [r7, #28]
 800b672:	3301      	adds	r3, #1
 800b674:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b67a:	b29b      	uxth	r3, r3
 800b67c:	3b01      	subs	r3, #1
 800b67e:	b29a      	uxth	r2, r3
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b688:	b29b      	uxth	r3, r3
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d1cb      	bne.n	800b626 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	9300      	str	r3, [sp, #0]
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	2200      	movs	r2, #0
 800b696:	2140      	movs	r1, #64	@ 0x40
 800b698:	68f8      	ldr	r0, [r7, #12]
 800b69a:	f000 fb39 	bl	800bd10 <UART_WaitOnFlagUntilTimeout>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d005      	beq.n	800b6b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2220      	movs	r2, #32
 800b6a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800b6ac:	2303      	movs	r3, #3
 800b6ae:	e006      	b.n	800b6be <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	2220      	movs	r2, #32
 800b6b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	e000      	b.n	800b6be <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800b6bc:	2302      	movs	r3, #2
  }
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3720      	adds	r7, #32
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}

0800b6c6 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b6c6:	b580      	push	{r7, lr}
 800b6c8:	b08c      	sub	sp, #48	@ 0x30
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	60f8      	str	r0, [r7, #12]
 800b6ce:	60b9      	str	r1, [r7, #8]
 800b6d0:	4613      	mov	r3, r2
 800b6d2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b6da:	b2db      	uxtb	r3, r3
 800b6dc:	2b20      	cmp	r3, #32
 800b6de:	d14a      	bne.n	800b776 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d002      	beq.n	800b6ec <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800b6e6:	88fb      	ldrh	r3, [r7, #6]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d101      	bne.n	800b6f0 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	e043      	b.n	800b778 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800b6fc:	88fb      	ldrh	r3, [r7, #6]
 800b6fe:	461a      	mov	r2, r3
 800b700:	68b9      	ldr	r1, [r7, #8]
 800b702:	68f8      	ldr	r0, [r7, #12]
 800b704:	f000 fb5d 	bl	800bdc2 <UART_Start_Receive_IT>
 800b708:	4603      	mov	r3, r0
 800b70a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b70e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b712:	2b00      	cmp	r3, #0
 800b714:	d12c      	bne.n	800b770 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b71a:	2b01      	cmp	r3, #1
 800b71c:	d125      	bne.n	800b76a <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b71e:	2300      	movs	r3, #0
 800b720:	613b      	str	r3, [r7, #16]
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	613b      	str	r3, [r7, #16]
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	685b      	ldr	r3, [r3, #4]
 800b730:	613b      	str	r3, [r7, #16]
 800b732:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	330c      	adds	r3, #12
 800b73a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b73c:	69bb      	ldr	r3, [r7, #24]
 800b73e:	e853 3f00 	ldrex	r3, [r3]
 800b742:	617b      	str	r3, [r7, #20]
   return(result);
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	f043 0310 	orr.w	r3, r3, #16
 800b74a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	330c      	adds	r3, #12
 800b752:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b754:	627a      	str	r2, [r7, #36]	@ 0x24
 800b756:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b758:	6a39      	ldr	r1, [r7, #32]
 800b75a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b75c:	e841 2300 	strex	r3, r2, [r1]
 800b760:	61fb      	str	r3, [r7, #28]
   return(result);
 800b762:	69fb      	ldr	r3, [r7, #28]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d1e5      	bne.n	800b734 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 800b768:	e002      	b.n	800b770 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b76a:	2301      	movs	r3, #1
 800b76c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800b770:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b774:	e000      	b.n	800b778 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800b776:	2302      	movs	r3, #2
  }
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3730      	adds	r7, #48	@ 0x30
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b0ba      	sub	sp, #232	@ 0xe8
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	695b      	ldr	r3, [r3, #20]
 800b7a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b7b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b7b6:	f003 030f 	and.w	r3, r3, #15
 800b7ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800b7be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d10f      	bne.n	800b7e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b7c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b7ca:	f003 0320 	and.w	r3, r3, #32
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d009      	beq.n	800b7e6 <HAL_UART_IRQHandler+0x66>
 800b7d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b7d6:	f003 0320 	and.w	r3, r3, #32
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d003      	beq.n	800b7e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f000 fc05 	bl	800bfee <UART_Receive_IT>
      return;
 800b7e4:	e273      	b.n	800bcce <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b7e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	f000 80de 	beq.w	800b9ac <HAL_UART_IRQHandler+0x22c>
 800b7f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b7f4:	f003 0301 	and.w	r3, r3, #1
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d106      	bne.n	800b80a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b7fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b800:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800b804:	2b00      	cmp	r3, #0
 800b806:	f000 80d1 	beq.w	800b9ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b80a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b80e:	f003 0301 	and.w	r3, r3, #1
 800b812:	2b00      	cmp	r3, #0
 800b814:	d00b      	beq.n	800b82e <HAL_UART_IRQHandler+0xae>
 800b816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b81a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d005      	beq.n	800b82e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b826:	f043 0201 	orr.w	r2, r3, #1
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b82e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b832:	f003 0304 	and.w	r3, r3, #4
 800b836:	2b00      	cmp	r3, #0
 800b838:	d00b      	beq.n	800b852 <HAL_UART_IRQHandler+0xd2>
 800b83a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b83e:	f003 0301 	and.w	r3, r3, #1
 800b842:	2b00      	cmp	r3, #0
 800b844:	d005      	beq.n	800b852 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b84a:	f043 0202 	orr.w	r2, r3, #2
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b856:	f003 0302 	and.w	r3, r3, #2
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d00b      	beq.n	800b876 <HAL_UART_IRQHandler+0xf6>
 800b85e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b862:	f003 0301 	and.w	r3, r3, #1
 800b866:	2b00      	cmp	r3, #0
 800b868:	d005      	beq.n	800b876 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b86e:	f043 0204 	orr.w	r2, r3, #4
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b87a:	f003 0308 	and.w	r3, r3, #8
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d011      	beq.n	800b8a6 <HAL_UART_IRQHandler+0x126>
 800b882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b886:	f003 0320 	and.w	r3, r3, #32
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d105      	bne.n	800b89a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b88e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b892:	f003 0301 	and.w	r3, r3, #1
 800b896:	2b00      	cmp	r3, #0
 800b898:	d005      	beq.n	800b8a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b89e:	f043 0208 	orr.w	r2, r3, #8
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	f000 820a 	beq.w	800bcc4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b8b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b8b4:	f003 0320 	and.w	r3, r3, #32
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d008      	beq.n	800b8ce <HAL_UART_IRQHandler+0x14e>
 800b8bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b8c0:	f003 0320 	and.w	r3, r3, #32
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d002      	beq.n	800b8ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f000 fb90 	bl	800bfee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	695b      	ldr	r3, [r3, #20]
 800b8d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8d8:	2b40      	cmp	r3, #64	@ 0x40
 800b8da:	bf0c      	ite	eq
 800b8dc:	2301      	moveq	r3, #1
 800b8de:	2300      	movne	r3, #0
 800b8e0:	b2db      	uxtb	r3, r3
 800b8e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b8ea:	f003 0308 	and.w	r3, r3, #8
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d103      	bne.n	800b8fa <HAL_UART_IRQHandler+0x17a>
 800b8f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d04f      	beq.n	800b99a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f000 fa9b 	bl	800be36 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	695b      	ldr	r3, [r3, #20]
 800b906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b90a:	2b40      	cmp	r3, #64	@ 0x40
 800b90c:	d141      	bne.n	800b992 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	3314      	adds	r3, #20
 800b914:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b918:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b91c:	e853 3f00 	ldrex	r3, [r3]
 800b920:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b924:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b928:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b92c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	3314      	adds	r3, #20
 800b936:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b93a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b93e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b942:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b946:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b94a:	e841 2300 	strex	r3, r2, [r1]
 800b94e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b952:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b956:	2b00      	cmp	r3, #0
 800b958:	d1d9      	bne.n	800b90e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d013      	beq.n	800b98a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b966:	4a8a      	ldr	r2, [pc, #552]	@ (800bb90 <HAL_UART_IRQHandler+0x410>)
 800b968:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b96e:	4618      	mov	r0, r3
 800b970:	f7fd f8e9 	bl	8008b46 <HAL_DMA_Abort_IT>
 800b974:	4603      	mov	r3, r0
 800b976:	2b00      	cmp	r3, #0
 800b978:	d016      	beq.n	800b9a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b97e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b980:	687a      	ldr	r2, [r7, #4]
 800b982:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b984:	4610      	mov	r0, r2
 800b986:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b988:	e00e      	b.n	800b9a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f000 f9b6 	bl	800bcfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b990:	e00a      	b.n	800b9a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f000 f9b2 	bl	800bcfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b998:	e006      	b.n	800b9a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f000 f9ae 	bl	800bcfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800b9a6:	e18d      	b.n	800bcc4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9a8:	bf00      	nop
    return;
 800b9aa:	e18b      	b.n	800bcc4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	f040 8167 	bne.w	800bc84 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b9b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9ba:	f003 0310 	and.w	r3, r3, #16
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	f000 8160 	beq.w	800bc84 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800b9c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b9c8:	f003 0310 	and.w	r3, r3, #16
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	f000 8159 	beq.w	800bc84 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	60bb      	str	r3, [r7, #8]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	60bb      	str	r3, [r7, #8]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	60bb      	str	r3, [r7, #8]
 800b9e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	695b      	ldr	r3, [r3, #20]
 800b9ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9f2:	2b40      	cmp	r3, #64	@ 0x40
 800b9f4:	f040 80ce 	bne.w	800bb94 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ba04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	f000 80a9 	beq.w	800bb60 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ba12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ba16:	429a      	cmp	r2, r3
 800ba18:	f080 80a2 	bcs.w	800bb60 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ba22:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba28:	69db      	ldr	r3, [r3, #28]
 800ba2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba2e:	f000 8088 	beq.w	800bb42 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	330c      	adds	r3, #12
 800ba38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ba40:	e853 3f00 	ldrex	r3, [r3]
 800ba44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ba48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ba4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ba50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	330c      	adds	r3, #12
 800ba5a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800ba5e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800ba62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba66:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ba6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ba6e:	e841 2300 	strex	r3, r2, [r1]
 800ba72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ba76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d1d9      	bne.n	800ba32 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	3314      	adds	r3, #20
 800ba84:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ba88:	e853 3f00 	ldrex	r3, [r3]
 800ba8c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ba8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ba90:	f023 0301 	bic.w	r3, r3, #1
 800ba94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	3314      	adds	r3, #20
 800ba9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800baa2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800baa6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baa8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800baaa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800baae:	e841 2300 	strex	r3, r2, [r1]
 800bab2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bab4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d1e1      	bne.n	800ba7e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	3314      	adds	r3, #20
 800bac0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bac2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bac4:	e853 3f00 	ldrex	r3, [r3]
 800bac8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800baca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bacc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bad0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	3314      	adds	r3, #20
 800bada:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bade:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bae0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bae2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bae4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bae6:	e841 2300 	strex	r3, r2, [r1]
 800baea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800baec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d1e3      	bne.n	800baba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2220      	movs	r2, #32
 800baf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2200      	movs	r2, #0
 800bafe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	330c      	adds	r3, #12
 800bb06:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb0a:	e853 3f00 	ldrex	r3, [r3]
 800bb0e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bb10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb12:	f023 0310 	bic.w	r3, r3, #16
 800bb16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	330c      	adds	r3, #12
 800bb20:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800bb24:	65ba      	str	r2, [r7, #88]	@ 0x58
 800bb26:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb28:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bb2a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bb2c:	e841 2300 	strex	r3, r2, [r1]
 800bb30:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bb32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d1e3      	bne.n	800bb00 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f7fc ff92 	bl	8008a66 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2202      	movs	r2, #2
 800bb46:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bb50:	b29b      	uxth	r3, r3
 800bb52:	1ad3      	subs	r3, r2, r3
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	4619      	mov	r1, r3
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f7fb fdd5 	bl	8007708 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800bb5e:	e0b3      	b.n	800bcc8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bb64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	f040 80ad 	bne.w	800bcc8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb72:	69db      	ldr	r3, [r3, #28]
 800bb74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb78:	f040 80a6 	bne.w	800bcc8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2202      	movs	r2, #2
 800bb80:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bb86:	4619      	mov	r1, r3
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f7fb fdbd 	bl	8007708 <HAL_UARTEx_RxEventCallback>
      return;
 800bb8e:	e09b      	b.n	800bcc8 <HAL_UART_IRQHandler+0x548>
 800bb90:	0800befd 	.word	0x0800befd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bb9c:	b29b      	uxth	r3, r3
 800bb9e:	1ad3      	subs	r3, r2, r3
 800bba0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bba8:	b29b      	uxth	r3, r3
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	f000 808e 	beq.w	800bccc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800bbb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	f000 8089 	beq.w	800bccc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	330c      	adds	r3, #12
 800bbc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbc4:	e853 3f00 	ldrex	r3, [r3]
 800bbc8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bbca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bbd0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	330c      	adds	r3, #12
 800bbda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800bbde:	647a      	str	r2, [r7, #68]	@ 0x44
 800bbe0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbe2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bbe4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bbe6:	e841 2300 	strex	r3, r2, [r1]
 800bbea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bbec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d1e3      	bne.n	800bbba <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	3314      	adds	r3, #20
 800bbf8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbfc:	e853 3f00 	ldrex	r3, [r3]
 800bc00:	623b      	str	r3, [r7, #32]
   return(result);
 800bc02:	6a3b      	ldr	r3, [r7, #32]
 800bc04:	f023 0301 	bic.w	r3, r3, #1
 800bc08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	3314      	adds	r3, #20
 800bc12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800bc16:	633a      	str	r2, [r7, #48]	@ 0x30
 800bc18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bc1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc1e:	e841 2300 	strex	r3, r2, [r1]
 800bc22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bc24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d1e3      	bne.n	800bbf2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2220      	movs	r2, #32
 800bc2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2200      	movs	r2, #0
 800bc36:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	330c      	adds	r3, #12
 800bc3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	e853 3f00 	ldrex	r3, [r3]
 800bc46:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f023 0310 	bic.w	r3, r3, #16
 800bc4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	330c      	adds	r3, #12
 800bc58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800bc5c:	61fa      	str	r2, [r7, #28]
 800bc5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc60:	69b9      	ldr	r1, [r7, #24]
 800bc62:	69fa      	ldr	r2, [r7, #28]
 800bc64:	e841 2300 	strex	r3, r2, [r1]
 800bc68:	617b      	str	r3, [r7, #20]
   return(result);
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d1e3      	bne.n	800bc38 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2202      	movs	r2, #2
 800bc74:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bc76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bc7a:	4619      	mov	r1, r3
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f7fb fd43 	bl	8007708 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bc82:	e023      	b.n	800bccc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bc84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d009      	beq.n	800bca4 <HAL_UART_IRQHandler+0x524>
 800bc90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bc94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d003      	beq.n	800bca4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f000 f93e 	bl	800bf1e <UART_Transmit_IT>
    return;
 800bca2:	e014      	b.n	800bcce <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d00e      	beq.n	800bcce <HAL_UART_IRQHandler+0x54e>
 800bcb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bcb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d008      	beq.n	800bcce <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f000 f97e 	bl	800bfbe <UART_EndTransmit_IT>
    return;
 800bcc2:	e004      	b.n	800bcce <HAL_UART_IRQHandler+0x54e>
    return;
 800bcc4:	bf00      	nop
 800bcc6:	e002      	b.n	800bcce <HAL_UART_IRQHandler+0x54e>
      return;
 800bcc8:	bf00      	nop
 800bcca:	e000      	b.n	800bcce <HAL_UART_IRQHandler+0x54e>
      return;
 800bccc:	bf00      	nop
  }
}
 800bcce:	37e8      	adds	r7, #232	@ 0xe8
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b083      	sub	sp, #12
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bcdc:	bf00      	nop
 800bcde:	370c      	adds	r7, #12
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr

0800bce8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b083      	sub	sp, #12
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bcf0:	bf00      	nop
 800bcf2:	370c      	adds	r7, #12
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr

0800bcfc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b083      	sub	sp, #12
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bd04:	bf00      	nop
 800bd06:	370c      	adds	r7, #12
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr

0800bd10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b086      	sub	sp, #24
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	60f8      	str	r0, [r7, #12]
 800bd18:	60b9      	str	r1, [r7, #8]
 800bd1a:	603b      	str	r3, [r7, #0]
 800bd1c:	4613      	mov	r3, r2
 800bd1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd20:	e03b      	b.n	800bd9a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd22:	6a3b      	ldr	r3, [r7, #32]
 800bd24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd28:	d037      	beq.n	800bd9a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd2a:	f7fc fa27 	bl	800817c <HAL_GetTick>
 800bd2e:	4602      	mov	r2, r0
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	1ad3      	subs	r3, r2, r3
 800bd34:	6a3a      	ldr	r2, [r7, #32]
 800bd36:	429a      	cmp	r2, r3
 800bd38:	d302      	bcc.n	800bd40 <UART_WaitOnFlagUntilTimeout+0x30>
 800bd3a:	6a3b      	ldr	r3, [r7, #32]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d101      	bne.n	800bd44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bd40:	2303      	movs	r3, #3
 800bd42:	e03a      	b.n	800bdba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	68db      	ldr	r3, [r3, #12]
 800bd4a:	f003 0304 	and.w	r3, r3, #4
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d023      	beq.n	800bd9a <UART_WaitOnFlagUntilTimeout+0x8a>
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	2b80      	cmp	r3, #128	@ 0x80
 800bd56:	d020      	beq.n	800bd9a <UART_WaitOnFlagUntilTimeout+0x8a>
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	2b40      	cmp	r3, #64	@ 0x40
 800bd5c:	d01d      	beq.n	800bd9a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f003 0308 	and.w	r3, r3, #8
 800bd68:	2b08      	cmp	r3, #8
 800bd6a:	d116      	bne.n	800bd9a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	617b      	str	r3, [r7, #20]
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	617b      	str	r3, [r7, #20]
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	685b      	ldr	r3, [r3, #4]
 800bd7e:	617b      	str	r3, [r7, #20]
 800bd80:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bd82:	68f8      	ldr	r0, [r7, #12]
 800bd84:	f000 f857 	bl	800be36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	2208      	movs	r2, #8
 800bd8c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	2200      	movs	r2, #0
 800bd92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800bd96:	2301      	movs	r3, #1
 800bd98:	e00f      	b.n	800bdba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	681a      	ldr	r2, [r3, #0]
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	4013      	ands	r3, r2
 800bda4:	68ba      	ldr	r2, [r7, #8]
 800bda6:	429a      	cmp	r2, r3
 800bda8:	bf0c      	ite	eq
 800bdaa:	2301      	moveq	r3, #1
 800bdac:	2300      	movne	r3, #0
 800bdae:	b2db      	uxtb	r3, r3
 800bdb0:	461a      	mov	r2, r3
 800bdb2:	79fb      	ldrb	r3, [r7, #7]
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d0b4      	beq.n	800bd22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bdb8:	2300      	movs	r3, #0
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3718      	adds	r7, #24
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}

0800bdc2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bdc2:	b480      	push	{r7}
 800bdc4:	b085      	sub	sp, #20
 800bdc6:	af00      	add	r7, sp, #0
 800bdc8:	60f8      	str	r0, [r7, #12]
 800bdca:	60b9      	str	r1, [r7, #8]
 800bdcc:	4613      	mov	r3, r2
 800bdce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	68ba      	ldr	r2, [r7, #8]
 800bdd4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	88fa      	ldrh	r2, [r7, #6]
 800bdda:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	88fa      	ldrh	r2, [r7, #6]
 800bde0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	2200      	movs	r2, #0
 800bde6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	2222      	movs	r2, #34	@ 0x22
 800bdec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	691b      	ldr	r3, [r3, #16]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d007      	beq.n	800be08 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	68da      	ldr	r2, [r3, #12]
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800be06:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	695a      	ldr	r2, [r3, #20]
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f042 0201 	orr.w	r2, r2, #1
 800be16:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	68da      	ldr	r2, [r3, #12]
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f042 0220 	orr.w	r2, r2, #32
 800be26:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800be28:	2300      	movs	r3, #0
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3714      	adds	r7, #20
 800be2e:	46bd      	mov	sp, r7
 800be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be34:	4770      	bx	lr

0800be36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800be36:	b480      	push	{r7}
 800be38:	b095      	sub	sp, #84	@ 0x54
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	330c      	adds	r3, #12
 800be44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be48:	e853 3f00 	ldrex	r3, [r3]
 800be4c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800be4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800be54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	330c      	adds	r3, #12
 800be5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800be5e:	643a      	str	r2, [r7, #64]	@ 0x40
 800be60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800be64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800be66:	e841 2300 	strex	r3, r2, [r1]
 800be6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800be6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d1e5      	bne.n	800be3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	3314      	adds	r3, #20
 800be78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be7a:	6a3b      	ldr	r3, [r7, #32]
 800be7c:	e853 3f00 	ldrex	r3, [r3]
 800be80:	61fb      	str	r3, [r7, #28]
   return(result);
 800be82:	69fb      	ldr	r3, [r7, #28]
 800be84:	f023 0301 	bic.w	r3, r3, #1
 800be88:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	3314      	adds	r3, #20
 800be90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800be94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800be98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be9a:	e841 2300 	strex	r3, r2, [r1]
 800be9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d1e5      	bne.n	800be72 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800beaa:	2b01      	cmp	r3, #1
 800beac:	d119      	bne.n	800bee2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	330c      	adds	r3, #12
 800beb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	e853 3f00 	ldrex	r3, [r3]
 800bebc:	60bb      	str	r3, [r7, #8]
   return(result);
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	f023 0310 	bic.w	r3, r3, #16
 800bec4:	647b      	str	r3, [r7, #68]	@ 0x44
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	330c      	adds	r3, #12
 800becc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bece:	61ba      	str	r2, [r7, #24]
 800bed0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bed2:	6979      	ldr	r1, [r7, #20]
 800bed4:	69ba      	ldr	r2, [r7, #24]
 800bed6:	e841 2300 	strex	r3, r2, [r1]
 800beda:	613b      	str	r3, [r7, #16]
   return(result);
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d1e5      	bne.n	800beae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2220      	movs	r2, #32
 800bee6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2200      	movs	r2, #0
 800beee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800bef0:	bf00      	nop
 800bef2:	3754      	adds	r7, #84	@ 0x54
 800bef4:	46bd      	mov	sp, r7
 800bef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befa:	4770      	bx	lr

0800befc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b084      	sub	sp, #16
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bf10:	68f8      	ldr	r0, [r7, #12]
 800bf12:	f7ff fef3 	bl	800bcfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf16:	bf00      	nop
 800bf18:	3710      	adds	r7, #16
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}

0800bf1e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bf1e:	b480      	push	{r7}
 800bf20:	b085      	sub	sp, #20
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bf2c:	b2db      	uxtb	r3, r3
 800bf2e:	2b21      	cmp	r3, #33	@ 0x21
 800bf30:	d13e      	bne.n	800bfb0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	689b      	ldr	r3, [r3, #8]
 800bf36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bf3a:	d114      	bne.n	800bf66 <UART_Transmit_IT+0x48>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	691b      	ldr	r3, [r3, #16]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d110      	bne.n	800bf66 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6a1b      	ldr	r3, [r3, #32]
 800bf48:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	881b      	ldrh	r3, [r3, #0]
 800bf4e:	461a      	mov	r2, r3
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bf58:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6a1b      	ldr	r3, [r3, #32]
 800bf5e:	1c9a      	adds	r2, r3, #2
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	621a      	str	r2, [r3, #32]
 800bf64:	e008      	b.n	800bf78 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6a1b      	ldr	r3, [r3, #32]
 800bf6a:	1c59      	adds	r1, r3, #1
 800bf6c:	687a      	ldr	r2, [r7, #4]
 800bf6e:	6211      	str	r1, [r2, #32]
 800bf70:	781a      	ldrb	r2, [r3, #0]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bf7c:	b29b      	uxth	r3, r3
 800bf7e:	3b01      	subs	r3, #1
 800bf80:	b29b      	uxth	r3, r3
 800bf82:	687a      	ldr	r2, [r7, #4]
 800bf84:	4619      	mov	r1, r3
 800bf86:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d10f      	bne.n	800bfac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	68da      	ldr	r2, [r3, #12]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bf9a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	68da      	ldr	r2, [r3, #12]
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bfaa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bfac:	2300      	movs	r3, #0
 800bfae:	e000      	b.n	800bfb2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bfb0:	2302      	movs	r3, #2
  }
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3714      	adds	r7, #20
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbc:	4770      	bx	lr

0800bfbe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bfbe:	b580      	push	{r7, lr}
 800bfc0:	b082      	sub	sp, #8
 800bfc2:	af00      	add	r7, sp, #0
 800bfc4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	68da      	ldr	r2, [r3, #12]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bfd4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2220      	movs	r2, #32
 800bfda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f7ff fe78 	bl	800bcd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bfe4:	2300      	movs	r3, #0
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3708      	adds	r7, #8
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}

0800bfee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bfee:	b580      	push	{r7, lr}
 800bff0:	b08c      	sub	sp, #48	@ 0x30
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800bff6:	2300      	movs	r3, #0
 800bff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800bffa:	2300      	movs	r3, #0
 800bffc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c004:	b2db      	uxtb	r3, r3
 800c006:	2b22      	cmp	r3, #34	@ 0x22
 800c008:	f040 80aa 	bne.w	800c160 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	689b      	ldr	r3, [r3, #8]
 800c010:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c014:	d115      	bne.n	800c042 <UART_Receive_IT+0x54>
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	691b      	ldr	r3, [r3, #16]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d111      	bne.n	800c042 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c022:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	685b      	ldr	r3, [r3, #4]
 800c02a:	b29b      	uxth	r3, r3
 800c02c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c030:	b29a      	uxth	r2, r3
 800c032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c034:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c03a:	1c9a      	adds	r2, r3, #2
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	629a      	str	r2, [r3, #40]	@ 0x28
 800c040:	e024      	b.n	800c08c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c046:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	689b      	ldr	r3, [r3, #8]
 800c04c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c050:	d007      	beq.n	800c062 <UART_Receive_IT+0x74>
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	689b      	ldr	r3, [r3, #8]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d10a      	bne.n	800c070 <UART_Receive_IT+0x82>
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	691b      	ldr	r3, [r3, #16]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d106      	bne.n	800c070 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	685b      	ldr	r3, [r3, #4]
 800c068:	b2da      	uxtb	r2, r3
 800c06a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c06c:	701a      	strb	r2, [r3, #0]
 800c06e:	e008      	b.n	800c082 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	685b      	ldr	r3, [r3, #4]
 800c076:	b2db      	uxtb	r3, r3
 800c078:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c07c:	b2da      	uxtb	r2, r3
 800c07e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c080:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c086:	1c5a      	adds	r2, r3, #1
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c090:	b29b      	uxth	r3, r3
 800c092:	3b01      	subs	r3, #1
 800c094:	b29b      	uxth	r3, r3
 800c096:	687a      	ldr	r2, [r7, #4]
 800c098:	4619      	mov	r1, r3
 800c09a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d15d      	bne.n	800c15c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	68da      	ldr	r2, [r3, #12]
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f022 0220 	bic.w	r2, r2, #32
 800c0ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	68da      	ldr	r2, [r3, #12]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c0be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	695a      	ldr	r2, [r3, #20]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f022 0201 	bic.w	r2, r2, #1
 800c0ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2220      	movs	r2, #32
 800c0d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2200      	movs	r2, #0
 800c0dc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0e2:	2b01      	cmp	r3, #1
 800c0e4:	d135      	bne.n	800c152 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	330c      	adds	r3, #12
 800c0f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	e853 3f00 	ldrex	r3, [r3]
 800c0fa:	613b      	str	r3, [r7, #16]
   return(result);
 800c0fc:	693b      	ldr	r3, [r7, #16]
 800c0fe:	f023 0310 	bic.w	r3, r3, #16
 800c102:	627b      	str	r3, [r7, #36]	@ 0x24
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	330c      	adds	r3, #12
 800c10a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c10c:	623a      	str	r2, [r7, #32]
 800c10e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c110:	69f9      	ldr	r1, [r7, #28]
 800c112:	6a3a      	ldr	r2, [r7, #32]
 800c114:	e841 2300 	strex	r3, r2, [r1]
 800c118:	61bb      	str	r3, [r7, #24]
   return(result);
 800c11a:	69bb      	ldr	r3, [r7, #24]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d1e5      	bne.n	800c0ec <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f003 0310 	and.w	r3, r3, #16
 800c12a:	2b10      	cmp	r3, #16
 800c12c:	d10a      	bne.n	800c144 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c12e:	2300      	movs	r3, #0
 800c130:	60fb      	str	r3, [r7, #12]
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	60fb      	str	r3, [r7, #12]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	685b      	ldr	r3, [r3, #4]
 800c140:	60fb      	str	r3, [r7, #12]
 800c142:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c148:	4619      	mov	r1, r3
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f7fb fadc 	bl	8007708 <HAL_UARTEx_RxEventCallback>
 800c150:	e002      	b.n	800c158 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f7ff fdc8 	bl	800bce8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c158:	2300      	movs	r3, #0
 800c15a:	e002      	b.n	800c162 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c15c:	2300      	movs	r3, #0
 800c15e:	e000      	b.n	800c162 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c160:	2302      	movs	r3, #2
  }
}
 800c162:	4618      	mov	r0, r3
 800c164:	3730      	adds	r7, #48	@ 0x30
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}
	...

0800c16c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c16c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c170:	b0c0      	sub	sp, #256	@ 0x100
 800c172:	af00      	add	r7, sp, #0
 800c174:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	691b      	ldr	r3, [r3, #16]
 800c180:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c188:	68d9      	ldr	r1, [r3, #12]
 800c18a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c18e:	681a      	ldr	r2, [r3, #0]
 800c190:	ea40 0301 	orr.w	r3, r0, r1
 800c194:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c19a:	689a      	ldr	r2, [r3, #8]
 800c19c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c1a0:	691b      	ldr	r3, [r3, #16]
 800c1a2:	431a      	orrs	r2, r3
 800c1a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c1a8:	695b      	ldr	r3, [r3, #20]
 800c1aa:	431a      	orrs	r2, r3
 800c1ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c1b0:	69db      	ldr	r3, [r3, #28]
 800c1b2:	4313      	orrs	r3, r2
 800c1b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c1b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	68db      	ldr	r3, [r3, #12]
 800c1c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800c1c4:	f021 010c 	bic.w	r1, r1, #12
 800c1c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c1cc:	681a      	ldr	r2, [r3, #0]
 800c1ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c1d2:	430b      	orrs	r3, r1
 800c1d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c1d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	695b      	ldr	r3, [r3, #20]
 800c1de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800c1e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c1e6:	6999      	ldr	r1, [r3, #24]
 800c1e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c1ec:	681a      	ldr	r2, [r3, #0]
 800c1ee:	ea40 0301 	orr.w	r3, r0, r1
 800c1f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c1f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c1f8:	681a      	ldr	r2, [r3, #0]
 800c1fa:	4b8f      	ldr	r3, [pc, #572]	@ (800c438 <UART_SetConfig+0x2cc>)
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d005      	beq.n	800c20c <UART_SetConfig+0xa0>
 800c200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c204:	681a      	ldr	r2, [r3, #0]
 800c206:	4b8d      	ldr	r3, [pc, #564]	@ (800c43c <UART_SetConfig+0x2d0>)
 800c208:	429a      	cmp	r2, r3
 800c20a:	d104      	bne.n	800c216 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c20c:	f7fe fb9a 	bl	800a944 <HAL_RCC_GetPCLK2Freq>
 800c210:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800c214:	e003      	b.n	800c21e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c216:	f7fe fb81 	bl	800a91c <HAL_RCC_GetPCLK1Freq>
 800c21a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c21e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c222:	69db      	ldr	r3, [r3, #28]
 800c224:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c228:	f040 810c 	bne.w	800c444 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c22c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c230:	2200      	movs	r2, #0
 800c232:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c236:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800c23a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800c23e:	4622      	mov	r2, r4
 800c240:	462b      	mov	r3, r5
 800c242:	1891      	adds	r1, r2, r2
 800c244:	65b9      	str	r1, [r7, #88]	@ 0x58
 800c246:	415b      	adcs	r3, r3
 800c248:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c24a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c24e:	4621      	mov	r1, r4
 800c250:	eb12 0801 	adds.w	r8, r2, r1
 800c254:	4629      	mov	r1, r5
 800c256:	eb43 0901 	adc.w	r9, r3, r1
 800c25a:	f04f 0200 	mov.w	r2, #0
 800c25e:	f04f 0300 	mov.w	r3, #0
 800c262:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c266:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c26a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c26e:	4690      	mov	r8, r2
 800c270:	4699      	mov	r9, r3
 800c272:	4623      	mov	r3, r4
 800c274:	eb18 0303 	adds.w	r3, r8, r3
 800c278:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c27c:	462b      	mov	r3, r5
 800c27e:	eb49 0303 	adc.w	r3, r9, r3
 800c282:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c28a:	685b      	ldr	r3, [r3, #4]
 800c28c:	2200      	movs	r2, #0
 800c28e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c292:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800c296:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c29a:	460b      	mov	r3, r1
 800c29c:	18db      	adds	r3, r3, r3
 800c29e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c2a0:	4613      	mov	r3, r2
 800c2a2:	eb42 0303 	adc.w	r3, r2, r3
 800c2a6:	657b      	str	r3, [r7, #84]	@ 0x54
 800c2a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c2ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800c2b0:	f7f4 fcf2 	bl	8000c98 <__aeabi_uldivmod>
 800c2b4:	4602      	mov	r2, r0
 800c2b6:	460b      	mov	r3, r1
 800c2b8:	4b61      	ldr	r3, [pc, #388]	@ (800c440 <UART_SetConfig+0x2d4>)
 800c2ba:	fba3 2302 	umull	r2, r3, r3, r2
 800c2be:	095b      	lsrs	r3, r3, #5
 800c2c0:	011c      	lsls	r4, r3, #4
 800c2c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c2cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800c2d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800c2d4:	4642      	mov	r2, r8
 800c2d6:	464b      	mov	r3, r9
 800c2d8:	1891      	adds	r1, r2, r2
 800c2da:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c2dc:	415b      	adcs	r3, r3
 800c2de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c2e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c2e4:	4641      	mov	r1, r8
 800c2e6:	eb12 0a01 	adds.w	sl, r2, r1
 800c2ea:	4649      	mov	r1, r9
 800c2ec:	eb43 0b01 	adc.w	fp, r3, r1
 800c2f0:	f04f 0200 	mov.w	r2, #0
 800c2f4:	f04f 0300 	mov.w	r3, #0
 800c2f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c2fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c300:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c304:	4692      	mov	sl, r2
 800c306:	469b      	mov	fp, r3
 800c308:	4643      	mov	r3, r8
 800c30a:	eb1a 0303 	adds.w	r3, sl, r3
 800c30e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c312:	464b      	mov	r3, r9
 800c314:	eb4b 0303 	adc.w	r3, fp, r3
 800c318:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c31c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c320:	685b      	ldr	r3, [r3, #4]
 800c322:	2200      	movs	r2, #0
 800c324:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c328:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c32c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c330:	460b      	mov	r3, r1
 800c332:	18db      	adds	r3, r3, r3
 800c334:	643b      	str	r3, [r7, #64]	@ 0x40
 800c336:	4613      	mov	r3, r2
 800c338:	eb42 0303 	adc.w	r3, r2, r3
 800c33c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c33e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c342:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800c346:	f7f4 fca7 	bl	8000c98 <__aeabi_uldivmod>
 800c34a:	4602      	mov	r2, r0
 800c34c:	460b      	mov	r3, r1
 800c34e:	4611      	mov	r1, r2
 800c350:	4b3b      	ldr	r3, [pc, #236]	@ (800c440 <UART_SetConfig+0x2d4>)
 800c352:	fba3 2301 	umull	r2, r3, r3, r1
 800c356:	095b      	lsrs	r3, r3, #5
 800c358:	2264      	movs	r2, #100	@ 0x64
 800c35a:	fb02 f303 	mul.w	r3, r2, r3
 800c35e:	1acb      	subs	r3, r1, r3
 800c360:	00db      	lsls	r3, r3, #3
 800c362:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800c366:	4b36      	ldr	r3, [pc, #216]	@ (800c440 <UART_SetConfig+0x2d4>)
 800c368:	fba3 2302 	umull	r2, r3, r3, r2
 800c36c:	095b      	lsrs	r3, r3, #5
 800c36e:	005b      	lsls	r3, r3, #1
 800c370:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800c374:	441c      	add	r4, r3
 800c376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c37a:	2200      	movs	r2, #0
 800c37c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c380:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800c384:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800c388:	4642      	mov	r2, r8
 800c38a:	464b      	mov	r3, r9
 800c38c:	1891      	adds	r1, r2, r2
 800c38e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c390:	415b      	adcs	r3, r3
 800c392:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c394:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c398:	4641      	mov	r1, r8
 800c39a:	1851      	adds	r1, r2, r1
 800c39c:	6339      	str	r1, [r7, #48]	@ 0x30
 800c39e:	4649      	mov	r1, r9
 800c3a0:	414b      	adcs	r3, r1
 800c3a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c3a4:	f04f 0200 	mov.w	r2, #0
 800c3a8:	f04f 0300 	mov.w	r3, #0
 800c3ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800c3b0:	4659      	mov	r1, fp
 800c3b2:	00cb      	lsls	r3, r1, #3
 800c3b4:	4651      	mov	r1, sl
 800c3b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c3ba:	4651      	mov	r1, sl
 800c3bc:	00ca      	lsls	r2, r1, #3
 800c3be:	4610      	mov	r0, r2
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	4642      	mov	r2, r8
 800c3c6:	189b      	adds	r3, r3, r2
 800c3c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c3cc:	464b      	mov	r3, r9
 800c3ce:	460a      	mov	r2, r1
 800c3d0:	eb42 0303 	adc.w	r3, r2, r3
 800c3d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c3d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c3dc:	685b      	ldr	r3, [r3, #4]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c3e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c3e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c3ec:	460b      	mov	r3, r1
 800c3ee:	18db      	adds	r3, r3, r3
 800c3f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c3f2:	4613      	mov	r3, r2
 800c3f4:	eb42 0303 	adc.w	r3, r2, r3
 800c3f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c3fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c3fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800c402:	f7f4 fc49 	bl	8000c98 <__aeabi_uldivmod>
 800c406:	4602      	mov	r2, r0
 800c408:	460b      	mov	r3, r1
 800c40a:	4b0d      	ldr	r3, [pc, #52]	@ (800c440 <UART_SetConfig+0x2d4>)
 800c40c:	fba3 1302 	umull	r1, r3, r3, r2
 800c410:	095b      	lsrs	r3, r3, #5
 800c412:	2164      	movs	r1, #100	@ 0x64
 800c414:	fb01 f303 	mul.w	r3, r1, r3
 800c418:	1ad3      	subs	r3, r2, r3
 800c41a:	00db      	lsls	r3, r3, #3
 800c41c:	3332      	adds	r3, #50	@ 0x32
 800c41e:	4a08      	ldr	r2, [pc, #32]	@ (800c440 <UART_SetConfig+0x2d4>)
 800c420:	fba2 2303 	umull	r2, r3, r2, r3
 800c424:	095b      	lsrs	r3, r3, #5
 800c426:	f003 0207 	and.w	r2, r3, #7
 800c42a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4422      	add	r2, r4
 800c432:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c434:	e106      	b.n	800c644 <UART_SetConfig+0x4d8>
 800c436:	bf00      	nop
 800c438:	40011000 	.word	0x40011000
 800c43c:	40011400 	.word	0x40011400
 800c440:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c448:	2200      	movs	r2, #0
 800c44a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c44e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c452:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800c456:	4642      	mov	r2, r8
 800c458:	464b      	mov	r3, r9
 800c45a:	1891      	adds	r1, r2, r2
 800c45c:	6239      	str	r1, [r7, #32]
 800c45e:	415b      	adcs	r3, r3
 800c460:	627b      	str	r3, [r7, #36]	@ 0x24
 800c462:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c466:	4641      	mov	r1, r8
 800c468:	1854      	adds	r4, r2, r1
 800c46a:	4649      	mov	r1, r9
 800c46c:	eb43 0501 	adc.w	r5, r3, r1
 800c470:	f04f 0200 	mov.w	r2, #0
 800c474:	f04f 0300 	mov.w	r3, #0
 800c478:	00eb      	lsls	r3, r5, #3
 800c47a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c47e:	00e2      	lsls	r2, r4, #3
 800c480:	4614      	mov	r4, r2
 800c482:	461d      	mov	r5, r3
 800c484:	4643      	mov	r3, r8
 800c486:	18e3      	adds	r3, r4, r3
 800c488:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c48c:	464b      	mov	r3, r9
 800c48e:	eb45 0303 	adc.w	r3, r5, r3
 800c492:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c49a:	685b      	ldr	r3, [r3, #4]
 800c49c:	2200      	movs	r2, #0
 800c49e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c4a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c4a6:	f04f 0200 	mov.w	r2, #0
 800c4aa:	f04f 0300 	mov.w	r3, #0
 800c4ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c4b2:	4629      	mov	r1, r5
 800c4b4:	008b      	lsls	r3, r1, #2
 800c4b6:	4621      	mov	r1, r4
 800c4b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c4bc:	4621      	mov	r1, r4
 800c4be:	008a      	lsls	r2, r1, #2
 800c4c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c4c4:	f7f4 fbe8 	bl	8000c98 <__aeabi_uldivmod>
 800c4c8:	4602      	mov	r2, r0
 800c4ca:	460b      	mov	r3, r1
 800c4cc:	4b60      	ldr	r3, [pc, #384]	@ (800c650 <UART_SetConfig+0x4e4>)
 800c4ce:	fba3 2302 	umull	r2, r3, r3, r2
 800c4d2:	095b      	lsrs	r3, r3, #5
 800c4d4:	011c      	lsls	r4, r3, #4
 800c4d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c4da:	2200      	movs	r2, #0
 800c4dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c4e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c4e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800c4e8:	4642      	mov	r2, r8
 800c4ea:	464b      	mov	r3, r9
 800c4ec:	1891      	adds	r1, r2, r2
 800c4ee:	61b9      	str	r1, [r7, #24]
 800c4f0:	415b      	adcs	r3, r3
 800c4f2:	61fb      	str	r3, [r7, #28]
 800c4f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c4f8:	4641      	mov	r1, r8
 800c4fa:	1851      	adds	r1, r2, r1
 800c4fc:	6139      	str	r1, [r7, #16]
 800c4fe:	4649      	mov	r1, r9
 800c500:	414b      	adcs	r3, r1
 800c502:	617b      	str	r3, [r7, #20]
 800c504:	f04f 0200 	mov.w	r2, #0
 800c508:	f04f 0300 	mov.w	r3, #0
 800c50c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c510:	4659      	mov	r1, fp
 800c512:	00cb      	lsls	r3, r1, #3
 800c514:	4651      	mov	r1, sl
 800c516:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c51a:	4651      	mov	r1, sl
 800c51c:	00ca      	lsls	r2, r1, #3
 800c51e:	4610      	mov	r0, r2
 800c520:	4619      	mov	r1, r3
 800c522:	4603      	mov	r3, r0
 800c524:	4642      	mov	r2, r8
 800c526:	189b      	adds	r3, r3, r2
 800c528:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c52c:	464b      	mov	r3, r9
 800c52e:	460a      	mov	r2, r1
 800c530:	eb42 0303 	adc.w	r3, r2, r3
 800c534:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c53c:	685b      	ldr	r3, [r3, #4]
 800c53e:	2200      	movs	r2, #0
 800c540:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c542:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c544:	f04f 0200 	mov.w	r2, #0
 800c548:	f04f 0300 	mov.w	r3, #0
 800c54c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800c550:	4649      	mov	r1, r9
 800c552:	008b      	lsls	r3, r1, #2
 800c554:	4641      	mov	r1, r8
 800c556:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c55a:	4641      	mov	r1, r8
 800c55c:	008a      	lsls	r2, r1, #2
 800c55e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800c562:	f7f4 fb99 	bl	8000c98 <__aeabi_uldivmod>
 800c566:	4602      	mov	r2, r0
 800c568:	460b      	mov	r3, r1
 800c56a:	4611      	mov	r1, r2
 800c56c:	4b38      	ldr	r3, [pc, #224]	@ (800c650 <UART_SetConfig+0x4e4>)
 800c56e:	fba3 2301 	umull	r2, r3, r3, r1
 800c572:	095b      	lsrs	r3, r3, #5
 800c574:	2264      	movs	r2, #100	@ 0x64
 800c576:	fb02 f303 	mul.w	r3, r2, r3
 800c57a:	1acb      	subs	r3, r1, r3
 800c57c:	011b      	lsls	r3, r3, #4
 800c57e:	3332      	adds	r3, #50	@ 0x32
 800c580:	4a33      	ldr	r2, [pc, #204]	@ (800c650 <UART_SetConfig+0x4e4>)
 800c582:	fba2 2303 	umull	r2, r3, r2, r3
 800c586:	095b      	lsrs	r3, r3, #5
 800c588:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c58c:	441c      	add	r4, r3
 800c58e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c592:	2200      	movs	r2, #0
 800c594:	673b      	str	r3, [r7, #112]	@ 0x70
 800c596:	677a      	str	r2, [r7, #116]	@ 0x74
 800c598:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800c59c:	4642      	mov	r2, r8
 800c59e:	464b      	mov	r3, r9
 800c5a0:	1891      	adds	r1, r2, r2
 800c5a2:	60b9      	str	r1, [r7, #8]
 800c5a4:	415b      	adcs	r3, r3
 800c5a6:	60fb      	str	r3, [r7, #12]
 800c5a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c5ac:	4641      	mov	r1, r8
 800c5ae:	1851      	adds	r1, r2, r1
 800c5b0:	6039      	str	r1, [r7, #0]
 800c5b2:	4649      	mov	r1, r9
 800c5b4:	414b      	adcs	r3, r1
 800c5b6:	607b      	str	r3, [r7, #4]
 800c5b8:	f04f 0200 	mov.w	r2, #0
 800c5bc:	f04f 0300 	mov.w	r3, #0
 800c5c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c5c4:	4659      	mov	r1, fp
 800c5c6:	00cb      	lsls	r3, r1, #3
 800c5c8:	4651      	mov	r1, sl
 800c5ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c5ce:	4651      	mov	r1, sl
 800c5d0:	00ca      	lsls	r2, r1, #3
 800c5d2:	4610      	mov	r0, r2
 800c5d4:	4619      	mov	r1, r3
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	4642      	mov	r2, r8
 800c5da:	189b      	adds	r3, r3, r2
 800c5dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c5de:	464b      	mov	r3, r9
 800c5e0:	460a      	mov	r2, r1
 800c5e2:	eb42 0303 	adc.w	r3, r2, r3
 800c5e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c5e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c5ec:	685b      	ldr	r3, [r3, #4]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	663b      	str	r3, [r7, #96]	@ 0x60
 800c5f2:	667a      	str	r2, [r7, #100]	@ 0x64
 800c5f4:	f04f 0200 	mov.w	r2, #0
 800c5f8:	f04f 0300 	mov.w	r3, #0
 800c5fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800c600:	4649      	mov	r1, r9
 800c602:	008b      	lsls	r3, r1, #2
 800c604:	4641      	mov	r1, r8
 800c606:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c60a:	4641      	mov	r1, r8
 800c60c:	008a      	lsls	r2, r1, #2
 800c60e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c612:	f7f4 fb41 	bl	8000c98 <__aeabi_uldivmod>
 800c616:	4602      	mov	r2, r0
 800c618:	460b      	mov	r3, r1
 800c61a:	4b0d      	ldr	r3, [pc, #52]	@ (800c650 <UART_SetConfig+0x4e4>)
 800c61c:	fba3 1302 	umull	r1, r3, r3, r2
 800c620:	095b      	lsrs	r3, r3, #5
 800c622:	2164      	movs	r1, #100	@ 0x64
 800c624:	fb01 f303 	mul.w	r3, r1, r3
 800c628:	1ad3      	subs	r3, r2, r3
 800c62a:	011b      	lsls	r3, r3, #4
 800c62c:	3332      	adds	r3, #50	@ 0x32
 800c62e:	4a08      	ldr	r2, [pc, #32]	@ (800c650 <UART_SetConfig+0x4e4>)
 800c630:	fba2 2303 	umull	r2, r3, r2, r3
 800c634:	095b      	lsrs	r3, r3, #5
 800c636:	f003 020f 	and.w	r2, r3, #15
 800c63a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	4422      	add	r2, r4
 800c642:	609a      	str	r2, [r3, #8]
}
 800c644:	bf00      	nop
 800c646:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800c64a:	46bd      	mov	sp, r7
 800c64c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c650:	51eb851f 	.word	0x51eb851f

0800c654 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800c658:	4904      	ldr	r1, [pc, #16]	@ (800c66c <MX_FATFS_Init+0x18>)
 800c65a:	4805      	ldr	r0, [pc, #20]	@ (800c670 <MX_FATFS_Init+0x1c>)
 800c65c:	f000 f8b0 	bl	800c7c0 <FATFS_LinkDriver>
 800c660:	4603      	mov	r3, r0
 800c662:	461a      	mov	r2, r3
 800c664:	4b03      	ldr	r3, [pc, #12]	@ (800c674 <MX_FATFS_Init+0x20>)
 800c666:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c668:	bf00      	nop
 800c66a:	bd80      	pop	{r7, pc}
 800c66c:	20001b60 	.word	0x20001b60
 800c670:	20000920 	.word	0x20000920
 800c674:	20001b5c 	.word	0x20001b5c

0800c678 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800c678:	b480      	push	{r7}
 800c67a:	b083      	sub	sp, #12
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	4603      	mov	r3, r0
 800c680:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800c682:	4b06      	ldr	r3, [pc, #24]	@ (800c69c <USER_initialize+0x24>)
 800c684:	2201      	movs	r2, #1
 800c686:	701a      	strb	r2, [r3, #0]
    return Stat;
 800c688:	4b04      	ldr	r3, [pc, #16]	@ (800c69c <USER_initialize+0x24>)
 800c68a:	781b      	ldrb	r3, [r3, #0]
 800c68c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800c68e:	4618      	mov	r0, r3
 800c690:	370c      	adds	r7, #12
 800c692:	46bd      	mov	sp, r7
 800c694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c698:	4770      	bx	lr
 800c69a:	bf00      	nop
 800c69c:	2000091d 	.word	0x2000091d

0800c6a0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b083      	sub	sp, #12
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800c6aa:	4b06      	ldr	r3, [pc, #24]	@ (800c6c4 <USER_status+0x24>)
 800c6ac:	2201      	movs	r2, #1
 800c6ae:	701a      	strb	r2, [r3, #0]
    return Stat;
 800c6b0:	4b04      	ldr	r3, [pc, #16]	@ (800c6c4 <USER_status+0x24>)
 800c6b2:	781b      	ldrb	r3, [r3, #0]
 800c6b4:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	370c      	adds	r7, #12
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c0:	4770      	bx	lr
 800c6c2:	bf00      	nop
 800c6c4:	2000091d 	.word	0x2000091d

0800c6c8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b085      	sub	sp, #20
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	60b9      	str	r1, [r7, #8]
 800c6d0:	607a      	str	r2, [r7, #4]
 800c6d2:	603b      	str	r3, [r7, #0]
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800c6d8:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3714      	adds	r7, #20
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e4:	4770      	bx	lr

0800c6e6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800c6e6:	b480      	push	{r7}
 800c6e8:	b085      	sub	sp, #20
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	60b9      	str	r1, [r7, #8]
 800c6ee:	607a      	str	r2, [r7, #4]
 800c6f0:	603b      	str	r3, [r7, #0]
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800c6f6:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3714      	adds	r7, #20
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	4770      	bx	lr

0800c704 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800c704:	b480      	push	{r7}
 800c706:	b085      	sub	sp, #20
 800c708:	af00      	add	r7, sp, #0
 800c70a:	4603      	mov	r3, r0
 800c70c:	603a      	str	r2, [r7, #0]
 800c70e:	71fb      	strb	r3, [r7, #7]
 800c710:	460b      	mov	r3, r1
 800c712:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800c714:	2301      	movs	r3, #1
 800c716:	73fb      	strb	r3, [r7, #15]
    return res;
 800c718:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3714      	adds	r7, #20
 800c71e:	46bd      	mov	sp, r7
 800c720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c724:	4770      	bx	lr
	...

0800c728 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c728:	b480      	push	{r7}
 800c72a:	b087      	sub	sp, #28
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	60f8      	str	r0, [r7, #12]
 800c730:	60b9      	str	r1, [r7, #8]
 800c732:	4613      	mov	r3, r2
 800c734:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c736:	2301      	movs	r3, #1
 800c738:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c73a:	2300      	movs	r3, #0
 800c73c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c73e:	4b1f      	ldr	r3, [pc, #124]	@ (800c7bc <FATFS_LinkDriverEx+0x94>)
 800c740:	7a5b      	ldrb	r3, [r3, #9]
 800c742:	b2db      	uxtb	r3, r3
 800c744:	2b00      	cmp	r3, #0
 800c746:	d131      	bne.n	800c7ac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c748:	4b1c      	ldr	r3, [pc, #112]	@ (800c7bc <FATFS_LinkDriverEx+0x94>)
 800c74a:	7a5b      	ldrb	r3, [r3, #9]
 800c74c:	b2db      	uxtb	r3, r3
 800c74e:	461a      	mov	r2, r3
 800c750:	4b1a      	ldr	r3, [pc, #104]	@ (800c7bc <FATFS_LinkDriverEx+0x94>)
 800c752:	2100      	movs	r1, #0
 800c754:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c756:	4b19      	ldr	r3, [pc, #100]	@ (800c7bc <FATFS_LinkDriverEx+0x94>)
 800c758:	7a5b      	ldrb	r3, [r3, #9]
 800c75a:	b2db      	uxtb	r3, r3
 800c75c:	4a17      	ldr	r2, [pc, #92]	@ (800c7bc <FATFS_LinkDriverEx+0x94>)
 800c75e:	009b      	lsls	r3, r3, #2
 800c760:	4413      	add	r3, r2
 800c762:	68fa      	ldr	r2, [r7, #12]
 800c764:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c766:	4b15      	ldr	r3, [pc, #84]	@ (800c7bc <FATFS_LinkDriverEx+0x94>)
 800c768:	7a5b      	ldrb	r3, [r3, #9]
 800c76a:	b2db      	uxtb	r3, r3
 800c76c:	461a      	mov	r2, r3
 800c76e:	4b13      	ldr	r3, [pc, #76]	@ (800c7bc <FATFS_LinkDriverEx+0x94>)
 800c770:	4413      	add	r3, r2
 800c772:	79fa      	ldrb	r2, [r7, #7]
 800c774:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c776:	4b11      	ldr	r3, [pc, #68]	@ (800c7bc <FATFS_LinkDriverEx+0x94>)
 800c778:	7a5b      	ldrb	r3, [r3, #9]
 800c77a:	b2db      	uxtb	r3, r3
 800c77c:	1c5a      	adds	r2, r3, #1
 800c77e:	b2d1      	uxtb	r1, r2
 800c780:	4a0e      	ldr	r2, [pc, #56]	@ (800c7bc <FATFS_LinkDriverEx+0x94>)
 800c782:	7251      	strb	r1, [r2, #9]
 800c784:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c786:	7dbb      	ldrb	r3, [r7, #22]
 800c788:	3330      	adds	r3, #48	@ 0x30
 800c78a:	b2da      	uxtb	r2, r3
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	3301      	adds	r3, #1
 800c794:	223a      	movs	r2, #58	@ 0x3a
 800c796:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	3302      	adds	r3, #2
 800c79c:	222f      	movs	r2, #47	@ 0x2f
 800c79e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	3303      	adds	r3, #3
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c7ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	371c      	adds	r7, #28
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b8:	4770      	bx	lr
 800c7ba:	bf00      	nop
 800c7bc:	20001b64 	.word	0x20001b64

0800c7c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b082      	sub	sp, #8
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
 800c7c8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	6839      	ldr	r1, [r7, #0]
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f7ff ffaa 	bl	800c728 <FATFS_LinkDriverEx>
 800c7d4:	4603      	mov	r3, r0
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	3708      	adds	r7, #8
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}
	...

0800c7e0 <malloc>:
 800c7e0:	4b02      	ldr	r3, [pc, #8]	@ (800c7ec <malloc+0xc>)
 800c7e2:	4601      	mov	r1, r0
 800c7e4:	6818      	ldr	r0, [r3, #0]
 800c7e6:	f000 b82d 	b.w	800c844 <_malloc_r>
 800c7ea:	bf00      	nop
 800c7ec:	20000934 	.word	0x20000934

0800c7f0 <free>:
 800c7f0:	4b02      	ldr	r3, [pc, #8]	@ (800c7fc <free+0xc>)
 800c7f2:	4601      	mov	r1, r0
 800c7f4:	6818      	ldr	r0, [r3, #0]
 800c7f6:	f000 b8f5 	b.w	800c9e4 <_free_r>
 800c7fa:	bf00      	nop
 800c7fc:	20000934 	.word	0x20000934

0800c800 <sbrk_aligned>:
 800c800:	b570      	push	{r4, r5, r6, lr}
 800c802:	4e0f      	ldr	r6, [pc, #60]	@ (800c840 <sbrk_aligned+0x40>)
 800c804:	460c      	mov	r4, r1
 800c806:	6831      	ldr	r1, [r6, #0]
 800c808:	4605      	mov	r5, r0
 800c80a:	b911      	cbnz	r1, 800c812 <sbrk_aligned+0x12>
 800c80c:	f000 f8ae 	bl	800c96c <_sbrk_r>
 800c810:	6030      	str	r0, [r6, #0]
 800c812:	4621      	mov	r1, r4
 800c814:	4628      	mov	r0, r5
 800c816:	f000 f8a9 	bl	800c96c <_sbrk_r>
 800c81a:	1c43      	adds	r3, r0, #1
 800c81c:	d103      	bne.n	800c826 <sbrk_aligned+0x26>
 800c81e:	f04f 34ff 	mov.w	r4, #4294967295
 800c822:	4620      	mov	r0, r4
 800c824:	bd70      	pop	{r4, r5, r6, pc}
 800c826:	1cc4      	adds	r4, r0, #3
 800c828:	f024 0403 	bic.w	r4, r4, #3
 800c82c:	42a0      	cmp	r0, r4
 800c82e:	d0f8      	beq.n	800c822 <sbrk_aligned+0x22>
 800c830:	1a21      	subs	r1, r4, r0
 800c832:	4628      	mov	r0, r5
 800c834:	f000 f89a 	bl	800c96c <_sbrk_r>
 800c838:	3001      	adds	r0, #1
 800c83a:	d1f2      	bne.n	800c822 <sbrk_aligned+0x22>
 800c83c:	e7ef      	b.n	800c81e <sbrk_aligned+0x1e>
 800c83e:	bf00      	nop
 800c840:	20001b70 	.word	0x20001b70

0800c844 <_malloc_r>:
 800c844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c848:	1ccd      	adds	r5, r1, #3
 800c84a:	f025 0503 	bic.w	r5, r5, #3
 800c84e:	3508      	adds	r5, #8
 800c850:	2d0c      	cmp	r5, #12
 800c852:	bf38      	it	cc
 800c854:	250c      	movcc	r5, #12
 800c856:	2d00      	cmp	r5, #0
 800c858:	4606      	mov	r6, r0
 800c85a:	db01      	blt.n	800c860 <_malloc_r+0x1c>
 800c85c:	42a9      	cmp	r1, r5
 800c85e:	d904      	bls.n	800c86a <_malloc_r+0x26>
 800c860:	230c      	movs	r3, #12
 800c862:	6033      	str	r3, [r6, #0]
 800c864:	2000      	movs	r0, #0
 800c866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c86a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c940 <_malloc_r+0xfc>
 800c86e:	f000 f869 	bl	800c944 <__malloc_lock>
 800c872:	f8d8 3000 	ldr.w	r3, [r8]
 800c876:	461c      	mov	r4, r3
 800c878:	bb44      	cbnz	r4, 800c8cc <_malloc_r+0x88>
 800c87a:	4629      	mov	r1, r5
 800c87c:	4630      	mov	r0, r6
 800c87e:	f7ff ffbf 	bl	800c800 <sbrk_aligned>
 800c882:	1c43      	adds	r3, r0, #1
 800c884:	4604      	mov	r4, r0
 800c886:	d158      	bne.n	800c93a <_malloc_r+0xf6>
 800c888:	f8d8 4000 	ldr.w	r4, [r8]
 800c88c:	4627      	mov	r7, r4
 800c88e:	2f00      	cmp	r7, #0
 800c890:	d143      	bne.n	800c91a <_malloc_r+0xd6>
 800c892:	2c00      	cmp	r4, #0
 800c894:	d04b      	beq.n	800c92e <_malloc_r+0xea>
 800c896:	6823      	ldr	r3, [r4, #0]
 800c898:	4639      	mov	r1, r7
 800c89a:	4630      	mov	r0, r6
 800c89c:	eb04 0903 	add.w	r9, r4, r3
 800c8a0:	f000 f864 	bl	800c96c <_sbrk_r>
 800c8a4:	4581      	cmp	r9, r0
 800c8a6:	d142      	bne.n	800c92e <_malloc_r+0xea>
 800c8a8:	6821      	ldr	r1, [r4, #0]
 800c8aa:	1a6d      	subs	r5, r5, r1
 800c8ac:	4629      	mov	r1, r5
 800c8ae:	4630      	mov	r0, r6
 800c8b0:	f7ff ffa6 	bl	800c800 <sbrk_aligned>
 800c8b4:	3001      	adds	r0, #1
 800c8b6:	d03a      	beq.n	800c92e <_malloc_r+0xea>
 800c8b8:	6823      	ldr	r3, [r4, #0]
 800c8ba:	442b      	add	r3, r5
 800c8bc:	6023      	str	r3, [r4, #0]
 800c8be:	f8d8 3000 	ldr.w	r3, [r8]
 800c8c2:	685a      	ldr	r2, [r3, #4]
 800c8c4:	bb62      	cbnz	r2, 800c920 <_malloc_r+0xdc>
 800c8c6:	f8c8 7000 	str.w	r7, [r8]
 800c8ca:	e00f      	b.n	800c8ec <_malloc_r+0xa8>
 800c8cc:	6822      	ldr	r2, [r4, #0]
 800c8ce:	1b52      	subs	r2, r2, r5
 800c8d0:	d420      	bmi.n	800c914 <_malloc_r+0xd0>
 800c8d2:	2a0b      	cmp	r2, #11
 800c8d4:	d917      	bls.n	800c906 <_malloc_r+0xc2>
 800c8d6:	1961      	adds	r1, r4, r5
 800c8d8:	42a3      	cmp	r3, r4
 800c8da:	6025      	str	r5, [r4, #0]
 800c8dc:	bf18      	it	ne
 800c8de:	6059      	strne	r1, [r3, #4]
 800c8e0:	6863      	ldr	r3, [r4, #4]
 800c8e2:	bf08      	it	eq
 800c8e4:	f8c8 1000 	streq.w	r1, [r8]
 800c8e8:	5162      	str	r2, [r4, r5]
 800c8ea:	604b      	str	r3, [r1, #4]
 800c8ec:	4630      	mov	r0, r6
 800c8ee:	f000 f82f 	bl	800c950 <__malloc_unlock>
 800c8f2:	f104 000b 	add.w	r0, r4, #11
 800c8f6:	1d23      	adds	r3, r4, #4
 800c8f8:	f020 0007 	bic.w	r0, r0, #7
 800c8fc:	1ac2      	subs	r2, r0, r3
 800c8fe:	bf1c      	itt	ne
 800c900:	1a1b      	subne	r3, r3, r0
 800c902:	50a3      	strne	r3, [r4, r2]
 800c904:	e7af      	b.n	800c866 <_malloc_r+0x22>
 800c906:	6862      	ldr	r2, [r4, #4]
 800c908:	42a3      	cmp	r3, r4
 800c90a:	bf0c      	ite	eq
 800c90c:	f8c8 2000 	streq.w	r2, [r8]
 800c910:	605a      	strne	r2, [r3, #4]
 800c912:	e7eb      	b.n	800c8ec <_malloc_r+0xa8>
 800c914:	4623      	mov	r3, r4
 800c916:	6864      	ldr	r4, [r4, #4]
 800c918:	e7ae      	b.n	800c878 <_malloc_r+0x34>
 800c91a:	463c      	mov	r4, r7
 800c91c:	687f      	ldr	r7, [r7, #4]
 800c91e:	e7b6      	b.n	800c88e <_malloc_r+0x4a>
 800c920:	461a      	mov	r2, r3
 800c922:	685b      	ldr	r3, [r3, #4]
 800c924:	42a3      	cmp	r3, r4
 800c926:	d1fb      	bne.n	800c920 <_malloc_r+0xdc>
 800c928:	2300      	movs	r3, #0
 800c92a:	6053      	str	r3, [r2, #4]
 800c92c:	e7de      	b.n	800c8ec <_malloc_r+0xa8>
 800c92e:	230c      	movs	r3, #12
 800c930:	6033      	str	r3, [r6, #0]
 800c932:	4630      	mov	r0, r6
 800c934:	f000 f80c 	bl	800c950 <__malloc_unlock>
 800c938:	e794      	b.n	800c864 <_malloc_r+0x20>
 800c93a:	6005      	str	r5, [r0, #0]
 800c93c:	e7d6      	b.n	800c8ec <_malloc_r+0xa8>
 800c93e:	bf00      	nop
 800c940:	20001b74 	.word	0x20001b74

0800c944 <__malloc_lock>:
 800c944:	4801      	ldr	r0, [pc, #4]	@ (800c94c <__malloc_lock+0x8>)
 800c946:	f000 b84b 	b.w	800c9e0 <__retarget_lock_acquire_recursive>
 800c94a:	bf00      	nop
 800c94c:	20001cb4 	.word	0x20001cb4

0800c950 <__malloc_unlock>:
 800c950:	4801      	ldr	r0, [pc, #4]	@ (800c958 <__malloc_unlock+0x8>)
 800c952:	f000 b846 	b.w	800c9e2 <__retarget_lock_release_recursive>
 800c956:	bf00      	nop
 800c958:	20001cb4 	.word	0x20001cb4

0800c95c <memset>:
 800c95c:	4402      	add	r2, r0
 800c95e:	4603      	mov	r3, r0
 800c960:	4293      	cmp	r3, r2
 800c962:	d100      	bne.n	800c966 <memset+0xa>
 800c964:	4770      	bx	lr
 800c966:	f803 1b01 	strb.w	r1, [r3], #1
 800c96a:	e7f9      	b.n	800c960 <memset+0x4>

0800c96c <_sbrk_r>:
 800c96c:	b538      	push	{r3, r4, r5, lr}
 800c96e:	4d06      	ldr	r5, [pc, #24]	@ (800c988 <_sbrk_r+0x1c>)
 800c970:	2300      	movs	r3, #0
 800c972:	4604      	mov	r4, r0
 800c974:	4608      	mov	r0, r1
 800c976:	602b      	str	r3, [r5, #0]
 800c978:	f7fb fb28 	bl	8007fcc <_sbrk>
 800c97c:	1c43      	adds	r3, r0, #1
 800c97e:	d102      	bne.n	800c986 <_sbrk_r+0x1a>
 800c980:	682b      	ldr	r3, [r5, #0]
 800c982:	b103      	cbz	r3, 800c986 <_sbrk_r+0x1a>
 800c984:	6023      	str	r3, [r4, #0]
 800c986:	bd38      	pop	{r3, r4, r5, pc}
 800c988:	20001cb0 	.word	0x20001cb0

0800c98c <__errno>:
 800c98c:	4b01      	ldr	r3, [pc, #4]	@ (800c994 <__errno+0x8>)
 800c98e:	6818      	ldr	r0, [r3, #0]
 800c990:	4770      	bx	lr
 800c992:	bf00      	nop
 800c994:	20000934 	.word	0x20000934

0800c998 <__libc_init_array>:
 800c998:	b570      	push	{r4, r5, r6, lr}
 800c99a:	4d0d      	ldr	r5, [pc, #52]	@ (800c9d0 <__libc_init_array+0x38>)
 800c99c:	4c0d      	ldr	r4, [pc, #52]	@ (800c9d4 <__libc_init_array+0x3c>)
 800c99e:	1b64      	subs	r4, r4, r5
 800c9a0:	10a4      	asrs	r4, r4, #2
 800c9a2:	2600      	movs	r6, #0
 800c9a4:	42a6      	cmp	r6, r4
 800c9a6:	d109      	bne.n	800c9bc <__libc_init_array+0x24>
 800c9a8:	4d0b      	ldr	r5, [pc, #44]	@ (800c9d8 <__libc_init_array+0x40>)
 800c9aa:	4c0c      	ldr	r4, [pc, #48]	@ (800c9dc <__libc_init_array+0x44>)
 800c9ac:	f000 f864 	bl	800ca78 <_init>
 800c9b0:	1b64      	subs	r4, r4, r5
 800c9b2:	10a4      	asrs	r4, r4, #2
 800c9b4:	2600      	movs	r6, #0
 800c9b6:	42a6      	cmp	r6, r4
 800c9b8:	d105      	bne.n	800c9c6 <__libc_init_array+0x2e>
 800c9ba:	bd70      	pop	{r4, r5, r6, pc}
 800c9bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9c0:	4798      	blx	r3
 800c9c2:	3601      	adds	r6, #1
 800c9c4:	e7ee      	b.n	800c9a4 <__libc_init_array+0xc>
 800c9c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9ca:	4798      	blx	r3
 800c9cc:	3601      	adds	r6, #1
 800c9ce:	e7f2      	b.n	800c9b6 <__libc_init_array+0x1e>
 800c9d0:	0800dfcc 	.word	0x0800dfcc
 800c9d4:	0800dfcc 	.word	0x0800dfcc
 800c9d8:	0800dfcc 	.word	0x0800dfcc
 800c9dc:	0800dfd0 	.word	0x0800dfd0

0800c9e0 <__retarget_lock_acquire_recursive>:
 800c9e0:	4770      	bx	lr

0800c9e2 <__retarget_lock_release_recursive>:
 800c9e2:	4770      	bx	lr

0800c9e4 <_free_r>:
 800c9e4:	b538      	push	{r3, r4, r5, lr}
 800c9e6:	4605      	mov	r5, r0
 800c9e8:	2900      	cmp	r1, #0
 800c9ea:	d041      	beq.n	800ca70 <_free_r+0x8c>
 800c9ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9f0:	1f0c      	subs	r4, r1, #4
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	bfb8      	it	lt
 800c9f6:	18e4      	addlt	r4, r4, r3
 800c9f8:	f7ff ffa4 	bl	800c944 <__malloc_lock>
 800c9fc:	4a1d      	ldr	r2, [pc, #116]	@ (800ca74 <_free_r+0x90>)
 800c9fe:	6813      	ldr	r3, [r2, #0]
 800ca00:	b933      	cbnz	r3, 800ca10 <_free_r+0x2c>
 800ca02:	6063      	str	r3, [r4, #4]
 800ca04:	6014      	str	r4, [r2, #0]
 800ca06:	4628      	mov	r0, r5
 800ca08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca0c:	f7ff bfa0 	b.w	800c950 <__malloc_unlock>
 800ca10:	42a3      	cmp	r3, r4
 800ca12:	d908      	bls.n	800ca26 <_free_r+0x42>
 800ca14:	6820      	ldr	r0, [r4, #0]
 800ca16:	1821      	adds	r1, r4, r0
 800ca18:	428b      	cmp	r3, r1
 800ca1a:	bf01      	itttt	eq
 800ca1c:	6819      	ldreq	r1, [r3, #0]
 800ca1e:	685b      	ldreq	r3, [r3, #4]
 800ca20:	1809      	addeq	r1, r1, r0
 800ca22:	6021      	streq	r1, [r4, #0]
 800ca24:	e7ed      	b.n	800ca02 <_free_r+0x1e>
 800ca26:	461a      	mov	r2, r3
 800ca28:	685b      	ldr	r3, [r3, #4]
 800ca2a:	b10b      	cbz	r3, 800ca30 <_free_r+0x4c>
 800ca2c:	42a3      	cmp	r3, r4
 800ca2e:	d9fa      	bls.n	800ca26 <_free_r+0x42>
 800ca30:	6811      	ldr	r1, [r2, #0]
 800ca32:	1850      	adds	r0, r2, r1
 800ca34:	42a0      	cmp	r0, r4
 800ca36:	d10b      	bne.n	800ca50 <_free_r+0x6c>
 800ca38:	6820      	ldr	r0, [r4, #0]
 800ca3a:	4401      	add	r1, r0
 800ca3c:	1850      	adds	r0, r2, r1
 800ca3e:	4283      	cmp	r3, r0
 800ca40:	6011      	str	r1, [r2, #0]
 800ca42:	d1e0      	bne.n	800ca06 <_free_r+0x22>
 800ca44:	6818      	ldr	r0, [r3, #0]
 800ca46:	685b      	ldr	r3, [r3, #4]
 800ca48:	6053      	str	r3, [r2, #4]
 800ca4a:	4408      	add	r0, r1
 800ca4c:	6010      	str	r0, [r2, #0]
 800ca4e:	e7da      	b.n	800ca06 <_free_r+0x22>
 800ca50:	d902      	bls.n	800ca58 <_free_r+0x74>
 800ca52:	230c      	movs	r3, #12
 800ca54:	602b      	str	r3, [r5, #0]
 800ca56:	e7d6      	b.n	800ca06 <_free_r+0x22>
 800ca58:	6820      	ldr	r0, [r4, #0]
 800ca5a:	1821      	adds	r1, r4, r0
 800ca5c:	428b      	cmp	r3, r1
 800ca5e:	bf04      	itt	eq
 800ca60:	6819      	ldreq	r1, [r3, #0]
 800ca62:	685b      	ldreq	r3, [r3, #4]
 800ca64:	6063      	str	r3, [r4, #4]
 800ca66:	bf04      	itt	eq
 800ca68:	1809      	addeq	r1, r1, r0
 800ca6a:	6021      	streq	r1, [r4, #0]
 800ca6c:	6054      	str	r4, [r2, #4]
 800ca6e:	e7ca      	b.n	800ca06 <_free_r+0x22>
 800ca70:	bd38      	pop	{r3, r4, r5, pc}
 800ca72:	bf00      	nop
 800ca74:	20001b74 	.word	0x20001b74

0800ca78 <_init>:
 800ca78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca7a:	bf00      	nop
 800ca7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca7e:	bc08      	pop	{r3}
 800ca80:	469e      	mov	lr, r3
 800ca82:	4770      	bx	lr

0800ca84 <_fini>:
 800ca84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca86:	bf00      	nop
 800ca88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca8a:	bc08      	pop	{r3}
 800ca8c:	469e      	mov	lr, r3
 800ca8e:	4770      	bx	lr
