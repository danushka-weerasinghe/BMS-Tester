
BMS Tester - Cell Emulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c40  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cf4  08003dec  08003dec  00004dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ae0  08004ae0  0000640c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ae0  08004ae0  00005ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ae8  08004ae8  0000640c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ae8  08004ae8  00005ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004aec  08004aec  00005aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000040c  20000000  08004af0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000640c  2**0
                  CONTENTS
 10 .bss          0000050c  2000040c  2000040c  0000640c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000918  20000918  0000640c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000640c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004447d  00000000  00000000  0000643c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003184  00000000  00000000  0004a8b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002f20  00000000  00000000  0004da40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000233a  00000000  00000000  00050960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021f23  00000000  00000000  00052c9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018cbf  00000000  00000000  00074bbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e93e7  00000000  00000000  0008d87c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00176c63  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000cddc  00000000  00000000  00176ca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00183a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000040c 	.word	0x2000040c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003dd4 	.word	0x08003dd4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000410 	.word	0x20000410
 80001e8:	08003dd4 	.word	0x08003dd4

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af02      	add	r7, sp, #8
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	4608      	mov	r0, r1
 80004e6:	4611      	mov	r1, r2
 80004e8:	461a      	mov	r2, r3
 80004ea:	4603      	mov	r3, r0
 80004ec:	817b      	strh	r3, [r7, #10]
 80004ee:	460b      	mov	r3, r1
 80004f0:	813b      	strh	r3, [r7, #8]
 80004f2:	4613      	mov	r3, r2
 80004f4:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 80004fc:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 80004fe:	7dbb      	ldrb	r3, [r7, #22]
 8000500:	2b00      	cmp	r3, #0
 8000502:	bf0c      	ite	eq
 8000504:	2301      	moveq	r3, #1
 8000506:	2300      	movne	r3, #0
 8000508:	b2db      	uxtb	r3, r3
 800050a:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 800050c:	897a      	ldrh	r2, [r7, #10]
 800050e:	88fb      	ldrh	r3, [r7, #6]
 8000510:	4413      	add	r3, r2
 8000512:	b298      	uxth	r0, r3
 8000514:	893b      	ldrh	r3, [r7, #8]
 8000516:	3301      	adds	r3, #1
 8000518:	b29b      	uxth	r3, r3
 800051a:	893a      	ldrh	r2, [r7, #8]
 800051c:	8979      	ldrh	r1, [r7, #10]
 800051e:	9300      	str	r3, [sp, #0]
 8000520:	4603      	mov	r3, r0
 8000522:	68f8      	ldr	r0, [r7, #12]
 8000524:	f001 f875 	bl	8001612 <u8g2_IsIntersection>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d040      	beq.n	80005b0 <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 800052e:	2301      	movs	r3, #1
 8000530:	75fb      	strb	r3, [r7, #23]
  while(len > 0) {
 8000532:	e035      	b.n	80005a0 <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 8000534:	6a3b      	ldr	r3, [r7, #32]
 8000536:	781a      	ldrb	r2, [r3, #0]
 8000538:	7dfb      	ldrb	r3, [r7, #23]
 800053a:	4013      	ands	r3, r2
 800053c:	b2db      	uxtb	r3, r3
 800053e:	2b00      	cmp	r3, #0
 8000540:	d00c      	beq.n	800055c <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	7dba      	ldrb	r2, [r7, #22]
 8000546:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800054a:	893a      	ldrh	r2, [r7, #8]
 800054c:	8979      	ldrh	r1, [r7, #10]
 800054e:	2300      	movs	r3, #0
 8000550:	9300      	str	r3, [sp, #0]
 8000552:	2301      	movs	r3, #1
 8000554:	68f8      	ldr	r0, [r7, #12]
 8000556:	f000 ff9e 	bl	8001496 <u8g2_DrawHVLine>
 800055a:	e010      	b.n	800057e <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8000562:	2b00      	cmp	r3, #0
 8000564:	d10b      	bne.n	800057e <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	7d7a      	ldrb	r2, [r7, #21]
 800056a:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800056e:	893a      	ldrh	r2, [r7, #8]
 8000570:	8979      	ldrh	r1, [r7, #10]
 8000572:	2300      	movs	r3, #0
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	2301      	movs	r3, #1
 8000578:	68f8      	ldr	r0, [r7, #12]
 800057a:	f000 ff8c 	bl	8001496 <u8g2_DrawHVLine>
    }
    x++;
 800057e:	897b      	ldrh	r3, [r7, #10]
 8000580:	3301      	adds	r3, #1
 8000582:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 8000584:	7dfb      	ldrb	r3, [r7, #23]
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 800058a:	7dfb      	ldrb	r3, [r7, #23]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d104      	bne.n	800059a <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 8000590:	2301      	movs	r3, #1
 8000592:	75fb      	strb	r3, [r7, #23]
      b++;
 8000594:	6a3b      	ldr	r3, [r7, #32]
 8000596:	3301      	adds	r3, #1
 8000598:	623b      	str	r3, [r7, #32]
    }
    len--;
 800059a:	88fb      	ldrh	r3, [r7, #6]
 800059c:	3b01      	subs	r3, #1
 800059e:	80fb      	strh	r3, [r7, #6]
  while(len > 0) {
 80005a0:	88fb      	ldrh	r3, [r7, #6]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d1c6      	bne.n	8000534 <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	7dba      	ldrb	r2, [r7, #22]
 80005aa:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
 80005ae:	e000      	b.n	80005b2 <u8g2_DrawHXBM+0xd6>
    return;
 80005b0:	bf00      	nop
}
 80005b2:	3718      	adds	r7, #24
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b088      	sub	sp, #32
 80005bc:	af02      	add	r7, sp, #8
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	4608      	mov	r0, r1
 80005c2:	4611      	mov	r1, r2
 80005c4:	461a      	mov	r2, r3
 80005c6:	4603      	mov	r3, r0
 80005c8:	817b      	strh	r3, [r7, #10]
 80005ca:	460b      	mov	r3, r1
 80005cc:	813b      	strh	r3, [r7, #8]
 80005ce:	4613      	mov	r3, r2
 80005d0:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 80005d2:	88fb      	ldrh	r3, [r7, #6]
 80005d4:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 80005d6:	8afb      	ldrh	r3, [r7, #22]
 80005d8:	3307      	adds	r3, #7
 80005da:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 80005dc:	8afb      	ldrh	r3, [r7, #22]
 80005de:	08db      	lsrs	r3, r3, #3
 80005e0:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80005e2:	897a      	ldrh	r2, [r7, #10]
 80005e4:	88fb      	ldrh	r3, [r7, #6]
 80005e6:	4413      	add	r3, r2
 80005e8:	b298      	uxth	r0, r3
 80005ea:	893a      	ldrh	r2, [r7, #8]
 80005ec:	8c3b      	ldrh	r3, [r7, #32]
 80005ee:	4413      	add	r3, r2
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	893a      	ldrh	r2, [r7, #8]
 80005f4:	8979      	ldrh	r1, [r7, #10]
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	4603      	mov	r3, r0
 80005fa:	68f8      	ldr	r0, [r7, #12]
 80005fc:	f001 f809 	bl	8001612 <u8g2_IsIntersection>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d017      	beq.n	8000636 <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8000606:	e012      	b.n	800062e <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8000608:	88f8      	ldrh	r0, [r7, #6]
 800060a:	893a      	ldrh	r2, [r7, #8]
 800060c:	8979      	ldrh	r1, [r7, #10]
 800060e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	4603      	mov	r3, r0
 8000614:	68f8      	ldr	r0, [r7, #12]
 8000616:	f7ff ff61 	bl	80004dc <u8g2_DrawHXBM>
    bitmap += blen;
 800061a:	8afb      	ldrh	r3, [r7, #22]
 800061c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800061e:	4413      	add	r3, r2
 8000620:	627b      	str	r3, [r7, #36]	@ 0x24
    y++;
 8000622:	893b      	ldrh	r3, [r7, #8]
 8000624:	3301      	adds	r3, #1
 8000626:	813b      	strh	r3, [r7, #8]
    h--;
 8000628:	8c3b      	ldrh	r3, [r7, #32]
 800062a:	3b01      	subs	r3, #1
 800062c:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 800062e:	8c3b      	ldrh	r3, [r7, #32]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d1e9      	bne.n	8000608 <u8g2_DrawXBM+0x50>
 8000634:	e000      	b.n	8000638 <u8g2_DrawXBM+0x80>
    return;
 8000636:	bf00      	nop
  }
}
 8000638:	3718      	adds	r7, #24
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b084      	sub	sp, #16
 8000642:	af00      	add	r7, sp, #0
 8000644:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	7c1b      	ldrb	r3, [r3, #16]
 800064c:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000654:	461a      	mov	r2, r3
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	fb02 f303 	mul.w	r3, r2, r3
 800065c:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	00db      	lsls	r3, r3, #3
 8000662:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000668:	68fa      	ldr	r2, [r7, #12]
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f003 fb85 	bl	8003d7c <memset>
}
 8000672:	bf00      	nop
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	b086      	sub	sp, #24
 800067e:	af02      	add	r7, sp, #8
 8000680:	6078      	str	r0, [r7, #4]
 8000682:	460b      	mov	r3, r1
 8000684:	70fb      	strb	r3, [r7, #3]
 8000686:	4613      	mov	r3, r2
 8000688:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	7c1b      	ldrb	r3, [r3, #16]
 8000690:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8000692:	78fb      	ldrb	r3, [r7, #3]
 8000694:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800069a:	60bb      	str	r3, [r7, #8]
  offset *= w;
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	b29b      	uxth	r3, r3
 80006a0:	89ba      	ldrh	r2, [r7, #12]
 80006a2:	fb12 f303 	smulbb	r3, r2, r3
 80006a6:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 80006a8:	89bb      	ldrh	r3, [r7, #12]
 80006aa:	00db      	lsls	r3, r3, #3
 80006ac:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80006ae:	89bb      	ldrh	r3, [r7, #12]
 80006b0:	68ba      	ldr	r2, [r7, #8]
 80006b2:	4413      	add	r3, r2
 80006b4:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80006b6:	7bf9      	ldrb	r1, [r7, #15]
 80006b8:	78ba      	ldrb	r2, [r7, #2]
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	460b      	mov	r3, r1
 80006c0:	2100      	movs	r1, #0
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f001 fc8b 	bl	8001fde <u8x8_DrawTile>
}
 80006c8:	bf00      	nop
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80006e2:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80006ea:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	7c5b      	ldrb	r3, [r3, #17]
 80006f2:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80006f4:	7bba      	ldrb	r2, [r7, #14]
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
 80006f8:	4619      	mov	r1, r3
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f7ff ffbd 	bl	800067a <u8g2_send_tile_row>
    src_row++;
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	3301      	adds	r3, #1
 8000704:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8000706:	7bbb      	ldrb	r3, [r7, #14]
 8000708:	3301      	adds	r3, #1
 800070a:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 800070c:	7bfa      	ldrb	r2, [r7, #15]
 800070e:	7b7b      	ldrb	r3, [r7, #13]
 8000710:	429a      	cmp	r2, r3
 8000712:	d203      	bcs.n	800071c <u8g2_send_buffer+0x4c>
 8000714:	7bba      	ldrb	r2, [r7, #14]
 8000716:	7b3b      	ldrb	r3, [r7, #12]
 8000718:	429a      	cmp	r2, r3
 800071a:	d3eb      	bcc.n	80006f4 <u8g2_send_buffer+0x24>
}
 800071c:	bf00      	nop
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	460b      	mov	r3, r1
 800072e:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	78fa      	ldrb	r2, [r7, #3]
 8000734:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  u8g2->cb->update_dimension(u8g2);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	4798      	blx	r3
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8000762:	2b00      	cmp	r3, #0
 8000764:	d002      	beq.n	800076c <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f7ff ff69 	bl	800063e <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 800076c:	2100      	movs	r1, #0
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff ffd8 	bl	8000724 <u8g2_SetBufferCurrTileRow>
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff ffa3 	bl	80006d0 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8000790:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	4413      	add	r3, r2
 800079c:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	7c5b      	ldrb	r3, [r3, #17]
 80007a4:	7bfa      	ldrb	r2, [r7, #15]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	d304      	bcc.n	80007b4 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f001 fc79 	bl	80020a2 <u8x8_RefreshDisplay>
    return 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	e00d      	b.n	80007d0 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d002      	beq.n	80007c4 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f7ff ff3d 	bl	800063e <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
 80007c6:	4619      	mov	r1, r3
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f7ff ffab 	bl	8000724 <u8g2_SetBufferCurrTileRow>
  return 1;
 80007ce:	2301      	movs	r3, #1
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3710      	adds	r7, #16
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff ffb7 	bl	8000754 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff ffc8 	bl	800077c <u8g2_NextPage>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d1f9      	bne.n	80007e6 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 80007f2:	2100      	movs	r1, #0
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f7ff ff95 	bl	8000724 <u8g2_SetBufferCurrTileRow>
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2208      	movs	r2, #8
 8000810:	701a      	strb	r2, [r3, #0]
  return buf;
 8000812:	4b03      	ldr	r3, [pc, #12]	@ (8000820 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8000814:	4618      	mov	r0, r3
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	20000428 	.word	0x20000428

08000824 <u8g2_Setup_st7565_64128n_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_lm6063, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_64128n_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af02      	add	r7, sp, #8
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
 8000830:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_64128n, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4a0b      	ldr	r2, [pc, #44]	@ (8000868 <u8g2_Setup_st7565_64128n_f+0x44>)
 800083a:	490c      	ldr	r1, [pc, #48]	@ (800086c <u8g2_Setup_st7565_64128n_f+0x48>)
 800083c:	68f8      	ldr	r0, [r7, #12]
 800083e:	f001 fc91 	bl	8002164 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8000842:	f107 0313 	add.w	r3, r7, #19
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff ffdc 	bl	8000804 <u8g2_m_16_8_f>
 800084c:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800084e:	7cfa      	ldrb	r2, [r7, #19]
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <u8g2_Setup_st7565_64128n_f+0x4c>)
 8000856:	6979      	ldr	r1, [r7, #20]
 8000858:	68f8      	ldr	r0, [r7, #12]
 800085a:	f000 ffc4 	bl	80017e6 <u8g2_SetupBuffer>
}
 800085e:	bf00      	nop
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	08001cf9 	.word	0x08001cf9
 800086c:	08001e99 	.word	0x08001e99
 8000870:	08001669 	.word	0x08001669

08000874 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	460b      	mov	r3, r1
 800087e:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8000880:	78fb      	ldrb	r3, [r7, #3]
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	4413      	add	r3, r2
 8000886:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	781b      	ldrb	r3, [r3, #0]
}
 800088c:	4618      	mov	r0, r3
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	460b      	mov	r3, r1
 80008a2:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 80008a4:	78fb      	ldrb	r3, [r7, #3]
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	4413      	add	r3, r2
 80008aa:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	81fb      	strh	r3, [r7, #14]
    font++;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	3301      	adds	r3, #1
 80008b6:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80008b8:	89fb      	ldrh	r3, [r7, #14]
 80008ba:	021b      	lsls	r3, r3, #8
 80008bc:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	461a      	mov	r2, r3
 80008c4:	89fb      	ldrh	r3, [r7, #14]
 80008c6:	4413      	add	r3, r2
 80008c8:	81fb      	strh	r3, [r7, #14]
    return pos;
 80008ca:	89fb      	ldrh	r3, [r7, #14]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3714      	adds	r7, #20
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80008e2:	2100      	movs	r1, #0
 80008e4:	6838      	ldr	r0, [r7, #0]
 80008e6:	f7ff ffc5 	bl	8000874 <u8g2_font_get_byte>
 80008ea:	4603      	mov	r3, r0
 80008ec:	461a      	mov	r2, r3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80008f2:	2101      	movs	r1, #1
 80008f4:	6838      	ldr	r0, [r7, #0]
 80008f6:	f7ff ffbd 	bl	8000874 <u8g2_font_get_byte>
 80008fa:	4603      	mov	r3, r0
 80008fc:	461a      	mov	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8000902:	2102      	movs	r1, #2
 8000904:	6838      	ldr	r0, [r7, #0]
 8000906:	f7ff ffb5 	bl	8000874 <u8g2_font_get_byte>
 800090a:	4603      	mov	r3, r0
 800090c:	461a      	mov	r2, r3
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8000912:	2103      	movs	r1, #3
 8000914:	6838      	ldr	r0, [r7, #0]
 8000916:	f7ff ffad 	bl	8000874 <u8g2_font_get_byte>
 800091a:	4603      	mov	r3, r0
 800091c:	461a      	mov	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8000922:	2104      	movs	r1, #4
 8000924:	6838      	ldr	r0, [r7, #0]
 8000926:	f7ff ffa5 	bl	8000874 <u8g2_font_get_byte>
 800092a:	4603      	mov	r3, r0
 800092c:	461a      	mov	r2, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8000932:	2105      	movs	r1, #5
 8000934:	6838      	ldr	r0, [r7, #0]
 8000936:	f7ff ff9d 	bl	8000874 <u8g2_font_get_byte>
 800093a:	4603      	mov	r3, r0
 800093c:	461a      	mov	r2, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8000942:	2106      	movs	r1, #6
 8000944:	6838      	ldr	r0, [r7, #0]
 8000946:	f7ff ff95 	bl	8000874 <u8g2_font_get_byte>
 800094a:	4603      	mov	r3, r0
 800094c:	461a      	mov	r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8000952:	2107      	movs	r1, #7
 8000954:	6838      	ldr	r0, [r7, #0]
 8000956:	f7ff ff8d 	bl	8000874 <u8g2_font_get_byte>
 800095a:	4603      	mov	r3, r0
 800095c:	461a      	mov	r2, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8000962:	2108      	movs	r1, #8
 8000964:	6838      	ldr	r0, [r7, #0]
 8000966:	f7ff ff85 	bl	8000874 <u8g2_font_get_byte>
 800096a:	4603      	mov	r3, r0
 800096c:	461a      	mov	r2, r3
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8000972:	2109      	movs	r1, #9
 8000974:	6838      	ldr	r0, [r7, #0]
 8000976:	f7ff ff7d 	bl	8000874 <u8g2_font_get_byte>
 800097a:	4603      	mov	r3, r0
 800097c:	b25a      	sxtb	r2, r3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8000982:	210a      	movs	r1, #10
 8000984:	6838      	ldr	r0, [r7, #0]
 8000986:	f7ff ff75 	bl	8000874 <u8g2_font_get_byte>
 800098a:	4603      	mov	r3, r0
 800098c:	b25a      	sxtb	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8000992:	210b      	movs	r1, #11
 8000994:	6838      	ldr	r0, [r7, #0]
 8000996:	f7ff ff6d 	bl	8000874 <u8g2_font_get_byte>
 800099a:	4603      	mov	r3, r0
 800099c:	b25a      	sxtb	r2, r3
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80009a2:	210c      	movs	r1, #12
 80009a4:	6838      	ldr	r0, [r7, #0]
 80009a6:	f7ff ff65 	bl	8000874 <u8g2_font_get_byte>
 80009aa:	4603      	mov	r3, r0
 80009ac:	b25a      	sxtb	r2, r3
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80009b2:	210d      	movs	r1, #13
 80009b4:	6838      	ldr	r0, [r7, #0]
 80009b6:	f7ff ff5d 	bl	8000874 <u8g2_font_get_byte>
 80009ba:	4603      	mov	r3, r0
 80009bc:	b25a      	sxtb	r2, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80009c2:	210e      	movs	r1, #14
 80009c4:	6838      	ldr	r0, [r7, #0]
 80009c6:	f7ff ff55 	bl	8000874 <u8g2_font_get_byte>
 80009ca:	4603      	mov	r3, r0
 80009cc:	b25a      	sxtb	r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80009d2:	210f      	movs	r1, #15
 80009d4:	6838      	ldr	r0, [r7, #0]
 80009d6:	f7ff ff4d 	bl	8000874 <u8g2_font_get_byte>
 80009da:	4603      	mov	r3, r0
 80009dc:	b25a      	sxtb	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80009e2:	2110      	movs	r1, #16
 80009e4:	6838      	ldr	r0, [r7, #0]
 80009e6:	f7ff ff45 	bl	8000874 <u8g2_font_get_byte>
 80009ea:	4603      	mov	r3, r0
 80009ec:	b25a      	sxtb	r2, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80009f2:	2111      	movs	r1, #17
 80009f4:	6838      	ldr	r0, [r7, #0]
 80009f6:	f7ff ff4f 	bl	8000898 <u8g2_font_get_word>
 80009fa:	4603      	mov	r3, r0
 80009fc:	461a      	mov	r2, r3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8000a02:	2113      	movs	r1, #19
 8000a04:	6838      	ldr	r0, [r7, #0]
 8000a06:	f7ff ff47 	bl	8000898 <u8g2_font_get_word>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8000a12:	2115      	movs	r1, #21
 8000a14:	6838      	ldr	r0, [r7, #0]
 8000a16:	f7ff ff3f 	bl	8000898 <u8g2_font_get_word>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	82da      	strh	r2, [r3, #22]
#endif
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	b085      	sub	sp, #20
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
 8000a32:	460b      	mov	r3, r1
 8000a34:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	7b1b      	ldrb	r3, [r3, #12]
 8000a3a:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8000a44:	7bfa      	ldrb	r2, [r7, #15]
 8000a46:	7b7b      	ldrb	r3, [r7, #13]
 8000a48:	fa42 f303 	asr.w	r3, r2, r3
 8000a4c:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8000a4e:	7b7b      	ldrb	r3, [r7, #13]
 8000a50:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8000a52:	7bba      	ldrb	r2, [r7, #14]
 8000a54:	78fb      	ldrb	r3, [r7, #3]
 8000a56:	4413      	add	r3, r2
 8000a58:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8000a5a:	7bbb      	ldrb	r3, [r7, #14]
 8000a5c:	2b07      	cmp	r3, #7
 8000a5e:	d91a      	bls.n	8000a96 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8000a60:	2308      	movs	r3, #8
 8000a62:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8000a64:	7b3a      	ldrb	r2, [r7, #12]
 8000a66:	7b7b      	ldrb	r3, [r7, #13]
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	1c5a      	adds	r2, r3, #1
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	7b3b      	ldrb	r3, [r7, #12]
 8000a80:	fa02 f303 	lsl.w	r3, r2, r3
 8000a84:	b25a      	sxtb	r2, r3
 8000a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	b25b      	sxtb	r3, r3
 8000a8e:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8000a90:	7bbb      	ldrb	r3, [r7, #14]
 8000a92:	3b08      	subs	r3, #8
 8000a94:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8000a96:	78fb      	ldrb	r3, [r7, #3]
 8000a98:	f04f 32ff 	mov.w	r2, #4294967295
 8000a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	7bfb      	ldrb	r3, [r7, #15]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	7bba      	ldrb	r2, [r7, #14]
 8000ab0:	731a      	strb	r2, [r3, #12]
  return val;
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	460b      	mov	r3, r1
 8000aca:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8000acc:	78fb      	ldrb	r3, [r7, #3]
 8000ace:	4619      	mov	r1, r3
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff ffaa 	bl	8000a2a <u8g2_font_decode_get_unsigned_bits>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8000ada:	2301      	movs	r3, #1
 8000adc:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8000ade:	78fb      	ldrb	r3, [r7, #3]
 8000ae0:	3b01      	subs	r3, #1
 8000ae2:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8000ae4:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8000ae8:	78fb      	ldrb	r3, [r7, #3]
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8000af0:	7bfa      	ldrb	r2, [r7, #15]
 8000af2:	7bbb      	ldrb	r3, [r7, #14]
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	73fb      	strb	r3, [r7, #15]
  return v;
 8000afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8000b06:	b490      	push	{r4, r7}
 8000b08:	b082      	sub	sp, #8
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	4604      	mov	r4, r0
 8000b0e:	4608      	mov	r0, r1
 8000b10:	4611      	mov	r1, r2
 8000b12:	461a      	mov	r2, r3
 8000b14:	4623      	mov	r3, r4
 8000b16:	80fb      	strh	r3, [r7, #6]
 8000b18:	4603      	mov	r3, r0
 8000b1a:	717b      	strb	r3, [r7, #5]
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	713b      	strb	r3, [r7, #4]
 8000b20:	4613      	mov	r3, r2
 8000b22:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8000b24:	78fb      	ldrb	r3, [r7, #3]
 8000b26:	2b02      	cmp	r3, #2
 8000b28:	d014      	beq.n	8000b54 <u8g2_add_vector_y+0x4e>
 8000b2a:	2b02      	cmp	r3, #2
 8000b2c:	dc19      	bgt.n	8000b62 <u8g2_add_vector_y+0x5c>
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d002      	beq.n	8000b38 <u8g2_add_vector_y+0x32>
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d007      	beq.n	8000b46 <u8g2_add_vector_y+0x40>
 8000b36:	e014      	b.n	8000b62 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8000b38:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	88fb      	ldrh	r3, [r7, #6]
 8000b40:	4413      	add	r3, r2
 8000b42:	80fb      	strh	r3, [r7, #6]
      break;
 8000b44:	e014      	b.n	8000b70 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 8000b46:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	88fb      	ldrh	r3, [r7, #6]
 8000b4e:	4413      	add	r3, r2
 8000b50:	80fb      	strh	r3, [r7, #6]
      break;
 8000b52:	e00d      	b.n	8000b70 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8000b54:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	88fa      	ldrh	r2, [r7, #6]
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	80fb      	strh	r3, [r7, #6]
      break;
 8000b60:	e006      	b.n	8000b70 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 8000b62:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	88fa      	ldrh	r2, [r7, #6]
 8000b6a:	1ad3      	subs	r3, r2, r3
 8000b6c:	80fb      	strh	r3, [r7, #6]
      break;      
 8000b6e:	bf00      	nop
  }
  return dy;
 8000b70:	88fb      	ldrh	r3, [r7, #6]
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc90      	pop	{r4, r7}
 8000b7a:	4770      	bx	lr

08000b7c <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8000b7c:	b490      	push	{r4, r7}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4604      	mov	r4, r0
 8000b84:	4608      	mov	r0, r1
 8000b86:	4611      	mov	r1, r2
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4623      	mov	r3, r4
 8000b8c:	80fb      	strh	r3, [r7, #6]
 8000b8e:	4603      	mov	r3, r0
 8000b90:	717b      	strb	r3, [r7, #5]
 8000b92:	460b      	mov	r3, r1
 8000b94:	713b      	strb	r3, [r7, #4]
 8000b96:	4613      	mov	r3, r2
 8000b98:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8000b9a:	78fb      	ldrb	r3, [r7, #3]
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d014      	beq.n	8000bca <u8g2_add_vector_x+0x4e>
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	dc19      	bgt.n	8000bd8 <u8g2_add_vector_x+0x5c>
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d002      	beq.n	8000bae <u8g2_add_vector_x+0x32>
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d007      	beq.n	8000bbc <u8g2_add_vector_x+0x40>
 8000bac:	e014      	b.n	8000bd8 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 8000bae:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	88fb      	ldrh	r3, [r7, #6]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	80fb      	strh	r3, [r7, #6]
      break;
 8000bba:	e014      	b.n	8000be6 <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8000bbc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	88fa      	ldrh	r2, [r7, #6]
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	80fb      	strh	r3, [r7, #6]
      break;
 8000bc8:	e00d      	b.n	8000be6 <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 8000bca:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	88fa      	ldrh	r2, [r7, #6]
 8000bd2:	1ad3      	subs	r3, r2, r3
 8000bd4:	80fb      	strh	r3, [r7, #6]
      break;
 8000bd6:	e006      	b.n	8000be6 <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8000bd8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000bdc:	b29a      	uxth	r2, r3
 8000bde:	88fb      	ldrh	r3, [r7, #6]
 8000be0:	4413      	add	r3, r2
 8000be2:	80fb      	strh	r3, [r7, #6]
      break;      
 8000be4:	bf00      	nop
  }
  return dx;
 8000be6:	88fb      	ldrh	r3, [r7, #6]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc90      	pop	{r4, r7}
 8000bf0:	4770      	bx	lr

08000bf2 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b088      	sub	sp, #32
 8000bf6:	af02      	add	r7, sp, #8
 8000bf8:	6078      	str	r0, [r7, #4]
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	70fb      	strb	r3, [r7, #3]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	3360      	adds	r3, #96	@ 0x60
 8000c06:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8000c08:	78fb      	ldrb	r3, [r7, #3]
 8000c0a:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000c12:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8000c1a:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000c22:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8000c24:	7bfa      	ldrb	r2, [r7, #15]
 8000c26:	7d7b      	ldrb	r3, [r7, #21]
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8000c2c:	7bfb      	ldrb	r3, [r7, #15]
 8000c2e:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8000c30:	7dfa      	ldrb	r2, [r7, #23]
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d201      	bcs.n	8000c3c <u8g2_font_decode_len+0x4a>
      current = cnt;
 8000c38:	7dfb      	ldrb	r3, [r7, #23]
 8000c3a:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	889b      	ldrh	r3, [r3, #4]
 8000c40:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	88db      	ldrh	r3, [r3, #6]
 8000c46:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8000c48:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8000c4c:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	7c1b      	ldrb	r3, [r3, #16]
 8000c54:	89b8      	ldrh	r0, [r7, #12]
 8000c56:	f7ff ff91 	bl	8000b7c <u8g2_add_vector_x>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8000c5e:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8000c62:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	7c1b      	ldrb	r3, [r3, #16]
 8000c6a:	8978      	ldrh	r0, [r7, #10]
 8000c6c:	f7ff ff4b 	bl	8000b06 <u8g2_add_vector_y>
 8000c70:	4603      	mov	r3, r0
 8000c72:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8000c74:	78bb      	ldrb	r3, [r7, #2]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d010      	beq.n	8000c9c <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	7b9a      	ldrb	r2, [r3, #14]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 8000c84:	7dbb      	ldrb	r3, [r7, #22]
 8000c86:	b298      	uxth	r0, r3
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	7c1b      	ldrb	r3, [r3, #16]
 8000c8c:	897a      	ldrh	r2, [r7, #10]
 8000c8e:	89b9      	ldrh	r1, [r7, #12]
 8000c90:	9300      	str	r3, [sp, #0]
 8000c92:	4603      	mov	r3, r0
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f000 fbfe 	bl	8001496 <u8g2_DrawHVLine>
 8000c9a:	e013      	b.n	8000cc4 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	7b5b      	ldrb	r3, [r3, #13]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d10f      	bne.n	8000cc4 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	7bda      	ldrb	r2, [r3, #15]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 8000cae:	7dbb      	ldrb	r3, [r7, #22]
 8000cb0:	b298      	uxth	r0, r3
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	7c1b      	ldrb	r3, [r3, #16]
 8000cb6:	897a      	ldrh	r2, [r7, #10]
 8000cb8:	89b9      	ldrh	r1, [r7, #12]
 8000cba:	9300      	str	r3, [sp, #0]
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f000 fbe9 	bl	8001496 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8000cc4:	7dfa      	ldrb	r2, [r7, #23]
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d309      	bcc.n	8000ce0 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8000ccc:	7dfa      	ldrb	r2, [r7, #23]
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	757b      	strb	r3, [r7, #21]
    ly++;
 8000cd8:	7d3b      	ldrb	r3, [r7, #20]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8000cde:	e79d      	b.n	8000c1c <u8g2_font_decode_len+0x2a>
      break;
 8000ce0:	bf00      	nop
  }
  lx += cnt;
 8000ce2:	7d7a      	ldrb	r2, [r7, #21]
 8000ce4:	7dfb      	ldrb	r3, [r7, #23]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8000cea:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 8000cf2:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	725a      	strb	r2, [r3, #9]
}
 8000cfa:	bf00      	nop
 8000cfc:	3718      	adds	r7, #24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b084      	sub	sp, #16
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
 8000d0a:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3360      	adds	r3, #96	@ 0x60
 8000d10:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	683a      	ldr	r2, [r7, #0]
 8000d16:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8000d24:	4619      	mov	r1, r3
 8000d26:	68f8      	ldr	r0, [r7, #12]
 8000d28:	f7ff fe7f 	bl	8000a2a <u8g2_font_decode_get_unsigned_bits>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	b25a      	sxtb	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	68f8      	ldr	r0, [r7, #12]
 8000d3e:	f7ff fe74 	bl	8000a2a <u8g2_font_decode_get_unsigned_bits>
 8000d42:	4603      	mov	r3, r0
 8000d44:	b25a      	sxtb	r2, r3
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	7b9b      	ldrb	r3, [r3, #14]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	bf0c      	ite	eq
 8000d5c:	2301      	moveq	r3, #1
 8000d5e:	2300      	movne	r3, #0
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	461a      	mov	r2, r3
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	73da      	strb	r2, [r3, #15]
}
 8000d68:	bf00      	nop
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	@ 0x28
 8000d74:	af02      	add	r7, sp, #8
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3360      	adds	r3, #96	@ 0x60
 8000d7e:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8000d80:	6839      	ldr	r1, [r7, #0]
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f7ff ffbd 	bl	8000d02 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 8000d8e:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8000d96:	4619      	mov	r1, r3
 8000d98:	6978      	ldr	r0, [r7, #20]
 8000d9a:	f7ff fe91 	bl	8000ac0 <u8g2_font_decode_get_signed_bits>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8000da8:	4619      	mov	r1, r3
 8000daa:	6978      	ldr	r0, [r7, #20]
 8000dac:	f7ff fe88 	bl	8000ac0 <u8g2_font_decode_get_signed_bits>
 8000db0:	4603      	mov	r3, r0
 8000db2:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8000dba:	4619      	mov	r1, r3
 8000dbc:	6978      	ldr	r0, [r7, #20]
 8000dbe:	f7ff fe7f 	bl	8000ac0 <u8g2_font_decode_get_signed_bits>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	f340 80d7 	ble.w	8000f80 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	8898      	ldrh	r0, [r3, #4]
 8000dd6:	7cfa      	ldrb	r2, [r7, #19]
 8000dd8:	7c7b      	ldrb	r3, [r7, #17]
 8000dda:	4413      	add	r3, r2
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	425b      	negs	r3, r3
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	b25a      	sxtb	r2, r3
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	7c1b      	ldrb	r3, [r3, #16]
 8000de8:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8000dec:	f7ff fec6 	bl	8000b7c <u8g2_add_vector_x>
 8000df0:	4603      	mov	r3, r0
 8000df2:	461a      	mov	r2, r3
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	88d8      	ldrh	r0, [r3, #6]
 8000dfc:	7cfa      	ldrb	r2, [r7, #19]
 8000dfe:	7c7b      	ldrb	r3, [r7, #17]
 8000e00:	4413      	add	r3, r2
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	425b      	negs	r3, r3
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	b25a      	sxtb	r2, r3
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	7c1b      	ldrb	r3, [r3, #16]
 8000e0e:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8000e12:	f7ff fe78 	bl	8000b06 <u8g2_add_vector_y>
 8000e16:	4603      	mov	r3, r0
 8000e18:	461a      	mov	r2, r3
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	889b      	ldrh	r3, [r3, #4]
 8000e22:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	88db      	ldrh	r3, [r3, #6]
 8000e28:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8000e2a:	8bfb      	ldrh	r3, [r7, #30]
 8000e2c:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 8000e2e:	8b7b      	ldrh	r3, [r7, #26]
 8000e30:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	7c1b      	ldrb	r3, [r3, #16]
 8000e36:	2b03      	cmp	r3, #3
 8000e38:	d85a      	bhi.n	8000ef0 <u8g2_font_decode_glyph+0x180>
 8000e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8000e40 <u8g2_font_decode_glyph+0xd0>)
 8000e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e40:	08000e51 	.word	0x08000e51
 8000e44:	08000e6d 	.word	0x08000e6d
 8000e48:	08000e95 	.word	0x08000e95
 8000e4c:	08000ec9 	.word	0x08000ec9
      {
	case 0:
	    x1 += decode->glyph_width;
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	8bbb      	ldrh	r3, [r7, #28]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8000e5e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	8b3b      	ldrh	r3, [r7, #24]
 8000e66:	4413      	add	r3, r2
 8000e68:	833b      	strh	r3, [r7, #24]
	    break;
 8000e6a:	e041      	b.n	8000ef0 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8000e6c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	8bfa      	ldrh	r2, [r7, #30]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8000e78:	8bfb      	ldrh	r3, [r7, #30]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8000e7e:	8bbb      	ldrh	r3, [r7, #28]
 8000e80:	3301      	adds	r3, #1
 8000e82:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000e8a:	b29a      	uxth	r2, r3
 8000e8c:	8b3b      	ldrh	r3, [r7, #24]
 8000e8e:	4413      	add	r3, r2
 8000e90:	833b      	strh	r3, [r7, #24]
	    break;
 8000e92:	e02d      	b.n	8000ef0 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	8bfa      	ldrh	r2, [r7, #30]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8000ea2:	8bfb      	ldrh	r3, [r7, #30]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8000ea8:	8bbb      	ldrh	r3, [r7, #28]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8000eae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	8b7a      	ldrh	r2, [r7, #26]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8000eba:	8b7b      	ldrh	r3, [r7, #26]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	837b      	strh	r3, [r7, #26]
	    y1++;
 8000ec0:	8b3b      	ldrh	r3, [r7, #24]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	833b      	strh	r3, [r7, #24]
	    break;	  
 8000ec6:	e013      	b.n	8000ef0 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8000ec8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	8bbb      	ldrh	r3, [r7, #28]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	8b7a      	ldrh	r2, [r7, #26]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8000ee2:	8b7b      	ldrh	r3, [r7, #26]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	837b      	strh	r3, [r7, #26]
	    y1++;
 8000ee8:	8b3b      	ldrh	r3, [r7, #24]
 8000eea:	3301      	adds	r3, #1
 8000eec:	833b      	strh	r3, [r7, #24]
	    break;	  
 8000eee:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8000ef0:	8bb8      	ldrh	r0, [r7, #28]
 8000ef2:	8b7a      	ldrh	r2, [r7, #26]
 8000ef4:	8bf9      	ldrh	r1, [r7, #30]
 8000ef6:	8b3b      	ldrh	r3, [r7, #24]
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	4603      	mov	r3, r0
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f000 fb88 	bl	8001612 <u8g2_IsIntersection>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d102      	bne.n	8000f0e <u8g2_font_decode_glyph+0x19e>
	return d;
 8000f08:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8000f0c:	e03a      	b.n	8000f84 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	2200      	movs	r2, #0
 8000f12:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	2200      	movs	r2, #0
 8000f18:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8000f20:	4619      	mov	r1, r3
 8000f22:	6978      	ldr	r0, [r7, #20]
 8000f24:	f7ff fd81 	bl	8000a2a <u8g2_font_decode_get_unsigned_bits>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8000f32:	4619      	mov	r1, r3
 8000f34:	6978      	ldr	r0, [r7, #20]
 8000f36:	f7ff fd78 	bl	8000a2a <u8g2_font_decode_get_unsigned_bits>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	2200      	movs	r2, #0
 8000f42:	4619      	mov	r1, r3
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f7ff fe54 	bl	8000bf2 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8000f4a:	7bbb      	ldrb	r3, [r7, #14]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4619      	mov	r1, r3
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff fe4e 	bl	8000bf2 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8000f56:	2101      	movs	r1, #1
 8000f58:	6978      	ldr	r0, [r7, #20]
 8000f5a:	f7ff fd66 	bl	8000a2a <u8g2_font_decode_get_unsigned_bits>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d1ec      	bne.n	8000f3e <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8000f6a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	dd00      	ble.n	8000f74 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8000f72:	e7d2      	b.n	8000f1a <u8g2_font_decode_glyph+0x1aa>
	break;
 8000f74:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	7b9a      	ldrb	r2, [r3, #14]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  }
  return d;
 8000f80:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3720      	adds	r7, #32
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f9c:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	3317      	adds	r3, #23
 8000fa2:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8000fa4:	887b      	ldrh	r3, [r7, #2]
 8000fa6:	2bff      	cmp	r3, #255	@ 0xff
 8000fa8:	d82a      	bhi.n	8001000 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8000faa:	887b      	ldrh	r3, [r7, #2]
 8000fac:	2b60      	cmp	r3, #96	@ 0x60
 8000fae:	d907      	bls.n	8000fc0 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	4413      	add	r3, r2
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	e009      	b.n	8000fd4 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8000fc0:	887b      	ldrh	r3, [r7, #2]
 8000fc2:	2b40      	cmp	r3, #64	@ 0x40
 8000fc4:	d906      	bls.n	8000fd4 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8000fcc:	461a      	mov	r2, r3
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d04e      	beq.n	800107c <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	887b      	ldrh	r3, [r7, #2]
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d102      	bne.n	8000ff0 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	3302      	adds	r3, #2
 8000fee:	e049      	b.n	8001084 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8000ffe:	e7e9      	b.n	8000fd4 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8001006:	461a      	mov	r2, r3
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	4413      	add	r3, r2
 800100c:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8001012:	2100      	movs	r1, #0
 8001014:	6938      	ldr	r0, [r7, #16]
 8001016:	f7ff fc3f 	bl	8000898 <u8g2_font_get_word>
 800101a:	4603      	mov	r3, r0
 800101c:	461a      	mov	r2, r3
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	4413      	add	r3, r2
 8001022:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001024:	2102      	movs	r1, #2
 8001026:	6938      	ldr	r0, [r7, #16]
 8001028:	f7ff fc36 	bl	8000898 <u8g2_font_get_word>
 800102c:	4603      	mov	r3, r0
 800102e:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	3304      	adds	r3, #4
 8001034:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8001036:	89fa      	ldrh	r2, [r7, #14]
 8001038:	887b      	ldrh	r3, [r7, #2]
 800103a:	429a      	cmp	r2, r3
 800103c:	d3e9      	bcc.n	8001012 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8001044:	89fb      	ldrh	r3, [r7, #14]
 8001046:	021b      	lsls	r3, r3, #8
 8001048:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	3301      	adds	r3, #1
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	89fb      	ldrh	r3, [r7, #14]
 8001054:	4313      	orrs	r3, r2
 8001056:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8001058:	89fb      	ldrh	r3, [r7, #14]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d010      	beq.n	8001080 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 800105e:	89fa      	ldrh	r2, [r7, #14]
 8001060:	887b      	ldrh	r3, [r7, #2]
 8001062:	429a      	cmp	r2, r3
 8001064:	d102      	bne.n	800106c <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	3303      	adds	r3, #3
 800106a:	e00b      	b.n	8001084 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	3302      	adds	r3, #2
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	461a      	mov	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	4413      	add	r3, r2
 8001078:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 800107a:	e7e0      	b.n	800103e <u8g2_font_get_glyph_data+0xb2>
	break;
 800107c:	bf00      	nop
 800107e:	e000      	b.n	8001082 <u8g2_font_get_glyph_data+0xf6>
	break;
 8001080:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	4608      	mov	r0, r1
 8001096:	4611      	mov	r1, r2
 8001098:	461a      	mov	r2, r3
 800109a:	4603      	mov	r3, r0
 800109c:	817b      	strh	r3, [r7, #10]
 800109e:	460b      	mov	r3, r1
 80010a0:	813b      	strh	r3, [r7, #8]
 80010a2:	4613      	mov	r3, r2
 80010a4:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	897a      	ldrh	r2, [r7, #10]
 80010ae:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  u8g2->font_decode.target_y = y;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	893a      	ldrh	r2, [r7, #8]
 80010b6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80010ba:	88fb      	ldrh	r3, [r7, #6]
 80010bc:	4619      	mov	r1, r3
 80010be:	68f8      	ldr	r0, [r7, #12]
 80010c0:	f7ff ff64 	bl	8000f8c <u8g2_font_get_glyph_data>
 80010c4:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d005      	beq.n	80010d8 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 80010cc:	6939      	ldr	r1, [r7, #16]
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	f7ff fe4e 	bl	8000d70 <u8g2_font_decode_glyph>
 80010d4:	4603      	mov	r3, r0
 80010d6:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 80010d8:	8afb      	ldrh	r3, [r7, #22]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	4608      	mov	r0, r1
 80010ee:	4611      	mov	r1, r2
 80010f0:	461a      	mov	r2, r3
 80010f2:	4603      	mov	r3, r0
 80010f4:	817b      	strh	r3, [r7, #10]
 80010f6:	460b      	mov	r3, r1
 80010f8:	813b      	strh	r3, [r7, #8]
 80010fa:	4613      	mov	r3, r2
 80010fc:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001104:	2b03      	cmp	r3, #3
 8001106:	d833      	bhi.n	8001170 <u8g2_DrawGlyph+0x8c>
 8001108:	a201      	add	r2, pc, #4	@ (adr r2, 8001110 <u8g2_DrawGlyph+0x2c>)
 800110a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110e:	bf00      	nop
 8001110:	08001121 	.word	0x08001121
 8001114:	08001135 	.word	0x08001135
 8001118:	08001149 	.word	0x08001149
 800111c:	0800115d 	.word	0x0800115d
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	4798      	blx	r3
 8001128:	4603      	mov	r3, r0
 800112a:	461a      	mov	r2, r3
 800112c:	893b      	ldrh	r3, [r7, #8]
 800112e:	4413      	add	r3, r2
 8001130:	813b      	strh	r3, [r7, #8]
      break;
 8001132:	e01d      	b.n	8001170 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001138:	68f8      	ldr	r0, [r7, #12]
 800113a:	4798      	blx	r3
 800113c:	4603      	mov	r3, r0
 800113e:	461a      	mov	r2, r3
 8001140:	897b      	ldrh	r3, [r7, #10]
 8001142:	1a9b      	subs	r3, r3, r2
 8001144:	817b      	strh	r3, [r7, #10]
      break;
 8001146:	e013      	b.n	8001170 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	4798      	blx	r3
 8001150:	4603      	mov	r3, r0
 8001152:	461a      	mov	r2, r3
 8001154:	893b      	ldrh	r3, [r7, #8]
 8001156:	1a9b      	subs	r3, r3, r2
 8001158:	813b      	strh	r3, [r7, #8]
      break;
 800115a:	e009      	b.n	8001170 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	4798      	blx	r3
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	897b      	ldrh	r3, [r7, #10]
 800116a:	4413      	add	r3, r2
 800116c:	817b      	strh	r3, [r7, #10]
      break;
 800116e:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8001170:	88fb      	ldrh	r3, [r7, #6]
 8001172:	893a      	ldrh	r2, [r7, #8]
 8001174:	8979      	ldrh	r1, [r7, #10]
 8001176:	68f8      	ldr	r0, [r7, #12]
 8001178:	f7ff ff88 	bl	800108c <u8g2_font_draw_glyph>
 800117c:	4603      	mov	r3, r0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop

08001188 <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	460b      	mov	r3, r1
 8001194:	817b      	strh	r3, [r7, #10]
 8001196:	4613      	mov	r3, r2
 8001198:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800119a:	68f8      	ldr	r0, [r7, #12]
 800119c:	f000 fca7 	bl	8001aee <u8x8_utf8_init>
  sum = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	7812      	ldrb	r2, [r2, #0]
 80011ac:	4611      	mov	r1, r2
 80011ae:	68f8      	ldr	r0, [r7, #12]
 80011b0:	4798      	blx	r3
 80011b2:	4603      	mov	r3, r0
 80011b4:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 80011b6:	8abb      	ldrh	r3, [r7, #20]
 80011b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011bc:	4293      	cmp	r3, r2
 80011be:	d038      	beq.n	8001232 <u8g2_draw_string+0xaa>
      break;
    str++;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3301      	adds	r3, #1
 80011c4:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 80011c6:	8abb      	ldrh	r3, [r7, #20]
 80011c8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d0e9      	beq.n	80011a4 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 80011d0:	8abb      	ldrh	r3, [r7, #20]
 80011d2:	893a      	ldrh	r2, [r7, #8]
 80011d4:	8979      	ldrh	r1, [r7, #10]
 80011d6:	68f8      	ldr	r0, [r7, #12]
 80011d8:	f7ff ff84 	bl	80010e4 <u8g2_DrawGlyph>
 80011dc:	4603      	mov	r3, r0
 80011de:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	d81e      	bhi.n	8001228 <u8g2_draw_string+0xa0>
 80011ea:	a201      	add	r2, pc, #4	@ (adr r2, 80011f0 <u8g2_draw_string+0x68>)
 80011ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f0:	08001201 	.word	0x08001201
 80011f4:	0800120b 	.word	0x0800120b
 80011f8:	08001215 	.word	0x08001215
 80011fc:	0800121f 	.word	0x0800121f
      {
	case 0:
	  x += delta;
 8001200:	897a      	ldrh	r2, [r7, #10]
 8001202:	8a7b      	ldrh	r3, [r7, #18]
 8001204:	4413      	add	r3, r2
 8001206:	817b      	strh	r3, [r7, #10]
	  break;
 8001208:	e00e      	b.n	8001228 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 800120a:	893a      	ldrh	r2, [r7, #8]
 800120c:	8a7b      	ldrh	r3, [r7, #18]
 800120e:	4413      	add	r3, r2
 8001210:	813b      	strh	r3, [r7, #8]
	  break;
 8001212:	e009      	b.n	8001228 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8001214:	897a      	ldrh	r2, [r7, #10]
 8001216:	8a7b      	ldrh	r3, [r7, #18]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	817b      	strh	r3, [r7, #10]
	  break;
 800121c:	e004      	b.n	8001228 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 800121e:	893a      	ldrh	r2, [r7, #8]
 8001220:	8a7b      	ldrh	r3, [r7, #18]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	813b      	strh	r3, [r7, #8]
	  break;
 8001226:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8001228:	8afa      	ldrh	r2, [r7, #22]
 800122a:	8a7b      	ldrh	r3, [r7, #18]
 800122c:	4413      	add	r3, r2
 800122e:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001230:	e7b8      	b.n	80011a4 <u8g2_draw_string+0x1c>
      break;
 8001232:	bf00      	nop
    }
  }
  return sum;
 8001234:	8afb      	ldrh	r3, [r7, #22]
}
 8001236:	4618      	mov	r0, r3
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop

08001240 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	460b      	mov	r3, r1
 800124c:	817b      	strh	r3, [r7, #10]
 800124e:	4613      	mov	r3, r2
 8001250:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4a06      	ldr	r2, [pc, #24]	@ (8001270 <u8g2_DrawStr+0x30>)
 8001256:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8001258:	893a      	ldrh	r2, [r7, #8]
 800125a:	8979      	ldrh	r1, [r7, #10]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68f8      	ldr	r0, [r7, #12]
 8001260:	f7ff ff92 	bl	8001188 <u8g2_draw_string>
 8001264:	4603      	mov	r3, r0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	08001b0b 	.word	0x08001b0b

08001274 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001280:	2b00      	cmp	r3, #0
 8001282:	d05d      	beq.n	8001340 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f993 2081 	ldrsb.w	r2, [r3, #129]	@ 0x81
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f993 2082 	ldrsb.w	r2, [r3, #130]	@ 0x82
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d04d      	beq.n	8001342 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d11c      	bne.n	80012ea <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f993 208e 	ldrsb.w	r2, [r3, #142]	@ 0x8e
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f993 3083 	ldrsb.w	r3, [r3, #131]	@ 0x83
 80012bc:	429a      	cmp	r2, r3
 80012be:	da05      	bge.n	80012cc <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f993 2083 	ldrsb.w	r2, [r3, #131]	@ 0x83
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f993 3084 	ldrsb.w	r3, [r3, #132]	@ 0x84
 80012d8:	429a      	cmp	r2, r3
 80012da:	dd32      	ble.n	8001342 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f993 2084 	ldrsb.w	r2, [r3, #132]	@ 0x84
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 80012e8:	e02b      	b.n	8001342 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f993 308e 	ldrsb.w	r3, [r3, #142]	@ 0x8e
 80012f0:	461a      	mov	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 80012f8:	4619      	mov	r1, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8001300:	440b      	add	r3, r1
 8001302:	429a      	cmp	r2, r3
 8001304:	da0d      	bge.n	8001322 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 800130c:	b2da      	uxtb	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8001314:	b2db      	uxtb	r3, r3
 8001316:	4413      	add	r3, r2
 8001318:	b2db      	uxtb	r3, r3
 800131a:	b25a      	sxtb	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 800132e:	429a      	cmp	r2, r3
 8001330:	dd07      	ble.n	8001342 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f993 2080 	ldrsb.w	r2, [r3, #128]	@ 0x80
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 800133e:	e000      	b.n	8001342 <u8g2_UpdateRefHeight+0xce>
    return;
 8001340:	bf00      	nop
  }  
}
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  return 0;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
	...

08001364 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a04      	ldr	r2, [pc, #16]	@ (8001380 <u8g2_SetFontPosBaseline+0x1c>)
 8001370:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	0800134d 	.word	0x0800134d

08001384 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	429a      	cmp	r2, r3
 8001396:	d00b      	beq.n	80013b0 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	659a      	str	r2, [r3, #88]	@ 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3374      	adds	r3, #116	@ 0x74
 80013a2:	6839      	ldr	r1, [r7, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fa97 	bl	80008d8 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff ff62 	bl	8001274 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <u8g2_clip_intersection2>:
 will return 0 if there is no intersection and if a > b

 */

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len,
		u8g2_uint_t c, u8g2_uint_t d) {
 80013b8:	b480      	push	{r7}
 80013ba:	b087      	sub	sp, #28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	4611      	mov	r1, r2
 80013c4:	461a      	mov	r2, r3
 80013c6:	460b      	mov	r3, r1
 80013c8:	80fb      	strh	r3, [r7, #6]
 80013ca:	4613      	mov	r3, r2
 80013cc:	80bb      	strh	r3, [r7, #4]
	u8g2_uint_t a = *ap;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	881b      	ldrh	r3, [r3, #0]
 80013d2:	82fb      	strh	r3, [r7, #22]
	u8g2_uint_t b;
	b = a;
 80013d4:	8afb      	ldrh	r3, [r7, #22]
 80013d6:	82bb      	strh	r3, [r7, #20]
	b += *len;
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	881a      	ldrh	r2, [r3, #0]
 80013dc:	8abb      	ldrh	r3, [r7, #20]
 80013de:	4413      	add	r3, r2
 80013e0:	82bb      	strh	r3, [r7, #20]
	/* be removed completly (be aware about memory curruption for wrong */
	/* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
	/* arguments) */

	/* removing the following if clause completly may lead to memory corruption of a>b */
	if (a > b) {
 80013e2:	8afa      	ldrh	r2, [r7, #22]
 80013e4:	8abb      	ldrh	r3, [r7, #20]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d90b      	bls.n	8001402 <u8g2_clip_intersection2+0x4a>
		/* replacing this if with a simple "return 0;" will not handle the case with negative a */
		if (a < d) {
 80013ea:	8afa      	ldrh	r2, [r7, #22]
 80013ec:	88bb      	ldrh	r3, [r7, #4]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d205      	bcs.n	80013fe <u8g2_clip_intersection2+0x46>
			b = d;
 80013f2:	88bb      	ldrh	r3, [r7, #4]
 80013f4:	82bb      	strh	r3, [r7, #20]
			b--;
 80013f6:	8abb      	ldrh	r3, [r7, #20]
 80013f8:	3b01      	subs	r3, #1
 80013fa:	82bb      	strh	r3, [r7, #20]
 80013fc:	e001      	b.n	8001402 <u8g2_clip_intersection2+0x4a>
		} else {
			a = c;
 80013fe:	88fb      	ldrh	r3, [r7, #6]
 8001400:	82fb      	strh	r3, [r7, #22]
		}
	}

	/* from now on, the asumption a <= b is ok */

	if (a >= d)
 8001402:	8afa      	ldrh	r2, [r7, #22]
 8001404:	88bb      	ldrh	r3, [r7, #4]
 8001406:	429a      	cmp	r2, r3
 8001408:	d301      	bcc.n	800140e <u8g2_clip_intersection2+0x56>
		return 0;
 800140a:	2300      	movs	r3, #0
 800140c:	e01c      	b.n	8001448 <u8g2_clip_intersection2+0x90>
	if (b <= c)
 800140e:	8aba      	ldrh	r2, [r7, #20]
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	429a      	cmp	r2, r3
 8001414:	d801      	bhi.n	800141a <u8g2_clip_intersection2+0x62>
		return 0;
 8001416:	2300      	movs	r3, #0
 8001418:	e016      	b.n	8001448 <u8g2_clip_intersection2+0x90>
	if (a < c)
 800141a:	8afa      	ldrh	r2, [r7, #22]
 800141c:	88fb      	ldrh	r3, [r7, #6]
 800141e:	429a      	cmp	r2, r3
 8001420:	d201      	bcs.n	8001426 <u8g2_clip_intersection2+0x6e>
		a = c;
 8001422:	88fb      	ldrh	r3, [r7, #6]
 8001424:	82fb      	strh	r3, [r7, #22]
	if (b > d)
 8001426:	8aba      	ldrh	r2, [r7, #20]
 8001428:	88bb      	ldrh	r3, [r7, #4]
 800142a:	429a      	cmp	r2, r3
 800142c:	d901      	bls.n	8001432 <u8g2_clip_intersection2+0x7a>
		b = d;
 800142e:	88bb      	ldrh	r3, [r7, #4]
 8001430:	82bb      	strh	r3, [r7, #20]

	*ap = a;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	8afa      	ldrh	r2, [r7, #22]
 8001436:	801a      	strh	r2, [r3, #0]
	b -= a;
 8001438:	8aba      	ldrh	r2, [r7, #20]
 800143a:	8afb      	ldrh	r3, [r7, #22]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	82bb      	strh	r3, [r7, #20]
	*len = b;
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	8aba      	ldrh	r2, [r7, #20]
 8001444:	801a      	strh	r2, [r3, #0]
	return 1;
 8001446:	2301      	movs	r3, #1
}
 8001448:	4618      	mov	r0, r3
 800144a:	371c      	adds	r7, #28
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <u8g2_draw_hv_line_2dir>:
 This function first adjusts the y position to the local buffer. Then it
 will clip the line and call u8g2_draw_low_level_hv_line()

 */
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		u8g2_uint_t len, uint8_t dir) {
 8001454:	b590      	push	{r4, r7, lr}
 8001456:	b087      	sub	sp, #28
 8001458:	af02      	add	r7, sp, #8
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	4608      	mov	r0, r1
 800145e:	4611      	mov	r1, r2
 8001460:	461a      	mov	r2, r3
 8001462:	4603      	mov	r3, r0
 8001464:	817b      	strh	r3, [r7, #10]
 8001466:	460b      	mov	r3, r1
 8001468:	813b      	strh	r3, [r7, #8]
 800146a:	4613      	mov	r3, r2
 800146c:	80fb      	strh	r3, [r7, #6]

	/* clipping happens before the display rotation */

	/* transform to pixel buffer coordinates */
	y -= u8g2->pixel_curr_row;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001472:	893a      	ldrh	r2, [r7, #8]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	813b      	strh	r3, [r7, #8]

	u8g2->ll_hvline(u8g2, x, y, len, dir);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 800147c:	88f8      	ldrh	r0, [r7, #6]
 800147e:	893a      	ldrh	r2, [r7, #8]
 8001480:	8979      	ldrh	r1, [r7, #10]
 8001482:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	4603      	mov	r3, r0
 800148a:	68f8      	ldr	r0, [r7, #12]
 800148c:	47a0      	blx	r4
}
 800148e:	bf00      	nop
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	bd90      	pop	{r4, r7, pc}

08001496 <u8g2_DrawHVLine>:
 This function should be called by the user.

 "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
 */
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		u8g2_uint_t len, uint8_t dir) {
 8001496:	b590      	push	{r4, r7, lr}
 8001498:	b087      	sub	sp, #28
 800149a:	af02      	add	r7, sp, #8
 800149c:	60f8      	str	r0, [r7, #12]
 800149e:	4608      	mov	r0, r1
 80014a0:	4611      	mov	r1, r2
 80014a2:	461a      	mov	r2, r3
 80014a4:	4603      	mov	r3, r0
 80014a6:	817b      	strh	r3, [r7, #10]
 80014a8:	460b      	mov	r3, r1
 80014aa:	813b      	strh	r3, [r7, #8]
 80014ac:	4613      	mov	r3, r2
 80014ae:	80fb      	strh	r3, [r7, #6]
	/* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
	/* The callback may rotate the hv line */
	/* after rotation this will call u8g2_draw_hv_line_4dir() */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
	if (u8g2->is_page_clip_window_intersection != 0)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d075      	beq.n	80015a6 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
		if (len != 0) {
 80014ba:	88fb      	ldrh	r3, [r7, #6]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d072      	beq.n	80015a6 <u8g2_DrawHVLine+0x110>

			/* convert to two directions */
			if (len > 1) {
 80014c0:	88fb      	ldrh	r3, [r7, #6]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d91a      	bls.n	80014fc <u8g2_DrawHVLine+0x66>
				if (dir == 2) {
 80014c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d109      	bne.n	80014e2 <u8g2_DrawHVLine+0x4c>
					x -= len;
 80014ce:	897a      	ldrh	r2, [r7, #10]
 80014d0:	88fb      	ldrh	r3, [r7, #6]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	817b      	strh	r3, [r7, #10]
					x++;
 80014d8:	897b      	ldrh	r3, [r7, #10]
 80014da:	3301      	adds	r3, #1
 80014dc:	b29b      	uxth	r3, r3
 80014de:	817b      	strh	r3, [r7, #10]
 80014e0:	e00c      	b.n	80014fc <u8g2_DrawHVLine+0x66>
				} else if (dir == 3) {
 80014e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d108      	bne.n	80014fc <u8g2_DrawHVLine+0x66>
					y -= len;
 80014ea:	893a      	ldrh	r2, [r7, #8]
 80014ec:	88fb      	ldrh	r3, [r7, #6]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	813b      	strh	r3, [r7, #8]
					y++;
 80014f4:	893b      	ldrh	r3, [r7, #8]
 80014f6:	3301      	adds	r3, #1
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	813b      	strh	r3, [r7, #8]
				}
			}
			dir &= 1;
 80014fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	f887 3020 	strb.w	r3, [r7, #32]

			/* clip against the user window */
			if (dir == 0) {
 8001508:	f897 3020 	ldrb.w	r3, [r7, #32]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d11a      	bne.n	8001546 <u8g2_DrawHVLine+0xb0>
				if (y < u8g2->user_y0)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8001516:	893b      	ldrh	r3, [r7, #8]
 8001518:	429a      	cmp	r2, r3
 800151a:	d83b      	bhi.n	8001594 <u8g2_DrawHVLine+0xfe>
					return;
				if (y >= u8g2->user_y1)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8001522:	893b      	ldrh	r3, [r7, #8]
 8001524:	429a      	cmp	r2, r3
 8001526:	d937      	bls.n	8001598 <u8g2_DrawHVLine+0x102>
					return;
				if (u8g2_clip_intersection2(&x, &len, u8g2->user_x0,
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8001534:	1db9      	adds	r1, r7, #6
 8001536:	f107 000a 	add.w	r0, r7, #10
 800153a:	f7ff ff3d 	bl	80013b8 <u8g2_clip_intersection2>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d11a      	bne.n	800157a <u8g2_DrawHVLine+0xe4>
						u8g2->user_x1) == 0)
					return;
 8001544:	e02f      	b.n	80015a6 <u8g2_DrawHVLine+0x110>
			} else {
				if (x < u8g2->user_x0)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800154c:	897b      	ldrh	r3, [r7, #10]
 800154e:	429a      	cmp	r2, r3
 8001550:	d824      	bhi.n	800159c <u8g2_DrawHVLine+0x106>
					return;
				if (x >= u8g2->user_x1)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8001558:	897b      	ldrh	r3, [r7, #10]
 800155a:	429a      	cmp	r2, r3
 800155c:	d920      	bls.n	80015a0 <u8g2_DrawHVLine+0x10a>
					return;
				if (u8g2_clip_intersection2(&y, &len, u8g2->user_y0,
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 800156a:	1db9      	adds	r1, r7, #6
 800156c:	f107 0008 	add.w	r0, r7, #8
 8001570:	f7ff ff22 	bl	80013b8 <u8g2_clip_intersection2>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d014      	beq.n	80015a4 <u8g2_DrawHVLine+0x10e>
						u8g2->user_y1) == 0)
					return;
			}

			u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	689c      	ldr	r4, [r3, #8]
 8001580:	8979      	ldrh	r1, [r7, #10]
 8001582:	893a      	ldrh	r2, [r7, #8]
 8001584:	88f8      	ldrh	r0, [r7, #6]
 8001586:	f897 3020 	ldrb.w	r3, [r7, #32]
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	4603      	mov	r3, r0
 800158e:	68f8      	ldr	r0, [r7, #12]
 8001590:	47a0      	blx	r4
 8001592:	e008      	b.n	80015a6 <u8g2_DrawHVLine+0x110>
					return;
 8001594:	bf00      	nop
 8001596:	e006      	b.n	80015a6 <u8g2_DrawHVLine+0x110>
					return;
 8001598:	bf00      	nop
 800159a:	e004      	b.n	80015a6 <u8g2_DrawHVLine+0x110>
					return;
 800159c:	bf00      	nop
 800159e:	e002      	b.n	80015a6 <u8g2_DrawHVLine+0x110>
					return;
 80015a0:	bf00      	nop
 80015a2:	e000      	b.n	80015a6 <u8g2_DrawHVLine+0x110>
					return;
 80015a4:	bf00      	nop
		}
}
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd90      	pop	{r4, r7, pc}

080015ac <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 80015ac:	b490      	push	{r4, r7}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4604      	mov	r4, r0
 80015b4:	4608      	mov	r0, r1
 80015b6:	4611      	mov	r1, r2
 80015b8:	461a      	mov	r2, r3
 80015ba:	4623      	mov	r3, r4
 80015bc:	80fb      	strh	r3, [r7, #6]
 80015be:	4603      	mov	r3, r0
 80015c0:	80bb      	strh	r3, [r7, #4]
 80015c2:	460b      	mov	r3, r1
 80015c4:	807b      	strh	r3, [r7, #2]
 80015c6:	4613      	mov	r3, r2
 80015c8:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 80015ca:	887a      	ldrh	r2, [r7, #2]
 80015cc:	88bb      	ldrh	r3, [r7, #4]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d20d      	bcs.n	80015ee <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 80015d2:	883a      	ldrh	r2, [r7, #0]
 80015d4:	88fb      	ldrh	r3, [r7, #6]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d901      	bls.n	80015de <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 80015da:	2301      	movs	r3, #1
 80015dc:	e014      	b.n	8001608 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 80015de:	887a      	ldrh	r2, [r7, #2]
 80015e0:	883b      	ldrh	r3, [r7, #0]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d901      	bls.n	80015ea <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e00e      	b.n	8001608 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	e00c      	b.n	8001608 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 80015ee:	883a      	ldrh	r2, [r7, #0]
 80015f0:	88fb      	ldrh	r3, [r7, #6]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d907      	bls.n	8001606 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 80015f6:	887a      	ldrh	r2, [r7, #2]
 80015f8:	883b      	ldrh	r3, [r7, #0]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d901      	bls.n	8001602 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 80015fe:	2301      	movs	r3, #1
 8001600:	e002      	b.n	8001608 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001602:	2300      	movs	r3, #0
 8001604:	e000      	b.n	8001608 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8001606:	2300      	movs	r3, #0
    }
  }
}
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bc90      	pop	{r4, r7}
 8001610:	4770      	bx	lr

08001612 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b084      	sub	sp, #16
 8001616:	af00      	add	r7, sp, #0
 8001618:	60f8      	str	r0, [r7, #12]
 800161a:	4608      	mov	r0, r1
 800161c:	4611      	mov	r1, r2
 800161e:	461a      	mov	r2, r3
 8001620:	4603      	mov	r3, r0
 8001622:	817b      	strh	r3, [r7, #10]
 8001624:	460b      	mov	r3, r1
 8001626:	813b      	strh	r3, [r7, #8]
 8001628:	4613      	mov	r3, r2
 800162a:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f8b3 104e 	ldrh.w	r1, [r3, #78]	@ 0x4e
 8001638:	8b3b      	ldrh	r3, [r7, #24]
 800163a:	893a      	ldrh	r2, [r7, #8]
 800163c:	f7ff ffb6 	bl	80015ac <u8g2_is_intersection_decision_tree>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <u8g2_IsIntersection+0x38>
    return 0; 
 8001646:	2300      	movs	r3, #0
 8001648:	e00a      	b.n	8001660 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 8001656:	88fb      	ldrh	r3, [r7, #6]
 8001658:	897a      	ldrh	r2, [r7, #10]
 800165a:	f7ff ffa7 	bl	80015ac <u8g2_is_intersection_decision_tree>
 800165e:	4603      	mov	r3, r0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001668:	b480      	push	{r7}
 800166a:	b089      	sub	sp, #36	@ 0x24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	4608      	mov	r0, r1
 8001672:	4611      	mov	r1, r2
 8001674:	461a      	mov	r2, r3
 8001676:	4603      	mov	r3, r0
 8001678:	817b      	strh	r3, [r7, #10]
 800167a:	460b      	mov	r3, r1
 800167c:	813b      	strh	r3, [r7, #8]
 800167e:	4613      	mov	r3, r2
 8001680:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8001682:	893b      	ldrh	r3, [r7, #8]
 8001684:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8001686:	7efb      	ldrb	r3, [r7, #27]
 8001688:	f003 0307 	and.w	r3, r3, #7
 800168c:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 800168e:	2301      	movs	r3, #1
 8001690:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8001692:	7e3a      	ldrb	r2, [r7, #24]
 8001694:	7efb      	ldrb	r3, [r7, #27]
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d801      	bhi.n	80016b2 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 80016ae:	7e3b      	ldrb	r3, [r7, #24]
 80016b0:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d001      	beq.n	80016c0 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 80016bc:	7e3b      	ldrb	r3, [r7, #24]
 80016be:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 80016c0:	893b      	ldrh	r3, [r7, #8]
 80016c2:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 80016c4:	8afb      	ldrh	r3, [r7, #22]
 80016c6:	f023 0307 	bic.w	r3, r3, #7
 80016ca:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	7c1b      	ldrb	r3, [r3, #16]
 80016d2:	461a      	mov	r2, r3
 80016d4:	8afb      	ldrh	r3, [r7, #22]
 80016d6:	fb13 f302 	smulbb	r3, r3, r2
 80016da:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016e0:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 80016e2:	8afb      	ldrh	r3, [r7, #22]
 80016e4:	69fa      	ldr	r2, [r7, #28]
 80016e6:	4413      	add	r3, r2
 80016e8:	61fb      	str	r3, [r7, #28]
  ptr += x;
 80016ea:	897b      	ldrh	r3, [r7, #10]
 80016ec:	69fa      	ldr	r2, [r7, #28]
 80016ee:	4413      	add	r3, r2
 80016f0:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 80016f2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d117      	bne.n	800172a <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	781a      	ldrb	r2, [r3, #0]
 80016fe:	7ebb      	ldrb	r3, [r7, #26]
 8001700:	4313      	orrs	r3, r2
 8001702:	b2da      	uxtb	r2, r3
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	781a      	ldrb	r2, [r3, #0]
 800170c:	7e7b      	ldrb	r3, [r7, #25]
 800170e:	4053      	eors	r3, r2
 8001710:	b2da      	uxtb	r2, r3
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	701a      	strb	r2, [r3, #0]
	ptr++;
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3301      	adds	r3, #1
 800171a:	61fb      	str	r3, [r7, #28]
	len--;
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	3b01      	subs	r3, #1
 8001720:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8001722:	88fb      	ldrh	r3, [r7, #6]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1e8      	bne.n	80016fa <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8001728:	e038      	b.n	800179c <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	781a      	ldrb	r2, [r3, #0]
 800172e:	7ebb      	ldrb	r3, [r7, #26]
 8001730:	4313      	orrs	r3, r2
 8001732:	b2da      	uxtb	r2, r3
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	781a      	ldrb	r2, [r3, #0]
 800173c:	7e7b      	ldrb	r3, [r7, #25]
 800173e:	4053      	eors	r3, r2
 8001740:	b2da      	uxtb	r2, r3
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8001746:	7efb      	ldrb	r3, [r7, #27]
 8001748:	3301      	adds	r3, #1
 800174a:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 800174c:	7efb      	ldrb	r3, [r7, #27]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	76fb      	strb	r3, [r7, #27]
      len--;
 8001754:	88fb      	ldrh	r3, [r7, #6]
 8001756:	3b01      	subs	r3, #1
 8001758:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 800175a:	7efb      	ldrb	r3, [r7, #27]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d114      	bne.n	800178a <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8001764:	461a      	mov	r2, r3
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	4413      	add	r3, r2
 800176a:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001772:	2b01      	cmp	r3, #1
 8001774:	d801      	bhi.n	800177a <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8001776:	2301      	movs	r3, #1
 8001778:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001780:	2b01      	cmp	r3, #1
 8001782:	d008      	beq.n	8001796 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8001784:	2301      	movs	r3, #1
 8001786:	767b      	strb	r3, [r7, #25]
 8001788:	e005      	b.n	8001796 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 800178a:	7ebb      	ldrb	r3, [r7, #26]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8001790:	7e7b      	ldrb	r3, [r7, #25]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8001796:	88fb      	ldrh	r3, [r7, #6]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1c6      	bne.n	800172a <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 800179c:	bf00      	nop
 800179e:	3724      	adds	r7, #36	@ 0x24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  u8g2->clip_y0 = 0;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017c6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  
  u8g2->cb->update_page_win(u8g2);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	4798      	blx	r3
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b084      	sub	sp, #16
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	60f8      	str	r0, [r7, #12]
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	603b      	str	r3, [r7, #0]
 80017f2:	4613      	mov	r3, r2
 80017f4:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2200      	movs	r2, #0
 80017fa:	659a      	str	r2, [r3, #88]	@ 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	68ba      	ldr	r2, [r7, #8]
 8001806:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	79fa      	ldrb	r2, [r7, #7]
 800180c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
  u8g2->bitmap_transparency = 0;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
  u8g2->draw_color = 1;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  u8g2->is_auto_page_clear = 1;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
  
  u8g2->cb = u8g2_cb;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update_dimension(u8g2);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8001850:	68f8      	ldr	r0, [r7, #12]
 8001852:	f7ff ffa9 	bl	80017a8 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f7ff fd84 	bl	8001364 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
#endif
}
 8001864:	bf00      	nop
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001880:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8001882:	89fb      	ldrh	r3, [r7, #14]
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	89fa      	ldrh	r2, [r7, #14]
 800188c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  
  t = display_info->tile_width;
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	7c1b      	ldrb	r3, [r3, #16]
 8001892:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8001894:	89fb      	ldrh	r3, [r7, #14]
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	89fa      	ldrh	r2, [r7, #14]
 800189e:	875a      	strh	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80018a6:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80018a8:	89fb      	ldrh	r3, [r7, #14]
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	89fa      	ldrh	r2, [r7, #14]
 80018b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_buf_height;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80018ba:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80018bc:	89fb      	ldrh	r3, [r7, #14]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 80018c4:	4413      	add	r3, r2
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	7c52      	ldrb	r2, [r2, #17]
 80018ca:	4293      	cmp	r3, r2
 80018cc:	dd07      	ble.n	80018de <u8g2_update_dimension_common+0x72>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	7c5b      	ldrb	r3, [r3, #17]
 80018d2:	461a      	mov	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80018de:	89fb      	ldrh	r3, [r7, #14]
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  u8g2->buf_y1 += t;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8001900:	89fb      	ldrh	r3, [r7, #14]
 8001902:	4413      	add	r3, r2
 8001904:	b29a      	uxth	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	8a9a      	ldrh	r2, [r3, #20]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  u8g2->height = display_info->pixel_height;
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	8ada      	ldrh	r2, [r3, #22]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8001920:	bf00      	nop
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af02      	add	r7, sp, #8
 8001932:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f8b3 0052 	ldrh.w	r0, [r3, #82]	@ 0x52
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	4603      	mov	r3, r0
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff fe5e 	bl	8001612 <u8g2_IsIntersection>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d104      	bne.n	8001966 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8001964:	e03b      	b.n	80019de <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800197a:	429a      	cmp	r2, r3
 800197c:	d205      	bcs.n	800198a <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8001996:	429a      	cmp	r2, r3
 8001998:	d905      	bls.n	80019a6 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d205      	bcs.n	80019c2 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d905      	bls.n	80019de <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff ff3c 	bl	800186c <u8g2_update_dimension_common>
}
 80019f4:	bf00      	nop
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  if ( u8g2->height >= u8g2->buf_y1 )
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d30a      	bcc.n	8001a46 <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff ff65 	bl	800192c <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b088      	sub	sp, #32
 8001a6e:	af02      	add	r7, sp, #8
 8001a70:	60f8      	str	r0, [r7, #12]
 8001a72:	4608      	mov	r0, r1
 8001a74:	4611      	mov	r1, r2
 8001a76:	461a      	mov	r2, r3
 8001a78:	4603      	mov	r3, r0
 8001a7a:	817b      	strh	r3, [r7, #10]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	813b      	strh	r3, [r7, #8]
 8001a80:	4613      	mov	r3, r2
 8001a82:	80fb      	strh	r3, [r7, #6]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001a8a:	82bb      	strh	r3, [r7, #20]
  yy -= y;
 8001a8c:	8aba      	ldrh	r2, [r7, #20]
 8001a8e:	893b      	ldrh	r3, [r7, #8]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	82bb      	strh	r3, [r7, #20]
  
  xx = u8g2->width;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a9a:	82fb      	strh	r3, [r7, #22]
  xx -= x;
 8001a9c:	8afa      	ldrh	r2, [r7, #22]
 8001a9e:	897b      	ldrh	r3, [r7, #10]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	82fb      	strh	r3, [r7, #22]
  
  if ( dir == 0 )
 8001aa4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d107      	bne.n	8001abc <u8g2_draw_l90_r2+0x52>
  {
    yy--;
 8001aac:	8abb      	ldrh	r3, [r7, #20]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	82bb      	strh	r3, [r7, #20]
    xx -= len;
 8001ab2:	8afa      	ldrh	r2, [r7, #22]
 8001ab4:	88fb      	ldrh	r3, [r7, #6]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	82fb      	strh	r3, [r7, #22]
 8001aba:	e00a      	b.n	8001ad2 <u8g2_draw_l90_r2+0x68>
  }
  else if ( dir == 1 )
 8001abc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d106      	bne.n	8001ad2 <u8g2_draw_l90_r2+0x68>
  {
    xx--;
 8001ac4:	8afb      	ldrh	r3, [r7, #22]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	82fb      	strh	r3, [r7, #22]
    yy -= len;
 8001aca:	8aba      	ldrh	r2, [r7, #20]
 8001acc:	88fb      	ldrh	r3, [r7, #6]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	82bb      	strh	r3, [r7, #20]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8001ad2:	88f8      	ldrh	r0, [r7, #6]
 8001ad4:	8aba      	ldrh	r2, [r7, #20]
 8001ad6:	8af9      	ldrh	r1, [r7, #22]
 8001ad8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	4603      	mov	r3, r0
 8001ae0:	68f8      	ldr	r0, [r7, #12]
 8001ae2:	f7ff fcb7 	bl	8001454 <u8g2_draw_hv_line_2dir>
}
 8001ae6:	bf00      	nop
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	460b      	mov	r3, r1
 8001b14:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8001b16:	78fb      	ldrb	r3, [r7, #3]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d002      	beq.n	8001b22 <u8x8_ascii_next+0x18>
 8001b1c:	78fb      	ldrb	r3, [r7, #3]
 8001b1e:	2b0a      	cmp	r3, #10
 8001b20:	d102      	bne.n	8001b28 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8001b22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b26:	e001      	b.n	8001b2c <u8x8_ascii_next+0x22>
  return b;
 8001b28:	78fb      	ldrb	r3, [r7, #3]
 8001b2a:	b29b      	uxth	r3, r3
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8001b38:	b590      	push	{r4, r7, lr}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691c      	ldr	r4, [r3, #16]
 8001b48:	78fa      	ldrb	r2, [r7, #3]
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	2120      	movs	r1, #32
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	47a0      	blx	r4
 8001b52:	4603      	mov	r3, r0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd90      	pop	{r4, r7, pc}

08001b5c <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8001b5c:	b590      	push	{r4, r7, lr}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	460b      	mov	r3, r1
 8001b66:	607a      	str	r2, [r7, #4]
 8001b68:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	691c      	ldr	r4, [r3, #16]
 8001b6e:	7afa      	ldrb	r2, [r7, #11]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2117      	movs	r1, #23
 8001b74:	68f8      	ldr	r0, [r7, #12]
 8001b76:	47a0      	blx	r4
 8001b78:	4603      	mov	r3, r0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd90      	pop	{r4, r7, pc}

08001b82 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8001b8e:	1cfb      	adds	r3, r7, #3
 8001b90:	461a      	mov	r2, r3
 8001b92:	2101      	movs	r1, #1
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff ffe1 	bl	8001b5c <u8x8_byte_SendBytes>
 8001b9a:	4603      	mov	r3, r0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8001ba4:	b590      	push	{r4, r7, lr}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68dc      	ldr	r4, [r3, #12]
 8001bb4:	78fa      	ldrb	r2, [r7, #3]
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	2115      	movs	r1, #21
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	47a0      	blx	r4
 8001bbe:	4603      	mov	r3, r0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd90      	pop	{r4, r7, pc}

08001bc8 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8001bc8:	b590      	push	{r4, r7, lr}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68dc      	ldr	r4, [r3, #12]
 8001bd8:	78fa      	ldrb	r2, [r7, #3]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	2116      	movs	r1, #22
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	47a0      	blx	r4
 8001be2:	4603      	mov	r3, r0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd90      	pop	{r4, r7, pc}

08001bec <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8001bec:	b590      	push	{r4, r7, lr}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	607a      	str	r2, [r7, #4]
 8001bf8:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	68dc      	ldr	r4, [r3, #12]
 8001bfe:	7afa      	ldrb	r2, [r7, #11]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2117      	movs	r1, #23
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	47a0      	blx	r4
 8001c08:	4603      	mov	r3, r0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd90      	pop	{r4, r7, pc}

08001c12 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8001c12:	b590      	push	{r4, r7, lr}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68dc      	ldr	r4, [r3, #12]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	2200      	movs	r2, #0
 8001c22:	2118      	movs	r1, #24
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	47a0      	blx	r4
 8001c28:	4603      	mov	r3, r0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd90      	pop	{r4, r7, pc}

08001c32 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8001c32:	b590      	push	{r4, r7, lr}
 8001c34:	b083      	sub	sp, #12
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68dc      	ldr	r4, [r3, #12]
 8001c3e:	2300      	movs	r3, #0
 8001c40:	2200      	movs	r2, #0
 8001c42:	2119      	movs	r1, #25
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	47a0      	blx	r4
 8001c48:	4603      	mov	r3, r0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd90      	pop	{r4, r7, pc}

08001c52 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8001c52:	b590      	push	{r4, r7, lr}
 8001c54:	b085      	sub	sp, #20
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	73fb      	strb	r3, [r7, #15]
    data++;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	3301      	adds	r3, #1
 8001c66:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
 8001c6a:	2bfe      	cmp	r3, #254	@ 0xfe
 8001c6c:	d031      	beq.n	8001cd2 <u8x8_cad_SendSequence+0x80>
 8001c6e:	2bfe      	cmp	r3, #254	@ 0xfe
 8001c70:	dc3d      	bgt.n	8001cee <u8x8_cad_SendSequence+0x9c>
 8001c72:	2b19      	cmp	r3, #25
 8001c74:	dc3b      	bgt.n	8001cee <u8x8_cad_SendSequence+0x9c>
 8001c76:	2b18      	cmp	r3, #24
 8001c78:	da23      	bge.n	8001cc2 <u8x8_cad_SendSequence+0x70>
 8001c7a:	2b16      	cmp	r3, #22
 8001c7c:	dc02      	bgt.n	8001c84 <u8x8_cad_SendSequence+0x32>
 8001c7e:	2b15      	cmp	r3, #21
 8001c80:	da03      	bge.n	8001c8a <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8001c82:	e034      	b.n	8001cee <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8001c84:	2b17      	cmp	r3, #23
 8001c86:	d00e      	beq.n	8001ca6 <u8x8_cad_SendSequence+0x54>
	return;
 8001c88:	e031      	b.n	8001cee <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68dc      	ldr	r4, [r3, #12]
 8001c94:	7bba      	ldrb	r2, [r7, #14]
 8001c96:	7bf9      	ldrb	r1, [r7, #15]
 8001c98:	2300      	movs	r3, #0
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	47a0      	blx	r4
	  data++;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	603b      	str	r3, [r7, #0]
	  break;
 8001ca4:	e022      	b.n	8001cec <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8001cac:	f107 030e 	add.w	r3, r7, #14
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff ff99 	bl	8001bec <u8x8_cad_SendData>
	  data++;
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	603b      	str	r3, [r7, #0]
	  break;
 8001cc0:	e014      	b.n	8001cec <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68dc      	ldr	r4, [r3, #12]
 8001cc6:	7bf9      	ldrb	r1, [r7, #15]
 8001cc8:	2300      	movs	r3, #0
 8001cca:	2200      	movs	r2, #0
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	47a0      	blx	r4
	  break;
 8001cd0:	e00c      	b.n	8001cec <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8001cd8:	7bbb      	ldrb	r3, [r7, #14]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	2129      	movs	r1, #41	@ 0x29
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f9ee 	bl	80020c0 <u8x8_gpio_call>
	  data++;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	603b      	str	r3, [r7, #0]
	  break;
 8001cea:	bf00      	nop
    cmd = *data;
 8001cec:	e7b6      	b.n	8001c5c <u8x8_cad_SendSequence+0xa>
	return;
 8001cee:	bf00      	nop
    }
  }
}
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd90      	pop	{r4, r7, pc}
	...

08001cf8 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001cf8:	b590      	push	{r4, r7, lr}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	607b      	str	r3, [r7, #4]
 8001d02:	460b      	mov	r3, r1
 8001d04:	72fb      	strb	r3, [r7, #11]
 8001d06:	4613      	mov	r3, r2
 8001d08:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8001d0a:	7afb      	ldrb	r3, [r7, #11]
 8001d0c:	3b14      	subs	r3, #20
 8001d0e:	2b05      	cmp	r3, #5
 8001d10:	d82f      	bhi.n	8001d72 <u8x8_cad_001+0x7a>
 8001d12:	a201      	add	r2, pc, #4	@ (adr r2, 8001d18 <u8x8_cad_001+0x20>)
 8001d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d18:	08001d61 	.word	0x08001d61
 8001d1c:	08001d31 	.word	0x08001d31
 8001d20:	08001d45 	.word	0x08001d45
 8001d24:	08001d59 	.word	0x08001d59
 8001d28:	08001d61 	.word	0x08001d61
 8001d2c:	08001d61 	.word	0x08001d61
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8001d30:	2100      	movs	r1, #0
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f7ff ff00 	bl	8001b38 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8001d38:	7abb      	ldrb	r3, [r7, #10]
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	68f8      	ldr	r0, [r7, #12]
 8001d3e:	f7ff ff20 	bl	8001b82 <u8x8_byte_SendByte>
      break;
 8001d42:	e018      	b.n	8001d76 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8001d44:	2100      	movs	r1, #0
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f7ff fef6 	bl	8001b38 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8001d4c:	7abb      	ldrb	r3, [r7, #10]
 8001d4e:	4619      	mov	r1, r3
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f7ff ff16 	bl	8001b82 <u8x8_byte_SendByte>
      break;
 8001d56:	e00e      	b.n	8001d76 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8001d58:	2101      	movs	r1, #1
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f7ff feec 	bl	8001b38 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	691c      	ldr	r4, [r3, #16]
 8001d64:	7aba      	ldrb	r2, [r7, #10]
 8001d66:	7af9      	ldrb	r1, [r7, #11]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	47a0      	blx	r4
 8001d6e:	4603      	mov	r3, r0
 8001d70:	e002      	b.n	8001d78 <u8x8_cad_001+0x80>
    default:
      return 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	e000      	b.n	8001d78 <u8x8_cad_001+0x80>
  }
  return 1;
 8001d76:	2301      	movs	r3, #1
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd90      	pop	{r4, r7, pc}

08001d80 <u8x8_d_st7565_common>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	607b      	str	r3, [r7, #4]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	72fb      	strb	r3, [r7, #11]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8001d92:	7afb      	ldrb	r3, [r7, #11]
 8001d94:	2b0f      	cmp	r3, #15
 8001d96:	d006      	beq.n	8001da6 <u8x8_d_st7565_common+0x26>
 8001d98:	2b0f      	cmp	r3, #15
 8001d9a:	dc71      	bgt.n	8001e80 <u8x8_d_st7565_common+0x100>
 8001d9c:	2b0b      	cmp	r3, #11
 8001d9e:	d050      	beq.n	8001e42 <u8x8_d_st7565_common+0xc2>
 8001da0:	2b0e      	cmp	r3, #14
 8001da2:	d05b      	beq.n	8001e5c <u8x8_d_st7565_common+0xdc>
 8001da4:	e06c      	b.n	8001e80 <u8x8_d_st7565_common+0x100>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f7ff ff33 	bl	8001c12 <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	795b      	ldrb	r3, [r3, #5]
 8001db0:	75bb      	strb	r3, [r7, #22]
      x *= 8;
 8001db2:	7dbb      	ldrb	r3, [r7, #22]
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	75bb      	strb	r3, [r7, #22]
      x += u8x8->x_offset;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8001dbe:	7dbb      	ldrb	r3, [r7, #22]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8001dc4:	7dbb      	ldrb	r3, [r7, #22]
 8001dc6:	091b      	lsrs	r3, r3, #4
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	f043 0310 	orr.w	r3, r3, #16
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f7ff fee6 	bl	8001ba4 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8001dd8:	7dbb      	ldrb	r3, [r7, #22]
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	4619      	mov	r1, r3
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f7ff fede 	bl	8001ba4 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	799b      	ldrb	r3, [r3, #6]
 8001dec:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	4619      	mov	r1, r3
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f7ff fed5 	bl	8001ba4 <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	791b      	ldrb	r3, [r3, #4]
 8001dfe:	75fb      	strb	r3, [r7, #23]
      c *= 8;
 8001e00:	7dfb      	ldrb	r3, [r7, #23]
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	613b      	str	r3, [r7, #16]
      /* 
	The following if condition checks the hardware limits of the st7565 
	controller: It is not allowed to write beyond the display limits.
	This is in fact an issue within flip mode.
      */
      if ( c + x > 132u )
 8001e0c:	7dfa      	ldrb	r2, [r7, #23]
 8001e0e:	7dbb      	ldrb	r3, [r7, #22]
 8001e10:	4413      	add	r3, r2
 8001e12:	2b84      	cmp	r3, #132	@ 0x84
 8001e14:	d905      	bls.n	8001e22 <u8x8_d_st7565_common+0xa2>
      {
	c = 132u;
 8001e16:	2384      	movs	r3, #132	@ 0x84
 8001e18:	75fb      	strb	r3, [r7, #23]
	c -= x;
 8001e1a:	7dfa      	ldrb	r2, [r7, #23]
 8001e1c:	7dbb      	ldrb	r3, [r7, #22]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	75fb      	strb	r3, [r7, #23]
      }
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 8001e22:	7dfb      	ldrb	r3, [r7, #23]
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	4619      	mov	r1, r3
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	f7ff fedf 	bl	8001bec <u8x8_cad_SendData>
	arg_int--;
 8001e2e:	7abb      	ldrb	r3, [r7, #10]
 8001e30:	3b01      	subs	r3, #1
 8001e32:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8001e34:	7abb      	ldrb	r3, [r7, #10]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f3      	bne.n	8001e22 <u8x8_d_st7565_common+0xa2>
      
      u8x8_cad_EndTransfer(u8x8);
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f7ff fef9 	bl	8001c32 <u8x8_cad_EndTransfer>
      break;
 8001e40:	e020      	b.n	8001e84 <u8x8_d_st7565_common+0x104>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8001e42:	7abb      	ldrb	r3, [r7, #10]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d104      	bne.n	8001e52 <u8x8_d_st7565_common+0xd2>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
 8001e48:	4911      	ldr	r1, [pc, #68]	@ (8001e90 <u8x8_d_st7565_common+0x110>)
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f7ff ff01 	bl	8001c52 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
      break;
 8001e50:	e018      	b.n	8001e84 <u8x8_d_st7565_common+0x104>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
 8001e52:	4910      	ldr	r1, [pc, #64]	@ (8001e94 <u8x8_d_st7565_common+0x114>)
 8001e54:	68f8      	ldr	r0, [r7, #12]
 8001e56:	f7ff fefc 	bl	8001c52 <u8x8_cad_SendSequence>
      break;
 8001e5a:	e013      	b.n	8001e84 <u8x8_d_st7565_common+0x104>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f7ff fed8 	bl	8001c12 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8001e62:	2181      	movs	r1, #129	@ 0x81
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f7ff fe9d 	bl	8001ba4 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
 8001e6a:	7abb      	ldrb	r3, [r7, #10]
 8001e6c:	089b      	lsrs	r3, r3, #2
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	4619      	mov	r1, r3
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f7ff fea8 	bl	8001bc8 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f7ff feda 	bl	8001c32 <u8x8_cad_EndTransfer>
      break;
 8001e7e:	e001      	b.n	8001e84 <u8x8_d_st7565_common+0x104>
#endif
    default:
      return 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	e000      	b.n	8001e86 <u8x8_d_st7565_common+0x106>
  }
  return 1;
 8001e84:	2301      	movs	r3, #1
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	08004a78 	.word	0x08004a78
 8001e94:	08004a80 	.word	0x08004a80

08001e98 <u8x8_d_st7565_64128n>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_64128n(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	607b      	str	r3, [r7, #4]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	72fb      	strb	r3, [r7, #11]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 8001eaa:	7aba      	ldrb	r2, [r7, #10]
 8001eac:	7af9      	ldrb	r1, [r7, #11]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f7ff ff65 	bl	8001d80 <u8x8_d_st7565_common>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d131      	bne.n	8001f20 <u8x8_d_st7565_64128n+0x88>
  {
    /* msg not handled, then try here */
    switch(msg)
 8001ebc:	7afb      	ldrb	r3, [r7, #11]
 8001ebe:	2b0d      	cmp	r3, #13
 8001ec0:	d013      	beq.n	8001eea <u8x8_d_st7565_64128n+0x52>
 8001ec2:	2b0d      	cmp	r3, #13
 8001ec4:	dc2a      	bgt.n	8001f1c <u8x8_d_st7565_64128n+0x84>
 8001ec6:	2b09      	cmp	r3, #9
 8001ec8:	d002      	beq.n	8001ed0 <u8x8_d_st7565_64128n+0x38>
 8001eca:	2b0a      	cmp	r3, #10
 8001ecc:	d005      	beq.n	8001eda <u8x8_d_st7565_64128n+0x42>
 8001ece:	e025      	b.n	8001f1c <u8x8_d_st7565_64128n+0x84>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_64128n_display_info);
 8001ed0:	4916      	ldr	r1, [pc, #88]	@ (8001f2c <u8x8_d_st7565_64128n+0x94>)
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f000 f832 	bl	8001f3c <u8x8_d_helper_display_setup_memory>
	break;
 8001ed8:	e022      	b.n	8001f20 <u8x8_d_st7565_64128n+0x88>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f000 f842 	bl	8001f64 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_64128n_init_seq);
 8001ee0:	4913      	ldr	r1, [pc, #76]	@ (8001f30 <u8x8_d_st7565_64128n+0x98>)
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f7ff feb5 	bl	8001c52 <u8x8_cad_SendSequence>
	break;
 8001ee8:	e01a      	b.n	8001f20 <u8x8_d_st7565_64128n+0x88>
      case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
	if ( arg_int == 0 )
 8001eea:	7abb      	ldrb	r3, [r7, #10]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10a      	bne.n	8001f06 <u8x8_d_st7565_64128n+0x6e>
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
 8001ef0:	4910      	ldr	r1, [pc, #64]	@ (8001f34 <u8x8_d_st7565_64128n+0x9c>)
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f7ff fead 	bl	8001c52 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	7c9a      	ldrb	r2, [r3, #18]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	else
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
	}	
	break;
 8001f04:	e00c      	b.n	8001f20 <u8x8_d_st7565_64128n+0x88>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
 8001f06:	490c      	ldr	r1, [pc, #48]	@ (8001f38 <u8x8_d_st7565_64128n+0xa0>)
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f7ff fea2 	bl	8001c52 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	7cda      	ldrb	r2, [r3, #19]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	break;
 8001f1a:	e001      	b.n	8001f20 <u8x8_d_st7565_64128n+0x88>
      default:
	return 0;		/* msg unknown */
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	e000      	b.n	8001f22 <u8x8_d_st7565_64128n+0x8a>
    }
  }
  return 1;
 8001f20:	2301      	movs	r3, #1
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	08004ab8 	.word	0x08004ab8
 8001f30:	08004a98 	.word	0x08004a98
 8001f34:	08004a88 	.word	0x08004a88
 8001f38:	08004a90 	.word	0x08004a90

08001f3c <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	7c9a      	ldrb	r2, [r3, #18]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8001f64:	b590      	push	{r4, r7, lr}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	695c      	ldr	r4, [r3, #20]
 8001f70:	2300      	movs	r3, #0
 8001f72:	2200      	movs	r2, #0
 8001f74:	2128      	movs	r1, #40	@ 0x28
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68dc      	ldr	r4, [r3, #12]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	2200      	movs	r2, #0
 8001f82:	2114      	movs	r1, #20
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8001f88:	2201      	movs	r2, #1
 8001f8a:	214b      	movs	r1, #75	@ 0x4b
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f897 	bl	80020c0 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	791b      	ldrb	r3, [r3, #4]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	2129      	movs	r1, #41	@ 0x29
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f88f 	bl	80020c0 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	214b      	movs	r1, #75	@ 0x4b
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f88a 	bl	80020c0 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	791b      	ldrb	r3, [r3, #4]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	2129      	movs	r1, #41	@ 0x29
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f882 	bl	80020c0 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	214b      	movs	r1, #75	@ 0x4b
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f87d 	bl	80020c0 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	795b      	ldrb	r3, [r3, #5]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	2129      	movs	r1, #41	@ 0x29
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f875 	bl	80020c0 <u8x8_gpio_call>
}    
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd90      	pop	{r4, r7, pc}

08001fde <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8001fde:	b590      	push	{r4, r7, lr}
 8001fe0:	b085      	sub	sp, #20
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
 8001fe6:	4608      	mov	r0, r1
 8001fe8:	4611      	mov	r1, r2
 8001fea:	461a      	mov	r2, r3
 8001fec:	4603      	mov	r3, r0
 8001fee:	70fb      	strb	r3, [r7, #3]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	70bb      	strb	r3, [r7, #2]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8001ff8:	78fb      	ldrb	r3, [r7, #3]
 8001ffa:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8001ffc:	78bb      	ldrb	r3, [r7, #2]
 8001ffe:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8002000:	787b      	ldrb	r3, [r7, #1]
 8002002:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8002004:	6a3b      	ldr	r3, [r7, #32]
 8002006:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689c      	ldr	r4, [r3, #8]
 800200c:	f107 0308 	add.w	r3, r7, #8
 8002010:	2201      	movs	r2, #1
 8002012:	210f      	movs	r1, #15
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	47a0      	blx	r4
 8002018:	4603      	mov	r3, r0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	bd90      	pop	{r4, r7, pc}

08002022 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8002022:	b590      	push	{r4, r7, lr}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689c      	ldr	r4, [r3, #8]
 800202e:	2300      	movs	r3, #0
 8002030:	2200      	movs	r2, #0
 8002032:	2109      	movs	r1, #9
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	47a0      	blx	r4
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	bd90      	pop	{r4, r7, pc}

08002040 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8002040:	b590      	push	{r4, r7, lr}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689c      	ldr	r4, [r3, #8]
 800204c:	2300      	movs	r3, #0
 800204e:	2200      	movs	r2, #0
 8002050:	210a      	movs	r1, #10
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	bd90      	pop	{r4, r7, pc}

0800205e <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800205e:	b590      	push	{r4, r7, lr}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
 8002066:	460b      	mov	r3, r1
 8002068:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689c      	ldr	r4, [r3, #8]
 800206e:	78fa      	ldrb	r2, [r7, #3]
 8002070:	2300      	movs	r3, #0
 8002072:	210b      	movs	r1, #11
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	47a0      	blx	r4
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	bd90      	pop	{r4, r7, pc}

08002080 <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 8002080:	b590      	push	{r4, r7, lr}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689c      	ldr	r4, [r3, #8]
 8002090:	78fa      	ldrb	r2, [r7, #3]
 8002092:	2300      	movs	r3, #0
 8002094:	210e      	movs	r1, #14
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	47a0      	blx	r4
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd90      	pop	{r4, r7, pc}

080020a2 <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80020a2:	b590      	push	{r4, r7, lr}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689c      	ldr	r4, [r3, #8]
 80020ae:	2300      	movs	r3, #0
 80020b0:	2200      	movs	r2, #0
 80020b2:	2110      	movs	r1, #16
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	47a0      	blx	r4
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd90      	pop	{r4, r7, pc}

080020c0 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80020c0:	b590      	push	{r4, r7, lr}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	70fb      	strb	r3, [r7, #3]
 80020cc:	4613      	mov	r3, r2
 80020ce:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	695c      	ldr	r4, [r3, #20]
 80020d4:	78ba      	ldrb	r2, [r7, #2]
 80020d6:	78f9      	ldrb	r1, [r7, #3]
 80020d8:	2300      	movs	r3, #0
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	47a0      	blx	r4
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd90      	pop	{r4, r7, pc}

080020e6 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b085      	sub	sp, #20
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	60f8      	str	r0, [r7, #12]
 80020ee:	607b      	str	r3, [r7, #4]
 80020f0:	460b      	mov	r3, r1
 80020f2:	72fb      	strb	r3, [r7, #11]
 80020f4:	4613      	mov	r3, r2
 80020f6:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a11      	ldr	r2, [pc, #68]	@ (8002160 <u8x8_SetupDefaults+0x58>)
 800211a:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a10      	ldr	r2, [pc, #64]	@ (8002160 <u8x8_SetupDefaults+0x58>)
 8002120:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a0e      	ldr	r2, [pc, #56]	@ (8002160 <u8x8_SetupDefaults+0x58>)
 8002126:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a0d      	ldr	r2, [pc, #52]	@ (8002160 <u8x8_SetupDefaults+0x58>)
 800212c:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	22ff      	movs	r2, #255	@ 0xff
 8002148:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	22ff      	movs	r2, #255	@ 0xff
 8002150:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	080020e7 	.word	0x080020e7

08002164 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
 8002170:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f7ff ffc8 	bl	8002108 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f7ff ff46 	bl	8002022 <u8x8_SetupMemory>
}
 8002196:	bf00      	nop
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <u8x8_stm32_gpio_and_delay>:
 */
static uint8_t u8x8_stm32_gpio_and_delay(u8x8_t * const u8x8,
                                           uint8_t msg,
                                           uint8_t arg_int,
                                           void * const arg_ptr)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	607b      	str	r3, [r7, #4]
 80021aa:	460b      	mov	r3, r1
 80021ac:	72fb      	strb	r3, [r7, #11]
 80021ae:	4613      	mov	r3, r2
 80021b0:	72bb      	strb	r3, [r7, #10]
    /* Suppress unused parameter warnings */
    (void)u8x8;
    (void)arg_ptr;

    switch (msg)
 80021b2:	7afb      	ldrb	r3, [r7, #11]
 80021b4:	2b4b      	cmp	r3, #75	@ 0x4b
 80021b6:	d01a      	beq.n	80021ee <u8x8_stm32_gpio_and_delay+0x4e>
 80021b8:	2b4b      	cmp	r3, #75	@ 0x4b
 80021ba:	dc1f      	bgt.n	80021fc <u8x8_stm32_gpio_and_delay+0x5c>
 80021bc:	2b4a      	cmp	r3, #74	@ 0x4a
 80021be:	d00f      	beq.n	80021e0 <u8x8_stm32_gpio_and_delay+0x40>
 80021c0:	2b4a      	cmp	r3, #74	@ 0x4a
 80021c2:	dc1b      	bgt.n	80021fc <u8x8_stm32_gpio_and_delay+0x5c>
 80021c4:	2b28      	cmp	r3, #40	@ 0x28
 80021c6:	d002      	beq.n	80021ce <u8x8_stm32_gpio_and_delay+0x2e>
 80021c8:	2b29      	cmp	r3, #41	@ 0x29
 80021ca:	d004      	beq.n	80021d6 <u8x8_stm32_gpio_and_delay+0x36>
        case U8X8_MSG_GPIO_RESET:
            HAL_GPIO_WritePin(DISPLAY_IO_1_GPIO_Port, DISPLAY_IO_1_Pin, (GPIO_PinState)arg_int);
            break;
        default:
            /* No action */
            break;
 80021cc:	e016      	b.n	80021fc <u8x8_stm32_gpio_and_delay+0x5c>
            HAL_Delay(DISPLAY_UPDATE_DELAY_U32);
 80021ce:	2002      	movs	r0, #2
 80021d0:	f000 fc36 	bl	8002a40 <HAL_Delay>
            break;
 80021d4:	e013      	b.n	80021fe <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_Delay(arg_int);
 80021d6:	7abb      	ldrb	r3, [r7, #10]
 80021d8:	4618      	mov	r0, r3
 80021da:	f000 fc31 	bl	8002a40 <HAL_Delay>
            break;
 80021de:	e00e      	b.n	80021fe <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_GPIO_WritePin(DISPLAY_IO_2_GPIO_Port, DISPLAY_IO_2_Pin, (GPIO_PinState)arg_int);
 80021e0:	7abb      	ldrb	r3, [r7, #10]
 80021e2:	461a      	mov	r2, r3
 80021e4:	2108      	movs	r1, #8
 80021e6:	4808      	ldr	r0, [pc, #32]	@ (8002208 <u8x8_stm32_gpio_and_delay+0x68>)
 80021e8:	f000 fee0 	bl	8002fac <HAL_GPIO_WritePin>
            break;
 80021ec:	e007      	b.n	80021fe <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_GPIO_WritePin(DISPLAY_IO_1_GPIO_Port, DISPLAY_IO_1_Pin, (GPIO_PinState)arg_int);
 80021ee:	7abb      	ldrb	r3, [r7, #10]
 80021f0:	461a      	mov	r2, r3
 80021f2:	2104      	movs	r1, #4
 80021f4:	4804      	ldr	r0, [pc, #16]	@ (8002208 <u8x8_stm32_gpio_and_delay+0x68>)
 80021f6:	f000 fed9 	bl	8002fac <HAL_GPIO_WritePin>
            break;
 80021fa:	e000      	b.n	80021fe <u8x8_stm32_gpio_and_delay+0x5e>
            break;
 80021fc:	bf00      	nop
    }
    return 1U;
 80021fe:	2301      	movs	r3, #1
}
 8002200:	4618      	mov	r0, r3
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40021800 	.word	0x40021800

0800220c <u8x8_byte_4wire_hw_spi>:
 */
static uint8_t u8x8_byte_4wire_hw_spi(u8x8_t * const u8x8,
                                      uint8_t msg,
                                      uint8_t arg_int,
                                      void * const arg_ptr)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	607b      	str	r3, [r7, #4]
 8002216:	460b      	mov	r3, r1
 8002218:	72fb      	strb	r3, [r7, #11]
 800221a:	4613      	mov	r3, r2
 800221c:	72bb      	strb	r3, [r7, #10]
    uint8_t retVal = 1U;
 800221e:	2301      	movs	r3, #1
 8002220:	75fb      	strb	r3, [r7, #23]

    switch (msg)
 8002222:	7afb      	ldrb	r3, [r7, #11]
 8002224:	3b14      	subs	r3, #20
 8002226:	2b0c      	cmp	r3, #12
 8002228:	d83e      	bhi.n	80022a8 <u8x8_byte_4wire_hw_spi+0x9c>
 800222a:	a201      	add	r2, pc, #4	@ (adr r2, 8002230 <u8x8_byte_4wire_hw_spi+0x24>)
 800222c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002230:	080022af 	.word	0x080022af
 8002234:	080022a9 	.word	0x080022a9
 8002238:	080022a9 	.word	0x080022a9
 800223c:	08002265 	.word	0x08002265
 8002240:	08002285 	.word	0x08002285
 8002244:	08002297 	.word	0x08002297
 8002248:	080022a9 	.word	0x080022a9
 800224c:	080022a9 	.word	0x080022a9
 8002250:	080022a9 	.word	0x080022a9
 8002254:	080022a9 	.word	0x080022a9
 8002258:	080022a9 	.word	0x080022a9
 800225c:	080022a9 	.word	0x080022a9
 8002260:	08002277 	.word	0x08002277
    {
        case U8X8_MSG_BYTE_SEND:
            (void)HAL_SPI_Transmit(&hspi3, (uint8_t *)arg_ptr, arg_int, SPI_TIMEOUT_U32);
 8002264:	7abb      	ldrb	r3, [r7, #10]
 8002266:	b29a      	uxth	r2, r3
 8002268:	f242 7310 	movw	r3, #10000	@ 0x2710
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	4813      	ldr	r0, [pc, #76]	@ (80022bc <u8x8_byte_4wire_hw_spi+0xb0>)
 8002270:	f001 fb63 	bl	800393a <HAL_SPI_Transmit>
            break;
 8002274:	e01c      	b.n	80022b0 <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_INIT:
            break;
        case U8X8_MSG_BYTE_SET_DC:
            HAL_GPIO_WritePin(DISPLAY_IO_2_GPIO_Port, DISPLAY_IO_2_Pin, (GPIO_PinState)arg_int);
 8002276:	7abb      	ldrb	r3, [r7, #10]
 8002278:	461a      	mov	r2, r3
 800227a:	2108      	movs	r1, #8
 800227c:	4810      	ldr	r0, [pc, #64]	@ (80022c0 <u8x8_byte_4wire_hw_spi+0xb4>)
 800227e:	f000 fe95 	bl	8002fac <HAL_GPIO_WritePin>
            break;
 8002282:	e015      	b.n	80022b0 <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_START_TRANSFER:
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, u8x8->display_info->chip_enable_level);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	2104      	movs	r1, #4
 800228e:	480d      	ldr	r0, [pc, #52]	@ (80022c4 <u8x8_byte_4wire_hw_spi+0xb8>)
 8002290:	f000 fe8c 	bl	8002fac <HAL_GPIO_WritePin>
            break;
 8002294:	e00c      	b.n	80022b0 <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_END_TRANSFER:
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, u8x8->display_info->chip_disable_level);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	785b      	ldrb	r3, [r3, #1]
 800229c:	461a      	mov	r2, r3
 800229e:	2104      	movs	r1, #4
 80022a0:	4808      	ldr	r0, [pc, #32]	@ (80022c4 <u8x8_byte_4wire_hw_spi+0xb8>)
 80022a2:	f000 fe83 	bl	8002fac <HAL_GPIO_WritePin>
            break;
 80022a6:	e003      	b.n	80022b0 <u8x8_byte_4wire_hw_spi+0xa4>
        default:
            retVal = 0U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	75fb      	strb	r3, [r7, #23]
            break;
 80022ac:	e000      	b.n	80022b0 <u8x8_byte_4wire_hw_spi+0xa4>
            break;
 80022ae:	bf00      	nop
    }
    return retVal;
 80022b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	200008bc 	.word	0x200008bc
 80022c0:	40021800 	.word	0x40021800
 80022c4:	40020c00 	.word	0x40020c00

080022c8 <Display_Init>:

/**
 * @brief Initializes the display hardware and u8g2 library.
 */
void Display_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
    /* Turn on the backlight */
    HAL_GPIO_WritePin(BACKLIGHT_1_GPIO_Port, BACKLIGHT_1_Pin, GPIO_PIN_SET);
 80022cc:	2201      	movs	r2, #1
 80022ce:	2110      	movs	r1, #16
 80022d0:	480c      	ldr	r0, [pc, #48]	@ (8002304 <Display_Init+0x3c>)
 80022d2:	f000 fe6b 	bl	8002fac <HAL_GPIO_WritePin>

    /* Setup u8g2 for the ST7565 display.
       Adjust the setup function if your display type differs. */
    u8g2_Setup_st7565_64128n_f(&u8g2, U8G2_R2, u8x8_byte_4wire_hw_spi, u8x8_stm32_gpio_and_delay);
 80022d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002308 <Display_Init+0x40>)
 80022d8:	4a0c      	ldr	r2, [pc, #48]	@ (800230c <Display_Init+0x44>)
 80022da:	490d      	ldr	r1, [pc, #52]	@ (8002310 <Display_Init+0x48>)
 80022dc:	480d      	ldr	r0, [pc, #52]	@ (8002314 <Display_Init+0x4c>)
 80022de:	f7fe faa1 	bl	8000824 <u8g2_Setup_st7565_64128n_f>
    u8g2_InitDisplay(&u8g2);
 80022e2:	480c      	ldr	r0, [pc, #48]	@ (8002314 <Display_Init+0x4c>)
 80022e4:	f7ff feac 	bl	8002040 <u8x8_InitDisplay>
    u8g2_SetPowerSave(&u8g2, 0);
 80022e8:	2100      	movs	r1, #0
 80022ea:	480a      	ldr	r0, [pc, #40]	@ (8002314 <Display_Init+0x4c>)
 80022ec:	f7ff feb7 	bl	800205e <u8x8_SetPowerSave>
    u8g2_ClearDisplay(&u8g2);
 80022f0:	4808      	ldr	r0, [pc, #32]	@ (8002314 <Display_Init+0x4c>)
 80022f2:	f7fe fa71 	bl	80007d8 <u8g2_ClearDisplay>
    u8g2_SetContrast(&u8g2, CONTRAST_VALUE_U8);
 80022f6:	2178      	movs	r1, #120	@ 0x78
 80022f8:	4806      	ldr	r0, [pc, #24]	@ (8002314 <Display_Init+0x4c>)
 80022fa:	f7ff fec1 	bl	8002080 <u8x8_SetContrast>
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40021800 	.word	0x40021800
 8002308:	080021a1 	.word	0x080021a1
 800230c:	0800220d 	.word	0x0800220d
 8002310:	08004a6c 	.word	0x08004a6c
 8002314:	20000828 	.word	0x20000828

08002318 <Display_MainTitlePage>:
 * @brief Displays the main title page.
 *
 * This function draws the main title page with a logo and text.
 */
void Display_MainTitlePage(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af02      	add	r7, sp, #8
    do
    {
        /* Begin a new page */
        u8g2_FirstPage(&u8g2);
 800231e:	481f      	ldr	r0, [pc, #124]	@ (800239c <Display_MainTitlePage+0x84>)
 8002320:	f7fe fa18 	bl	8000754 <u8g2_FirstPage>
        do
        {
            /* Draw the logo image */
            u8g2_DrawXBM(&u8g2, 0, 0, 128, 64, logo);
 8002324:	4b1e      	ldr	r3, [pc, #120]	@ (80023a0 <Display_MainTitlePage+0x88>)
 8002326:	9301      	str	r3, [sp, #4]
 8002328:	2340      	movs	r3, #64	@ 0x40
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	2380      	movs	r3, #128	@ 0x80
 800232e:	2200      	movs	r2, #0
 8002330:	2100      	movs	r1, #0
 8002332:	481a      	ldr	r0, [pc, #104]	@ (800239c <Display_MainTitlePage+0x84>)
 8002334:	f7fe f940 	bl	80005b8 <u8g2_DrawXBM>
        }
        while (u8g2_NextPage(&u8g2) != 0U);
 8002338:	4818      	ldr	r0, [pc, #96]	@ (800239c <Display_MainTitlePage+0x84>)
 800233a:	f7fe fa1f 	bl	800077c <u8g2_NextPage>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1ef      	bne.n	8002324 <Display_MainTitlePage+0xc>

        HAL_Delay(PAGE_DELAY_U32);
 8002344:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002348:	f000 fb7a 	bl	8002a40 <HAL_Delay>

        /* Clear the buffer and draw title text */
        u8g2_ClearBuffer(&u8g2);
 800234c:	4813      	ldr	r0, [pc, #76]	@ (800239c <Display_MainTitlePage+0x84>)
 800234e:	f7fe f976 	bl	800063e <u8g2_ClearBuffer>
        u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 8002352:	4914      	ldr	r1, [pc, #80]	@ (80023a4 <Display_MainTitlePage+0x8c>)
 8002354:	4811      	ldr	r0, [pc, #68]	@ (800239c <Display_MainTitlePage+0x84>)
 8002356:	f7ff f815 	bl	8001384 <u8g2_SetFont>
        u8g2_DrawStr(&u8g2, 42, 16, "VEGA");
 800235a:	4b13      	ldr	r3, [pc, #76]	@ (80023a8 <Display_MainTitlePage+0x90>)
 800235c:	2210      	movs	r2, #16
 800235e:	212a      	movs	r1, #42	@ 0x2a
 8002360:	480e      	ldr	r0, [pc, #56]	@ (800239c <Display_MainTitlePage+0x84>)
 8002362:	f7fe ff6d 	bl	8001240 <u8g2_DrawStr>
        u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 8002366:	490f      	ldr	r1, [pc, #60]	@ (80023a4 <Display_MainTitlePage+0x8c>)
 8002368:	480c      	ldr	r0, [pc, #48]	@ (800239c <Display_MainTitlePage+0x84>)
 800236a:	f7ff f80b 	bl	8001384 <u8g2_SetFont>
        u8g2_DrawStr(&u8g2, 6, 33, "INNOVATIONS");
 800236e:	4b0f      	ldr	r3, [pc, #60]	@ (80023ac <Display_MainTitlePage+0x94>)
 8002370:	2221      	movs	r2, #33	@ 0x21
 8002372:	2106      	movs	r1, #6
 8002374:	4809      	ldr	r0, [pc, #36]	@ (800239c <Display_MainTitlePage+0x84>)
 8002376:	f7fe ff63 	bl	8001240 <u8g2_DrawStr>
        HAL_Delay(TEXT_DELAY_U32);
 800237a:	200a      	movs	r0, #10
 800237c:	f000 fb60 	bl	8002a40 <HAL_Delay>
    }
    while (u8g2_NextPage(&u8g2) != 0U);
 8002380:	4806      	ldr	r0, [pc, #24]	@ (800239c <Display_MainTitlePage+0x84>)
 8002382:	f7fe f9fb 	bl	800077c <u8g2_NextPage>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1c8      	bne.n	800231e <Display_MainTitlePage+0x6>

    HAL_Delay(FINAL_PAGE_DELAY_U32);
 800238c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002390:	f000 fb56 	bl	8002a40 <HAL_Delay>
}
 8002394:	bf00      	nop
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000828 	.word	0x20000828
 80023a0:	20000000 	.word	0x20000000
 80023a4:	08003e14 	.word	0x08003e14
 80023a8:	08003dec 	.word	0x08003dec
 80023ac:	08003df4 	.word	0x08003df4

080023b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023b4:	f000 fad2 	bl	800295c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023b8:	f000 f854 	bl	8002464 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023bc:	f000 f8e8 	bl	8002590 <MX_GPIO_Init>
  MX_SPI3_Init();
 80023c0:	f000 f8b0 	bl	8002524 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize the display module */
  Display_Init();
 80023c4:	f7ff ff80 	bl	80022c8 <Display_Init>

  /* Display the main title page */
  Display_MainTitlePage();
 80023c8:	f7ff ffa6 	bl	8002318 <Display_MainTitlePage>

    /* USER CODE BEGIN 3 */

		////////////////////////////////////////////////

		  HAL_GPIO_WritePin(GPIOH, LED_01_Pin|LED_02_Pin, GPIO_PIN_RESET);
 80023cc:	2200      	movs	r2, #0
 80023ce:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80023d2:	481f      	ldr	r0, [pc, #124]	@ (8002450 <main+0xa0>)
 80023d4:	f000 fdea 	bl	8002fac <HAL_GPIO_WritePin>

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(GPIOG, LED_09_Pin|LED_04_Pin|LED_08_Pin, GPIO_PIN_RESET);
 80023d8:	2200      	movs	r2, #0
 80023da:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80023de:	481d      	ldr	r0, [pc, #116]	@ (8002454 <main+0xa4>)
 80023e0:	f000 fde4 	bl	8002fac <HAL_GPIO_WritePin>

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(GPIOB, LED_03_Pin|LED_07_Pin, GPIO_PIN_RESET);
 80023e4:	2200      	movs	r2, #0
 80023e6:	2118      	movs	r1, #24
 80023e8:	481b      	ldr	r0, [pc, #108]	@ (8002458 <main+0xa8>)
 80023ea:	f000 fddf 	bl	8002fac <HAL_GPIO_WritePin>

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(GPIOE, LED_06_Pin|LED_05_Pin, GPIO_PIN_RESET);
 80023ee:	2200      	movs	r2, #0
 80023f0:	2103      	movs	r1, #3
 80023f2:	481a      	ldr	r0, [pc, #104]	@ (800245c <main+0xac>)
 80023f4:	f000 fdda 	bl	8002fac <HAL_GPIO_WritePin>

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(GPIOI, LED_DC_Y_Pin|LED_DC_G_Pin|LED_PC_Y_Pin|LED_PC_G_Pin, GPIO_PIN_RESET);
 80023f8:	2200      	movs	r2, #0
 80023fa:	21f0      	movs	r1, #240	@ 0xf0
 80023fc:	4818      	ldr	r0, [pc, #96]	@ (8002460 <main+0xb0>)
 80023fe:	f000 fdd5 	bl	8002fac <HAL_GPIO_WritePin>

		  HAL_Delay(500);
 8002402:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002406:	f000 fb1b 	bl	8002a40 <HAL_Delay>

		  Display_MainTitlePage();
 800240a:	f7ff ff85 	bl	8002318 <Display_MainTitlePage>

		  HAL_GPIO_WritePin(GPIOH, LED_01_Pin|LED_02_Pin, GPIO_PIN_SET);
 800240e:	2201      	movs	r2, #1
 8002410:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8002414:	480e      	ldr	r0, [pc, #56]	@ (8002450 <main+0xa0>)
 8002416:	f000 fdc9 	bl	8002fac <HAL_GPIO_WritePin>

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(GPIOG, LED_09_Pin|LED_04_Pin|LED_08_Pin, GPIO_PIN_SET);
 800241a:	2201      	movs	r2, #1
 800241c:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8002420:	480c      	ldr	r0, [pc, #48]	@ (8002454 <main+0xa4>)
 8002422:	f000 fdc3 	bl	8002fac <HAL_GPIO_WritePin>

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(GPIOB, LED_03_Pin|LED_07_Pin, GPIO_PIN_SET);
 8002426:	2201      	movs	r2, #1
 8002428:	2118      	movs	r1, #24
 800242a:	480b      	ldr	r0, [pc, #44]	@ (8002458 <main+0xa8>)
 800242c:	f000 fdbe 	bl	8002fac <HAL_GPIO_WritePin>

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(GPIOE, LED_06_Pin|LED_05_Pin, GPIO_PIN_SET);
 8002430:	2201      	movs	r2, #1
 8002432:	2103      	movs	r1, #3
 8002434:	4809      	ldr	r0, [pc, #36]	@ (800245c <main+0xac>)
 8002436:	f000 fdb9 	bl	8002fac <HAL_GPIO_WritePin>

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(GPIOI, LED_DC_Y_Pin|LED_DC_G_Pin|LED_PC_Y_Pin|LED_PC_G_Pin, GPIO_PIN_SET);
 800243a:	2201      	movs	r2, #1
 800243c:	21f0      	movs	r1, #240	@ 0xf0
 800243e:	4808      	ldr	r0, [pc, #32]	@ (8002460 <main+0xb0>)
 8002440:	f000 fdb4 	bl	8002fac <HAL_GPIO_WritePin>

		  HAL_Delay(500);
 8002444:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002448:	f000 fafa 	bl	8002a40 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOH, LED_01_Pin|LED_02_Pin, GPIO_PIN_RESET);
 800244c:	bf00      	nop
 800244e:	e7bd      	b.n	80023cc <main+0x1c>
 8002450:	40021c00 	.word	0x40021c00
 8002454:	40021800 	.word	0x40021800
 8002458:	40020400 	.word	0x40020400
 800245c:	40021000 	.word	0x40021000
 8002460:	40022000 	.word	0x40022000

08002464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b094      	sub	sp, #80	@ 0x50
 8002468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800246a:	f107 0320 	add.w	r3, r7, #32
 800246e:	2230      	movs	r2, #48	@ 0x30
 8002470:	2100      	movs	r1, #0
 8002472:	4618      	mov	r0, r3
 8002474:	f001 fc82 	bl	8003d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002478:	f107 030c 	add.w	r3, r7, #12
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002488:	2300      	movs	r3, #0
 800248a:	60bb      	str	r3, [r7, #8]
 800248c:	4b23      	ldr	r3, [pc, #140]	@ (800251c <SystemClock_Config+0xb8>)
 800248e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002490:	4a22      	ldr	r2, [pc, #136]	@ (800251c <SystemClock_Config+0xb8>)
 8002492:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002496:	6413      	str	r3, [r2, #64]	@ 0x40
 8002498:	4b20      	ldr	r3, [pc, #128]	@ (800251c <SystemClock_Config+0xb8>)
 800249a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80024a4:	2300      	movs	r3, #0
 80024a6:	607b      	str	r3, [r7, #4]
 80024a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002520 <SystemClock_Config+0xbc>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80024b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002520 <SystemClock_Config+0xbc>)
 80024b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024b6:	6013      	str	r3, [r2, #0]
 80024b8:	4b19      	ldr	r3, [pc, #100]	@ (8002520 <SystemClock_Config+0xbc>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80024c0:	607b      	str	r3, [r7, #4]
 80024c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024c4:	2302      	movs	r3, #2
 80024c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024c8:	2301      	movs	r3, #1
 80024ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024cc:	2310      	movs	r3, #16
 80024ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80024d0:	2300      	movs	r3, #0
 80024d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024d4:	f107 0320 	add.w	r3, r7, #32
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 fd81 	bl	8002fe0 <HAL_RCC_OscConfig>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80024e4:	f000 f958 	bl	8002798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024e8:	230f      	movs	r3, #15
 80024ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80024ec:	2300      	movs	r3, #0
 80024ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024f4:	2300      	movs	r3, #0
 80024f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024f8:	2300      	movs	r3, #0
 80024fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80024fc:	f107 030c 	add.w	r3, r7, #12
 8002500:	2100      	movs	r1, #0
 8002502:	4618      	mov	r0, r3
 8002504:	f000 ffe4 	bl	80034d0 <HAL_RCC_ClockConfig>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800250e:	f000 f943 	bl	8002798 <Error_Handler>
  }
}
 8002512:	bf00      	nop
 8002514:	3750      	adds	r7, #80	@ 0x50
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40023800 	.word	0x40023800
 8002520:	40007000 	.word	0x40007000

08002524 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002528:	4b17      	ldr	r3, [pc, #92]	@ (8002588 <MX_SPI3_Init+0x64>)
 800252a:	4a18      	ldr	r2, [pc, #96]	@ (800258c <MX_SPI3_Init+0x68>)
 800252c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800252e:	4b16      	ldr	r3, [pc, #88]	@ (8002588 <MX_SPI3_Init+0x64>)
 8002530:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002534:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002536:	4b14      	ldr	r3, [pc, #80]	@ (8002588 <MX_SPI3_Init+0x64>)
 8002538:	2200      	movs	r2, #0
 800253a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800253c:	4b12      	ldr	r3, [pc, #72]	@ (8002588 <MX_SPI3_Init+0x64>)
 800253e:	2200      	movs	r2, #0
 8002540:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002542:	4b11      	ldr	r3, [pc, #68]	@ (8002588 <MX_SPI3_Init+0x64>)
 8002544:	2200      	movs	r2, #0
 8002546:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002548:	4b0f      	ldr	r3, [pc, #60]	@ (8002588 <MX_SPI3_Init+0x64>)
 800254a:	2200      	movs	r2, #0
 800254c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800254e:	4b0e      	ldr	r3, [pc, #56]	@ (8002588 <MX_SPI3_Init+0x64>)
 8002550:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002554:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002556:	4b0c      	ldr	r3, [pc, #48]	@ (8002588 <MX_SPI3_Init+0x64>)
 8002558:	2218      	movs	r2, #24
 800255a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800255c:	4b0a      	ldr	r3, [pc, #40]	@ (8002588 <MX_SPI3_Init+0x64>)
 800255e:	2200      	movs	r2, #0
 8002560:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002562:	4b09      	ldr	r3, [pc, #36]	@ (8002588 <MX_SPI3_Init+0x64>)
 8002564:	2200      	movs	r2, #0
 8002566:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002568:	4b07      	ldr	r3, [pc, #28]	@ (8002588 <MX_SPI3_Init+0x64>)
 800256a:	2200      	movs	r2, #0
 800256c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800256e:	4b06      	ldr	r3, [pc, #24]	@ (8002588 <MX_SPI3_Init+0x64>)
 8002570:	220a      	movs	r2, #10
 8002572:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002574:	4804      	ldr	r0, [pc, #16]	@ (8002588 <MX_SPI3_Init+0x64>)
 8002576:	f001 f957 	bl	8003828 <HAL_SPI_Init>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002580:	f000 f90a 	bl	8002798 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002584:	bf00      	nop
 8002586:	bd80      	pop	{r7, pc}
 8002588:	200008bc 	.word	0x200008bc
 800258c:	40003c00 	.word	0x40003c00

08002590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b08e      	sub	sp, #56	@ 0x38
 8002594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002596:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	605a      	str	r2, [r3, #4]
 80025a0:	609a      	str	r2, [r3, #8]
 80025a2:	60da      	str	r2, [r3, #12]
 80025a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	623b      	str	r3, [r7, #32]
 80025aa:	4b74      	ldr	r3, [pc, #464]	@ (800277c <MX_GPIO_Init+0x1ec>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ae:	4a73      	ldr	r2, [pc, #460]	@ (800277c <MX_GPIO_Init+0x1ec>)
 80025b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025b6:	4b71      	ldr	r3, [pc, #452]	@ (800277c <MX_GPIO_Init+0x1ec>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025be:	623b      	str	r3, [r7, #32]
 80025c0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	61fb      	str	r3, [r7, #28]
 80025c6:	4b6d      	ldr	r3, [pc, #436]	@ (800277c <MX_GPIO_Init+0x1ec>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ca:	4a6c      	ldr	r2, [pc, #432]	@ (800277c <MX_GPIO_Init+0x1ec>)
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025d2:	4b6a      	ldr	r3, [pc, #424]	@ (800277c <MX_GPIO_Init+0x1ec>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	61fb      	str	r3, [r7, #28]
 80025dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	61bb      	str	r3, [r7, #24]
 80025e2:	4b66      	ldr	r3, [pc, #408]	@ (800277c <MX_GPIO_Init+0x1ec>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e6:	4a65      	ldr	r2, [pc, #404]	@ (800277c <MX_GPIO_Init+0x1ec>)
 80025e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ee:	4b63      	ldr	r3, [pc, #396]	@ (800277c <MX_GPIO_Init+0x1ec>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025f6:	61bb      	str	r3, [r7, #24]
 80025f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	4b5f      	ldr	r3, [pc, #380]	@ (800277c <MX_GPIO_Init+0x1ec>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002602:	4a5e      	ldr	r2, [pc, #376]	@ (800277c <MX_GPIO_Init+0x1ec>)
 8002604:	f043 0304 	orr.w	r3, r3, #4
 8002608:	6313      	str	r3, [r2, #48]	@ 0x30
 800260a:	4b5c      	ldr	r3, [pc, #368]	@ (800277c <MX_GPIO_Init+0x1ec>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	4b58      	ldr	r3, [pc, #352]	@ (800277c <MX_GPIO_Init+0x1ec>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261e:	4a57      	ldr	r2, [pc, #348]	@ (800277c <MX_GPIO_Init+0x1ec>)
 8002620:	f043 0308 	orr.w	r3, r3, #8
 8002624:	6313      	str	r3, [r2, #48]	@ 0x30
 8002626:	4b55      	ldr	r3, [pc, #340]	@ (800277c <MX_GPIO_Init+0x1ec>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	4b51      	ldr	r3, [pc, #324]	@ (800277c <MX_GPIO_Init+0x1ec>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263a:	4a50      	ldr	r2, [pc, #320]	@ (800277c <MX_GPIO_Init+0x1ec>)
 800263c:	f043 0302 	orr.w	r3, r3, #2
 8002640:	6313      	str	r3, [r2, #48]	@ 0x30
 8002642:	4b4e      	ldr	r3, [pc, #312]	@ (800277c <MX_GPIO_Init+0x1ec>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	60bb      	str	r3, [r7, #8]
 8002652:	4b4a      	ldr	r3, [pc, #296]	@ (800277c <MX_GPIO_Init+0x1ec>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002656:	4a49      	ldr	r2, [pc, #292]	@ (800277c <MX_GPIO_Init+0x1ec>)
 8002658:	f043 0310 	orr.w	r3, r3, #16
 800265c:	6313      	str	r3, [r2, #48]	@ 0x30
 800265e:	4b47      	ldr	r3, [pc, #284]	@ (800277c <MX_GPIO_Init+0x1ec>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002662:	f003 0310 	and.w	r3, r3, #16
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	607b      	str	r3, [r7, #4]
 800266e:	4b43      	ldr	r3, [pc, #268]	@ (800277c <MX_GPIO_Init+0x1ec>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002672:	4a42      	ldr	r2, [pc, #264]	@ (800277c <MX_GPIO_Init+0x1ec>)
 8002674:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002678:	6313      	str	r3, [r2, #48]	@ 0x30
 800267a:	4b40      	ldr	r3, [pc, #256]	@ (800277c <MX_GPIO_Init+0x1ec>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002682:	607b      	str	r3, [r7, #4]
 8002684:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, DISPLAY_IO_1_Pin|DISPLAY_IO_2_Pin|BACKLIGHT_1_Pin|BACKLIGHT_2_Pin
 8002686:	2200      	movs	r2, #0
 8002688:	f24e 013c 	movw	r1, #57404	@ 0xe03c
 800268c:	483c      	ldr	r0, [pc, #240]	@ (8002780 <MX_GPIO_Init+0x1f0>)
 800268e:	f000 fc8d 	bl	8002fac <HAL_GPIO_WritePin>
                          |LED_09_Pin|LED_04_Pin|LED_08_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_01_Pin|LED_02_Pin, GPIO_PIN_RESET);
 8002692:	2200      	movs	r2, #0
 8002694:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8002698:	483a      	ldr	r0, [pc, #232]	@ (8002784 <MX_GPIO_Init+0x1f4>)
 800269a:	f000 fc87 	bl	8002fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DISPLAY_CS_Pin|SD_CS_Pin, GPIO_PIN_RESET);
 800269e:	2200      	movs	r2, #0
 80026a0:	210c      	movs	r1, #12
 80026a2:	4839      	ldr	r0, [pc, #228]	@ (8002788 <MX_GPIO_Init+0x1f8>)
 80026a4:	f000 fc82 	bl	8002fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_03_Pin|LED_07_Pin, GPIO_PIN_RESET);
 80026a8:	2200      	movs	r2, #0
 80026aa:	2118      	movs	r1, #24
 80026ac:	4837      	ldr	r0, [pc, #220]	@ (800278c <MX_GPIO_Init+0x1fc>)
 80026ae:	f000 fc7d 	bl	8002fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_06_Pin|LED_05_Pin, GPIO_PIN_RESET);
 80026b2:	2200      	movs	r2, #0
 80026b4:	2103      	movs	r1, #3
 80026b6:	4836      	ldr	r0, [pc, #216]	@ (8002790 <MX_GPIO_Init+0x200>)
 80026b8:	f000 fc78 	bl	8002fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED_DC_Y_Pin|LED_DC_G_Pin|LED_PC_Y_Pin|LED_PC_G_Pin, GPIO_PIN_RESET);
 80026bc:	2200      	movs	r2, #0
 80026be:	21f0      	movs	r1, #240	@ 0xf0
 80026c0:	4834      	ldr	r0, [pc, #208]	@ (8002794 <MX_GPIO_Init+0x204>)
 80026c2:	f000 fc73 	bl	8002fac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DISPLAY_IO_1_Pin DISPLAY_IO_2_Pin BACKLIGHT_1_Pin BACKLIGHT_2_Pin
                           LED_09_Pin LED_04_Pin LED_08_Pin */
  GPIO_InitStruct.Pin = DISPLAY_IO_1_Pin|DISPLAY_IO_2_Pin|BACKLIGHT_1_Pin|BACKLIGHT_2_Pin
 80026c6:	f24e 033c 	movw	r3, #57404	@ 0xe03c
 80026ca:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LED_09_Pin|LED_04_Pin|LED_08_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026cc:	2301      	movs	r3, #1
 80026ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d4:	2300      	movs	r3, #0
 80026d6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026dc:	4619      	mov	r1, r3
 80026de:	4828      	ldr	r0, [pc, #160]	@ (8002780 <MX_GPIO_Init+0x1f0>)
 80026e0:	f000 fab8 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_01_Pin LED_02_Pin */
  GPIO_InitStruct.Pin = LED_01_Pin|LED_02_Pin;
 80026e4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80026e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ea:	2301      	movs	r3, #1
 80026ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f2:	2300      	movs	r3, #0
 80026f4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80026f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026fa:	4619      	mov	r1, r3
 80026fc:	4821      	ldr	r0, [pc, #132]	@ (8002784 <MX_GPIO_Init+0x1f4>)
 80026fe:	f000 faa9 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPLAY_CS_Pin SD_CS_Pin */
  GPIO_InitStruct.Pin = DISPLAY_CS_Pin|SD_CS_Pin;
 8002702:	230c      	movs	r3, #12
 8002704:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002706:	2301      	movs	r3, #1
 8002708:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270a:	2300      	movs	r3, #0
 800270c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270e:	2300      	movs	r3, #0
 8002710:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002712:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002716:	4619      	mov	r1, r3
 8002718:	481b      	ldr	r0, [pc, #108]	@ (8002788 <MX_GPIO_Init+0x1f8>)
 800271a:	f000 fa9b 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_03_Pin LED_07_Pin */
  GPIO_InitStruct.Pin = LED_03_Pin|LED_07_Pin;
 800271e:	2318      	movs	r3, #24
 8002720:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002722:	2301      	movs	r3, #1
 8002724:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002726:	2300      	movs	r3, #0
 8002728:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272a:	2300      	movs	r3, #0
 800272c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800272e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002732:	4619      	mov	r1, r3
 8002734:	4815      	ldr	r0, [pc, #84]	@ (800278c <MX_GPIO_Init+0x1fc>)
 8002736:	f000 fa8d 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_06_Pin LED_05_Pin */
  GPIO_InitStruct.Pin = LED_06_Pin|LED_05_Pin;
 800273a:	2303      	movs	r3, #3
 800273c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800273e:	2301      	movs	r3, #1
 8002740:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002746:	2300      	movs	r3, #0
 8002748:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800274a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800274e:	4619      	mov	r1, r3
 8002750:	480f      	ldr	r0, [pc, #60]	@ (8002790 <MX_GPIO_Init+0x200>)
 8002752:	f000 fa7f 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_DC_Y_Pin LED_DC_G_Pin LED_PC_Y_Pin LED_PC_G_Pin */
  GPIO_InitStruct.Pin = LED_DC_Y_Pin|LED_DC_G_Pin|LED_PC_Y_Pin|LED_PC_G_Pin;
 8002756:	23f0      	movs	r3, #240	@ 0xf0
 8002758:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800275a:	2301      	movs	r3, #1
 800275c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275e:	2300      	movs	r3, #0
 8002760:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002762:	2300      	movs	r3, #0
 8002764:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002766:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800276a:	4619      	mov	r1, r3
 800276c:	4809      	ldr	r0, [pc, #36]	@ (8002794 <MX_GPIO_Init+0x204>)
 800276e:	f000 fa71 	bl	8002c54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002772:	bf00      	nop
 8002774:	3738      	adds	r7, #56	@ 0x38
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40023800 	.word	0x40023800
 8002780:	40021800 	.word	0x40021800
 8002784:	40021c00 	.word	0x40021c00
 8002788:	40020c00 	.word	0x40020c00
 800278c:	40020400 	.word	0x40020400
 8002790:	40021000 	.word	0x40021000
 8002794:	40022000 	.word	0x40022000

08002798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800279c:	b672      	cpsid	i
}
 800279e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027a0:	bf00      	nop
 80027a2:	e7fd      	b.n	80027a0 <Error_Handler+0x8>

080027a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	607b      	str	r3, [r7, #4]
 80027ae:	4b10      	ldr	r3, [pc, #64]	@ (80027f0 <HAL_MspInit+0x4c>)
 80027b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b2:	4a0f      	ldr	r2, [pc, #60]	@ (80027f0 <HAL_MspInit+0x4c>)
 80027b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80027ba:	4b0d      	ldr	r3, [pc, #52]	@ (80027f0 <HAL_MspInit+0x4c>)
 80027bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027c2:	607b      	str	r3, [r7, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	603b      	str	r3, [r7, #0]
 80027ca:	4b09      	ldr	r3, [pc, #36]	@ (80027f0 <HAL_MspInit+0x4c>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ce:	4a08      	ldr	r2, [pc, #32]	@ (80027f0 <HAL_MspInit+0x4c>)
 80027d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027d6:	4b06      	ldr	r3, [pc, #24]	@ (80027f0 <HAL_MspInit+0x4c>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027de:	603b      	str	r3, [r7, #0]
 80027e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40023800 	.word	0x40023800

080027f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08a      	sub	sp, #40	@ 0x28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fc:	f107 0314 	add.w	r3, r7, #20
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a19      	ldr	r2, [pc, #100]	@ (8002878 <HAL_SPI_MspInit+0x84>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d12c      	bne.n	8002870 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	4b18      	ldr	r3, [pc, #96]	@ (800287c <HAL_SPI_MspInit+0x88>)
 800281c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281e:	4a17      	ldr	r2, [pc, #92]	@ (800287c <HAL_SPI_MspInit+0x88>)
 8002820:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002824:	6413      	str	r3, [r2, #64]	@ 0x40
 8002826:	4b15      	ldr	r3, [pc, #84]	@ (800287c <HAL_SPI_MspInit+0x88>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	4b11      	ldr	r3, [pc, #68]	@ (800287c <HAL_SPI_MspInit+0x88>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283a:	4a10      	ldr	r2, [pc, #64]	@ (800287c <HAL_SPI_MspInit+0x88>)
 800283c:	f043 0304 	orr.w	r3, r3, #4
 8002840:	6313      	str	r3, [r2, #48]	@ 0x30
 8002842:	4b0e      	ldr	r3, [pc, #56]	@ (800287c <HAL_SPI_MspInit+0x88>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002846:	f003 0304 	and.w	r3, r3, #4
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800284e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002854:	2302      	movs	r3, #2
 8002856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002858:	2300      	movs	r3, #0
 800285a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800285c:	2303      	movs	r3, #3
 800285e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002860:	2306      	movs	r3, #6
 8002862:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002864:	f107 0314 	add.w	r3, r7, #20
 8002868:	4619      	mov	r1, r3
 800286a:	4805      	ldr	r0, [pc, #20]	@ (8002880 <HAL_SPI_MspInit+0x8c>)
 800286c:	f000 f9f2 	bl	8002c54 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8002870:	bf00      	nop
 8002872:	3728      	adds	r7, #40	@ 0x28
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40003c00 	.word	0x40003c00
 800287c:	40023800 	.word	0x40023800
 8002880:	40020800 	.word	0x40020800

08002884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002888:	bf00      	nop
 800288a:	e7fd      	b.n	8002888 <NMI_Handler+0x4>

0800288c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002890:	bf00      	nop
 8002892:	e7fd      	b.n	8002890 <HardFault_Handler+0x4>

08002894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002898:	bf00      	nop
 800289a:	e7fd      	b.n	8002898 <MemManage_Handler+0x4>

0800289c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028a0:	bf00      	nop
 80028a2:	e7fd      	b.n	80028a0 <BusFault_Handler+0x4>

080028a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028a8:	bf00      	nop
 80028aa:	e7fd      	b.n	80028a8 <UsageFault_Handler+0x4>

080028ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028b0:	bf00      	nop
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028ba:	b480      	push	{r7}
 80028bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028cc:	bf00      	nop
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028da:	f000 f891 	bl	8002a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028de:	bf00      	nop
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028e8:	4b06      	ldr	r3, [pc, #24]	@ (8002904 <SystemInit+0x20>)
 80028ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ee:	4a05      	ldr	r2, [pc, #20]	@ (8002904 <SystemInit+0x20>)
 80028f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028f8:	bf00      	nop
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	e000ed00 	.word	0xe000ed00

08002908 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002908:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002940 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800290c:	f7ff ffea 	bl	80028e4 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002910:	480c      	ldr	r0, [pc, #48]	@ (8002944 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002912:	490d      	ldr	r1, [pc, #52]	@ (8002948 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002914:	4a0d      	ldr	r2, [pc, #52]	@ (800294c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002918:	e002      	b.n	8002920 <LoopCopyDataInit>

0800291a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800291a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800291c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800291e:	3304      	adds	r3, #4

08002920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002924:	d3f9      	bcc.n	800291a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002926:	4a0a      	ldr	r2, [pc, #40]	@ (8002950 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002928:	4c0a      	ldr	r4, [pc, #40]	@ (8002954 <LoopFillZerobss+0x22>)
  movs r3, #0
 800292a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800292c:	e001      	b.n	8002932 <LoopFillZerobss>

0800292e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800292e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002930:	3204      	adds	r2, #4

08002932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002934:	d3fb      	bcc.n	800292e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002936:	f001 fa29 	bl	8003d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800293a:	f7ff fd39 	bl	80023b0 <main>
  bx  lr    
 800293e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002940:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002948:	2000040c 	.word	0x2000040c
  ldr r2, =_sidata
 800294c:	08004af0 	.word	0x08004af0
  ldr r2, =_sbss
 8002950:	2000040c 	.word	0x2000040c
  ldr r4, =_ebss
 8002954:	20000918 	.word	0x20000918

08002958 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002958:	e7fe      	b.n	8002958 <ADC_IRQHandler>
	...

0800295c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002960:	4b0e      	ldr	r3, [pc, #56]	@ (800299c <HAL_Init+0x40>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a0d      	ldr	r2, [pc, #52]	@ (800299c <HAL_Init+0x40>)
 8002966:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800296a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800296c:	4b0b      	ldr	r3, [pc, #44]	@ (800299c <HAL_Init+0x40>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a0a      	ldr	r2, [pc, #40]	@ (800299c <HAL_Init+0x40>)
 8002972:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002976:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002978:	4b08      	ldr	r3, [pc, #32]	@ (800299c <HAL_Init+0x40>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a07      	ldr	r2, [pc, #28]	@ (800299c <HAL_Init+0x40>)
 800297e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002982:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002984:	2003      	movs	r0, #3
 8002986:	f000 f931 	bl	8002bec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800298a:	200f      	movs	r0, #15
 800298c:	f000 f808 	bl	80029a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002990:	f7ff ff08 	bl	80027a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40023c00 	.word	0x40023c00

080029a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029a8:	4b12      	ldr	r3, [pc, #72]	@ (80029f4 <HAL_InitTick+0x54>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	4b12      	ldr	r3, [pc, #72]	@ (80029f8 <HAL_InitTick+0x58>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	4619      	mov	r1, r3
 80029b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80029ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 f93b 	bl	8002c3a <HAL_SYSTICK_Config>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e00e      	b.n	80029ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b0f      	cmp	r3, #15
 80029d2:	d80a      	bhi.n	80029ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029d4:	2200      	movs	r2, #0
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	f04f 30ff 	mov.w	r0, #4294967295
 80029dc:	f000 f911 	bl	8002c02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029e0:	4a06      	ldr	r2, [pc, #24]	@ (80029fc <HAL_InitTick+0x5c>)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
 80029e8:	e000      	b.n	80029ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	20000400 	.word	0x20000400
 80029f8:	20000408 	.word	0x20000408
 80029fc:	20000404 	.word	0x20000404

08002a00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a04:	4b06      	ldr	r3, [pc, #24]	@ (8002a20 <HAL_IncTick+0x20>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4b06      	ldr	r3, [pc, #24]	@ (8002a24 <HAL_IncTick+0x24>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4413      	add	r3, r2
 8002a10:	4a04      	ldr	r2, [pc, #16]	@ (8002a24 <HAL_IncTick+0x24>)
 8002a12:	6013      	str	r3, [r2, #0]
}
 8002a14:	bf00      	nop
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	20000408 	.word	0x20000408
 8002a24:	20000914 	.word	0x20000914

08002a28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a2c:	4b03      	ldr	r3, [pc, #12]	@ (8002a3c <HAL_GetTick+0x14>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	20000914 	.word	0x20000914

08002a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a48:	f7ff ffee 	bl	8002a28 <HAL_GetTick>
 8002a4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a58:	d005      	beq.n	8002a66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a84 <HAL_Delay+0x44>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4413      	add	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a66:	bf00      	nop
 8002a68:	f7ff ffde 	bl	8002a28 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d8f7      	bhi.n	8002a68 <HAL_Delay+0x28>
  {
  }
}
 8002a78:	bf00      	nop
 8002a7a:	bf00      	nop
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000408 	.word	0x20000408

08002a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a98:	4b0c      	ldr	r3, [pc, #48]	@ (8002acc <__NVIC_SetPriorityGrouping+0x44>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ab0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ab4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aba:	4a04      	ldr	r2, [pc, #16]	@ (8002acc <__NVIC_SetPriorityGrouping+0x44>)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	60d3      	str	r3, [r2, #12]
}
 8002ac0:	bf00      	nop
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ad4:	4b04      	ldr	r3, [pc, #16]	@ (8002ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	0a1b      	lsrs	r3, r3, #8
 8002ada:	f003 0307 	and.w	r3, r3, #7
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	e000ed00 	.word	0xe000ed00

08002aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	6039      	str	r1, [r7, #0]
 8002af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	db0a      	blt.n	8002b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	490c      	ldr	r1, [pc, #48]	@ (8002b38 <__NVIC_SetPriority+0x4c>)
 8002b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0a:	0112      	lsls	r2, r2, #4
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	440b      	add	r3, r1
 8002b10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b14:	e00a      	b.n	8002b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	4908      	ldr	r1, [pc, #32]	@ (8002b3c <__NVIC_SetPriority+0x50>)
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	3b04      	subs	r3, #4
 8002b24:	0112      	lsls	r2, r2, #4
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	440b      	add	r3, r1
 8002b2a:	761a      	strb	r2, [r3, #24]
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	e000e100 	.word	0xe000e100
 8002b3c:	e000ed00 	.word	0xe000ed00

08002b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b089      	sub	sp, #36	@ 0x24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f1c3 0307 	rsb	r3, r3, #7
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	bf28      	it	cs
 8002b5e:	2304      	movcs	r3, #4
 8002b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	3304      	adds	r3, #4
 8002b66:	2b06      	cmp	r3, #6
 8002b68:	d902      	bls.n	8002b70 <NVIC_EncodePriority+0x30>
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	3b03      	subs	r3, #3
 8002b6e:	e000      	b.n	8002b72 <NVIC_EncodePriority+0x32>
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b74:	f04f 32ff 	mov.w	r2, #4294967295
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43da      	mvns	r2, r3
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	401a      	ands	r2, r3
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b88:	f04f 31ff 	mov.w	r1, #4294967295
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b92:	43d9      	mvns	r1, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b98:	4313      	orrs	r3, r2
         );
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3724      	adds	r7, #36	@ 0x24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
	...

08002ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bb8:	d301      	bcc.n	8002bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e00f      	b.n	8002bde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8002be8 <SysTick_Config+0x40>)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bc6:	210f      	movs	r1, #15
 8002bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bcc:	f7ff ff8e 	bl	8002aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bd0:	4b05      	ldr	r3, [pc, #20]	@ (8002be8 <SysTick_Config+0x40>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bd6:	4b04      	ldr	r3, [pc, #16]	@ (8002be8 <SysTick_Config+0x40>)
 8002bd8:	2207      	movs	r2, #7
 8002bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	e000e010 	.word	0xe000e010

08002bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff ff47 	bl	8002a88 <__NVIC_SetPriorityGrouping>
}
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b086      	sub	sp, #24
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	4603      	mov	r3, r0
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	607a      	str	r2, [r7, #4]
 8002c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c14:	f7ff ff5c 	bl	8002ad0 <__NVIC_GetPriorityGrouping>
 8002c18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	68b9      	ldr	r1, [r7, #8]
 8002c1e:	6978      	ldr	r0, [r7, #20]
 8002c20:	f7ff ff8e 	bl	8002b40 <NVIC_EncodePriority>
 8002c24:	4602      	mov	r2, r0
 8002c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c2a:	4611      	mov	r1, r2
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff ff5d 	bl	8002aec <__NVIC_SetPriority>
}
 8002c32:	bf00      	nop
 8002c34:	3718      	adds	r7, #24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff ffb0 	bl	8002ba8 <SysTick_Config>
 8002c48:	4603      	mov	r3, r0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b089      	sub	sp, #36	@ 0x24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61fb      	str	r3, [r7, #28]
 8002c6e:	e177      	b.n	8002f60 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c70:	2201      	movs	r2, #1
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	4013      	ands	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	f040 8166 	bne.w	8002f5a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d005      	beq.n	8002ca6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d130      	bne.n	8002d08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cdc:	2201      	movs	r2, #1
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	091b      	lsrs	r3, r3, #4
 8002cf2:	f003 0201 	and.w	r2, r3, #1
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 0303 	and.w	r3, r3, #3
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	d017      	beq.n	8002d44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	2203      	movs	r2, #3
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	43db      	mvns	r3, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 0303 	and.w	r3, r3, #3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d123      	bne.n	8002d98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	08da      	lsrs	r2, r3, #3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3208      	adds	r2, #8
 8002d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	220f      	movs	r2, #15
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4013      	ands	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	691a      	ldr	r2, [r3, #16]
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	08da      	lsrs	r2, r3, #3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	3208      	adds	r2, #8
 8002d92:	69b9      	ldr	r1, [r7, #24]
 8002d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	2203      	movs	r2, #3
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	43db      	mvns	r3, r3
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4013      	ands	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 0203 	and.w	r2, r3, #3
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 80c0 	beq.w	8002f5a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	4b66      	ldr	r3, [pc, #408]	@ (8002f78 <HAL_GPIO_Init+0x324>)
 8002de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de2:	4a65      	ldr	r2, [pc, #404]	@ (8002f78 <HAL_GPIO_Init+0x324>)
 8002de4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002de8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dea:	4b63      	ldr	r3, [pc, #396]	@ (8002f78 <HAL_GPIO_Init+0x324>)
 8002dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002df6:	4a61      	ldr	r2, [pc, #388]	@ (8002f7c <HAL_GPIO_Init+0x328>)
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	089b      	lsrs	r3, r3, #2
 8002dfc:	3302      	adds	r3, #2
 8002dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	220f      	movs	r2, #15
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	43db      	mvns	r3, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4013      	ands	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a58      	ldr	r2, [pc, #352]	@ (8002f80 <HAL_GPIO_Init+0x32c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d037      	beq.n	8002e92 <HAL_GPIO_Init+0x23e>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a57      	ldr	r2, [pc, #348]	@ (8002f84 <HAL_GPIO_Init+0x330>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d031      	beq.n	8002e8e <HAL_GPIO_Init+0x23a>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a56      	ldr	r2, [pc, #344]	@ (8002f88 <HAL_GPIO_Init+0x334>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d02b      	beq.n	8002e8a <HAL_GPIO_Init+0x236>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a55      	ldr	r2, [pc, #340]	@ (8002f8c <HAL_GPIO_Init+0x338>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d025      	beq.n	8002e86 <HAL_GPIO_Init+0x232>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a54      	ldr	r2, [pc, #336]	@ (8002f90 <HAL_GPIO_Init+0x33c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d01f      	beq.n	8002e82 <HAL_GPIO_Init+0x22e>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a53      	ldr	r2, [pc, #332]	@ (8002f94 <HAL_GPIO_Init+0x340>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d019      	beq.n	8002e7e <HAL_GPIO_Init+0x22a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a52      	ldr	r2, [pc, #328]	@ (8002f98 <HAL_GPIO_Init+0x344>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d013      	beq.n	8002e7a <HAL_GPIO_Init+0x226>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a51      	ldr	r2, [pc, #324]	@ (8002f9c <HAL_GPIO_Init+0x348>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d00d      	beq.n	8002e76 <HAL_GPIO_Init+0x222>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a50      	ldr	r2, [pc, #320]	@ (8002fa0 <HAL_GPIO_Init+0x34c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d007      	beq.n	8002e72 <HAL_GPIO_Init+0x21e>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a4f      	ldr	r2, [pc, #316]	@ (8002fa4 <HAL_GPIO_Init+0x350>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d101      	bne.n	8002e6e <HAL_GPIO_Init+0x21a>
 8002e6a:	2309      	movs	r3, #9
 8002e6c:	e012      	b.n	8002e94 <HAL_GPIO_Init+0x240>
 8002e6e:	230a      	movs	r3, #10
 8002e70:	e010      	b.n	8002e94 <HAL_GPIO_Init+0x240>
 8002e72:	2308      	movs	r3, #8
 8002e74:	e00e      	b.n	8002e94 <HAL_GPIO_Init+0x240>
 8002e76:	2307      	movs	r3, #7
 8002e78:	e00c      	b.n	8002e94 <HAL_GPIO_Init+0x240>
 8002e7a:	2306      	movs	r3, #6
 8002e7c:	e00a      	b.n	8002e94 <HAL_GPIO_Init+0x240>
 8002e7e:	2305      	movs	r3, #5
 8002e80:	e008      	b.n	8002e94 <HAL_GPIO_Init+0x240>
 8002e82:	2304      	movs	r3, #4
 8002e84:	e006      	b.n	8002e94 <HAL_GPIO_Init+0x240>
 8002e86:	2303      	movs	r3, #3
 8002e88:	e004      	b.n	8002e94 <HAL_GPIO_Init+0x240>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e002      	b.n	8002e94 <HAL_GPIO_Init+0x240>
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e000      	b.n	8002e94 <HAL_GPIO_Init+0x240>
 8002e92:	2300      	movs	r3, #0
 8002e94:	69fa      	ldr	r2, [r7, #28]
 8002e96:	f002 0203 	and.w	r2, r2, #3
 8002e9a:	0092      	lsls	r2, r2, #2
 8002e9c:	4093      	lsls	r3, r2
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ea4:	4935      	ldr	r1, [pc, #212]	@ (8002f7c <HAL_GPIO_Init+0x328>)
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	089b      	lsrs	r3, r3, #2
 8002eaa:	3302      	adds	r3, #2
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eb2:	4b3d      	ldr	r3, [pc, #244]	@ (8002fa8 <HAL_GPIO_Init+0x354>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ed6:	4a34      	ldr	r2, [pc, #208]	@ (8002fa8 <HAL_GPIO_Init+0x354>)
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002edc:	4b32      	ldr	r3, [pc, #200]	@ (8002fa8 <HAL_GPIO_Init+0x354>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f00:	4a29      	ldr	r2, [pc, #164]	@ (8002fa8 <HAL_GPIO_Init+0x354>)
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f06:	4b28      	ldr	r3, [pc, #160]	@ (8002fa8 <HAL_GPIO_Init+0x354>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4013      	ands	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f2a:	4a1f      	ldr	r2, [pc, #124]	@ (8002fa8 <HAL_GPIO_Init+0x354>)
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f30:	4b1d      	ldr	r3, [pc, #116]	@ (8002fa8 <HAL_GPIO_Init+0x354>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d003      	beq.n	8002f54 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f54:	4a14      	ldr	r2, [pc, #80]	@ (8002fa8 <HAL_GPIO_Init+0x354>)
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	61fb      	str	r3, [r7, #28]
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	2b0f      	cmp	r3, #15
 8002f64:	f67f ae84 	bls.w	8002c70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f68:	bf00      	nop
 8002f6a:	bf00      	nop
 8002f6c:	3724      	adds	r7, #36	@ 0x24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	40013800 	.word	0x40013800
 8002f80:	40020000 	.word	0x40020000
 8002f84:	40020400 	.word	0x40020400
 8002f88:	40020800 	.word	0x40020800
 8002f8c:	40020c00 	.word	0x40020c00
 8002f90:	40021000 	.word	0x40021000
 8002f94:	40021400 	.word	0x40021400
 8002f98:	40021800 	.word	0x40021800
 8002f9c:	40021c00 	.word	0x40021c00
 8002fa0:	40022000 	.word	0x40022000
 8002fa4:	40022400 	.word	0x40022400
 8002fa8:	40013c00 	.word	0x40013c00

08002fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	807b      	strh	r3, [r7, #2]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fbc:	787b      	ldrb	r3, [r7, #1]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fc2:	887a      	ldrh	r2, [r7, #2]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fc8:	e003      	b.n	8002fd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fca:	887b      	ldrh	r3, [r7, #2]
 8002fcc:	041a      	lsls	r2, r3, #16
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	619a      	str	r2, [r3, #24]
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
	...

08002fe0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e267      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d075      	beq.n	80030ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002ffe:	4b88      	ldr	r3, [pc, #544]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 030c 	and.w	r3, r3, #12
 8003006:	2b04      	cmp	r3, #4
 8003008:	d00c      	beq.n	8003024 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800300a:	4b85      	ldr	r3, [pc, #532]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003012:	2b08      	cmp	r3, #8
 8003014:	d112      	bne.n	800303c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003016:	4b82      	ldr	r3, [pc, #520]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800301e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003022:	d10b      	bne.n	800303c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003024:	4b7e      	ldr	r3, [pc, #504]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d05b      	beq.n	80030e8 <HAL_RCC_OscConfig+0x108>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d157      	bne.n	80030e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e242      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003044:	d106      	bne.n	8003054 <HAL_RCC_OscConfig+0x74>
 8003046:	4b76      	ldr	r3, [pc, #472]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a75      	ldr	r2, [pc, #468]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 800304c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	e01d      	b.n	8003090 <HAL_RCC_OscConfig+0xb0>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800305c:	d10c      	bne.n	8003078 <HAL_RCC_OscConfig+0x98>
 800305e:	4b70      	ldr	r3, [pc, #448]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a6f      	ldr	r2, [pc, #444]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003064:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003068:	6013      	str	r3, [r2, #0]
 800306a:	4b6d      	ldr	r3, [pc, #436]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a6c      	ldr	r2, [pc, #432]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003070:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	e00b      	b.n	8003090 <HAL_RCC_OscConfig+0xb0>
 8003078:	4b69      	ldr	r3, [pc, #420]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a68      	ldr	r2, [pc, #416]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 800307e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003082:	6013      	str	r3, [r2, #0]
 8003084:	4b66      	ldr	r3, [pc, #408]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a65      	ldr	r2, [pc, #404]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 800308a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800308e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d013      	beq.n	80030c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003098:	f7ff fcc6 	bl	8002a28 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a0:	f7ff fcc2 	bl	8002a28 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b64      	cmp	r3, #100	@ 0x64
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e207      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b2:	4b5b      	ldr	r3, [pc, #364]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0f0      	beq.n	80030a0 <HAL_RCC_OscConfig+0xc0>
 80030be:	e014      	b.n	80030ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c0:	f7ff fcb2 	bl	8002a28 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030c8:	f7ff fcae 	bl	8002a28 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b64      	cmp	r3, #100	@ 0x64
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e1f3      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030da:	4b51      	ldr	r3, [pc, #324]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_OscConfig+0xe8>
 80030e6:	e000      	b.n	80030ea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d063      	beq.n	80031be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80030f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 030c 	and.w	r3, r3, #12
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00b      	beq.n	800311a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003102:	4b47      	ldr	r3, [pc, #284]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800310a:	2b08      	cmp	r3, #8
 800310c:	d11c      	bne.n	8003148 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800310e:	4b44      	ldr	r3, [pc, #272]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d116      	bne.n	8003148 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800311a:	4b41      	ldr	r3, [pc, #260]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d005      	beq.n	8003132 <HAL_RCC_OscConfig+0x152>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d001      	beq.n	8003132 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e1c7      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003132:	4b3b      	ldr	r3, [pc, #236]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	4937      	ldr	r1, [pc, #220]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003142:	4313      	orrs	r3, r2
 8003144:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003146:	e03a      	b.n	80031be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d020      	beq.n	8003192 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003150:	4b34      	ldr	r3, [pc, #208]	@ (8003224 <HAL_RCC_OscConfig+0x244>)
 8003152:	2201      	movs	r2, #1
 8003154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003156:	f7ff fc67 	bl	8002a28 <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800315e:	f7ff fc63 	bl	8002a28 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e1a8      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003170:	4b2b      	ldr	r3, [pc, #172]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0f0      	beq.n	800315e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800317c:	4b28      	ldr	r3, [pc, #160]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	4925      	ldr	r1, [pc, #148]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 800318c:	4313      	orrs	r3, r2
 800318e:	600b      	str	r3, [r1, #0]
 8003190:	e015      	b.n	80031be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003192:	4b24      	ldr	r3, [pc, #144]	@ (8003224 <HAL_RCC_OscConfig+0x244>)
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003198:	f7ff fc46 	bl	8002a28 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031a0:	f7ff fc42 	bl	8002a28 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e187      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1f0      	bne.n	80031a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d036      	beq.n	8003238 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d016      	beq.n	8003200 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031d2:	4b15      	ldr	r3, [pc, #84]	@ (8003228 <HAL_RCC_OscConfig+0x248>)
 80031d4:	2201      	movs	r2, #1
 80031d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d8:	f7ff fc26 	bl	8002a28 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031e0:	f7ff fc22 	bl	8002a28 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e167      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 80031f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0f0      	beq.n	80031e0 <HAL_RCC_OscConfig+0x200>
 80031fe:	e01b      	b.n	8003238 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003200:	4b09      	ldr	r3, [pc, #36]	@ (8003228 <HAL_RCC_OscConfig+0x248>)
 8003202:	2200      	movs	r2, #0
 8003204:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003206:	f7ff fc0f 	bl	8002a28 <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800320c:	e00e      	b.n	800322c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800320e:	f7ff fc0b 	bl	8002a28 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d907      	bls.n	800322c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e150      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
 8003220:	40023800 	.word	0x40023800
 8003224:	42470000 	.word	0x42470000
 8003228:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800322c:	4b88      	ldr	r3, [pc, #544]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 800322e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1ea      	bne.n	800320e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 8097 	beq.w	8003374 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003246:	2300      	movs	r3, #0
 8003248:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800324a:	4b81      	ldr	r3, [pc, #516]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 800324c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10f      	bne.n	8003276 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003256:	2300      	movs	r3, #0
 8003258:	60bb      	str	r3, [r7, #8]
 800325a:	4b7d      	ldr	r3, [pc, #500]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 800325c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325e:	4a7c      	ldr	r2, [pc, #496]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 8003260:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003264:	6413      	str	r3, [r2, #64]	@ 0x40
 8003266:	4b7a      	ldr	r3, [pc, #488]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 8003268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800326e:	60bb      	str	r3, [r7, #8]
 8003270:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003272:	2301      	movs	r3, #1
 8003274:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003276:	4b77      	ldr	r3, [pc, #476]	@ (8003454 <HAL_RCC_OscConfig+0x474>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800327e:	2b00      	cmp	r3, #0
 8003280:	d118      	bne.n	80032b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003282:	4b74      	ldr	r3, [pc, #464]	@ (8003454 <HAL_RCC_OscConfig+0x474>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a73      	ldr	r2, [pc, #460]	@ (8003454 <HAL_RCC_OscConfig+0x474>)
 8003288:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800328c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800328e:	f7ff fbcb 	bl	8002a28 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003294:	e008      	b.n	80032a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003296:	f7ff fbc7 	bl	8002a28 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e10c      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a8:	4b6a      	ldr	r3, [pc, #424]	@ (8003454 <HAL_RCC_OscConfig+0x474>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0f0      	beq.n	8003296 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d106      	bne.n	80032ca <HAL_RCC_OscConfig+0x2ea>
 80032bc:	4b64      	ldr	r3, [pc, #400]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 80032be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032c0:	4a63      	ldr	r2, [pc, #396]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 80032c2:	f043 0301 	orr.w	r3, r3, #1
 80032c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80032c8:	e01c      	b.n	8003304 <HAL_RCC_OscConfig+0x324>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	2b05      	cmp	r3, #5
 80032d0:	d10c      	bne.n	80032ec <HAL_RCC_OscConfig+0x30c>
 80032d2:	4b5f      	ldr	r3, [pc, #380]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 80032d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d6:	4a5e      	ldr	r2, [pc, #376]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 80032d8:	f043 0304 	orr.w	r3, r3, #4
 80032dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80032de:	4b5c      	ldr	r3, [pc, #368]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 80032e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e2:	4a5b      	ldr	r2, [pc, #364]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 80032e4:	f043 0301 	orr.w	r3, r3, #1
 80032e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80032ea:	e00b      	b.n	8003304 <HAL_RCC_OscConfig+0x324>
 80032ec:	4b58      	ldr	r3, [pc, #352]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 80032ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f0:	4a57      	ldr	r2, [pc, #348]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 80032f2:	f023 0301 	bic.w	r3, r3, #1
 80032f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80032f8:	4b55      	ldr	r3, [pc, #340]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 80032fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032fc:	4a54      	ldr	r2, [pc, #336]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 80032fe:	f023 0304 	bic.w	r3, r3, #4
 8003302:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d015      	beq.n	8003338 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330c:	f7ff fb8c 	bl	8002a28 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003312:	e00a      	b.n	800332a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003314:	f7ff fb88 	bl	8002a28 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003322:	4293      	cmp	r3, r2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e0cb      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800332a:	4b49      	ldr	r3, [pc, #292]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0ee      	beq.n	8003314 <HAL_RCC_OscConfig+0x334>
 8003336:	e014      	b.n	8003362 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003338:	f7ff fb76 	bl	8002a28 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800333e:	e00a      	b.n	8003356 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003340:	f7ff fb72 	bl	8002a28 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e0b5      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003356:	4b3e      	ldr	r3, [pc, #248]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 8003358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1ee      	bne.n	8003340 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003362:	7dfb      	ldrb	r3, [r7, #23]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d105      	bne.n	8003374 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003368:	4b39      	ldr	r3, [pc, #228]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 800336a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336c:	4a38      	ldr	r2, [pc, #224]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 800336e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003372:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 80a1 	beq.w	80034c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800337e:	4b34      	ldr	r3, [pc, #208]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 030c 	and.w	r3, r3, #12
 8003386:	2b08      	cmp	r3, #8
 8003388:	d05c      	beq.n	8003444 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	2b02      	cmp	r3, #2
 8003390:	d141      	bne.n	8003416 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003392:	4b31      	ldr	r3, [pc, #196]	@ (8003458 <HAL_RCC_OscConfig+0x478>)
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003398:	f7ff fb46 	bl	8002a28 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a0:	f7ff fb42 	bl	8002a28 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e087      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b2:	4b27      	ldr	r3, [pc, #156]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f0      	bne.n	80033a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69da      	ldr	r2, [r3, #28]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033cc:	019b      	lsls	r3, r3, #6
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d4:	085b      	lsrs	r3, r3, #1
 80033d6:	3b01      	subs	r3, #1
 80033d8:	041b      	lsls	r3, r3, #16
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e0:	061b      	lsls	r3, r3, #24
 80033e2:	491b      	ldr	r1, [pc, #108]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003458 <HAL_RCC_OscConfig+0x478>)
 80033ea:	2201      	movs	r2, #1
 80033ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ee:	f7ff fb1b 	bl	8002a28 <HAL_GetTick>
 80033f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f4:	e008      	b.n	8003408 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f6:	f7ff fb17 	bl	8002a28 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e05c      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003408:	4b11      	ldr	r3, [pc, #68]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0f0      	beq.n	80033f6 <HAL_RCC_OscConfig+0x416>
 8003414:	e054      	b.n	80034c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003416:	4b10      	ldr	r3, [pc, #64]	@ (8003458 <HAL_RCC_OscConfig+0x478>)
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341c:	f7ff fb04 	bl	8002a28 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003424:	f7ff fb00 	bl	8002a28 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e045      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003436:	4b06      	ldr	r3, [pc, #24]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f0      	bne.n	8003424 <HAL_RCC_OscConfig+0x444>
 8003442:	e03d      	b.n	80034c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d107      	bne.n	800345c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e038      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
 8003450:	40023800 	.word	0x40023800
 8003454:	40007000 	.word	0x40007000
 8003458:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800345c:	4b1b      	ldr	r3, [pc, #108]	@ (80034cc <HAL_RCC_OscConfig+0x4ec>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d028      	beq.n	80034bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003474:	429a      	cmp	r2, r3
 8003476:	d121      	bne.n	80034bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003482:	429a      	cmp	r2, r3
 8003484:	d11a      	bne.n	80034bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800348c:	4013      	ands	r3, r2
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003492:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003494:	4293      	cmp	r3, r2
 8003496:	d111      	bne.n	80034bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a2:	085b      	lsrs	r3, r3, #1
 80034a4:	3b01      	subs	r3, #1
 80034a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d107      	bne.n	80034bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d001      	beq.n	80034c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e000      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3718      	adds	r7, #24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	40023800 	.word	0x40023800

080034d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e0cc      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034e4:	4b68      	ldr	r3, [pc, #416]	@ (8003688 <HAL_RCC_ClockConfig+0x1b8>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 030f 	and.w	r3, r3, #15
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d90c      	bls.n	800350c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f2:	4b65      	ldr	r3, [pc, #404]	@ (8003688 <HAL_RCC_ClockConfig+0x1b8>)
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fa:	4b63      	ldr	r3, [pc, #396]	@ (8003688 <HAL_RCC_ClockConfig+0x1b8>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	429a      	cmp	r2, r3
 8003506:	d001      	beq.n	800350c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e0b8      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d020      	beq.n	800355a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d005      	beq.n	8003530 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003524:	4b59      	ldr	r3, [pc, #356]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	4a58      	ldr	r2, [pc, #352]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800352e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0308 	and.w	r3, r3, #8
 8003538:	2b00      	cmp	r3, #0
 800353a:	d005      	beq.n	8003548 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800353c:	4b53      	ldr	r3, [pc, #332]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	4a52      	ldr	r2, [pc, #328]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003546:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003548:	4b50      	ldr	r3, [pc, #320]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	494d      	ldr	r1, [pc, #308]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	4313      	orrs	r3, r2
 8003558:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d044      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d107      	bne.n	800357e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356e:	4b47      	ldr	r3, [pc, #284]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d119      	bne.n	80035ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e07f      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b02      	cmp	r3, #2
 8003584:	d003      	beq.n	800358e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800358a:	2b03      	cmp	r3, #3
 800358c:	d107      	bne.n	800359e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800358e:	4b3f      	ldr	r3, [pc, #252]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d109      	bne.n	80035ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e06f      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800359e:	4b3b      	ldr	r3, [pc, #236]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e067      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ae:	4b37      	ldr	r3, [pc, #220]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f023 0203 	bic.w	r2, r3, #3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	4934      	ldr	r1, [pc, #208]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035c0:	f7ff fa32 	bl	8002a28 <HAL_GetTick>
 80035c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c6:	e00a      	b.n	80035de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c8:	f7ff fa2e 	bl	8002a28 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e04f      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035de:	4b2b      	ldr	r3, [pc, #172]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 020c 	and.w	r2, r3, #12
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d1eb      	bne.n	80035c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035f0:	4b25      	ldr	r3, [pc, #148]	@ (8003688 <HAL_RCC_ClockConfig+0x1b8>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 030f 	and.w	r3, r3, #15
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d20c      	bcs.n	8003618 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fe:	4b22      	ldr	r3, [pc, #136]	@ (8003688 <HAL_RCC_ClockConfig+0x1b8>)
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003606:	4b20      	ldr	r3, [pc, #128]	@ (8003688 <HAL_RCC_ClockConfig+0x1b8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 030f 	and.w	r3, r3, #15
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	429a      	cmp	r2, r3
 8003612:	d001      	beq.n	8003618 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e032      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	d008      	beq.n	8003636 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003624:	4b19      	ldr	r3, [pc, #100]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	4916      	ldr	r1, [pc, #88]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003632:	4313      	orrs	r3, r2
 8003634:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	2b00      	cmp	r3, #0
 8003640:	d009      	beq.n	8003656 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003642:	4b12      	ldr	r3, [pc, #72]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	490e      	ldr	r1, [pc, #56]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	4313      	orrs	r3, r2
 8003654:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003656:	f000 f821 	bl	800369c <HAL_RCC_GetSysClockFreq>
 800365a:	4602      	mov	r2, r0
 800365c:	4b0b      	ldr	r3, [pc, #44]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	091b      	lsrs	r3, r3, #4
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	490a      	ldr	r1, [pc, #40]	@ (8003690 <HAL_RCC_ClockConfig+0x1c0>)
 8003668:	5ccb      	ldrb	r3, [r1, r3]
 800366a:	fa22 f303 	lsr.w	r3, r2, r3
 800366e:	4a09      	ldr	r2, [pc, #36]	@ (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 8003670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003672:	4b09      	ldr	r3, [pc, #36]	@ (8003698 <HAL_RCC_ClockConfig+0x1c8>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff f992 	bl	80029a0 <HAL_InitTick>

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40023c00 	.word	0x40023c00
 800368c:	40023800 	.word	0x40023800
 8003690:	08004ad0 	.word	0x08004ad0
 8003694:	20000400 	.word	0x20000400
 8003698:	20000404 	.word	0x20000404

0800369c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800369c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036a0:	b090      	sub	sp, #64	@ 0x40
 80036a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80036a4:	2300      	movs	r3, #0
 80036a6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80036ac:	2300      	movs	r3, #0
 80036ae:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036b4:	4b59      	ldr	r3, [pc, #356]	@ (800381c <HAL_RCC_GetSysClockFreq+0x180>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f003 030c 	and.w	r3, r3, #12
 80036bc:	2b08      	cmp	r3, #8
 80036be:	d00d      	beq.n	80036dc <HAL_RCC_GetSysClockFreq+0x40>
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	f200 80a1 	bhi.w	8003808 <HAL_RCC_GetSysClockFreq+0x16c>
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d002      	beq.n	80036d0 <HAL_RCC_GetSysClockFreq+0x34>
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d003      	beq.n	80036d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80036ce:	e09b      	b.n	8003808 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036d0:	4b53      	ldr	r3, [pc, #332]	@ (8003820 <HAL_RCC_GetSysClockFreq+0x184>)
 80036d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036d4:	e09b      	b.n	800380e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036d6:	4b53      	ldr	r3, [pc, #332]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x188>)
 80036d8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036da:	e098      	b.n	800380e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036dc:	4b4f      	ldr	r3, [pc, #316]	@ (800381c <HAL_RCC_GetSysClockFreq+0x180>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036e4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036e6:	4b4d      	ldr	r3, [pc, #308]	@ (800381c <HAL_RCC_GetSysClockFreq+0x180>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d028      	beq.n	8003744 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036f2:	4b4a      	ldr	r3, [pc, #296]	@ (800381c <HAL_RCC_GetSysClockFreq+0x180>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	099b      	lsrs	r3, r3, #6
 80036f8:	2200      	movs	r2, #0
 80036fa:	623b      	str	r3, [r7, #32]
 80036fc:	627a      	str	r2, [r7, #36]	@ 0x24
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003704:	2100      	movs	r1, #0
 8003706:	4b47      	ldr	r3, [pc, #284]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x188>)
 8003708:	fb03 f201 	mul.w	r2, r3, r1
 800370c:	2300      	movs	r3, #0
 800370e:	fb00 f303 	mul.w	r3, r0, r3
 8003712:	4413      	add	r3, r2
 8003714:	4a43      	ldr	r2, [pc, #268]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x188>)
 8003716:	fba0 1202 	umull	r1, r2, r0, r2
 800371a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800371c:	460a      	mov	r2, r1
 800371e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003720:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003722:	4413      	add	r3, r2
 8003724:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003728:	2200      	movs	r2, #0
 800372a:	61bb      	str	r3, [r7, #24]
 800372c:	61fa      	str	r2, [r7, #28]
 800372e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003732:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003736:	f7fc fd59 	bl	80001ec <__aeabi_uldivmod>
 800373a:	4602      	mov	r2, r0
 800373c:	460b      	mov	r3, r1
 800373e:	4613      	mov	r3, r2
 8003740:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003742:	e053      	b.n	80037ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003744:	4b35      	ldr	r3, [pc, #212]	@ (800381c <HAL_RCC_GetSysClockFreq+0x180>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	099b      	lsrs	r3, r3, #6
 800374a:	2200      	movs	r2, #0
 800374c:	613b      	str	r3, [r7, #16]
 800374e:	617a      	str	r2, [r7, #20]
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003756:	f04f 0b00 	mov.w	fp, #0
 800375a:	4652      	mov	r2, sl
 800375c:	465b      	mov	r3, fp
 800375e:	f04f 0000 	mov.w	r0, #0
 8003762:	f04f 0100 	mov.w	r1, #0
 8003766:	0159      	lsls	r1, r3, #5
 8003768:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800376c:	0150      	lsls	r0, r2, #5
 800376e:	4602      	mov	r2, r0
 8003770:	460b      	mov	r3, r1
 8003772:	ebb2 080a 	subs.w	r8, r2, sl
 8003776:	eb63 090b 	sbc.w	r9, r3, fp
 800377a:	f04f 0200 	mov.w	r2, #0
 800377e:	f04f 0300 	mov.w	r3, #0
 8003782:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003786:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800378a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800378e:	ebb2 0408 	subs.w	r4, r2, r8
 8003792:	eb63 0509 	sbc.w	r5, r3, r9
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	00eb      	lsls	r3, r5, #3
 80037a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037a4:	00e2      	lsls	r2, r4, #3
 80037a6:	4614      	mov	r4, r2
 80037a8:	461d      	mov	r5, r3
 80037aa:	eb14 030a 	adds.w	r3, r4, sl
 80037ae:	603b      	str	r3, [r7, #0]
 80037b0:	eb45 030b 	adc.w	r3, r5, fp
 80037b4:	607b      	str	r3, [r7, #4]
 80037b6:	f04f 0200 	mov.w	r2, #0
 80037ba:	f04f 0300 	mov.w	r3, #0
 80037be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037c2:	4629      	mov	r1, r5
 80037c4:	028b      	lsls	r3, r1, #10
 80037c6:	4621      	mov	r1, r4
 80037c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037cc:	4621      	mov	r1, r4
 80037ce:	028a      	lsls	r2, r1, #10
 80037d0:	4610      	mov	r0, r2
 80037d2:	4619      	mov	r1, r3
 80037d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037d6:	2200      	movs	r2, #0
 80037d8:	60bb      	str	r3, [r7, #8]
 80037da:	60fa      	str	r2, [r7, #12]
 80037dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037e0:	f7fc fd04 	bl	80001ec <__aeabi_uldivmod>
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	4613      	mov	r3, r2
 80037ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80037ec:	4b0b      	ldr	r3, [pc, #44]	@ (800381c <HAL_RCC_GetSysClockFreq+0x180>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	0c1b      	lsrs	r3, r3, #16
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	3301      	adds	r3, #1
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80037fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80037fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003800:	fbb2 f3f3 	udiv	r3, r2, r3
 8003804:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003806:	e002      	b.n	800380e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003808:	4b05      	ldr	r3, [pc, #20]	@ (8003820 <HAL_RCC_GetSysClockFreq+0x184>)
 800380a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800380c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800380e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003810:	4618      	mov	r0, r3
 8003812:	3740      	adds	r7, #64	@ 0x40
 8003814:	46bd      	mov	sp, r7
 8003816:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800381a:	bf00      	nop
 800381c:	40023800 	.word	0x40023800
 8003820:	00f42400 	.word	0x00f42400
 8003824:	017d7840 	.word	0x017d7840

08003828 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e07b      	b.n	8003932 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383e:	2b00      	cmp	r3, #0
 8003840:	d108      	bne.n	8003854 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800384a:	d009      	beq.n	8003860 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	61da      	str	r2, [r3, #28]
 8003852:	e005      	b.n	8003860 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d106      	bne.n	8003880 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7fe ffba 	bl	80027f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003896:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80038a8:	431a      	orrs	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038b2:	431a      	orrs	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	431a      	orrs	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038d0:	431a      	orrs	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038e4:	ea42 0103 	orr.w	r1, r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	0c1b      	lsrs	r3, r3, #16
 80038fe:	f003 0104 	and.w	r1, r3, #4
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003906:	f003 0210 	and.w	r2, r3, #16
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	69da      	ldr	r2, [r3, #28]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003920:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b088      	sub	sp, #32
 800393e:	af00      	add	r7, sp, #0
 8003940:	60f8      	str	r0, [r7, #12]
 8003942:	60b9      	str	r1, [r7, #8]
 8003944:	603b      	str	r3, [r7, #0]
 8003946:	4613      	mov	r3, r2
 8003948:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800394a:	f7ff f86d 	bl	8002a28 <HAL_GetTick>
 800394e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003950:	88fb      	ldrh	r3, [r7, #6]
 8003952:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b01      	cmp	r3, #1
 800395e:	d001      	beq.n	8003964 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003960:	2302      	movs	r3, #2
 8003962:	e12a      	b.n	8003bba <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <HAL_SPI_Transmit+0x36>
 800396a:	88fb      	ldrh	r3, [r7, #6]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e122      	b.n	8003bba <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800397a:	2b01      	cmp	r3, #1
 800397c:	d101      	bne.n	8003982 <HAL_SPI_Transmit+0x48>
 800397e:	2302      	movs	r3, #2
 8003980:	e11b      	b.n	8003bba <HAL_SPI_Transmit+0x280>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2203      	movs	r2, #3
 800398e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	88fa      	ldrh	r2, [r7, #6]
 80039a2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	88fa      	ldrh	r2, [r7, #6]
 80039a8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039d0:	d10f      	bne.n	80039f2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039fc:	2b40      	cmp	r3, #64	@ 0x40
 80039fe:	d007      	beq.n	8003a10 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a18:	d152      	bne.n	8003ac0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d002      	beq.n	8003a28 <HAL_SPI_Transmit+0xee>
 8003a22:	8b7b      	ldrh	r3, [r7, #26]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d145      	bne.n	8003ab4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2c:	881a      	ldrh	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a38:	1c9a      	adds	r2, r3, #2
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	3b01      	subs	r3, #1
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a4c:	e032      	b.n	8003ab4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d112      	bne.n	8003a82 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a60:	881a      	ldrh	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6c:	1c9a      	adds	r2, r3, #2
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003a80:	e018      	b.n	8003ab4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a82:	f7fe ffd1 	bl	8002a28 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d803      	bhi.n	8003a9a <HAL_SPI_Transmit+0x160>
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a98:	d102      	bne.n	8003aa0 <HAL_SPI_Transmit+0x166>
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d109      	bne.n	8003ab4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e082      	b.n	8003bba <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1c7      	bne.n	8003a4e <HAL_SPI_Transmit+0x114>
 8003abe:	e053      	b.n	8003b68 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d002      	beq.n	8003ace <HAL_SPI_Transmit+0x194>
 8003ac8:	8b7b      	ldrh	r3, [r7, #26]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d147      	bne.n	8003b5e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	330c      	adds	r3, #12
 8003ad8:	7812      	ldrb	r2, [r2, #0]
 8003ada:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	3b01      	subs	r3, #1
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003af4:	e033      	b.n	8003b5e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d113      	bne.n	8003b2c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	330c      	adds	r3, #12
 8003b0e:	7812      	ldrb	r2, [r2, #0]
 8003b10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b16:	1c5a      	adds	r2, r3, #1
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	3b01      	subs	r3, #1
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003b2a:	e018      	b.n	8003b5e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b2c:	f7fe ff7c 	bl	8002a28 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	683a      	ldr	r2, [r7, #0]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d803      	bhi.n	8003b44 <HAL_SPI_Transmit+0x20a>
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b42:	d102      	bne.n	8003b4a <HAL_SPI_Transmit+0x210>
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d109      	bne.n	8003b5e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e02d      	b.n	8003bba <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1c6      	bne.n	8003af6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b68:	69fa      	ldr	r2, [r7, #28]
 8003b6a:	6839      	ldr	r1, [r7, #0]
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 f8b1 	bl	8003cd4 <SPI_EndRxTxTransaction>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10a      	bne.n	8003b9c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b86:	2300      	movs	r3, #0
 8003b88:	617b      	str	r3, [r7, #20]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	617b      	str	r3, [r7, #20]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	617b      	str	r3, [r7, #20]
 8003b9a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e000      	b.n	8003bba <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
  }
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3720      	adds	r7, #32
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
	...

08003bc4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b088      	sub	sp, #32
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	603b      	str	r3, [r7, #0]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003bd4:	f7fe ff28 	bl	8002a28 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bdc:	1a9b      	subs	r3, r3, r2
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	4413      	add	r3, r2
 8003be2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003be4:	f7fe ff20 	bl	8002a28 <HAL_GetTick>
 8003be8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003bea:	4b39      	ldr	r3, [pc, #228]	@ (8003cd0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	015b      	lsls	r3, r3, #5
 8003bf0:	0d1b      	lsrs	r3, r3, #20
 8003bf2:	69fa      	ldr	r2, [r7, #28]
 8003bf4:	fb02 f303 	mul.w	r3, r2, r3
 8003bf8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bfa:	e054      	b.n	8003ca6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c02:	d050      	beq.n	8003ca6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c04:	f7fe ff10 	bl	8002a28 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	69fa      	ldr	r2, [r7, #28]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d902      	bls.n	8003c1a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d13d      	bne.n	8003c96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003c28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c32:	d111      	bne.n	8003c58 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c3c:	d004      	beq.n	8003c48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c46:	d107      	bne.n	8003c58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c60:	d10f      	bne.n	8003c82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e017      	b.n	8003cc6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	bf0c      	ite	eq
 8003cb6:	2301      	moveq	r3, #1
 8003cb8:	2300      	movne	r3, #0
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	79fb      	ldrb	r3, [r7, #7]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d19b      	bne.n	8003bfc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3720      	adds	r7, #32
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	20000400 	.word	0x20000400

08003cd4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b088      	sub	sp, #32
 8003cd8:	af02      	add	r7, sp, #8
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	2102      	movs	r1, #2
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f7ff ff6a 	bl	8003bc4 <SPI_WaitFlagStateUntilTimeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d007      	beq.n	8003d06 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cfa:	f043 0220 	orr.w	r2, r3, #32
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e032      	b.n	8003d6c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d06:	4b1b      	ldr	r3, [pc, #108]	@ (8003d74 <SPI_EndRxTxTransaction+0xa0>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a1b      	ldr	r2, [pc, #108]	@ (8003d78 <SPI_EndRxTxTransaction+0xa4>)
 8003d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d10:	0d5b      	lsrs	r3, r3, #21
 8003d12:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003d16:	fb02 f303 	mul.w	r3, r2, r3
 8003d1a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d24:	d112      	bne.n	8003d4c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	2180      	movs	r1, #128	@ 0x80
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f7ff ff47 	bl	8003bc4 <SPI_WaitFlagStateUntilTimeout>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d016      	beq.n	8003d6a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d40:	f043 0220 	orr.w	r2, r3, #32
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e00f      	b.n	8003d6c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00a      	beq.n	8003d68 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	3b01      	subs	r3, #1
 8003d56:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d62:	2b80      	cmp	r3, #128	@ 0x80
 8003d64:	d0f2      	beq.n	8003d4c <SPI_EndRxTxTransaction+0x78>
 8003d66:	e000      	b.n	8003d6a <SPI_EndRxTxTransaction+0x96>
        break;
 8003d68:	bf00      	nop
  }

  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3718      	adds	r7, #24
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	20000400 	.word	0x20000400
 8003d78:	165e9f81 	.word	0x165e9f81

08003d7c <memset>:
 8003d7c:	4402      	add	r2, r0
 8003d7e:	4603      	mov	r3, r0
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d100      	bne.n	8003d86 <memset+0xa>
 8003d84:	4770      	bx	lr
 8003d86:	f803 1b01 	strb.w	r1, [r3], #1
 8003d8a:	e7f9      	b.n	8003d80 <memset+0x4>

08003d8c <__libc_init_array>:
 8003d8c:	b570      	push	{r4, r5, r6, lr}
 8003d8e:	4d0d      	ldr	r5, [pc, #52]	@ (8003dc4 <__libc_init_array+0x38>)
 8003d90:	4c0d      	ldr	r4, [pc, #52]	@ (8003dc8 <__libc_init_array+0x3c>)
 8003d92:	1b64      	subs	r4, r4, r5
 8003d94:	10a4      	asrs	r4, r4, #2
 8003d96:	2600      	movs	r6, #0
 8003d98:	42a6      	cmp	r6, r4
 8003d9a:	d109      	bne.n	8003db0 <__libc_init_array+0x24>
 8003d9c:	4d0b      	ldr	r5, [pc, #44]	@ (8003dcc <__libc_init_array+0x40>)
 8003d9e:	4c0c      	ldr	r4, [pc, #48]	@ (8003dd0 <__libc_init_array+0x44>)
 8003da0:	f000 f818 	bl	8003dd4 <_init>
 8003da4:	1b64      	subs	r4, r4, r5
 8003da6:	10a4      	asrs	r4, r4, #2
 8003da8:	2600      	movs	r6, #0
 8003daa:	42a6      	cmp	r6, r4
 8003dac:	d105      	bne.n	8003dba <__libc_init_array+0x2e>
 8003dae:	bd70      	pop	{r4, r5, r6, pc}
 8003db0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003db4:	4798      	blx	r3
 8003db6:	3601      	adds	r6, #1
 8003db8:	e7ee      	b.n	8003d98 <__libc_init_array+0xc>
 8003dba:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dbe:	4798      	blx	r3
 8003dc0:	3601      	adds	r6, #1
 8003dc2:	e7f2      	b.n	8003daa <__libc_init_array+0x1e>
 8003dc4:	08004ae8 	.word	0x08004ae8
 8003dc8:	08004ae8 	.word	0x08004ae8
 8003dcc:	08004ae8 	.word	0x08004ae8
 8003dd0:	08004aec 	.word	0x08004aec

08003dd4 <_init>:
 8003dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dd6:	bf00      	nop
 8003dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dda:	bc08      	pop	{r3}
 8003ddc:	469e      	mov	lr, r3
 8003dde:	4770      	bx	lr

08003de0 <_fini>:
 8003de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003de2:	bf00      	nop
 8003de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003de6:	bc08      	pop	{r3}
 8003de8:	469e      	mov	lr, r3
 8003dea:	4770      	bx	lr
