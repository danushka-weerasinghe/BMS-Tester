
BMS Tester - Cell Emulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006824  080001b0  080001b0  000011b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d70  080069d4  080069d4  000079d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007744  08007744  0000942c  2**0
                  CONTENTS
  4 .ARM          00000008  08007744  08007744  00008744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800774c  0800774c  0000942c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800774c  0800774c  0000874c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007750  08007750  00008750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000042c  20000000  08007754  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000942c  2**0
                  CONTENTS
 10 .bss          0000066c  2000042c  2000042c  0000942c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a98  20000a98  0000942c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000942c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004996d  00000000  00000000  0000945c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e63  00000000  00000000  00052dc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000033c8  00000000  00000000  00056c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000026dc  00000000  00000000  00059ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000037d7  00000000  00000000  0005c6d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fe2a  00000000  00000000  0005feab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef2b3  00000000  00000000  0007fcd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016ef88  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000e294  00000000  00000000  0016efcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0017d260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000042c 	.word	0x2000042c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080069bc 	.word	0x080069bc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000430 	.word	0x20000430
 80001ec:	080069bc 	.word	0x080069bc

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	@ 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2f>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000994:	bf24      	itt	cs
 8000996:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800099a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800099e:	d90d      	bls.n	80009bc <__aeabi_d2f+0x30>
 80009a0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009b4:	bf08      	it	eq
 80009b6:	f020 0001 	biceq.w	r0, r0, #1
 80009ba:	4770      	bx	lr
 80009bc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009c0:	d121      	bne.n	8000a06 <__aeabi_d2f+0x7a>
 80009c2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009c6:	bfbc      	itt	lt
 80009c8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009cc:	4770      	bxlt	lr
 80009ce:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009d6:	f1c2 0218 	rsb	r2, r2, #24
 80009da:	f1c2 0c20 	rsb	ip, r2, #32
 80009de:	fa10 f30c 	lsls.w	r3, r0, ip
 80009e2:	fa20 f002 	lsr.w	r0, r0, r2
 80009e6:	bf18      	it	ne
 80009e8:	f040 0001 	orrne.w	r0, r0, #1
 80009ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f8:	ea40 000c 	orr.w	r0, r0, ip
 80009fc:	fa23 f302 	lsr.w	r3, r3, r2
 8000a00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a04:	e7cc      	b.n	80009a0 <__aeabi_d2f+0x14>
 8000a06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a0a:	d107      	bne.n	8000a1c <__aeabi_d2f+0x90>
 8000a0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a10:	bf1e      	ittt	ne
 8000a12:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a16:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a1a:	4770      	bxne	lr
 8000a1c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop

08000a2c <__aeabi_frsub>:
 8000a2c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a30:	e002      	b.n	8000a38 <__addsf3>
 8000a32:	bf00      	nop

08000a34 <__aeabi_fsub>:
 8000a34:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a38 <__addsf3>:
 8000a38:	0042      	lsls	r2, r0, #1
 8000a3a:	bf1f      	itttt	ne
 8000a3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a40:	ea92 0f03 	teqne	r2, r3
 8000a44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a4c:	d06a      	beq.n	8000b24 <__addsf3+0xec>
 8000a4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a56:	bfc1      	itttt	gt
 8000a58:	18d2      	addgt	r2, r2, r3
 8000a5a:	4041      	eorgt	r1, r0
 8000a5c:	4048      	eorgt	r0, r1
 8000a5e:	4041      	eorgt	r1, r0
 8000a60:	bfb8      	it	lt
 8000a62:	425b      	neglt	r3, r3
 8000a64:	2b19      	cmp	r3, #25
 8000a66:	bf88      	it	hi
 8000a68:	4770      	bxhi	lr
 8000a6a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a72:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a7e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000a82:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000a86:	bf18      	it	ne
 8000a88:	4249      	negne	r1, r1
 8000a8a:	ea92 0f03 	teq	r2, r3
 8000a8e:	d03f      	beq.n	8000b10 <__addsf3+0xd8>
 8000a90:	f1a2 0201 	sub.w	r2, r2, #1
 8000a94:	fa41 fc03 	asr.w	ip, r1, r3
 8000a98:	eb10 000c 	adds.w	r0, r0, ip
 8000a9c:	f1c3 0320 	rsb	r3, r3, #32
 8000aa0:	fa01 f103 	lsl.w	r1, r1, r3
 8000aa4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000aa8:	d502      	bpl.n	8000ab0 <__addsf3+0x78>
 8000aaa:	4249      	negs	r1, r1
 8000aac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ab0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000ab4:	d313      	bcc.n	8000ade <__addsf3+0xa6>
 8000ab6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000aba:	d306      	bcc.n	8000aca <__addsf3+0x92>
 8000abc:	0840      	lsrs	r0, r0, #1
 8000abe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ac2:	f102 0201 	add.w	r2, r2, #1
 8000ac6:	2afe      	cmp	r2, #254	@ 0xfe
 8000ac8:	d251      	bcs.n	8000b6e <__addsf3+0x136>
 8000aca:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000ace:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ad2:	bf08      	it	eq
 8000ad4:	f020 0001 	biceq.w	r0, r0, #1
 8000ad8:	ea40 0003 	orr.w	r0, r0, r3
 8000adc:	4770      	bx	lr
 8000ade:	0049      	lsls	r1, r1, #1
 8000ae0:	eb40 0000 	adc.w	r0, r0, r0
 8000ae4:	3a01      	subs	r2, #1
 8000ae6:	bf28      	it	cs
 8000ae8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000aec:	d2ed      	bcs.n	8000aca <__addsf3+0x92>
 8000aee:	fab0 fc80 	clz	ip, r0
 8000af2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000af6:	ebb2 020c 	subs.w	r2, r2, ip
 8000afa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000afe:	bfaa      	itet	ge
 8000b00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b04:	4252      	neglt	r2, r2
 8000b06:	4318      	orrge	r0, r3
 8000b08:	bfbc      	itt	lt
 8000b0a:	40d0      	lsrlt	r0, r2
 8000b0c:	4318      	orrlt	r0, r3
 8000b0e:	4770      	bx	lr
 8000b10:	f092 0f00 	teq	r2, #0
 8000b14:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b18:	bf06      	itte	eq
 8000b1a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b1e:	3201      	addeq	r2, #1
 8000b20:	3b01      	subne	r3, #1
 8000b22:	e7b5      	b.n	8000a90 <__addsf3+0x58>
 8000b24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b2c:	bf18      	it	ne
 8000b2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b32:	d021      	beq.n	8000b78 <__addsf3+0x140>
 8000b34:	ea92 0f03 	teq	r2, r3
 8000b38:	d004      	beq.n	8000b44 <__addsf3+0x10c>
 8000b3a:	f092 0f00 	teq	r2, #0
 8000b3e:	bf08      	it	eq
 8000b40:	4608      	moveq	r0, r1
 8000b42:	4770      	bx	lr
 8000b44:	ea90 0f01 	teq	r0, r1
 8000b48:	bf1c      	itt	ne
 8000b4a:	2000      	movne	r0, #0
 8000b4c:	4770      	bxne	lr
 8000b4e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000b52:	d104      	bne.n	8000b5e <__addsf3+0x126>
 8000b54:	0040      	lsls	r0, r0, #1
 8000b56:	bf28      	it	cs
 8000b58:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000b5c:	4770      	bx	lr
 8000b5e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000b62:	bf3c      	itt	cc
 8000b64:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000b68:	4770      	bxcc	lr
 8000b6a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b6e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000b72:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b76:	4770      	bx	lr
 8000b78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b7c:	bf16      	itet	ne
 8000b7e:	4608      	movne	r0, r1
 8000b80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b84:	4601      	movne	r1, r0
 8000b86:	0242      	lsls	r2, r0, #9
 8000b88:	bf06      	itte	eq
 8000b8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b8e:	ea90 0f01 	teqeq	r0, r1
 8000b92:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_ui2f>:
 8000b98:	f04f 0300 	mov.w	r3, #0
 8000b9c:	e004      	b.n	8000ba8 <__aeabi_i2f+0x8>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_i2f>:
 8000ba0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	bf48      	it	mi
 8000ba6:	4240      	negmi	r0, r0
 8000ba8:	ea5f 0c00 	movs.w	ip, r0
 8000bac:	bf08      	it	eq
 8000bae:	4770      	bxeq	lr
 8000bb0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000bb4:	4601      	mov	r1, r0
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	e01c      	b.n	8000bf6 <__aeabi_l2f+0x2a>

08000bbc <__aeabi_ul2f>:
 8000bbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000bc0:	bf08      	it	eq
 8000bc2:	4770      	bxeq	lr
 8000bc4:	f04f 0300 	mov.w	r3, #0
 8000bc8:	e00a      	b.n	8000be0 <__aeabi_l2f+0x14>
 8000bca:	bf00      	nop

08000bcc <__aeabi_l2f>:
 8000bcc:	ea50 0201 	orrs.w	r2, r0, r1
 8000bd0:	bf08      	it	eq
 8000bd2:	4770      	bxeq	lr
 8000bd4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000bd8:	d502      	bpl.n	8000be0 <__aeabi_l2f+0x14>
 8000bda:	4240      	negs	r0, r0
 8000bdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000be0:	ea5f 0c01 	movs.w	ip, r1
 8000be4:	bf02      	ittt	eq
 8000be6:	4684      	moveq	ip, r0
 8000be8:	4601      	moveq	r1, r0
 8000bea:	2000      	moveq	r0, #0
 8000bec:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000bf0:	bf08      	it	eq
 8000bf2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000bf6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000bfa:	fabc f28c 	clz	r2, ip
 8000bfe:	3a08      	subs	r2, #8
 8000c00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c04:	db10      	blt.n	8000c28 <__aeabi_l2f+0x5c>
 8000c06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c0a:	4463      	add	r3, ip
 8000c0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c10:	f1c2 0220 	rsb	r2, r2, #32
 8000c14:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c18:	fa20 f202 	lsr.w	r2, r0, r2
 8000c1c:	eb43 0002 	adc.w	r0, r3, r2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f102 0220 	add.w	r2, r2, #32
 8000c2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c30:	f1c2 0220 	rsb	r2, r2, #32
 8000c34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c38:	fa21 f202 	lsr.w	r2, r1, r2
 8000c3c:	eb43 0002 	adc.w	r0, r3, r2
 8000c40:	bf08      	it	eq
 8000c42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	4608      	mov	r0, r1
 8000f42:	4611      	mov	r1, r2
 8000f44:	461a      	mov	r2, r3
 8000f46:	4603      	mov	r3, r0
 8000f48:	817b      	strh	r3, [r7, #10]
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	813b      	strh	r3, [r7, #8]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8000f58:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8000f5a:	7dbb      	ldrb	r3, [r7, #22]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	bf0c      	ite	eq
 8000f60:	2301      	moveq	r3, #1
 8000f62:	2300      	movne	r3, #0
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8000f68:	897a      	ldrh	r2, [r7, #10]
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	b298      	uxth	r0, r3
 8000f70:	893b      	ldrh	r3, [r7, #8]
 8000f72:	3301      	adds	r3, #1
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	893a      	ldrh	r2, [r7, #8]
 8000f78:	8979      	ldrh	r1, [r7, #10]
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	68f8      	ldr	r0, [r7, #12]
 8000f80:	f001 f875 	bl	800206e <u8g2_IsIntersection>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d040      	beq.n	800100c <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	75fb      	strb	r3, [r7, #23]
  while(len > 0) {
 8000f8e:	e035      	b.n	8000ffc <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 8000f90:	6a3b      	ldr	r3, [r7, #32]
 8000f92:	781a      	ldrb	r2, [r3, #0]
 8000f94:	7dfb      	ldrb	r3, [r7, #23]
 8000f96:	4013      	ands	r3, r2
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d00c      	beq.n	8000fb8 <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	7dba      	ldrb	r2, [r7, #22]
 8000fa2:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8000fa6:	893a      	ldrh	r2, [r7, #8]
 8000fa8:	8979      	ldrh	r1, [r7, #10]
 8000faa:	2300      	movs	r3, #0
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	2301      	movs	r3, #1
 8000fb0:	68f8      	ldr	r0, [r7, #12]
 8000fb2:	f000 ff9e 	bl	8001ef2 <u8g2_DrawHVLine>
 8000fb6:	e010      	b.n	8000fda <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d10b      	bne.n	8000fda <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	7d7a      	ldrb	r2, [r7, #21]
 8000fc6:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8000fca:	893a      	ldrh	r2, [r7, #8]
 8000fcc:	8979      	ldrh	r1, [r7, #10]
 8000fce:	2300      	movs	r3, #0
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	68f8      	ldr	r0, [r7, #12]
 8000fd6:	f000 ff8c 	bl	8001ef2 <u8g2_DrawHVLine>
    }
    x++;
 8000fda:	897b      	ldrh	r3, [r7, #10]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 8000fe0:	7dfb      	ldrb	r3, [r7, #23]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 8000fe6:	7dfb      	ldrb	r3, [r7, #23]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d104      	bne.n	8000ff6 <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 8000fec:	2301      	movs	r3, #1
 8000fee:	75fb      	strb	r3, [r7, #23]
      b++;
 8000ff0:	6a3b      	ldr	r3, [r7, #32]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	623b      	str	r3, [r7, #32]
    }
    len--;
 8000ff6:	88fb      	ldrh	r3, [r7, #6]
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	80fb      	strh	r3, [r7, #6]
  while(len > 0) {
 8000ffc:	88fb      	ldrh	r3, [r7, #6]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1c6      	bne.n	8000f90 <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	7dba      	ldrb	r2, [r7, #22]
 8001006:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
 800100a:	e000      	b.n	800100e <u8g2_DrawHXBM+0xd6>
    return;
 800100c:	bf00      	nop
}
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af02      	add	r7, sp, #8
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	4608      	mov	r0, r1
 800101e:	4611      	mov	r1, r2
 8001020:	461a      	mov	r2, r3
 8001022:	4603      	mov	r3, r0
 8001024:	817b      	strh	r3, [r7, #10]
 8001026:	460b      	mov	r3, r1
 8001028:	813b      	strh	r3, [r7, #8]
 800102a:	4613      	mov	r3, r2
 800102c:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 800102e:	88fb      	ldrh	r3, [r7, #6]
 8001030:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 8001032:	8afb      	ldrh	r3, [r7, #22]
 8001034:	3307      	adds	r3, #7
 8001036:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 8001038:	8afb      	ldrh	r3, [r7, #22]
 800103a:	08db      	lsrs	r3, r3, #3
 800103c:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800103e:	897a      	ldrh	r2, [r7, #10]
 8001040:	88fb      	ldrh	r3, [r7, #6]
 8001042:	4413      	add	r3, r2
 8001044:	b298      	uxth	r0, r3
 8001046:	893a      	ldrh	r2, [r7, #8]
 8001048:	8c3b      	ldrh	r3, [r7, #32]
 800104a:	4413      	add	r3, r2
 800104c:	b29b      	uxth	r3, r3
 800104e:	893a      	ldrh	r2, [r7, #8]
 8001050:	8979      	ldrh	r1, [r7, #10]
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	4603      	mov	r3, r0
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	f001 f809 	bl	800206e <u8g2_IsIntersection>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d017      	beq.n	8001092 <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8001062:	e012      	b.n	800108a <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8001064:	88f8      	ldrh	r0, [r7, #6]
 8001066:	893a      	ldrh	r2, [r7, #8]
 8001068:	8979      	ldrh	r1, [r7, #10]
 800106a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	4603      	mov	r3, r0
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f7ff ff61 	bl	8000f38 <u8g2_DrawHXBM>
    bitmap += blen;
 8001076:	8afb      	ldrh	r3, [r7, #22]
 8001078:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800107a:	4413      	add	r3, r2
 800107c:	627b      	str	r3, [r7, #36]	@ 0x24
    y++;
 800107e:	893b      	ldrh	r3, [r7, #8]
 8001080:	3301      	adds	r3, #1
 8001082:	813b      	strh	r3, [r7, #8]
    h--;
 8001084:	8c3b      	ldrh	r3, [r7, #32]
 8001086:	3b01      	subs	r3, #1
 8001088:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 800108a:	8c3b      	ldrh	r3, [r7, #32]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d1e9      	bne.n	8001064 <u8g2_DrawXBM+0x50>
 8001090:	e000      	b.n	8001094 <u8g2_DrawXBM+0x80>
    return;
 8001092:	bf00      	nop
  }
}
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b084      	sub	sp, #16
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	7c1b      	ldrb	r3, [r3, #16]
 80010a8:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80010b0:	461a      	mov	r2, r3
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	fb02 f303 	mul.w	r3, r2, r3
 80010b8:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f005 fc4b 	bl	8006964 <memset>
}
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b086      	sub	sp, #24
 80010da:	af02      	add	r7, sp, #8
 80010dc:	6078      	str	r0, [r7, #4]
 80010de:	460b      	mov	r3, r1
 80010e0:	70fb      	strb	r3, [r7, #3]
 80010e2:	4613      	mov	r3, r2
 80010e4:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	7c1b      	ldrb	r3, [r3, #16]
 80010ec:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 80010ee:	78fb      	ldrb	r3, [r7, #3]
 80010f0:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010f6:	60bb      	str	r3, [r7, #8]
  offset *= w;
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	89ba      	ldrh	r2, [r7, #12]
 80010fe:	fb12 f303 	smulbb	r3, r2, r3
 8001102:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8001104:	89bb      	ldrh	r3, [r7, #12]
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 800110a:	89bb      	ldrh	r3, [r7, #12]
 800110c:	68ba      	ldr	r2, [r7, #8]
 800110e:	4413      	add	r3, r2
 8001110:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001112:	7bf9      	ldrb	r1, [r7, #15]
 8001114:	78ba      	ldrb	r2, [r7, #2]
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	460b      	mov	r3, r1
 800111c:	2100      	movs	r1, #0
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f001 fc8b 	bl	8002a3a <u8x8_DrawTile>
}
 8001124:	bf00      	nop
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800113e:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001146:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	7c5b      	ldrb	r3, [r3, #17]
 800114e:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8001150:	7bba      	ldrb	r2, [r7, #14]
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	4619      	mov	r1, r3
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff ffbd 	bl	80010d6 <u8g2_send_tile_row>
    src_row++;
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	3301      	adds	r3, #1
 8001160:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8001162:	7bbb      	ldrb	r3, [r7, #14]
 8001164:	3301      	adds	r3, #1
 8001166:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8001168:	7bfa      	ldrb	r2, [r7, #15]
 800116a:	7b7b      	ldrb	r3, [r7, #13]
 800116c:	429a      	cmp	r2, r3
 800116e:	d203      	bcs.n	8001178 <u8g2_send_buffer+0x4c>
 8001170:	7bba      	ldrb	r2, [r7, #14]
 8001172:	7b3b      	ldrb	r3, [r7, #12]
 8001174:	429a      	cmp	r2, r3
 8001176:	d3eb      	bcc.n	8001150 <u8g2_send_buffer+0x24>
}
 8001178:	bf00      	nop
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	78fa      	ldrb	r2, [r7, #3]
 8001190:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  u8g2->cb->update_dimension(u8g2);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	4798      	blx	r3
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d002      	beq.n	80011c8 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ff69 	bl	800109a <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 80011c8:	2100      	movs	r1, #0
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ffd8 	bl	8001180 <u8g2_SetBufferCurrTileRow>
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff ffa3 	bl	800112c <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80011ec:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	4413      	add	r3, r2
 80011f8:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	7c5b      	ldrb	r3, [r3, #17]
 8001200:	7bfa      	ldrb	r2, [r7, #15]
 8001202:	429a      	cmp	r2, r3
 8001204:	d304      	bcc.n	8001210 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f001 fc79 	bl	8002afe <u8x8_RefreshDisplay>
    return 0;
 800120c:	2300      	movs	r3, #0
 800120e:	e00d      	b.n	800122c <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8001216:	2b00      	cmp	r3, #0
 8001218:	d002      	beq.n	8001220 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ff3d 	bl	800109a <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8001220:	7bfb      	ldrb	r3, [r7, #15]
 8001222:	4619      	mov	r1, r3
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ffab 	bl	8001180 <u8g2_SetBufferCurrTileRow>
  return 1;
 800122a:	2301      	movs	r3, #1
}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ffb7 	bl	80011b0 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff ffc8 	bl	80011d8 <u8g2_NextPage>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f9      	bne.n	8001242 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 800124e:	2100      	movs	r1, #0
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ff95 	bl	8001180 <u8g2_SetBufferCurrTileRow>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2208      	movs	r2, #8
 800126c:	701a      	strb	r2, [r3, #0]
  return buf;
 800126e:	4b03      	ldr	r3, [pc, #12]	@ (800127c <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8001270:	4618      	mov	r0, r3
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	20000448 	.word	0x20000448

08001280 <u8g2_Setup_st7565_64128n_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_lm6063, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_64128n_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af02      	add	r7, sp, #8
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
 800128c:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_64128n, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a0b      	ldr	r2, [pc, #44]	@ (80012c4 <u8g2_Setup_st7565_64128n_f+0x44>)
 8001296:	490c      	ldr	r1, [pc, #48]	@ (80012c8 <u8g2_Setup_st7565_64128n_f+0x48>)
 8001298:	68f8      	ldr	r0, [r7, #12]
 800129a:	f001 fc91 	bl	8002bc0 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 800129e:	f107 0313 	add.w	r3, r7, #19
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff ffdc 	bl	8001260 <u8g2_m_16_8_f>
 80012a8:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80012aa:	7cfa      	ldrb	r2, [r7, #19]
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <u8g2_Setup_st7565_64128n_f+0x4c>)
 80012b2:	6979      	ldr	r1, [r7, #20]
 80012b4:	68f8      	ldr	r0, [r7, #12]
 80012b6:	f000 ffc4 	bl	8002242 <u8g2_SetupBuffer>
}
 80012ba:	bf00      	nop
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	08002755 	.word	0x08002755
 80012c8:	080028f5 	.word	0x080028f5
 80012cc:	080020c5 	.word	0x080020c5

080012d0 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	70fb      	strb	r3, [r7, #3]
  font += offset;
 80012dc:	78fb      	ldrb	r3, [r7, #3]
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	781b      	ldrb	r3, [r3, #0]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8001300:	78fb      	ldrb	r3, [r7, #3]
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	81fb      	strh	r3, [r7, #14]
    font++;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3301      	adds	r3, #1
 8001312:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8001314:	89fb      	ldrh	r3, [r7, #14]
 8001316:	021b      	lsls	r3, r3, #8
 8001318:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	89fb      	ldrh	r3, [r7, #14]
 8001322:	4413      	add	r3, r2
 8001324:	81fb      	strh	r3, [r7, #14]
    return pos;
 8001326:	89fb      	ldrh	r3, [r7, #14]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800133e:	2100      	movs	r1, #0
 8001340:	6838      	ldr	r0, [r7, #0]
 8001342:	f7ff ffc5 	bl	80012d0 <u8g2_font_get_byte>
 8001346:	4603      	mov	r3, r0
 8001348:	461a      	mov	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800134e:	2101      	movs	r1, #1
 8001350:	6838      	ldr	r0, [r7, #0]
 8001352:	f7ff ffbd 	bl	80012d0 <u8g2_font_get_byte>
 8001356:	4603      	mov	r3, r0
 8001358:	461a      	mov	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 800135e:	2102      	movs	r1, #2
 8001360:	6838      	ldr	r0, [r7, #0]
 8001362:	f7ff ffb5 	bl	80012d0 <u8g2_font_get_byte>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800136e:	2103      	movs	r1, #3
 8001370:	6838      	ldr	r0, [r7, #0]
 8001372:	f7ff ffad 	bl	80012d0 <u8g2_font_get_byte>
 8001376:	4603      	mov	r3, r0
 8001378:	461a      	mov	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800137e:	2104      	movs	r1, #4
 8001380:	6838      	ldr	r0, [r7, #0]
 8001382:	f7ff ffa5 	bl	80012d0 <u8g2_font_get_byte>
 8001386:	4603      	mov	r3, r0
 8001388:	461a      	mov	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800138e:	2105      	movs	r1, #5
 8001390:	6838      	ldr	r0, [r7, #0]
 8001392:	f7ff ff9d 	bl	80012d0 <u8g2_font_get_byte>
 8001396:	4603      	mov	r3, r0
 8001398:	461a      	mov	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800139e:	2106      	movs	r1, #6
 80013a0:	6838      	ldr	r0, [r7, #0]
 80013a2:	f7ff ff95 	bl	80012d0 <u8g2_font_get_byte>
 80013a6:	4603      	mov	r3, r0
 80013a8:	461a      	mov	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80013ae:	2107      	movs	r1, #7
 80013b0:	6838      	ldr	r0, [r7, #0]
 80013b2:	f7ff ff8d 	bl	80012d0 <u8g2_font_get_byte>
 80013b6:	4603      	mov	r3, r0
 80013b8:	461a      	mov	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80013be:	2108      	movs	r1, #8
 80013c0:	6838      	ldr	r0, [r7, #0]
 80013c2:	f7ff ff85 	bl	80012d0 <u8g2_font_get_byte>
 80013c6:	4603      	mov	r3, r0
 80013c8:	461a      	mov	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80013ce:	2109      	movs	r1, #9
 80013d0:	6838      	ldr	r0, [r7, #0]
 80013d2:	f7ff ff7d 	bl	80012d0 <u8g2_font_get_byte>
 80013d6:	4603      	mov	r3, r0
 80013d8:	b25a      	sxtb	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80013de:	210a      	movs	r1, #10
 80013e0:	6838      	ldr	r0, [r7, #0]
 80013e2:	f7ff ff75 	bl	80012d0 <u8g2_font_get_byte>
 80013e6:	4603      	mov	r3, r0
 80013e8:	b25a      	sxtb	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80013ee:	210b      	movs	r1, #11
 80013f0:	6838      	ldr	r0, [r7, #0]
 80013f2:	f7ff ff6d 	bl	80012d0 <u8g2_font_get_byte>
 80013f6:	4603      	mov	r3, r0
 80013f8:	b25a      	sxtb	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80013fe:	210c      	movs	r1, #12
 8001400:	6838      	ldr	r0, [r7, #0]
 8001402:	f7ff ff65 	bl	80012d0 <u8g2_font_get_byte>
 8001406:	4603      	mov	r3, r0
 8001408:	b25a      	sxtb	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800140e:	210d      	movs	r1, #13
 8001410:	6838      	ldr	r0, [r7, #0]
 8001412:	f7ff ff5d 	bl	80012d0 <u8g2_font_get_byte>
 8001416:	4603      	mov	r3, r0
 8001418:	b25a      	sxtb	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 800141e:	210e      	movs	r1, #14
 8001420:	6838      	ldr	r0, [r7, #0]
 8001422:	f7ff ff55 	bl	80012d0 <u8g2_font_get_byte>
 8001426:	4603      	mov	r3, r0
 8001428:	b25a      	sxtb	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800142e:	210f      	movs	r1, #15
 8001430:	6838      	ldr	r0, [r7, #0]
 8001432:	f7ff ff4d 	bl	80012d0 <u8g2_font_get_byte>
 8001436:	4603      	mov	r3, r0
 8001438:	b25a      	sxtb	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800143e:	2110      	movs	r1, #16
 8001440:	6838      	ldr	r0, [r7, #0]
 8001442:	f7ff ff45 	bl	80012d0 <u8g2_font_get_byte>
 8001446:	4603      	mov	r3, r0
 8001448:	b25a      	sxtb	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800144e:	2111      	movs	r1, #17
 8001450:	6838      	ldr	r0, [r7, #0]
 8001452:	f7ff ff4f 	bl	80012f4 <u8g2_font_get_word>
 8001456:	4603      	mov	r3, r0
 8001458:	461a      	mov	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800145e:	2113      	movs	r1, #19
 8001460:	6838      	ldr	r0, [r7, #0]
 8001462:	f7ff ff47 	bl	80012f4 <u8g2_font_get_word>
 8001466:	4603      	mov	r3, r0
 8001468:	461a      	mov	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800146e:	2115      	movs	r1, #21
 8001470:	6838      	ldr	r0, [r7, #0]
 8001472:	f7ff ff3f 	bl	80012f4 <u8g2_font_get_word>
 8001476:	4603      	mov	r3, r0
 8001478:	461a      	mov	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	82da      	strh	r2, [r3, #22]
#endif
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8001486:	b480      	push	{r7}
 8001488:	b085      	sub	sp, #20
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
 800148e:	460b      	mov	r3, r1
 8001490:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	7b1b      	ldrb	r3, [r3, #12]
 8001496:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 80014a0:	7bfa      	ldrb	r2, [r7, #15]
 80014a2:	7b7b      	ldrb	r3, [r7, #13]
 80014a4:	fa42 f303 	asr.w	r3, r2, r3
 80014a8:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 80014aa:	7b7b      	ldrb	r3, [r7, #13]
 80014ac:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 80014ae:	7bba      	ldrb	r2, [r7, #14]
 80014b0:	78fb      	ldrb	r3, [r7, #3]
 80014b2:	4413      	add	r3, r2
 80014b4:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 80014b6:	7bbb      	ldrb	r3, [r7, #14]
 80014b8:	2b07      	cmp	r3, #7
 80014ba:	d91a      	bls.n	80014f2 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 80014bc:	2308      	movs	r3, #8
 80014be:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80014c0:	7b3a      	ldrb	r2, [r7, #12]
 80014c2:	7b7b      	ldrb	r3, [r7, #13]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	1c5a      	adds	r2, r3, #1
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	7b3b      	ldrb	r3, [r7, #12]
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	b25a      	sxtb	r2, r3
 80014e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	b25b      	sxtb	r3, r3
 80014ea:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 80014ec:	7bbb      	ldrb	r3, [r7, #14]
 80014ee:	3b08      	subs	r3, #8
 80014f0:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 80014f2:	78fb      	ldrb	r3, [r7, #3]
 80014f4:	f04f 32ff 	mov.w	r2, #4294967295
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	43db      	mvns	r3, r3
 8001500:	b2da      	uxtb	r2, r3
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	4013      	ands	r3, r2
 8001506:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	7bba      	ldrb	r2, [r7, #14]
 800150c:	731a      	strb	r2, [r3, #12]
  return val;
 800150e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8001528:	78fb      	ldrb	r3, [r7, #3]
 800152a:	4619      	mov	r1, r3
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ffaa 	bl	8001486 <u8g2_font_decode_get_unsigned_bits>
 8001532:	4603      	mov	r3, r0
 8001534:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8001536:	2301      	movs	r3, #1
 8001538:	73bb      	strb	r3, [r7, #14]
  cnt--;
 800153a:	78fb      	ldrb	r3, [r7, #3]
 800153c:	3b01      	subs	r3, #1
 800153e:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8001540:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001544:	78fb      	ldrb	r3, [r7, #3]
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	73bb      	strb	r3, [r7, #14]
  v -= d;
 800154c:	7bfa      	ldrb	r2, [r7, #15]
 800154e:	7bbb      	ldrb	r3, [r7, #14]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	b2db      	uxtb	r3, r3
 8001554:	73fb      	strb	r3, [r7, #15]
  return v;
 8001556:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8001562:	b490      	push	{r4, r7}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	4604      	mov	r4, r0
 800156a:	4608      	mov	r0, r1
 800156c:	4611      	mov	r1, r2
 800156e:	461a      	mov	r2, r3
 8001570:	4623      	mov	r3, r4
 8001572:	80fb      	strh	r3, [r7, #6]
 8001574:	4603      	mov	r3, r0
 8001576:	717b      	strb	r3, [r7, #5]
 8001578:	460b      	mov	r3, r1
 800157a:	713b      	strb	r3, [r7, #4]
 800157c:	4613      	mov	r3, r2
 800157e:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8001580:	78fb      	ldrb	r3, [r7, #3]
 8001582:	2b02      	cmp	r3, #2
 8001584:	d014      	beq.n	80015b0 <u8g2_add_vector_y+0x4e>
 8001586:	2b02      	cmp	r3, #2
 8001588:	dc19      	bgt.n	80015be <u8g2_add_vector_y+0x5c>
 800158a:	2b00      	cmp	r3, #0
 800158c:	d002      	beq.n	8001594 <u8g2_add_vector_y+0x32>
 800158e:	2b01      	cmp	r3, #1
 8001590:	d007      	beq.n	80015a2 <u8g2_add_vector_y+0x40>
 8001592:	e014      	b.n	80015be <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8001594:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001598:	b29a      	uxth	r2, r3
 800159a:	88fb      	ldrh	r3, [r7, #6]
 800159c:	4413      	add	r3, r2
 800159e:	80fb      	strh	r3, [r7, #6]
      break;
 80015a0:	e014      	b.n	80015cc <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 80015a2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	88fb      	ldrh	r3, [r7, #6]
 80015aa:	4413      	add	r3, r2
 80015ac:	80fb      	strh	r3, [r7, #6]
      break;
 80015ae:	e00d      	b.n	80015cc <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 80015b0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	88fa      	ldrh	r2, [r7, #6]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	80fb      	strh	r3, [r7, #6]
      break;
 80015bc:	e006      	b.n	80015cc <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 80015be:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	88fa      	ldrh	r2, [r7, #6]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	80fb      	strh	r3, [r7, #6]
      break;      
 80015ca:	bf00      	nop
  }
  return dy;
 80015cc:	88fb      	ldrh	r3, [r7, #6]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc90      	pop	{r4, r7}
 80015d6:	4770      	bx	lr

080015d8 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80015d8:	b490      	push	{r4, r7}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4604      	mov	r4, r0
 80015e0:	4608      	mov	r0, r1
 80015e2:	4611      	mov	r1, r2
 80015e4:	461a      	mov	r2, r3
 80015e6:	4623      	mov	r3, r4
 80015e8:	80fb      	strh	r3, [r7, #6]
 80015ea:	4603      	mov	r3, r0
 80015ec:	717b      	strb	r3, [r7, #5]
 80015ee:	460b      	mov	r3, r1
 80015f0:	713b      	strb	r3, [r7, #4]
 80015f2:	4613      	mov	r3, r2
 80015f4:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80015f6:	78fb      	ldrb	r3, [r7, #3]
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d014      	beq.n	8001626 <u8g2_add_vector_x+0x4e>
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	dc19      	bgt.n	8001634 <u8g2_add_vector_x+0x5c>
 8001600:	2b00      	cmp	r3, #0
 8001602:	d002      	beq.n	800160a <u8g2_add_vector_x+0x32>
 8001604:	2b01      	cmp	r3, #1
 8001606:	d007      	beq.n	8001618 <u8g2_add_vector_x+0x40>
 8001608:	e014      	b.n	8001634 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 800160a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800160e:	b29a      	uxth	r2, r3
 8001610:	88fb      	ldrh	r3, [r7, #6]
 8001612:	4413      	add	r3, r2
 8001614:	80fb      	strh	r3, [r7, #6]
      break;
 8001616:	e014      	b.n	8001642 <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8001618:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800161c:	b29b      	uxth	r3, r3
 800161e:	88fa      	ldrh	r2, [r7, #6]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	80fb      	strh	r3, [r7, #6]
      break;
 8001624:	e00d      	b.n	8001642 <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 8001626:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800162a:	b29b      	uxth	r3, r3
 800162c:	88fa      	ldrh	r2, [r7, #6]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	80fb      	strh	r3, [r7, #6]
      break;
 8001632:	e006      	b.n	8001642 <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8001634:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001638:	b29a      	uxth	r2, r3
 800163a:	88fb      	ldrh	r3, [r7, #6]
 800163c:	4413      	add	r3, r2
 800163e:	80fb      	strh	r3, [r7, #6]
      break;      
 8001640:	bf00      	nop
  }
  return dx;
 8001642:	88fb      	ldrh	r3, [r7, #6]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bc90      	pop	{r4, r7}
 800164c:	4770      	bx	lr

0800164e <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b088      	sub	sp, #32
 8001652:	af02      	add	r7, sp, #8
 8001654:	6078      	str	r0, [r7, #4]
 8001656:	460b      	mov	r3, r1
 8001658:	70fb      	strb	r3, [r7, #3]
 800165a:	4613      	mov	r3, r2
 800165c:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3360      	adds	r3, #96	@ 0x60
 8001662:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8001664:	78fb      	ldrb	r3, [r7, #3]
 8001666:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800166e:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001676:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800167e:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8001680:	7bfa      	ldrb	r2, [r7, #15]
 8001682:	7d7b      	ldrb	r3, [r7, #21]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8001688:	7bfb      	ldrb	r3, [r7, #15]
 800168a:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 800168c:	7dfa      	ldrb	r2, [r7, #23]
 800168e:	7bfb      	ldrb	r3, [r7, #15]
 8001690:	429a      	cmp	r2, r3
 8001692:	d201      	bcs.n	8001698 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8001694:	7dfb      	ldrb	r3, [r7, #23]
 8001696:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	889b      	ldrh	r3, [r3, #4]
 800169c:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	88db      	ldrh	r3, [r3, #6]
 80016a2:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80016a4:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80016a8:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	7c1b      	ldrb	r3, [r3, #16]
 80016b0:	89b8      	ldrh	r0, [r7, #12]
 80016b2:	f7ff ff91 	bl	80015d8 <u8g2_add_vector_x>
 80016b6:	4603      	mov	r3, r0
 80016b8:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80016ba:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80016be:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	7c1b      	ldrb	r3, [r3, #16]
 80016c6:	8978      	ldrh	r0, [r7, #10]
 80016c8:	f7ff ff4b 	bl	8001562 <u8g2_add_vector_y>
 80016cc:	4603      	mov	r3, r0
 80016ce:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80016d0:	78bb      	ldrb	r3, [r7, #2]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d010      	beq.n	80016f8 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	7b9a      	ldrb	r2, [r3, #14]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 80016e0:	7dbb      	ldrb	r3, [r7, #22]
 80016e2:	b298      	uxth	r0, r3
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	7c1b      	ldrb	r3, [r3, #16]
 80016e8:	897a      	ldrh	r2, [r7, #10]
 80016ea:	89b9      	ldrh	r1, [r7, #12]
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	4603      	mov	r3, r0
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 fbfe 	bl	8001ef2 <u8g2_DrawHVLine>
 80016f6:	e013      	b.n	8001720 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	7b5b      	ldrb	r3, [r3, #13]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d10f      	bne.n	8001720 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	7bda      	ldrb	r2, [r3, #15]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 800170a:	7dbb      	ldrb	r3, [r7, #22]
 800170c:	b298      	uxth	r0, r3
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	7c1b      	ldrb	r3, [r3, #16]
 8001712:	897a      	ldrh	r2, [r7, #10]
 8001714:	89b9      	ldrh	r1, [r7, #12]
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	4603      	mov	r3, r0
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 fbe9 	bl	8001ef2 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8001720:	7dfa      	ldrb	r2, [r7, #23]
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	429a      	cmp	r2, r3
 8001726:	d309      	bcc.n	800173c <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8001728:	7dfa      	ldrb	r2, [r7, #23]
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	757b      	strb	r3, [r7, #21]
    ly++;
 8001734:	7d3b      	ldrb	r3, [r7, #20]
 8001736:	3301      	adds	r3, #1
 8001738:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 800173a:	e79d      	b.n	8001678 <u8g2_font_decode_len+0x2a>
      break;
 800173c:	bf00      	nop
  }
  lx += cnt;
 800173e:	7d7a      	ldrb	r2, [r7, #21]
 8001740:	7dfb      	ldrb	r3, [r7, #23]
 8001742:	4413      	add	r3, r2
 8001744:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8001746:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 800174e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	725a      	strb	r2, [r3, #9]
}
 8001756:	bf00      	nop
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b084      	sub	sp, #16
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
 8001766:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3360      	adds	r3, #96	@ 0x60
 800176c:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2200      	movs	r2, #0
 8001778:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8001780:	4619      	mov	r1, r3
 8001782:	68f8      	ldr	r0, [r7, #12]
 8001784:	f7ff fe7f 	bl	8001486 <u8g2_font_decode_get_unsigned_bits>
 8001788:	4603      	mov	r3, r0
 800178a:	b25a      	sxtb	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8001796:	4619      	mov	r1, r3
 8001798:	68f8      	ldr	r0, [r7, #12]
 800179a:	f7ff fe74 	bl	8001486 <u8g2_font_decode_get_unsigned_bits>
 800179e:	4603      	mov	r3, r0
 80017a0:	b25a      	sxtb	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	7b9b      	ldrb	r3, [r3, #14]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	bf0c      	ite	eq
 80017b8:	2301      	moveq	r3, #1
 80017ba:	2300      	movne	r3, #0
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	461a      	mov	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	73da      	strb	r2, [r3, #15]
}
 80017c4:	bf00      	nop
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	@ 0x28
 80017d0:	af02      	add	r7, sp, #8
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	3360      	adds	r3, #96	@ 0x60
 80017da:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 80017dc:	6839      	ldr	r1, [r7, #0]
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff ffbd 	bl	800175e <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 80017ea:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 80017f2:	4619      	mov	r1, r3
 80017f4:	6978      	ldr	r0, [r7, #20]
 80017f6:	f7ff fe91 	bl	800151c <u8g2_font_decode_get_signed_bits>
 80017fa:	4603      	mov	r3, r0
 80017fc:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8001804:	4619      	mov	r1, r3
 8001806:	6978      	ldr	r0, [r7, #20]
 8001808:	f7ff fe88 	bl	800151c <u8g2_font_decode_get_signed_bits>
 800180c:	4603      	mov	r3, r0
 800180e:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8001816:	4619      	mov	r1, r3
 8001818:	6978      	ldr	r0, [r7, #20]
 800181a:	f7ff fe7f 	bl	800151c <u8g2_font_decode_get_signed_bits>
 800181e:	4603      	mov	r3, r0
 8001820:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001828:	2b00      	cmp	r3, #0
 800182a:	f340 80d7 	ble.w	80019dc <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	8898      	ldrh	r0, [r3, #4]
 8001832:	7cfa      	ldrb	r2, [r7, #19]
 8001834:	7c7b      	ldrb	r3, [r7, #17]
 8001836:	4413      	add	r3, r2
 8001838:	b2db      	uxtb	r3, r3
 800183a:	425b      	negs	r3, r3
 800183c:	b2db      	uxtb	r3, r3
 800183e:	b25a      	sxtb	r2, r3
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	7c1b      	ldrb	r3, [r3, #16]
 8001844:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001848:	f7ff fec6 	bl	80015d8 <u8g2_add_vector_x>
 800184c:	4603      	mov	r3, r0
 800184e:	461a      	mov	r2, r3
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	88d8      	ldrh	r0, [r3, #6]
 8001858:	7cfa      	ldrb	r2, [r7, #19]
 800185a:	7c7b      	ldrb	r3, [r7, #17]
 800185c:	4413      	add	r3, r2
 800185e:	b2db      	uxtb	r3, r3
 8001860:	425b      	negs	r3, r3
 8001862:	b2db      	uxtb	r3, r3
 8001864:	b25a      	sxtb	r2, r3
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	7c1b      	ldrb	r3, [r3, #16]
 800186a:	f997 1012 	ldrsb.w	r1, [r7, #18]
 800186e:	f7ff fe78 	bl	8001562 <u8g2_add_vector_y>
 8001872:	4603      	mov	r3, r0
 8001874:	461a      	mov	r2, r3
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	889b      	ldrh	r3, [r3, #4]
 800187e:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	88db      	ldrh	r3, [r3, #6]
 8001884:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8001886:	8bfb      	ldrh	r3, [r7, #30]
 8001888:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 800188a:	8b7b      	ldrh	r3, [r7, #26]
 800188c:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	7c1b      	ldrb	r3, [r3, #16]
 8001892:	2b03      	cmp	r3, #3
 8001894:	d85a      	bhi.n	800194c <u8g2_font_decode_glyph+0x180>
 8001896:	a201      	add	r2, pc, #4	@ (adr r2, 800189c <u8g2_font_decode_glyph+0xd0>)
 8001898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800189c:	080018ad 	.word	0x080018ad
 80018a0:	080018c9 	.word	0x080018c9
 80018a4:	080018f1 	.word	0x080018f1
 80018a8:	08001925 	.word	0x08001925
      {
	case 0:
	    x1 += decode->glyph_width;
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	8bbb      	ldrh	r3, [r7, #28]
 80018b6:	4413      	add	r3, r2
 80018b8:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 80018ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80018be:	b29a      	uxth	r2, r3
 80018c0:	8b3b      	ldrh	r3, [r7, #24]
 80018c2:	4413      	add	r3, r2
 80018c4:	833b      	strh	r3, [r7, #24]
	    break;
 80018c6:	e041      	b.n	800194c <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 80018c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	8bfa      	ldrh	r2, [r7, #30]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80018d4:	8bfb      	ldrh	r3, [r7, #30]
 80018d6:	3301      	adds	r3, #1
 80018d8:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80018da:	8bbb      	ldrh	r3, [r7, #28]
 80018dc:	3301      	adds	r3, #1
 80018de:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	8b3b      	ldrh	r3, [r7, #24]
 80018ea:	4413      	add	r3, r2
 80018ec:	833b      	strh	r3, [r7, #24]
	    break;
 80018ee:	e02d      	b.n	800194c <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	8bfa      	ldrh	r2, [r7, #30]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80018fe:	8bfb      	ldrh	r3, [r7, #30]
 8001900:	3301      	adds	r3, #1
 8001902:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8001904:	8bbb      	ldrh	r3, [r7, #28]
 8001906:	3301      	adds	r3, #1
 8001908:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 800190a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800190e:	b29b      	uxth	r3, r3
 8001910:	8b7a      	ldrh	r2, [r7, #26]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001916:	8b7b      	ldrh	r3, [r7, #26]
 8001918:	3301      	adds	r3, #1
 800191a:	837b      	strh	r3, [r7, #26]
	    y1++;
 800191c:	8b3b      	ldrh	r3, [r7, #24]
 800191e:	3301      	adds	r3, #1
 8001920:	833b      	strh	r3, [r7, #24]
	    break;	  
 8001922:	e013      	b.n	800194c <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8001924:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001928:	b29a      	uxth	r2, r3
 800192a:	8bbb      	ldrh	r3, [r7, #28]
 800192c:	4413      	add	r3, r2
 800192e:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001936:	b29b      	uxth	r3, r3
 8001938:	8b7a      	ldrh	r2, [r7, #26]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800193e:	8b7b      	ldrh	r3, [r7, #26]
 8001940:	3301      	adds	r3, #1
 8001942:	837b      	strh	r3, [r7, #26]
	    y1++;
 8001944:	8b3b      	ldrh	r3, [r7, #24]
 8001946:	3301      	adds	r3, #1
 8001948:	833b      	strh	r3, [r7, #24]
	    break;	  
 800194a:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 800194c:	8bb8      	ldrh	r0, [r7, #28]
 800194e:	8b7a      	ldrh	r2, [r7, #26]
 8001950:	8bf9      	ldrh	r1, [r7, #30]
 8001952:	8b3b      	ldrh	r3, [r7, #24]
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	4603      	mov	r3, r0
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f000 fb88 	bl	800206e <u8g2_IsIntersection>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d102      	bne.n	800196a <u8g2_font_decode_glyph+0x19e>
	return d;
 8001964:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001968:	e03a      	b.n	80019e0 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	2200      	movs	r2, #0
 800196e:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	2200      	movs	r2, #0
 8001974:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 800197c:	4619      	mov	r1, r3
 800197e:	6978      	ldr	r0, [r7, #20]
 8001980:	f7ff fd81 	bl	8001486 <u8g2_font_decode_get_unsigned_bits>
 8001984:	4603      	mov	r3, r0
 8001986:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 800198e:	4619      	mov	r1, r3
 8001990:	6978      	ldr	r0, [r7, #20]
 8001992:	f7ff fd78 	bl	8001486 <u8g2_font_decode_get_unsigned_bits>
 8001996:	4603      	mov	r3, r0
 8001998:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 800199a:	7bfb      	ldrb	r3, [r7, #15]
 800199c:	2200      	movs	r2, #0
 800199e:	4619      	mov	r1, r3
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff fe54 	bl	800164e <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 80019a6:	7bbb      	ldrb	r3, [r7, #14]
 80019a8:	2201      	movs	r2, #1
 80019aa:	4619      	mov	r1, r3
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff fe4e 	bl	800164e <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 80019b2:	2101      	movs	r1, #1
 80019b4:	6978      	ldr	r0, [r7, #20]
 80019b6:	f7ff fd66 	bl	8001486 <u8g2_font_decode_get_unsigned_bits>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1ec      	bne.n	800199a <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80019c6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	dd00      	ble.n	80019d0 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80019ce:	e7d2      	b.n	8001976 <u8g2_font_decode_glyph+0x1aa>
	break;
 80019d0:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	7b9a      	ldrb	r2, [r3, #14]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  }
  return d;
 80019dc:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3720      	adds	r7, #32
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f8:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	3317      	adds	r3, #23
 80019fe:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8001a00:	887b      	ldrh	r3, [r7, #2]
 8001a02:	2bff      	cmp	r3, #255	@ 0xff
 8001a04:	d82a      	bhi.n	8001a5c <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8001a06:	887b      	ldrh	r3, [r7, #2]
 8001a08:	2b60      	cmp	r3, #96	@ 0x60
 8001a0a:	d907      	bls.n	8001a1c <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8001a12:	461a      	mov	r2, r3
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	4413      	add	r3, r2
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	e009      	b.n	8001a30 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8001a1c:	887b      	ldrh	r3, [r7, #2]
 8001a1e:	2b40      	cmp	r3, #64	@ 0x40
 8001a20:	d906      	bls.n	8001a30 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8001a28:	461a      	mov	r2, r3
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	3301      	adds	r3, #1
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d04e      	beq.n	8001ad8 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	887b      	ldrh	r3, [r7, #2]
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d102      	bne.n	8001a4c <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	3302      	adds	r3, #2
 8001a4a:	e049      	b.n	8001ae0 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	4413      	add	r3, r2
 8001a58:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001a5a:	e7e9      	b.n	8001a30 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8001a62:	461a      	mov	r2, r3
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	4413      	add	r3, r2
 8001a68:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8001a6e:	2100      	movs	r1, #0
 8001a70:	6938      	ldr	r0, [r7, #16]
 8001a72:	f7ff fc3f 	bl	80012f4 <u8g2_font_get_word>
 8001a76:	4603      	mov	r3, r0
 8001a78:	461a      	mov	r2, r3
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001a80:	2102      	movs	r1, #2
 8001a82:	6938      	ldr	r0, [r7, #16]
 8001a84:	f7ff fc36 	bl	80012f4 <u8g2_font_get_word>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	3304      	adds	r3, #4
 8001a90:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8001a92:	89fa      	ldrh	r2, [r7, #14]
 8001a94:	887b      	ldrh	r3, [r7, #2]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d3e9      	bcc.n	8001a6e <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8001aa0:	89fb      	ldrh	r3, [r7, #14]
 8001aa2:	021b      	lsls	r3, r3, #8
 8001aa4:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	461a      	mov	r2, r3
 8001aae:	89fb      	ldrh	r3, [r7, #14]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8001ab4:	89fb      	ldrh	r3, [r7, #14]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d010      	beq.n	8001adc <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8001aba:	89fa      	ldrh	r2, [r7, #14]
 8001abc:	887b      	ldrh	r3, [r7, #2]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d102      	bne.n	8001ac8 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	3303      	adds	r3, #3
 8001ac6:	e00b      	b.n	8001ae0 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	3302      	adds	r3, #2
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8001ad6:	e7e0      	b.n	8001a9a <u8g2_font_get_glyph_data+0xb2>
	break;
 8001ad8:	bf00      	nop
 8001ada:	e000      	b.n	8001ade <u8g2_font_get_glyph_data+0xf6>
	break;
 8001adc:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	4608      	mov	r0, r1
 8001af2:	4611      	mov	r1, r2
 8001af4:	461a      	mov	r2, r3
 8001af6:	4603      	mov	r3, r0
 8001af8:	817b      	strh	r3, [r7, #10]
 8001afa:	460b      	mov	r3, r1
 8001afc:	813b      	strh	r3, [r7, #8]
 8001afe:	4613      	mov	r3, r2
 8001b00:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	897a      	ldrh	r2, [r7, #10]
 8001b0a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  u8g2->font_decode.target_y = y;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	893a      	ldrh	r2, [r7, #8]
 8001b12:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f7ff ff64 	bl	80019e8 <u8g2_font_get_glyph_data>
 8001b20:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d005      	beq.n	8001b34 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8001b28:	6939      	ldr	r1, [r7, #16]
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f7ff fe4e 	bl	80017cc <u8g2_font_decode_glyph>
 8001b30:	4603      	mov	r3, r0
 8001b32:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8001b34:	8afb      	ldrh	r3, [r7, #22]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	4608      	mov	r0, r1
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4603      	mov	r3, r0
 8001b50:	817b      	strh	r3, [r7, #10]
 8001b52:	460b      	mov	r3, r1
 8001b54:	813b      	strh	r3, [r7, #8]
 8001b56:	4613      	mov	r3, r2
 8001b58:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d833      	bhi.n	8001bcc <u8g2_DrawGlyph+0x8c>
 8001b64:	a201      	add	r2, pc, #4	@ (adr r2, 8001b6c <u8g2_DrawGlyph+0x2c>)
 8001b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6a:	bf00      	nop
 8001b6c:	08001b7d 	.word	0x08001b7d
 8001b70:	08001b91 	.word	0x08001b91
 8001b74:	08001ba5 	.word	0x08001ba5
 8001b78:	08001bb9 	.word	0x08001bb9
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b80:	68f8      	ldr	r0, [r7, #12]
 8001b82:	4798      	blx	r3
 8001b84:	4603      	mov	r3, r0
 8001b86:	461a      	mov	r2, r3
 8001b88:	893b      	ldrh	r3, [r7, #8]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	813b      	strh	r3, [r7, #8]
      break;
 8001b8e:	e01d      	b.n	8001bcc <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	4798      	blx	r3
 8001b98:	4603      	mov	r3, r0
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	897b      	ldrh	r3, [r7, #10]
 8001b9e:	1a9b      	subs	r3, r3, r2
 8001ba0:	817b      	strh	r3, [r7, #10]
      break;
 8001ba2:	e013      	b.n	8001bcc <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	4798      	blx	r3
 8001bac:	4603      	mov	r3, r0
 8001bae:	461a      	mov	r2, r3
 8001bb0:	893b      	ldrh	r3, [r7, #8]
 8001bb2:	1a9b      	subs	r3, r3, r2
 8001bb4:	813b      	strh	r3, [r7, #8]
      break;
 8001bb6:	e009      	b.n	8001bcc <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bbc:	68f8      	ldr	r0, [r7, #12]
 8001bbe:	4798      	blx	r3
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	897b      	ldrh	r3, [r7, #10]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	817b      	strh	r3, [r7, #10]
      break;
 8001bca:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8001bcc:	88fb      	ldrh	r3, [r7, #6]
 8001bce:	893a      	ldrh	r2, [r7, #8]
 8001bd0:	8979      	ldrh	r1, [r7, #10]
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f7ff ff88 	bl	8001ae8 <u8g2_font_draw_glyph>
 8001bd8:	4603      	mov	r3, r0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop

08001be4 <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	460b      	mov	r3, r1
 8001bf0:	817b      	strh	r3, [r7, #10]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f000 fca7 	bl	800254a <u8x8_utf8_init>
  sum = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	7812      	ldrb	r2, [r2, #0]
 8001c08:	4611      	mov	r1, r2
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	4798      	blx	r3
 8001c0e:	4603      	mov	r3, r0
 8001c10:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8001c12:	8abb      	ldrh	r3, [r7, #20]
 8001c14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d038      	beq.n	8001c8e <u8g2_draw_string+0xaa>
      break;
    str++;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8001c22:	8abb      	ldrh	r3, [r7, #20]
 8001c24:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d0e9      	beq.n	8001c00 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8001c2c:	8abb      	ldrh	r3, [r7, #20]
 8001c2e:	893a      	ldrh	r2, [r7, #8]
 8001c30:	8979      	ldrh	r1, [r7, #10]
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f7ff ff84 	bl	8001b40 <u8g2_DrawGlyph>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	d81e      	bhi.n	8001c84 <u8g2_draw_string+0xa0>
 8001c46:	a201      	add	r2, pc, #4	@ (adr r2, 8001c4c <u8g2_draw_string+0x68>)
 8001c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c4c:	08001c5d 	.word	0x08001c5d
 8001c50:	08001c67 	.word	0x08001c67
 8001c54:	08001c71 	.word	0x08001c71
 8001c58:	08001c7b 	.word	0x08001c7b
      {
	case 0:
	  x += delta;
 8001c5c:	897a      	ldrh	r2, [r7, #10]
 8001c5e:	8a7b      	ldrh	r3, [r7, #18]
 8001c60:	4413      	add	r3, r2
 8001c62:	817b      	strh	r3, [r7, #10]
	  break;
 8001c64:	e00e      	b.n	8001c84 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8001c66:	893a      	ldrh	r2, [r7, #8]
 8001c68:	8a7b      	ldrh	r3, [r7, #18]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	813b      	strh	r3, [r7, #8]
	  break;
 8001c6e:	e009      	b.n	8001c84 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8001c70:	897a      	ldrh	r2, [r7, #10]
 8001c72:	8a7b      	ldrh	r3, [r7, #18]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	817b      	strh	r3, [r7, #10]
	  break;
 8001c78:	e004      	b.n	8001c84 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8001c7a:	893a      	ldrh	r2, [r7, #8]
 8001c7c:	8a7b      	ldrh	r3, [r7, #18]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	813b      	strh	r3, [r7, #8]
	  break;
 8001c82:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8001c84:	8afa      	ldrh	r2, [r7, #22]
 8001c86:	8a7b      	ldrh	r3, [r7, #18]
 8001c88:	4413      	add	r3, r2
 8001c8a:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001c8c:	e7b8      	b.n	8001c00 <u8g2_draw_string+0x1c>
      break;
 8001c8e:	bf00      	nop
    }
  }
  return sum;
 8001c90:	8afb      	ldrh	r3, [r7, #22]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop

08001c9c <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	607b      	str	r3, [r7, #4]
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	817b      	strh	r3, [r7, #10]
 8001caa:	4613      	mov	r3, r2
 8001cac:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	4a06      	ldr	r2, [pc, #24]	@ (8001ccc <u8g2_DrawStr+0x30>)
 8001cb2:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8001cb4:	893a      	ldrh	r2, [r7, #8]
 8001cb6:	8979      	ldrh	r1, [r7, #10]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	f7ff ff92 	bl	8001be4 <u8g2_draw_string>
 8001cc0:	4603      	mov	r3, r0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	08002567 	.word	0x08002567

08001cd0 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d05d      	beq.n	8001d9c <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f993 2081 	ldrsb.w	r2, [r3, #129]	@ 0x81
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f993 2082 	ldrsb.w	r2, [r3, #130]	@ 0x82
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d04d      	beq.n	8001d9e <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d11c      	bne.n	8001d46 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f993 208e 	ldrsb.w	r2, [r3, #142]	@ 0x8e
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f993 3083 	ldrsb.w	r3, [r3, #131]	@ 0x83
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	da05      	bge.n	8001d28 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f993 2083 	ldrsb.w	r2, [r3, #131]	@ 0x83
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f993 3084 	ldrsb.w	r3, [r3, #132]	@ 0x84
 8001d34:	429a      	cmp	r2, r3
 8001d36:	dd32      	ble.n	8001d9e <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f993 2084 	ldrsb.w	r2, [r3, #132]	@ 0x84
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8001d44:	e02b      	b.n	8001d9e <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f993 308e 	ldrsb.w	r3, [r3, #142]	@ 0x8e
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8001d54:	4619      	mov	r1, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8001d5c:	440b      	add	r3, r1
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	da0d      	bge.n	8001d7e <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	4413      	add	r3, r2
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	b25a      	sxtb	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	dd07      	ble.n	8001d9e <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f993 2080 	ldrsb.w	r2, [r3, #128]	@ 0x80
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8001d9a:	e000      	b.n	8001d9e <u8g2_UpdateRefHeight+0xce>
    return;
 8001d9c:	bf00      	nop
  }  
}
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  return 0;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a04      	ldr	r2, [pc, #16]	@ (8001ddc <u8g2_SetFontPosBaseline+0x1c>)
 8001dcc:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	08001da9 	.word	0x08001da9

08001de0 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d00b      	beq.n	8001e0c <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	659a      	str	r2, [r3, #88]	@ 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	3374      	adds	r3, #116	@ 0x74
 8001dfe:	6839      	ldr	r1, [r7, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff fa97 	bl	8001334 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff ff62 	bl	8001cd0 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <u8g2_clip_intersection2>:
 will return 0 if there is no intersection and if a > b

 */

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len,
		u8g2_uint_t c, u8g2_uint_t d) {
 8001e14:	b480      	push	{r7}
 8001e16:	b087      	sub	sp, #28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	4611      	mov	r1, r2
 8001e20:	461a      	mov	r2, r3
 8001e22:	460b      	mov	r3, r1
 8001e24:	80fb      	strh	r3, [r7, #6]
 8001e26:	4613      	mov	r3, r2
 8001e28:	80bb      	strh	r3, [r7, #4]
	u8g2_uint_t a = *ap;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	82fb      	strh	r3, [r7, #22]
	u8g2_uint_t b;
	b = a;
 8001e30:	8afb      	ldrh	r3, [r7, #22]
 8001e32:	82bb      	strh	r3, [r7, #20]
	b += *len;
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	881a      	ldrh	r2, [r3, #0]
 8001e38:	8abb      	ldrh	r3, [r7, #20]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	82bb      	strh	r3, [r7, #20]
	/* be removed completly (be aware about memory curruption for wrong */
	/* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
	/* arguments) */

	/* removing the following if clause completly may lead to memory corruption of a>b */
	if (a > b) {
 8001e3e:	8afa      	ldrh	r2, [r7, #22]
 8001e40:	8abb      	ldrh	r3, [r7, #20]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d90b      	bls.n	8001e5e <u8g2_clip_intersection2+0x4a>
		/* replacing this if with a simple "return 0;" will not handle the case with negative a */
		if (a < d) {
 8001e46:	8afa      	ldrh	r2, [r7, #22]
 8001e48:	88bb      	ldrh	r3, [r7, #4]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d205      	bcs.n	8001e5a <u8g2_clip_intersection2+0x46>
			b = d;
 8001e4e:	88bb      	ldrh	r3, [r7, #4]
 8001e50:	82bb      	strh	r3, [r7, #20]
			b--;
 8001e52:	8abb      	ldrh	r3, [r7, #20]
 8001e54:	3b01      	subs	r3, #1
 8001e56:	82bb      	strh	r3, [r7, #20]
 8001e58:	e001      	b.n	8001e5e <u8g2_clip_intersection2+0x4a>
		} else {
			a = c;
 8001e5a:	88fb      	ldrh	r3, [r7, #6]
 8001e5c:	82fb      	strh	r3, [r7, #22]
		}
	}

	/* from now on, the asumption a <= b is ok */

	if (a >= d)
 8001e5e:	8afa      	ldrh	r2, [r7, #22]
 8001e60:	88bb      	ldrh	r3, [r7, #4]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d301      	bcc.n	8001e6a <u8g2_clip_intersection2+0x56>
		return 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	e01c      	b.n	8001ea4 <u8g2_clip_intersection2+0x90>
	if (b <= c)
 8001e6a:	8aba      	ldrh	r2, [r7, #20]
 8001e6c:	88fb      	ldrh	r3, [r7, #6]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d801      	bhi.n	8001e76 <u8g2_clip_intersection2+0x62>
		return 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	e016      	b.n	8001ea4 <u8g2_clip_intersection2+0x90>
	if (a < c)
 8001e76:	8afa      	ldrh	r2, [r7, #22]
 8001e78:	88fb      	ldrh	r3, [r7, #6]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d201      	bcs.n	8001e82 <u8g2_clip_intersection2+0x6e>
		a = c;
 8001e7e:	88fb      	ldrh	r3, [r7, #6]
 8001e80:	82fb      	strh	r3, [r7, #22]
	if (b > d)
 8001e82:	8aba      	ldrh	r2, [r7, #20]
 8001e84:	88bb      	ldrh	r3, [r7, #4]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d901      	bls.n	8001e8e <u8g2_clip_intersection2+0x7a>
		b = d;
 8001e8a:	88bb      	ldrh	r3, [r7, #4]
 8001e8c:	82bb      	strh	r3, [r7, #20]

	*ap = a;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	8afa      	ldrh	r2, [r7, #22]
 8001e92:	801a      	strh	r2, [r3, #0]
	b -= a;
 8001e94:	8aba      	ldrh	r2, [r7, #20]
 8001e96:	8afb      	ldrh	r3, [r7, #22]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	82bb      	strh	r3, [r7, #20]
	*len = b;
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	8aba      	ldrh	r2, [r7, #20]
 8001ea0:	801a      	strh	r2, [r3, #0]
	return 1;
 8001ea2:	2301      	movs	r3, #1
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	371c      	adds	r7, #28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <u8g2_draw_hv_line_2dir>:
 This function first adjusts the y position to the local buffer. Then it
 will clip the line and call u8g2_draw_low_level_hv_line()

 */
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		u8g2_uint_t len, uint8_t dir) {
 8001eb0:	b590      	push	{r4, r7, lr}
 8001eb2:	b087      	sub	sp, #28
 8001eb4:	af02      	add	r7, sp, #8
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	4608      	mov	r0, r1
 8001eba:	4611      	mov	r1, r2
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	817b      	strh	r3, [r7, #10]
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	813b      	strh	r3, [r7, #8]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	80fb      	strh	r3, [r7, #6]

	/* clipping happens before the display rotation */

	/* transform to pixel buffer coordinates */
	y -= u8g2->pixel_curr_row;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ece:	893a      	ldrh	r2, [r7, #8]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	813b      	strh	r3, [r7, #8]

	u8g2->ll_hvline(u8g2, x, y, len, dir);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8001ed8:	88f8      	ldrh	r0, [r7, #6]
 8001eda:	893a      	ldrh	r2, [r7, #8]
 8001edc:	8979      	ldrh	r1, [r7, #10]
 8001ede:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	47a0      	blx	r4
}
 8001eea:	bf00      	nop
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd90      	pop	{r4, r7, pc}

08001ef2 <u8g2_DrawHVLine>:
 This function should be called by the user.

 "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
 */
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		u8g2_uint_t len, uint8_t dir) {
 8001ef2:	b590      	push	{r4, r7, lr}
 8001ef4:	b087      	sub	sp, #28
 8001ef6:	af02      	add	r7, sp, #8
 8001ef8:	60f8      	str	r0, [r7, #12]
 8001efa:	4608      	mov	r0, r1
 8001efc:	4611      	mov	r1, r2
 8001efe:	461a      	mov	r2, r3
 8001f00:	4603      	mov	r3, r0
 8001f02:	817b      	strh	r3, [r7, #10]
 8001f04:	460b      	mov	r3, r1
 8001f06:	813b      	strh	r3, [r7, #8]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	80fb      	strh	r3, [r7, #6]
	/* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
	/* The callback may rotate the hv line */
	/* after rotation this will call u8g2_draw_hv_line_4dir() */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
	if (u8g2->is_page_clip_window_intersection != 0)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d075      	beq.n	8002002 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
		if (len != 0) {
 8001f16:	88fb      	ldrh	r3, [r7, #6]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d072      	beq.n	8002002 <u8g2_DrawHVLine+0x110>

			/* convert to two directions */
			if (len > 1) {
 8001f1c:	88fb      	ldrh	r3, [r7, #6]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d91a      	bls.n	8001f58 <u8g2_DrawHVLine+0x66>
				if (dir == 2) {
 8001f22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d109      	bne.n	8001f3e <u8g2_DrawHVLine+0x4c>
					x -= len;
 8001f2a:	897a      	ldrh	r2, [r7, #10]
 8001f2c:	88fb      	ldrh	r3, [r7, #6]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	817b      	strh	r3, [r7, #10]
					x++;
 8001f34:	897b      	ldrh	r3, [r7, #10]
 8001f36:	3301      	adds	r3, #1
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	817b      	strh	r3, [r7, #10]
 8001f3c:	e00c      	b.n	8001f58 <u8g2_DrawHVLine+0x66>
				} else if (dir == 3) {
 8001f3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f42:	2b03      	cmp	r3, #3
 8001f44:	d108      	bne.n	8001f58 <u8g2_DrawHVLine+0x66>
					y -= len;
 8001f46:	893a      	ldrh	r2, [r7, #8]
 8001f48:	88fb      	ldrh	r3, [r7, #6]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	813b      	strh	r3, [r7, #8]
					y++;
 8001f50:	893b      	ldrh	r3, [r7, #8]
 8001f52:	3301      	adds	r3, #1
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	813b      	strh	r3, [r7, #8]
				}
			}
			dir &= 1;
 8001f58:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	f887 3020 	strb.w	r3, [r7, #32]

			/* clip against the user window */
			if (dir == 0) {
 8001f64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d11a      	bne.n	8001fa2 <u8g2_DrawHVLine+0xb0>
				if (y < u8g2->user_y0)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8001f72:	893b      	ldrh	r3, [r7, #8]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d83b      	bhi.n	8001ff0 <u8g2_DrawHVLine+0xfe>
					return;
				if (y >= u8g2->user_y1)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8001f7e:	893b      	ldrh	r3, [r7, #8]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d937      	bls.n	8001ff4 <u8g2_DrawHVLine+0x102>
					return;
				if (u8g2_clip_intersection2(&x, &len, u8g2->user_x0,
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8001f90:	1db9      	adds	r1, r7, #6
 8001f92:	f107 000a 	add.w	r0, r7, #10
 8001f96:	f7ff ff3d 	bl	8001e14 <u8g2_clip_intersection2>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d11a      	bne.n	8001fd6 <u8g2_DrawHVLine+0xe4>
						u8g2->user_x1) == 0)
					return;
 8001fa0:	e02f      	b.n	8002002 <u8g2_DrawHVLine+0x110>
			} else {
				if (x < u8g2->user_x0)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8001fa8:	897b      	ldrh	r3, [r7, #10]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d824      	bhi.n	8001ff8 <u8g2_DrawHVLine+0x106>
					return;
				if (x >= u8g2->user_x1)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8001fb4:	897b      	ldrh	r3, [r7, #10]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d920      	bls.n	8001ffc <u8g2_DrawHVLine+0x10a>
					return;
				if (u8g2_clip_intersection2(&y, &len, u8g2->user_y0,
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8001fc6:	1db9      	adds	r1, r7, #6
 8001fc8:	f107 0008 	add.w	r0, r7, #8
 8001fcc:	f7ff ff22 	bl	8001e14 <u8g2_clip_intersection2>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d014      	beq.n	8002000 <u8g2_DrawHVLine+0x10e>
						u8g2->user_y1) == 0)
					return;
			}

			u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fda:	689c      	ldr	r4, [r3, #8]
 8001fdc:	8979      	ldrh	r1, [r7, #10]
 8001fde:	893a      	ldrh	r2, [r7, #8]
 8001fe0:	88f8      	ldrh	r0, [r7, #6]
 8001fe2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	4603      	mov	r3, r0
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	47a0      	blx	r4
 8001fee:	e008      	b.n	8002002 <u8g2_DrawHVLine+0x110>
					return;
 8001ff0:	bf00      	nop
 8001ff2:	e006      	b.n	8002002 <u8g2_DrawHVLine+0x110>
					return;
 8001ff4:	bf00      	nop
 8001ff6:	e004      	b.n	8002002 <u8g2_DrawHVLine+0x110>
					return;
 8001ff8:	bf00      	nop
 8001ffa:	e002      	b.n	8002002 <u8g2_DrawHVLine+0x110>
					return;
 8001ffc:	bf00      	nop
 8001ffe:	e000      	b.n	8002002 <u8g2_DrawHVLine+0x110>
					return;
 8002000:	bf00      	nop
		}
}
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	bd90      	pop	{r4, r7, pc}

08002008 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8002008:	b490      	push	{r4, r7}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	4604      	mov	r4, r0
 8002010:	4608      	mov	r0, r1
 8002012:	4611      	mov	r1, r2
 8002014:	461a      	mov	r2, r3
 8002016:	4623      	mov	r3, r4
 8002018:	80fb      	strh	r3, [r7, #6]
 800201a:	4603      	mov	r3, r0
 800201c:	80bb      	strh	r3, [r7, #4]
 800201e:	460b      	mov	r3, r1
 8002020:	807b      	strh	r3, [r7, #2]
 8002022:	4613      	mov	r3, r2
 8002024:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8002026:	887a      	ldrh	r2, [r7, #2]
 8002028:	88bb      	ldrh	r3, [r7, #4]
 800202a:	429a      	cmp	r2, r3
 800202c:	d20d      	bcs.n	800204a <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 800202e:	883a      	ldrh	r2, [r7, #0]
 8002030:	88fb      	ldrh	r3, [r7, #6]
 8002032:	429a      	cmp	r2, r3
 8002034:	d901      	bls.n	800203a <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8002036:	2301      	movs	r3, #1
 8002038:	e014      	b.n	8002064 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800203a:	887a      	ldrh	r2, [r7, #2]
 800203c:	883b      	ldrh	r3, [r7, #0]
 800203e:	429a      	cmp	r2, r3
 8002040:	d901      	bls.n	8002046 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8002042:	2301      	movs	r3, #1
 8002044:	e00e      	b.n	8002064 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002046:	2300      	movs	r3, #0
 8002048:	e00c      	b.n	8002064 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 800204a:	883a      	ldrh	r2, [r7, #0]
 800204c:	88fb      	ldrh	r3, [r7, #6]
 800204e:	429a      	cmp	r2, r3
 8002050:	d907      	bls.n	8002062 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8002052:	887a      	ldrh	r2, [r7, #2]
 8002054:	883b      	ldrh	r3, [r7, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d901      	bls.n	800205e <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 800205a:	2301      	movs	r3, #1
 800205c:	e002      	b.n	8002064 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800205e:	2300      	movs	r3, #0
 8002060:	e000      	b.n	8002064 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8002062:	2300      	movs	r3, #0
    }
  }
}
 8002064:	4618      	mov	r0, r3
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bc90      	pop	{r4, r7}
 800206c:	4770      	bx	lr

0800206e <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b084      	sub	sp, #16
 8002072:	af00      	add	r7, sp, #0
 8002074:	60f8      	str	r0, [r7, #12]
 8002076:	4608      	mov	r0, r1
 8002078:	4611      	mov	r1, r2
 800207a:	461a      	mov	r2, r3
 800207c:	4603      	mov	r3, r0
 800207e:	817b      	strh	r3, [r7, #10]
 8002080:	460b      	mov	r3, r1
 8002082:	813b      	strh	r3, [r7, #8]
 8002084:	4613      	mov	r3, r2
 8002086:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f8b3 104e 	ldrh.w	r1, [r3, #78]	@ 0x4e
 8002094:	8b3b      	ldrh	r3, [r7, #24]
 8002096:	893a      	ldrh	r2, [r7, #8]
 8002098:	f7ff ffb6 	bl	8002008 <u8g2_is_intersection_decision_tree>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <u8g2_IsIntersection+0x38>
    return 0; 
 80020a2:	2300      	movs	r3, #0
 80020a4:	e00a      	b.n	80020bc <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 80020b2:	88fb      	ldrh	r3, [r7, #6]
 80020b4:	897a      	ldrh	r2, [r7, #10]
 80020b6:	f7ff ffa7 	bl	8002008 <u8g2_is_intersection_decision_tree>
 80020ba:	4603      	mov	r3, r0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b089      	sub	sp, #36	@ 0x24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	4608      	mov	r0, r1
 80020ce:	4611      	mov	r1, r2
 80020d0:	461a      	mov	r2, r3
 80020d2:	4603      	mov	r3, r0
 80020d4:	817b      	strh	r3, [r7, #10]
 80020d6:	460b      	mov	r3, r1
 80020d8:	813b      	strh	r3, [r7, #8]
 80020da:	4613      	mov	r3, r2
 80020dc:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80020de:	893b      	ldrh	r3, [r7, #8]
 80020e0:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80020e2:	7efb      	ldrb	r3, [r7, #27]
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 80020ea:	2301      	movs	r3, #1
 80020ec:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 80020ee:	7e3a      	ldrb	r2, [r7, #24]
 80020f0:	7efb      	ldrb	r3, [r7, #27]
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002106:	2b01      	cmp	r3, #1
 8002108:	d801      	bhi.n	800210e <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 800210a:	7e3b      	ldrb	r3, [r7, #24]
 800210c:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002114:	2b01      	cmp	r3, #1
 8002116:	d001      	beq.n	800211c <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8002118:	7e3b      	ldrb	r3, [r7, #24]
 800211a:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 800211c:	893b      	ldrh	r3, [r7, #8]
 800211e:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8002120:	8afb      	ldrh	r3, [r7, #22]
 8002122:	f023 0307 	bic.w	r3, r3, #7
 8002126:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	7c1b      	ldrb	r3, [r3, #16]
 800212e:	461a      	mov	r2, r3
 8002130:	8afb      	ldrh	r3, [r7, #22]
 8002132:	fb13 f302 	smulbb	r3, r3, r2
 8002136:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800213c:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 800213e:	8afb      	ldrh	r3, [r7, #22]
 8002140:	69fa      	ldr	r2, [r7, #28]
 8002142:	4413      	add	r3, r2
 8002144:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8002146:	897b      	ldrh	r3, [r7, #10]
 8002148:	69fa      	ldr	r2, [r7, #28]
 800214a:	4413      	add	r3, r2
 800214c:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 800214e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002152:	2b00      	cmp	r3, #0
 8002154:	d117      	bne.n	8002186 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	781a      	ldrb	r2, [r3, #0]
 800215a:	7ebb      	ldrb	r3, [r7, #26]
 800215c:	4313      	orrs	r3, r2
 800215e:	b2da      	uxtb	r2, r3
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	781a      	ldrb	r2, [r3, #0]
 8002168:	7e7b      	ldrb	r3, [r7, #25]
 800216a:	4053      	eors	r3, r2
 800216c:	b2da      	uxtb	r2, r3
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	701a      	strb	r2, [r3, #0]
	ptr++;
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	3301      	adds	r3, #1
 8002176:	61fb      	str	r3, [r7, #28]
	len--;
 8002178:	88fb      	ldrh	r3, [r7, #6]
 800217a:	3b01      	subs	r3, #1
 800217c:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1e8      	bne.n	8002156 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8002184:	e038      	b.n	80021f8 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	781a      	ldrb	r2, [r3, #0]
 800218a:	7ebb      	ldrb	r3, [r7, #26]
 800218c:	4313      	orrs	r3, r2
 800218e:	b2da      	uxtb	r2, r3
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	781a      	ldrb	r2, [r3, #0]
 8002198:	7e7b      	ldrb	r3, [r7, #25]
 800219a:	4053      	eors	r3, r2
 800219c:	b2da      	uxtb	r2, r3
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80021a2:	7efb      	ldrb	r3, [r7, #27]
 80021a4:	3301      	adds	r3, #1
 80021a6:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 80021a8:	7efb      	ldrb	r3, [r7, #27]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	76fb      	strb	r3, [r7, #27]
      len--;
 80021b0:	88fb      	ldrh	r3, [r7, #6]
 80021b2:	3b01      	subs	r3, #1
 80021b4:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 80021b6:	7efb      	ldrb	r3, [r7, #27]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d114      	bne.n	80021e6 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80021c0:	461a      	mov	r2, r3
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	4413      	add	r3, r2
 80021c6:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d801      	bhi.n	80021d6 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 80021d2:	2301      	movs	r3, #1
 80021d4:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d008      	beq.n	80021f2 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 80021e0:	2301      	movs	r3, #1
 80021e2:	767b      	strb	r3, [r7, #25]
 80021e4:	e005      	b.n	80021f2 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 80021e6:	7ebb      	ldrb	r3, [r7, #26]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 80021ec:	7e7b      	ldrb	r3, [r7, #25]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 80021f2:	88fb      	ldrh	r3, [r7, #6]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1c6      	bne.n	8002186 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 80021f8:	bf00      	nop
 80021fa:	3724      	adds	r7, #36	@ 0x24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  u8g2->clip_y0 = 0;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002222:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800222c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	4798      	blx	r3
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b084      	sub	sp, #16
 8002246:	af00      	add	r7, sp, #0
 8002248:	60f8      	str	r0, [r7, #12]
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	603b      	str	r3, [r7, #0]
 800224e:	4613      	mov	r3, r2
 8002250:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	659a      	str	r2, [r3, #88]	@ 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	79fa      	ldrb	r2, [r7, #7]
 8002268:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
  u8g2->bitmap_transparency = 0;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
  u8g2->draw_color = 1;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  u8g2->is_auto_page_clear = 1;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
  
  u8g2->cb = u8g2_cb;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update_dimension(u8g2);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f7ff ffa9 	bl	8002204 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f7ff fd84 	bl	8001dc0 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
#endif
}
 80022c0:	bf00      	nop
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80022dc:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80022de:	89fb      	ldrh	r3, [r7, #14]
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	89fa      	ldrh	r2, [r7, #14]
 80022e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  
  t = display_info->tile_width;
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	7c1b      	ldrb	r3, [r3, #16]
 80022ee:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 80022f0:	89fb      	ldrh	r3, [r7, #14]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	89fa      	ldrh	r2, [r7, #14]
 80022fa:	875a      	strh	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002302:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002304:	89fb      	ldrh	r3, [r7, #14]
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	89fa      	ldrh	r2, [r7, #14]
 800230e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_buf_height;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002316:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8002318:	89fb      	ldrh	r3, [r7, #14]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8002320:	4413      	add	r3, r2
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	7c52      	ldrb	r2, [r2, #17]
 8002326:	4293      	cmp	r3, r2
 8002328:	dd07      	ble.n	800233a <u8g2_update_dimension_common+0x72>
    t = display_info->tile_height - u8g2->tile_curr_row;
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	7c5b      	ldrb	r3, [r3, #17]
 800232e:	461a      	mov	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800233a:	89fb      	ldrh	r3, [r7, #14]
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  u8g2->buf_y1 += t;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 800235c:	89fb      	ldrh	r3, [r7, #14]
 800235e:	4413      	add	r3, r2
 8002360:	b29a      	uxth	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	8a9a      	ldrh	r2, [r3, #20]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  u8g2->height = display_info->pixel_height;
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	8ada      	ldrh	r2, [r3, #22]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 800237c:	bf00      	nop
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af02      	add	r7, sp, #8
 800238e:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f8b3 0052 	ldrh.w	r0, [r3, #82]	@ 0x52
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	4603      	mov	r3, r0
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7ff fe5e 	bl	800206e <u8g2_IsIntersection>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d104      	bne.n	80023c2 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 80023c0:	e03b      	b.n	800243a <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d205      	bcs.n	80023e6 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d905      	bls.n	8002402 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800240e:	429a      	cmp	r2, r3
 8002410:	d205      	bcs.n	800241e <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800242a:	429a      	cmp	r2, r3
 800242c:	d905      	bls.n	800243a <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff ff3c 	bl	80022c8 <u8g2_update_dimension_common>
}
 8002450:	bf00      	nop
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  if ( u8g2->height >= u8g2->buf_y1 )
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8002488:	429a      	cmp	r2, r3
 800248a:	d30a      	bcc.n	80024a2 <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	b29a      	uxth	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7ff ff65 	bl	8002388 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b088      	sub	sp, #32
 80024ca:	af02      	add	r7, sp, #8
 80024cc:	60f8      	str	r0, [r7, #12]
 80024ce:	4608      	mov	r0, r1
 80024d0:	4611      	mov	r1, r2
 80024d2:	461a      	mov	r2, r3
 80024d4:	4603      	mov	r3, r0
 80024d6:	817b      	strh	r3, [r7, #10]
 80024d8:	460b      	mov	r3, r1
 80024da:	813b      	strh	r3, [r7, #8]
 80024dc:	4613      	mov	r3, r2
 80024de:	80fb      	strh	r3, [r7, #6]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80024e6:	82bb      	strh	r3, [r7, #20]
  yy -= y;
 80024e8:	8aba      	ldrh	r2, [r7, #20]
 80024ea:	893b      	ldrh	r3, [r7, #8]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	82bb      	strh	r3, [r7, #20]
  
  xx = u8g2->width;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80024f6:	82fb      	strh	r3, [r7, #22]
  xx -= x;
 80024f8:	8afa      	ldrh	r2, [r7, #22]
 80024fa:	897b      	ldrh	r3, [r7, #10]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	82fb      	strh	r3, [r7, #22]
  
  if ( dir == 0 )
 8002500:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d107      	bne.n	8002518 <u8g2_draw_l90_r2+0x52>
  {
    yy--;
 8002508:	8abb      	ldrh	r3, [r7, #20]
 800250a:	3b01      	subs	r3, #1
 800250c:	82bb      	strh	r3, [r7, #20]
    xx -= len;
 800250e:	8afa      	ldrh	r2, [r7, #22]
 8002510:	88fb      	ldrh	r3, [r7, #6]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	82fb      	strh	r3, [r7, #22]
 8002516:	e00a      	b.n	800252e <u8g2_draw_l90_r2+0x68>
  }
  else if ( dir == 1 )
 8002518:	f897 3020 	ldrb.w	r3, [r7, #32]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d106      	bne.n	800252e <u8g2_draw_l90_r2+0x68>
  {
    xx--;
 8002520:	8afb      	ldrh	r3, [r7, #22]
 8002522:	3b01      	subs	r3, #1
 8002524:	82fb      	strh	r3, [r7, #22]
    yy -= len;
 8002526:	8aba      	ldrh	r2, [r7, #20]
 8002528:	88fb      	ldrh	r3, [r7, #6]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	82bb      	strh	r3, [r7, #20]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 800252e:	88f8      	ldrh	r0, [r7, #6]
 8002530:	8aba      	ldrh	r2, [r7, #20]
 8002532:	8af9      	ldrh	r1, [r7, #22]
 8002534:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	4603      	mov	r3, r0
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f7ff fcb7 	bl	8001eb0 <u8g2_draw_hv_line_2dir>
}
 8002542:	bf00      	nop
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
 800256e:	460b      	mov	r3, r1
 8002570:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8002572:	78fb      	ldrb	r3, [r7, #3]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <u8x8_ascii_next+0x18>
 8002578:	78fb      	ldrb	r3, [r7, #3]
 800257a:	2b0a      	cmp	r3, #10
 800257c:	d102      	bne.n	8002584 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 800257e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002582:	e001      	b.n	8002588 <u8x8_ascii_next+0x22>
  return b;
 8002584:	78fb      	ldrb	r3, [r7, #3]
 8002586:	b29b      	uxth	r3, r3
}
 8002588:	4618      	mov	r0, r3
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8002594:	b590      	push	{r4, r7, lr}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691c      	ldr	r4, [r3, #16]
 80025a4:	78fa      	ldrb	r2, [r7, #3]
 80025a6:	2300      	movs	r3, #0
 80025a8:	2120      	movs	r1, #32
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	47a0      	blx	r4
 80025ae:	4603      	mov	r3, r0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd90      	pop	{r4, r7, pc}

080025b8 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80025b8:	b590      	push	{r4, r7, lr}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	460b      	mov	r3, r1
 80025c2:	607a      	str	r2, [r7, #4]
 80025c4:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	691c      	ldr	r4, [r3, #16]
 80025ca:	7afa      	ldrb	r2, [r7, #11]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2117      	movs	r1, #23
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	47a0      	blx	r4
 80025d4:	4603      	mov	r3, r0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd90      	pop	{r4, r7, pc}

080025de <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
 80025e6:	460b      	mov	r3, r1
 80025e8:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 80025ea:	1cfb      	adds	r3, r7, #3
 80025ec:	461a      	mov	r2, r3
 80025ee:	2101      	movs	r1, #1
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f7ff ffe1 	bl	80025b8 <u8x8_byte_SendBytes>
 80025f6:	4603      	mov	r3, r0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002600:	b590      	push	{r4, r7, lr}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68dc      	ldr	r4, [r3, #12]
 8002610:	78fa      	ldrb	r2, [r7, #3]
 8002612:	2300      	movs	r3, #0
 8002614:	2115      	movs	r1, #21
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	47a0      	blx	r4
 800261a:	4603      	mov	r3, r0
}
 800261c:	4618      	mov	r0, r3
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	bd90      	pop	{r4, r7, pc}

08002624 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8002624:	b590      	push	{r4, r7, lr}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	460b      	mov	r3, r1
 800262e:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68dc      	ldr	r4, [r3, #12]
 8002634:	78fa      	ldrb	r2, [r7, #3]
 8002636:	2300      	movs	r3, #0
 8002638:	2116      	movs	r1, #22
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	47a0      	blx	r4
 800263e:	4603      	mov	r3, r0
}
 8002640:	4618      	mov	r0, r3
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	bd90      	pop	{r4, r7, pc}

08002648 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002648:	b590      	push	{r4, r7, lr}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	460b      	mov	r3, r1
 8002652:	607a      	str	r2, [r7, #4]
 8002654:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	68dc      	ldr	r4, [r3, #12]
 800265a:	7afa      	ldrb	r2, [r7, #11]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2117      	movs	r1, #23
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	47a0      	blx	r4
 8002664:	4603      	mov	r3, r0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	bd90      	pop	{r4, r7, pc}

0800266e <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 800266e:	b590      	push	{r4, r7, lr}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68dc      	ldr	r4, [r3, #12]
 800267a:	2300      	movs	r3, #0
 800267c:	2200      	movs	r2, #0
 800267e:	2118      	movs	r1, #24
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	47a0      	blx	r4
 8002684:	4603      	mov	r3, r0
}
 8002686:	4618      	mov	r0, r3
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	bd90      	pop	{r4, r7, pc}

0800268e <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 800268e:	b590      	push	{r4, r7, lr}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68dc      	ldr	r4, [r3, #12]
 800269a:	2300      	movs	r3, #0
 800269c:	2200      	movs	r2, #0
 800269e:	2119      	movs	r1, #25
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	47a0      	blx	r4
 80026a4:	4603      	mov	r3, r0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd90      	pop	{r4, r7, pc}

080026ae <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 80026ae:	b590      	push	{r4, r7, lr}
 80026b0:	b085      	sub	sp, #20
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
 80026b6:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	73fb      	strb	r3, [r7, #15]
    data++;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	3301      	adds	r3, #1
 80026c2:	603b      	str	r3, [r7, #0]
    switch( cmd )
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
 80026c6:	2bfe      	cmp	r3, #254	@ 0xfe
 80026c8:	d031      	beq.n	800272e <u8x8_cad_SendSequence+0x80>
 80026ca:	2bfe      	cmp	r3, #254	@ 0xfe
 80026cc:	dc3d      	bgt.n	800274a <u8x8_cad_SendSequence+0x9c>
 80026ce:	2b19      	cmp	r3, #25
 80026d0:	dc3b      	bgt.n	800274a <u8x8_cad_SendSequence+0x9c>
 80026d2:	2b18      	cmp	r3, #24
 80026d4:	da23      	bge.n	800271e <u8x8_cad_SendSequence+0x70>
 80026d6:	2b16      	cmp	r3, #22
 80026d8:	dc02      	bgt.n	80026e0 <u8x8_cad_SendSequence+0x32>
 80026da:	2b15      	cmp	r3, #21
 80026dc:	da03      	bge.n	80026e6 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 80026de:	e034      	b.n	800274a <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 80026e0:	2b17      	cmp	r3, #23
 80026e2:	d00e      	beq.n	8002702 <u8x8_cad_SendSequence+0x54>
	return;
 80026e4:	e031      	b.n	800274a <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68dc      	ldr	r4, [r3, #12]
 80026f0:	7bba      	ldrb	r2, [r7, #14]
 80026f2:	7bf9      	ldrb	r1, [r7, #15]
 80026f4:	2300      	movs	r3, #0
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	47a0      	blx	r4
	  data++;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	3301      	adds	r3, #1
 80026fe:	603b      	str	r3, [r7, #0]
	  break;
 8002700:	e022      	b.n	8002748 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002708:	f107 030e 	add.w	r3, r7, #14
 800270c:	461a      	mov	r2, r3
 800270e:	2101      	movs	r1, #1
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7ff ff99 	bl	8002648 <u8x8_cad_SendData>
	  data++;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	3301      	adds	r3, #1
 800271a:	603b      	str	r3, [r7, #0]
	  break;
 800271c:	e014      	b.n	8002748 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68dc      	ldr	r4, [r3, #12]
 8002722:	7bf9      	ldrb	r1, [r7, #15]
 8002724:	2300      	movs	r3, #0
 8002726:	2200      	movs	r2, #0
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	47a0      	blx	r4
	  break;
 800272c:	e00c      	b.n	8002748 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002734:	7bbb      	ldrb	r3, [r7, #14]
 8002736:	461a      	mov	r2, r3
 8002738:	2129      	movs	r1, #41	@ 0x29
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f9ee 	bl	8002b1c <u8x8_gpio_call>
	  data++;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	3301      	adds	r3, #1
 8002744:	603b      	str	r3, [r7, #0]
	  break;
 8002746:	bf00      	nop
    cmd = *data;
 8002748:	e7b6      	b.n	80026b8 <u8x8_cad_SendSequence+0xa>
	return;
 800274a:	bf00      	nop
    }
  }
}
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	bd90      	pop	{r4, r7, pc}
	...

08002754 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002754:	b590      	push	{r4, r7, lr}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	607b      	str	r3, [r7, #4]
 800275e:	460b      	mov	r3, r1
 8002760:	72fb      	strb	r3, [r7, #11]
 8002762:	4613      	mov	r3, r2
 8002764:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8002766:	7afb      	ldrb	r3, [r7, #11]
 8002768:	3b14      	subs	r3, #20
 800276a:	2b05      	cmp	r3, #5
 800276c:	d82f      	bhi.n	80027ce <u8x8_cad_001+0x7a>
 800276e:	a201      	add	r2, pc, #4	@ (adr r2, 8002774 <u8x8_cad_001+0x20>)
 8002770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002774:	080027bd 	.word	0x080027bd
 8002778:	0800278d 	.word	0x0800278d
 800277c:	080027a1 	.word	0x080027a1
 8002780:	080027b5 	.word	0x080027b5
 8002784:	080027bd 	.word	0x080027bd
 8002788:	080027bd 	.word	0x080027bd
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 800278c:	2100      	movs	r1, #0
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f7ff ff00 	bl	8002594 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002794:	7abb      	ldrb	r3, [r7, #10]
 8002796:	4619      	mov	r1, r3
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f7ff ff20 	bl	80025de <u8x8_byte_SendByte>
      break;
 800279e:	e018      	b.n	80027d2 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 80027a0:	2100      	movs	r1, #0
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f7ff fef6 	bl	8002594 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80027a8:	7abb      	ldrb	r3, [r7, #10]
 80027aa:	4619      	mov	r1, r3
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f7ff ff16 	bl	80025de <u8x8_byte_SendByte>
      break;
 80027b2:	e00e      	b.n	80027d2 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 80027b4:	2101      	movs	r1, #1
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f7ff feec 	bl	8002594 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	691c      	ldr	r4, [r3, #16]
 80027c0:	7aba      	ldrb	r2, [r7, #10]
 80027c2:	7af9      	ldrb	r1, [r7, #11]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	47a0      	blx	r4
 80027ca:	4603      	mov	r3, r0
 80027cc:	e002      	b.n	80027d4 <u8x8_cad_001+0x80>
    default:
      return 0;
 80027ce:	2300      	movs	r3, #0
 80027d0:	e000      	b.n	80027d4 <u8x8_cad_001+0x80>
  }
  return 1;
 80027d2:	2301      	movs	r3, #1
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd90      	pop	{r4, r7, pc}

080027dc <u8x8_d_st7565_common>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	607b      	str	r3, [r7, #4]
 80027e6:	460b      	mov	r3, r1
 80027e8:	72fb      	strb	r3, [r7, #11]
 80027ea:	4613      	mov	r3, r2
 80027ec:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 80027ee:	7afb      	ldrb	r3, [r7, #11]
 80027f0:	2b0f      	cmp	r3, #15
 80027f2:	d006      	beq.n	8002802 <u8x8_d_st7565_common+0x26>
 80027f4:	2b0f      	cmp	r3, #15
 80027f6:	dc71      	bgt.n	80028dc <u8x8_d_st7565_common+0x100>
 80027f8:	2b0b      	cmp	r3, #11
 80027fa:	d050      	beq.n	800289e <u8x8_d_st7565_common+0xc2>
 80027fc:	2b0e      	cmp	r3, #14
 80027fe:	d05b      	beq.n	80028b8 <u8x8_d_st7565_common+0xdc>
 8002800:	e06c      	b.n	80028dc <u8x8_d_st7565_common+0x100>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f7ff ff33 	bl	800266e <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	795b      	ldrb	r3, [r3, #5]
 800280c:	75bb      	strb	r3, [r7, #22]
      x *= 8;
 800280e:	7dbb      	ldrb	r3, [r7, #22]
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	75bb      	strb	r3, [r7, #22]
      x += u8x8->x_offset;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800281a:	7dbb      	ldrb	r3, [r7, #22]
 800281c:	4413      	add	r3, r2
 800281e:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8002820:	7dbb      	ldrb	r3, [r7, #22]
 8002822:	091b      	lsrs	r3, r3, #4
 8002824:	b2db      	uxtb	r3, r3
 8002826:	f043 0310 	orr.w	r3, r3, #16
 800282a:	b2db      	uxtb	r3, r3
 800282c:	4619      	mov	r1, r3
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f7ff fee6 	bl	8002600 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8002834:	7dbb      	ldrb	r3, [r7, #22]
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	b2db      	uxtb	r3, r3
 800283c:	4619      	mov	r1, r3
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f7ff fede 	bl	8002600 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	799b      	ldrb	r3, [r3, #6]
 8002848:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 800284c:	b2db      	uxtb	r3, r3
 800284e:	4619      	mov	r1, r3
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f7ff fed5 	bl	8002600 <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	791b      	ldrb	r3, [r3, #4]
 800285a:	75fb      	strb	r3, [r7, #23]
      c *= 8;
 800285c:	7dfb      	ldrb	r3, [r7, #23]
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	613b      	str	r3, [r7, #16]
      /* 
	The following if condition checks the hardware limits of the st7565 
	controller: It is not allowed to write beyond the display limits.
	This is in fact an issue within flip mode.
      */
      if ( c + x > 132u )
 8002868:	7dfa      	ldrb	r2, [r7, #23]
 800286a:	7dbb      	ldrb	r3, [r7, #22]
 800286c:	4413      	add	r3, r2
 800286e:	2b84      	cmp	r3, #132	@ 0x84
 8002870:	d905      	bls.n	800287e <u8x8_d_st7565_common+0xa2>
      {
	c = 132u;
 8002872:	2384      	movs	r3, #132	@ 0x84
 8002874:	75fb      	strb	r3, [r7, #23]
	c -= x;
 8002876:	7dfa      	ldrb	r2, [r7, #23]
 8002878:	7dbb      	ldrb	r3, [r7, #22]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	75fb      	strb	r3, [r7, #23]
      }
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 800287e:	7dfb      	ldrb	r3, [r7, #23]
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	4619      	mov	r1, r3
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f7ff fedf 	bl	8002648 <u8x8_cad_SendData>
	arg_int--;
 800288a:	7abb      	ldrb	r3, [r7, #10]
 800288c:	3b01      	subs	r3, #1
 800288e:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8002890:	7abb      	ldrb	r3, [r7, #10]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f3      	bne.n	800287e <u8x8_d_st7565_common+0xa2>
      
      u8x8_cad_EndTransfer(u8x8);
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f7ff fef9 	bl	800268e <u8x8_cad_EndTransfer>
      break;
 800289c:	e020      	b.n	80028e0 <u8x8_d_st7565_common+0x104>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 800289e:	7abb      	ldrb	r3, [r7, #10]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d104      	bne.n	80028ae <u8x8_d_st7565_common+0xd2>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
 80028a4:	4911      	ldr	r1, [pc, #68]	@ (80028ec <u8x8_d_st7565_common+0x110>)
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f7ff ff01 	bl	80026ae <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
      break;
 80028ac:	e018      	b.n	80028e0 <u8x8_d_st7565_common+0x104>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
 80028ae:	4910      	ldr	r1, [pc, #64]	@ (80028f0 <u8x8_d_st7565_common+0x114>)
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f7ff fefc 	bl	80026ae <u8x8_cad_SendSequence>
      break;
 80028b6:	e013      	b.n	80028e0 <u8x8_d_st7565_common+0x104>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f7ff fed8 	bl	800266e <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 80028be:	2181      	movs	r1, #129	@ 0x81
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f7ff fe9d 	bl	8002600 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
 80028c6:	7abb      	ldrb	r3, [r7, #10]
 80028c8:	089b      	lsrs	r3, r3, #2
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	4619      	mov	r1, r3
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f7ff fea8 	bl	8002624 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f7ff feda 	bl	800268e <u8x8_cad_EndTransfer>
      break;
 80028da:	e001      	b.n	80028e0 <u8x8_d_st7565_common+0x104>
#endif
    default:
      return 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	e000      	b.n	80028e2 <u8x8_d_st7565_common+0x106>
  }
  return 1;
 80028e0:	2301      	movs	r3, #1
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	08007690 	.word	0x08007690
 80028f0:	08007698 	.word	0x08007698

080028f4 <u8x8_d_st7565_64128n>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_64128n(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	607b      	str	r3, [r7, #4]
 80028fe:	460b      	mov	r3, r1
 8002900:	72fb      	strb	r3, [r7, #11]
 8002902:	4613      	mov	r3, r2
 8002904:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 8002906:	7aba      	ldrb	r2, [r7, #10]
 8002908:	7af9      	ldrb	r1, [r7, #11]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f7ff ff65 	bl	80027dc <u8x8_d_st7565_common>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d131      	bne.n	800297c <u8x8_d_st7565_64128n+0x88>
  {
    /* msg not handled, then try here */
    switch(msg)
 8002918:	7afb      	ldrb	r3, [r7, #11]
 800291a:	2b0d      	cmp	r3, #13
 800291c:	d013      	beq.n	8002946 <u8x8_d_st7565_64128n+0x52>
 800291e:	2b0d      	cmp	r3, #13
 8002920:	dc2a      	bgt.n	8002978 <u8x8_d_st7565_64128n+0x84>
 8002922:	2b09      	cmp	r3, #9
 8002924:	d002      	beq.n	800292c <u8x8_d_st7565_64128n+0x38>
 8002926:	2b0a      	cmp	r3, #10
 8002928:	d005      	beq.n	8002936 <u8x8_d_st7565_64128n+0x42>
 800292a:	e025      	b.n	8002978 <u8x8_d_st7565_64128n+0x84>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_64128n_display_info);
 800292c:	4916      	ldr	r1, [pc, #88]	@ (8002988 <u8x8_d_st7565_64128n+0x94>)
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 f832 	bl	8002998 <u8x8_d_helper_display_setup_memory>
	break;
 8002934:	e022      	b.n	800297c <u8x8_d_st7565_64128n+0x88>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 f842 	bl	80029c0 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_64128n_init_seq);
 800293c:	4913      	ldr	r1, [pc, #76]	@ (800298c <u8x8_d_st7565_64128n+0x98>)
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f7ff feb5 	bl	80026ae <u8x8_cad_SendSequence>
	break;
 8002944:	e01a      	b.n	800297c <u8x8_d_st7565_64128n+0x88>
      case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
	if ( arg_int == 0 )
 8002946:	7abb      	ldrb	r3, [r7, #10]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10a      	bne.n	8002962 <u8x8_d_st7565_64128n+0x6e>
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
 800294c:	4910      	ldr	r1, [pc, #64]	@ (8002990 <u8x8_d_st7565_64128n+0x9c>)
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f7ff fead 	bl	80026ae <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	7c9a      	ldrb	r2, [r3, #18]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	else
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
	}	
	break;
 8002960:	e00c      	b.n	800297c <u8x8_d_st7565_64128n+0x88>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
 8002962:	490c      	ldr	r1, [pc, #48]	@ (8002994 <u8x8_d_st7565_64128n+0xa0>)
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f7ff fea2 	bl	80026ae <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	7cda      	ldrb	r2, [r3, #19]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	break;
 8002976:	e001      	b.n	800297c <u8x8_d_st7565_64128n+0x88>
      default:
	return 0;		/* msg unknown */
 8002978:	2300      	movs	r3, #0
 800297a:	e000      	b.n	800297e <u8x8_d_st7565_64128n+0x8a>
    }
  }
  return 1;
 800297c:	2301      	movs	r3, #1
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	080076d0 	.word	0x080076d0
 800298c:	080076b0 	.word	0x080076b0
 8002990:	080076a0 	.word	0x080076a0
 8002994:	080076a8 	.word	0x080076a8

08002998 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	7c9a      	ldrb	r2, [r3, #18]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80029c0:	b590      	push	{r4, r7, lr}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	695c      	ldr	r4, [r3, #20]
 80029cc:	2300      	movs	r3, #0
 80029ce:	2200      	movs	r2, #0
 80029d0:	2128      	movs	r1, #40	@ 0x28
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68dc      	ldr	r4, [r3, #12]
 80029da:	2300      	movs	r3, #0
 80029dc:	2200      	movs	r2, #0
 80029de:	2114      	movs	r1, #20
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80029e4:	2201      	movs	r2, #1
 80029e6:	214b      	movs	r1, #75	@ 0x4b
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 f897 	bl	8002b1c <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	791b      	ldrb	r3, [r3, #4]
 80029f4:	461a      	mov	r2, r3
 80029f6:	2129      	movs	r1, #41	@ 0x29
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 f88f 	bl	8002b1c <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 80029fe:	2200      	movs	r2, #0
 8002a00:	214b      	movs	r1, #75	@ 0x4b
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f88a 	bl	8002b1c <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	791b      	ldrb	r3, [r3, #4]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	2129      	movs	r1, #41	@ 0x29
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f882 	bl	8002b1c <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8002a18:	2201      	movs	r2, #1
 8002a1a:	214b      	movs	r1, #75	@ 0x4b
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 f87d 	bl	8002b1c <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	795b      	ldrb	r3, [r3, #5]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	2129      	movs	r1, #41	@ 0x29
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f875 	bl	8002b1c <u8x8_gpio_call>
}    
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd90      	pop	{r4, r7, pc}

08002a3a <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8002a3a:	b590      	push	{r4, r7, lr}
 8002a3c:	b085      	sub	sp, #20
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
 8002a42:	4608      	mov	r0, r1
 8002a44:	4611      	mov	r1, r2
 8002a46:	461a      	mov	r2, r3
 8002a48:	4603      	mov	r3, r0
 8002a4a:	70fb      	strb	r3, [r7, #3]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	70bb      	strb	r3, [r7, #2]
 8002a50:	4613      	mov	r3, r2
 8002a52:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8002a58:	78bb      	ldrb	r3, [r7, #2]
 8002a5a:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8002a5c:	787b      	ldrb	r3, [r7, #1]
 8002a5e:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8002a60:	6a3b      	ldr	r3, [r7, #32]
 8002a62:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689c      	ldr	r4, [r3, #8]
 8002a68:	f107 0308 	add.w	r3, r7, #8
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	210f      	movs	r1, #15
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	47a0      	blx	r4
 8002a74:	4603      	mov	r3, r0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd90      	pop	{r4, r7, pc}

08002a7e <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8002a7e:	b590      	push	{r4, r7, lr}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689c      	ldr	r4, [r3, #8]
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2109      	movs	r1, #9
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	47a0      	blx	r4
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd90      	pop	{r4, r7, pc}

08002a9c <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8002a9c:	b590      	push	{r4, r7, lr}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689c      	ldr	r4, [r3, #8]
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	2200      	movs	r2, #0
 8002aac:	210a      	movs	r1, #10
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd90      	pop	{r4, r7, pc}

08002aba <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8002aba:	b590      	push	{r4, r7, lr}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689c      	ldr	r4, [r3, #8]
 8002aca:	78fa      	ldrb	r2, [r7, #3]
 8002acc:	2300      	movs	r3, #0
 8002ace:	210b      	movs	r1, #11
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	47a0      	blx	r4
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd90      	pop	{r4, r7, pc}

08002adc <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 8002adc:	b590      	push	{r4, r7, lr}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689c      	ldr	r4, [r3, #8]
 8002aec:	78fa      	ldrb	r2, [r7, #3]
 8002aee:	2300      	movs	r3, #0
 8002af0:	210e      	movs	r1, #14
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	47a0      	blx	r4
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd90      	pop	{r4, r7, pc}

08002afe <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8002afe:	b590      	push	{r4, r7, lr}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689c      	ldr	r4, [r3, #8]
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	2110      	movs	r1, #16
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	47a0      	blx	r4
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd90      	pop	{r4, r7, pc}

08002b1c <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8002b1c:	b590      	push	{r4, r7, lr}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	70fb      	strb	r3, [r7, #3]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	695c      	ldr	r4, [r3, #20]
 8002b30:	78ba      	ldrb	r2, [r7, #2]
 8002b32:	78f9      	ldrb	r1, [r7, #3]
 8002b34:	2300      	movs	r3, #0
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	47a0      	blx	r4
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd90      	pop	{r4, r7, pc}

08002b42 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b085      	sub	sp, #20
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	60f8      	str	r0, [r7, #12]
 8002b4a:	607b      	str	r3, [r7, #4]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	72fb      	strb	r3, [r7, #11]
 8002b50:	4613      	mov	r3, r2
 8002b52:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
	...

08002b64 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a11      	ldr	r2, [pc, #68]	@ (8002bbc <u8x8_SetupDefaults+0x58>)
 8002b76:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a10      	ldr	r2, [pc, #64]	@ (8002bbc <u8x8_SetupDefaults+0x58>)
 8002b7c:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a0e      	ldr	r2, [pc, #56]	@ (8002bbc <u8x8_SetupDefaults+0x58>)
 8002b82:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a0d      	ldr	r2, [pc, #52]	@ (8002bbc <u8x8_SetupDefaults+0x58>)
 8002b88:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	22ff      	movs	r2, #255	@ 0xff
 8002ba4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	22ff      	movs	r2, #255	@ 0xff
 8002bac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	08002b43 	.word	0x08002b43

08002bc0 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
 8002bcc:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f7ff ffc8 	bl	8002b64 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	68ba      	ldr	r2, [r7, #8]
 8002bd8:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f7ff ff46 	bl	8002a7e <u8x8_SetupMemory>
}
 8002bf2:	bf00      	nop
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
	...

08002bfc <INA229_readReg>:
/*
 *  ======== INA229_readReg ========
 *  Read register
 */
uint64_t INA229_readReg(INA229_Handle sensor, uint8_t regAddr)
{
 8002bfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c00:	b08b      	sub	sp, #44	@ 0x2c
 8002c02:	af02      	add	r7, sp, #8
 8002c04:	6078      	str	r0, [r7, #4]
 8002c06:	460b      	mov	r3, r1
 8002c08:	70fb      	strb	r3, [r7, #3]
    uint64_t value;
    int i;
    
    uint8_t txBuf[1] = {0};
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	743b      	strb	r3, [r7, #16]
    uint8_t rxBuf[6] = {0}; //max buffer size
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60bb      	str	r3, [r7, #8]
 8002c12:	2300      	movs	r3, #0
 8002c14:	81bb      	strh	r3, [r7, #12]

    txBuf[0] = (regAddr << 2 ) | 0x01; //Address + read bit (ending in 1)
 8002c16:	78fb      	ldrb	r3, [r7, #3]
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	b25b      	sxtb	r3, r3
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	b25b      	sxtb	r3, r3
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	743b      	strb	r3, [r7, #16]

    //Read register
    mcu_spiTransfer(sensor->busId, sensor->devCS, INA229_regSize[regAddr]+1, txBuf, rxBuf);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	7f18      	ldrb	r0, [r3, #28]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	7f59      	ldrb	r1, [r3, #29]
 8002c2e:	78fb      	ldrb	r3, [r7, #3]
 8002c30:	4a1f      	ldr	r2, [pc, #124]	@ (8002cb0 <INA229_readReg+0xb4>)
 8002c32:	5cd3      	ldrb	r3, [r2, r3]
 8002c34:	3301      	adds	r3, #1
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	f107 0610 	add.w	r6, r7, #16
 8002c3c:	f107 0308 	add.w	r3, r7, #8
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	4633      	mov	r3, r6
 8002c44:	f000 ffe6 	bl	8003c14 <mcu_spiTransfer>

    //Combine bytes
    value = 0; // initialize to 0, toss rxBuf[0];
 8002c48:	f04f 0200 	mov.w	r2, #0
 8002c4c:	f04f 0300 	mov.w	r3, #0
 8002c50:	e9c7 2306 	strd	r2, r3, [r7, #24]

    for(i = 1; i < INA229_regSize[regAddr]+1; i++)
 8002c54:	2301      	movs	r3, #1
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	e01b      	b.n	8002c92 <INA229_readReg+0x96>
    {
        value = (value << 8) | rxBuf[i];
 8002c5a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	020b      	lsls	r3, r1, #8
 8002c68:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002c6c:	0202      	lsls	r2, r0, #8
 8002c6e:	f107 0008 	add.w	r0, r7, #8
 8002c72:	6979      	ldr	r1, [r7, #20]
 8002c74:	4401      	add	r1, r0
 8002c76:	7809      	ldrb	r1, [r1, #0]
 8002c78:	b2c9      	uxtb	r1, r1
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	460c      	mov	r4, r1
 8002c7e:	4605      	mov	r5, r0
 8002c80:	ea42 0804 	orr.w	r8, r2, r4
 8002c84:	ea43 0905 	orr.w	r9, r3, r5
 8002c88:	e9c7 8906 	strd	r8, r9, [r7, #24]
    for(i = 1; i < INA229_regSize[regAddr]+1; i++)
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	78fb      	ldrb	r3, [r7, #3]
 8002c94:	4a06      	ldr	r2, [pc, #24]	@ (8002cb0 <INA229_readReg+0xb4>)
 8002c96:	5cd3      	ldrb	r3, [r2, r3]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	dddc      	ble.n	8002c5a <INA229_readReg+0x5e>
    }

    return value;
 8002ca0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8002ca4:	4610      	mov	r0, r2
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	3724      	adds	r7, #36	@ 0x24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002cb0:	080076e8 	.word	0x080076e8
 8002cb4:	00000000 	.word	0x00000000

08002cb8 <INA229_getVBUS_V>:
/*
 *  ======== INA229_getVBUS_V ========
 *  Get VBUS value (V)
 */
float INA229_getVBUS_V(INA229_Handle sensor)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
    uint64_t value = INA229_readReg(sensor, INA229_vbus_register);
 8002cc0:	2105      	movs	r1, #5
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7ff ff9a 	bl	8002bfc <INA229_readReg>
 8002cc8:	e9c7 0102 	strd	r0, r1, [r7, #8]
    float data;

    //Remove reserved bits
    value = value >> 4;
 8002ccc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	f04f 0300 	mov.w	r3, #0
 8002cd8:	0902      	lsrs	r2, r0, #4
 8002cda:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8002cde:	090b      	lsrs	r3, r1, #4
 8002ce0:	e9c7 2302 	strd	r2, r3, [r7, #8]

    //Convert for 2's compliment and signed value (though always positive)
    if(value > 0x7FFFF)
 8002ce4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ce8:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 8002cec:	f173 0300 	sbcs.w	r3, r3, #0
 8002cf0:	d30c      	bcc.n	8002d0c <INA229_getVBUS_V+0x54>
    {
        data = (float)value - 0x100000; //left for redundancy and error checking, should never get used
 8002cf2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002cf6:	f7fd ff61 	bl	8000bbc <__aeabi_ul2f>
 8002cfa:	ee07 0a10 	vmov	s14, r0
 8002cfe:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 8002d70 <INA229_getVBUS_V+0xb8>
 8002d02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d06:	edc7 7a05 	vstr	s15, [r7, #20]
 8002d0a:	e005      	b.n	8002d18 <INA229_getVBUS_V+0x60>
    }
    else
    {
        data = (float)value;
 8002d0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d10:	f7fd ff54 	bl	8000bbc <__aeabi_ul2f>
 8002d14:	4603      	mov	r3, r0
 8002d16:	617b      	str	r3, [r7, #20]
    }

    //Convert to V
    data = (data * 195.3125) / 1000000;
 8002d18:	6978      	ldr	r0, [r7, #20]
 8002d1a:	f7fd fbcd 	bl	80004b8 <__aeabi_f2d>
 8002d1e:	a310      	add	r3, pc, #64	@ (adr r3, 8002d60 <INA229_getVBUS_V+0xa8>)
 8002d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d24:	f7fd fc20 	bl	8000568 <__aeabi_dmul>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4610      	mov	r0, r2
 8002d2e:	4619      	mov	r1, r3
 8002d30:	a30d      	add	r3, pc, #52	@ (adr r3, 8002d68 <INA229_getVBUS_V+0xb0>)
 8002d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d36:	f7fd fd41 	bl	80007bc <__aeabi_ddiv>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4610      	mov	r0, r2
 8002d40:	4619      	mov	r1, r3
 8002d42:	f7fd fe23 	bl	800098c <__aeabi_d2f>
 8002d46:	4603      	mov	r3, r0
 8002d48:	617b      	str	r3, [r7, #20]

    return data;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	ee07 3a90 	vmov	s15, r3
}
 8002d50:	eeb0 0a67 	vmov.f32	s0, s15
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	f3af 8000 	nop.w
 8002d60:	00000000 	.word	0x00000000
 8002d64:	40686a00 	.word	0x40686a00
 8002d68:	00000000 	.word	0x00000000
 8002d6c:	412e8480 	.word	0x412e8480
 8002d70:	49800000 	.word	0x49800000

08002d74 <INA229_getDIETEMP_C>:
/*
 *  ======== INA229_getDIETEMP_C ========
 *  Get DIETMEP value (C)
 */
float INA229_getDIETEMP_C(INA229_Handle sensor)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
    uint64_t value = INA229_readReg(sensor, INA229_dietemp_register);
 8002d7c:	2106      	movs	r1, #6
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7ff ff3c 	bl	8002bfc <INA229_readReg>
 8002d84:	e9c7 0102 	strd	r0, r1, [r7, #8]
    float data;

    //Convert for 2's compliment and signed value
    if(value > 0x7FFF)
 8002d88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d8c:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8002d90:	f173 0300 	sbcs.w	r3, r3, #0
 8002d94:	d30c      	bcc.n	8002db0 <INA229_getDIETEMP_C+0x3c>
    {
        data = (float)value - 0x10000; 
 8002d96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d9a:	f7fd ff0f 	bl	8000bbc <__aeabi_ul2f>
 8002d9e:	ee07 0a10 	vmov	s14, r0
 8002da2:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8002e00 <INA229_getDIETEMP_C+0x8c>
 8002da6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002daa:	edc7 7a05 	vstr	s15, [r7, #20]
 8002dae:	e005      	b.n	8002dbc <INA229_getDIETEMP_C+0x48>
    }
    else
    {
        data = (float)value;
 8002db0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002db4:	f7fd ff02 	bl	8000bbc <__aeabi_ul2f>
 8002db8:	4603      	mov	r3, r0
 8002dba:	617b      	str	r3, [r7, #20]
    }

    //Convert to C
    data = (data * 7.8125) / 1000;
 8002dbc:	6978      	ldr	r0, [r7, #20]
 8002dbe:	f7fd fb7b 	bl	80004b8 <__aeabi_f2d>
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8002e04 <INA229_getDIETEMP_C+0x90>)
 8002dc8:	f7fd fbce 	bl	8000568 <__aeabi_dmul>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4610      	mov	r0, r2
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e08 <INA229_getDIETEMP_C+0x94>)
 8002dda:	f7fd fcef 	bl	80007bc <__aeabi_ddiv>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	4610      	mov	r0, r2
 8002de4:	4619      	mov	r1, r3
 8002de6:	f7fd fdd1 	bl	800098c <__aeabi_d2f>
 8002dea:	4603      	mov	r3, r0
 8002dec:	617b      	str	r3, [r7, #20]

    return data;
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	ee07 3a90 	vmov	s15, r3
}
 8002df4:	eeb0 0a67 	vmov.f32	s0, s15
 8002df8:	3718      	adds	r7, #24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	47800000 	.word	0x47800000
 8002e04:	401f4000 	.word	0x401f4000
 8002e08:	408f4000 	.word	0x408f4000

08002e0c <u8x8_stm32_gpio_and_delay>:
 */
static uint8_t u8x8_stm32_gpio_and_delay(u8x8_t * const u8x8,
                                           uint8_t msg,
                                           uint8_t arg_int,
                                           void * const arg_ptr)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	607b      	str	r3, [r7, #4]
 8002e16:	460b      	mov	r3, r1
 8002e18:	72fb      	strb	r3, [r7, #11]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	72bb      	strb	r3, [r7, #10]
    /* Suppress unused parameter warnings */
    (void)u8x8;
    (void)arg_ptr;

    switch (msg)
 8002e1e:	7afb      	ldrb	r3, [r7, #11]
 8002e20:	2b4b      	cmp	r3, #75	@ 0x4b
 8002e22:	d01a      	beq.n	8002e5a <u8x8_stm32_gpio_and_delay+0x4e>
 8002e24:	2b4b      	cmp	r3, #75	@ 0x4b
 8002e26:	dc1f      	bgt.n	8002e68 <u8x8_stm32_gpio_and_delay+0x5c>
 8002e28:	2b4a      	cmp	r3, #74	@ 0x4a
 8002e2a:	d00f      	beq.n	8002e4c <u8x8_stm32_gpio_and_delay+0x40>
 8002e2c:	2b4a      	cmp	r3, #74	@ 0x4a
 8002e2e:	dc1b      	bgt.n	8002e68 <u8x8_stm32_gpio_and_delay+0x5c>
 8002e30:	2b28      	cmp	r3, #40	@ 0x28
 8002e32:	d002      	beq.n	8002e3a <u8x8_stm32_gpio_and_delay+0x2e>
 8002e34:	2b29      	cmp	r3, #41	@ 0x29
 8002e36:	d004      	beq.n	8002e42 <u8x8_stm32_gpio_and_delay+0x36>
        case U8X8_MSG_GPIO_RESET:
            HAL_GPIO_WritePin(DISPLAY_IO_1_GPIO_Port, DISPLAY_IO_1_Pin, (GPIO_PinState)arg_int);
            break;
        default:
            /* No action */
            break;
 8002e38:	e016      	b.n	8002e68 <u8x8_stm32_gpio_and_delay+0x5c>
            HAL_Delay(DISPLAY_UPDATE_DELAY_U32);
 8002e3a:	2002      	movs	r0, #2
 8002e3c:	f001 f93c 	bl	80040b8 <HAL_Delay>
            break;
 8002e40:	e013      	b.n	8002e6a <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_Delay(arg_int);
 8002e42:	7abb      	ldrb	r3, [r7, #10]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f001 f937 	bl	80040b8 <HAL_Delay>
            break;
 8002e4a:	e00e      	b.n	8002e6a <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_GPIO_WritePin(DISPLAY_IO_2_GPIO_Port, DISPLAY_IO_2_Pin, (GPIO_PinState)arg_int);
 8002e4c:	7abb      	ldrb	r3, [r7, #10]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	2108      	movs	r1, #8
 8002e52:	4808      	ldr	r0, [pc, #32]	@ (8002e74 <u8x8_stm32_gpio_and_delay+0x68>)
 8002e54:	f001 fbe6 	bl	8004624 <HAL_GPIO_WritePin>
            break;
 8002e58:	e007      	b.n	8002e6a <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_GPIO_WritePin(DISPLAY_IO_1_GPIO_Port, DISPLAY_IO_1_Pin, (GPIO_PinState)arg_int);
 8002e5a:	7abb      	ldrb	r3, [r7, #10]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	2104      	movs	r1, #4
 8002e60:	4804      	ldr	r0, [pc, #16]	@ (8002e74 <u8x8_stm32_gpio_and_delay+0x68>)
 8002e62:	f001 fbdf 	bl	8004624 <HAL_GPIO_WritePin>
            break;
 8002e66:	e000      	b.n	8002e6a <u8x8_stm32_gpio_and_delay+0x5e>
            break;
 8002e68:	bf00      	nop
    }
    return 1U;
 8002e6a:	2301      	movs	r3, #1
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40021800 	.word	0x40021800

08002e78 <u8x8_byte_4wire_hw_spi>:
 */
static uint8_t u8x8_byte_4wire_hw_spi(u8x8_t * const u8x8,
                                      uint8_t msg,
                                      uint8_t arg_int,
                                      void * const arg_ptr)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	607b      	str	r3, [r7, #4]
 8002e82:	460b      	mov	r3, r1
 8002e84:	72fb      	strb	r3, [r7, #11]
 8002e86:	4613      	mov	r3, r2
 8002e88:	72bb      	strb	r3, [r7, #10]
    uint8_t retVal = 1U;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	75fb      	strb	r3, [r7, #23]

    switch (msg)
 8002e8e:	7afb      	ldrb	r3, [r7, #11]
 8002e90:	3b14      	subs	r3, #20
 8002e92:	2b0c      	cmp	r3, #12
 8002e94:	d83e      	bhi.n	8002f14 <u8x8_byte_4wire_hw_spi+0x9c>
 8002e96:	a201      	add	r2, pc, #4	@ (adr r2, 8002e9c <u8x8_byte_4wire_hw_spi+0x24>)
 8002e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e9c:	08002f1b 	.word	0x08002f1b
 8002ea0:	08002f15 	.word	0x08002f15
 8002ea4:	08002f15 	.word	0x08002f15
 8002ea8:	08002ed1 	.word	0x08002ed1
 8002eac:	08002ef1 	.word	0x08002ef1
 8002eb0:	08002f03 	.word	0x08002f03
 8002eb4:	08002f15 	.word	0x08002f15
 8002eb8:	08002f15 	.word	0x08002f15
 8002ebc:	08002f15 	.word	0x08002f15
 8002ec0:	08002f15 	.word	0x08002f15
 8002ec4:	08002f15 	.word	0x08002f15
 8002ec8:	08002f15 	.word	0x08002f15
 8002ecc:	08002ee3 	.word	0x08002ee3
    {
        case U8X8_MSG_BYTE_SEND:
            (void)HAL_SPI_Transmit(&hspi3, (uint8_t *)arg_ptr, arg_int, SPI_TIMEOUT_U32);
 8002ed0:	7abb      	ldrb	r3, [r7, #10]
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	4813      	ldr	r0, [pc, #76]	@ (8002f28 <u8x8_byte_4wire_hw_spi+0xb0>)
 8002edc:	f003 f979 	bl	80061d2 <HAL_SPI_Transmit>
            break;
 8002ee0:	e01c      	b.n	8002f1c <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_INIT:
            break;
        case U8X8_MSG_BYTE_SET_DC:
            HAL_GPIO_WritePin(DISPLAY_IO_2_GPIO_Port, DISPLAY_IO_2_Pin, (GPIO_PinState)arg_int);
 8002ee2:	7abb      	ldrb	r3, [r7, #10]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	2108      	movs	r1, #8
 8002ee8:	4810      	ldr	r0, [pc, #64]	@ (8002f2c <u8x8_byte_4wire_hw_spi+0xb4>)
 8002eea:	f001 fb9b 	bl	8004624 <HAL_GPIO_WritePin>
            break;
 8002eee:	e015      	b.n	8002f1c <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_START_TRANSFER:
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, u8x8->display_info->chip_enable_level);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	2104      	movs	r1, #4
 8002efa:	480d      	ldr	r0, [pc, #52]	@ (8002f30 <u8x8_byte_4wire_hw_spi+0xb8>)
 8002efc:	f001 fb92 	bl	8004624 <HAL_GPIO_WritePin>
            break;
 8002f00:	e00c      	b.n	8002f1c <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_END_TRANSFER:
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, u8x8->display_info->chip_disable_level);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	785b      	ldrb	r3, [r3, #1]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	2104      	movs	r1, #4
 8002f0c:	4808      	ldr	r0, [pc, #32]	@ (8002f30 <u8x8_byte_4wire_hw_spi+0xb8>)
 8002f0e:	f001 fb89 	bl	8004624 <HAL_GPIO_WritePin>
            break;
 8002f12:	e003      	b.n	8002f1c <u8x8_byte_4wire_hw_spi+0xa4>
        default:
            retVal = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	75fb      	strb	r3, [r7, #23]
            break;
 8002f18:	e000      	b.n	8002f1c <u8x8_byte_4wire_hw_spi+0xa4>
            break;
 8002f1a:	bf00      	nop
    }
    return retVal;
 8002f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	20000a3c 	.word	0x20000a3c
 8002f2c:	40021800 	.word	0x40021800
 8002f30:	40020c00 	.word	0x40020c00

08002f34 <Display_Init>:

/**
 * @brief Initializes the display hardware and u8g2 library.
 */
void Display_Init(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
    /* Turn on the backlight */
    HAL_GPIO_WritePin(BACKLIGHT_1_GPIO_Port, BACKLIGHT_1_Pin, GPIO_PIN_SET);
 8002f38:	2201      	movs	r2, #1
 8002f3a:	2110      	movs	r1, #16
 8002f3c:	480c      	ldr	r0, [pc, #48]	@ (8002f70 <Display_Init+0x3c>)
 8002f3e:	f001 fb71 	bl	8004624 <HAL_GPIO_WritePin>

    /* Setup u8g2 for the ST7565 display.
       Adjust the setup function if your display type differs. */
    u8g2_Setup_st7565_64128n_f(&u8g2, U8G2_R2, u8x8_byte_4wire_hw_spi, u8x8_stm32_gpio_and_delay);
 8002f42:	4b0c      	ldr	r3, [pc, #48]	@ (8002f74 <Display_Init+0x40>)
 8002f44:	4a0c      	ldr	r2, [pc, #48]	@ (8002f78 <Display_Init+0x44>)
 8002f46:	490d      	ldr	r1, [pc, #52]	@ (8002f7c <Display_Init+0x48>)
 8002f48:	480d      	ldr	r0, [pc, #52]	@ (8002f80 <Display_Init+0x4c>)
 8002f4a:	f7fe f999 	bl	8001280 <u8g2_Setup_st7565_64128n_f>
    u8g2_InitDisplay(&u8g2);
 8002f4e:	480c      	ldr	r0, [pc, #48]	@ (8002f80 <Display_Init+0x4c>)
 8002f50:	f7ff fda4 	bl	8002a9c <u8x8_InitDisplay>
    u8g2_SetPowerSave(&u8g2, 0);
 8002f54:	2100      	movs	r1, #0
 8002f56:	480a      	ldr	r0, [pc, #40]	@ (8002f80 <Display_Init+0x4c>)
 8002f58:	f7ff fdaf 	bl	8002aba <u8x8_SetPowerSave>
    u8g2_ClearDisplay(&u8g2);
 8002f5c:	4808      	ldr	r0, [pc, #32]	@ (8002f80 <Display_Init+0x4c>)
 8002f5e:	f7fe f969 	bl	8001234 <u8g2_ClearDisplay>
    u8g2_SetContrast(&u8g2, CONTRAST_VALUE_U8);
 8002f62:	2178      	movs	r1, #120	@ 0x78
 8002f64:	4806      	ldr	r0, [pc, #24]	@ (8002f80 <Display_Init+0x4c>)
 8002f66:	f7ff fdb9 	bl	8002adc <u8x8_SetContrast>
}
 8002f6a:	bf00      	nop
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40021800 	.word	0x40021800
 8002f74:	08002e0d 	.word	0x08002e0d
 8002f78:	08002e79 	.word	0x08002e79
 8002f7c:	08007684 	.word	0x08007684
 8002f80:	20000848 	.word	0x20000848

08002f84 <Display_MainTitlePage>:
 * @brief Displays the main title page.
 *
 * This function draws the main title page with a logo and text.
 */
void Display_MainTitlePage(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af02      	add	r7, sp, #8
    do
    {
        /* Begin a new page */
        u8g2_FirstPage(&u8g2);
 8002f8a:	4824      	ldr	r0, [pc, #144]	@ (800301c <Display_MainTitlePage+0x98>)
 8002f8c:	f7fe f910 	bl	80011b0 <u8g2_FirstPage>
        do
        {
            /* Draw the logo image */
            u8g2_DrawXBM(&u8g2, 0, 0, 128, 64, logo);
 8002f90:	4b23      	ldr	r3, [pc, #140]	@ (8003020 <Display_MainTitlePage+0x9c>)
 8002f92:	9301      	str	r3, [sp, #4]
 8002f94:	2340      	movs	r3, #64	@ 0x40
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	2380      	movs	r3, #128	@ 0x80
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	481f      	ldr	r0, [pc, #124]	@ (800301c <Display_MainTitlePage+0x98>)
 8002fa0:	f7fe f838 	bl	8001014 <u8g2_DrawXBM>
        }
        while (u8g2_NextPage(&u8g2) != 0U);
 8002fa4:	481d      	ldr	r0, [pc, #116]	@ (800301c <Display_MainTitlePage+0x98>)
 8002fa6:	f7fe f917 	bl	80011d8 <u8g2_NextPage>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1ef      	bne.n	8002f90 <Display_MainTitlePage+0xc>

        HAL_Delay(PAGE_DELAY_U32);
 8002fb0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002fb4:	f001 f880 	bl	80040b8 <HAL_Delay>

        /* Clear the buffer and draw title text */
        u8g2_ClearBuffer(&u8g2);
 8002fb8:	4818      	ldr	r0, [pc, #96]	@ (800301c <Display_MainTitlePage+0x98>)
 8002fba:	f7fe f86e 	bl	800109a <u8g2_ClearBuffer>
        u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 8002fbe:	4919      	ldr	r1, [pc, #100]	@ (8003024 <Display_MainTitlePage+0xa0>)
 8002fc0:	4816      	ldr	r0, [pc, #88]	@ (800301c <Display_MainTitlePage+0x98>)
 8002fc2:	f7fe ff0d 	bl	8001de0 <u8g2_SetFont>
        u8g2_DrawStr(&u8g2, 42, 16, "VEGA");
 8002fc6:	4b18      	ldr	r3, [pc, #96]	@ (8003028 <Display_MainTitlePage+0xa4>)
 8002fc8:	2210      	movs	r2, #16
 8002fca:	212a      	movs	r1, #42	@ 0x2a
 8002fcc:	4813      	ldr	r0, [pc, #76]	@ (800301c <Display_MainTitlePage+0x98>)
 8002fce:	f7fe fe65 	bl	8001c9c <u8g2_DrawStr>
        u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 8002fd2:	4914      	ldr	r1, [pc, #80]	@ (8003024 <Display_MainTitlePage+0xa0>)
 8002fd4:	4811      	ldr	r0, [pc, #68]	@ (800301c <Display_MainTitlePage+0x98>)
 8002fd6:	f7fe ff03 	bl	8001de0 <u8g2_SetFont>
        u8g2_DrawStr(&u8g2, 6, 33, "INNOVATIONS");
 8002fda:	4b14      	ldr	r3, [pc, #80]	@ (800302c <Display_MainTitlePage+0xa8>)
 8002fdc:	2221      	movs	r2, #33	@ 0x21
 8002fde:	2106      	movs	r1, #6
 8002fe0:	480e      	ldr	r0, [pc, #56]	@ (800301c <Display_MainTitlePage+0x98>)
 8002fe2:	f7fe fe5b 	bl	8001c9c <u8g2_DrawStr>
        HAL_Delay(TEXT_DELAY_U32);
 8002fe6:	200a      	movs	r0, #10
 8002fe8:	f001 f866 	bl	80040b8 <HAL_Delay>
        u8g2_ClearBuffer(&u8g2);
 8002fec:	480b      	ldr	r0, [pc, #44]	@ (800301c <Display_MainTitlePage+0x98>)
 8002fee:	f7fe f854 	bl	800109a <u8g2_ClearBuffer>
    }
    while (u8g2_NextPage(&u8g2) != 0U);
 8002ff2:	480a      	ldr	r0, [pc, #40]	@ (800301c <Display_MainTitlePage+0x98>)
 8002ff4:	f7fe f8f0 	bl	80011d8 <u8g2_NextPage>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1c5      	bne.n	8002f8a <Display_MainTitlePage+0x6>

    HAL_Delay(FINAL_PAGE_DELAY_U32);
 8002ffe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003002:	f001 f859 	bl	80040b8 <HAL_Delay>

    u8g2_ClearBuffer(&u8g2);
 8003006:	4805      	ldr	r0, [pc, #20]	@ (800301c <Display_MainTitlePage+0x98>)
 8003008:	f7fe f847 	bl	800109a <u8g2_ClearBuffer>

    HAL_GPIO_WritePin(BACKLIGHT_1_GPIO_Port, BACKLIGHT_1_Pin, GPIO_PIN_RESET);
 800300c:	2200      	movs	r2, #0
 800300e:	2110      	movs	r1, #16
 8003010:	4807      	ldr	r0, [pc, #28]	@ (8003030 <Display_MainTitlePage+0xac>)
 8003012:	f001 fb07 	bl	8004624 <HAL_GPIO_WritePin>
}
 8003016:	bf00      	nop
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	20000848 	.word	0x20000848
 8003020:	20000020 	.word	0x20000020
 8003024:	08006a2c 	.word	0x08006a2c
 8003028:	080069d4 	.word	0x080069d4
 800302c:	080069dc 	.word	0x080069dc
 8003030:	40021800 	.word	0x40021800

08003034 <Expander_InitPinDirections>:
 * @param hi2c          Pointer to the I2C handle.
 * @param deviceAddress I2C address of the expander.
 * @return HAL_StatusTypeDef HAL_OK if successful, or an error code.
 */
HAL_StatusTypeDef Expander_InitPinDirections(I2C_HandleTypeDef *hi2c, uint8_t deviceAddress)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b088      	sub	sp, #32
 8003038:	af04      	add	r7, sp, #16
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	460b      	mov	r3, r1
 800303e:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef status;
    uint8_t port0_config = 0;
 8003040:	2300      	movs	r3, #0
 8003042:	73bb      	strb	r3, [r7, #14]

    // Build Port 0 configuration mask using the defined direction macros:
    port0_config |= (ALERT_PIN_CELL_01_DIR == PIN_INPUT) ? ALERT_PIN_CELL_01 : 0;
 8003044:	7bbb      	ldrb	r3, [r7, #14]
 8003046:	f043 0301 	orr.w	r3, r3, #1
 800304a:	b2db      	uxtb	r3, r3
 800304c:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_VOLTAGE_01_DIR == PIN_INPUT) ? CELL_01_VOLTAGE_01 : 0;
 800304e:	7bbb      	ldrb	r3, [r7, #14]
 8003050:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_VOLTAGE_02_DIR == PIN_INPUT) ? CELL_01_VOLTAGE_02 : 0;
 8003052:	7bbb      	ldrb	r3, [r7, #14]
 8003054:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_VOLTAGE_03_DIR == PIN_INPUT) ? CELL_01_VOLTAGE_03 : 0;
 8003056:	7bbb      	ldrb	r3, [r7, #14]
 8003058:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_LED_01_DIR       == PIN_INPUT) ? CELL_01_LED_01       : 0;
 800305a:	7bbb      	ldrb	r3, [r7, #14]
 800305c:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_02_VOLTAGE_03_DIR == PIN_INPUT) ? CELL_02_VOLTAGE_03 : 0;
 800305e:	7bbb      	ldrb	r3, [r7, #14]
 8003060:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_02_VOLTAGE_02_DIR == PIN_INPUT) ? CELL_02_VOLTAGE_02 : 0;
 8003062:	7bbb      	ldrb	r3, [r7, #14]
 8003064:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_02_VOLTAGE_01_DIR == PIN_INPUT) ? CELL_02_VOLTAGE_01 : 0;
 8003066:	7bbb      	ldrb	r3, [r7, #14]
 8003068:	73bb      	strb	r3, [r7, #14]

    // For Port 1, use the corresponding direction macros if needed.
    // In this example, we build Port 1 configuration mask similarly:
    uint8_t port1_config = 0;
 800306a:	2300      	movs	r3, #0
 800306c:	737b      	strb	r3, [r7, #13]
    port1_config |= (ALERT_PIN_CELL_02_DIR   == PIN_INPUT) ? (1U << 0) : 0;
 800306e:	7b7b      	ldrb	r3, [r7, #13]
 8003070:	f043 0301 	orr.w	r3, r3, #1
 8003074:	b2db      	uxtb	r3, r3
 8003076:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_02_LED_01_DIR      == PIN_INPUT) ? (1U << 1) : 0;
 8003078:	7b7b      	ldrb	r3, [r7, #13]
 800307a:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_LED_01_DIR      == PIN_INPUT) ? (1U << 2) : 0;
 800307c:	7b7b      	ldrb	r3, [r7, #13]
 800307e:	737b      	strb	r3, [r7, #13]
    port1_config |= (EXPANDER_FAN_CTRL_DIR   == PIN_INPUT) ? (1U << 3) : 0;
 8003080:	7b7b      	ldrb	r3, [r7, #13]
 8003082:	f043 0308 	orr.w	r3, r3, #8
 8003086:	b2db      	uxtb	r3, r3
 8003088:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_VOLTAGE_03_DIR  == PIN_INPUT) ? (1U << 4) : 0;
 800308a:	7b7b      	ldrb	r3, [r7, #13]
 800308c:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_VOLTAGE_02_DIR  == PIN_INPUT) ? (1U << 5) : 0;
 800308e:	7b7b      	ldrb	r3, [r7, #13]
 8003090:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_VOLTAGE_01_DIR  == PIN_INPUT) ? (1U << 6) : 0;
 8003092:	7b7b      	ldrb	r3, [r7, #13]
 8003094:	737b      	strb	r3, [r7, #13]
    port1_config |= (ALERT_PIN_CELL_03_DIR   == PIN_INPUT) ? (1U << 7) : 0;
 8003096:	7b7b      	ldrb	r3, [r7, #13]
 8003098:	737b      	strb	r3, [r7, #13]

    // Write configuration to Port 0 register.
    status = HAL_I2C_Mem_Write(hi2c,
 800309a:	78fb      	ldrb	r3, [r7, #3]
 800309c:	b29b      	uxth	r3, r3
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	b299      	uxth	r1, r3
 80030a2:	2364      	movs	r3, #100	@ 0x64
 80030a4:	9302      	str	r3, [sp, #8]
 80030a6:	2301      	movs	r3, #1
 80030a8:	9301      	str	r3, [sp, #4]
 80030aa:	f107 030e 	add.w	r3, r7, #14
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	2301      	movs	r3, #1
 80030b2:	2206      	movs	r2, #6
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f001 fc13 	bl	80048e0 <HAL_I2C_Mem_Write>
 80030ba:	4603      	mov	r3, r0
 80030bc:	73fb      	strb	r3, [r7, #15]
                               PCA9535_REG_CONFIG_PORT0,
                               I2C_MEMADD_SIZE_8BIT,
                               &port0_config,
                               1,
                               EXPANDER_I2C_TIMEOUT);
    if (status != HAL_OK)
 80030be:	7bfb      	ldrb	r3, [r7, #15]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <Expander_InitPinDirections+0x94>
    {
        return status;
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	e012      	b.n	80030ee <Expander_InitPinDirections+0xba>
    }

    // Write configuration to Port 1 register.
    status = HAL_I2C_Mem_Write(hi2c,
 80030c8:	78fb      	ldrb	r3, [r7, #3]
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	b299      	uxth	r1, r3
 80030d0:	2364      	movs	r3, #100	@ 0x64
 80030d2:	9302      	str	r3, [sp, #8]
 80030d4:	2301      	movs	r3, #1
 80030d6:	9301      	str	r3, [sp, #4]
 80030d8:	f107 030d 	add.w	r3, r7, #13
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	2301      	movs	r3, #1
 80030e0:	2207      	movs	r2, #7
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f001 fbfc 	bl	80048e0 <HAL_I2C_Mem_Write>
 80030e8:	4603      	mov	r3, r0
 80030ea:	73fb      	strb	r3, [r7, #15]
                               PCA9535_REG_CONFIG_PORT1,
                               I2C_MEMADD_SIZE_8BIT,
                               &port1_config,
                               1,
                               EXPANDER_I2C_TIMEOUT);
    return status;
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <Expander_SetPinState>:
 */
HAL_StatusTypeDef Expander_SetPinState(I2C_HandleTypeDef *hi2c,
                                       uint8_t deviceAddress,
                                       uint16_t pin,
                                       uint8_t state)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b088      	sub	sp, #32
 80030fa:	af04      	add	r7, sp, #16
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	4608      	mov	r0, r1
 8003100:	4611      	mov	r1, r2
 8003102:	461a      	mov	r2, r3
 8003104:	4603      	mov	r3, r0
 8003106:	70fb      	strb	r3, [r7, #3]
 8003108:	460b      	mov	r3, r1
 800310a:	803b      	strh	r3, [r7, #0]
 800310c:	4613      	mov	r3, r2
 800310e:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef status;
    uint8_t regAddress;
    uint8_t currentOutput;

    // Determine which port the pin belongs to.
    if ((pin & 0xFF00) == 0)
 8003110:	883b      	ldrh	r3, [r7, #0]
 8003112:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003116:	2b00      	cmp	r3, #0
 8003118:	d142      	bne.n	80031a0 <Expander_SetPinState+0xaa>
    {
        // Pin belongs to Port 0.
        regAddress = PCA9535_REG_OUTPUT_PORT0;
 800311a:	2302      	movs	r3, #2
 800311c:	73fb      	strb	r3, [r7, #15]
        status = HAL_I2C_Mem_Read(hi2c,
 800311e:	78fb      	ldrb	r3, [r7, #3]
 8003120:	b29b      	uxth	r3, r3
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	b299      	uxth	r1, r3
 8003126:	7bfb      	ldrb	r3, [r7, #15]
 8003128:	b29a      	uxth	r2, r3
 800312a:	2364      	movs	r3, #100	@ 0x64
 800312c:	9302      	str	r3, [sp, #8]
 800312e:	2301      	movs	r3, #1
 8003130:	9301      	str	r3, [sp, #4]
 8003132:	f107 030c 	add.w	r3, r7, #12
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	2301      	movs	r3, #1
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f001 fcca 	bl	8004ad4 <HAL_I2C_Mem_Read>
 8003140:	4603      	mov	r3, r0
 8003142:	73bb      	strb	r3, [r7, #14]
                                  regAddress,
                                  I2C_MEMADD_SIZE_8BIT,
                                  &currentOutput,
                                  1,
                                  EXPANDER_I2C_TIMEOUT);
        if (status != HAL_OK) {
 8003144:	7bbb      	ldrb	r3, [r7, #14]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <Expander_SetPinState+0x58>
            return status;
 800314a:	7bbb      	ldrb	r3, [r7, #14]
 800314c:	e073      	b.n	8003236 <Expander_SetPinState+0x140>
        }
        if (state == HIGH) {
 800314e:	78bb      	ldrb	r3, [r7, #2]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d106      	bne.n	8003162 <Expander_SetPinState+0x6c>
            currentOutput |= (uint8_t)pin;
 8003154:	883b      	ldrh	r3, [r7, #0]
 8003156:	b2da      	uxtb	r2, r3
 8003158:	7b3b      	ldrb	r3, [r7, #12]
 800315a:	4313      	orrs	r3, r2
 800315c:	b2db      	uxtb	r3, r3
 800315e:	733b      	strb	r3, [r7, #12]
 8003160:	e009      	b.n	8003176 <Expander_SetPinState+0x80>
        } else {
            currentOutput &= ~(uint8_t)pin;
 8003162:	883b      	ldrh	r3, [r7, #0]
 8003164:	b25b      	sxtb	r3, r3
 8003166:	43db      	mvns	r3, r3
 8003168:	b25a      	sxtb	r2, r3
 800316a:	7b3b      	ldrb	r3, [r7, #12]
 800316c:	b25b      	sxtb	r3, r3
 800316e:	4013      	ands	r3, r2
 8003170:	b25b      	sxtb	r3, r3
 8003172:	b2db      	uxtb	r3, r3
 8003174:	733b      	strb	r3, [r7, #12]
        }
        status = HAL_I2C_Mem_Write(hi2c,
 8003176:	78fb      	ldrb	r3, [r7, #3]
 8003178:	b29b      	uxth	r3, r3
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	b299      	uxth	r1, r3
 800317e:	7bfb      	ldrb	r3, [r7, #15]
 8003180:	b29a      	uxth	r2, r3
 8003182:	2364      	movs	r3, #100	@ 0x64
 8003184:	9302      	str	r3, [sp, #8]
 8003186:	2301      	movs	r3, #1
 8003188:	9301      	str	r3, [sp, #4]
 800318a:	f107 030c 	add.w	r3, r7, #12
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	2301      	movs	r3, #1
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f001 fba4 	bl	80048e0 <HAL_I2C_Mem_Write>
 8003198:	4603      	mov	r3, r0
 800319a:	73bb      	strb	r3, [r7, #14]
                                   regAddress,
                                   I2C_MEMADD_SIZE_8BIT,
                                   &currentOutput,
                                   1,
                                   EXPANDER_I2C_TIMEOUT);
        return status;
 800319c:	7bbb      	ldrb	r3, [r7, #14]
 800319e:	e04a      	b.n	8003236 <Expander_SetPinState+0x140>
    }
    else if ((pin & 0x00FF) == 0)
 80031a0:	883b      	ldrh	r3, [r7, #0]
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d145      	bne.n	8003234 <Expander_SetPinState+0x13e>
    {
        // Pin belongs to Port 1.
        regAddress = PCA9535_REG_OUTPUT_PORT1;
 80031a8:	2303      	movs	r3, #3
 80031aa:	73fb      	strb	r3, [r7, #15]
        status = HAL_I2C_Mem_Read(hi2c,
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	b299      	uxth	r1, r3
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	2364      	movs	r3, #100	@ 0x64
 80031ba:	9302      	str	r3, [sp, #8]
 80031bc:	2301      	movs	r3, #1
 80031be:	9301      	str	r3, [sp, #4]
 80031c0:	f107 030c 	add.w	r3, r7, #12
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	2301      	movs	r3, #1
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f001 fc83 	bl	8004ad4 <HAL_I2C_Mem_Read>
 80031ce:	4603      	mov	r3, r0
 80031d0:	73bb      	strb	r3, [r7, #14]
                                  regAddress,
                                  I2C_MEMADD_SIZE_8BIT,
                                  &currentOutput,
                                  1,
                                  EXPANDER_I2C_TIMEOUT);
        if (status != HAL_OK) {
 80031d2:	7bbb      	ldrb	r3, [r7, #14]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <Expander_SetPinState+0xe6>
            return status;
 80031d8:	7bbb      	ldrb	r3, [r7, #14]
 80031da:	e02c      	b.n	8003236 <Expander_SetPinState+0x140>
        }
        uint8_t pin_mask = (uint8_t)(pin >> 8);
 80031dc:	883b      	ldrh	r3, [r7, #0]
 80031de:	0a1b      	lsrs	r3, r3, #8
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	737b      	strb	r3, [r7, #13]
        if (state == HIGH) {
 80031e4:	78bb      	ldrb	r3, [r7, #2]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d105      	bne.n	80031f6 <Expander_SetPinState+0x100>
            currentOutput |= pin_mask;
 80031ea:	7b3a      	ldrb	r2, [r7, #12]
 80031ec:	7b7b      	ldrb	r3, [r7, #13]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	733b      	strb	r3, [r7, #12]
 80031f4:	e009      	b.n	800320a <Expander_SetPinState+0x114>
        } else {
            currentOutput &= ~pin_mask;
 80031f6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80031fa:	43db      	mvns	r3, r3
 80031fc:	b25a      	sxtb	r2, r3
 80031fe:	7b3b      	ldrb	r3, [r7, #12]
 8003200:	b25b      	sxtb	r3, r3
 8003202:	4013      	ands	r3, r2
 8003204:	b25b      	sxtb	r3, r3
 8003206:	b2db      	uxtb	r3, r3
 8003208:	733b      	strb	r3, [r7, #12]
        }
        status = HAL_I2C_Mem_Write(hi2c,
 800320a:	78fb      	ldrb	r3, [r7, #3]
 800320c:	b29b      	uxth	r3, r3
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	b299      	uxth	r1, r3
 8003212:	7bfb      	ldrb	r3, [r7, #15]
 8003214:	b29a      	uxth	r2, r3
 8003216:	2364      	movs	r3, #100	@ 0x64
 8003218:	9302      	str	r3, [sp, #8]
 800321a:	2301      	movs	r3, #1
 800321c:	9301      	str	r3, [sp, #4]
 800321e:	f107 030c 	add.w	r3, r7, #12
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	2301      	movs	r3, #1
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f001 fb5a 	bl	80048e0 <HAL_I2C_Mem_Write>
 800322c:	4603      	mov	r3, r0
 800322e:	73bb      	strb	r3, [r7, #14]
                                   regAddress,
                                   I2C_MEMADD_SIZE_8BIT,
                                   &currentOutput,
                                   1,
                                   EXPANDER_I2C_TIMEOUT);
        return status;
 8003230:	7bbb      	ldrb	r3, [r7, #14]
 8003232:	e000      	b.n	8003236 <Expander_SetPinState+0x140>
    }
    else {
        // Invalid pin mask.
        return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
    }
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
	...

08003240 <Expander_InitAllDevices>:
 *
 * @param hi2c Pointer to the I2C handle.
 * @return HAL_StatusTypeDef HAL_OK if all devices are initialized successfully, or an error code.
 */
HAL_StatusTypeDef Expander_InitAllDevices(I2C_HandleTypeDef *hi2c)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;

    // List of expander addresses.
    uint8_t addresses[] = {
 8003248:	4b11      	ldr	r3, [pc, #68]	@ (8003290 <Expander_InitAllDevices+0x50>)
 800324a:	60bb      	str	r3, [r7, #8]
        GPIO_EXPANDER_ID_02,
        GPIO_EXPANDER_ID_03,
        GPIO_EXPANDER_ID_04
    };

    size_t count = sizeof(addresses) / sizeof(addresses[0]);
 800324c:	2304      	movs	r3, #4
 800324e:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < count; i++)
 8003250:	2300      	movs	r3, #0
 8003252:	617b      	str	r3, [r7, #20]
 8003254:	e012      	b.n	800327c <Expander_InitAllDevices+0x3c>
    {
        status = Expander_InitPinDirections(hi2c, addresses[i]);
 8003256:	f107 0208 	add.w	r2, r7, #8
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	4413      	add	r3, r2
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	4619      	mov	r1, r3
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7ff fee6 	bl	8003034 <Expander_InitPinDirections>
 8003268:	4603      	mov	r3, r0
 800326a:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 800326c:	7bfb      	ldrb	r3, [r7, #15]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <Expander_InitAllDevices+0x36>
        {
            return status;
 8003272:	7bfb      	ldrb	r3, [r7, #15]
 8003274:	e007      	b.n	8003286 <Expander_InitAllDevices+0x46>
    for (size_t i = 0; i < count; i++)
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	3301      	adds	r3, #1
 800327a:	617b      	str	r3, [r7, #20]
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	429a      	cmp	r2, r3
 8003282:	d3e8      	bcc.n	8003256 <Expander_InitAllDevices+0x16>
        }
    }
    return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	24232221 	.word	0x24232221

08003294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003298:	f000 fe9c 	bl	8003fd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800329c:	f000 f8fe 	bl	800349c <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80032a0:	f000 fa8e 	bl	80037c0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80032a4:	f000 f9ea 	bl	800367c <MX_SPI1_Init>
  MX_SPI2_Init();
 80032a8:	f000 fa1e 	bl	80036e8 <MX_SPI2_Init>
  MX_I2C2_Init();
 80032ac:	f000 f966 	bl	800357c <MX_I2C2_Init>
  MX_I2C3_Init();
 80032b0:	f000 f9a4 	bl	80035fc <MX_I2C3_Init>
  MX_SPI3_Init();
 80032b4:	f000 fa4e 	bl	8003754 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize the display module */
  Display_Init();
 80032b8:	f7ff fe3c 	bl	8002f34 <Display_Init>

  /* Display the main title page */
  Display_MainTitlePage();
 80032bc:	f7ff fe62 	bl	8002f84 <Display_MainTitlePage>

  /* Initialize the expander at address 0x20 by configuring all its pins as outputs */
  Expander_InitAllDevices(&hi2c2);
 80032c0:	4870      	ldr	r0, [pc, #448]	@ (8003484 <main+0x1f0>)
 80032c2:	f7ff ffbd 	bl	8003240 <Expander_InitAllDevices>
  Expander_InitAllDevices(&hi2c3);
 80032c6:	4870      	ldr	r0, [pc, #448]	@ (8003488 <main+0x1f4>)
 80032c8:	f7ff ffba 	bl	8003240 <Expander_InitAllDevices>
//	  HAL_Delay(1000);
//	  Set_Output_Voltage(&hi2c3, CELL_1, 4.0f);
//	  HAL_Delay(1000);
//	  Set_Output_Voltage(&hi2c3, CELL_1, 4.2f);

			  Expander_SetPinState(&hi2c3, GPIO_EXPANDER_ID_01, CELL_01_LED_01 , HIGH);
 80032cc:	2301      	movs	r3, #1
 80032ce:	2210      	movs	r2, #16
 80032d0:	2121      	movs	r1, #33	@ 0x21
 80032d2:	486d      	ldr	r0, [pc, #436]	@ (8003488 <main+0x1f4>)
 80032d4:	f7ff ff0f 	bl	80030f6 <Expander_SetPinState>
			  Expander_SetPinState(&hi2c3, GPIO_EXPANDER_ID_01, CELL_02_LED_01 , HIGH);
 80032d8:	2301      	movs	r3, #1
 80032da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032de:	2121      	movs	r1, #33	@ 0x21
 80032e0:	4869      	ldr	r0, [pc, #420]	@ (8003488 <main+0x1f4>)
 80032e2:	f7ff ff08 	bl	80030f6 <Expander_SetPinState>
			  Expander_SetPinState(&hi2c3, GPIO_EXPANDER_ID_01, CELL_03_LED_01 , HIGH);
 80032e6:	2301      	movs	r3, #1
 80032e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80032ec:	2121      	movs	r1, #33	@ 0x21
 80032ee:	4866      	ldr	r0, [pc, #408]	@ (8003488 <main+0x1f4>)
 80032f0:	f7ff ff01 	bl	80030f6 <Expander_SetPinState>

			  Expander_SetPinState(&hi2c3, GPIO_EXPANDER_ID_02, CELL_01_LED_01 , HIGH);
 80032f4:	2301      	movs	r3, #1
 80032f6:	2210      	movs	r2, #16
 80032f8:	2122      	movs	r1, #34	@ 0x22
 80032fa:	4863      	ldr	r0, [pc, #396]	@ (8003488 <main+0x1f4>)
 80032fc:	f7ff fefb 	bl	80030f6 <Expander_SetPinState>
			  Expander_SetPinState(&hi2c3, GPIO_EXPANDER_ID_02, CELL_02_LED_01 , HIGH);
 8003300:	2301      	movs	r3, #1
 8003302:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003306:	2122      	movs	r1, #34	@ 0x22
 8003308:	485f      	ldr	r0, [pc, #380]	@ (8003488 <main+0x1f4>)
 800330a:	f7ff fef4 	bl	80030f6 <Expander_SetPinState>
			  Expander_SetPinState(&hi2c3, GPIO_EXPANDER_ID_02, CELL_03_LED_01 , HIGH);
 800330e:	2301      	movs	r3, #1
 8003310:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003314:	2122      	movs	r1, #34	@ 0x22
 8003316:	485c      	ldr	r0, [pc, #368]	@ (8003488 <main+0x1f4>)
 8003318:	f7ff feed 	bl	80030f6 <Expander_SetPinState>

			  Expander_SetPinState(&hi2c3, GPIO_EXPANDER_ID_03, CELL_01_LED_01 , HIGH);
 800331c:	2301      	movs	r3, #1
 800331e:	2210      	movs	r2, #16
 8003320:	2123      	movs	r1, #35	@ 0x23
 8003322:	4859      	ldr	r0, [pc, #356]	@ (8003488 <main+0x1f4>)
 8003324:	f7ff fee7 	bl	80030f6 <Expander_SetPinState>
			  Expander_SetPinState(&hi2c3, GPIO_EXPANDER_ID_03, CELL_02_LED_01 , HIGH);
 8003328:	2301      	movs	r3, #1
 800332a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800332e:	2123      	movs	r1, #35	@ 0x23
 8003330:	4855      	ldr	r0, [pc, #340]	@ (8003488 <main+0x1f4>)
 8003332:	f7ff fee0 	bl	80030f6 <Expander_SetPinState>
			  Expander_SetPinState(&hi2c3, GPIO_EXPANDER_ID_03, CELL_03_LED_01 , HIGH);
 8003336:	2301      	movs	r3, #1
 8003338:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800333c:	2123      	movs	r1, #35	@ 0x23
 800333e:	4852      	ldr	r0, [pc, #328]	@ (8003488 <main+0x1f4>)
 8003340:	f7ff fed9 	bl	80030f6 <Expander_SetPinState>

			  Expander_SetPinState(&hi2c3, GPIO_EXPANDER_ID_04, CELL_01_LED_01 , HIGH);
 8003344:	2301      	movs	r3, #1
 8003346:	2210      	movs	r2, #16
 8003348:	2124      	movs	r1, #36	@ 0x24
 800334a:	484f      	ldr	r0, [pc, #316]	@ (8003488 <main+0x1f4>)
 800334c:	f7ff fed3 	bl	80030f6 <Expander_SetPinState>
			  Expander_SetPinState(&hi2c3, GPIO_EXPANDER_ID_04, CELL_02_LED_01 , HIGH);
 8003350:	2301      	movs	r3, #1
 8003352:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003356:	2124      	movs	r1, #36	@ 0x24
 8003358:	484b      	ldr	r0, [pc, #300]	@ (8003488 <main+0x1f4>)
 800335a:	f7ff fecc 	bl	80030f6 <Expander_SetPinState>
			  Expander_SetPinState(&hi2c3, GPIO_EXPANDER_ID_04, CELL_03_LED_01 , HIGH);
 800335e:	2301      	movs	r3, #1
 8003360:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003364:	2124      	movs	r1, #36	@ 0x24
 8003366:	4848      	ldr	r0, [pc, #288]	@ (8003488 <main+0x1f4>)
 8003368:	f7ff fec5 	bl	80030f6 <Expander_SetPinState>

			  Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_01, CELL_01_LED_01 , HIGH);
 800336c:	2301      	movs	r3, #1
 800336e:	2210      	movs	r2, #16
 8003370:	2121      	movs	r1, #33	@ 0x21
 8003372:	4844      	ldr	r0, [pc, #272]	@ (8003484 <main+0x1f0>)
 8003374:	f7ff febf 	bl	80030f6 <Expander_SetPinState>
			  Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_01, CELL_02_LED_01 , HIGH);
 8003378:	2301      	movs	r3, #1
 800337a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800337e:	2121      	movs	r1, #33	@ 0x21
 8003380:	4840      	ldr	r0, [pc, #256]	@ (8003484 <main+0x1f0>)
 8003382:	f7ff feb8 	bl	80030f6 <Expander_SetPinState>
			  Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_01, CELL_03_LED_01 , HIGH);
 8003386:	2301      	movs	r3, #1
 8003388:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800338c:	2121      	movs	r1, #33	@ 0x21
 800338e:	483d      	ldr	r0, [pc, #244]	@ (8003484 <main+0x1f0>)
 8003390:	f7ff feb1 	bl	80030f6 <Expander_SetPinState>

			  Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_02, CELL_01_LED_01 , HIGH);
 8003394:	2301      	movs	r3, #1
 8003396:	2210      	movs	r2, #16
 8003398:	2122      	movs	r1, #34	@ 0x22
 800339a:	483a      	ldr	r0, [pc, #232]	@ (8003484 <main+0x1f0>)
 800339c:	f7ff feab 	bl	80030f6 <Expander_SetPinState>
			  Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_02, CELL_02_LED_01 , HIGH);
 80033a0:	2301      	movs	r3, #1
 80033a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033a6:	2122      	movs	r1, #34	@ 0x22
 80033a8:	4836      	ldr	r0, [pc, #216]	@ (8003484 <main+0x1f0>)
 80033aa:	f7ff fea4 	bl	80030f6 <Expander_SetPinState>
			  Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_02, CELL_03_LED_01 , HIGH);
 80033ae:	2301      	movs	r3, #1
 80033b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033b4:	2122      	movs	r1, #34	@ 0x22
 80033b6:	4833      	ldr	r0, [pc, #204]	@ (8003484 <main+0x1f0>)
 80033b8:	f7ff fe9d 	bl	80030f6 <Expander_SetPinState>

			  Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_03, CELL_01_LED_01 , HIGH);
 80033bc:	2301      	movs	r3, #1
 80033be:	2210      	movs	r2, #16
 80033c0:	2123      	movs	r1, #35	@ 0x23
 80033c2:	4830      	ldr	r0, [pc, #192]	@ (8003484 <main+0x1f0>)
 80033c4:	f7ff fe97 	bl	80030f6 <Expander_SetPinState>
			  Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_03, CELL_02_LED_01 , HIGH);
 80033c8:	2301      	movs	r3, #1
 80033ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033ce:	2123      	movs	r1, #35	@ 0x23
 80033d0:	482c      	ldr	r0, [pc, #176]	@ (8003484 <main+0x1f0>)
 80033d2:	f7ff fe90 	bl	80030f6 <Expander_SetPinState>
			  Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_03, CELL_03_LED_01 , HIGH);
 80033d6:	2301      	movs	r3, #1
 80033d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033dc:	2123      	movs	r1, #35	@ 0x23
 80033de:	4829      	ldr	r0, [pc, #164]	@ (8003484 <main+0x1f0>)
 80033e0:	f7ff fe89 	bl	80030f6 <Expander_SetPinState>

			  Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_04, CELL_01_LED_01 , HIGH);
 80033e4:	2301      	movs	r3, #1
 80033e6:	2210      	movs	r2, #16
 80033e8:	2124      	movs	r1, #36	@ 0x24
 80033ea:	4826      	ldr	r0, [pc, #152]	@ (8003484 <main+0x1f0>)
 80033ec:	f7ff fe83 	bl	80030f6 <Expander_SetPinState>
			  Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_04, CELL_02_LED_01 , HIGH);
 80033f0:	2301      	movs	r3, #1
 80033f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033f6:	2124      	movs	r1, #36	@ 0x24
 80033f8:	4822      	ldr	r0, [pc, #136]	@ (8003484 <main+0x1f0>)
 80033fa:	f7ff fe7c 	bl	80030f6 <Expander_SetPinState>
			  Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_04, CELL_03_LED_01 , HIGH);
 80033fe:	2301      	movs	r3, #1
 8003400:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003404:	2124      	movs	r1, #36	@ 0x24
 8003406:	481f      	ldr	r0, [pc, #124]	@ (8003484 <main+0x1f0>)
 8003408:	f7ff fe75 	bl	80030f6 <Expander_SetPinState>
//		  cell12_Temp_02_Set(resistance[1]);
//		  cell12_Temp_03_Set(resistance[2]);
//		  cell11_Temp_01_Set(resistance[3]);
//		  cell11_Temp_02_Set(resistance[4]);
//		  cell11_Temp_03_Set(resistance[5]);
Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_01, CELL_01_LED_01 , LOW);
 800340c:	2300      	movs	r3, #0
 800340e:	2210      	movs	r2, #16
 8003410:	2121      	movs	r1, #33	@ 0x21
 8003412:	481c      	ldr	r0, [pc, #112]	@ (8003484 <main+0x1f0>)
 8003414:	f7ff fe6f 	bl	80030f6 <Expander_SetPinState>
HAL_Delay(1000);
 8003418:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800341c:	f000 fe4c 	bl	80040b8 <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOE, CELL12_CS_01_Pin, GPIO_PIN_RESET);
 8003420:	2200      	movs	r2, #0
 8003422:	2104      	movs	r1, #4
 8003424:	4819      	ldr	r0, [pc, #100]	@ (800348c <main+0x1f8>)
 8003426:	f001 f8fd 	bl	8004624 <HAL_GPIO_WritePin>
//
		  busVoltage = INA229_getVBUS_V(INA229_0);
 800342a:	4b19      	ldr	r3, [pc, #100]	@ (8003490 <main+0x1fc>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff fc42 	bl	8002cb8 <INA229_getVBUS_V>
 8003434:	eef0 7a40 	vmov.f32	s15, s0
 8003438:	4b16      	ldr	r3, [pc, #88]	@ (8003494 <main+0x200>)
 800343a:	edc3 7a00 	vstr	s15, [r3]

//
//HAL_Delay(1000);
		  HAL_GPIO_WritePin(GPIOE, CELL12_CS_01_Pin, GPIO_PIN_SET);
 800343e:	2201      	movs	r2, #1
 8003440:	2104      	movs	r1, #4
 8003442:	4812      	ldr	r0, [pc, #72]	@ (800348c <main+0x1f8>)
 8003444:	f001 f8ee 	bl	8004624 <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 8003448:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800344c:	f000 fe34 	bl	80040b8 <HAL_Delay>


		  HAL_GPIO_WritePin(GPIOE, CELL12_CS_01_Pin, GPIO_PIN_RESET);
 8003450:	2200      	movs	r2, #0
 8003452:	2104      	movs	r1, #4
 8003454:	480d      	ldr	r0, [pc, #52]	@ (800348c <main+0x1f8>)
 8003456:	f001 f8e5 	bl	8004624 <HAL_GPIO_WritePin>
//
		  temperatureC = INA229_getDIETEMP_C(INA229_0);
 800345a:	4b0d      	ldr	r3, [pc, #52]	@ (8003490 <main+0x1fc>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff fc88 	bl	8002d74 <INA229_getDIETEMP_C>
 8003464:	eef0 7a40 	vmov.f32	s15, s0
 8003468:	4b0b      	ldr	r3, [pc, #44]	@ (8003498 <main+0x204>)
 800346a:	edc3 7a00 	vstr	s15, [r3]

//
//HAL_Delay(1000);
	  HAL_GPIO_WritePin(GPIOE, CELL12_CS_01_Pin, GPIO_PIN_SET);
 800346e:	2201      	movs	r2, #1
 8003470:	2104      	movs	r1, #4
 8003472:	4806      	ldr	r0, [pc, #24]	@ (800348c <main+0x1f8>)
 8003474:	f001 f8d6 	bl	8004624 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8003478:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800347c:	f000 fe1c 	bl	80040b8 <HAL_Delay>
			  Expander_SetPinState(&hi2c3, GPIO_EXPANDER_ID_01, CELL_01_LED_01 , HIGH);
 8003480:	bf00      	nop
 8003482:	e723      	b.n	80032cc <main+0x38>
 8003484:	200008e4 	.word	0x200008e4
 8003488:	20000938 	.word	0x20000938
 800348c:	40021000 	.word	0x40021000
 8003490:	08007728 	.word	0x08007728
 8003494:	200008dc 	.word	0x200008dc
 8003498:	200008e0 	.word	0x200008e0

0800349c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b094      	sub	sp, #80	@ 0x50
 80034a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034a2:	f107 0320 	add.w	r3, r7, #32
 80034a6:	2230      	movs	r2, #48	@ 0x30
 80034a8:	2100      	movs	r1, #0
 80034aa:	4618      	mov	r0, r3
 80034ac:	f003 fa5a 	bl	8006964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034b0:	f107 030c 	add.w	r3, r7, #12
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	605a      	str	r2, [r3, #4]
 80034ba:	609a      	str	r2, [r3, #8]
 80034bc:	60da      	str	r2, [r3, #12]
 80034be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80034c0:	2300      	movs	r3, #0
 80034c2:	60bb      	str	r3, [r7, #8]
 80034c4:	4b2b      	ldr	r3, [pc, #172]	@ (8003574 <SystemClock_Config+0xd8>)
 80034c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c8:	4a2a      	ldr	r2, [pc, #168]	@ (8003574 <SystemClock_Config+0xd8>)
 80034ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80034d0:	4b28      	ldr	r3, [pc, #160]	@ (8003574 <SystemClock_Config+0xd8>)
 80034d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034d8:	60bb      	str	r3, [r7, #8]
 80034da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80034dc:	2300      	movs	r3, #0
 80034de:	607b      	str	r3, [r7, #4]
 80034e0:	4b25      	ldr	r3, [pc, #148]	@ (8003578 <SystemClock_Config+0xdc>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a24      	ldr	r2, [pc, #144]	@ (8003578 <SystemClock_Config+0xdc>)
 80034e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80034ea:	6013      	str	r3, [r2, #0]
 80034ec:	4b22      	ldr	r3, [pc, #136]	@ (8003578 <SystemClock_Config+0xdc>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80034f4:	607b      	str	r3, [r7, #4]
 80034f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80034f8:	2301      	movs	r3, #1
 80034fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80034fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003500:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003502:	2302      	movs	r3, #2
 8003504:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003506:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800350a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800350c:	230f      	movs	r3, #15
 800350e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8003510:	23d8      	movs	r3, #216	@ 0xd8
 8003512:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003514:	2302      	movs	r3, #2
 8003516:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003518:	2304      	movs	r3, #4
 800351a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800351c:	f107 0320 	add.w	r3, r7, #32
 8003520:	4618      	mov	r0, r3
 8003522:	f002 f989 	bl	8005838 <HAL_RCC_OscConfig>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800352c:	f000 fb6c 	bl	8003c08 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003530:	f002 f932 	bl	8005798 <HAL_PWREx_EnableOverDrive>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800353a:	f000 fb65 	bl	8003c08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800353e:	230f      	movs	r3, #15
 8003540:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003542:	2302      	movs	r3, #2
 8003544:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003546:	2300      	movs	r3, #0
 8003548:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800354a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800354e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003550:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003554:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003556:	f107 030c 	add.w	r3, r7, #12
 800355a:	2105      	movs	r1, #5
 800355c:	4618      	mov	r0, r3
 800355e:	f002 fbe3 	bl	8005d28 <HAL_RCC_ClockConfig>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8003568:	f000 fb4e 	bl	8003c08 <Error_Handler>
  }
}
 800356c:	bf00      	nop
 800356e:	3750      	adds	r7, #80	@ 0x50
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40023800 	.word	0x40023800
 8003578:	40007000 	.word	0x40007000

0800357c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003580:	4b1b      	ldr	r3, [pc, #108]	@ (80035f0 <MX_I2C2_Init+0x74>)
 8003582:	4a1c      	ldr	r2, [pc, #112]	@ (80035f4 <MX_I2C2_Init+0x78>)
 8003584:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8003586:	4b1a      	ldr	r3, [pc, #104]	@ (80035f0 <MX_I2C2_Init+0x74>)
 8003588:	4a1b      	ldr	r2, [pc, #108]	@ (80035f8 <MX_I2C2_Init+0x7c>)
 800358a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800358c:	4b18      	ldr	r3, [pc, #96]	@ (80035f0 <MX_I2C2_Init+0x74>)
 800358e:	2200      	movs	r2, #0
 8003590:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003592:	4b17      	ldr	r3, [pc, #92]	@ (80035f0 <MX_I2C2_Init+0x74>)
 8003594:	2200      	movs	r2, #0
 8003596:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003598:	4b15      	ldr	r3, [pc, #84]	@ (80035f0 <MX_I2C2_Init+0x74>)
 800359a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800359e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80035a0:	4b13      	ldr	r3, [pc, #76]	@ (80035f0 <MX_I2C2_Init+0x74>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80035a6:	4b12      	ldr	r3, [pc, #72]	@ (80035f0 <MX_I2C2_Init+0x74>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035ac:	4b10      	ldr	r3, [pc, #64]	@ (80035f0 <MX_I2C2_Init+0x74>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80035b2:	4b0f      	ldr	r3, [pc, #60]	@ (80035f0 <MX_I2C2_Init+0x74>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80035b8:	480d      	ldr	r0, [pc, #52]	@ (80035f0 <MX_I2C2_Init+0x74>)
 80035ba:	f001 f84d 	bl	8004658 <HAL_I2C_Init>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80035c4:	f000 fb20 	bl	8003c08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80035c8:	2100      	movs	r1, #0
 80035ca:	4809      	ldr	r0, [pc, #36]	@ (80035f0 <MX_I2C2_Init+0x74>)
 80035cc:	f002 f868 	bl	80056a0 <HAL_I2CEx_ConfigAnalogFilter>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80035d6:	f000 fb17 	bl	8003c08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80035da:	2100      	movs	r1, #0
 80035dc:	4804      	ldr	r0, [pc, #16]	@ (80035f0 <MX_I2C2_Init+0x74>)
 80035de:	f002 f89b 	bl	8005718 <HAL_I2CEx_ConfigDigitalFilter>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80035e8:	f000 fb0e 	bl	8003c08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80035ec:	bf00      	nop
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	200008e4 	.word	0x200008e4
 80035f4:	40005800 	.word	0x40005800
 80035f8:	00061a80 	.word	0x00061a80

080035fc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003600:	4b1b      	ldr	r3, [pc, #108]	@ (8003670 <MX_I2C3_Init+0x74>)
 8003602:	4a1c      	ldr	r2, [pc, #112]	@ (8003674 <MX_I2C3_Init+0x78>)
 8003604:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8003606:	4b1a      	ldr	r3, [pc, #104]	@ (8003670 <MX_I2C3_Init+0x74>)
 8003608:	4a1b      	ldr	r2, [pc, #108]	@ (8003678 <MX_I2C3_Init+0x7c>)
 800360a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800360c:	4b18      	ldr	r3, [pc, #96]	@ (8003670 <MX_I2C3_Init+0x74>)
 800360e:	2200      	movs	r2, #0
 8003610:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003612:	4b17      	ldr	r3, [pc, #92]	@ (8003670 <MX_I2C3_Init+0x74>)
 8003614:	2200      	movs	r2, #0
 8003616:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003618:	4b15      	ldr	r3, [pc, #84]	@ (8003670 <MX_I2C3_Init+0x74>)
 800361a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800361e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003620:	4b13      	ldr	r3, [pc, #76]	@ (8003670 <MX_I2C3_Init+0x74>)
 8003622:	2200      	movs	r2, #0
 8003624:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003626:	4b12      	ldr	r3, [pc, #72]	@ (8003670 <MX_I2C3_Init+0x74>)
 8003628:	2200      	movs	r2, #0
 800362a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800362c:	4b10      	ldr	r3, [pc, #64]	@ (8003670 <MX_I2C3_Init+0x74>)
 800362e:	2200      	movs	r2, #0
 8003630:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003632:	4b0f      	ldr	r3, [pc, #60]	@ (8003670 <MX_I2C3_Init+0x74>)
 8003634:	2200      	movs	r2, #0
 8003636:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003638:	480d      	ldr	r0, [pc, #52]	@ (8003670 <MX_I2C3_Init+0x74>)
 800363a:	f001 f80d 	bl	8004658 <HAL_I2C_Init>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003644:	f000 fae0 	bl	8003c08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003648:	2100      	movs	r1, #0
 800364a:	4809      	ldr	r0, [pc, #36]	@ (8003670 <MX_I2C3_Init+0x74>)
 800364c:	f002 f828 	bl	80056a0 <HAL_I2CEx_ConfigAnalogFilter>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8003656:	f000 fad7 	bl	8003c08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800365a:	2100      	movs	r1, #0
 800365c:	4804      	ldr	r0, [pc, #16]	@ (8003670 <MX_I2C3_Init+0x74>)
 800365e:	f002 f85b 	bl	8005718 <HAL_I2CEx_ConfigDigitalFilter>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8003668:	f000 face 	bl	8003c08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800366c:	bf00      	nop
 800366e:	bd80      	pop	{r7, pc}
 8003670:	20000938 	.word	0x20000938
 8003674:	40005c00 	.word	0x40005c00
 8003678:	00061a80 	.word	0x00061a80

0800367c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003680:	4b17      	ldr	r3, [pc, #92]	@ (80036e0 <MX_SPI1_Init+0x64>)
 8003682:	4a18      	ldr	r2, [pc, #96]	@ (80036e4 <MX_SPI1_Init+0x68>)
 8003684:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003686:	4b16      	ldr	r3, [pc, #88]	@ (80036e0 <MX_SPI1_Init+0x64>)
 8003688:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800368c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800368e:	4b14      	ldr	r3, [pc, #80]	@ (80036e0 <MX_SPI1_Init+0x64>)
 8003690:	2200      	movs	r2, #0
 8003692:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003694:	4b12      	ldr	r3, [pc, #72]	@ (80036e0 <MX_SPI1_Init+0x64>)
 8003696:	2200      	movs	r2, #0
 8003698:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800369a:	4b11      	ldr	r3, [pc, #68]	@ (80036e0 <MX_SPI1_Init+0x64>)
 800369c:	2200      	movs	r2, #0
 800369e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80036a0:	4b0f      	ldr	r3, [pc, #60]	@ (80036e0 <MX_SPI1_Init+0x64>)
 80036a2:	2201      	movs	r2, #1
 80036a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80036a6:	4b0e      	ldr	r3, [pc, #56]	@ (80036e0 <MX_SPI1_Init+0x64>)
 80036a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80036ae:	4b0c      	ldr	r3, [pc, #48]	@ (80036e0 <MX_SPI1_Init+0x64>)
 80036b0:	2218      	movs	r2, #24
 80036b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80036b4:	4b0a      	ldr	r3, [pc, #40]	@ (80036e0 <MX_SPI1_Init+0x64>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80036ba:	4b09      	ldr	r3, [pc, #36]	@ (80036e0 <MX_SPI1_Init+0x64>)
 80036bc:	2200      	movs	r2, #0
 80036be:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036c0:	4b07      	ldr	r3, [pc, #28]	@ (80036e0 <MX_SPI1_Init+0x64>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80036c6:	4b06      	ldr	r3, [pc, #24]	@ (80036e0 <MX_SPI1_Init+0x64>)
 80036c8:	220a      	movs	r2, #10
 80036ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80036cc:	4804      	ldr	r0, [pc, #16]	@ (80036e0 <MX_SPI1_Init+0x64>)
 80036ce:	f002 fcf7 	bl	80060c0 <HAL_SPI_Init>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80036d8:	f000 fa96 	bl	8003c08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80036dc:	bf00      	nop
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	2000098c 	.word	0x2000098c
 80036e4:	40013000 	.word	0x40013000

080036e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80036ec:	4b17      	ldr	r3, [pc, #92]	@ (800374c <MX_SPI2_Init+0x64>)
 80036ee:	4a18      	ldr	r2, [pc, #96]	@ (8003750 <MX_SPI2_Init+0x68>)
 80036f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80036f2:	4b16      	ldr	r3, [pc, #88]	@ (800374c <MX_SPI2_Init+0x64>)
 80036f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80036f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80036fa:	4b14      	ldr	r3, [pc, #80]	@ (800374c <MX_SPI2_Init+0x64>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003700:	4b12      	ldr	r3, [pc, #72]	@ (800374c <MX_SPI2_Init+0x64>)
 8003702:	2200      	movs	r2, #0
 8003704:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003706:	4b11      	ldr	r3, [pc, #68]	@ (800374c <MX_SPI2_Init+0x64>)
 8003708:	2200      	movs	r2, #0
 800370a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800370c:	4b0f      	ldr	r3, [pc, #60]	@ (800374c <MX_SPI2_Init+0x64>)
 800370e:	2201      	movs	r2, #1
 8003710:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003712:	4b0e      	ldr	r3, [pc, #56]	@ (800374c <MX_SPI2_Init+0x64>)
 8003714:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003718:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800371a:	4b0c      	ldr	r3, [pc, #48]	@ (800374c <MX_SPI2_Init+0x64>)
 800371c:	2218      	movs	r2, #24
 800371e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003720:	4b0a      	ldr	r3, [pc, #40]	@ (800374c <MX_SPI2_Init+0x64>)
 8003722:	2200      	movs	r2, #0
 8003724:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003726:	4b09      	ldr	r3, [pc, #36]	@ (800374c <MX_SPI2_Init+0x64>)
 8003728:	2200      	movs	r2, #0
 800372a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800372c:	4b07      	ldr	r3, [pc, #28]	@ (800374c <MX_SPI2_Init+0x64>)
 800372e:	2200      	movs	r2, #0
 8003730:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003732:	4b06      	ldr	r3, [pc, #24]	@ (800374c <MX_SPI2_Init+0x64>)
 8003734:	220a      	movs	r2, #10
 8003736:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003738:	4804      	ldr	r0, [pc, #16]	@ (800374c <MX_SPI2_Init+0x64>)
 800373a:	f002 fcc1 	bl	80060c0 <HAL_SPI_Init>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003744:	f000 fa60 	bl	8003c08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003748:	bf00      	nop
 800374a:	bd80      	pop	{r7, pc}
 800374c:	200009e4 	.word	0x200009e4
 8003750:	40003800 	.word	0x40003800

08003754 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003758:	4b17      	ldr	r3, [pc, #92]	@ (80037b8 <MX_SPI3_Init+0x64>)
 800375a:	4a18      	ldr	r2, [pc, #96]	@ (80037bc <MX_SPI3_Init+0x68>)
 800375c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800375e:	4b16      	ldr	r3, [pc, #88]	@ (80037b8 <MX_SPI3_Init+0x64>)
 8003760:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003764:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003766:	4b14      	ldr	r3, [pc, #80]	@ (80037b8 <MX_SPI3_Init+0x64>)
 8003768:	2200      	movs	r2, #0
 800376a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800376c:	4b12      	ldr	r3, [pc, #72]	@ (80037b8 <MX_SPI3_Init+0x64>)
 800376e:	2200      	movs	r2, #0
 8003770:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003772:	4b11      	ldr	r3, [pc, #68]	@ (80037b8 <MX_SPI3_Init+0x64>)
 8003774:	2200      	movs	r2, #0
 8003776:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003778:	4b0f      	ldr	r3, [pc, #60]	@ (80037b8 <MX_SPI3_Init+0x64>)
 800377a:	2200      	movs	r2, #0
 800377c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800377e:	4b0e      	ldr	r3, [pc, #56]	@ (80037b8 <MX_SPI3_Init+0x64>)
 8003780:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003784:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003786:	4b0c      	ldr	r3, [pc, #48]	@ (80037b8 <MX_SPI3_Init+0x64>)
 8003788:	2220      	movs	r2, #32
 800378a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800378c:	4b0a      	ldr	r3, [pc, #40]	@ (80037b8 <MX_SPI3_Init+0x64>)
 800378e:	2200      	movs	r2, #0
 8003790:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003792:	4b09      	ldr	r3, [pc, #36]	@ (80037b8 <MX_SPI3_Init+0x64>)
 8003794:	2200      	movs	r2, #0
 8003796:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003798:	4b07      	ldr	r3, [pc, #28]	@ (80037b8 <MX_SPI3_Init+0x64>)
 800379a:	2200      	movs	r2, #0
 800379c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800379e:	4b06      	ldr	r3, [pc, #24]	@ (80037b8 <MX_SPI3_Init+0x64>)
 80037a0:	220a      	movs	r2, #10
 80037a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80037a4:	4804      	ldr	r0, [pc, #16]	@ (80037b8 <MX_SPI3_Init+0x64>)
 80037a6:	f002 fc8b 	bl	80060c0 <HAL_SPI_Init>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80037b0:	f000 fa2a 	bl	8003c08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80037b4:	bf00      	nop
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	20000a3c 	.word	0x20000a3c
 80037bc:	40003c00 	.word	0x40003c00

080037c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08e      	sub	sp, #56	@ 0x38
 80037c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037ca:	2200      	movs	r2, #0
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	605a      	str	r2, [r3, #4]
 80037d0:	609a      	str	r2, [r3, #8]
 80037d2:	60da      	str	r2, [r3, #12]
 80037d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80037d6:	2300      	movs	r3, #0
 80037d8:	623b      	str	r3, [r7, #32]
 80037da:	4bb4      	ldr	r3, [pc, #720]	@ (8003aac <MX_GPIO_Init+0x2ec>)
 80037dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037de:	4ab3      	ldr	r2, [pc, #716]	@ (8003aac <MX_GPIO_Init+0x2ec>)
 80037e0:	f043 0310 	orr.w	r3, r3, #16
 80037e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80037e6:	4bb1      	ldr	r3, [pc, #708]	@ (8003aac <MX_GPIO_Init+0x2ec>)
 80037e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ea:	f003 0310 	and.w	r3, r3, #16
 80037ee:	623b      	str	r3, [r7, #32]
 80037f0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80037f2:	2300      	movs	r3, #0
 80037f4:	61fb      	str	r3, [r7, #28]
 80037f6:	4bad      	ldr	r3, [pc, #692]	@ (8003aac <MX_GPIO_Init+0x2ec>)
 80037f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fa:	4aac      	ldr	r2, [pc, #688]	@ (8003aac <MX_GPIO_Init+0x2ec>)
 80037fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003800:	6313      	str	r3, [r2, #48]	@ 0x30
 8003802:	4baa      	ldr	r3, [pc, #680]	@ (8003aac <MX_GPIO_Init+0x2ec>)
 8003804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800380a:	61fb      	str	r3, [r7, #28]
 800380c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800380e:	2300      	movs	r3, #0
 8003810:	61bb      	str	r3, [r7, #24]
 8003812:	4ba6      	ldr	r3, [pc, #664]	@ (8003aac <MX_GPIO_Init+0x2ec>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003816:	4aa5      	ldr	r2, [pc, #660]	@ (8003aac <MX_GPIO_Init+0x2ec>)
 8003818:	f043 0304 	orr.w	r3, r3, #4
 800381c:	6313      	str	r3, [r2, #48]	@ 0x30
 800381e:	4ba3      	ldr	r3, [pc, #652]	@ (8003aac <MX_GPIO_Init+0x2ec>)
 8003820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	61bb      	str	r3, [r7, #24]
 8003828:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800382a:	2300      	movs	r3, #0
 800382c:	617b      	str	r3, [r7, #20]
 800382e:	4b9f      	ldr	r3, [pc, #636]	@ (8003aac <MX_GPIO_Init+0x2ec>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003832:	4a9e      	ldr	r2, [pc, #632]	@ (8003aac <MX_GPIO_Init+0x2ec>)
 8003834:	f043 0320 	orr.w	r3, r3, #32
 8003838:	6313      	str	r3, [r2, #48]	@ 0x30
 800383a:	4b9c      	ldr	r3, [pc, #624]	@ (8003aac <MX_GPIO_Init+0x2ec>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383e:	f003 0320 	and.w	r3, r3, #32
 8003842:	617b      	str	r3, [r7, #20]
 8003844:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003846:	2300      	movs	r3, #0
 8003848:	613b      	str	r3, [r7, #16]
 800384a:	4b98      	ldr	r3, [pc, #608]	@ (8003aac <MX_GPIO_Init+0x2ec>)
 800384c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384e:	4a97      	ldr	r2, [pc, #604]	@ (8003aac <MX_GPIO_Init+0x2ec>)
 8003850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003854:	6313      	str	r3, [r2, #48]	@ 0x30
 8003856:	4b95      	ldr	r3, [pc, #596]	@ (8003aac <MX_GPIO_Init+0x2ec>)
 8003858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800385a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800385e:	613b      	str	r3, [r7, #16]
 8003860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	4b91      	ldr	r3, [pc, #580]	@ (8003aac <MX_GPIO_Init+0x2ec>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800386a:	4a90      	ldr	r2, [pc, #576]	@ (8003aac <MX_GPIO_Init+0x2ec>)
 800386c:	f043 0301 	orr.w	r3, r3, #1
 8003870:	6313      	str	r3, [r2, #48]	@ 0x30
 8003872:	4b8e      	ldr	r3, [pc, #568]	@ (8003aac <MX_GPIO_Init+0x2ec>)
 8003874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800387e:	2300      	movs	r3, #0
 8003880:	60bb      	str	r3, [r7, #8]
 8003882:	4b8a      	ldr	r3, [pc, #552]	@ (8003aac <MX_GPIO_Init+0x2ec>)
 8003884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003886:	4a89      	ldr	r2, [pc, #548]	@ (8003aac <MX_GPIO_Init+0x2ec>)
 8003888:	f043 0302 	orr.w	r3, r3, #2
 800388c:	6313      	str	r3, [r2, #48]	@ 0x30
 800388e:	4b87      	ldr	r3, [pc, #540]	@ (8003aac <MX_GPIO_Init+0x2ec>)
 8003890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	60bb      	str	r3, [r7, #8]
 8003898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800389a:	2300      	movs	r3, #0
 800389c:	607b      	str	r3, [r7, #4]
 800389e:	4b83      	ldr	r3, [pc, #524]	@ (8003aac <MX_GPIO_Init+0x2ec>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a2:	4a82      	ldr	r2, [pc, #520]	@ (8003aac <MX_GPIO_Init+0x2ec>)
 80038a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80038aa:	4b80      	ldr	r3, [pc, #512]	@ (8003aac <MX_GPIO_Init+0x2ec>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038b2:	607b      	str	r3, [r7, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80038b6:	2300      	movs	r3, #0
 80038b8:	603b      	str	r3, [r7, #0]
 80038ba:	4b7c      	ldr	r3, [pc, #496]	@ (8003aac <MX_GPIO_Init+0x2ec>)
 80038bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038be:	4a7b      	ldr	r2, [pc, #492]	@ (8003aac <MX_GPIO_Init+0x2ec>)
 80038c0:	f043 0308 	orr.w	r3, r3, #8
 80038c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80038c6:	4b79      	ldr	r3, [pc, #484]	@ (8003aac <MX_GPIO_Init+0x2ec>)
 80038c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ca:	f003 0308 	and.w	r3, r3, #8
 80038ce:	603b      	str	r3, [r7, #0]
 80038d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CELL12_CS_01_Pin|CELL12_CS_02_Pin|CELL12_CS_03_Pin|CELL12_CS_04_Pin
 80038d2:	2201      	movs	r2, #1
 80038d4:	217c      	movs	r1, #124	@ 0x7c
 80038d6:	4876      	ldr	r0, [pc, #472]	@ (8003ab0 <MX_GPIO_Init+0x2f0>)
 80038d8:	f000 fea4 	bl	8004624 <HAL_GPIO_WritePin>
                          |CELL12_CS_05_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, CELL12_CS_06_Pin|CELL12_CS_08_Pin|CELL12_CS_10_Pin|CELL12_CS_09_Pin, GPIO_PIN_SET);
 80038dc:	2201      	movs	r2, #1
 80038de:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 80038e2:	4874      	ldr	r0, [pc, #464]	@ (8003ab4 <MX_GPIO_Init+0x2f4>)
 80038e4:	f000 fe9e 	bl	8004624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CELL12_CS_07_GPIO_Port, CELL12_CS_07_Pin, GPIO_PIN_RESET);
 80038e8:	2200      	movs	r2, #0
 80038ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80038ee:	4872      	ldr	r0, [pc, #456]	@ (8003ab8 <MX_GPIO_Init+0x2f8>)
 80038f0:	f000 fe98 	bl	8004624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CELL12_CS_11_Pin|CELL12_CS_12_Pin|GPIO_01_Pin|CELL12_TEMP_03_CS_Pin
 80038f4:	2201      	movs	r2, #1
 80038f6:	f240 5147 	movw	r1, #1351	@ 0x547
 80038fa:	4870      	ldr	r0, [pc, #448]	@ (8003abc <MX_GPIO_Init+0x2fc>)
 80038fc:	f000 fe92 	bl	8004624 <HAL_GPIO_WritePin>
                          |CELL12_TEMP_03_LED_Pin|CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_02_LED_Pin|CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8003900:	2201      	movs	r2, #1
 8003902:	2103      	movs	r1, #3
 8003904:	486c      	ldr	r0, [pc, #432]	@ (8003ab8 <MX_GPIO_Init+0x2f8>)
 8003906:	f000 fe8d 	bl	8004624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CELL12_TEMP_01_LED_GPIO_Port, CELL12_TEMP_01_LED_Pin, GPIO_PIN_SET);
 800390a:	2201      	movs	r2, #1
 800390c:	2101      	movs	r1, #1
 800390e:	486c      	ldr	r0, [pc, #432]	@ (8003ac0 <MX_GPIO_Init+0x300>)
 8003910:	f000 fe88 	bl	8004624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8003914:	2200      	movs	r2, #0
 8003916:	2102      	movs	r1, #2
 8003918:	4869      	ldr	r0, [pc, #420]	@ (8003ac0 <MX_GPIO_Init+0x300>)
 800391a:	f000 fe83 	bl	8004624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 800391e:	2201      	movs	r2, #1
 8003920:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003924:	4867      	ldr	r0, [pc, #412]	@ (8003ac4 <MX_GPIO_Init+0x304>)
 8003926:	f000 fe7d 	bl	8004624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_03_LED_Pin|CELL11_TEMP_02_CS_Pin|CELL11_TEMP_02_LED_Pin|CELL11_TEMP_01_CS_Pin
 800392a:	2201      	movs	r2, #1
 800392c:	f44f 51f2 	mov.w	r1, #7744	@ 0x1e40
 8003930:	4865      	ldr	r0, [pc, #404]	@ (8003ac8 <MX_GPIO_Init+0x308>)
 8003932:	f000 fe77 	bl	8004624 <HAL_GPIO_WritePin>
                          |CELL11_TEMP_01_LED_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, DISPLAY_IO_1_Pin|DISPLAY_IO_2_Pin|BACKLIGHT_1_Pin|BACKLIGHT_2_Pin
 8003936:	2200      	movs	r2, #0
 8003938:	f24e 013c 	movw	r1, #57404	@ 0xe03c
 800393c:	4863      	ldr	r0, [pc, #396]	@ (8003acc <MX_GPIO_Init+0x30c>)
 800393e:	f000 fe71 	bl	8004624 <HAL_GPIO_WritePin>
                          |LED_09_Pin|LED_04_Pin|LED_08_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_01_Pin|LED_02_Pin, GPIO_PIN_RESET);
 8003942:	2200      	movs	r2, #0
 8003944:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8003948:	485f      	ldr	r0, [pc, #380]	@ (8003ac8 <MX_GPIO_Init+0x308>)
 800394a:	f000 fe6b 	bl	8004624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DISPLAY_CS_Pin|DISPLAY_CSD3_Pin, GPIO_PIN_RESET);
 800394e:	2200      	movs	r2, #0
 8003950:	210c      	movs	r1, #12
 8003952:	485f      	ldr	r0, [pc, #380]	@ (8003ad0 <MX_GPIO_Init+0x310>)
 8003954:	f000 fe66 	bl	8004624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_03_Pin|LED_07_Pin, GPIO_PIN_RESET);
 8003958:	2200      	movs	r2, #0
 800395a:	2118      	movs	r1, #24
 800395c:	4859      	ldr	r0, [pc, #356]	@ (8003ac4 <MX_GPIO_Init+0x304>)
 800395e:	f000 fe61 	bl	8004624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_06_Pin|LED_05_Pin, GPIO_PIN_RESET);
 8003962:	2200      	movs	r2, #0
 8003964:	2103      	movs	r1, #3
 8003966:	4852      	ldr	r0, [pc, #328]	@ (8003ab0 <MX_GPIO_Init+0x2f0>)
 8003968:	f000 fe5c 	bl	8004624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED_DC_Y_Pin|LED_DC_G_Pin|LED_PC_Y_Pin|LED_PC_G_Pin, GPIO_PIN_RESET);
 800396c:	2200      	movs	r2, #0
 800396e:	21f0      	movs	r1, #240	@ 0xf0
 8003970:	4850      	ldr	r0, [pc, #320]	@ (8003ab4 <MX_GPIO_Init+0x2f4>)
 8003972:	f000 fe57 	bl	8004624 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CELL12_CS_01_Pin CELL12_CS_02_Pin CELL12_CS_03_Pin CELL12_CS_04_Pin
                           CELL12_CS_05_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_01_Pin|CELL12_CS_02_Pin|CELL12_CS_03_Pin|CELL12_CS_04_Pin
 8003976:	237c      	movs	r3, #124	@ 0x7c
 8003978:	627b      	str	r3, [r7, #36]	@ 0x24
                          |CELL12_CS_05_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800397a:	2301      	movs	r3, #1
 800397c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800397e:	2300      	movs	r3, #0
 8003980:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003982:	2302      	movs	r3, #2
 8003984:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003986:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800398a:	4619      	mov	r1, r3
 800398c:	4848      	ldr	r0, [pc, #288]	@ (8003ab0 <MX_GPIO_Init+0x2f0>)
 800398e:	f000 fc9d 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_CS_06_Pin LED_DC_Y_Pin LED_DC_G_Pin LED_PC_Y_Pin
                           LED_PC_G_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_06_Pin|LED_DC_Y_Pin|LED_DC_G_Pin|LED_PC_Y_Pin
 8003992:	f44f 73f8 	mov.w	r3, #496	@ 0x1f0
 8003996:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LED_PC_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003998:	2301      	movs	r3, #1
 800399a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800399c:	2300      	movs	r3, #0
 800399e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039a0:	2300      	movs	r3, #0
 80039a2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80039a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039a8:	4619      	mov	r1, r3
 80039aa:	4842      	ldr	r0, [pc, #264]	@ (8003ab4 <MX_GPIO_Init+0x2f4>)
 80039ac:	f000 fc8e 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_CS_07_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_07_Pin;
 80039b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80039b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039b6:	2301      	movs	r3, #1
 80039b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ba:	2300      	movs	r3, #0
 80039bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039be:	2300      	movs	r3, #0
 80039c0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_CS_07_GPIO_Port, &GPIO_InitStruct);
 80039c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039c6:	4619      	mov	r1, r3
 80039c8:	483b      	ldr	r0, [pc, #236]	@ (8003ab8 <MX_GPIO_Init+0x2f8>)
 80039ca:	f000 fc7f 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_CS_08_Pin CELL12_CS_10_Pin CELL12_CS_09_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_08_Pin|CELL12_CS_10_Pin|CELL12_CS_09_Pin;
 80039ce:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 80039d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039d4:	2301      	movs	r3, #1
 80039d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d8:	2300      	movs	r3, #0
 80039da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039dc:	2302      	movs	r3, #2
 80039de:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80039e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039e4:	4619      	mov	r1, r3
 80039e6:	4833      	ldr	r0, [pc, #204]	@ (8003ab4 <MX_GPIO_Init+0x2f4>)
 80039e8:	f000 fc70 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_CS_11_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_11_Pin;
 80039ec:	2301      	movs	r3, #1
 80039ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039f0:	2301      	movs	r3, #1
 80039f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f4:	2300      	movs	r3, #0
 80039f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039f8:	2300      	movs	r3, #0
 80039fa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_CS_11_GPIO_Port, &GPIO_InitStruct);
 80039fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a00:	4619      	mov	r1, r3
 8003a02:	482e      	ldr	r0, [pc, #184]	@ (8003abc <MX_GPIO_Init+0x2fc>)
 8003a04:	f000 fc62 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_CS_12_Pin GPIO_01_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_12_Pin|GPIO_01_Pin;
 8003a08:	2306      	movs	r3, #6
 8003a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a14:	2302      	movs	r3, #2
 8003a16:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003a18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4827      	ldr	r0, [pc, #156]	@ (8003abc <MX_GPIO_Init+0x2fc>)
 8003a20:	f000 fc54 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_TEMP_03_CS_Pin CELL12_TEMP_02_CS_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_03_CS_Pin|CELL12_TEMP_02_CS_Pin;
 8003a24:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 8003a28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a32:	2303      	movs	r3, #3
 8003a34:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003a36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	481f      	ldr	r0, [pc, #124]	@ (8003abc <MX_GPIO_Init+0x2fc>)
 8003a3e:	f000 fc45 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_03_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_03_LED_Pin;
 8003a42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a50:	2303      	movs	r3, #3
 8003a52:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_03_LED_GPIO_Port, &GPIO_InitStruct);
 8003a54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4818      	ldr	r0, [pc, #96]	@ (8003abc <MX_GPIO_Init+0x2fc>)
 8003a5c:	f000 fc36 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_02_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_02_LED_Pin;
 8003a60:	2301      	movs	r3, #1
 8003a62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a64:	2301      	movs	r3, #1
 8003a66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a68:	2302      	movs	r3, #2
 8003a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_02_LED_GPIO_Port, &GPIO_InitStruct);
 8003a70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a74:	4619      	mov	r1, r3
 8003a76:	4810      	ldr	r0, [pc, #64]	@ (8003ab8 <MX_GPIO_Init+0x2f8>)
 8003a78:	f000 fc28 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_01_CS_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_01_CS_Pin;
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a80:	2301      	movs	r3, #1
 8003a82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a84:	2301      	movs	r3, #1
 8003a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_01_CS_GPIO_Port, &GPIO_InitStruct);
 8003a8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a90:	4619      	mov	r1, r3
 8003a92:	4809      	ldr	r0, [pc, #36]	@ (8003ab8 <MX_GPIO_Init+0x2f8>)
 8003a94:	f000 fc1a 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_01_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_01_LED_Pin;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003aa8:	e014      	b.n	8003ad4 <MX_GPIO_Init+0x314>
 8003aaa:	bf00      	nop
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	40022000 	.word	0x40022000
 8003ab8:	40020800 	.word	0x40020800
 8003abc:	40021400 	.word	0x40021400
 8003ac0:	40020000 	.word	0x40020000
 8003ac4:	40020400 	.word	0x40020400
 8003ac8:	40021c00 	.word	0x40021c00
 8003acc:	40021800 	.word	0x40021800
 8003ad0:	40020c00 	.word	0x40020c00
  HAL_GPIO_Init(CELL12_TEMP_01_LED_GPIO_Port, &GPIO_InitStruct);
 8003ad4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4845      	ldr	r0, [pc, #276]	@ (8003bf0 <MX_GPIO_Init+0x430>)
 8003adc:	f000 fbf6 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003aec:	2302      	movs	r3, #2
 8003aee:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003af0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003af4:	4619      	mov	r1, r3
 8003af6:	483e      	ldr	r0, [pc, #248]	@ (8003bf0 <MX_GPIO_Init+0x430>)
 8003af8:	f000 fbe8 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL11_TEMP_03_CS_Pin */
  GPIO_InitStruct.Pin = CELL11_TEMP_03_CS_Pin;
 8003afc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003b00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b02:	2301      	movs	r3, #1
 8003b04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b06:	2301      	movs	r3, #1
 8003b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL11_TEMP_03_CS_GPIO_Port, &GPIO_InitStruct);
 8003b0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b12:	4619      	mov	r1, r3
 8003b14:	4837      	ldr	r0, [pc, #220]	@ (8003bf4 <MX_GPIO_Init+0x434>)
 8003b16:	f000 fbd9 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_TEMP_03_LED_Pin CELL11_TEMP_02_LED_Pin CELL11_TEMP_01_LED_Pin */
  GPIO_InitStruct.Pin = CELL11_TEMP_03_LED_Pin|CELL11_TEMP_02_LED_Pin|CELL11_TEMP_01_LED_Pin;
 8003b1a:	f44f 53a2 	mov.w	r3, #5184	@ 0x1440
 8003b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b20:	2301      	movs	r3, #1
 8003b22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003b24:	2302      	movs	r3, #2
 8003b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003b2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b30:	4619      	mov	r1, r3
 8003b32:	4831      	ldr	r0, [pc, #196]	@ (8003bf8 <MX_GPIO_Init+0x438>)
 8003b34:	f000 fbca 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_TEMP_02_CS_Pin CELL11_TEMP_01_CS_Pin */
  GPIO_InitStruct.Pin = CELL11_TEMP_02_CS_Pin|CELL11_TEMP_01_CS_Pin;
 8003b38:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8003b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b42:	2301      	movs	r3, #1
 8003b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b46:	2303      	movs	r3, #3
 8003b48:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003b4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4829      	ldr	r0, [pc, #164]	@ (8003bf8 <MX_GPIO_Init+0x438>)
 8003b52:	f000 fbbb 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPLAY_IO_1_Pin DISPLAY_IO_2_Pin BACKLIGHT_1_Pin BACKLIGHT_2_Pin
                           LED_09_Pin LED_04_Pin LED_08_Pin */
  GPIO_InitStruct.Pin = DISPLAY_IO_1_Pin|DISPLAY_IO_2_Pin|BACKLIGHT_1_Pin|BACKLIGHT_2_Pin
 8003b56:	f24e 033c 	movw	r3, #57404	@ 0xe03c
 8003b5a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LED_09_Pin|LED_04_Pin|LED_08_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b64:	2300      	movs	r3, #0
 8003b66:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003b68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	4823      	ldr	r0, [pc, #140]	@ (8003bfc <MX_GPIO_Init+0x43c>)
 8003b70:	f000 fbac 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_01_Pin LED_02_Pin */
  GPIO_InitStruct.Pin = LED_01_Pin|LED_02_Pin;
 8003b74:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003b78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b82:	2300      	movs	r3, #0
 8003b84:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003b86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	481a      	ldr	r0, [pc, #104]	@ (8003bf8 <MX_GPIO_Init+0x438>)
 8003b8e:	f000 fb9d 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPLAY_CS_Pin DISPLAY_CSD3_Pin */
  GPIO_InitStruct.Pin = DISPLAY_CS_Pin|DISPLAY_CSD3_Pin;
 8003b92:	230c      	movs	r3, #12
 8003b94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b96:	2301      	movs	r3, #1
 8003b98:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ba2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	4815      	ldr	r0, [pc, #84]	@ (8003c00 <MX_GPIO_Init+0x440>)
 8003baa:	f000 fb8f 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_03_Pin LED_07_Pin */
  GPIO_InitStruct.Pin = LED_03_Pin|LED_07_Pin;
 8003bae:	2318      	movs	r3, #24
 8003bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	480b      	ldr	r0, [pc, #44]	@ (8003bf4 <MX_GPIO_Init+0x434>)
 8003bc6:	f000 fb81 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_06_Pin LED_05_Pin */
  GPIO_InitStruct.Pin = LED_06_Pin|LED_05_Pin;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003bda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003bde:	4619      	mov	r1, r3
 8003be0:	4808      	ldr	r0, [pc, #32]	@ (8003c04 <MX_GPIO_Init+0x444>)
 8003be2:	f000 fb73 	bl	80042cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003be6:	bf00      	nop
 8003be8:	3738      	adds	r7, #56	@ 0x38
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40020000 	.word	0x40020000
 8003bf4:	40020400 	.word	0x40020400
 8003bf8:	40021c00 	.word	0x40021c00
 8003bfc:	40021800 	.word	0x40021800
 8003c00:	40020c00 	.word	0x40020c00
 8003c04:	40021000 	.word	0x40021000

08003c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c0c:	b672      	cpsid	i
}
 8003c0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c10:	bf00      	nop
 8003c12:	e7fd      	b.n	8003c10 <Error_Handler+0x8>

08003c14 <mcu_spiTransfer>:
{
    /* Add MCU specific init necessary for I2C to be used */
}

uint8_t mcu_spiTransfer(uint8_t busId, uint8_t csGPIOId, uint8_t count, uint8_t* txBuf, uint8_t* rxBuf)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af02      	add	r7, sp, #8
 8003c1a:	603b      	str	r3, [r7, #0]
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	71fb      	strb	r3, [r7, #7]
 8003c20:	460b      	mov	r3, r1
 8003c22:	71bb      	strb	r3, [r7, #6]
 8003c24:	4613      	mov	r3, r2
 8003c26:	717b      	strb	r3, [r7, #5]
    /*
     *  Add MCU specific SPI read/write code here.
     */

	HAL_SPI_TransmitReceive(&hspi1, txBuf, rxBuf, count, HAL_MAX_DELAY);
 8003c28:	797b      	ldrb	r3, [r7, #5]
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c30:	9200      	str	r2, [sp, #0]
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	6839      	ldr	r1, [r7, #0]
 8003c36:	4804      	ldr	r0, [pc, #16]	@ (8003c48 <mcu_spiTransfer+0x34>)
 8003c38:	f002 fc0f 	bl	800645a <HAL_SPI_TransmitReceive>
//	    return 0; // Success
    /*
     *  Add MCU specific return code for error handling
     */

    return (0);
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	2000098c 	.word	0x2000098c

08003c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c52:	2300      	movs	r3, #0
 8003c54:	607b      	str	r3, [r7, #4]
 8003c56:	4b10      	ldr	r3, [pc, #64]	@ (8003c98 <HAL_MspInit+0x4c>)
 8003c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c5a:	4a0f      	ldr	r2, [pc, #60]	@ (8003c98 <HAL_MspInit+0x4c>)
 8003c5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c60:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c62:	4b0d      	ldr	r3, [pc, #52]	@ (8003c98 <HAL_MspInit+0x4c>)
 8003c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c6a:	607b      	str	r3, [r7, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c6e:	2300      	movs	r3, #0
 8003c70:	603b      	str	r3, [r7, #0]
 8003c72:	4b09      	ldr	r3, [pc, #36]	@ (8003c98 <HAL_MspInit+0x4c>)
 8003c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c76:	4a08      	ldr	r2, [pc, #32]	@ (8003c98 <HAL_MspInit+0x4c>)
 8003c78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c7e:	4b06      	ldr	r3, [pc, #24]	@ (8003c98 <HAL_MspInit+0x4c>)
 8003c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c86:	603b      	str	r3, [r7, #0]
 8003c88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	40023800 	.word	0x40023800

08003c9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08c      	sub	sp, #48	@ 0x30
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca4:	f107 031c 	add.w	r3, r7, #28
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	605a      	str	r2, [r3, #4]
 8003cae:	609a      	str	r2, [r3, #8]
 8003cb0:	60da      	str	r2, [r3, #12]
 8003cb2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a32      	ldr	r2, [pc, #200]	@ (8003d84 <HAL_I2C_MspInit+0xe8>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d12c      	bne.n	8003d18 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61bb      	str	r3, [r7, #24]
 8003cc2:	4b31      	ldr	r3, [pc, #196]	@ (8003d88 <HAL_I2C_MspInit+0xec>)
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc6:	4a30      	ldr	r2, [pc, #192]	@ (8003d88 <HAL_I2C_MspInit+0xec>)
 8003cc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cce:	4b2e      	ldr	r3, [pc, #184]	@ (8003d88 <HAL_I2C_MspInit+0xec>)
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd6:	61bb      	str	r3, [r7, #24]
 8003cd8:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003cda:	2330      	movs	r3, #48	@ 0x30
 8003cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cde:	2312      	movs	r3, #18
 8003ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003cea:	2304      	movs	r3, #4
 8003cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003cee:	f107 031c 	add.w	r3, r7, #28
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	4825      	ldr	r0, [pc, #148]	@ (8003d8c <HAL_I2C_MspInit+0xf0>)
 8003cf6:	f000 fae9 	bl	80042cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	4b22      	ldr	r3, [pc, #136]	@ (8003d88 <HAL_I2C_MspInit+0xec>)
 8003d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d02:	4a21      	ldr	r2, [pc, #132]	@ (8003d88 <HAL_I2C_MspInit+0xec>)
 8003d04:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003d08:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8003d88 <HAL_I2C_MspInit+0xec>)
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d12:	617b      	str	r3, [r7, #20]
 8003d14:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003d16:	e031      	b.n	8003d7c <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C3)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a1c      	ldr	r2, [pc, #112]	@ (8003d90 <HAL_I2C_MspInit+0xf4>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d12c      	bne.n	8003d7c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d22:	2300      	movs	r3, #0
 8003d24:	613b      	str	r3, [r7, #16]
 8003d26:	4b18      	ldr	r3, [pc, #96]	@ (8003d88 <HAL_I2C_MspInit+0xec>)
 8003d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2a:	4a17      	ldr	r2, [pc, #92]	@ (8003d88 <HAL_I2C_MspInit+0xec>)
 8003d2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d32:	4b15      	ldr	r3, [pc, #84]	@ (8003d88 <HAL_I2C_MspInit+0xec>)
 8003d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d3a:	613b      	str	r3, [r7, #16]
 8003d3c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003d3e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d44:	2312      	movs	r3, #18
 8003d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003d50:	2304      	movs	r3, #4
 8003d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003d54:	f107 031c 	add.w	r3, r7, #28
 8003d58:	4619      	mov	r1, r3
 8003d5a:	480c      	ldr	r0, [pc, #48]	@ (8003d8c <HAL_I2C_MspInit+0xf0>)
 8003d5c:	f000 fab6 	bl	80042cc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003d60:	2300      	movs	r3, #0
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	4b08      	ldr	r3, [pc, #32]	@ (8003d88 <HAL_I2C_MspInit+0xec>)
 8003d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d68:	4a07      	ldr	r2, [pc, #28]	@ (8003d88 <HAL_I2C_MspInit+0xec>)
 8003d6a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003d6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d70:	4b05      	ldr	r3, [pc, #20]	@ (8003d88 <HAL_I2C_MspInit+0xec>)
 8003d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d78:	60fb      	str	r3, [r7, #12]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
}
 8003d7c:	bf00      	nop
 8003d7e:	3730      	adds	r7, #48	@ 0x30
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40005800 	.word	0x40005800
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	40021c00 	.word	0x40021c00
 8003d90:	40005c00 	.word	0x40005c00

08003d94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b08e      	sub	sp, #56	@ 0x38
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	605a      	str	r2, [r3, #4]
 8003da6:	609a      	str	r2, [r3, #8]
 8003da8:	60da      	str	r2, [r3, #12]
 8003daa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a4b      	ldr	r2, [pc, #300]	@ (8003ee0 <HAL_SPI_MspInit+0x14c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d12c      	bne.n	8003e10 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003db6:	2300      	movs	r3, #0
 8003db8:	623b      	str	r3, [r7, #32]
 8003dba:	4b4a      	ldr	r3, [pc, #296]	@ (8003ee4 <HAL_SPI_MspInit+0x150>)
 8003dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dbe:	4a49      	ldr	r2, [pc, #292]	@ (8003ee4 <HAL_SPI_MspInit+0x150>)
 8003dc0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003dc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003dc6:	4b47      	ldr	r3, [pc, #284]	@ (8003ee4 <HAL_SPI_MspInit+0x150>)
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003dce:	623b      	str	r3, [r7, #32]
 8003dd0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	61fb      	str	r3, [r7, #28]
 8003dd6:	4b43      	ldr	r3, [pc, #268]	@ (8003ee4 <HAL_SPI_MspInit+0x150>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dda:	4a42      	ldr	r2, [pc, #264]	@ (8003ee4 <HAL_SPI_MspInit+0x150>)
 8003ddc:	f043 0301 	orr.w	r3, r3, #1
 8003de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003de2:	4b40      	ldr	r3, [pc, #256]	@ (8003ee4 <HAL_SPI_MspInit+0x150>)
 8003de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	61fb      	str	r3, [r7, #28]
 8003dec:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003dee:	23e0      	movs	r3, #224	@ 0xe0
 8003df0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df2:	2302      	movs	r3, #2
 8003df4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df6:	2300      	movs	r3, #0
 8003df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003dfe:	2305      	movs	r3, #5
 8003e00:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e06:	4619      	mov	r1, r3
 8003e08:	4837      	ldr	r0, [pc, #220]	@ (8003ee8 <HAL_SPI_MspInit+0x154>)
 8003e0a:	f000 fa5f 	bl	80042cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003e0e:	e063      	b.n	8003ed8 <HAL_SPI_MspInit+0x144>
  else if(hspi->Instance==SPI2)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a35      	ldr	r2, [pc, #212]	@ (8003eec <HAL_SPI_MspInit+0x158>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d12c      	bne.n	8003e74 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	61bb      	str	r3, [r7, #24]
 8003e1e:	4b31      	ldr	r3, [pc, #196]	@ (8003ee4 <HAL_SPI_MspInit+0x150>)
 8003e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e22:	4a30      	ldr	r2, [pc, #192]	@ (8003ee4 <HAL_SPI_MspInit+0x150>)
 8003e24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e28:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e2a:	4b2e      	ldr	r3, [pc, #184]	@ (8003ee4 <HAL_SPI_MspInit+0x150>)
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e32:	61bb      	str	r3, [r7, #24]
 8003e34:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003e36:	2300      	movs	r3, #0
 8003e38:	617b      	str	r3, [r7, #20]
 8003e3a:	4b2a      	ldr	r3, [pc, #168]	@ (8003ee4 <HAL_SPI_MspInit+0x150>)
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e3e:	4a29      	ldr	r2, [pc, #164]	@ (8003ee4 <HAL_SPI_MspInit+0x150>)
 8003e40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e46:	4b27      	ldr	r3, [pc, #156]	@ (8003ee4 <HAL_SPI_MspInit+0x150>)
 8003e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003e52:	230e      	movs	r3, #14
 8003e54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e56:	2302      	movs	r3, #2
 8003e58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e62:	2305      	movs	r3, #5
 8003e64:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003e66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4820      	ldr	r0, [pc, #128]	@ (8003ef0 <HAL_SPI_MspInit+0x15c>)
 8003e6e:	f000 fa2d 	bl	80042cc <HAL_GPIO_Init>
}
 8003e72:	e031      	b.n	8003ed8 <HAL_SPI_MspInit+0x144>
  else if(hspi->Instance==SPI3)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a1e      	ldr	r2, [pc, #120]	@ (8003ef4 <HAL_SPI_MspInit+0x160>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d12c      	bne.n	8003ed8 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003e7e:	2300      	movs	r3, #0
 8003e80:	613b      	str	r3, [r7, #16]
 8003e82:	4b18      	ldr	r3, [pc, #96]	@ (8003ee4 <HAL_SPI_MspInit+0x150>)
 8003e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e86:	4a17      	ldr	r2, [pc, #92]	@ (8003ee4 <HAL_SPI_MspInit+0x150>)
 8003e88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e8e:	4b15      	ldr	r3, [pc, #84]	@ (8003ee4 <HAL_SPI_MspInit+0x150>)
 8003e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e96:	613b      	str	r3, [r7, #16]
 8003e98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	4b11      	ldr	r3, [pc, #68]	@ (8003ee4 <HAL_SPI_MspInit+0x150>)
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea2:	4a10      	ldr	r2, [pc, #64]	@ (8003ee4 <HAL_SPI_MspInit+0x150>)
 8003ea4:	f043 0304 	orr.w	r3, r3, #4
 8003ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8003ee4 <HAL_SPI_MspInit+0x150>)
 8003eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eae:	f003 0304 	and.w	r3, r3, #4
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003eb6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8003eba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003ec8:	2306      	movs	r3, #6
 8003eca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ecc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	4809      	ldr	r0, [pc, #36]	@ (8003ef8 <HAL_SPI_MspInit+0x164>)
 8003ed4:	f000 f9fa 	bl	80042cc <HAL_GPIO_Init>
}
 8003ed8:	bf00      	nop
 8003eda:	3738      	adds	r7, #56	@ 0x38
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40013000 	.word	0x40013000
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	40020000 	.word	0x40020000
 8003eec:	40003800 	.word	0x40003800
 8003ef0:	40022000 	.word	0x40022000
 8003ef4:	40003c00 	.word	0x40003c00
 8003ef8:	40020800 	.word	0x40020800

08003efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003f00:	bf00      	nop
 8003f02:	e7fd      	b.n	8003f00 <NMI_Handler+0x4>

08003f04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f08:	bf00      	nop
 8003f0a:	e7fd      	b.n	8003f08 <HardFault_Handler+0x4>

08003f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f10:	bf00      	nop
 8003f12:	e7fd      	b.n	8003f10 <MemManage_Handler+0x4>

08003f14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f18:	bf00      	nop
 8003f1a:	e7fd      	b.n	8003f18 <BusFault_Handler+0x4>

08003f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f20:	bf00      	nop
 8003f22:	e7fd      	b.n	8003f20 <UsageFault_Handler+0x4>

08003f24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f28:	bf00      	nop
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f32:	b480      	push	{r7}
 8003f34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f36:	bf00      	nop
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f44:	bf00      	nop
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f52:	f000 f891 	bl	8004078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f56:	bf00      	nop
 8003f58:	bd80      	pop	{r7, pc}
	...

08003f5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f60:	4b06      	ldr	r3, [pc, #24]	@ (8003f7c <SystemInit+0x20>)
 8003f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f66:	4a05      	ldr	r2, [pc, #20]	@ (8003f7c <SystemInit+0x20>)
 8003f68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003f6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f70:	bf00      	nop
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	e000ed00 	.word	0xe000ed00

08003f80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003f80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003fb8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003f84:	f7ff ffea 	bl	8003f5c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f88:	480c      	ldr	r0, [pc, #48]	@ (8003fbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003f8a:	490d      	ldr	r1, [pc, #52]	@ (8003fc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003f8c:	4a0d      	ldr	r2, [pc, #52]	@ (8003fc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f90:	e002      	b.n	8003f98 <LoopCopyDataInit>

08003f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f96:	3304      	adds	r3, #4

08003f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f9c:	d3f9      	bcc.n	8003f92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003fc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003fa0:	4c0a      	ldr	r4, [pc, #40]	@ (8003fcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8003fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fa4:	e001      	b.n	8003faa <LoopFillZerobss>

08003fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fa8:	3204      	adds	r2, #4

08003faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fac:	d3fb      	bcc.n	8003fa6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003fae:	f002 fce1 	bl	8006974 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003fb2:	f7ff f96f 	bl	8003294 <main>
  bx  lr    
 8003fb6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003fb8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003fbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fc0:	2000042c 	.word	0x2000042c
  ldr r2, =_sidata
 8003fc4:	08007754 	.word	0x08007754
  ldr r2, =_sbss
 8003fc8:	2000042c 	.word	0x2000042c
  ldr r4, =_ebss
 8003fcc:	20000a98 	.word	0x20000a98

08003fd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003fd0:	e7fe      	b.n	8003fd0 <ADC_IRQHandler>
	...

08003fd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8004014 <HAL_Init+0x40>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a0d      	ldr	r2, [pc, #52]	@ (8004014 <HAL_Init+0x40>)
 8003fde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003fe2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8004014 <HAL_Init+0x40>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a0a      	ldr	r2, [pc, #40]	@ (8004014 <HAL_Init+0x40>)
 8003fea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003fee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ff0:	4b08      	ldr	r3, [pc, #32]	@ (8004014 <HAL_Init+0x40>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a07      	ldr	r2, [pc, #28]	@ (8004014 <HAL_Init+0x40>)
 8003ff6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ffa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ffc:	2003      	movs	r0, #3
 8003ffe:	f000 f931 	bl	8004264 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004002:	200f      	movs	r0, #15
 8004004:	f000 f808 	bl	8004018 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004008:	f7ff fe20 	bl	8003c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	40023c00 	.word	0x40023c00

08004018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004020:	4b12      	ldr	r3, [pc, #72]	@ (800406c <HAL_InitTick+0x54>)
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	4b12      	ldr	r3, [pc, #72]	@ (8004070 <HAL_InitTick+0x58>)
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	4619      	mov	r1, r3
 800402a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800402e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004032:	fbb2 f3f3 	udiv	r3, r2, r3
 8004036:	4618      	mov	r0, r3
 8004038:	f000 f93b 	bl	80042b2 <HAL_SYSTICK_Config>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e00e      	b.n	8004064 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b0f      	cmp	r3, #15
 800404a:	d80a      	bhi.n	8004062 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800404c:	2200      	movs	r2, #0
 800404e:	6879      	ldr	r1, [r7, #4]
 8004050:	f04f 30ff 	mov.w	r0, #4294967295
 8004054:	f000 f911 	bl	800427a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004058:	4a06      	ldr	r2, [pc, #24]	@ (8004074 <HAL_InitTick+0x5c>)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800405e:	2300      	movs	r3, #0
 8004060:	e000      	b.n	8004064 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
}
 8004064:	4618      	mov	r0, r3
 8004066:	3708      	adds	r7, #8
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	20000420 	.word	0x20000420
 8004070:	20000428 	.word	0x20000428
 8004074:	20000424 	.word	0x20000424

08004078 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004078:	b480      	push	{r7}
 800407a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800407c:	4b06      	ldr	r3, [pc, #24]	@ (8004098 <HAL_IncTick+0x20>)
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	461a      	mov	r2, r3
 8004082:	4b06      	ldr	r3, [pc, #24]	@ (800409c <HAL_IncTick+0x24>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4413      	add	r3, r2
 8004088:	4a04      	ldr	r2, [pc, #16]	@ (800409c <HAL_IncTick+0x24>)
 800408a:	6013      	str	r3, [r2, #0]
}
 800408c:	bf00      	nop
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	20000428 	.word	0x20000428
 800409c:	20000a94 	.word	0x20000a94

080040a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  return uwTick;
 80040a4:	4b03      	ldr	r3, [pc, #12]	@ (80040b4 <HAL_GetTick+0x14>)
 80040a6:	681b      	ldr	r3, [r3, #0]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	20000a94 	.word	0x20000a94

080040b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040c0:	f7ff ffee 	bl	80040a0 <HAL_GetTick>
 80040c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d0:	d005      	beq.n	80040de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80040d2:	4b0a      	ldr	r3, [pc, #40]	@ (80040fc <HAL_Delay+0x44>)
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4413      	add	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80040de:	bf00      	nop
 80040e0:	f7ff ffde 	bl	80040a0 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d8f7      	bhi.n	80040e0 <HAL_Delay+0x28>
  {
  }
}
 80040f0:	bf00      	nop
 80040f2:	bf00      	nop
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	20000428 	.word	0x20000428

08004100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004110:	4b0c      	ldr	r3, [pc, #48]	@ (8004144 <__NVIC_SetPriorityGrouping+0x44>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800411c:	4013      	ands	r3, r2
 800411e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004128:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800412c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004132:	4a04      	ldr	r2, [pc, #16]	@ (8004144 <__NVIC_SetPriorityGrouping+0x44>)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	60d3      	str	r3, [r2, #12]
}
 8004138:	bf00      	nop
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	e000ed00 	.word	0xe000ed00

08004148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800414c:	4b04      	ldr	r3, [pc, #16]	@ (8004160 <__NVIC_GetPriorityGrouping+0x18>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	0a1b      	lsrs	r3, r3, #8
 8004152:	f003 0307 	and.w	r3, r3, #7
}
 8004156:	4618      	mov	r0, r3
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	e000ed00 	.word	0xe000ed00

08004164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	4603      	mov	r3, r0
 800416c:	6039      	str	r1, [r7, #0]
 800416e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004174:	2b00      	cmp	r3, #0
 8004176:	db0a      	blt.n	800418e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	b2da      	uxtb	r2, r3
 800417c:	490c      	ldr	r1, [pc, #48]	@ (80041b0 <__NVIC_SetPriority+0x4c>)
 800417e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004182:	0112      	lsls	r2, r2, #4
 8004184:	b2d2      	uxtb	r2, r2
 8004186:	440b      	add	r3, r1
 8004188:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800418c:	e00a      	b.n	80041a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	b2da      	uxtb	r2, r3
 8004192:	4908      	ldr	r1, [pc, #32]	@ (80041b4 <__NVIC_SetPriority+0x50>)
 8004194:	79fb      	ldrb	r3, [r7, #7]
 8004196:	f003 030f 	and.w	r3, r3, #15
 800419a:	3b04      	subs	r3, #4
 800419c:	0112      	lsls	r2, r2, #4
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	440b      	add	r3, r1
 80041a2:	761a      	strb	r2, [r3, #24]
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	e000e100 	.word	0xe000e100
 80041b4:	e000ed00 	.word	0xe000ed00

080041b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b089      	sub	sp, #36	@ 0x24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f003 0307 	and.w	r3, r3, #7
 80041ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	f1c3 0307 	rsb	r3, r3, #7
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	bf28      	it	cs
 80041d6:	2304      	movcs	r3, #4
 80041d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	3304      	adds	r3, #4
 80041de:	2b06      	cmp	r3, #6
 80041e0:	d902      	bls.n	80041e8 <NVIC_EncodePriority+0x30>
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	3b03      	subs	r3, #3
 80041e6:	e000      	b.n	80041ea <NVIC_EncodePriority+0x32>
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041ec:	f04f 32ff 	mov.w	r2, #4294967295
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	43da      	mvns	r2, r3
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	401a      	ands	r2, r3
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004200:	f04f 31ff 	mov.w	r1, #4294967295
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	fa01 f303 	lsl.w	r3, r1, r3
 800420a:	43d9      	mvns	r1, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004210:	4313      	orrs	r3, r2
         );
}
 8004212:	4618      	mov	r0, r3
 8004214:	3724      	adds	r7, #36	@ 0x24
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
	...

08004220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3b01      	subs	r3, #1
 800422c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004230:	d301      	bcc.n	8004236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004232:	2301      	movs	r3, #1
 8004234:	e00f      	b.n	8004256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004236:	4a0a      	ldr	r2, [pc, #40]	@ (8004260 <SysTick_Config+0x40>)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3b01      	subs	r3, #1
 800423c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800423e:	210f      	movs	r1, #15
 8004240:	f04f 30ff 	mov.w	r0, #4294967295
 8004244:	f7ff ff8e 	bl	8004164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004248:	4b05      	ldr	r3, [pc, #20]	@ (8004260 <SysTick_Config+0x40>)
 800424a:	2200      	movs	r2, #0
 800424c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800424e:	4b04      	ldr	r3, [pc, #16]	@ (8004260 <SysTick_Config+0x40>)
 8004250:	2207      	movs	r2, #7
 8004252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	e000e010 	.word	0xe000e010

08004264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f7ff ff47 	bl	8004100 <__NVIC_SetPriorityGrouping>
}
 8004272:	bf00      	nop
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800427a:	b580      	push	{r7, lr}
 800427c:	b086      	sub	sp, #24
 800427e:	af00      	add	r7, sp, #0
 8004280:	4603      	mov	r3, r0
 8004282:	60b9      	str	r1, [r7, #8]
 8004284:	607a      	str	r2, [r7, #4]
 8004286:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004288:	2300      	movs	r3, #0
 800428a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800428c:	f7ff ff5c 	bl	8004148 <__NVIC_GetPriorityGrouping>
 8004290:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	68b9      	ldr	r1, [r7, #8]
 8004296:	6978      	ldr	r0, [r7, #20]
 8004298:	f7ff ff8e 	bl	80041b8 <NVIC_EncodePriority>
 800429c:	4602      	mov	r2, r0
 800429e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042a2:	4611      	mov	r1, r2
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff ff5d 	bl	8004164 <__NVIC_SetPriority>
}
 80042aa:	bf00      	nop
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b082      	sub	sp, #8
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7ff ffb0 	bl	8004220 <SysTick_Config>
 80042c0:	4603      	mov	r3, r0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
	...

080042cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b089      	sub	sp, #36	@ 0x24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042d6:	2300      	movs	r3, #0
 80042d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042da:	2300      	movs	r3, #0
 80042dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042de:	2300      	movs	r3, #0
 80042e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042e2:	2300      	movs	r3, #0
 80042e4:	61fb      	str	r3, [r7, #28]
 80042e6:	e177      	b.n	80045d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042e8:	2201      	movs	r2, #1
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	4013      	ands	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	429a      	cmp	r2, r3
 8004302:	f040 8166 	bne.w	80045d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f003 0303 	and.w	r3, r3, #3
 800430e:	2b01      	cmp	r3, #1
 8004310:	d005      	beq.n	800431e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800431a:	2b02      	cmp	r3, #2
 800431c:	d130      	bne.n	8004380 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	2203      	movs	r2, #3
 800432a:	fa02 f303 	lsl.w	r3, r2, r3
 800432e:	43db      	mvns	r3, r3
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	4013      	ands	r3, r2
 8004334:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	68da      	ldr	r2, [r3, #12]
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	fa02 f303 	lsl.w	r3, r2, r3
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	4313      	orrs	r3, r2
 8004346:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004354:	2201      	movs	r2, #1
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	43db      	mvns	r3, r3
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	4013      	ands	r3, r2
 8004362:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	091b      	lsrs	r3, r3, #4
 800436a:	f003 0201 	and.w	r2, r3, #1
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	4313      	orrs	r3, r2
 8004378:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f003 0303 	and.w	r3, r3, #3
 8004388:	2b03      	cmp	r3, #3
 800438a:	d017      	beq.n	80043bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	2203      	movs	r2, #3
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	43db      	mvns	r3, r3
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	4013      	ands	r3, r2
 80043a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f003 0303 	and.w	r3, r3, #3
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d123      	bne.n	8004410 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	08da      	lsrs	r2, r3, #3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3208      	adds	r2, #8
 80043d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	220f      	movs	r2, #15
 80043e0:	fa02 f303 	lsl.w	r3, r2, r3
 80043e4:	43db      	mvns	r3, r3
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	4013      	ands	r3, r2
 80043ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	691a      	ldr	r2, [r3, #16]
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	f003 0307 	and.w	r3, r3, #7
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	fa02 f303 	lsl.w	r3, r2, r3
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	4313      	orrs	r3, r2
 8004400:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	08da      	lsrs	r2, r3, #3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	3208      	adds	r2, #8
 800440a:	69b9      	ldr	r1, [r7, #24]
 800440c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	2203      	movs	r2, #3
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	43db      	mvns	r3, r3
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	4013      	ands	r3, r2
 8004426:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f003 0203 	and.w	r2, r3, #3
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	4313      	orrs	r3, r2
 800443c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 80c0 	beq.w	80045d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004452:	2300      	movs	r3, #0
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	4b66      	ldr	r3, [pc, #408]	@ (80045f0 <HAL_GPIO_Init+0x324>)
 8004458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445a:	4a65      	ldr	r2, [pc, #404]	@ (80045f0 <HAL_GPIO_Init+0x324>)
 800445c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004460:	6453      	str	r3, [r2, #68]	@ 0x44
 8004462:	4b63      	ldr	r3, [pc, #396]	@ (80045f0 <HAL_GPIO_Init+0x324>)
 8004464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004466:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800446e:	4a61      	ldr	r2, [pc, #388]	@ (80045f4 <HAL_GPIO_Init+0x328>)
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	089b      	lsrs	r3, r3, #2
 8004474:	3302      	adds	r3, #2
 8004476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800447a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	f003 0303 	and.w	r3, r3, #3
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	220f      	movs	r2, #15
 8004486:	fa02 f303 	lsl.w	r3, r2, r3
 800448a:	43db      	mvns	r3, r3
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	4013      	ands	r3, r2
 8004490:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a58      	ldr	r2, [pc, #352]	@ (80045f8 <HAL_GPIO_Init+0x32c>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d037      	beq.n	800450a <HAL_GPIO_Init+0x23e>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a57      	ldr	r2, [pc, #348]	@ (80045fc <HAL_GPIO_Init+0x330>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d031      	beq.n	8004506 <HAL_GPIO_Init+0x23a>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a56      	ldr	r2, [pc, #344]	@ (8004600 <HAL_GPIO_Init+0x334>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d02b      	beq.n	8004502 <HAL_GPIO_Init+0x236>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a55      	ldr	r2, [pc, #340]	@ (8004604 <HAL_GPIO_Init+0x338>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d025      	beq.n	80044fe <HAL_GPIO_Init+0x232>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a54      	ldr	r2, [pc, #336]	@ (8004608 <HAL_GPIO_Init+0x33c>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d01f      	beq.n	80044fa <HAL_GPIO_Init+0x22e>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a53      	ldr	r2, [pc, #332]	@ (800460c <HAL_GPIO_Init+0x340>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d019      	beq.n	80044f6 <HAL_GPIO_Init+0x22a>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a52      	ldr	r2, [pc, #328]	@ (8004610 <HAL_GPIO_Init+0x344>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d013      	beq.n	80044f2 <HAL_GPIO_Init+0x226>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a51      	ldr	r2, [pc, #324]	@ (8004614 <HAL_GPIO_Init+0x348>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d00d      	beq.n	80044ee <HAL_GPIO_Init+0x222>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a50      	ldr	r2, [pc, #320]	@ (8004618 <HAL_GPIO_Init+0x34c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d007      	beq.n	80044ea <HAL_GPIO_Init+0x21e>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a4f      	ldr	r2, [pc, #316]	@ (800461c <HAL_GPIO_Init+0x350>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d101      	bne.n	80044e6 <HAL_GPIO_Init+0x21a>
 80044e2:	2309      	movs	r3, #9
 80044e4:	e012      	b.n	800450c <HAL_GPIO_Init+0x240>
 80044e6:	230a      	movs	r3, #10
 80044e8:	e010      	b.n	800450c <HAL_GPIO_Init+0x240>
 80044ea:	2308      	movs	r3, #8
 80044ec:	e00e      	b.n	800450c <HAL_GPIO_Init+0x240>
 80044ee:	2307      	movs	r3, #7
 80044f0:	e00c      	b.n	800450c <HAL_GPIO_Init+0x240>
 80044f2:	2306      	movs	r3, #6
 80044f4:	e00a      	b.n	800450c <HAL_GPIO_Init+0x240>
 80044f6:	2305      	movs	r3, #5
 80044f8:	e008      	b.n	800450c <HAL_GPIO_Init+0x240>
 80044fa:	2304      	movs	r3, #4
 80044fc:	e006      	b.n	800450c <HAL_GPIO_Init+0x240>
 80044fe:	2303      	movs	r3, #3
 8004500:	e004      	b.n	800450c <HAL_GPIO_Init+0x240>
 8004502:	2302      	movs	r3, #2
 8004504:	e002      	b.n	800450c <HAL_GPIO_Init+0x240>
 8004506:	2301      	movs	r3, #1
 8004508:	e000      	b.n	800450c <HAL_GPIO_Init+0x240>
 800450a:	2300      	movs	r3, #0
 800450c:	69fa      	ldr	r2, [r7, #28]
 800450e:	f002 0203 	and.w	r2, r2, #3
 8004512:	0092      	lsls	r2, r2, #2
 8004514:	4093      	lsls	r3, r2
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	4313      	orrs	r3, r2
 800451a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800451c:	4935      	ldr	r1, [pc, #212]	@ (80045f4 <HAL_GPIO_Init+0x328>)
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	089b      	lsrs	r3, r3, #2
 8004522:	3302      	adds	r3, #2
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800452a:	4b3d      	ldr	r3, [pc, #244]	@ (8004620 <HAL_GPIO_Init+0x354>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	43db      	mvns	r3, r3
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	4013      	ands	r3, r2
 8004538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	4313      	orrs	r3, r2
 800454c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800454e:	4a34      	ldr	r2, [pc, #208]	@ (8004620 <HAL_GPIO_Init+0x354>)
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004554:	4b32      	ldr	r3, [pc, #200]	@ (8004620 <HAL_GPIO_Init+0x354>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	43db      	mvns	r3, r3
 800455e:	69ba      	ldr	r2, [r7, #24]
 8004560:	4013      	ands	r3, r2
 8004562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d003      	beq.n	8004578 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	4313      	orrs	r3, r2
 8004576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004578:	4a29      	ldr	r2, [pc, #164]	@ (8004620 <HAL_GPIO_Init+0x354>)
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800457e:	4b28      	ldr	r3, [pc, #160]	@ (8004620 <HAL_GPIO_Init+0x354>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	43db      	mvns	r3, r3
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	4013      	ands	r3, r2
 800458c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	4313      	orrs	r3, r2
 80045a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045a2:	4a1f      	ldr	r2, [pc, #124]	@ (8004620 <HAL_GPIO_Init+0x354>)
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004620 <HAL_GPIO_Init+0x354>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	43db      	mvns	r3, r3
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	4013      	ands	r3, r2
 80045b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d003      	beq.n	80045cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045cc:	4a14      	ldr	r2, [pc, #80]	@ (8004620 <HAL_GPIO_Init+0x354>)
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	3301      	adds	r3, #1
 80045d6:	61fb      	str	r3, [r7, #28]
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	2b0f      	cmp	r3, #15
 80045dc:	f67f ae84 	bls.w	80042e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045e0:	bf00      	nop
 80045e2:	bf00      	nop
 80045e4:	3724      	adds	r7, #36	@ 0x24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	40023800 	.word	0x40023800
 80045f4:	40013800 	.word	0x40013800
 80045f8:	40020000 	.word	0x40020000
 80045fc:	40020400 	.word	0x40020400
 8004600:	40020800 	.word	0x40020800
 8004604:	40020c00 	.word	0x40020c00
 8004608:	40021000 	.word	0x40021000
 800460c:	40021400 	.word	0x40021400
 8004610:	40021800 	.word	0x40021800
 8004614:	40021c00 	.word	0x40021c00
 8004618:	40022000 	.word	0x40022000
 800461c:	40022400 	.word	0x40022400
 8004620:	40013c00 	.word	0x40013c00

08004624 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	460b      	mov	r3, r1
 800462e:	807b      	strh	r3, [r7, #2]
 8004630:	4613      	mov	r3, r2
 8004632:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004634:	787b      	ldrb	r3, [r7, #1]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d003      	beq.n	8004642 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800463a:	887a      	ldrh	r2, [r7, #2]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004640:	e003      	b.n	800464a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004642:	887b      	ldrh	r3, [r7, #2]
 8004644:	041a      	lsls	r2, r3, #16
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	619a      	str	r2, [r3, #24]
}
 800464a:	bf00      	nop
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
	...

08004658 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e12b      	b.n	80048c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d106      	bne.n	8004684 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7ff fb0c 	bl	8003c9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2224      	movs	r2, #36	@ 0x24
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 0201 	bic.w	r2, r2, #1
 800469a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80046ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046bc:	f001 fcec 	bl	8006098 <HAL_RCC_GetPCLK1Freq>
 80046c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	4a81      	ldr	r2, [pc, #516]	@ (80048cc <HAL_I2C_Init+0x274>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d807      	bhi.n	80046dc <HAL_I2C_Init+0x84>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4a80      	ldr	r2, [pc, #512]	@ (80048d0 <HAL_I2C_Init+0x278>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	bf94      	ite	ls
 80046d4:	2301      	movls	r3, #1
 80046d6:	2300      	movhi	r3, #0
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	e006      	b.n	80046ea <HAL_I2C_Init+0x92>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4a7d      	ldr	r2, [pc, #500]	@ (80048d4 <HAL_I2C_Init+0x27c>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	bf94      	ite	ls
 80046e4:	2301      	movls	r3, #1
 80046e6:	2300      	movhi	r3, #0
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e0e7      	b.n	80048c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	4a78      	ldr	r2, [pc, #480]	@ (80048d8 <HAL_I2C_Init+0x280>)
 80046f6:	fba2 2303 	umull	r2, r3, r2, r3
 80046fa:	0c9b      	lsrs	r3, r3, #18
 80046fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	430a      	orrs	r2, r1
 8004710:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	4a6a      	ldr	r2, [pc, #424]	@ (80048cc <HAL_I2C_Init+0x274>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d802      	bhi.n	800472c <HAL_I2C_Init+0xd4>
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	3301      	adds	r3, #1
 800472a:	e009      	b.n	8004740 <HAL_I2C_Init+0xe8>
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004732:	fb02 f303 	mul.w	r3, r2, r3
 8004736:	4a69      	ldr	r2, [pc, #420]	@ (80048dc <HAL_I2C_Init+0x284>)
 8004738:	fba2 2303 	umull	r2, r3, r2, r3
 800473c:	099b      	lsrs	r3, r3, #6
 800473e:	3301      	adds	r3, #1
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6812      	ldr	r2, [r2, #0]
 8004744:	430b      	orrs	r3, r1
 8004746:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	69db      	ldr	r3, [r3, #28]
 800474e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004752:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	495c      	ldr	r1, [pc, #368]	@ (80048cc <HAL_I2C_Init+0x274>)
 800475c:	428b      	cmp	r3, r1
 800475e:	d819      	bhi.n	8004794 <HAL_I2C_Init+0x13c>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	1e59      	subs	r1, r3, #1
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	fbb1 f3f3 	udiv	r3, r1, r3
 800476e:	1c59      	adds	r1, r3, #1
 8004770:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004774:	400b      	ands	r3, r1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <HAL_I2C_Init+0x138>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	1e59      	subs	r1, r3, #1
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	005b      	lsls	r3, r3, #1
 8004784:	fbb1 f3f3 	udiv	r3, r1, r3
 8004788:	3301      	adds	r3, #1
 800478a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800478e:	e051      	b.n	8004834 <HAL_I2C_Init+0x1dc>
 8004790:	2304      	movs	r3, #4
 8004792:	e04f      	b.n	8004834 <HAL_I2C_Init+0x1dc>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d111      	bne.n	80047c0 <HAL_I2C_Init+0x168>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	1e58      	subs	r0, r3, #1
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6859      	ldr	r1, [r3, #4]
 80047a4:	460b      	mov	r3, r1
 80047a6:	005b      	lsls	r3, r3, #1
 80047a8:	440b      	add	r3, r1
 80047aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80047ae:	3301      	adds	r3, #1
 80047b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	bf0c      	ite	eq
 80047b8:	2301      	moveq	r3, #1
 80047ba:	2300      	movne	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	e012      	b.n	80047e6 <HAL_I2C_Init+0x18e>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	1e58      	subs	r0, r3, #1
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6859      	ldr	r1, [r3, #4]
 80047c8:	460b      	mov	r3, r1
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	440b      	add	r3, r1
 80047ce:	0099      	lsls	r1, r3, #2
 80047d0:	440b      	add	r3, r1
 80047d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80047d6:	3301      	adds	r3, #1
 80047d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047dc:	2b00      	cmp	r3, #0
 80047de:	bf0c      	ite	eq
 80047e0:	2301      	moveq	r3, #1
 80047e2:	2300      	movne	r3, #0
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <HAL_I2C_Init+0x196>
 80047ea:	2301      	movs	r3, #1
 80047ec:	e022      	b.n	8004834 <HAL_I2C_Init+0x1dc>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10e      	bne.n	8004814 <HAL_I2C_Init+0x1bc>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	1e58      	subs	r0, r3, #1
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6859      	ldr	r1, [r3, #4]
 80047fe:	460b      	mov	r3, r1
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	440b      	add	r3, r1
 8004804:	fbb0 f3f3 	udiv	r3, r0, r3
 8004808:	3301      	adds	r3, #1
 800480a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800480e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004812:	e00f      	b.n	8004834 <HAL_I2C_Init+0x1dc>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	1e58      	subs	r0, r3, #1
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6859      	ldr	r1, [r3, #4]
 800481c:	460b      	mov	r3, r1
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	440b      	add	r3, r1
 8004822:	0099      	lsls	r1, r3, #2
 8004824:	440b      	add	r3, r1
 8004826:	fbb0 f3f3 	udiv	r3, r0, r3
 800482a:	3301      	adds	r3, #1
 800482c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004830:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004834:	6879      	ldr	r1, [r7, #4]
 8004836:	6809      	ldr	r1, [r1, #0]
 8004838:	4313      	orrs	r3, r2
 800483a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	69da      	ldr	r2, [r3, #28]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	431a      	orrs	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	430a      	orrs	r2, r1
 8004856:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004862:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6911      	ldr	r1, [r2, #16]
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	68d2      	ldr	r2, [r2, #12]
 800486e:	4311      	orrs	r1, r2
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6812      	ldr	r2, [r2, #0]
 8004874:	430b      	orrs	r3, r1
 8004876:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	695a      	ldr	r2, [r3, #20]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	431a      	orrs	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	430a      	orrs	r2, r1
 8004892:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 0201 	orr.w	r2, r2, #1
 80048a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2220      	movs	r2, #32
 80048ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	000186a0 	.word	0x000186a0
 80048d0:	001e847f 	.word	0x001e847f
 80048d4:	003d08ff 	.word	0x003d08ff
 80048d8:	431bde83 	.word	0x431bde83
 80048dc:	10624dd3 	.word	0x10624dd3

080048e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b088      	sub	sp, #32
 80048e4:	af02      	add	r7, sp, #8
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	4608      	mov	r0, r1
 80048ea:	4611      	mov	r1, r2
 80048ec:	461a      	mov	r2, r3
 80048ee:	4603      	mov	r3, r0
 80048f0:	817b      	strh	r3, [r7, #10]
 80048f2:	460b      	mov	r3, r1
 80048f4:	813b      	strh	r3, [r7, #8]
 80048f6:	4613      	mov	r3, r2
 80048f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048fa:	f7ff fbd1 	bl	80040a0 <HAL_GetTick>
 80048fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b20      	cmp	r3, #32
 800490a:	f040 80d9 	bne.w	8004ac0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	2319      	movs	r3, #25
 8004914:	2201      	movs	r2, #1
 8004916:	496d      	ldr	r1, [pc, #436]	@ (8004acc <HAL_I2C_Mem_Write+0x1ec>)
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f000 fc8b 	bl	8005234 <I2C_WaitOnFlagUntilTimeout>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d001      	beq.n	8004928 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004924:	2302      	movs	r3, #2
 8004926:	e0cc      	b.n	8004ac2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800492e:	2b01      	cmp	r3, #1
 8004930:	d101      	bne.n	8004936 <HAL_I2C_Mem_Write+0x56>
 8004932:	2302      	movs	r3, #2
 8004934:	e0c5      	b.n	8004ac2 <HAL_I2C_Mem_Write+0x1e2>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b01      	cmp	r3, #1
 800494a:	d007      	beq.n	800495c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0201 	orr.w	r2, r2, #1
 800495a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800496a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2221      	movs	r2, #33	@ 0x21
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2240      	movs	r2, #64	@ 0x40
 8004978:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6a3a      	ldr	r2, [r7, #32]
 8004986:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800498c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004992:	b29a      	uxth	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4a4d      	ldr	r2, [pc, #308]	@ (8004ad0 <HAL_I2C_Mem_Write+0x1f0>)
 800499c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800499e:	88f8      	ldrh	r0, [r7, #6]
 80049a0:	893a      	ldrh	r2, [r7, #8]
 80049a2:	8979      	ldrh	r1, [r7, #10]
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	9301      	str	r3, [sp, #4]
 80049a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	4603      	mov	r3, r0
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f000 fac2 	bl	8004f38 <I2C_RequestMemoryWrite>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d052      	beq.n	8004a60 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e081      	b.n	8004ac2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 fd50 	bl	8005468 <I2C_WaitOnTXEFlagUntilTimeout>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00d      	beq.n	80049ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d2:	2b04      	cmp	r3, #4
 80049d4:	d107      	bne.n	80049e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e06b      	b.n	8004ac2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ee:	781a      	ldrb	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fa:	1c5a      	adds	r2, r3, #1
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a04:	3b01      	subs	r3, #1
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	3b01      	subs	r3, #1
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	f003 0304 	and.w	r3, r3, #4
 8004a24:	2b04      	cmp	r3, #4
 8004a26:	d11b      	bne.n	8004a60 <HAL_I2C_Mem_Write+0x180>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d017      	beq.n	8004a60 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a34:	781a      	ldrb	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a40:	1c5a      	adds	r2, r3, #1
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1aa      	bne.n	80049be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f000 fd43 	bl	80054f8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00d      	beq.n	8004a94 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d107      	bne.n	8004a90 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a8e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e016      	b.n	8004ac2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004aa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004abc:	2300      	movs	r3, #0
 8004abe:	e000      	b.n	8004ac2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004ac0:	2302      	movs	r3, #2
  }
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3718      	adds	r7, #24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	00100002 	.word	0x00100002
 8004ad0:	ffff0000 	.word	0xffff0000

08004ad4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b08c      	sub	sp, #48	@ 0x30
 8004ad8:	af02      	add	r7, sp, #8
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	4608      	mov	r0, r1
 8004ade:	4611      	mov	r1, r2
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	817b      	strh	r3, [r7, #10]
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	813b      	strh	r3, [r7, #8]
 8004aea:	4613      	mov	r3, r2
 8004aec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004aee:	f7ff fad7 	bl	80040a0 <HAL_GetTick>
 8004af2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b20      	cmp	r3, #32
 8004afe:	f040 8214 	bne.w	8004f2a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	2319      	movs	r3, #25
 8004b08:	2201      	movs	r2, #1
 8004b0a:	497b      	ldr	r1, [pc, #492]	@ (8004cf8 <HAL_I2C_Mem_Read+0x224>)
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f000 fb91 	bl	8005234 <I2C_WaitOnFlagUntilTimeout>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004b18:	2302      	movs	r3, #2
 8004b1a:	e207      	b.n	8004f2c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d101      	bne.n	8004b2a <HAL_I2C_Mem_Read+0x56>
 8004b26:	2302      	movs	r3, #2
 8004b28:	e200      	b.n	8004f2c <HAL_I2C_Mem_Read+0x458>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d007      	beq.n	8004b50 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f042 0201 	orr.w	r2, r2, #1
 8004b4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2222      	movs	r2, #34	@ 0x22
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2240      	movs	r2, #64	@ 0x40
 8004b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b7a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004b80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4a5b      	ldr	r2, [pc, #364]	@ (8004cfc <HAL_I2C_Mem_Read+0x228>)
 8004b90:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b92:	88f8      	ldrh	r0, [r7, #6]
 8004b94:	893a      	ldrh	r2, [r7, #8]
 8004b96:	8979      	ldrh	r1, [r7, #10]
 8004b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9a:	9301      	str	r3, [sp, #4]
 8004b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f000 fa5e 	bl	8005064 <I2C_RequestMemoryRead>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e1bc      	b.n	8004f2c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d113      	bne.n	8004be2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bba:	2300      	movs	r3, #0
 8004bbc:	623b      	str	r3, [r7, #32]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	623b      	str	r3, [r7, #32]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	623b      	str	r3, [r7, #32]
 8004bce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	e190      	b.n	8004f04 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d11b      	bne.n	8004c22 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bf8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	61fb      	str	r3, [r7, #28]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	695b      	ldr	r3, [r3, #20]
 8004c04:	61fb      	str	r3, [r7, #28]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	61fb      	str	r3, [r7, #28]
 8004c0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c1e:	601a      	str	r2, [r3, #0]
 8004c20:	e170      	b.n	8004f04 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d11b      	bne.n	8004c62 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c38:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	61bb      	str	r3, [r7, #24]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	61bb      	str	r3, [r7, #24]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	61bb      	str	r3, [r7, #24]
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	e150      	b.n	8004f04 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c62:	2300      	movs	r3, #0
 8004c64:	617b      	str	r3, [r7, #20]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	617b      	str	r3, [r7, #20]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	617b      	str	r3, [r7, #20]
 8004c76:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004c78:	e144      	b.n	8004f04 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c7e:	2b03      	cmp	r3, #3
 8004c80:	f200 80f1 	bhi.w	8004e66 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d123      	bne.n	8004cd4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c8e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 fc79 	bl	8005588 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e145      	b.n	8004f2c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	691a      	ldr	r2, [r3, #16]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb2:	1c5a      	adds	r2, r3, #1
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004cd2:	e117      	b.n	8004f04 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d14e      	bne.n	8004d7a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	4906      	ldr	r1, [pc, #24]	@ (8004d00 <HAL_I2C_Mem_Read+0x22c>)
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f000 faa4 	bl	8005234 <I2C_WaitOnFlagUntilTimeout>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d008      	beq.n	8004d04 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e11a      	b.n	8004f2c <HAL_I2C_Mem_Read+0x458>
 8004cf6:	bf00      	nop
 8004cf8:	00100002 	.word	0x00100002
 8004cfc:	ffff0000 	.word	0xffff0000
 8004d00:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	691a      	ldr	r2, [r3, #16]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d1e:	b2d2      	uxtb	r2, r2
 8004d20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d26:	1c5a      	adds	r2, r3, #1
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d30:	3b01      	subs	r3, #1
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	691a      	ldr	r2, [r3, #16]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d50:	b2d2      	uxtb	r2, r2
 8004d52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d58:	1c5a      	adds	r2, r3, #1
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d62:	3b01      	subs	r3, #1
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	3b01      	subs	r3, #1
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d78:	e0c4      	b.n	8004f04 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d80:	2200      	movs	r2, #0
 8004d82:	496c      	ldr	r1, [pc, #432]	@ (8004f34 <HAL_I2C_Mem_Read+0x460>)
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f000 fa55 	bl	8005234 <I2C_WaitOnFlagUntilTimeout>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d001      	beq.n	8004d94 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e0cb      	b.n	8004f2c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004da2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	691a      	ldr	r2, [r3, #16]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dae:	b2d2      	uxtb	r2, r2
 8004db0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ddc:	2200      	movs	r2, #0
 8004dde:	4955      	ldr	r1, [pc, #340]	@ (8004f34 <HAL_I2C_Mem_Read+0x460>)
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	f000 fa27 	bl	8005234 <I2C_WaitOnFlagUntilTimeout>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d001      	beq.n	8004df0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e09d      	b.n	8004f2c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	691a      	ldr	r2, [r3, #16]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0a:	b2d2      	uxtb	r2, r2
 8004e0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e12:	1c5a      	adds	r2, r3, #1
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	691a      	ldr	r2, [r3, #16]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3c:	b2d2      	uxtb	r2, r2
 8004e3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e44:	1c5a      	adds	r2, r3, #1
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004e64:	e04e      	b.n	8004f04 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e68:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f000 fb8c 	bl	8005588 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d001      	beq.n	8004e7a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e058      	b.n	8004f2c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	691a      	ldr	r2, [r3, #16]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e84:	b2d2      	uxtb	r2, r2
 8004e86:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8c:	1c5a      	adds	r2, r3, #1
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e96:	3b01      	subs	r3, #1
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	f003 0304 	and.w	r3, r3, #4
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d124      	bne.n	8004f04 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ebe:	2b03      	cmp	r3, #3
 8004ec0:	d107      	bne.n	8004ed2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ed0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	691a      	ldr	r2, [r3, #16]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004edc:	b2d2      	uxtb	r2, r2
 8004ede:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee4:	1c5a      	adds	r2, r3, #1
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	3b01      	subs	r3, #1
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f47f aeb6 	bne.w	8004c7a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2220      	movs	r2, #32
 8004f12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004f26:	2300      	movs	r3, #0
 8004f28:	e000      	b.n	8004f2c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004f2a:	2302      	movs	r3, #2
  }
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3728      	adds	r7, #40	@ 0x28
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	00010004 	.word	0x00010004

08004f38 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b088      	sub	sp, #32
 8004f3c:	af02      	add	r7, sp, #8
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	4608      	mov	r0, r1
 8004f42:	4611      	mov	r1, r2
 8004f44:	461a      	mov	r2, r3
 8004f46:	4603      	mov	r3, r0
 8004f48:	817b      	strh	r3, [r7, #10]
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	813b      	strh	r3, [r7, #8]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 f960 	bl	8005234 <I2C_WaitOnFlagUntilTimeout>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00d      	beq.n	8004f96 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f88:	d103      	bne.n	8004f92 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f90:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e05f      	b.n	8005056 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f96:	897b      	ldrh	r3, [r7, #10]
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004fa4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa8:	6a3a      	ldr	r2, [r7, #32]
 8004faa:	492d      	ldr	r1, [pc, #180]	@ (8005060 <I2C_RequestMemoryWrite+0x128>)
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 f9bb 	bl	8005328 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d001      	beq.n	8004fbc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e04c      	b.n	8005056 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	617b      	str	r3, [r7, #20]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	617b      	str	r3, [r7, #20]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	617b      	str	r3, [r7, #20]
 8004fd0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fd4:	6a39      	ldr	r1, [r7, #32]
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f000 fa46 	bl	8005468 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00d      	beq.n	8004ffe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe6:	2b04      	cmp	r3, #4
 8004fe8:	d107      	bne.n	8004ffa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ff8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e02b      	b.n	8005056 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ffe:	88fb      	ldrh	r3, [r7, #6]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d105      	bne.n	8005010 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005004:	893b      	ldrh	r3, [r7, #8]
 8005006:	b2da      	uxtb	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	611a      	str	r2, [r3, #16]
 800500e:	e021      	b.n	8005054 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005010:	893b      	ldrh	r3, [r7, #8]
 8005012:	0a1b      	lsrs	r3, r3, #8
 8005014:	b29b      	uxth	r3, r3
 8005016:	b2da      	uxtb	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800501e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005020:	6a39      	ldr	r1, [r7, #32]
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 fa20 	bl	8005468 <I2C_WaitOnTXEFlagUntilTimeout>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00d      	beq.n	800504a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005032:	2b04      	cmp	r3, #4
 8005034:	d107      	bne.n	8005046 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005044:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e005      	b.n	8005056 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800504a:	893b      	ldrh	r3, [r7, #8]
 800504c:	b2da      	uxtb	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3718      	adds	r7, #24
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	00010002 	.word	0x00010002

08005064 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b088      	sub	sp, #32
 8005068:	af02      	add	r7, sp, #8
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	4608      	mov	r0, r1
 800506e:	4611      	mov	r1, r2
 8005070:	461a      	mov	r2, r3
 8005072:	4603      	mov	r3, r0
 8005074:	817b      	strh	r3, [r7, #10]
 8005076:	460b      	mov	r3, r1
 8005078:	813b      	strh	r3, [r7, #8]
 800507a:	4613      	mov	r3, r2
 800507c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800508c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800509c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800509e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f000 f8c2 	bl	8005234 <I2C_WaitOnFlagUntilTimeout>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00d      	beq.n	80050d2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050c4:	d103      	bne.n	80050ce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e0aa      	b.n	8005228 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050d2:	897b      	ldrh	r3, [r7, #10]
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	461a      	mov	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80050e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e4:	6a3a      	ldr	r2, [r7, #32]
 80050e6:	4952      	ldr	r1, [pc, #328]	@ (8005230 <I2C_RequestMemoryRead+0x1cc>)
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f000 f91d 	bl	8005328 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e097      	b.n	8005228 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050f8:	2300      	movs	r3, #0
 80050fa:	617b      	str	r3, [r7, #20]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	617b      	str	r3, [r7, #20]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	617b      	str	r3, [r7, #20]
 800510c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800510e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005110:	6a39      	ldr	r1, [r7, #32]
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f000 f9a8 	bl	8005468 <I2C_WaitOnTXEFlagUntilTimeout>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00d      	beq.n	800513a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005122:	2b04      	cmp	r3, #4
 8005124:	d107      	bne.n	8005136 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005134:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e076      	b.n	8005228 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800513a:	88fb      	ldrh	r3, [r7, #6]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d105      	bne.n	800514c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005140:	893b      	ldrh	r3, [r7, #8]
 8005142:	b2da      	uxtb	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	611a      	str	r2, [r3, #16]
 800514a:	e021      	b.n	8005190 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800514c:	893b      	ldrh	r3, [r7, #8]
 800514e:	0a1b      	lsrs	r3, r3, #8
 8005150:	b29b      	uxth	r3, r3
 8005152:	b2da      	uxtb	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800515a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800515c:	6a39      	ldr	r1, [r7, #32]
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f000 f982 	bl	8005468 <I2C_WaitOnTXEFlagUntilTimeout>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00d      	beq.n	8005186 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516e:	2b04      	cmp	r3, #4
 8005170:	d107      	bne.n	8005182 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005180:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e050      	b.n	8005228 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005186:	893b      	ldrh	r3, [r7, #8]
 8005188:	b2da      	uxtb	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005190:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005192:	6a39      	ldr	r1, [r7, #32]
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f000 f967 	bl	8005468 <I2C_WaitOnTXEFlagUntilTimeout>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00d      	beq.n	80051bc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a4:	2b04      	cmp	r3, #4
 80051a6:	d107      	bne.n	80051b8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051b6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e035      	b.n	8005228 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051ca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ce:	9300      	str	r3, [sp, #0]
 80051d0:	6a3b      	ldr	r3, [r7, #32]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f000 f82b 	bl	8005234 <I2C_WaitOnFlagUntilTimeout>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00d      	beq.n	8005200 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051f2:	d103      	bne.n	80051fc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e013      	b.n	8005228 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005200:	897b      	ldrh	r3, [r7, #10]
 8005202:	b2db      	uxtb	r3, r3
 8005204:	f043 0301 	orr.w	r3, r3, #1
 8005208:	b2da      	uxtb	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005212:	6a3a      	ldr	r2, [r7, #32]
 8005214:	4906      	ldr	r1, [pc, #24]	@ (8005230 <I2C_RequestMemoryRead+0x1cc>)
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f000 f886 	bl	8005328 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e000      	b.n	8005228 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3718      	adds	r7, #24
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	00010002 	.word	0x00010002

08005234 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	603b      	str	r3, [r7, #0]
 8005240:	4613      	mov	r3, r2
 8005242:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005244:	e048      	b.n	80052d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524c:	d044      	beq.n	80052d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800524e:	f7fe ff27 	bl	80040a0 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	429a      	cmp	r2, r3
 800525c:	d302      	bcc.n	8005264 <I2C_WaitOnFlagUntilTimeout+0x30>
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d139      	bne.n	80052d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	0c1b      	lsrs	r3, r3, #16
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b01      	cmp	r3, #1
 800526c:	d10d      	bne.n	800528a <I2C_WaitOnFlagUntilTimeout+0x56>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	43da      	mvns	r2, r3
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	4013      	ands	r3, r2
 800527a:	b29b      	uxth	r3, r3
 800527c:	2b00      	cmp	r3, #0
 800527e:	bf0c      	ite	eq
 8005280:	2301      	moveq	r3, #1
 8005282:	2300      	movne	r3, #0
 8005284:	b2db      	uxtb	r3, r3
 8005286:	461a      	mov	r2, r3
 8005288:	e00c      	b.n	80052a4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	43da      	mvns	r2, r3
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	4013      	ands	r3, r2
 8005296:	b29b      	uxth	r3, r3
 8005298:	2b00      	cmp	r3, #0
 800529a:	bf0c      	ite	eq
 800529c:	2301      	moveq	r3, #1
 800529e:	2300      	movne	r3, #0
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	461a      	mov	r2, r3
 80052a4:	79fb      	ldrb	r3, [r7, #7]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d116      	bne.n	80052d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2220      	movs	r2, #32
 80052b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c4:	f043 0220 	orr.w	r2, r3, #32
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e023      	b.n	8005320 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	0c1b      	lsrs	r3, r3, #16
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d10d      	bne.n	80052fe <I2C_WaitOnFlagUntilTimeout+0xca>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	695b      	ldr	r3, [r3, #20]
 80052e8:	43da      	mvns	r2, r3
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	4013      	ands	r3, r2
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	bf0c      	ite	eq
 80052f4:	2301      	moveq	r3, #1
 80052f6:	2300      	movne	r3, #0
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	461a      	mov	r2, r3
 80052fc:	e00c      	b.n	8005318 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	43da      	mvns	r2, r3
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	4013      	ands	r3, r2
 800530a:	b29b      	uxth	r3, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	bf0c      	ite	eq
 8005310:	2301      	moveq	r3, #1
 8005312:	2300      	movne	r3, #0
 8005314:	b2db      	uxtb	r3, r3
 8005316:	461a      	mov	r2, r3
 8005318:	79fb      	ldrb	r3, [r7, #7]
 800531a:	429a      	cmp	r2, r3
 800531c:	d093      	beq.n	8005246 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
 8005334:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005336:	e071      	b.n	800541c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005342:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005346:	d123      	bne.n	8005390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005356:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005360:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2220      	movs	r2, #32
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800537c:	f043 0204 	orr.w	r2, r3, #4
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e067      	b.n	8005460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005396:	d041      	beq.n	800541c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005398:	f7fe fe82 	bl	80040a0 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d302      	bcc.n	80053ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d136      	bne.n	800541c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	0c1b      	lsrs	r3, r3, #16
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d10c      	bne.n	80053d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	43da      	mvns	r2, r3
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	4013      	ands	r3, r2
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	bf14      	ite	ne
 80053ca:	2301      	movne	r3, #1
 80053cc:	2300      	moveq	r3, #0
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	e00b      	b.n	80053ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	43da      	mvns	r2, r3
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	4013      	ands	r3, r2
 80053de:	b29b      	uxth	r3, r3
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	bf14      	ite	ne
 80053e4:	2301      	movne	r3, #1
 80053e6:	2300      	moveq	r3, #0
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d016      	beq.n	800541c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2220      	movs	r2, #32
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005408:	f043 0220 	orr.w	r2, r3, #32
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e021      	b.n	8005460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	0c1b      	lsrs	r3, r3, #16
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b01      	cmp	r3, #1
 8005424:	d10c      	bne.n	8005440 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	43da      	mvns	r2, r3
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	4013      	ands	r3, r2
 8005432:	b29b      	uxth	r3, r3
 8005434:	2b00      	cmp	r3, #0
 8005436:	bf14      	ite	ne
 8005438:	2301      	movne	r3, #1
 800543a:	2300      	moveq	r3, #0
 800543c:	b2db      	uxtb	r3, r3
 800543e:	e00b      	b.n	8005458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	43da      	mvns	r2, r3
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	4013      	ands	r3, r2
 800544c:	b29b      	uxth	r3, r3
 800544e:	2b00      	cmp	r3, #0
 8005450:	bf14      	ite	ne
 8005452:	2301      	movne	r3, #1
 8005454:	2300      	moveq	r3, #0
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b00      	cmp	r3, #0
 800545a:	f47f af6d 	bne.w	8005338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005474:	e034      	b.n	80054e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f000 f8e3 	bl	8005642 <I2C_IsAcknowledgeFailed>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e034      	b.n	80054f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800548c:	d028      	beq.n	80054e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800548e:	f7fe fe07 	bl	80040a0 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	429a      	cmp	r2, r3
 800549c:	d302      	bcc.n	80054a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d11d      	bne.n	80054e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054ae:	2b80      	cmp	r3, #128	@ 0x80
 80054b0:	d016      	beq.n	80054e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2220      	movs	r2, #32
 80054bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054cc:	f043 0220 	orr.w	r2, r3, #32
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e007      	b.n	80054f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054ea:	2b80      	cmp	r3, #128	@ 0x80
 80054ec:	d1c3      	bne.n	8005476 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005504:	e034      	b.n	8005570 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f000 f89b 	bl	8005642 <I2C_IsAcknowledgeFailed>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e034      	b.n	8005580 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551c:	d028      	beq.n	8005570 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800551e:	f7fe fdbf 	bl	80040a0 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	429a      	cmp	r2, r3
 800552c:	d302      	bcc.n	8005534 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d11d      	bne.n	8005570 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	f003 0304 	and.w	r3, r3, #4
 800553e:	2b04      	cmp	r3, #4
 8005540:	d016      	beq.n	8005570 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2220      	movs	r2, #32
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555c:	f043 0220 	orr.w	r2, r3, #32
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e007      	b.n	8005580 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	f003 0304 	and.w	r3, r3, #4
 800557a:	2b04      	cmp	r3, #4
 800557c:	d1c3      	bne.n	8005506 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3710      	adds	r7, #16
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005594:	e049      	b.n	800562a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	f003 0310 	and.w	r3, r3, #16
 80055a0:	2b10      	cmp	r3, #16
 80055a2:	d119      	bne.n	80055d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f06f 0210 	mvn.w	r2, #16
 80055ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2220      	movs	r2, #32
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e030      	b.n	800563a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055d8:	f7fe fd62 	bl	80040a0 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d302      	bcc.n	80055ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d11d      	bne.n	800562a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	695b      	ldr	r3, [r3, #20]
 80055f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055f8:	2b40      	cmp	r3, #64	@ 0x40
 80055fa:	d016      	beq.n	800562a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2220      	movs	r2, #32
 8005606:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005616:	f043 0220 	orr.w	r2, r3, #32
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e007      	b.n	800563a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005634:	2b40      	cmp	r3, #64	@ 0x40
 8005636:	d1ae      	bne.n	8005596 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	695b      	ldr	r3, [r3, #20]
 8005650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005654:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005658:	d11b      	bne.n	8005692 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005662:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2220      	movs	r2, #32
 800566e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800567e:	f043 0204 	orr.w	r2, r3, #4
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e000      	b.n	8005694 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b20      	cmp	r3, #32
 80056b4:	d129      	bne.n	800570a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2224      	movs	r2, #36	@ 0x24
 80056ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 0201 	bic.w	r2, r2, #1
 80056cc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f022 0210 	bic.w	r2, r2, #16
 80056dc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	683a      	ldr	r2, [r7, #0]
 80056ea:	430a      	orrs	r2, r1
 80056ec:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f042 0201 	orr.w	r2, r2, #1
 80056fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2220      	movs	r2, #32
 8005702:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005706:	2300      	movs	r3, #0
 8005708:	e000      	b.n	800570c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800570a:	2302      	movs	r3, #2
  }
}
 800570c:	4618      	mov	r0, r3
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005722:	2300      	movs	r3, #0
 8005724:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b20      	cmp	r3, #32
 8005730:	d12a      	bne.n	8005788 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2224      	movs	r2, #36	@ 0x24
 8005736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f022 0201 	bic.w	r2, r2, #1
 8005748:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005750:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005752:	89fb      	ldrh	r3, [r7, #14]
 8005754:	f023 030f 	bic.w	r3, r3, #15
 8005758:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	b29a      	uxth	r2, r3
 800575e:	89fb      	ldrh	r3, [r7, #14]
 8005760:	4313      	orrs	r3, r2
 8005762:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	89fa      	ldrh	r2, [r7, #14]
 800576a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f042 0201 	orr.w	r2, r2, #1
 800577a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2220      	movs	r2, #32
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005784:	2300      	movs	r3, #0
 8005786:	e000      	b.n	800578a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005788:	2302      	movs	r3, #2
  }
}
 800578a:	4618      	mov	r0, r3
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
	...

08005798 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800579e:	2300      	movs	r3, #0
 80057a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80057a2:	2300      	movs	r3, #0
 80057a4:	603b      	str	r3, [r7, #0]
 80057a6:	4b20      	ldr	r3, [pc, #128]	@ (8005828 <HAL_PWREx_EnableOverDrive+0x90>)
 80057a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057aa:	4a1f      	ldr	r2, [pc, #124]	@ (8005828 <HAL_PWREx_EnableOverDrive+0x90>)
 80057ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80057b2:	4b1d      	ldr	r3, [pc, #116]	@ (8005828 <HAL_PWREx_EnableOverDrive+0x90>)
 80057b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057ba:	603b      	str	r3, [r7, #0]
 80057bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80057be:	4b1b      	ldr	r3, [pc, #108]	@ (800582c <HAL_PWREx_EnableOverDrive+0x94>)
 80057c0:	2201      	movs	r2, #1
 80057c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80057c4:	f7fe fc6c 	bl	80040a0 <HAL_GetTick>
 80057c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80057ca:	e009      	b.n	80057e0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80057cc:	f7fe fc68 	bl	80040a0 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80057da:	d901      	bls.n	80057e0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e01f      	b.n	8005820 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80057e0:	4b13      	ldr	r3, [pc, #76]	@ (8005830 <HAL_PWREx_EnableOverDrive+0x98>)
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057ec:	d1ee      	bne.n	80057cc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80057ee:	4b11      	ldr	r3, [pc, #68]	@ (8005834 <HAL_PWREx_EnableOverDrive+0x9c>)
 80057f0:	2201      	movs	r2, #1
 80057f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80057f4:	f7fe fc54 	bl	80040a0 <HAL_GetTick>
 80057f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80057fa:	e009      	b.n	8005810 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80057fc:	f7fe fc50 	bl	80040a0 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800580a:	d901      	bls.n	8005810 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e007      	b.n	8005820 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005810:	4b07      	ldr	r3, [pc, #28]	@ (8005830 <HAL_PWREx_EnableOverDrive+0x98>)
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005818:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800581c:	d1ee      	bne.n	80057fc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3708      	adds	r7, #8
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	40023800 	.word	0x40023800
 800582c:	420e0040 	.word	0x420e0040
 8005830:	40007000 	.word	0x40007000
 8005834:	420e0044 	.word	0x420e0044

08005838 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e267      	b.n	8005d1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d075      	beq.n	8005942 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005856:	4b88      	ldr	r3, [pc, #544]	@ (8005a78 <HAL_RCC_OscConfig+0x240>)
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f003 030c 	and.w	r3, r3, #12
 800585e:	2b04      	cmp	r3, #4
 8005860:	d00c      	beq.n	800587c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005862:	4b85      	ldr	r3, [pc, #532]	@ (8005a78 <HAL_RCC_OscConfig+0x240>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800586a:	2b08      	cmp	r3, #8
 800586c:	d112      	bne.n	8005894 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800586e:	4b82      	ldr	r3, [pc, #520]	@ (8005a78 <HAL_RCC_OscConfig+0x240>)
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005876:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800587a:	d10b      	bne.n	8005894 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800587c:	4b7e      	ldr	r3, [pc, #504]	@ (8005a78 <HAL_RCC_OscConfig+0x240>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d05b      	beq.n	8005940 <HAL_RCC_OscConfig+0x108>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d157      	bne.n	8005940 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e242      	b.n	8005d1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800589c:	d106      	bne.n	80058ac <HAL_RCC_OscConfig+0x74>
 800589e:	4b76      	ldr	r3, [pc, #472]	@ (8005a78 <HAL_RCC_OscConfig+0x240>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a75      	ldr	r2, [pc, #468]	@ (8005a78 <HAL_RCC_OscConfig+0x240>)
 80058a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058a8:	6013      	str	r3, [r2, #0]
 80058aa:	e01d      	b.n	80058e8 <HAL_RCC_OscConfig+0xb0>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80058b4:	d10c      	bne.n	80058d0 <HAL_RCC_OscConfig+0x98>
 80058b6:	4b70      	ldr	r3, [pc, #448]	@ (8005a78 <HAL_RCC_OscConfig+0x240>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a6f      	ldr	r2, [pc, #444]	@ (8005a78 <HAL_RCC_OscConfig+0x240>)
 80058bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80058c0:	6013      	str	r3, [r2, #0]
 80058c2:	4b6d      	ldr	r3, [pc, #436]	@ (8005a78 <HAL_RCC_OscConfig+0x240>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a6c      	ldr	r2, [pc, #432]	@ (8005a78 <HAL_RCC_OscConfig+0x240>)
 80058c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058cc:	6013      	str	r3, [r2, #0]
 80058ce:	e00b      	b.n	80058e8 <HAL_RCC_OscConfig+0xb0>
 80058d0:	4b69      	ldr	r3, [pc, #420]	@ (8005a78 <HAL_RCC_OscConfig+0x240>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a68      	ldr	r2, [pc, #416]	@ (8005a78 <HAL_RCC_OscConfig+0x240>)
 80058d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058da:	6013      	str	r3, [r2, #0]
 80058dc:	4b66      	ldr	r3, [pc, #408]	@ (8005a78 <HAL_RCC_OscConfig+0x240>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a65      	ldr	r2, [pc, #404]	@ (8005a78 <HAL_RCC_OscConfig+0x240>)
 80058e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80058e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d013      	beq.n	8005918 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058f0:	f7fe fbd6 	bl	80040a0 <HAL_GetTick>
 80058f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058f6:	e008      	b.n	800590a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058f8:	f7fe fbd2 	bl	80040a0 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b64      	cmp	r3, #100	@ 0x64
 8005904:	d901      	bls.n	800590a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e207      	b.n	8005d1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800590a:	4b5b      	ldr	r3, [pc, #364]	@ (8005a78 <HAL_RCC_OscConfig+0x240>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d0f0      	beq.n	80058f8 <HAL_RCC_OscConfig+0xc0>
 8005916:	e014      	b.n	8005942 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005918:	f7fe fbc2 	bl	80040a0 <HAL_GetTick>
 800591c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800591e:	e008      	b.n	8005932 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005920:	f7fe fbbe 	bl	80040a0 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b64      	cmp	r3, #100	@ 0x64
 800592c:	d901      	bls.n	8005932 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e1f3      	b.n	8005d1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005932:	4b51      	ldr	r3, [pc, #324]	@ (8005a78 <HAL_RCC_OscConfig+0x240>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1f0      	bne.n	8005920 <HAL_RCC_OscConfig+0xe8>
 800593e:	e000      	b.n	8005942 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0302 	and.w	r3, r3, #2
 800594a:	2b00      	cmp	r3, #0
 800594c:	d063      	beq.n	8005a16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800594e:	4b4a      	ldr	r3, [pc, #296]	@ (8005a78 <HAL_RCC_OscConfig+0x240>)
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f003 030c 	and.w	r3, r3, #12
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00b      	beq.n	8005972 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800595a:	4b47      	ldr	r3, [pc, #284]	@ (8005a78 <HAL_RCC_OscConfig+0x240>)
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005962:	2b08      	cmp	r3, #8
 8005964:	d11c      	bne.n	80059a0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005966:	4b44      	ldr	r3, [pc, #272]	@ (8005a78 <HAL_RCC_OscConfig+0x240>)
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d116      	bne.n	80059a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005972:	4b41      	ldr	r3, [pc, #260]	@ (8005a78 <HAL_RCC_OscConfig+0x240>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d005      	beq.n	800598a <HAL_RCC_OscConfig+0x152>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d001      	beq.n	800598a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e1c7      	b.n	8005d1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800598a:	4b3b      	ldr	r3, [pc, #236]	@ (8005a78 <HAL_RCC_OscConfig+0x240>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	00db      	lsls	r3, r3, #3
 8005998:	4937      	ldr	r1, [pc, #220]	@ (8005a78 <HAL_RCC_OscConfig+0x240>)
 800599a:	4313      	orrs	r3, r2
 800599c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800599e:	e03a      	b.n	8005a16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d020      	beq.n	80059ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059a8:	4b34      	ldr	r3, [pc, #208]	@ (8005a7c <HAL_RCC_OscConfig+0x244>)
 80059aa:	2201      	movs	r2, #1
 80059ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ae:	f7fe fb77 	bl	80040a0 <HAL_GetTick>
 80059b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059b4:	e008      	b.n	80059c8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059b6:	f7fe fb73 	bl	80040a0 <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d901      	bls.n	80059c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e1a8      	b.n	8005d1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059c8:	4b2b      	ldr	r3, [pc, #172]	@ (8005a78 <HAL_RCC_OscConfig+0x240>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d0f0      	beq.n	80059b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059d4:	4b28      	ldr	r3, [pc, #160]	@ (8005a78 <HAL_RCC_OscConfig+0x240>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	00db      	lsls	r3, r3, #3
 80059e2:	4925      	ldr	r1, [pc, #148]	@ (8005a78 <HAL_RCC_OscConfig+0x240>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	600b      	str	r3, [r1, #0]
 80059e8:	e015      	b.n	8005a16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059ea:	4b24      	ldr	r3, [pc, #144]	@ (8005a7c <HAL_RCC_OscConfig+0x244>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f0:	f7fe fb56 	bl	80040a0 <HAL_GetTick>
 80059f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059f6:	e008      	b.n	8005a0a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059f8:	f7fe fb52 	bl	80040a0 <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d901      	bls.n	8005a0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e187      	b.n	8005d1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a0a:	4b1b      	ldr	r3, [pc, #108]	@ (8005a78 <HAL_RCC_OscConfig+0x240>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1f0      	bne.n	80059f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0308 	and.w	r3, r3, #8
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d036      	beq.n	8005a90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d016      	beq.n	8005a58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a2a:	4b15      	ldr	r3, [pc, #84]	@ (8005a80 <HAL_RCC_OscConfig+0x248>)
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a30:	f7fe fb36 	bl	80040a0 <HAL_GetTick>
 8005a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a36:	e008      	b.n	8005a4a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a38:	f7fe fb32 	bl	80040a0 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d901      	bls.n	8005a4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e167      	b.n	8005d1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8005a78 <HAL_RCC_OscConfig+0x240>)
 8005a4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d0f0      	beq.n	8005a38 <HAL_RCC_OscConfig+0x200>
 8005a56:	e01b      	b.n	8005a90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a58:	4b09      	ldr	r3, [pc, #36]	@ (8005a80 <HAL_RCC_OscConfig+0x248>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a5e:	f7fe fb1f 	bl	80040a0 <HAL_GetTick>
 8005a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a64:	e00e      	b.n	8005a84 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a66:	f7fe fb1b 	bl	80040a0 <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d907      	bls.n	8005a84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e150      	b.n	8005d1a <HAL_RCC_OscConfig+0x4e2>
 8005a78:	40023800 	.word	0x40023800
 8005a7c:	42470000 	.word	0x42470000
 8005a80:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a84:	4b88      	ldr	r3, [pc, #544]	@ (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005a86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1ea      	bne.n	8005a66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0304 	and.w	r3, r3, #4
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f000 8097 	beq.w	8005bcc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005aa2:	4b81      	ldr	r3, [pc, #516]	@ (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10f      	bne.n	8005ace <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005aae:	2300      	movs	r3, #0
 8005ab0:	60bb      	str	r3, [r7, #8]
 8005ab2:	4b7d      	ldr	r3, [pc, #500]	@ (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab6:	4a7c      	ldr	r2, [pc, #496]	@ (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005ab8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005abc:	6413      	str	r3, [r2, #64]	@ 0x40
 8005abe:	4b7a      	ldr	r3, [pc, #488]	@ (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ac6:	60bb      	str	r3, [r7, #8]
 8005ac8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005aca:	2301      	movs	r3, #1
 8005acc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ace:	4b77      	ldr	r3, [pc, #476]	@ (8005cac <HAL_RCC_OscConfig+0x474>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d118      	bne.n	8005b0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ada:	4b74      	ldr	r3, [pc, #464]	@ (8005cac <HAL_RCC_OscConfig+0x474>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a73      	ldr	r2, [pc, #460]	@ (8005cac <HAL_RCC_OscConfig+0x474>)
 8005ae0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ae4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ae6:	f7fe fadb 	bl	80040a0 <HAL_GetTick>
 8005aea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aec:	e008      	b.n	8005b00 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aee:	f7fe fad7 	bl	80040a0 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e10c      	b.n	8005d1a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b00:	4b6a      	ldr	r3, [pc, #424]	@ (8005cac <HAL_RCC_OscConfig+0x474>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d0f0      	beq.n	8005aee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d106      	bne.n	8005b22 <HAL_RCC_OscConfig+0x2ea>
 8005b14:	4b64      	ldr	r3, [pc, #400]	@ (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b18:	4a63      	ldr	r2, [pc, #396]	@ (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005b1a:	f043 0301 	orr.w	r3, r3, #1
 8005b1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b20:	e01c      	b.n	8005b5c <HAL_RCC_OscConfig+0x324>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	2b05      	cmp	r3, #5
 8005b28:	d10c      	bne.n	8005b44 <HAL_RCC_OscConfig+0x30c>
 8005b2a:	4b5f      	ldr	r3, [pc, #380]	@ (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b2e:	4a5e      	ldr	r2, [pc, #376]	@ (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005b30:	f043 0304 	orr.w	r3, r3, #4
 8005b34:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b36:	4b5c      	ldr	r3, [pc, #368]	@ (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b3a:	4a5b      	ldr	r2, [pc, #364]	@ (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005b3c:	f043 0301 	orr.w	r3, r3, #1
 8005b40:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b42:	e00b      	b.n	8005b5c <HAL_RCC_OscConfig+0x324>
 8005b44:	4b58      	ldr	r3, [pc, #352]	@ (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b48:	4a57      	ldr	r2, [pc, #348]	@ (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005b4a:	f023 0301 	bic.w	r3, r3, #1
 8005b4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b50:	4b55      	ldr	r3, [pc, #340]	@ (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b54:	4a54      	ldr	r2, [pc, #336]	@ (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005b56:	f023 0304 	bic.w	r3, r3, #4
 8005b5a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d015      	beq.n	8005b90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b64:	f7fe fa9c 	bl	80040a0 <HAL_GetTick>
 8005b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b6a:	e00a      	b.n	8005b82 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b6c:	f7fe fa98 	bl	80040a0 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d901      	bls.n	8005b82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e0cb      	b.n	8005d1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b82:	4b49      	ldr	r3, [pc, #292]	@ (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d0ee      	beq.n	8005b6c <HAL_RCC_OscConfig+0x334>
 8005b8e:	e014      	b.n	8005bba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b90:	f7fe fa86 	bl	80040a0 <HAL_GetTick>
 8005b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b96:	e00a      	b.n	8005bae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b98:	f7fe fa82 	bl	80040a0 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e0b5      	b.n	8005d1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bae:	4b3e      	ldr	r3, [pc, #248]	@ (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1ee      	bne.n	8005b98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005bba:	7dfb      	ldrb	r3, [r7, #23]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d105      	bne.n	8005bcc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bc0:	4b39      	ldr	r3, [pc, #228]	@ (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc4:	4a38      	ldr	r2, [pc, #224]	@ (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005bc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f000 80a1 	beq.w	8005d18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005bd6:	4b34      	ldr	r3, [pc, #208]	@ (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f003 030c 	and.w	r3, r3, #12
 8005bde:	2b08      	cmp	r3, #8
 8005be0:	d05c      	beq.n	8005c9c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	d141      	bne.n	8005c6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bea:	4b31      	ldr	r3, [pc, #196]	@ (8005cb0 <HAL_RCC_OscConfig+0x478>)
 8005bec:	2200      	movs	r2, #0
 8005bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bf0:	f7fe fa56 	bl	80040a0 <HAL_GetTick>
 8005bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bf6:	e008      	b.n	8005c0a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bf8:	f7fe fa52 	bl	80040a0 <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d901      	bls.n	8005c0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e087      	b.n	8005d1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c0a:	4b27      	ldr	r3, [pc, #156]	@ (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1f0      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	69da      	ldr	r2, [r3, #28]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	431a      	orrs	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c24:	019b      	lsls	r3, r3, #6
 8005c26:	431a      	orrs	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c2c:	085b      	lsrs	r3, r3, #1
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	041b      	lsls	r3, r3, #16
 8005c32:	431a      	orrs	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c38:	061b      	lsls	r3, r3, #24
 8005c3a:	491b      	ldr	r1, [pc, #108]	@ (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c40:	4b1b      	ldr	r3, [pc, #108]	@ (8005cb0 <HAL_RCC_OscConfig+0x478>)
 8005c42:	2201      	movs	r2, #1
 8005c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c46:	f7fe fa2b 	bl	80040a0 <HAL_GetTick>
 8005c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c4c:	e008      	b.n	8005c60 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c4e:	f7fe fa27 	bl	80040a0 <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d901      	bls.n	8005c60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e05c      	b.n	8005d1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c60:	4b11      	ldr	r3, [pc, #68]	@ (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d0f0      	beq.n	8005c4e <HAL_RCC_OscConfig+0x416>
 8005c6c:	e054      	b.n	8005d18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c6e:	4b10      	ldr	r3, [pc, #64]	@ (8005cb0 <HAL_RCC_OscConfig+0x478>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c74:	f7fe fa14 	bl	80040a0 <HAL_GetTick>
 8005c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c7a:	e008      	b.n	8005c8e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c7c:	f7fe fa10 	bl	80040a0 <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e045      	b.n	8005d1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c8e:	4b06      	ldr	r3, [pc, #24]	@ (8005ca8 <HAL_RCC_OscConfig+0x470>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1f0      	bne.n	8005c7c <HAL_RCC_OscConfig+0x444>
 8005c9a:	e03d      	b.n	8005d18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d107      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e038      	b.n	8005d1a <HAL_RCC_OscConfig+0x4e2>
 8005ca8:	40023800 	.word	0x40023800
 8005cac:	40007000 	.word	0x40007000
 8005cb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8005d24 <HAL_RCC_OscConfig+0x4ec>)
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d028      	beq.n	8005d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d121      	bne.n	8005d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d11a      	bne.n	8005d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005cea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d111      	bne.n	8005d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cfa:	085b      	lsrs	r3, r3, #1
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d107      	bne.n	8005d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d001      	beq.n	8005d18 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e000      	b.n	8005d1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3718      	adds	r7, #24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	40023800 	.word	0x40023800

08005d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d101      	bne.n	8005d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e0cc      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d3c:	4b68      	ldr	r3, [pc, #416]	@ (8005ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 030f 	and.w	r3, r3, #15
 8005d44:	683a      	ldr	r2, [r7, #0]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d90c      	bls.n	8005d64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d4a:	4b65      	ldr	r3, [pc, #404]	@ (8005ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	b2d2      	uxtb	r2, r2
 8005d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d52:	4b63      	ldr	r3, [pc, #396]	@ (8005ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 030f 	and.w	r3, r3, #15
 8005d5a:	683a      	ldr	r2, [r7, #0]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d001      	beq.n	8005d64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e0b8      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0302 	and.w	r3, r3, #2
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d020      	beq.n	8005db2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0304 	and.w	r3, r3, #4
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d005      	beq.n	8005d88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d7c:	4b59      	ldr	r3, [pc, #356]	@ (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	4a58      	ldr	r2, [pc, #352]	@ (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d82:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005d86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0308 	and.w	r3, r3, #8
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d005      	beq.n	8005da0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d94:	4b53      	ldr	r3, [pc, #332]	@ (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	4a52      	ldr	r2, [pc, #328]	@ (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d9a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005d9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005da0:	4b50      	ldr	r3, [pc, #320]	@ (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	494d      	ldr	r1, [pc, #308]	@ (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d044      	beq.n	8005e48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d107      	bne.n	8005dd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dc6:	4b47      	ldr	r3, [pc, #284]	@ (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d119      	bne.n	8005e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e07f      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d003      	beq.n	8005de6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005de2:	2b03      	cmp	r3, #3
 8005de4:	d107      	bne.n	8005df6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005de6:	4b3f      	ldr	r3, [pc, #252]	@ (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d109      	bne.n	8005e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e06f      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005df6:	4b3b      	ldr	r3, [pc, #236]	@ (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0302 	and.w	r3, r3, #2
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e067      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e06:	4b37      	ldr	r3, [pc, #220]	@ (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f023 0203 	bic.w	r2, r3, #3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	4934      	ldr	r1, [pc, #208]	@ (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e18:	f7fe f942 	bl	80040a0 <HAL_GetTick>
 8005e1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e1e:	e00a      	b.n	8005e36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e20:	f7fe f93e 	bl	80040a0 <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d901      	bls.n	8005e36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e04f      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e36:	4b2b      	ldr	r3, [pc, #172]	@ (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f003 020c 	and.w	r2, r3, #12
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d1eb      	bne.n	8005e20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e48:	4b25      	ldr	r3, [pc, #148]	@ (8005ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 030f 	and.w	r3, r3, #15
 8005e50:	683a      	ldr	r2, [r7, #0]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d20c      	bcs.n	8005e70 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e56:	4b22      	ldr	r3, [pc, #136]	@ (8005ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	b2d2      	uxtb	r2, r2
 8005e5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e5e:	4b20      	ldr	r3, [pc, #128]	@ (8005ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 030f 	and.w	r3, r3, #15
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d001      	beq.n	8005e70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e032      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0304 	and.w	r3, r3, #4
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d008      	beq.n	8005e8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e7c:	4b19      	ldr	r3, [pc, #100]	@ (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	4916      	ldr	r1, [pc, #88]	@ (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0308 	and.w	r3, r3, #8
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d009      	beq.n	8005eae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e9a:	4b12      	ldr	r3, [pc, #72]	@ (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	00db      	lsls	r3, r3, #3
 8005ea8:	490e      	ldr	r1, [pc, #56]	@ (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005eae:	f000 f821 	bl	8005ef4 <HAL_RCC_GetSysClockFreq>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	091b      	lsrs	r3, r3, #4
 8005eba:	f003 030f 	and.w	r3, r3, #15
 8005ebe:	490a      	ldr	r1, [pc, #40]	@ (8005ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8005ec0:	5ccb      	ldrb	r3, [r1, r3]
 8005ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec6:	4a09      	ldr	r2, [pc, #36]	@ (8005eec <HAL_RCC_ClockConfig+0x1c4>)
 8005ec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005eca:	4b09      	ldr	r3, [pc, #36]	@ (8005ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7fe f8a2 	bl	8004018 <HAL_InitTick>

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	40023c00 	.word	0x40023c00
 8005ee4:	40023800 	.word	0x40023800
 8005ee8:	0800772c 	.word	0x0800772c
 8005eec:	20000420 	.word	0x20000420
 8005ef0:	20000424 	.word	0x20000424

08005ef4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ef8:	b090      	sub	sp, #64	@ 0x40
 8005efa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005efc:	2300      	movs	r3, #0
 8005efe:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005f00:	2300      	movs	r3, #0
 8005f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005f04:	2300      	movs	r3, #0
 8005f06:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f0c:	4b59      	ldr	r3, [pc, #356]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f003 030c 	and.w	r3, r3, #12
 8005f14:	2b08      	cmp	r3, #8
 8005f16:	d00d      	beq.n	8005f34 <HAL_RCC_GetSysClockFreq+0x40>
 8005f18:	2b08      	cmp	r3, #8
 8005f1a:	f200 80a1 	bhi.w	8006060 <HAL_RCC_GetSysClockFreq+0x16c>
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d002      	beq.n	8005f28 <HAL_RCC_GetSysClockFreq+0x34>
 8005f22:	2b04      	cmp	r3, #4
 8005f24:	d003      	beq.n	8005f2e <HAL_RCC_GetSysClockFreq+0x3a>
 8005f26:	e09b      	b.n	8006060 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f28:	4b53      	ldr	r3, [pc, #332]	@ (8006078 <HAL_RCC_GetSysClockFreq+0x184>)
 8005f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005f2c:	e09b      	b.n	8006066 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f2e:	4b53      	ldr	r3, [pc, #332]	@ (800607c <HAL_RCC_GetSysClockFreq+0x188>)
 8005f30:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005f32:	e098      	b.n	8006066 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f34:	4b4f      	ldr	r3, [pc, #316]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f3c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f3e:	4b4d      	ldr	r3, [pc, #308]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d028      	beq.n	8005f9c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f4a:	4b4a      	ldr	r3, [pc, #296]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	099b      	lsrs	r3, r3, #6
 8005f50:	2200      	movs	r2, #0
 8005f52:	623b      	str	r3, [r7, #32]
 8005f54:	627a      	str	r2, [r7, #36]	@ 0x24
 8005f56:	6a3b      	ldr	r3, [r7, #32]
 8005f58:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	4b47      	ldr	r3, [pc, #284]	@ (800607c <HAL_RCC_GetSysClockFreq+0x188>)
 8005f60:	fb03 f201 	mul.w	r2, r3, r1
 8005f64:	2300      	movs	r3, #0
 8005f66:	fb00 f303 	mul.w	r3, r0, r3
 8005f6a:	4413      	add	r3, r2
 8005f6c:	4a43      	ldr	r2, [pc, #268]	@ (800607c <HAL_RCC_GetSysClockFreq+0x188>)
 8005f6e:	fba0 1202 	umull	r1, r2, r0, r2
 8005f72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f74:	460a      	mov	r2, r1
 8005f76:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005f78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f7a:	4413      	add	r3, r2
 8005f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f80:	2200      	movs	r2, #0
 8005f82:	61bb      	str	r3, [r7, #24]
 8005f84:	61fa      	str	r2, [r7, #28]
 8005f86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f8a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005f8e:	f7fa fe5b 	bl	8000c48 <__aeabi_uldivmod>
 8005f92:	4602      	mov	r2, r0
 8005f94:	460b      	mov	r3, r1
 8005f96:	4613      	mov	r3, r2
 8005f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f9a:	e053      	b.n	8006044 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f9c:	4b35      	ldr	r3, [pc, #212]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	099b      	lsrs	r3, r3, #6
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	613b      	str	r3, [r7, #16]
 8005fa6:	617a      	str	r2, [r7, #20]
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005fae:	f04f 0b00 	mov.w	fp, #0
 8005fb2:	4652      	mov	r2, sl
 8005fb4:	465b      	mov	r3, fp
 8005fb6:	f04f 0000 	mov.w	r0, #0
 8005fba:	f04f 0100 	mov.w	r1, #0
 8005fbe:	0159      	lsls	r1, r3, #5
 8005fc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fc4:	0150      	lsls	r0, r2, #5
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	460b      	mov	r3, r1
 8005fca:	ebb2 080a 	subs.w	r8, r2, sl
 8005fce:	eb63 090b 	sbc.w	r9, r3, fp
 8005fd2:	f04f 0200 	mov.w	r2, #0
 8005fd6:	f04f 0300 	mov.w	r3, #0
 8005fda:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005fde:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005fe2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005fe6:	ebb2 0408 	subs.w	r4, r2, r8
 8005fea:	eb63 0509 	sbc.w	r5, r3, r9
 8005fee:	f04f 0200 	mov.w	r2, #0
 8005ff2:	f04f 0300 	mov.w	r3, #0
 8005ff6:	00eb      	lsls	r3, r5, #3
 8005ff8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ffc:	00e2      	lsls	r2, r4, #3
 8005ffe:	4614      	mov	r4, r2
 8006000:	461d      	mov	r5, r3
 8006002:	eb14 030a 	adds.w	r3, r4, sl
 8006006:	603b      	str	r3, [r7, #0]
 8006008:	eb45 030b 	adc.w	r3, r5, fp
 800600c:	607b      	str	r3, [r7, #4]
 800600e:	f04f 0200 	mov.w	r2, #0
 8006012:	f04f 0300 	mov.w	r3, #0
 8006016:	e9d7 4500 	ldrd	r4, r5, [r7]
 800601a:	4629      	mov	r1, r5
 800601c:	028b      	lsls	r3, r1, #10
 800601e:	4621      	mov	r1, r4
 8006020:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006024:	4621      	mov	r1, r4
 8006026:	028a      	lsls	r2, r1, #10
 8006028:	4610      	mov	r0, r2
 800602a:	4619      	mov	r1, r3
 800602c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800602e:	2200      	movs	r2, #0
 8006030:	60bb      	str	r3, [r7, #8]
 8006032:	60fa      	str	r2, [r7, #12]
 8006034:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006038:	f7fa fe06 	bl	8000c48 <__aeabi_uldivmod>
 800603c:	4602      	mov	r2, r0
 800603e:	460b      	mov	r3, r1
 8006040:	4613      	mov	r3, r2
 8006042:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006044:	4b0b      	ldr	r3, [pc, #44]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x180>)
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	0c1b      	lsrs	r3, r3, #16
 800604a:	f003 0303 	and.w	r3, r3, #3
 800604e:	3301      	adds	r3, #1
 8006050:	005b      	lsls	r3, r3, #1
 8006052:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006054:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006058:	fbb2 f3f3 	udiv	r3, r2, r3
 800605c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800605e:	e002      	b.n	8006066 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006060:	4b05      	ldr	r3, [pc, #20]	@ (8006078 <HAL_RCC_GetSysClockFreq+0x184>)
 8006062:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006064:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006068:	4618      	mov	r0, r3
 800606a:	3740      	adds	r7, #64	@ 0x40
 800606c:	46bd      	mov	sp, r7
 800606e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006072:	bf00      	nop
 8006074:	40023800 	.word	0x40023800
 8006078:	00f42400 	.word	0x00f42400
 800607c:	017d7840 	.word	0x017d7840

08006080 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006080:	b480      	push	{r7}
 8006082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006084:	4b03      	ldr	r3, [pc, #12]	@ (8006094 <HAL_RCC_GetHCLKFreq+0x14>)
 8006086:	681b      	ldr	r3, [r3, #0]
}
 8006088:	4618      	mov	r0, r3
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	20000420 	.word	0x20000420

08006098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800609c:	f7ff fff0 	bl	8006080 <HAL_RCC_GetHCLKFreq>
 80060a0:	4602      	mov	r2, r0
 80060a2:	4b05      	ldr	r3, [pc, #20]	@ (80060b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	0a9b      	lsrs	r3, r3, #10
 80060a8:	f003 0307 	and.w	r3, r3, #7
 80060ac:	4903      	ldr	r1, [pc, #12]	@ (80060bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80060ae:	5ccb      	ldrb	r3, [r1, r3]
 80060b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	40023800 	.word	0x40023800
 80060bc:	0800773c 	.word	0x0800773c

080060c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e07b      	b.n	80061ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d108      	bne.n	80060ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060e2:	d009      	beq.n	80060f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	61da      	str	r2, [r3, #28]
 80060ea:	e005      	b.n	80060f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d106      	bne.n	8006118 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f7fd fe3e 	bl	8003d94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2202      	movs	r2, #2
 800611c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800612e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006140:	431a      	orrs	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800614a:	431a      	orrs	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	f003 0302 	and.w	r3, r3, #2
 8006154:	431a      	orrs	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	431a      	orrs	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006168:	431a      	orrs	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	69db      	ldr	r3, [r3, #28]
 800616e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006172:	431a      	orrs	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800617c:	ea42 0103 	orr.w	r1, r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006184:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	430a      	orrs	r2, r1
 800618e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	0c1b      	lsrs	r3, r3, #16
 8006196:	f003 0104 	and.w	r1, r3, #4
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800619e:	f003 0210 	and.w	r2, r3, #16
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	69da      	ldr	r2, [r3, #28]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80061b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b088      	sub	sp, #32
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	60f8      	str	r0, [r7, #12]
 80061da:	60b9      	str	r1, [r7, #8]
 80061dc:	603b      	str	r3, [r7, #0]
 80061de:	4613      	mov	r3, r2
 80061e0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061e2:	f7fd ff5d 	bl	80040a0 <HAL_GetTick>
 80061e6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80061e8:	88fb      	ldrh	r3, [r7, #6]
 80061ea:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d001      	beq.n	80061fc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80061f8:	2302      	movs	r3, #2
 80061fa:	e12a      	b.n	8006452 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d002      	beq.n	8006208 <HAL_SPI_Transmit+0x36>
 8006202:	88fb      	ldrh	r3, [r7, #6]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d101      	bne.n	800620c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e122      	b.n	8006452 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006212:	2b01      	cmp	r3, #1
 8006214:	d101      	bne.n	800621a <HAL_SPI_Transmit+0x48>
 8006216:	2302      	movs	r3, #2
 8006218:	e11b      	b.n	8006452 <HAL_SPI_Transmit+0x280>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2201      	movs	r2, #1
 800621e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2203      	movs	r2, #3
 8006226:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	88fa      	ldrh	r2, [r7, #6]
 800623a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	88fa      	ldrh	r2, [r7, #6]
 8006240:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006268:	d10f      	bne.n	800628a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006278:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006288:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006294:	2b40      	cmp	r3, #64	@ 0x40
 8006296:	d007      	beq.n	80062a8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80062a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062b0:	d152      	bne.n	8006358 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d002      	beq.n	80062c0 <HAL_SPI_Transmit+0xee>
 80062ba:	8b7b      	ldrh	r3, [r7, #26]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d145      	bne.n	800634c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062c4:	881a      	ldrh	r2, [r3, #0]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062d0:	1c9a      	adds	r2, r3, #2
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062da:	b29b      	uxth	r3, r3
 80062dc:	3b01      	subs	r3, #1
 80062de:	b29a      	uxth	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80062e4:	e032      	b.n	800634c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f003 0302 	and.w	r3, r3, #2
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d112      	bne.n	800631a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062f8:	881a      	ldrh	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006304:	1c9a      	adds	r2, r3, #2
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800630e:	b29b      	uxth	r3, r3
 8006310:	3b01      	subs	r3, #1
 8006312:	b29a      	uxth	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006318:	e018      	b.n	800634c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800631a:	f7fd fec1 	bl	80040a0 <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	683a      	ldr	r2, [r7, #0]
 8006326:	429a      	cmp	r2, r3
 8006328:	d803      	bhi.n	8006332 <HAL_SPI_Transmit+0x160>
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006330:	d102      	bne.n	8006338 <HAL_SPI_Transmit+0x166>
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d109      	bne.n	800634c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	e082      	b.n	8006452 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006350:	b29b      	uxth	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1c7      	bne.n	80062e6 <HAL_SPI_Transmit+0x114>
 8006356:	e053      	b.n	8006400 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d002      	beq.n	8006366 <HAL_SPI_Transmit+0x194>
 8006360:	8b7b      	ldrh	r3, [r7, #26]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d147      	bne.n	80063f6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	330c      	adds	r3, #12
 8006370:	7812      	ldrb	r2, [r2, #0]
 8006372:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006378:	1c5a      	adds	r2, r3, #1
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006382:	b29b      	uxth	r3, r3
 8006384:	3b01      	subs	r3, #1
 8006386:	b29a      	uxth	r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800638c:	e033      	b.n	80063f6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f003 0302 	and.w	r3, r3, #2
 8006398:	2b02      	cmp	r3, #2
 800639a:	d113      	bne.n	80063c4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	330c      	adds	r3, #12
 80063a6:	7812      	ldrb	r2, [r2, #0]
 80063a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ae:	1c5a      	adds	r2, r3, #1
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	3b01      	subs	r3, #1
 80063bc:	b29a      	uxth	r2, r3
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80063c2:	e018      	b.n	80063f6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063c4:	f7fd fe6c 	bl	80040a0 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	683a      	ldr	r2, [r7, #0]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d803      	bhi.n	80063dc <HAL_SPI_Transmit+0x20a>
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063da:	d102      	bne.n	80063e2 <HAL_SPI_Transmit+0x210>
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d109      	bne.n	80063f6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e02d      	b.n	8006452 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1c6      	bne.n	800638e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006400:	69fa      	ldr	r2, [r7, #28]
 8006402:	6839      	ldr	r1, [r7, #0]
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f000 fa59 	bl	80068bc <SPI_EndRxTxTransaction>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d002      	beq.n	8006416 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2220      	movs	r2, #32
 8006414:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d10a      	bne.n	8006434 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800641e:	2300      	movs	r3, #0
 8006420:	617b      	str	r3, [r7, #20]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	617b      	str	r3, [r7, #20]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	617b      	str	r3, [r7, #20]
 8006432:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006448:	2b00      	cmp	r3, #0
 800644a:	d001      	beq.n	8006450 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e000      	b.n	8006452 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006450:	2300      	movs	r3, #0
  }
}
 8006452:	4618      	mov	r0, r3
 8006454:	3720      	adds	r7, #32
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b08a      	sub	sp, #40	@ 0x28
 800645e:	af00      	add	r7, sp, #0
 8006460:	60f8      	str	r0, [r7, #12]
 8006462:	60b9      	str	r1, [r7, #8]
 8006464:	607a      	str	r2, [r7, #4]
 8006466:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006468:	2301      	movs	r3, #1
 800646a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800646c:	f7fd fe18 	bl	80040a0 <HAL_GetTick>
 8006470:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006478:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006480:	887b      	ldrh	r3, [r7, #2]
 8006482:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006484:	7ffb      	ldrb	r3, [r7, #31]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d00c      	beq.n	80064a4 <HAL_SPI_TransmitReceive+0x4a>
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006490:	d106      	bne.n	80064a0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d102      	bne.n	80064a0 <HAL_SPI_TransmitReceive+0x46>
 800649a:	7ffb      	ldrb	r3, [r7, #31]
 800649c:	2b04      	cmp	r3, #4
 800649e:	d001      	beq.n	80064a4 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80064a0:	2302      	movs	r3, #2
 80064a2:	e17f      	b.n	80067a4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d005      	beq.n	80064b6 <HAL_SPI_TransmitReceive+0x5c>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d002      	beq.n	80064b6 <HAL_SPI_TransmitReceive+0x5c>
 80064b0:	887b      	ldrh	r3, [r7, #2]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d101      	bne.n	80064ba <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e174      	b.n	80067a4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d101      	bne.n	80064c8 <HAL_SPI_TransmitReceive+0x6e>
 80064c4:	2302      	movs	r3, #2
 80064c6:	e16d      	b.n	80067a4 <HAL_SPI_TransmitReceive+0x34a>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	2b04      	cmp	r3, #4
 80064da:	d003      	beq.n	80064e4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2205      	movs	r2, #5
 80064e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	887a      	ldrh	r2, [r7, #2]
 80064f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	887a      	ldrh	r2, [r7, #2]
 80064fa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	887a      	ldrh	r2, [r7, #2]
 8006506:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	887a      	ldrh	r2, [r7, #2]
 800650c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006524:	2b40      	cmp	r3, #64	@ 0x40
 8006526:	d007      	beq.n	8006538 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006536:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006540:	d17e      	bne.n	8006640 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d002      	beq.n	8006550 <HAL_SPI_TransmitReceive+0xf6>
 800654a:	8afb      	ldrh	r3, [r7, #22]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d16c      	bne.n	800662a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006554:	881a      	ldrh	r2, [r3, #0]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006560:	1c9a      	adds	r2, r3, #2
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800656a:	b29b      	uxth	r3, r3
 800656c:	3b01      	subs	r3, #1
 800656e:	b29a      	uxth	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006574:	e059      	b.n	800662a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f003 0302 	and.w	r3, r3, #2
 8006580:	2b02      	cmp	r3, #2
 8006582:	d11b      	bne.n	80065bc <HAL_SPI_TransmitReceive+0x162>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006588:	b29b      	uxth	r3, r3
 800658a:	2b00      	cmp	r3, #0
 800658c:	d016      	beq.n	80065bc <HAL_SPI_TransmitReceive+0x162>
 800658e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006590:	2b01      	cmp	r3, #1
 8006592:	d113      	bne.n	80065bc <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006598:	881a      	ldrh	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065a4:	1c9a      	adds	r2, r3, #2
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	3b01      	subs	r3, #1
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065b8:	2300      	movs	r3, #0
 80065ba:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f003 0301 	and.w	r3, r3, #1
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d119      	bne.n	80065fe <HAL_SPI_TransmitReceive+0x1a4>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d014      	beq.n	80065fe <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065de:	b292      	uxth	r2, r2
 80065e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065e6:	1c9a      	adds	r2, r3, #2
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	3b01      	subs	r3, #1
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80065fa:	2301      	movs	r3, #1
 80065fc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80065fe:	f7fd fd4f 	bl	80040a0 <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	6a3b      	ldr	r3, [r7, #32]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800660a:	429a      	cmp	r2, r3
 800660c:	d80d      	bhi.n	800662a <HAL_SPI_TransmitReceive+0x1d0>
 800660e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006614:	d009      	beq.n	800662a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2201      	movs	r2, #1
 800661a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e0bc      	b.n	80067a4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800662e:	b29b      	uxth	r3, r3
 8006630:	2b00      	cmp	r3, #0
 8006632:	d1a0      	bne.n	8006576 <HAL_SPI_TransmitReceive+0x11c>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006638:	b29b      	uxth	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d19b      	bne.n	8006576 <HAL_SPI_TransmitReceive+0x11c>
 800663e:	e082      	b.n	8006746 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d002      	beq.n	800664e <HAL_SPI_TransmitReceive+0x1f4>
 8006648:	8afb      	ldrh	r3, [r7, #22]
 800664a:	2b01      	cmp	r3, #1
 800664c:	d171      	bne.n	8006732 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	330c      	adds	r3, #12
 8006658:	7812      	ldrb	r2, [r2, #0]
 800665a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006660:	1c5a      	adds	r2, r3, #1
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800666a:	b29b      	uxth	r3, r3
 800666c:	3b01      	subs	r3, #1
 800666e:	b29a      	uxth	r2, r3
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006674:	e05d      	b.n	8006732 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	f003 0302 	and.w	r3, r3, #2
 8006680:	2b02      	cmp	r3, #2
 8006682:	d11c      	bne.n	80066be <HAL_SPI_TransmitReceive+0x264>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006688:	b29b      	uxth	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d017      	beq.n	80066be <HAL_SPI_TransmitReceive+0x264>
 800668e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006690:	2b01      	cmp	r3, #1
 8006692:	d114      	bne.n	80066be <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	330c      	adds	r3, #12
 800669e:	7812      	ldrb	r2, [r2, #0]
 80066a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066a6:	1c5a      	adds	r2, r3, #1
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	3b01      	subs	r3, #1
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066ba:	2300      	movs	r3, #0
 80066bc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f003 0301 	and.w	r3, r3, #1
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d119      	bne.n	8006700 <HAL_SPI_TransmitReceive+0x2a6>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d014      	beq.n	8006700 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68da      	ldr	r2, [r3, #12]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066e0:	b2d2      	uxtb	r2, r2
 80066e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066e8:	1c5a      	adds	r2, r3, #1
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	3b01      	subs	r3, #1
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066fc:	2301      	movs	r3, #1
 80066fe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006700:	f7fd fcce 	bl	80040a0 <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	6a3b      	ldr	r3, [r7, #32]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800670c:	429a      	cmp	r2, r3
 800670e:	d803      	bhi.n	8006718 <HAL_SPI_TransmitReceive+0x2be>
 8006710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006716:	d102      	bne.n	800671e <HAL_SPI_TransmitReceive+0x2c4>
 8006718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671a:	2b00      	cmp	r3, #0
 800671c:	d109      	bne.n	8006732 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e038      	b.n	80067a4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006736:	b29b      	uxth	r3, r3
 8006738:	2b00      	cmp	r3, #0
 800673a:	d19c      	bne.n	8006676 <HAL_SPI_TransmitReceive+0x21c>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006740:	b29b      	uxth	r3, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d197      	bne.n	8006676 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006746:	6a3a      	ldr	r2, [r7, #32]
 8006748:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f000 f8b6 	bl	80068bc <SPI_EndRxTxTransaction>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d008      	beq.n	8006768 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2220      	movs	r2, #32
 800675a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2200      	movs	r2, #0
 8006760:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e01d      	b.n	80067a4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10a      	bne.n	8006786 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006770:	2300      	movs	r3, #0
 8006772:	613b      	str	r3, [r7, #16]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	613b      	str	r3, [r7, #16]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	613b      	str	r3, [r7, #16]
 8006784:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800679a:	2b00      	cmp	r3, #0
 800679c:	d001      	beq.n	80067a2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e000      	b.n	80067a4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80067a2:	2300      	movs	r3, #0
  }
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3728      	adds	r7, #40	@ 0x28
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b088      	sub	sp, #32
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	603b      	str	r3, [r7, #0]
 80067b8:	4613      	mov	r3, r2
 80067ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80067bc:	f7fd fc70 	bl	80040a0 <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c4:	1a9b      	subs	r3, r3, r2
 80067c6:	683a      	ldr	r2, [r7, #0]
 80067c8:	4413      	add	r3, r2
 80067ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80067cc:	f7fd fc68 	bl	80040a0 <HAL_GetTick>
 80067d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80067d2:	4b39      	ldr	r3, [pc, #228]	@ (80068b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	015b      	lsls	r3, r3, #5
 80067d8:	0d1b      	lsrs	r3, r3, #20
 80067da:	69fa      	ldr	r2, [r7, #28]
 80067dc:	fb02 f303 	mul.w	r3, r2, r3
 80067e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067e2:	e054      	b.n	800688e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ea:	d050      	beq.n	800688e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80067ec:	f7fd fc58 	bl	80040a0 <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	69fa      	ldr	r2, [r7, #28]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d902      	bls.n	8006802 <SPI_WaitFlagStateUntilTimeout+0x56>
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d13d      	bne.n	800687e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	685a      	ldr	r2, [r3, #4]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006810:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800681a:	d111      	bne.n	8006840 <SPI_WaitFlagStateUntilTimeout+0x94>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006824:	d004      	beq.n	8006830 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800682e:	d107      	bne.n	8006840 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800683e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006844:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006848:	d10f      	bne.n	800686a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006858:	601a      	str	r2, [r3, #0]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006868:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e017      	b.n	80068ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d101      	bne.n	8006888 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006884:	2300      	movs	r3, #0
 8006886:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	3b01      	subs	r3, #1
 800688c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	689a      	ldr	r2, [r3, #8]
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	4013      	ands	r3, r2
 8006898:	68ba      	ldr	r2, [r7, #8]
 800689a:	429a      	cmp	r2, r3
 800689c:	bf0c      	ite	eq
 800689e:	2301      	moveq	r3, #1
 80068a0:	2300      	movne	r3, #0
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	461a      	mov	r2, r3
 80068a6:	79fb      	ldrb	r3, [r7, #7]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d19b      	bne.n	80067e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3720      	adds	r7, #32
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	20000420 	.word	0x20000420

080068bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b088      	sub	sp, #32
 80068c0:	af02      	add	r7, sp, #8
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	9300      	str	r3, [sp, #0]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	2201      	movs	r2, #1
 80068d0:	2102      	movs	r1, #2
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	f7ff ff6a 	bl	80067ac <SPI_WaitFlagStateUntilTimeout>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d007      	beq.n	80068ee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068e2:	f043 0220 	orr.w	r2, r3, #32
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e032      	b.n	8006954 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80068ee:	4b1b      	ldr	r3, [pc, #108]	@ (800695c <SPI_EndRxTxTransaction+0xa0>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a1b      	ldr	r2, [pc, #108]	@ (8006960 <SPI_EndRxTxTransaction+0xa4>)
 80068f4:	fba2 2303 	umull	r2, r3, r2, r3
 80068f8:	0d5b      	lsrs	r3, r3, #21
 80068fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80068fe:	fb02 f303 	mul.w	r3, r2, r3
 8006902:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800690c:	d112      	bne.n	8006934 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	9300      	str	r3, [sp, #0]
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	2200      	movs	r2, #0
 8006916:	2180      	movs	r1, #128	@ 0x80
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f7ff ff47 	bl	80067ac <SPI_WaitFlagStateUntilTimeout>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d016      	beq.n	8006952 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006928:	f043 0220 	orr.w	r2, r3, #32
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e00f      	b.n	8006954 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00a      	beq.n	8006950 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	3b01      	subs	r3, #1
 800693e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800694a:	2b80      	cmp	r3, #128	@ 0x80
 800694c:	d0f2      	beq.n	8006934 <SPI_EndRxTxTransaction+0x78>
 800694e:	e000      	b.n	8006952 <SPI_EndRxTxTransaction+0x96>
        break;
 8006950:	bf00      	nop
  }

  return HAL_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3718      	adds	r7, #24
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	20000420 	.word	0x20000420
 8006960:	165e9f81 	.word	0x165e9f81

08006964 <memset>:
 8006964:	4402      	add	r2, r0
 8006966:	4603      	mov	r3, r0
 8006968:	4293      	cmp	r3, r2
 800696a:	d100      	bne.n	800696e <memset+0xa>
 800696c:	4770      	bx	lr
 800696e:	f803 1b01 	strb.w	r1, [r3], #1
 8006972:	e7f9      	b.n	8006968 <memset+0x4>

08006974 <__libc_init_array>:
 8006974:	b570      	push	{r4, r5, r6, lr}
 8006976:	4d0d      	ldr	r5, [pc, #52]	@ (80069ac <__libc_init_array+0x38>)
 8006978:	4c0d      	ldr	r4, [pc, #52]	@ (80069b0 <__libc_init_array+0x3c>)
 800697a:	1b64      	subs	r4, r4, r5
 800697c:	10a4      	asrs	r4, r4, #2
 800697e:	2600      	movs	r6, #0
 8006980:	42a6      	cmp	r6, r4
 8006982:	d109      	bne.n	8006998 <__libc_init_array+0x24>
 8006984:	4d0b      	ldr	r5, [pc, #44]	@ (80069b4 <__libc_init_array+0x40>)
 8006986:	4c0c      	ldr	r4, [pc, #48]	@ (80069b8 <__libc_init_array+0x44>)
 8006988:	f000 f818 	bl	80069bc <_init>
 800698c:	1b64      	subs	r4, r4, r5
 800698e:	10a4      	asrs	r4, r4, #2
 8006990:	2600      	movs	r6, #0
 8006992:	42a6      	cmp	r6, r4
 8006994:	d105      	bne.n	80069a2 <__libc_init_array+0x2e>
 8006996:	bd70      	pop	{r4, r5, r6, pc}
 8006998:	f855 3b04 	ldr.w	r3, [r5], #4
 800699c:	4798      	blx	r3
 800699e:	3601      	adds	r6, #1
 80069a0:	e7ee      	b.n	8006980 <__libc_init_array+0xc>
 80069a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80069a6:	4798      	blx	r3
 80069a8:	3601      	adds	r6, #1
 80069aa:	e7f2      	b.n	8006992 <__libc_init_array+0x1e>
 80069ac:	0800774c 	.word	0x0800774c
 80069b0:	0800774c 	.word	0x0800774c
 80069b4:	0800774c 	.word	0x0800774c
 80069b8:	08007750 	.word	0x08007750

080069bc <_init>:
 80069bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069be:	bf00      	nop
 80069c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069c2:	bc08      	pop	{r3}
 80069c4:	469e      	mov	lr, r3
 80069c6:	4770      	bx	lr

080069c8 <_fini>:
 80069c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ca:	bf00      	nop
 80069cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ce:	bc08      	pop	{r3}
 80069d0:	469e      	mov	lr, r3
 80069d2:	4770      	bx	lr
