
BMS Tester - Cell Emulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a618  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012ec  0800a7c8  0800a7c8  0000b7c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bab4  0800bab4  0000d7f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bab4  0800bab4  0000cab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800babc  0800babc  0000d7f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800babc  0800babc  0000cabc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bac0  0800bac0  0000cac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000007f0  20000000  0800bac4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d7f0  2**0
                  CONTENTS
 10 .bss          000009f4  200007f0  200007f0  0000d7f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200011e4  200011e4  0000d7f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d7f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004ee40  00000000  00000000  0000d820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000046a2  00000000  00000000  0005c660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003870  00000000  00000000  00060d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002a75  00000000  00000000  00064578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024243  00000000  00000000  00066fed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024c3b  00000000  00000000  0008b230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f1a74  00000000  00000000  000afe6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a18df  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000fc28  00000000  00000000  001a1924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  001b154c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200007f0 	.word	0x200007f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a7b0 	.word	0x0800a7b0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200007f4 	.word	0x200007f4
 80001ec:	0800a7b0 	.word	0x0800a7b0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_frsub>:
 8000acc:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ad0:	e002      	b.n	8000ad8 <__addsf3>
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_fsub>:
 8000ad4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ad8 <__addsf3>:
 8000ad8:	0042      	lsls	r2, r0, #1
 8000ada:	bf1f      	itttt	ne
 8000adc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ae0:	ea92 0f03 	teqne	r2, r3
 8000ae4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aec:	d06a      	beq.n	8000bc4 <__addsf3+0xec>
 8000aee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000af2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af6:	bfc1      	itttt	gt
 8000af8:	18d2      	addgt	r2, r2, r3
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	4048      	eorgt	r0, r1
 8000afe:	4041      	eorgt	r1, r0
 8000b00:	bfb8      	it	lt
 8000b02:	425b      	neglt	r3, r3
 8000b04:	2b19      	cmp	r3, #25
 8000b06:	bf88      	it	hi
 8000b08:	4770      	bxhi	lr
 8000b0a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b12:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b16:	bf18      	it	ne
 8000b18:	4240      	negne	r0, r0
 8000b1a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b1e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b22:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b26:	bf18      	it	ne
 8000b28:	4249      	negne	r1, r1
 8000b2a:	ea92 0f03 	teq	r2, r3
 8000b2e:	d03f      	beq.n	8000bb0 <__addsf3+0xd8>
 8000b30:	f1a2 0201 	sub.w	r2, r2, #1
 8000b34:	fa41 fc03 	asr.w	ip, r1, r3
 8000b38:	eb10 000c 	adds.w	r0, r0, ip
 8000b3c:	f1c3 0320 	rsb	r3, r3, #32
 8000b40:	fa01 f103 	lsl.w	r1, r1, r3
 8000b44:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b48:	d502      	bpl.n	8000b50 <__addsf3+0x78>
 8000b4a:	4249      	negs	r1, r1
 8000b4c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b50:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b54:	d313      	bcc.n	8000b7e <__addsf3+0xa6>
 8000b56:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b5a:	d306      	bcc.n	8000b6a <__addsf3+0x92>
 8000b5c:	0840      	lsrs	r0, r0, #1
 8000b5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b62:	f102 0201 	add.w	r2, r2, #1
 8000b66:	2afe      	cmp	r2, #254	@ 0xfe
 8000b68:	d251      	bcs.n	8000c0e <__addsf3+0x136>
 8000b6a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b72:	bf08      	it	eq
 8000b74:	f020 0001 	biceq.w	r0, r0, #1
 8000b78:	ea40 0003 	orr.w	r0, r0, r3
 8000b7c:	4770      	bx	lr
 8000b7e:	0049      	lsls	r1, r1, #1
 8000b80:	eb40 0000 	adc.w	r0, r0, r0
 8000b84:	3a01      	subs	r2, #1
 8000b86:	bf28      	it	cs
 8000b88:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b8c:	d2ed      	bcs.n	8000b6a <__addsf3+0x92>
 8000b8e:	fab0 fc80 	clz	ip, r0
 8000b92:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b96:	ebb2 020c 	subs.w	r2, r2, ip
 8000b9a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9e:	bfaa      	itet	ge
 8000ba0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba4:	4252      	neglt	r2, r2
 8000ba6:	4318      	orrge	r0, r3
 8000ba8:	bfbc      	itt	lt
 8000baa:	40d0      	lsrlt	r0, r2
 8000bac:	4318      	orrlt	r0, r3
 8000bae:	4770      	bx	lr
 8000bb0:	f092 0f00 	teq	r2, #0
 8000bb4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bb8:	bf06      	itte	eq
 8000bba:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bbe:	3201      	addeq	r2, #1
 8000bc0:	3b01      	subne	r3, #1
 8000bc2:	e7b5      	b.n	8000b30 <__addsf3+0x58>
 8000bc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bcc:	bf18      	it	ne
 8000bce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bd2:	d021      	beq.n	8000c18 <__addsf3+0x140>
 8000bd4:	ea92 0f03 	teq	r2, r3
 8000bd8:	d004      	beq.n	8000be4 <__addsf3+0x10c>
 8000bda:	f092 0f00 	teq	r2, #0
 8000bde:	bf08      	it	eq
 8000be0:	4608      	moveq	r0, r1
 8000be2:	4770      	bx	lr
 8000be4:	ea90 0f01 	teq	r0, r1
 8000be8:	bf1c      	itt	ne
 8000bea:	2000      	movne	r0, #0
 8000bec:	4770      	bxne	lr
 8000bee:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bf2:	d104      	bne.n	8000bfe <__addsf3+0x126>
 8000bf4:	0040      	lsls	r0, r0, #1
 8000bf6:	bf28      	it	cs
 8000bf8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bfc:	4770      	bx	lr
 8000bfe:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c02:	bf3c      	itt	cc
 8000c04:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c08:	4770      	bxcc	lr
 8000c0a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c0e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c16:	4770      	bx	lr
 8000c18:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c1c:	bf16      	itet	ne
 8000c1e:	4608      	movne	r0, r1
 8000c20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c24:	4601      	movne	r1, r0
 8000c26:	0242      	lsls	r2, r0, #9
 8000c28:	bf06      	itte	eq
 8000c2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2e:	ea90 0f01 	teqeq	r0, r1
 8000c32:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_ui2f>:
 8000c38:	f04f 0300 	mov.w	r3, #0
 8000c3c:	e004      	b.n	8000c48 <__aeabi_i2f+0x8>
 8000c3e:	bf00      	nop

08000c40 <__aeabi_i2f>:
 8000c40:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c44:	bf48      	it	mi
 8000c46:	4240      	negmi	r0, r0
 8000c48:	ea5f 0c00 	movs.w	ip, r0
 8000c4c:	bf08      	it	eq
 8000c4e:	4770      	bxeq	lr
 8000c50:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c54:	4601      	mov	r1, r0
 8000c56:	f04f 0000 	mov.w	r0, #0
 8000c5a:	e01c      	b.n	8000c96 <__aeabi_l2f+0x2a>

08000c5c <__aeabi_ul2f>:
 8000c5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c60:	bf08      	it	eq
 8000c62:	4770      	bxeq	lr
 8000c64:	f04f 0300 	mov.w	r3, #0
 8000c68:	e00a      	b.n	8000c80 <__aeabi_l2f+0x14>
 8000c6a:	bf00      	nop

08000c6c <__aeabi_l2f>:
 8000c6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c70:	bf08      	it	eq
 8000c72:	4770      	bxeq	lr
 8000c74:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c78:	d502      	bpl.n	8000c80 <__aeabi_l2f+0x14>
 8000c7a:	4240      	negs	r0, r0
 8000c7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c80:	ea5f 0c01 	movs.w	ip, r1
 8000c84:	bf02      	ittt	eq
 8000c86:	4684      	moveq	ip, r0
 8000c88:	4601      	moveq	r1, r0
 8000c8a:	2000      	moveq	r0, #0
 8000c8c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c90:	bf08      	it	eq
 8000c92:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c96:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c9a:	fabc f28c 	clz	r2, ip
 8000c9e:	3a08      	subs	r2, #8
 8000ca0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca4:	db10      	blt.n	8000cc8 <__aeabi_l2f+0x5c>
 8000ca6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000caa:	4463      	add	r3, ip
 8000cac:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cb0:	f1c2 0220 	rsb	r2, r2, #32
 8000cb4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cbc:	eb43 0002 	adc.w	r0, r3, r2
 8000cc0:	bf08      	it	eq
 8000cc2:	f020 0001 	biceq.w	r0, r0, #1
 8000cc6:	4770      	bx	lr
 8000cc8:	f102 0220 	add.w	r2, r2, #32
 8000ccc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b96a 	b.w	8000fd4 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f806 	bl	8000d18 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__udivmoddi4>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	9d08      	ldr	r5, [sp, #32]
 8000d1e:	460c      	mov	r4, r1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d14e      	bne.n	8000dc2 <__udivmoddi4+0xaa>
 8000d24:	4694      	mov	ip, r2
 8000d26:	458c      	cmp	ip, r1
 8000d28:	4686      	mov	lr, r0
 8000d2a:	fab2 f282 	clz	r2, r2
 8000d2e:	d962      	bls.n	8000df6 <__udivmoddi4+0xde>
 8000d30:	b14a      	cbz	r2, 8000d46 <__udivmoddi4+0x2e>
 8000d32:	f1c2 0320 	rsb	r3, r2, #32
 8000d36:	4091      	lsls	r1, r2
 8000d38:	fa20 f303 	lsr.w	r3, r0, r3
 8000d3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d40:	4319      	orrs	r1, r3
 8000d42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4a:	fa1f f68c 	uxth.w	r6, ip
 8000d4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d56:	fb07 1114 	mls	r1, r7, r4, r1
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb04 f106 	mul.w	r1, r4, r6
 8000d62:	4299      	cmp	r1, r3
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x64>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d6e:	f080 8112 	bcs.w	8000f96 <__udivmoddi4+0x27e>
 8000d72:	4299      	cmp	r1, r3
 8000d74:	f240 810f 	bls.w	8000f96 <__udivmoddi4+0x27e>
 8000d78:	3c02      	subs	r4, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	1a59      	subs	r1, r3, r1
 8000d7e:	fa1f f38e 	uxth.w	r3, lr
 8000d82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d86:	fb07 1110 	mls	r1, r7, r0, r1
 8000d8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8e:	fb00 f606 	mul.w	r6, r0, r6
 8000d92:	429e      	cmp	r6, r3
 8000d94:	d90a      	bls.n	8000dac <__udivmoddi4+0x94>
 8000d96:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d9e:	f080 80fc 	bcs.w	8000f9a <__udivmoddi4+0x282>
 8000da2:	429e      	cmp	r6, r3
 8000da4:	f240 80f9 	bls.w	8000f9a <__udivmoddi4+0x282>
 8000da8:	4463      	add	r3, ip
 8000daa:	3802      	subs	r0, #2
 8000dac:	1b9b      	subs	r3, r3, r6
 8000dae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000db2:	2100      	movs	r1, #0
 8000db4:	b11d      	cbz	r5, 8000dbe <__udivmoddi4+0xa6>
 8000db6:	40d3      	lsrs	r3, r2
 8000db8:	2200      	movs	r2, #0
 8000dba:	e9c5 3200 	strd	r3, r2, [r5]
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d905      	bls.n	8000dd2 <__udivmoddi4+0xba>
 8000dc6:	b10d      	cbz	r5, 8000dcc <__udivmoddi4+0xb4>
 8000dc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4608      	mov	r0, r1
 8000dd0:	e7f5      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000dd2:	fab3 f183 	clz	r1, r3
 8000dd6:	2900      	cmp	r1, #0
 8000dd8:	d146      	bne.n	8000e68 <__udivmoddi4+0x150>
 8000dda:	42a3      	cmp	r3, r4
 8000ddc:	d302      	bcc.n	8000de4 <__udivmoddi4+0xcc>
 8000dde:	4290      	cmp	r0, r2
 8000de0:	f0c0 80f0 	bcc.w	8000fc4 <__udivmoddi4+0x2ac>
 8000de4:	1a86      	subs	r6, r0, r2
 8000de6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dea:	2001      	movs	r0, #1
 8000dec:	2d00      	cmp	r5, #0
 8000dee:	d0e6      	beq.n	8000dbe <__udivmoddi4+0xa6>
 8000df0:	e9c5 6300 	strd	r6, r3, [r5]
 8000df4:	e7e3      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000df6:	2a00      	cmp	r2, #0
 8000df8:	f040 8090 	bne.w	8000f1c <__udivmoddi4+0x204>
 8000dfc:	eba1 040c 	sub.w	r4, r1, ip
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa1f f78c 	uxth.w	r7, ip
 8000e08:	2101      	movs	r1, #1
 8000e0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e12:	fb08 4416 	mls	r4, r8, r6, r4
 8000e16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e1a:	fb07 f006 	mul.w	r0, r7, r6
 8000e1e:	4298      	cmp	r0, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x11c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x11a>
 8000e2c:	4298      	cmp	r0, r3
 8000e2e:	f200 80cd 	bhi.w	8000fcc <__udivmoddi4+0x2b4>
 8000e32:	4626      	mov	r6, r4
 8000e34:	1a1c      	subs	r4, r3, r0
 8000e36:	fa1f f38e 	uxth.w	r3, lr
 8000e3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb00 f707 	mul.w	r7, r0, r7
 8000e4a:	429f      	cmp	r7, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x148>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x146>
 8000e58:	429f      	cmp	r7, r3
 8000e5a:	f200 80b0 	bhi.w	8000fbe <__udivmoddi4+0x2a6>
 8000e5e:	4620      	mov	r0, r4
 8000e60:	1bdb      	subs	r3, r3, r7
 8000e62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e66:	e7a5      	b.n	8000db4 <__udivmoddi4+0x9c>
 8000e68:	f1c1 0620 	rsb	r6, r1, #32
 8000e6c:	408b      	lsls	r3, r1
 8000e6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e72:	431f      	orrs	r7, r3
 8000e74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e78:	fa04 f301 	lsl.w	r3, r4, r1
 8000e7c:	ea43 030c 	orr.w	r3, r3, ip
 8000e80:	40f4      	lsrs	r4, r6
 8000e82:	fa00 f801 	lsl.w	r8, r0, r1
 8000e86:	0c38      	lsrs	r0, r7, #16
 8000e88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e90:	fa1f fc87 	uxth.w	ip, r7
 8000e94:	fb00 441e 	mls	r4, r0, lr, r4
 8000e98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000ea0:	45a1      	cmp	r9, r4
 8000ea2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ea6:	d90a      	bls.n	8000ebe <__udivmoddi4+0x1a6>
 8000ea8:	193c      	adds	r4, r7, r4
 8000eaa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eae:	f080 8084 	bcs.w	8000fba <__udivmoddi4+0x2a2>
 8000eb2:	45a1      	cmp	r9, r4
 8000eb4:	f240 8081 	bls.w	8000fba <__udivmoddi4+0x2a2>
 8000eb8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ebc:	443c      	add	r4, r7
 8000ebe:	eba4 0409 	sub.w	r4, r4, r9
 8000ec2:	fa1f f983 	uxth.w	r9, r3
 8000ec6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eca:	fb00 4413 	mls	r4, r0, r3, r4
 8000ece:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ed6:	45a4      	cmp	ip, r4
 8000ed8:	d907      	bls.n	8000eea <__udivmoddi4+0x1d2>
 8000eda:	193c      	adds	r4, r7, r4
 8000edc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ee0:	d267      	bcs.n	8000fb2 <__udivmoddi4+0x29a>
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d965      	bls.n	8000fb2 <__udivmoddi4+0x29a>
 8000ee6:	3b02      	subs	r3, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eee:	fba0 9302 	umull	r9, r3, r0, r2
 8000ef2:	eba4 040c 	sub.w	r4, r4, ip
 8000ef6:	429c      	cmp	r4, r3
 8000ef8:	46ce      	mov	lr, r9
 8000efa:	469c      	mov	ip, r3
 8000efc:	d351      	bcc.n	8000fa2 <__udivmoddi4+0x28a>
 8000efe:	d04e      	beq.n	8000f9e <__udivmoddi4+0x286>
 8000f00:	b155      	cbz	r5, 8000f18 <__udivmoddi4+0x200>
 8000f02:	ebb8 030e 	subs.w	r3, r8, lr
 8000f06:	eb64 040c 	sbc.w	r4, r4, ip
 8000f0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f0e:	40cb      	lsrs	r3, r1
 8000f10:	431e      	orrs	r6, r3
 8000f12:	40cc      	lsrs	r4, r1
 8000f14:	e9c5 6400 	strd	r6, r4, [r5]
 8000f18:	2100      	movs	r1, #0
 8000f1a:	e750      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000f1c:	f1c2 0320 	rsb	r3, r2, #32
 8000f20:	fa20 f103 	lsr.w	r1, r0, r3
 8000f24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f28:	fa24 f303 	lsr.w	r3, r4, r3
 8000f2c:	4094      	lsls	r4, r2
 8000f2e:	430c      	orrs	r4, r1
 8000f30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f38:	fa1f f78c 	uxth.w	r7, ip
 8000f3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f40:	fb08 3110 	mls	r1, r8, r0, r3
 8000f44:	0c23      	lsrs	r3, r4, #16
 8000f46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f4a:	fb00 f107 	mul.w	r1, r0, r7
 8000f4e:	4299      	cmp	r1, r3
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x24c>
 8000f52:	eb1c 0303 	adds.w	r3, ip, r3
 8000f56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f5a:	d22c      	bcs.n	8000fb6 <__udivmoddi4+0x29e>
 8000f5c:	4299      	cmp	r1, r3
 8000f5e:	d92a      	bls.n	8000fb6 <__udivmoddi4+0x29e>
 8000f60:	3802      	subs	r0, #2
 8000f62:	4463      	add	r3, ip
 8000f64:	1a5b      	subs	r3, r3, r1
 8000f66:	b2a4      	uxth	r4, r4
 8000f68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f74:	fb01 f307 	mul.w	r3, r1, r7
 8000f78:	42a3      	cmp	r3, r4
 8000f7a:	d908      	bls.n	8000f8e <__udivmoddi4+0x276>
 8000f7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f84:	d213      	bcs.n	8000fae <__udivmoddi4+0x296>
 8000f86:	42a3      	cmp	r3, r4
 8000f88:	d911      	bls.n	8000fae <__udivmoddi4+0x296>
 8000f8a:	3902      	subs	r1, #2
 8000f8c:	4464      	add	r4, ip
 8000f8e:	1ae4      	subs	r4, r4, r3
 8000f90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f94:	e739      	b.n	8000e0a <__udivmoddi4+0xf2>
 8000f96:	4604      	mov	r4, r0
 8000f98:	e6f0      	b.n	8000d7c <__udivmoddi4+0x64>
 8000f9a:	4608      	mov	r0, r1
 8000f9c:	e706      	b.n	8000dac <__udivmoddi4+0x94>
 8000f9e:	45c8      	cmp	r8, r9
 8000fa0:	d2ae      	bcs.n	8000f00 <__udivmoddi4+0x1e8>
 8000fa2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fa6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000faa:	3801      	subs	r0, #1
 8000fac:	e7a8      	b.n	8000f00 <__udivmoddi4+0x1e8>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	e7ed      	b.n	8000f8e <__udivmoddi4+0x276>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	e799      	b.n	8000eea <__udivmoddi4+0x1d2>
 8000fb6:	4630      	mov	r0, r6
 8000fb8:	e7d4      	b.n	8000f64 <__udivmoddi4+0x24c>
 8000fba:	46d6      	mov	lr, sl
 8000fbc:	e77f      	b.n	8000ebe <__udivmoddi4+0x1a6>
 8000fbe:	4463      	add	r3, ip
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	e74d      	b.n	8000e60 <__udivmoddi4+0x148>
 8000fc4:	4606      	mov	r6, r0
 8000fc6:	4623      	mov	r3, r4
 8000fc8:	4608      	mov	r0, r1
 8000fca:	e70f      	b.n	8000dec <__udivmoddi4+0xd4>
 8000fcc:	3e02      	subs	r6, #2
 8000fce:	4463      	add	r3, ip
 8000fd0:	e730      	b.n	8000e34 <__udivmoddi4+0x11c>
 8000fd2:	bf00      	nop

08000fd4 <__aeabi_idiv0>:
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af02      	add	r7, sp, #8
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	817b      	strh	r3, [r7, #10]
 8000fea:	460b      	mov	r3, r1
 8000fec:	813b      	strh	r3, [r7, #8]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8000ff8:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8000ffa:	7dbb      	ldrb	r3, [r7, #22]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	bf0c      	ite	eq
 8001000:	2301      	moveq	r3, #1
 8001002:	2300      	movne	r3, #0
 8001004:	b2db      	uxtb	r3, r3
 8001006:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8001008:	897a      	ldrh	r2, [r7, #10]
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	4413      	add	r3, r2
 800100e:	b298      	uxth	r0, r3
 8001010:	893b      	ldrh	r3, [r7, #8]
 8001012:	3301      	adds	r3, #1
 8001014:	b29b      	uxth	r3, r3
 8001016:	893a      	ldrh	r2, [r7, #8]
 8001018:	8979      	ldrh	r1, [r7, #10]
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	4603      	mov	r3, r0
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	f001 f883 	bl	800212a <u8g2_IsIntersection>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d040      	beq.n	80010ac <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 800102a:	2301      	movs	r3, #1
 800102c:	75fb      	strb	r3, [r7, #23]
  while(len > 0) {
 800102e:	e035      	b.n	800109c <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 8001030:	6a3b      	ldr	r3, [r7, #32]
 8001032:	781a      	ldrb	r2, [r3, #0]
 8001034:	7dfb      	ldrb	r3, [r7, #23]
 8001036:	4013      	ands	r3, r2
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	d00c      	beq.n	8001058 <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	7dba      	ldrb	r2, [r7, #22]
 8001042:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001046:	893a      	ldrh	r2, [r7, #8]
 8001048:	8979      	ldrh	r1, [r7, #10]
 800104a:	2300      	movs	r3, #0
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	2301      	movs	r3, #1
 8001050:	68f8      	ldr	r0, [r7, #12]
 8001052:	f000 ffac 	bl	8001fae <u8g2_DrawHVLine>
 8001056:	e010      	b.n	800107a <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800105e:	2b00      	cmp	r3, #0
 8001060:	d10b      	bne.n	800107a <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	7d7a      	ldrb	r2, [r7, #21]
 8001066:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800106a:	893a      	ldrh	r2, [r7, #8]
 800106c:	8979      	ldrh	r1, [r7, #10]
 800106e:	2300      	movs	r3, #0
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2301      	movs	r3, #1
 8001074:	68f8      	ldr	r0, [r7, #12]
 8001076:	f000 ff9a 	bl	8001fae <u8g2_DrawHVLine>
    }
    x++;
 800107a:	897b      	ldrh	r3, [r7, #10]
 800107c:	3301      	adds	r3, #1
 800107e:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 8001080:	7dfb      	ldrb	r3, [r7, #23]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 8001086:	7dfb      	ldrb	r3, [r7, #23]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d104      	bne.n	8001096 <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 800108c:	2301      	movs	r3, #1
 800108e:	75fb      	strb	r3, [r7, #23]
      b++;
 8001090:	6a3b      	ldr	r3, [r7, #32]
 8001092:	3301      	adds	r3, #1
 8001094:	623b      	str	r3, [r7, #32]
    }
    len--;
 8001096:	88fb      	ldrh	r3, [r7, #6]
 8001098:	3b01      	subs	r3, #1
 800109a:	80fb      	strh	r3, [r7, #6]
  while(len > 0) {
 800109c:	88fb      	ldrh	r3, [r7, #6]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1c6      	bne.n	8001030 <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	7dba      	ldrb	r2, [r7, #22]
 80010a6:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
 80010aa:	e000      	b.n	80010ae <u8g2_DrawHXBM+0xd6>
    return;
 80010ac:	bf00      	nop
}
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af02      	add	r7, sp, #8
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	4608      	mov	r0, r1
 80010be:	4611      	mov	r1, r2
 80010c0:	461a      	mov	r2, r3
 80010c2:	4603      	mov	r3, r0
 80010c4:	817b      	strh	r3, [r7, #10]
 80010c6:	460b      	mov	r3, r1
 80010c8:	813b      	strh	r3, [r7, #8]
 80010ca:	4613      	mov	r3, r2
 80010cc:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 80010ce:	88fb      	ldrh	r3, [r7, #6]
 80010d0:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 80010d2:	8afb      	ldrh	r3, [r7, #22]
 80010d4:	3307      	adds	r3, #7
 80010d6:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 80010d8:	8afb      	ldrh	r3, [r7, #22]
 80010da:	08db      	lsrs	r3, r3, #3
 80010dc:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80010de:	897a      	ldrh	r2, [r7, #10]
 80010e0:	88fb      	ldrh	r3, [r7, #6]
 80010e2:	4413      	add	r3, r2
 80010e4:	b298      	uxth	r0, r3
 80010e6:	893a      	ldrh	r2, [r7, #8]
 80010e8:	8c3b      	ldrh	r3, [r7, #32]
 80010ea:	4413      	add	r3, r2
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	893a      	ldrh	r2, [r7, #8]
 80010f0:	8979      	ldrh	r1, [r7, #10]
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	4603      	mov	r3, r0
 80010f6:	68f8      	ldr	r0, [r7, #12]
 80010f8:	f001 f817 	bl	800212a <u8g2_IsIntersection>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d017      	beq.n	8001132 <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8001102:	e012      	b.n	800112a <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8001104:	88f8      	ldrh	r0, [r7, #6]
 8001106:	893a      	ldrh	r2, [r7, #8]
 8001108:	8979      	ldrh	r1, [r7, #10]
 800110a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	4603      	mov	r3, r0
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	f7ff ff61 	bl	8000fd8 <u8g2_DrawHXBM>
    bitmap += blen;
 8001116:	8afb      	ldrh	r3, [r7, #22]
 8001118:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800111a:	4413      	add	r3, r2
 800111c:	627b      	str	r3, [r7, #36]	@ 0x24
    y++;
 800111e:	893b      	ldrh	r3, [r7, #8]
 8001120:	3301      	adds	r3, #1
 8001122:	813b      	strh	r3, [r7, #8]
    h--;
 8001124:	8c3b      	ldrh	r3, [r7, #32]
 8001126:	3b01      	subs	r3, #1
 8001128:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 800112a:	8c3b      	ldrh	r3, [r7, #32]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1e9      	bne.n	8001104 <u8g2_DrawXBM+0x50>
 8001130:	e000      	b.n	8001134 <u8g2_DrawXBM+0x80>
    return;
 8001132:	bf00      	nop
  }
}
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b084      	sub	sp, #16
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	7c1b      	ldrb	r3, [r3, #16]
 8001148:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001150:	461a      	mov	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	fb02 f303 	mul.w	r3, r2, r3
 8001158:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f008 ff4f 	bl	800a00c <memset>
}
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b086      	sub	sp, #24
 800117a:	af02      	add	r7, sp, #8
 800117c:	6078      	str	r0, [r7, #4]
 800117e:	460b      	mov	r3, r1
 8001180:	70fb      	strb	r3, [r7, #3]
 8001182:	4613      	mov	r3, r2
 8001184:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	7c1b      	ldrb	r3, [r3, #16]
 800118c:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 800118e:	78fb      	ldrb	r3, [r7, #3]
 8001190:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001196:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	b29b      	uxth	r3, r3
 800119c:	89ba      	ldrh	r2, [r7, #12]
 800119e:	fb12 f303 	smulbb	r3, r2, r3
 80011a2:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 80011a4:	89bb      	ldrh	r3, [r7, #12]
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80011aa:	89bb      	ldrh	r3, [r7, #12]
 80011ac:	68ba      	ldr	r2, [r7, #8]
 80011ae:	4413      	add	r3, r2
 80011b0:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80011b2:	7bf9      	ldrb	r1, [r7, #15]
 80011b4:	78ba      	ldrb	r2, [r7, #2]
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	460b      	mov	r3, r1
 80011bc:	2100      	movs	r1, #0
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f001 fc99 	bl	8002af6 <u8x8_DrawTile>
}
 80011c4:	bf00      	nop
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80011de:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80011e6:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	7c5b      	ldrb	r3, [r3, #17]
 80011ee:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80011f0:	7bba      	ldrb	r2, [r7, #14]
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	4619      	mov	r1, r3
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ffbd 	bl	8001176 <u8g2_send_tile_row>
    src_row++;
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	3301      	adds	r3, #1
 8001200:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8001202:	7bbb      	ldrb	r3, [r7, #14]
 8001204:	3301      	adds	r3, #1
 8001206:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8001208:	7bfa      	ldrb	r2, [r7, #15]
 800120a:	7b7b      	ldrb	r3, [r7, #13]
 800120c:	429a      	cmp	r2, r3
 800120e:	d203      	bcs.n	8001218 <u8g2_send_buffer+0x4c>
 8001210:	7bba      	ldrb	r2, [r7, #14]
 8001212:	7b3b      	ldrb	r3, [r7, #12]
 8001214:	429a      	cmp	r2, r3
 8001216:	d3eb      	bcc.n	80011f0 <u8g2_send_buffer+0x24>
}
 8001218:	bf00      	nop
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ffcf 	bl	80011cc <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f001 fcc3 	bl	8002bba <u8x8_RefreshDisplay>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	78fa      	ldrb	r2, [r7, #3]
 800124c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  u8g2->cb->update_dimension(u8g2);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	4798      	blx	r3
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800127a:	2b00      	cmp	r3, #0
 800127c:	d002      	beq.n	8001284 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff ff5b 	bl	800113a <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8001284:	2100      	movs	r1, #0
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff ffd8 	bl	800123c <u8g2_SetBufferCurrTileRow>
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff ff95 	bl	80011cc <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80012a8:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	4413      	add	r3, r2
 80012b4:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	7c5b      	ldrb	r3, [r3, #17]
 80012bc:	7bfa      	ldrb	r2, [r7, #15]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d304      	bcc.n	80012cc <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f001 fc79 	bl	8002bba <u8x8_RefreshDisplay>
    return 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	e00d      	b.n	80012e8 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d002      	beq.n	80012dc <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ff2f 	bl	800113a <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	4619      	mov	r1, r3
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ffab 	bl	800123c <u8g2_SetBufferCurrTileRow>
  return 1;
 80012e6:	2301      	movs	r3, #1
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ffb7 	bl	800126c <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ffc8 	bl	8001294 <u8g2_NextPage>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f9      	bne.n	80012fe <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 800130a:	2100      	movs	r1, #0
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff ff95 	bl	800123c <u8g2_SetBufferCurrTileRow>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2208      	movs	r2, #8
 8001328:	701a      	strb	r2, [r3, #0]
  return buf;
 800132a:	4b03      	ldr	r3, [pc, #12]	@ (8001338 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 800132c:	4618      	mov	r0, r3
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	2000080c 	.word	0x2000080c

0800133c <u8g2_Setup_st7565_64128n_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_lm6063, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_64128n_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af02      	add	r7, sp, #8
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
 8001348:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_64128n, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a0b      	ldr	r2, [pc, #44]	@ (8001380 <u8g2_Setup_st7565_64128n_f+0x44>)
 8001352:	490c      	ldr	r1, [pc, #48]	@ (8001384 <u8g2_Setup_st7565_64128n_f+0x48>)
 8001354:	68f8      	ldr	r0, [r7, #12]
 8001356:	f001 fc91 	bl	8002c7c <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 800135a:	f107 0313 	add.w	r3, r7, #19
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff ffdc 	bl	800131c <u8g2_m_16_8_f>
 8001364:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8001366:	7cfa      	ldrb	r2, [r7, #19]
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <u8g2_Setup_st7565_64128n_f+0x4c>)
 800136e:	6979      	ldr	r1, [r7, #20]
 8001370:	68f8      	ldr	r0, [r7, #12]
 8001372:	f000 ffc4 	bl	80022fe <u8g2_SetupBuffer>
}
 8001376:	bf00      	nop
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	08002811 	.word	0x08002811
 8001384:	080029b1 	.word	0x080029b1
 8001388:	08002181 	.word	0x08002181

0800138c <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8001398:	78fb      	ldrb	r3, [r7, #3]
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	4413      	add	r3, r2
 800139e:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	781b      	ldrb	r3, [r3, #0]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 80013bc:	78fb      	ldrb	r3, [r7, #3]
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	81fb      	strh	r3, [r7, #14]
    font++;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3301      	adds	r3, #1
 80013ce:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80013d0:	89fb      	ldrh	r3, [r7, #14]
 80013d2:	021b      	lsls	r3, r3, #8
 80013d4:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	461a      	mov	r2, r3
 80013dc:	89fb      	ldrh	r3, [r7, #14]
 80013de:	4413      	add	r3, r2
 80013e0:	81fb      	strh	r3, [r7, #14]
    return pos;
 80013e2:	89fb      	ldrh	r3, [r7, #14]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80013fa:	2100      	movs	r1, #0
 80013fc:	6838      	ldr	r0, [r7, #0]
 80013fe:	f7ff ffc5 	bl	800138c <u8g2_font_get_byte>
 8001402:	4603      	mov	r3, r0
 8001404:	461a      	mov	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800140a:	2101      	movs	r1, #1
 800140c:	6838      	ldr	r0, [r7, #0]
 800140e:	f7ff ffbd 	bl	800138c <u8g2_font_get_byte>
 8001412:	4603      	mov	r3, r0
 8001414:	461a      	mov	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 800141a:	2102      	movs	r1, #2
 800141c:	6838      	ldr	r0, [r7, #0]
 800141e:	f7ff ffb5 	bl	800138c <u8g2_font_get_byte>
 8001422:	4603      	mov	r3, r0
 8001424:	461a      	mov	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800142a:	2103      	movs	r1, #3
 800142c:	6838      	ldr	r0, [r7, #0]
 800142e:	f7ff ffad 	bl	800138c <u8g2_font_get_byte>
 8001432:	4603      	mov	r3, r0
 8001434:	461a      	mov	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800143a:	2104      	movs	r1, #4
 800143c:	6838      	ldr	r0, [r7, #0]
 800143e:	f7ff ffa5 	bl	800138c <u8g2_font_get_byte>
 8001442:	4603      	mov	r3, r0
 8001444:	461a      	mov	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800144a:	2105      	movs	r1, #5
 800144c:	6838      	ldr	r0, [r7, #0]
 800144e:	f7ff ff9d 	bl	800138c <u8g2_font_get_byte>
 8001452:	4603      	mov	r3, r0
 8001454:	461a      	mov	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800145a:	2106      	movs	r1, #6
 800145c:	6838      	ldr	r0, [r7, #0]
 800145e:	f7ff ff95 	bl	800138c <u8g2_font_get_byte>
 8001462:	4603      	mov	r3, r0
 8001464:	461a      	mov	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800146a:	2107      	movs	r1, #7
 800146c:	6838      	ldr	r0, [r7, #0]
 800146e:	f7ff ff8d 	bl	800138c <u8g2_font_get_byte>
 8001472:	4603      	mov	r3, r0
 8001474:	461a      	mov	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800147a:	2108      	movs	r1, #8
 800147c:	6838      	ldr	r0, [r7, #0]
 800147e:	f7ff ff85 	bl	800138c <u8g2_font_get_byte>
 8001482:	4603      	mov	r3, r0
 8001484:	461a      	mov	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800148a:	2109      	movs	r1, #9
 800148c:	6838      	ldr	r0, [r7, #0]
 800148e:	f7ff ff7d 	bl	800138c <u8g2_font_get_byte>
 8001492:	4603      	mov	r3, r0
 8001494:	b25a      	sxtb	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800149a:	210a      	movs	r1, #10
 800149c:	6838      	ldr	r0, [r7, #0]
 800149e:	f7ff ff75 	bl	800138c <u8g2_font_get_byte>
 80014a2:	4603      	mov	r3, r0
 80014a4:	b25a      	sxtb	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80014aa:	210b      	movs	r1, #11
 80014ac:	6838      	ldr	r0, [r7, #0]
 80014ae:	f7ff ff6d 	bl	800138c <u8g2_font_get_byte>
 80014b2:	4603      	mov	r3, r0
 80014b4:	b25a      	sxtb	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80014ba:	210c      	movs	r1, #12
 80014bc:	6838      	ldr	r0, [r7, #0]
 80014be:	f7ff ff65 	bl	800138c <u8g2_font_get_byte>
 80014c2:	4603      	mov	r3, r0
 80014c4:	b25a      	sxtb	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80014ca:	210d      	movs	r1, #13
 80014cc:	6838      	ldr	r0, [r7, #0]
 80014ce:	f7ff ff5d 	bl	800138c <u8g2_font_get_byte>
 80014d2:	4603      	mov	r3, r0
 80014d4:	b25a      	sxtb	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80014da:	210e      	movs	r1, #14
 80014dc:	6838      	ldr	r0, [r7, #0]
 80014de:	f7ff ff55 	bl	800138c <u8g2_font_get_byte>
 80014e2:	4603      	mov	r3, r0
 80014e4:	b25a      	sxtb	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80014ea:	210f      	movs	r1, #15
 80014ec:	6838      	ldr	r0, [r7, #0]
 80014ee:	f7ff ff4d 	bl	800138c <u8g2_font_get_byte>
 80014f2:	4603      	mov	r3, r0
 80014f4:	b25a      	sxtb	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80014fa:	2110      	movs	r1, #16
 80014fc:	6838      	ldr	r0, [r7, #0]
 80014fe:	f7ff ff45 	bl	800138c <u8g2_font_get_byte>
 8001502:	4603      	mov	r3, r0
 8001504:	b25a      	sxtb	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800150a:	2111      	movs	r1, #17
 800150c:	6838      	ldr	r0, [r7, #0]
 800150e:	f7ff ff4f 	bl	80013b0 <u8g2_font_get_word>
 8001512:	4603      	mov	r3, r0
 8001514:	461a      	mov	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800151a:	2113      	movs	r1, #19
 800151c:	6838      	ldr	r0, [r7, #0]
 800151e:	f7ff ff47 	bl	80013b0 <u8g2_font_get_word>
 8001522:	4603      	mov	r3, r0
 8001524:	461a      	mov	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800152a:	2115      	movs	r1, #21
 800152c:	6838      	ldr	r0, [r7, #0]
 800152e:	f7ff ff3f 	bl	80013b0 <u8g2_font_get_word>
 8001532:	4603      	mov	r3, r0
 8001534:	461a      	mov	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	82da      	strh	r2, [r3, #22]
#endif
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8001542:	b480      	push	{r7}
 8001544:	b085      	sub	sp, #20
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
 800154a:	460b      	mov	r3, r1
 800154c:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	7b1b      	ldrb	r3, [r3, #12]
 8001552:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 800155c:	7bfa      	ldrb	r2, [r7, #15]
 800155e:	7b7b      	ldrb	r3, [r7, #13]
 8001560:	fa42 f303 	asr.w	r3, r2, r3
 8001564:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8001566:	7b7b      	ldrb	r3, [r7, #13]
 8001568:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800156a:	7bba      	ldrb	r2, [r7, #14]
 800156c:	78fb      	ldrb	r3, [r7, #3]
 800156e:	4413      	add	r3, r2
 8001570:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8001572:	7bbb      	ldrb	r3, [r7, #14]
 8001574:	2b07      	cmp	r3, #7
 8001576:	d91a      	bls.n	80015ae <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8001578:	2308      	movs	r3, #8
 800157a:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 800157c:	7b3a      	ldrb	r2, [r7, #12]
 800157e:	7b7b      	ldrb	r3, [r7, #13]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	1c5a      	adds	r2, r3, #1
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	461a      	mov	r2, r3
 8001596:	7b3b      	ldrb	r3, [r7, #12]
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	b25a      	sxtb	r2, r3
 800159e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	b25b      	sxtb	r3, r3
 80015a6:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 80015a8:	7bbb      	ldrb	r3, [r7, #14]
 80015aa:	3b08      	subs	r3, #8
 80015ac:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 80015ae:	78fb      	ldrb	r3, [r7, #3]
 80015b0:	f04f 32ff 	mov.w	r2, #4294967295
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	4013      	ands	r3, r2
 80015c2:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	7bba      	ldrb	r2, [r7, #14]
 80015c8:	731a      	strb	r2, [r3, #12]
  return val;
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	4619      	mov	r1, r3
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff ffaa 	bl	8001542 <u8g2_font_decode_get_unsigned_bits>
 80015ee:	4603      	mov	r3, r0
 80015f0:	73fb      	strb	r3, [r7, #15]
  d = 1;
 80015f2:	2301      	movs	r3, #1
 80015f4:	73bb      	strb	r3, [r7, #14]
  cnt--;
 80015f6:	78fb      	ldrb	r3, [r7, #3]
 80015f8:	3b01      	subs	r3, #1
 80015fa:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 80015fc:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001600:	78fb      	ldrb	r3, [r7, #3]
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8001608:	7bfa      	ldrb	r2, [r7, #15]
 800160a:	7bbb      	ldrb	r3, [r7, #14]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	b2db      	uxtb	r3, r3
 8001610:	73fb      	strb	r3, [r7, #15]
  return v;
 8001612:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 800161e:	b490      	push	{r4, r7}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	4604      	mov	r4, r0
 8001626:	4608      	mov	r0, r1
 8001628:	4611      	mov	r1, r2
 800162a:	461a      	mov	r2, r3
 800162c:	4623      	mov	r3, r4
 800162e:	80fb      	strh	r3, [r7, #6]
 8001630:	4603      	mov	r3, r0
 8001632:	717b      	strb	r3, [r7, #5]
 8001634:	460b      	mov	r3, r1
 8001636:	713b      	strb	r3, [r7, #4]
 8001638:	4613      	mov	r3, r2
 800163a:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 800163c:	78fb      	ldrb	r3, [r7, #3]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d014      	beq.n	800166c <u8g2_add_vector_y+0x4e>
 8001642:	2b02      	cmp	r3, #2
 8001644:	dc19      	bgt.n	800167a <u8g2_add_vector_y+0x5c>
 8001646:	2b00      	cmp	r3, #0
 8001648:	d002      	beq.n	8001650 <u8g2_add_vector_y+0x32>
 800164a:	2b01      	cmp	r3, #1
 800164c:	d007      	beq.n	800165e <u8g2_add_vector_y+0x40>
 800164e:	e014      	b.n	800167a <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8001650:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001654:	b29a      	uxth	r2, r3
 8001656:	88fb      	ldrh	r3, [r7, #6]
 8001658:	4413      	add	r3, r2
 800165a:	80fb      	strh	r3, [r7, #6]
      break;
 800165c:	e014      	b.n	8001688 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 800165e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001662:	b29a      	uxth	r2, r3
 8001664:	88fb      	ldrh	r3, [r7, #6]
 8001666:	4413      	add	r3, r2
 8001668:	80fb      	strh	r3, [r7, #6]
      break;
 800166a:	e00d      	b.n	8001688 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 800166c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001670:	b29b      	uxth	r3, r3
 8001672:	88fa      	ldrh	r2, [r7, #6]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	80fb      	strh	r3, [r7, #6]
      break;
 8001678:	e006      	b.n	8001688 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 800167a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800167e:	b29b      	uxth	r3, r3
 8001680:	88fa      	ldrh	r2, [r7, #6]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	80fb      	strh	r3, [r7, #6]
      break;      
 8001686:	bf00      	nop
  }
  return dy;
 8001688:	88fb      	ldrh	r3, [r7, #6]
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bc90      	pop	{r4, r7}
 8001692:	4770      	bx	lr

08001694 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8001694:	b490      	push	{r4, r7}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	4604      	mov	r4, r0
 800169c:	4608      	mov	r0, r1
 800169e:	4611      	mov	r1, r2
 80016a0:	461a      	mov	r2, r3
 80016a2:	4623      	mov	r3, r4
 80016a4:	80fb      	strh	r3, [r7, #6]
 80016a6:	4603      	mov	r3, r0
 80016a8:	717b      	strb	r3, [r7, #5]
 80016aa:	460b      	mov	r3, r1
 80016ac:	713b      	strb	r3, [r7, #4]
 80016ae:	4613      	mov	r3, r2
 80016b0:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80016b2:	78fb      	ldrb	r3, [r7, #3]
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d014      	beq.n	80016e2 <u8g2_add_vector_x+0x4e>
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	dc19      	bgt.n	80016f0 <u8g2_add_vector_x+0x5c>
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d002      	beq.n	80016c6 <u8g2_add_vector_x+0x32>
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d007      	beq.n	80016d4 <u8g2_add_vector_x+0x40>
 80016c4:	e014      	b.n	80016f0 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 80016c6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	4413      	add	r3, r2
 80016d0:	80fb      	strh	r3, [r7, #6]
      break;
 80016d2:	e014      	b.n	80016fe <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 80016d4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80016d8:	b29b      	uxth	r3, r3
 80016da:	88fa      	ldrh	r2, [r7, #6]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	80fb      	strh	r3, [r7, #6]
      break;
 80016e0:	e00d      	b.n	80016fe <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 80016e2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	88fa      	ldrh	r2, [r7, #6]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	80fb      	strh	r3, [r7, #6]
      break;
 80016ee:	e006      	b.n	80016fe <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 80016f0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	88fb      	ldrh	r3, [r7, #6]
 80016f8:	4413      	add	r3, r2
 80016fa:	80fb      	strh	r3, [r7, #6]
      break;      
 80016fc:	bf00      	nop
  }
  return dx;
 80016fe:	88fb      	ldrh	r3, [r7, #6]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bc90      	pop	{r4, r7}
 8001708:	4770      	bx	lr

0800170a <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b088      	sub	sp, #32
 800170e:	af02      	add	r7, sp, #8
 8001710:	6078      	str	r0, [r7, #4]
 8001712:	460b      	mov	r3, r1
 8001714:	70fb      	strb	r3, [r7, #3]
 8001716:	4613      	mov	r3, r2
 8001718:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3360      	adds	r3, #96	@ 0x60
 800171e:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8001720:	78fb      	ldrb	r3, [r7, #3]
 8001722:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800172a:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001732:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800173a:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 800173c:	7bfa      	ldrb	r2, [r7, #15]
 800173e:	7d7b      	ldrb	r3, [r7, #21]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8001748:	7dfa      	ldrb	r2, [r7, #23]
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	429a      	cmp	r2, r3
 800174e:	d201      	bcs.n	8001754 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8001750:	7dfb      	ldrb	r3, [r7, #23]
 8001752:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	889b      	ldrh	r3, [r3, #4]
 8001758:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	88db      	ldrh	r3, [r3, #6]
 800175e:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001760:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001764:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	7c1b      	ldrb	r3, [r3, #16]
 800176c:	89b8      	ldrh	r0, [r7, #12]
 800176e:	f7ff ff91 	bl	8001694 <u8g2_add_vector_x>
 8001772:	4603      	mov	r3, r0
 8001774:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8001776:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800177a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	7c1b      	ldrb	r3, [r3, #16]
 8001782:	8978      	ldrh	r0, [r7, #10]
 8001784:	f7ff ff4b 	bl	800161e <u8g2_add_vector_y>
 8001788:	4603      	mov	r3, r0
 800178a:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 800178c:	78bb      	ldrb	r3, [r7, #2]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d010      	beq.n	80017b4 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	7b9a      	ldrb	r2, [r3, #14]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 800179c:	7dbb      	ldrb	r3, [r7, #22]
 800179e:	b298      	uxth	r0, r3
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	7c1b      	ldrb	r3, [r3, #16]
 80017a4:	897a      	ldrh	r2, [r7, #10]
 80017a6:	89b9      	ldrh	r1, [r7, #12]
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	4603      	mov	r3, r0
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 fbfe 	bl	8001fae <u8g2_DrawHVLine>
 80017b2:	e013      	b.n	80017dc <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	7b5b      	ldrb	r3, [r3, #13]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d10f      	bne.n	80017dc <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	7bda      	ldrb	r2, [r3, #15]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 80017c6:	7dbb      	ldrb	r3, [r7, #22]
 80017c8:	b298      	uxth	r0, r3
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	7c1b      	ldrb	r3, [r3, #16]
 80017ce:	897a      	ldrh	r2, [r7, #10]
 80017d0:	89b9      	ldrh	r1, [r7, #12]
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	4603      	mov	r3, r0
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 fbe9 	bl	8001fae <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 80017dc:	7dfa      	ldrb	r2, [r7, #23]
 80017de:	7bfb      	ldrb	r3, [r7, #15]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d309      	bcc.n	80017f8 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 80017e4:	7dfa      	ldrb	r2, [r7, #23]
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	757b      	strb	r3, [r7, #21]
    ly++;
 80017f0:	7d3b      	ldrb	r3, [r7, #20]
 80017f2:	3301      	adds	r3, #1
 80017f4:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 80017f6:	e79d      	b.n	8001734 <u8g2_font_decode_len+0x2a>
      break;
 80017f8:	bf00      	nop
  }
  lx += cnt;
 80017fa:	7d7a      	ldrb	r2, [r7, #21]
 80017fc:	7dfb      	ldrb	r3, [r7, #23]
 80017fe:	4413      	add	r3, r2
 8001800:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8001802:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 800180a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	725a      	strb	r2, [r3, #9]
}
 8001812:	bf00      	nop
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b084      	sub	sp, #16
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
 8001822:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3360      	adds	r3, #96	@ 0x60
 8001828:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2200      	movs	r2, #0
 8001834:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 800183c:	4619      	mov	r1, r3
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	f7ff fe7f 	bl	8001542 <u8g2_font_decode_get_unsigned_bits>
 8001844:	4603      	mov	r3, r0
 8001846:	b25a      	sxtb	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8001852:	4619      	mov	r1, r3
 8001854:	68f8      	ldr	r0, [r7, #12]
 8001856:	f7ff fe74 	bl	8001542 <u8g2_font_decode_get_unsigned_bits>
 800185a:	4603      	mov	r3, r0
 800185c:	b25a      	sxtb	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	7b9b      	ldrb	r3, [r3, #14]
 8001870:	2b00      	cmp	r3, #0
 8001872:	bf0c      	ite	eq
 8001874:	2301      	moveq	r3, #1
 8001876:	2300      	movne	r3, #0
 8001878:	b2db      	uxtb	r3, r3
 800187a:	461a      	mov	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	73da      	strb	r2, [r3, #15]
}
 8001880:	bf00      	nop
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08a      	sub	sp, #40	@ 0x28
 800188c:	af02      	add	r7, sp, #8
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3360      	adds	r3, #96	@ 0x60
 8001896:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8001898:	6839      	ldr	r1, [r7, #0]
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff ffbd 	bl	800181a <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 80018a6:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 80018ae:	4619      	mov	r1, r3
 80018b0:	6978      	ldr	r0, [r7, #20]
 80018b2:	f7ff fe91 	bl	80015d8 <u8g2_font_decode_get_signed_bits>
 80018b6:	4603      	mov	r3, r0
 80018b8:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 80018c0:	4619      	mov	r1, r3
 80018c2:	6978      	ldr	r0, [r7, #20]
 80018c4:	f7ff fe88 	bl	80015d8 <u8g2_font_decode_get_signed_bits>
 80018c8:	4603      	mov	r3, r0
 80018ca:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80018d2:	4619      	mov	r1, r3
 80018d4:	6978      	ldr	r0, [r7, #20]
 80018d6:	f7ff fe7f 	bl	80015d8 <u8g2_font_decode_get_signed_bits>
 80018da:	4603      	mov	r3, r0
 80018dc:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f340 80d7 	ble.w	8001a98 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	8898      	ldrh	r0, [r3, #4]
 80018ee:	7cfa      	ldrb	r2, [r7, #19]
 80018f0:	7c7b      	ldrb	r3, [r7, #17]
 80018f2:	4413      	add	r3, r2
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	425b      	negs	r3, r3
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	b25a      	sxtb	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	7c1b      	ldrb	r3, [r3, #16]
 8001900:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001904:	f7ff fec6 	bl	8001694 <u8g2_add_vector_x>
 8001908:	4603      	mov	r3, r0
 800190a:	461a      	mov	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	88d8      	ldrh	r0, [r3, #6]
 8001914:	7cfa      	ldrb	r2, [r7, #19]
 8001916:	7c7b      	ldrb	r3, [r7, #17]
 8001918:	4413      	add	r3, r2
 800191a:	b2db      	uxtb	r3, r3
 800191c:	425b      	negs	r3, r3
 800191e:	b2db      	uxtb	r3, r3
 8001920:	b25a      	sxtb	r2, r3
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	7c1b      	ldrb	r3, [r3, #16]
 8001926:	f997 1012 	ldrsb.w	r1, [r7, #18]
 800192a:	f7ff fe78 	bl	800161e <u8g2_add_vector_y>
 800192e:	4603      	mov	r3, r0
 8001930:	461a      	mov	r2, r3
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	889b      	ldrh	r3, [r3, #4]
 800193a:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	88db      	ldrh	r3, [r3, #6]
 8001940:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8001942:	8bfb      	ldrh	r3, [r7, #30]
 8001944:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 8001946:	8b7b      	ldrh	r3, [r7, #26]
 8001948:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	7c1b      	ldrb	r3, [r3, #16]
 800194e:	2b03      	cmp	r3, #3
 8001950:	d85a      	bhi.n	8001a08 <u8g2_font_decode_glyph+0x180>
 8001952:	a201      	add	r2, pc, #4	@ (adr r2, 8001958 <u8g2_font_decode_glyph+0xd0>)
 8001954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001958:	08001969 	.word	0x08001969
 800195c:	08001985 	.word	0x08001985
 8001960:	080019ad 	.word	0x080019ad
 8001964:	080019e1 	.word	0x080019e1
      {
	case 0:
	    x1 += decode->glyph_width;
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800196e:	b29a      	uxth	r2, r3
 8001970:	8bbb      	ldrh	r3, [r7, #28]
 8001972:	4413      	add	r3, r2
 8001974:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8001976:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800197a:	b29a      	uxth	r2, r3
 800197c:	8b3b      	ldrh	r3, [r7, #24]
 800197e:	4413      	add	r3, r2
 8001980:	833b      	strh	r3, [r7, #24]
	    break;
 8001982:	e041      	b.n	8001a08 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8001984:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001988:	b29b      	uxth	r3, r3
 800198a:	8bfa      	ldrh	r2, [r7, #30]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001990:	8bfb      	ldrh	r3, [r7, #30]
 8001992:	3301      	adds	r3, #1
 8001994:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8001996:	8bbb      	ldrh	r3, [r7, #28]
 8001998:	3301      	adds	r3, #1
 800199a:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	8b3b      	ldrh	r3, [r7, #24]
 80019a6:	4413      	add	r3, r2
 80019a8:	833b      	strh	r3, [r7, #24]
	    break;
 80019aa:	e02d      	b.n	8001a08 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	8bfa      	ldrh	r2, [r7, #30]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80019ba:	8bfb      	ldrh	r3, [r7, #30]
 80019bc:	3301      	adds	r3, #1
 80019be:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80019c0:	8bbb      	ldrh	r3, [r7, #28]
 80019c2:	3301      	adds	r3, #1
 80019c4:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 80019c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	8b7a      	ldrh	r2, [r7, #26]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80019d2:	8b7b      	ldrh	r3, [r7, #26]
 80019d4:	3301      	adds	r3, #1
 80019d6:	837b      	strh	r3, [r7, #26]
	    y1++;
 80019d8:	8b3b      	ldrh	r3, [r7, #24]
 80019da:	3301      	adds	r3, #1
 80019dc:	833b      	strh	r3, [r7, #24]
	    break;	  
 80019de:	e013      	b.n	8001a08 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 80019e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	8bbb      	ldrh	r3, [r7, #28]
 80019e8:	4413      	add	r3, r2
 80019ea:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	8b7a      	ldrh	r2, [r7, #26]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80019fa:	8b7b      	ldrh	r3, [r7, #26]
 80019fc:	3301      	adds	r3, #1
 80019fe:	837b      	strh	r3, [r7, #26]
	    y1++;
 8001a00:	8b3b      	ldrh	r3, [r7, #24]
 8001a02:	3301      	adds	r3, #1
 8001a04:	833b      	strh	r3, [r7, #24]
	    break;	  
 8001a06:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8001a08:	8bb8      	ldrh	r0, [r7, #28]
 8001a0a:	8b7a      	ldrh	r2, [r7, #26]
 8001a0c:	8bf9      	ldrh	r1, [r7, #30]
 8001a0e:	8b3b      	ldrh	r3, [r7, #24]
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	4603      	mov	r3, r0
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 fb88 	bl	800212a <u8g2_IsIntersection>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d102      	bne.n	8001a26 <u8g2_font_decode_glyph+0x19e>
	return d;
 8001a20:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001a24:	e03a      	b.n	8001a9c <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8001a38:	4619      	mov	r1, r3
 8001a3a:	6978      	ldr	r0, [r7, #20]
 8001a3c:	f7ff fd81 	bl	8001542 <u8g2_font_decode_get_unsigned_bits>
 8001a40:	4603      	mov	r3, r0
 8001a42:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	6978      	ldr	r0, [r7, #20]
 8001a4e:	f7ff fd78 	bl	8001542 <u8g2_font_decode_get_unsigned_bits>
 8001a52:	4603      	mov	r3, r0
 8001a54:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff fe54 	bl	800170a <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8001a62:	7bbb      	ldrb	r3, [r7, #14]
 8001a64:	2201      	movs	r2, #1
 8001a66:	4619      	mov	r1, r3
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff fe4e 	bl	800170a <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001a6e:	2101      	movs	r1, #1
 8001a70:	6978      	ldr	r0, [r7, #20]
 8001a72:	f7ff fd66 	bl	8001542 <u8g2_font_decode_get_unsigned_bits>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1ec      	bne.n	8001a56 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001a82:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	dd00      	ble.n	8001a8c <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001a8a:	e7d2      	b.n	8001a32 <u8g2_font_decode_glyph+0x1aa>
	break;
 8001a8c:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	7b9a      	ldrb	r2, [r3, #14]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  }
  return d;
 8001a98:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3720      	adds	r7, #32
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab4:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	3317      	adds	r3, #23
 8001aba:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8001abc:	887b      	ldrh	r3, [r7, #2]
 8001abe:	2bff      	cmp	r3, #255	@ 0xff
 8001ac0:	d82a      	bhi.n	8001b18 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8001ac2:	887b      	ldrh	r3, [r7, #2]
 8001ac4:	2b60      	cmp	r3, #96	@ 0x60
 8001ac6:	d907      	bls.n	8001ad8 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8001ace:	461a      	mov	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	e009      	b.n	8001aec <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8001ad8:	887b      	ldrh	r3, [r7, #2]
 8001ada:	2b40      	cmp	r3, #64	@ 0x40
 8001adc:	d906      	bls.n	8001aec <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	4413      	add	r3, r2
 8001aea:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	3301      	adds	r3, #1
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d04e      	beq.n	8001b94 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	461a      	mov	r2, r3
 8001afc:	887b      	ldrh	r3, [r7, #2]
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d102      	bne.n	8001b08 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	3302      	adds	r3, #2
 8001b06:	e049      	b.n	8001b9c <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	4413      	add	r3, r2
 8001b14:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001b16:	e7e9      	b.n	8001aec <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8001b1e:	461a      	mov	r2, r3
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	4413      	add	r3, r2
 8001b24:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	6938      	ldr	r0, [r7, #16]
 8001b2e:	f7ff fc3f 	bl	80013b0 <u8g2_font_get_word>
 8001b32:	4603      	mov	r3, r0
 8001b34:	461a      	mov	r2, r3
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	4413      	add	r3, r2
 8001b3a:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001b3c:	2102      	movs	r1, #2
 8001b3e:	6938      	ldr	r0, [r7, #16]
 8001b40:	f7ff fc36 	bl	80013b0 <u8g2_font_get_word>
 8001b44:	4603      	mov	r3, r0
 8001b46:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	3304      	adds	r3, #4
 8001b4c:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8001b4e:	89fa      	ldrh	r2, [r7, #14]
 8001b50:	887b      	ldrh	r3, [r7, #2]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d3e9      	bcc.n	8001b2a <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8001b5c:	89fb      	ldrh	r3, [r7, #14]
 8001b5e:	021b      	lsls	r3, r3, #8
 8001b60:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	3301      	adds	r3, #1
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	89fb      	ldrh	r3, [r7, #14]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8001b70:	89fb      	ldrh	r3, [r7, #14]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d010      	beq.n	8001b98 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8001b76:	89fa      	ldrh	r2, [r7, #14]
 8001b78:	887b      	ldrh	r3, [r7, #2]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d102      	bne.n	8001b84 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	3303      	adds	r3, #3
 8001b82:	e00b      	b.n	8001b9c <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	3302      	adds	r3, #2
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	4413      	add	r3, r2
 8001b90:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8001b92:	e7e0      	b.n	8001b56 <u8g2_font_get_glyph_data+0xb2>
	break;
 8001b94:	bf00      	nop
 8001b96:	e000      	b.n	8001b9a <u8g2_font_get_glyph_data+0xf6>
	break;
 8001b98:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	4608      	mov	r0, r1
 8001bae:	4611      	mov	r1, r2
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	817b      	strh	r3, [r7, #10]
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	813b      	strh	r3, [r7, #8]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	897a      	ldrh	r2, [r7, #10]
 8001bc6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  u8g2->font_decode.target_y = y;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	893a      	ldrh	r2, [r7, #8]
 8001bce:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f7ff ff64 	bl	8001aa4 <u8g2_font_get_glyph_data>
 8001bdc:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d005      	beq.n	8001bf0 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8001be4:	6939      	ldr	r1, [r7, #16]
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f7ff fe4e 	bl	8001888 <u8g2_font_decode_glyph>
 8001bec:	4603      	mov	r3, r0
 8001bee:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8001bf0:	8afb      	ldrh	r3, [r7, #22]
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	4608      	mov	r0, r1
 8001c06:	4611      	mov	r1, r2
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	817b      	strh	r3, [r7, #10]
 8001c0e:	460b      	mov	r3, r1
 8001c10:	813b      	strh	r3, [r7, #8]
 8001c12:	4613      	mov	r3, r2
 8001c14:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d833      	bhi.n	8001c88 <u8g2_DrawGlyph+0x8c>
 8001c20:	a201      	add	r2, pc, #4	@ (adr r2, 8001c28 <u8g2_DrawGlyph+0x2c>)
 8001c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c26:	bf00      	nop
 8001c28:	08001c39 	.word	0x08001c39
 8001c2c:	08001c4d 	.word	0x08001c4d
 8001c30:	08001c61 	.word	0x08001c61
 8001c34:	08001c75 	.word	0x08001c75
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	4798      	blx	r3
 8001c40:	4603      	mov	r3, r0
 8001c42:	461a      	mov	r2, r3
 8001c44:	893b      	ldrh	r3, [r7, #8]
 8001c46:	4413      	add	r3, r2
 8001c48:	813b      	strh	r3, [r7, #8]
      break;
 8001c4a:	e01d      	b.n	8001c88 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	4798      	blx	r3
 8001c54:	4603      	mov	r3, r0
 8001c56:	461a      	mov	r2, r3
 8001c58:	897b      	ldrh	r3, [r7, #10]
 8001c5a:	1a9b      	subs	r3, r3, r2
 8001c5c:	817b      	strh	r3, [r7, #10]
      break;
 8001c5e:	e013      	b.n	8001c88 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	4798      	blx	r3
 8001c68:	4603      	mov	r3, r0
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	893b      	ldrh	r3, [r7, #8]
 8001c6e:	1a9b      	subs	r3, r3, r2
 8001c70:	813b      	strh	r3, [r7, #8]
      break;
 8001c72:	e009      	b.n	8001c88 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	4798      	blx	r3
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	461a      	mov	r2, r3
 8001c80:	897b      	ldrh	r3, [r7, #10]
 8001c82:	4413      	add	r3, r2
 8001c84:	817b      	strh	r3, [r7, #10]
      break;
 8001c86:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8001c88:	88fb      	ldrh	r3, [r7, #6]
 8001c8a:	893a      	ldrh	r2, [r7, #8]
 8001c8c:	8979      	ldrh	r1, [r7, #10]
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f7ff ff88 	bl	8001ba4 <u8g2_font_draw_glyph>
 8001c94:	4603      	mov	r3, r0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop

08001ca0 <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	607b      	str	r3, [r7, #4]
 8001caa:	460b      	mov	r3, r1
 8001cac:	817b      	strh	r3, [r7, #10]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f000 fca7 	bl	8002606 <u8x8_utf8_init>
  sum = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	7812      	ldrb	r2, [r2, #0]
 8001cc4:	4611      	mov	r1, r2
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	4798      	blx	r3
 8001cca:	4603      	mov	r3, r0
 8001ccc:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8001cce:	8abb      	ldrh	r3, [r7, #20]
 8001cd0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d038      	beq.n	8001d4a <u8g2_draw_string+0xaa>
      break;
    str++;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8001cde:	8abb      	ldrh	r3, [r7, #20]
 8001ce0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d0e9      	beq.n	8001cbc <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8001ce8:	8abb      	ldrh	r3, [r7, #20]
 8001cea:	893a      	ldrh	r2, [r7, #8]
 8001cec:	8979      	ldrh	r1, [r7, #10]
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f7ff ff84 	bl	8001bfc <u8g2_DrawGlyph>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001cfe:	2b03      	cmp	r3, #3
 8001d00:	d81e      	bhi.n	8001d40 <u8g2_draw_string+0xa0>
 8001d02:	a201      	add	r2, pc, #4	@ (adr r2, 8001d08 <u8g2_draw_string+0x68>)
 8001d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d08:	08001d19 	.word	0x08001d19
 8001d0c:	08001d23 	.word	0x08001d23
 8001d10:	08001d2d 	.word	0x08001d2d
 8001d14:	08001d37 	.word	0x08001d37
      {
	case 0:
	  x += delta;
 8001d18:	897a      	ldrh	r2, [r7, #10]
 8001d1a:	8a7b      	ldrh	r3, [r7, #18]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	817b      	strh	r3, [r7, #10]
	  break;
 8001d20:	e00e      	b.n	8001d40 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8001d22:	893a      	ldrh	r2, [r7, #8]
 8001d24:	8a7b      	ldrh	r3, [r7, #18]
 8001d26:	4413      	add	r3, r2
 8001d28:	813b      	strh	r3, [r7, #8]
	  break;
 8001d2a:	e009      	b.n	8001d40 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8001d2c:	897a      	ldrh	r2, [r7, #10]
 8001d2e:	8a7b      	ldrh	r3, [r7, #18]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	817b      	strh	r3, [r7, #10]
	  break;
 8001d34:	e004      	b.n	8001d40 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8001d36:	893a      	ldrh	r2, [r7, #8]
 8001d38:	8a7b      	ldrh	r3, [r7, #18]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	813b      	strh	r3, [r7, #8]
	  break;
 8001d3e:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8001d40:	8afa      	ldrh	r2, [r7, #22]
 8001d42:	8a7b      	ldrh	r3, [r7, #18]
 8001d44:	4413      	add	r3, r2
 8001d46:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001d48:	e7b8      	b.n	8001cbc <u8g2_draw_string+0x1c>
      break;
 8001d4a:	bf00      	nop
    }
  }
  return sum;
 8001d4c:	8afb      	ldrh	r3, [r7, #22]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3718      	adds	r7, #24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop

08001d58 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	607b      	str	r3, [r7, #4]
 8001d62:	460b      	mov	r3, r1
 8001d64:	817b      	strh	r3, [r7, #10]
 8001d66:	4613      	mov	r3, r2
 8001d68:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	4a06      	ldr	r2, [pc, #24]	@ (8001d88 <u8g2_DrawStr+0x30>)
 8001d6e:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8001d70:	893a      	ldrh	r2, [r7, #8]
 8001d72:	8979      	ldrh	r1, [r7, #10]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f7ff ff92 	bl	8001ca0 <u8g2_draw_string>
 8001d7c:	4603      	mov	r3, r0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	08002623 	.word	0x08002623

08001d8c <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d05d      	beq.n	8001e58 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f993 2081 	ldrsb.w	r2, [r3, #129]	@ 0x81
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f993 2082 	ldrsb.w	r2, [r3, #130]	@ 0x82
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d04d      	beq.n	8001e5a <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d11c      	bne.n	8001e02 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f993 208e 	ldrsb.w	r2, [r3, #142]	@ 0x8e
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f993 3083 	ldrsb.w	r3, [r3, #131]	@ 0x83
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	da05      	bge.n	8001de4 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f993 2083 	ldrsb.w	r2, [r3, #131]	@ 0x83
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f993 3084 	ldrsb.w	r3, [r3, #132]	@ 0x84
 8001df0:	429a      	cmp	r2, r3
 8001df2:	dd32      	ble.n	8001e5a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f993 2084 	ldrsb.w	r2, [r3, #132]	@ 0x84
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8001e00:	e02b      	b.n	8001e5a <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f993 308e 	ldrsb.w	r3, [r3, #142]	@ 0x8e
 8001e08:	461a      	mov	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8001e10:	4619      	mov	r1, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8001e18:	440b      	add	r3, r1
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	da0d      	bge.n	8001e3a <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	4413      	add	r3, r2
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	b25a      	sxtb	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8001e46:	429a      	cmp	r2, r3
 8001e48:	dd07      	ble.n	8001e5a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f993 2080 	ldrsb.w	r2, [r3, #128]	@ 0x80
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8001e56:	e000      	b.n	8001e5a <u8g2_UpdateRefHeight+0xce>
    return;
 8001e58:	bf00      	nop
  }  
}
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  return 0;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
	...

08001e7c <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a04      	ldr	r2, [pc, #16]	@ (8001e98 <u8g2_SetFontPosBaseline+0x1c>)
 8001e88:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	08001e65 	.word	0x08001e65

08001e9c <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d00b      	beq.n	8001ec8 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	659a      	str	r2, [r3, #88]	@ 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3374      	adds	r3, #116	@ 0x74
 8001eba:	6839      	ldr	r1, [r7, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff fa97 	bl	80013f0 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff ff62 	bl	8001d8c <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <u8g2_clip_intersection2>:
 will return 0 if there is no intersection and if a > b

 */

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len,
		u8g2_uint_t c, u8g2_uint_t d) {
 8001ed0:	b480      	push	{r7}
 8001ed2:	b087      	sub	sp, #28
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	4611      	mov	r1, r2
 8001edc:	461a      	mov	r2, r3
 8001ede:	460b      	mov	r3, r1
 8001ee0:	80fb      	strh	r3, [r7, #6]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	80bb      	strh	r3, [r7, #4]
	u8g2_uint_t a = *ap;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	82fb      	strh	r3, [r7, #22]
	u8g2_uint_t b;
	b = a;
 8001eec:	8afb      	ldrh	r3, [r7, #22]
 8001eee:	82bb      	strh	r3, [r7, #20]
	b += *len;
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	881a      	ldrh	r2, [r3, #0]
 8001ef4:	8abb      	ldrh	r3, [r7, #20]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	82bb      	strh	r3, [r7, #20]
	/* be removed completly (be aware about memory curruption for wrong */
	/* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
	/* arguments) */

	/* removing the following if clause completly may lead to memory corruption of a>b */
	if (a > b) {
 8001efa:	8afa      	ldrh	r2, [r7, #22]
 8001efc:	8abb      	ldrh	r3, [r7, #20]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d90b      	bls.n	8001f1a <u8g2_clip_intersection2+0x4a>
		/* replacing this if with a simple "return 0;" will not handle the case with negative a */
		if (a < d) {
 8001f02:	8afa      	ldrh	r2, [r7, #22]
 8001f04:	88bb      	ldrh	r3, [r7, #4]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d205      	bcs.n	8001f16 <u8g2_clip_intersection2+0x46>
			b = d;
 8001f0a:	88bb      	ldrh	r3, [r7, #4]
 8001f0c:	82bb      	strh	r3, [r7, #20]
			b--;
 8001f0e:	8abb      	ldrh	r3, [r7, #20]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	82bb      	strh	r3, [r7, #20]
 8001f14:	e001      	b.n	8001f1a <u8g2_clip_intersection2+0x4a>
		} else {
			a = c;
 8001f16:	88fb      	ldrh	r3, [r7, #6]
 8001f18:	82fb      	strh	r3, [r7, #22]
		}
	}

	/* from now on, the asumption a <= b is ok */

	if (a >= d)
 8001f1a:	8afa      	ldrh	r2, [r7, #22]
 8001f1c:	88bb      	ldrh	r3, [r7, #4]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d301      	bcc.n	8001f26 <u8g2_clip_intersection2+0x56>
		return 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	e01c      	b.n	8001f60 <u8g2_clip_intersection2+0x90>
	if (b <= c)
 8001f26:	8aba      	ldrh	r2, [r7, #20]
 8001f28:	88fb      	ldrh	r3, [r7, #6]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d801      	bhi.n	8001f32 <u8g2_clip_intersection2+0x62>
		return 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	e016      	b.n	8001f60 <u8g2_clip_intersection2+0x90>
	if (a < c)
 8001f32:	8afa      	ldrh	r2, [r7, #22]
 8001f34:	88fb      	ldrh	r3, [r7, #6]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d201      	bcs.n	8001f3e <u8g2_clip_intersection2+0x6e>
		a = c;
 8001f3a:	88fb      	ldrh	r3, [r7, #6]
 8001f3c:	82fb      	strh	r3, [r7, #22]
	if (b > d)
 8001f3e:	8aba      	ldrh	r2, [r7, #20]
 8001f40:	88bb      	ldrh	r3, [r7, #4]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d901      	bls.n	8001f4a <u8g2_clip_intersection2+0x7a>
		b = d;
 8001f46:	88bb      	ldrh	r3, [r7, #4]
 8001f48:	82bb      	strh	r3, [r7, #20]

	*ap = a;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	8afa      	ldrh	r2, [r7, #22]
 8001f4e:	801a      	strh	r2, [r3, #0]
	b -= a;
 8001f50:	8aba      	ldrh	r2, [r7, #20]
 8001f52:	8afb      	ldrh	r3, [r7, #22]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	82bb      	strh	r3, [r7, #20]
	*len = b;
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	8aba      	ldrh	r2, [r7, #20]
 8001f5c:	801a      	strh	r2, [r3, #0]
	return 1;
 8001f5e:	2301      	movs	r3, #1
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	371c      	adds	r7, #28
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <u8g2_draw_hv_line_2dir>:
 This function first adjusts the y position to the local buffer. Then it
 will clip the line and call u8g2_draw_low_level_hv_line()

 */
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		u8g2_uint_t len, uint8_t dir) {
 8001f6c:	b590      	push	{r4, r7, lr}
 8001f6e:	b087      	sub	sp, #28
 8001f70:	af02      	add	r7, sp, #8
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	4608      	mov	r0, r1
 8001f76:	4611      	mov	r1, r2
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	817b      	strh	r3, [r7, #10]
 8001f7e:	460b      	mov	r3, r1
 8001f80:	813b      	strh	r3, [r7, #8]
 8001f82:	4613      	mov	r3, r2
 8001f84:	80fb      	strh	r3, [r7, #6]

	/* clipping happens before the display rotation */

	/* transform to pixel buffer coordinates */
	y -= u8g2->pixel_curr_row;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f8a:	893a      	ldrh	r2, [r7, #8]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	813b      	strh	r3, [r7, #8]

	u8g2->ll_hvline(u8g2, x, y, len, dir);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8001f94:	88f8      	ldrh	r0, [r7, #6]
 8001f96:	893a      	ldrh	r2, [r7, #8]
 8001f98:	8979      	ldrh	r1, [r7, #10]
 8001f9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	47a0      	blx	r4
}
 8001fa6:	bf00      	nop
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd90      	pop	{r4, r7, pc}

08001fae <u8g2_DrawHVLine>:
 This function should be called by the user.

 "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
 */
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		u8g2_uint_t len, uint8_t dir) {
 8001fae:	b590      	push	{r4, r7, lr}
 8001fb0:	b087      	sub	sp, #28
 8001fb2:	af02      	add	r7, sp, #8
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	4608      	mov	r0, r1
 8001fb8:	4611      	mov	r1, r2
 8001fba:	461a      	mov	r2, r3
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	817b      	strh	r3, [r7, #10]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	813b      	strh	r3, [r7, #8]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	80fb      	strh	r3, [r7, #6]
	/* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
	/* The callback may rotate the hv line */
	/* after rotation this will call u8g2_draw_hv_line_4dir() */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
	if (u8g2->is_page_clip_window_intersection != 0)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d075      	beq.n	80020be <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
		if (len != 0) {
 8001fd2:	88fb      	ldrh	r3, [r7, #6]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d072      	beq.n	80020be <u8g2_DrawHVLine+0x110>

			/* convert to two directions */
			if (len > 1) {
 8001fd8:	88fb      	ldrh	r3, [r7, #6]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d91a      	bls.n	8002014 <u8g2_DrawHVLine+0x66>
				if (dir == 2) {
 8001fde:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d109      	bne.n	8001ffa <u8g2_DrawHVLine+0x4c>
					x -= len;
 8001fe6:	897a      	ldrh	r2, [r7, #10]
 8001fe8:	88fb      	ldrh	r3, [r7, #6]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	817b      	strh	r3, [r7, #10]
					x++;
 8001ff0:	897b      	ldrh	r3, [r7, #10]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	817b      	strh	r3, [r7, #10]
 8001ff8:	e00c      	b.n	8002014 <u8g2_DrawHVLine+0x66>
				} else if (dir == 3) {
 8001ffa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d108      	bne.n	8002014 <u8g2_DrawHVLine+0x66>
					y -= len;
 8002002:	893a      	ldrh	r2, [r7, #8]
 8002004:	88fb      	ldrh	r3, [r7, #6]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	b29b      	uxth	r3, r3
 800200a:	813b      	strh	r3, [r7, #8]
					y++;
 800200c:	893b      	ldrh	r3, [r7, #8]
 800200e:	3301      	adds	r3, #1
 8002010:	b29b      	uxth	r3, r3
 8002012:	813b      	strh	r3, [r7, #8]
				}
			}
			dir &= 1;
 8002014:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	f887 3020 	strb.w	r3, [r7, #32]

			/* clip against the user window */
			if (dir == 0) {
 8002020:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d11a      	bne.n	800205e <u8g2_DrawHVLine+0xb0>
				if (y < u8g2->user_y0)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 800202e:	893b      	ldrh	r3, [r7, #8]
 8002030:	429a      	cmp	r2, r3
 8002032:	d83b      	bhi.n	80020ac <u8g2_DrawHVLine+0xfe>
					return;
				if (y >= u8g2->user_y1)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 800203a:	893b      	ldrh	r3, [r7, #8]
 800203c:	429a      	cmp	r2, r3
 800203e:	d937      	bls.n	80020b0 <u8g2_DrawHVLine+0x102>
					return;
				if (u8g2_clip_intersection2(&x, &len, u8g2->user_x0,
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800204c:	1db9      	adds	r1, r7, #6
 800204e:	f107 000a 	add.w	r0, r7, #10
 8002052:	f7ff ff3d 	bl	8001ed0 <u8g2_clip_intersection2>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d11a      	bne.n	8002092 <u8g2_DrawHVLine+0xe4>
						u8g2->user_x1) == 0)
					return;
 800205c:	e02f      	b.n	80020be <u8g2_DrawHVLine+0x110>
			} else {
				if (x < u8g2->user_x0)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8002064:	897b      	ldrh	r3, [r7, #10]
 8002066:	429a      	cmp	r2, r3
 8002068:	d824      	bhi.n	80020b4 <u8g2_DrawHVLine+0x106>
					return;
				if (x >= u8g2->user_x1)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8002070:	897b      	ldrh	r3, [r7, #10]
 8002072:	429a      	cmp	r2, r3
 8002074:	d920      	bls.n	80020b8 <u8g2_DrawHVLine+0x10a>
					return;
				if (u8g2_clip_intersection2(&y, &len, u8g2->user_y0,
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8002082:	1db9      	adds	r1, r7, #6
 8002084:	f107 0008 	add.w	r0, r7, #8
 8002088:	f7ff ff22 	bl	8001ed0 <u8g2_clip_intersection2>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d014      	beq.n	80020bc <u8g2_DrawHVLine+0x10e>
						u8g2->user_y1) == 0)
					return;
			}

			u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002096:	689c      	ldr	r4, [r3, #8]
 8002098:	8979      	ldrh	r1, [r7, #10]
 800209a:	893a      	ldrh	r2, [r7, #8]
 800209c:	88f8      	ldrh	r0, [r7, #6]
 800209e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	4603      	mov	r3, r0
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	47a0      	blx	r4
 80020aa:	e008      	b.n	80020be <u8g2_DrawHVLine+0x110>
					return;
 80020ac:	bf00      	nop
 80020ae:	e006      	b.n	80020be <u8g2_DrawHVLine+0x110>
					return;
 80020b0:	bf00      	nop
 80020b2:	e004      	b.n	80020be <u8g2_DrawHVLine+0x110>
					return;
 80020b4:	bf00      	nop
 80020b6:	e002      	b.n	80020be <u8g2_DrawHVLine+0x110>
					return;
 80020b8:	bf00      	nop
 80020ba:	e000      	b.n	80020be <u8g2_DrawHVLine+0x110>
					return;
 80020bc:	bf00      	nop
		}
}
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd90      	pop	{r4, r7, pc}

080020c4 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 80020c4:	b490      	push	{r4, r7}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4604      	mov	r4, r0
 80020cc:	4608      	mov	r0, r1
 80020ce:	4611      	mov	r1, r2
 80020d0:	461a      	mov	r2, r3
 80020d2:	4623      	mov	r3, r4
 80020d4:	80fb      	strh	r3, [r7, #6]
 80020d6:	4603      	mov	r3, r0
 80020d8:	80bb      	strh	r3, [r7, #4]
 80020da:	460b      	mov	r3, r1
 80020dc:	807b      	strh	r3, [r7, #2]
 80020de:	4613      	mov	r3, r2
 80020e0:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 80020e2:	887a      	ldrh	r2, [r7, #2]
 80020e4:	88bb      	ldrh	r3, [r7, #4]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d20d      	bcs.n	8002106 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 80020ea:	883a      	ldrh	r2, [r7, #0]
 80020ec:	88fb      	ldrh	r3, [r7, #6]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d901      	bls.n	80020f6 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e014      	b.n	8002120 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 80020f6:	887a      	ldrh	r2, [r7, #2]
 80020f8:	883b      	ldrh	r3, [r7, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d901      	bls.n	8002102 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 80020fe:	2301      	movs	r3, #1
 8002100:	e00e      	b.n	8002120 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002102:	2300      	movs	r3, #0
 8002104:	e00c      	b.n	8002120 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8002106:	883a      	ldrh	r2, [r7, #0]
 8002108:	88fb      	ldrh	r3, [r7, #6]
 800210a:	429a      	cmp	r2, r3
 800210c:	d907      	bls.n	800211e <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 800210e:	887a      	ldrh	r2, [r7, #2]
 8002110:	883b      	ldrh	r3, [r7, #0]
 8002112:	429a      	cmp	r2, r3
 8002114:	d901      	bls.n	800211a <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8002116:	2301      	movs	r3, #1
 8002118:	e002      	b.n	8002120 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800211a:	2300      	movs	r3, #0
 800211c:	e000      	b.n	8002120 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 800211e:	2300      	movs	r3, #0
    }
  }
}
 8002120:	4618      	mov	r0, r3
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bc90      	pop	{r4, r7}
 8002128:	4770      	bx	lr

0800212a <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b084      	sub	sp, #16
 800212e:	af00      	add	r7, sp, #0
 8002130:	60f8      	str	r0, [r7, #12]
 8002132:	4608      	mov	r0, r1
 8002134:	4611      	mov	r1, r2
 8002136:	461a      	mov	r2, r3
 8002138:	4603      	mov	r3, r0
 800213a:	817b      	strh	r3, [r7, #10]
 800213c:	460b      	mov	r3, r1
 800213e:	813b      	strh	r3, [r7, #8]
 8002140:	4613      	mov	r3, r2
 8002142:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f8b3 104e 	ldrh.w	r1, [r3, #78]	@ 0x4e
 8002150:	8b3b      	ldrh	r3, [r7, #24]
 8002152:	893a      	ldrh	r2, [r7, #8]
 8002154:	f7ff ffb6 	bl	80020c4 <u8g2_is_intersection_decision_tree>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <u8g2_IsIntersection+0x38>
    return 0; 
 800215e:	2300      	movs	r3, #0
 8002160:	e00a      	b.n	8002178 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 800216e:	88fb      	ldrh	r3, [r7, #6]
 8002170:	897a      	ldrh	r2, [r7, #10]
 8002172:	f7ff ffa7 	bl	80020c4 <u8g2_is_intersection_decision_tree>
 8002176:	4603      	mov	r3, r0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002180:	b480      	push	{r7}
 8002182:	b089      	sub	sp, #36	@ 0x24
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	4608      	mov	r0, r1
 800218a:	4611      	mov	r1, r2
 800218c:	461a      	mov	r2, r3
 800218e:	4603      	mov	r3, r0
 8002190:	817b      	strh	r3, [r7, #10]
 8002192:	460b      	mov	r3, r1
 8002194:	813b      	strh	r3, [r7, #8]
 8002196:	4613      	mov	r3, r2
 8002198:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 800219a:	893b      	ldrh	r3, [r7, #8]
 800219c:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800219e:	7efb      	ldrb	r3, [r7, #27]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 80021a6:	2301      	movs	r3, #1
 80021a8:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 80021aa:	7e3a      	ldrb	r2, [r7, #24]
 80021ac:	7efb      	ldrb	r3, [r7, #27]
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d801      	bhi.n	80021ca <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 80021c6:	7e3b      	ldrb	r3, [r7, #24]
 80021c8:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d001      	beq.n	80021d8 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 80021d4:	7e3b      	ldrb	r3, [r7, #24]
 80021d6:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 80021d8:	893b      	ldrh	r3, [r7, #8]
 80021da:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 80021dc:	8afb      	ldrh	r3, [r7, #22]
 80021de:	f023 0307 	bic.w	r3, r3, #7
 80021e2:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	7c1b      	ldrb	r3, [r3, #16]
 80021ea:	461a      	mov	r2, r3
 80021ec:	8afb      	ldrh	r3, [r7, #22]
 80021ee:	fb13 f302 	smulbb	r3, r3, r2
 80021f2:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021f8:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 80021fa:	8afb      	ldrh	r3, [r7, #22]
 80021fc:	69fa      	ldr	r2, [r7, #28]
 80021fe:	4413      	add	r3, r2
 8002200:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8002202:	897b      	ldrh	r3, [r7, #10]
 8002204:	69fa      	ldr	r2, [r7, #28]
 8002206:	4413      	add	r3, r2
 8002208:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 800220a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800220e:	2b00      	cmp	r3, #0
 8002210:	d117      	bne.n	8002242 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	781a      	ldrb	r2, [r3, #0]
 8002216:	7ebb      	ldrb	r3, [r7, #26]
 8002218:	4313      	orrs	r3, r2
 800221a:	b2da      	uxtb	r2, r3
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	781a      	ldrb	r2, [r3, #0]
 8002224:	7e7b      	ldrb	r3, [r7, #25]
 8002226:	4053      	eors	r3, r2
 8002228:	b2da      	uxtb	r2, r3
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	701a      	strb	r2, [r3, #0]
	ptr++;
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	3301      	adds	r3, #1
 8002232:	61fb      	str	r3, [r7, #28]
	len--;
 8002234:	88fb      	ldrh	r3, [r7, #6]
 8002236:	3b01      	subs	r3, #1
 8002238:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 800223a:	88fb      	ldrh	r3, [r7, #6]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1e8      	bne.n	8002212 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8002240:	e038      	b.n	80022b4 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	781a      	ldrb	r2, [r3, #0]
 8002246:	7ebb      	ldrb	r3, [r7, #26]
 8002248:	4313      	orrs	r3, r2
 800224a:	b2da      	uxtb	r2, r3
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	781a      	ldrb	r2, [r3, #0]
 8002254:	7e7b      	ldrb	r3, [r7, #25]
 8002256:	4053      	eors	r3, r2
 8002258:	b2da      	uxtb	r2, r3
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 800225e:	7efb      	ldrb	r3, [r7, #27]
 8002260:	3301      	adds	r3, #1
 8002262:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8002264:	7efb      	ldrb	r3, [r7, #27]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	76fb      	strb	r3, [r7, #27]
      len--;
 800226c:	88fb      	ldrh	r3, [r7, #6]
 800226e:	3b01      	subs	r3, #1
 8002270:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8002272:	7efb      	ldrb	r3, [r7, #27]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d114      	bne.n	80022a2 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800227c:	461a      	mov	r2, r3
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	4413      	add	r3, r2
 8002282:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 800228a:	2b01      	cmp	r3, #1
 800228c:	d801      	bhi.n	8002292 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 800228e:	2301      	movs	r3, #1
 8002290:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002298:	2b01      	cmp	r3, #1
 800229a:	d008      	beq.n	80022ae <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 800229c:	2301      	movs	r3, #1
 800229e:	767b      	strb	r3, [r7, #25]
 80022a0:	e005      	b.n	80022ae <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 80022a2:	7ebb      	ldrb	r3, [r7, #26]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 80022a8:	7e7b      	ldrb	r3, [r7, #25]
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 80022ae:	88fb      	ldrh	r3, [r7, #6]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1c6      	bne.n	8002242 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 80022b4:	bf00      	nop
 80022b6:	3724      	adds	r7, #36	@ 0x24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  u8g2->clip_y0 = 0;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022de:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022e8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  
  u8g2->cb->update_page_win(u8g2);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	4798      	blx	r3
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b084      	sub	sp, #16
 8002302:	af00      	add	r7, sp, #0
 8002304:	60f8      	str	r0, [r7, #12]
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	603b      	str	r3, [r7, #0]
 800230a:	4613      	mov	r3, r2
 800230c:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	659a      	str	r2, [r3, #88]	@ 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	79fa      	ldrb	r2, [r7, #7]
 8002324:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
  u8g2->bitmap_transparency = 0;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
  u8g2->draw_color = 1;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  u8g2->is_auto_page_clear = 1;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
  
  u8g2->cb = u8g2_cb;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update_dimension(u8g2);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f7ff ffa9 	bl	80022c0 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f7ff fd84 	bl	8001e7c <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
#endif
}
 800237c:	bf00      	nop
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002398:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800239a:	89fb      	ldrh	r3, [r7, #14]
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	89fa      	ldrh	r2, [r7, #14]
 80023a4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  
  t = display_info->tile_width;
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	7c1b      	ldrb	r3, [r3, #16]
 80023aa:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 80023ac:	89fb      	ldrh	r3, [r7, #14]
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	89fa      	ldrh	r2, [r7, #14]
 80023b6:	875a      	strh	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80023be:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80023c0:	89fb      	ldrh	r3, [r7, #14]
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	89fa      	ldrh	r2, [r7, #14]
 80023ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_buf_height;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80023d2:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80023d4:	89fb      	ldrh	r3, [r7, #14]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 80023dc:	4413      	add	r3, r2
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	7c52      	ldrb	r2, [r2, #17]
 80023e2:	4293      	cmp	r3, r2
 80023e4:	dd07      	ble.n	80023f6 <u8g2_update_dimension_common+0x72>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	7c5b      	ldrb	r3, [r3, #17]
 80023ea:	461a      	mov	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80023f6:	89fb      	ldrh	r3, [r7, #14]
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  u8g2->buf_y1 += t;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8002418:	89fb      	ldrh	r3, [r7, #14]
 800241a:	4413      	add	r3, r2
 800241c:	b29a      	uxth	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	8a9a      	ldrh	r2, [r3, #20]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  u8g2->height = display_info->pixel_height;
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	8ada      	ldrh	r2, [r3, #22]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8002438:	bf00      	nop
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af02      	add	r7, sp, #8
 800244a:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f8b3 0052 	ldrh.w	r0, [r3, #82]	@ 0x52
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	4603      	mov	r3, r0
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7ff fe5e 	bl	800212a <u8g2_IsIntersection>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d104      	bne.n	800247e <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800247c:	e03b      	b.n	80024f6 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002492:	429a      	cmp	r2, r3
 8002494:	d205      	bcs.n	80024a2 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d905      	bls.n	80024be <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d205      	bcs.n	80024da <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d905      	bls.n	80024f6 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff ff3c 	bl	8002384 <u8g2_update_dimension_common>
}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  if ( u8g2->height >= u8g2->buf_y1 )
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8002544:	429a      	cmp	r2, r3
 8002546:	d30a      	bcc.n	800255e <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	b29a      	uxth	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	b29a      	uxth	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7ff ff65 	bl	8002444 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b088      	sub	sp, #32
 8002586:	af02      	add	r7, sp, #8
 8002588:	60f8      	str	r0, [r7, #12]
 800258a:	4608      	mov	r0, r1
 800258c:	4611      	mov	r1, r2
 800258e:	461a      	mov	r2, r3
 8002590:	4603      	mov	r3, r0
 8002592:	817b      	strh	r3, [r7, #10]
 8002594:	460b      	mov	r3, r1
 8002596:	813b      	strh	r3, [r7, #8]
 8002598:	4613      	mov	r3, r2
 800259a:	80fb      	strh	r3, [r7, #6]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80025a2:	82bb      	strh	r3, [r7, #20]
  yy -= y;
 80025a4:	8aba      	ldrh	r2, [r7, #20]
 80025a6:	893b      	ldrh	r3, [r7, #8]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	82bb      	strh	r3, [r7, #20]
  
  xx = u8g2->width;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025b2:	82fb      	strh	r3, [r7, #22]
  xx -= x;
 80025b4:	8afa      	ldrh	r2, [r7, #22]
 80025b6:	897b      	ldrh	r3, [r7, #10]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	82fb      	strh	r3, [r7, #22]
  
  if ( dir == 0 )
 80025bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d107      	bne.n	80025d4 <u8g2_draw_l90_r2+0x52>
  {
    yy--;
 80025c4:	8abb      	ldrh	r3, [r7, #20]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	82bb      	strh	r3, [r7, #20]
    xx -= len;
 80025ca:	8afa      	ldrh	r2, [r7, #22]
 80025cc:	88fb      	ldrh	r3, [r7, #6]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	82fb      	strh	r3, [r7, #22]
 80025d2:	e00a      	b.n	80025ea <u8g2_draw_l90_r2+0x68>
  }
  else if ( dir == 1 )
 80025d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d106      	bne.n	80025ea <u8g2_draw_l90_r2+0x68>
  {
    xx--;
 80025dc:	8afb      	ldrh	r3, [r7, #22]
 80025de:	3b01      	subs	r3, #1
 80025e0:	82fb      	strh	r3, [r7, #22]
    yy -= len;
 80025e2:	8aba      	ldrh	r2, [r7, #20]
 80025e4:	88fb      	ldrh	r3, [r7, #6]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	82bb      	strh	r3, [r7, #20]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 80025ea:	88f8      	ldrh	r0, [r7, #6]
 80025ec:	8aba      	ldrh	r2, [r7, #20]
 80025ee:	8af9      	ldrh	r1, [r7, #22]
 80025f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	4603      	mov	r3, r0
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f7ff fcb7 	bl	8001f6c <u8g2_draw_hv_line_2dir>
}
 80025fe:	bf00      	nop
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	460b      	mov	r3, r1
 800262c:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 800262e:	78fb      	ldrb	r3, [r7, #3]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <u8x8_ascii_next+0x18>
 8002634:	78fb      	ldrb	r3, [r7, #3]
 8002636:	2b0a      	cmp	r3, #10
 8002638:	d102      	bne.n	8002640 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 800263a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800263e:	e001      	b.n	8002644 <u8x8_ascii_next+0x22>
  return b;
 8002640:	78fb      	ldrb	r3, [r7, #3]
 8002642:	b29b      	uxth	r3, r3
}
 8002644:	4618      	mov	r0, r3
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8002650:	b590      	push	{r4, r7, lr}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691c      	ldr	r4, [r3, #16]
 8002660:	78fa      	ldrb	r2, [r7, #3]
 8002662:	2300      	movs	r3, #0
 8002664:	2120      	movs	r1, #32
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	47a0      	blx	r4
 800266a:	4603      	mov	r3, r0
}
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	bd90      	pop	{r4, r7, pc}

08002674 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002674:	b590      	push	{r4, r7, lr}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	460b      	mov	r3, r1
 800267e:	607a      	str	r2, [r7, #4]
 8002680:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	691c      	ldr	r4, [r3, #16]
 8002686:	7afa      	ldrb	r2, [r7, #11]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2117      	movs	r1, #23
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	47a0      	blx	r4
 8002690:	4603      	mov	r3, r0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	bd90      	pop	{r4, r7, pc}

0800269a <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
 80026a2:	460b      	mov	r3, r1
 80026a4:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 80026a6:	1cfb      	adds	r3, r7, #3
 80026a8:	461a      	mov	r2, r3
 80026aa:	2101      	movs	r1, #1
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7ff ffe1 	bl	8002674 <u8x8_byte_SendBytes>
 80026b2:	4603      	mov	r3, r0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 80026bc:	b590      	push	{r4, r7, lr}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	460b      	mov	r3, r1
 80026c6:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68dc      	ldr	r4, [r3, #12]
 80026cc:	78fa      	ldrb	r2, [r7, #3]
 80026ce:	2300      	movs	r3, #0
 80026d0:	2115      	movs	r1, #21
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	47a0      	blx	r4
 80026d6:	4603      	mov	r3, r0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd90      	pop	{r4, r7, pc}

080026e0 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 80026e0:	b590      	push	{r4, r7, lr}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68dc      	ldr	r4, [r3, #12]
 80026f0:	78fa      	ldrb	r2, [r7, #3]
 80026f2:	2300      	movs	r3, #0
 80026f4:	2116      	movs	r1, #22
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	47a0      	blx	r4
 80026fa:	4603      	mov	r3, r0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	bd90      	pop	{r4, r7, pc}

08002704 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002704:	b590      	push	{r4, r7, lr}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	460b      	mov	r3, r1
 800270e:	607a      	str	r2, [r7, #4]
 8002710:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	68dc      	ldr	r4, [r3, #12]
 8002716:	7afa      	ldrb	r2, [r7, #11]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2117      	movs	r1, #23
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	47a0      	blx	r4
 8002720:	4603      	mov	r3, r0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	bd90      	pop	{r4, r7, pc}

0800272a <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 800272a:	b590      	push	{r4, r7, lr}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68dc      	ldr	r4, [r3, #12]
 8002736:	2300      	movs	r3, #0
 8002738:	2200      	movs	r2, #0
 800273a:	2118      	movs	r1, #24
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	47a0      	blx	r4
 8002740:	4603      	mov	r3, r0
}
 8002742:	4618      	mov	r0, r3
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	bd90      	pop	{r4, r7, pc}

0800274a <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 800274a:	b590      	push	{r4, r7, lr}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68dc      	ldr	r4, [r3, #12]
 8002756:	2300      	movs	r3, #0
 8002758:	2200      	movs	r2, #0
 800275a:	2119      	movs	r1, #25
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	47a0      	blx	r4
 8002760:	4603      	mov	r3, r0
}
 8002762:	4618      	mov	r0, r3
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	bd90      	pop	{r4, r7, pc}

0800276a <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 800276a:	b590      	push	{r4, r7, lr}
 800276c:	b085      	sub	sp, #20
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
 8002772:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	73fb      	strb	r3, [r7, #15]
    data++;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	3301      	adds	r3, #1
 800277e:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8002780:	7bfb      	ldrb	r3, [r7, #15]
 8002782:	2bfe      	cmp	r3, #254	@ 0xfe
 8002784:	d031      	beq.n	80027ea <u8x8_cad_SendSequence+0x80>
 8002786:	2bfe      	cmp	r3, #254	@ 0xfe
 8002788:	dc3d      	bgt.n	8002806 <u8x8_cad_SendSequence+0x9c>
 800278a:	2b19      	cmp	r3, #25
 800278c:	dc3b      	bgt.n	8002806 <u8x8_cad_SendSequence+0x9c>
 800278e:	2b18      	cmp	r3, #24
 8002790:	da23      	bge.n	80027da <u8x8_cad_SendSequence+0x70>
 8002792:	2b16      	cmp	r3, #22
 8002794:	dc02      	bgt.n	800279c <u8x8_cad_SendSequence+0x32>
 8002796:	2b15      	cmp	r3, #21
 8002798:	da03      	bge.n	80027a2 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 800279a:	e034      	b.n	8002806 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 800279c:	2b17      	cmp	r3, #23
 800279e:	d00e      	beq.n	80027be <u8x8_cad_SendSequence+0x54>
	return;
 80027a0:	e031      	b.n	8002806 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68dc      	ldr	r4, [r3, #12]
 80027ac:	7bba      	ldrb	r2, [r7, #14]
 80027ae:	7bf9      	ldrb	r1, [r7, #15]
 80027b0:	2300      	movs	r3, #0
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	47a0      	blx	r4
	  data++;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	3301      	adds	r3, #1
 80027ba:	603b      	str	r3, [r7, #0]
	  break;
 80027bc:	e022      	b.n	8002804 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 80027c4:	f107 030e 	add.w	r3, r7, #14
 80027c8:	461a      	mov	r2, r3
 80027ca:	2101      	movs	r1, #1
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7ff ff99 	bl	8002704 <u8x8_cad_SendData>
	  data++;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	3301      	adds	r3, #1
 80027d6:	603b      	str	r3, [r7, #0]
	  break;
 80027d8:	e014      	b.n	8002804 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68dc      	ldr	r4, [r3, #12]
 80027de:	7bf9      	ldrb	r1, [r7, #15]
 80027e0:	2300      	movs	r3, #0
 80027e2:	2200      	movs	r2, #0
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	47a0      	blx	r4
	  break;
 80027e8:	e00c      	b.n	8002804 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80027f0:	7bbb      	ldrb	r3, [r7, #14]
 80027f2:	461a      	mov	r2, r3
 80027f4:	2129      	movs	r1, #41	@ 0x29
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f9ee 	bl	8002bd8 <u8x8_gpio_call>
	  data++;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	3301      	adds	r3, #1
 8002800:	603b      	str	r3, [r7, #0]
	  break;
 8002802:	bf00      	nop
    cmd = *data;
 8002804:	e7b6      	b.n	8002774 <u8x8_cad_SendSequence+0xa>
	return;
 8002806:	bf00      	nop
    }
  }
}
 8002808:	3714      	adds	r7, #20
 800280a:	46bd      	mov	sp, r7
 800280c:	bd90      	pop	{r4, r7, pc}
	...

08002810 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002810:	b590      	push	{r4, r7, lr}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	607b      	str	r3, [r7, #4]
 800281a:	460b      	mov	r3, r1
 800281c:	72fb      	strb	r3, [r7, #11]
 800281e:	4613      	mov	r3, r2
 8002820:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8002822:	7afb      	ldrb	r3, [r7, #11]
 8002824:	3b14      	subs	r3, #20
 8002826:	2b05      	cmp	r3, #5
 8002828:	d82f      	bhi.n	800288a <u8x8_cad_001+0x7a>
 800282a:	a201      	add	r2, pc, #4	@ (adr r2, 8002830 <u8x8_cad_001+0x20>)
 800282c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002830:	08002879 	.word	0x08002879
 8002834:	08002849 	.word	0x08002849
 8002838:	0800285d 	.word	0x0800285d
 800283c:	08002871 	.word	0x08002871
 8002840:	08002879 	.word	0x08002879
 8002844:	08002879 	.word	0x08002879
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8002848:	2100      	movs	r1, #0
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f7ff ff00 	bl	8002650 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002850:	7abb      	ldrb	r3, [r7, #10]
 8002852:	4619      	mov	r1, r3
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f7ff ff20 	bl	800269a <u8x8_byte_SendByte>
      break;
 800285a:	e018      	b.n	800288e <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 800285c:	2100      	movs	r1, #0
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f7ff fef6 	bl	8002650 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002864:	7abb      	ldrb	r3, [r7, #10]
 8002866:	4619      	mov	r1, r3
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f7ff ff16 	bl	800269a <u8x8_byte_SendByte>
      break;
 800286e:	e00e      	b.n	800288e <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8002870:	2101      	movs	r1, #1
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f7ff feec 	bl	8002650 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	691c      	ldr	r4, [r3, #16]
 800287c:	7aba      	ldrb	r2, [r7, #10]
 800287e:	7af9      	ldrb	r1, [r7, #11]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	47a0      	blx	r4
 8002886:	4603      	mov	r3, r0
 8002888:	e002      	b.n	8002890 <u8x8_cad_001+0x80>
    default:
      return 0;
 800288a:	2300      	movs	r3, #0
 800288c:	e000      	b.n	8002890 <u8x8_cad_001+0x80>
  }
  return 1;
 800288e:	2301      	movs	r3, #1
}
 8002890:	4618      	mov	r0, r3
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	bd90      	pop	{r4, r7, pc}

08002898 <u8x8_d_st7565_common>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	607b      	str	r3, [r7, #4]
 80028a2:	460b      	mov	r3, r1
 80028a4:	72fb      	strb	r3, [r7, #11]
 80028a6:	4613      	mov	r3, r2
 80028a8:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 80028aa:	7afb      	ldrb	r3, [r7, #11]
 80028ac:	2b0f      	cmp	r3, #15
 80028ae:	d006      	beq.n	80028be <u8x8_d_st7565_common+0x26>
 80028b0:	2b0f      	cmp	r3, #15
 80028b2:	dc71      	bgt.n	8002998 <u8x8_d_st7565_common+0x100>
 80028b4:	2b0b      	cmp	r3, #11
 80028b6:	d050      	beq.n	800295a <u8x8_d_st7565_common+0xc2>
 80028b8:	2b0e      	cmp	r3, #14
 80028ba:	d05b      	beq.n	8002974 <u8x8_d_st7565_common+0xdc>
 80028bc:	e06c      	b.n	8002998 <u8x8_d_st7565_common+0x100>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f7ff ff33 	bl	800272a <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	795b      	ldrb	r3, [r3, #5]
 80028c8:	75bb      	strb	r3, [r7, #22]
      x *= 8;
 80028ca:	7dbb      	ldrb	r3, [r7, #22]
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	75bb      	strb	r3, [r7, #22]
      x += u8x8->x_offset;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80028d6:	7dbb      	ldrb	r3, [r7, #22]
 80028d8:	4413      	add	r3, r2
 80028da:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 80028dc:	7dbb      	ldrb	r3, [r7, #22]
 80028de:	091b      	lsrs	r3, r3, #4
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	f043 0310 	orr.w	r3, r3, #16
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	4619      	mov	r1, r3
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f7ff fee6 	bl	80026bc <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 80028f0:	7dbb      	ldrb	r3, [r7, #22]
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	4619      	mov	r1, r3
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f7ff fede 	bl	80026bc <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	799b      	ldrb	r3, [r3, #6]
 8002904:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8002908:	b2db      	uxtb	r3, r3
 800290a:	4619      	mov	r1, r3
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f7ff fed5 	bl	80026bc <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	791b      	ldrb	r3, [r3, #4]
 8002916:	75fb      	strb	r3, [r7, #23]
      c *= 8;
 8002918:	7dfb      	ldrb	r3, [r7, #23]
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	613b      	str	r3, [r7, #16]
      /* 
	The following if condition checks the hardware limits of the st7565 
	controller: It is not allowed to write beyond the display limits.
	This is in fact an issue within flip mode.
      */
      if ( c + x > 132u )
 8002924:	7dfa      	ldrb	r2, [r7, #23]
 8002926:	7dbb      	ldrb	r3, [r7, #22]
 8002928:	4413      	add	r3, r2
 800292a:	2b84      	cmp	r3, #132	@ 0x84
 800292c:	d905      	bls.n	800293a <u8x8_d_st7565_common+0xa2>
      {
	c = 132u;
 800292e:	2384      	movs	r3, #132	@ 0x84
 8002930:	75fb      	strb	r3, [r7, #23]
	c -= x;
 8002932:	7dfa      	ldrb	r2, [r7, #23]
 8002934:	7dbb      	ldrb	r3, [r7, #22]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	75fb      	strb	r3, [r7, #23]
      }
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 800293a:	7dfb      	ldrb	r3, [r7, #23]
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	4619      	mov	r1, r3
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f7ff fedf 	bl	8002704 <u8x8_cad_SendData>
	arg_int--;
 8002946:	7abb      	ldrb	r3, [r7, #10]
 8002948:	3b01      	subs	r3, #1
 800294a:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 800294c:	7abb      	ldrb	r3, [r7, #10]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f3      	bne.n	800293a <u8x8_d_st7565_common+0xa2>
      
      u8x8_cad_EndTransfer(u8x8);
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f7ff fef9 	bl	800274a <u8x8_cad_EndTransfer>
      break;
 8002958:	e020      	b.n	800299c <u8x8_d_st7565_common+0x104>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 800295a:	7abb      	ldrb	r3, [r7, #10]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d104      	bne.n	800296a <u8x8_d_st7565_common+0xd2>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
 8002960:	4911      	ldr	r1, [pc, #68]	@ (80029a8 <u8x8_d_st7565_common+0x110>)
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f7ff ff01 	bl	800276a <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
      break;
 8002968:	e018      	b.n	800299c <u8x8_d_st7565_common+0x104>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
 800296a:	4910      	ldr	r1, [pc, #64]	@ (80029ac <u8x8_d_st7565_common+0x114>)
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f7ff fefc 	bl	800276a <u8x8_cad_SendSequence>
      break;
 8002972:	e013      	b.n	800299c <u8x8_d_st7565_common+0x104>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f7ff fed8 	bl	800272a <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800297a:	2181      	movs	r1, #129	@ 0x81
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f7ff fe9d 	bl	80026bc <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
 8002982:	7abb      	ldrb	r3, [r7, #10]
 8002984:	089b      	lsrs	r3, r3, #2
 8002986:	b2db      	uxtb	r3, r3
 8002988:	4619      	mov	r1, r3
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f7ff fea8 	bl	80026e0 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f7ff feda 	bl	800274a <u8x8_cad_EndTransfer>
      break;
 8002996:	e001      	b.n	800299c <u8x8_d_st7565_common+0x104>
#endif
    default:
      return 0;
 8002998:	2300      	movs	r3, #0
 800299a:	e000      	b.n	800299e <u8x8_d_st7565_common+0x106>
  }
  return 1;
 800299c:	2301      	movs	r3, #1
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	0800b488 	.word	0x0800b488
 80029ac:	0800b490 	.word	0x0800b490

080029b0 <u8x8_d_st7565_64128n>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_64128n(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	607b      	str	r3, [r7, #4]
 80029ba:	460b      	mov	r3, r1
 80029bc:	72fb      	strb	r3, [r7, #11]
 80029be:	4613      	mov	r3, r2
 80029c0:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 80029c2:	7aba      	ldrb	r2, [r7, #10]
 80029c4:	7af9      	ldrb	r1, [r7, #11]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f7ff ff65 	bl	8002898 <u8x8_d_st7565_common>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d131      	bne.n	8002a38 <u8x8_d_st7565_64128n+0x88>
  {
    /* msg not handled, then try here */
    switch(msg)
 80029d4:	7afb      	ldrb	r3, [r7, #11]
 80029d6:	2b0d      	cmp	r3, #13
 80029d8:	d013      	beq.n	8002a02 <u8x8_d_st7565_64128n+0x52>
 80029da:	2b0d      	cmp	r3, #13
 80029dc:	dc2a      	bgt.n	8002a34 <u8x8_d_st7565_64128n+0x84>
 80029de:	2b09      	cmp	r3, #9
 80029e0:	d002      	beq.n	80029e8 <u8x8_d_st7565_64128n+0x38>
 80029e2:	2b0a      	cmp	r3, #10
 80029e4:	d005      	beq.n	80029f2 <u8x8_d_st7565_64128n+0x42>
 80029e6:	e025      	b.n	8002a34 <u8x8_d_st7565_64128n+0x84>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_64128n_display_info);
 80029e8:	4916      	ldr	r1, [pc, #88]	@ (8002a44 <u8x8_d_st7565_64128n+0x94>)
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 f832 	bl	8002a54 <u8x8_d_helper_display_setup_memory>
	break;
 80029f0:	e022      	b.n	8002a38 <u8x8_d_st7565_64128n+0x88>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 f842 	bl	8002a7c <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_64128n_init_seq);
 80029f8:	4913      	ldr	r1, [pc, #76]	@ (8002a48 <u8x8_d_st7565_64128n+0x98>)
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f7ff feb5 	bl	800276a <u8x8_cad_SendSequence>
	break;
 8002a00:	e01a      	b.n	8002a38 <u8x8_d_st7565_64128n+0x88>
      case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
	if ( arg_int == 0 )
 8002a02:	7abb      	ldrb	r3, [r7, #10]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10a      	bne.n	8002a1e <u8x8_d_st7565_64128n+0x6e>
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
 8002a08:	4910      	ldr	r1, [pc, #64]	@ (8002a4c <u8x8_d_st7565_64128n+0x9c>)
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f7ff fead 	bl	800276a <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	7c9a      	ldrb	r2, [r3, #18]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	else
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
	}	
	break;
 8002a1c:	e00c      	b.n	8002a38 <u8x8_d_st7565_64128n+0x88>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
 8002a1e:	490c      	ldr	r1, [pc, #48]	@ (8002a50 <u8x8_d_st7565_64128n+0xa0>)
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f7ff fea2 	bl	800276a <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	7cda      	ldrb	r2, [r3, #19]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	break;
 8002a32:	e001      	b.n	8002a38 <u8x8_d_st7565_64128n+0x88>
      default:
	return 0;		/* msg unknown */
 8002a34:	2300      	movs	r3, #0
 8002a36:	e000      	b.n	8002a3a <u8x8_d_st7565_64128n+0x8a>
    }
  }
  return 1;
 8002a38:	2301      	movs	r3, #1
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	0800b4c8 	.word	0x0800b4c8
 8002a48:	0800b4a8 	.word	0x0800b4a8
 8002a4c:	0800b498 	.word	0x0800b498
 8002a50:	0800b4a0 	.word	0x0800b4a0

08002a54 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	7c9a      	ldrb	r2, [r3, #18]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8002a7c:	b590      	push	{r4, r7, lr}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	695c      	ldr	r4, [r3, #20]
 8002a88:	2300      	movs	r3, #0
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2128      	movs	r1, #40	@ 0x28
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68dc      	ldr	r4, [r3, #12]
 8002a96:	2300      	movs	r3, #0
 8002a98:	2200      	movs	r2, #0
 8002a9a:	2114      	movs	r1, #20
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	214b      	movs	r1, #75	@ 0x4b
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 f897 	bl	8002bd8 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	791b      	ldrb	r3, [r3, #4]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	2129      	movs	r1, #41	@ 0x29
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 f88f 	bl	8002bd8 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8002aba:	2200      	movs	r2, #0
 8002abc:	214b      	movs	r1, #75	@ 0x4b
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f88a 	bl	8002bd8 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	791b      	ldrb	r3, [r3, #4]
 8002aca:	461a      	mov	r2, r3
 8002acc:	2129      	movs	r1, #41	@ 0x29
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f882 	bl	8002bd8 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	214b      	movs	r1, #75	@ 0x4b
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f87d 	bl	8002bd8 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	795b      	ldrb	r3, [r3, #5]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	2129      	movs	r1, #41	@ 0x29
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f875 	bl	8002bd8 <u8x8_gpio_call>
}    
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd90      	pop	{r4, r7, pc}

08002af6 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8002af6:	b590      	push	{r4, r7, lr}
 8002af8:	b085      	sub	sp, #20
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
 8002afe:	4608      	mov	r0, r1
 8002b00:	4611      	mov	r1, r2
 8002b02:	461a      	mov	r2, r3
 8002b04:	4603      	mov	r3, r0
 8002b06:	70fb      	strb	r3, [r7, #3]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	70bb      	strb	r3, [r7, #2]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8002b10:	78fb      	ldrb	r3, [r7, #3]
 8002b12:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8002b14:	78bb      	ldrb	r3, [r7, #2]
 8002b16:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8002b18:	787b      	ldrb	r3, [r7, #1]
 8002b1a:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8002b1c:	6a3b      	ldr	r3, [r7, #32]
 8002b1e:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689c      	ldr	r4, [r3, #8]
 8002b24:	f107 0308 	add.w	r3, r7, #8
 8002b28:	2201      	movs	r2, #1
 8002b2a:	210f      	movs	r1, #15
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	47a0      	blx	r4
 8002b30:	4603      	mov	r3, r0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd90      	pop	{r4, r7, pc}

08002b3a <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8002b3a:	b590      	push	{r4, r7, lr}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689c      	ldr	r4, [r3, #8]
 8002b46:	2300      	movs	r3, #0
 8002b48:	2200      	movs	r2, #0
 8002b4a:	2109      	movs	r1, #9
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	47a0      	blx	r4
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd90      	pop	{r4, r7, pc}

08002b58 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8002b58:	b590      	push	{r4, r7, lr}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689c      	ldr	r4, [r3, #8]
 8002b64:	2300      	movs	r3, #0
 8002b66:	2200      	movs	r2, #0
 8002b68:	210a      	movs	r1, #10
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd90      	pop	{r4, r7, pc}

08002b76 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8002b76:	b590      	push	{r4, r7, lr}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
 8002b7e:	460b      	mov	r3, r1
 8002b80:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689c      	ldr	r4, [r3, #8]
 8002b86:	78fa      	ldrb	r2, [r7, #3]
 8002b88:	2300      	movs	r3, #0
 8002b8a:	210b      	movs	r1, #11
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	47a0      	blx	r4
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd90      	pop	{r4, r7, pc}

08002b98 <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 8002b98:	b590      	push	{r4, r7, lr}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689c      	ldr	r4, [r3, #8]
 8002ba8:	78fa      	ldrb	r2, [r7, #3]
 8002baa:	2300      	movs	r3, #0
 8002bac:	210e      	movs	r1, #14
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	47a0      	blx	r4
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd90      	pop	{r4, r7, pc}

08002bba <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8002bba:	b590      	push	{r4, r7, lr}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	689c      	ldr	r4, [r3, #8]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	2200      	movs	r2, #0
 8002bca:	2110      	movs	r1, #16
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	47a0      	blx	r4
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd90      	pop	{r4, r7, pc}

08002bd8 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8002bd8:	b590      	push	{r4, r7, lr}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	70fb      	strb	r3, [r7, #3]
 8002be4:	4613      	mov	r3, r2
 8002be6:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	695c      	ldr	r4, [r3, #20]
 8002bec:	78ba      	ldrb	r2, [r7, #2]
 8002bee:	78f9      	ldrb	r1, [r7, #3]
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	47a0      	blx	r4
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd90      	pop	{r4, r7, pc}

08002bfe <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b085      	sub	sp, #20
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	607b      	str	r3, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	72fb      	strb	r3, [r7, #11]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
	...

08002c20 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a11      	ldr	r2, [pc, #68]	@ (8002c78 <u8x8_SetupDefaults+0x58>)
 8002c32:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a10      	ldr	r2, [pc, #64]	@ (8002c78 <u8x8_SetupDefaults+0x58>)
 8002c38:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a0e      	ldr	r2, [pc, #56]	@ (8002c78 <u8x8_SetupDefaults+0x58>)
 8002c3e:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a0d      	ldr	r2, [pc, #52]	@ (8002c78 <u8x8_SetupDefaults+0x58>)
 8002c44:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	22ff      	movs	r2, #255	@ 0xff
 8002c60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	22ff      	movs	r2, #255	@ 0xff
 8002c68:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	08002bff 	.word	0x08002bff

08002c7c <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
 8002c88:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f7ff ffc8 	bl	8002c20 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f7ff ff46 	bl	8002b3a <u8x8_SetupMemory>
}
 8002cae:	bf00      	nop
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <INA229_writeReg>:
/*
 *  ======== INA229_writeReg ========
 * Write register
 */
void INA229_writeReg(INA229_Handle sensor, uint8_t regAddr, uint16_t value)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af02      	add	r7, sp, #8
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	70fb      	strb	r3, [r7, #3]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	803b      	strh	r3, [r7, #0]
    uint8_t txBuf[3] = {0}; //All writable registers are 2 bytes
 8002cc8:	4b17      	ldr	r3, [pc, #92]	@ (8002d28 <INA229_writeReg+0x70>)
 8002cca:	881b      	ldrh	r3, [r3, #0]
 8002ccc:	81bb      	strh	r3, [r7, #12]
 8002cce:	2300      	movs	r3, #0
 8002cd0:	73bb      	strb	r3, [r7, #14]
    uint8_t rxBuf[3] = {0};
 8002cd2:	4b15      	ldr	r3, [pc, #84]	@ (8002d28 <INA229_writeReg+0x70>)
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	813b      	strh	r3, [r7, #8]
 8002cd8:	2300      	movs	r3, #0
 8002cda:	72bb      	strb	r3, [r7, #10]

    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002cdc:	78fb      	ldrb	r3, [r7, #3]
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	733b      	strb	r3, [r7, #12]
    txBuf[1] = MSB(value);
 8002ce4:	883b      	ldrh	r3, [r7, #0]
 8002ce6:	0a1b      	lsrs	r3, r3, #8
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	737b      	strb	r3, [r7, #13]
    txBuf[2] = LSB(value);
 8002cee:	883b      	ldrh	r3, [r7, #0]
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	73bb      	strb	r3, [r7, #14]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	7f18      	ldrb	r0, [r3, #28]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	7f59      	ldrb	r1, [r3, #29]
 8002cfc:	f107 020c 	add.w	r2, r7, #12
 8002d00:	f107 0308 	add.w	r3, r7, #8
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	4613      	mov	r3, r2
 8002d08:	2203      	movs	r2, #3
 8002d0a:	f003 fec7 	bl	8006a9c <mcu_spiTransfer>

    //check for change in ADCRANGE 
    if(regAddr == INA229_config_register)
 8002d0e:	78fb      	ldrb	r3, [r7, #3]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d105      	bne.n	8002d20 <INA229_writeReg+0x68>
    {
        sensor->adcrange = value & INA229_config_register_adcrange_4096mV;
 8002d14:	883b      	ldrh	r3, [r7, #0]
 8002d16:	f003 0310 	and.w	r3, r3, #16
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	82da      	strh	r2, [r3, #22]
    }
}
 8002d20:	bf00      	nop
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	0800a7c8 	.word	0x0800a7c8

08002d2c <INA229_config>:
/*
 *  ======== INA229_config ========
 * Configure device with current settings.
 */
void INA229_config(INA229_Handle sensor)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
    //Initialize the bus containing this sensor
    mcu_spiInit(sensor->busId);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	7f1b      	ldrb	r3, [r3, #28]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f003 fea3 	bl	8006a84 <mcu_spiInit>

    //Write sensor Configuration Registers
    INA229_writeReg(sensor, INA229_config_register, sensor->configRegister);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	881b      	ldrh	r3, [r3, #0]
 8002d42:	461a      	mov	r2, r3
 8002d44:	2100      	movs	r1, #0
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7ff ffb6 	bl	8002cb8 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_adc_config_register, sensor->adcConfigRegister);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	885b      	ldrh	r3, [r3, #2]
 8002d50:	461a      	mov	r2, r3
 8002d52:	2101      	movs	r1, #1
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f7ff ffaf 	bl	8002cb8 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_shunt_cal_register, sensor->shuntCalRegister);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	889b      	ldrh	r3, [r3, #4]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	2102      	movs	r1, #2
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7ff ffa8 	bl	8002cb8 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_shunt_tempco_register, sensor->shuntTempcoRegister);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	88db      	ldrh	r3, [r3, #6]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	2103      	movs	r1, #3
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7ff ffa1 	bl	8002cb8 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_diag_alrt_register, sensor->diagAlrtRegister);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	891b      	ldrh	r3, [r3, #8]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	210b      	movs	r1, #11
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7ff ff9a 	bl	8002cb8 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_sovl_register, sensor->sovlRegister);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	895b      	ldrh	r3, [r3, #10]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	210c      	movs	r1, #12
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f7ff ff93 	bl	8002cb8 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_suvl_register, sensor->suvlRegister);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	899b      	ldrh	r3, [r3, #12]
 8002d96:	461a      	mov	r2, r3
 8002d98:	210d      	movs	r1, #13
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7ff ff8c 	bl	8002cb8 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_bovl_register, sensor->bovlRegister);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	89db      	ldrh	r3, [r3, #14]
 8002da4:	461a      	mov	r2, r3
 8002da6:	210e      	movs	r1, #14
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff ff85 	bl	8002cb8 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_buvl_register, sensor->buvlRegister);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	8a1b      	ldrh	r3, [r3, #16]
 8002db2:	461a      	mov	r2, r3
 8002db4:	210f      	movs	r1, #15
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7ff ff7e 	bl	8002cb8 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_temp_limit_register, sensor->tempLimitRegister);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	8a5b      	ldrh	r3, [r3, #18]
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	2110      	movs	r1, #16
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7ff ff77 	bl	8002cb8 <INA229_writeReg>
    INA229_writeReg(sensor, INA229_pwr_limit_register, sensor->pwrLimitRegister);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	8a9b      	ldrh	r3, [r3, #20]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	2111      	movs	r1, #17
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7ff ff70 	bl	8002cb8 <INA229_writeReg>

}
 8002dd8:	bf00      	nop
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <INA229_readReg>:
/*
 *  ======== INA229_readReg ========
 *  Read register
 */
uint64_t INA229_readReg(INA229_Handle sensor, uint8_t regAddr)
{
 8002de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002de4:	b08b      	sub	sp, #44	@ 0x2c
 8002de6:	af02      	add	r7, sp, #8
 8002de8:	6078      	str	r0, [r7, #4]
 8002dea:	460b      	mov	r3, r1
 8002dec:	70fb      	strb	r3, [r7, #3]
    uint64_t value;
    int i;
    
    uint8_t txBuf[1] = {0};
 8002dee:	2300      	movs	r3, #0
 8002df0:	743b      	strb	r3, [r7, #16]
    uint8_t rxBuf[6] = {0}; //max buffer size
 8002df2:	2300      	movs	r3, #0
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	2300      	movs	r3, #0
 8002df8:	81bb      	strh	r3, [r7, #12]

    txBuf[0] = (regAddr << 2 ) | 0x01; //Address + read bit (ending in 1)
 8002dfa:	78fb      	ldrb	r3, [r7, #3]
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	b25b      	sxtb	r3, r3
 8002e00:	f043 0301 	orr.w	r3, r3, #1
 8002e04:	b25b      	sxtb	r3, r3
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	743b      	strb	r3, [r7, #16]

    //Read register
    mcu_spiTransfer(sensor->busId, sensor->devCS, INA229_regSize[regAddr]+1, txBuf, rxBuf);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	7f18      	ldrb	r0, [r3, #28]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	7f59      	ldrb	r1, [r3, #29]
 8002e12:	78fb      	ldrb	r3, [r7, #3]
 8002e14:	4a1f      	ldr	r2, [pc, #124]	@ (8002e94 <INA229_readReg+0xb4>)
 8002e16:	5cd3      	ldrb	r3, [r2, r3]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	f107 0610 	add.w	r6, r7, #16
 8002e20:	f107 0308 	add.w	r3, r7, #8
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	4633      	mov	r3, r6
 8002e28:	f003 fe38 	bl	8006a9c <mcu_spiTransfer>

    //Combine bytes
    value = 0; // initialize to 0, toss rxBuf[0];
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	f04f 0300 	mov.w	r3, #0
 8002e34:	e9c7 2306 	strd	r2, r3, [r7, #24]

    for(i = 1; i < INA229_regSize[regAddr]+1; i++)
 8002e38:	2301      	movs	r3, #1
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	e01b      	b.n	8002e76 <INA229_readReg+0x96>
    {
        value = (value << 8) | rxBuf[i];
 8002e3e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	020b      	lsls	r3, r1, #8
 8002e4c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002e50:	0202      	lsls	r2, r0, #8
 8002e52:	f107 0008 	add.w	r0, r7, #8
 8002e56:	6979      	ldr	r1, [r7, #20]
 8002e58:	4401      	add	r1, r0
 8002e5a:	7809      	ldrb	r1, [r1, #0]
 8002e5c:	b2c9      	uxtb	r1, r1
 8002e5e:	2000      	movs	r0, #0
 8002e60:	460c      	mov	r4, r1
 8002e62:	4605      	mov	r5, r0
 8002e64:	ea42 0804 	orr.w	r8, r2, r4
 8002e68:	ea43 0905 	orr.w	r9, r3, r5
 8002e6c:	e9c7 8906 	strd	r8, r9, [r7, #24]
    for(i = 1; i < INA229_regSize[regAddr]+1; i++)
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	3301      	adds	r3, #1
 8002e74:	617b      	str	r3, [r7, #20]
 8002e76:	78fb      	ldrb	r3, [r7, #3]
 8002e78:	4a06      	ldr	r2, [pc, #24]	@ (8002e94 <INA229_readReg+0xb4>)
 8002e7a:	5cd3      	ldrb	r3, [r2, r3]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	4293      	cmp	r3, r2
 8002e82:	dddc      	ble.n	8002e3e <INA229_readReg+0x5e>
    }

    return value;
 8002e84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8002e88:	4610      	mov	r0, r2
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	3724      	adds	r7, #36	@ 0x24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e94:	0800b4e0 	.word	0x0800b4e0

08002e98 <INA229_getVBUS_V>:
/*
 *  ======== INA229_getVBUS_V ========
 *  Get VBUS value (V)
 */
float INA229_getVBUS_V(INA229_Handle sensor)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
    uint64_t value = INA229_readReg(sensor, INA229_vbus_register);
 8002ea0:	2105      	movs	r1, #5
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7ff ff9c 	bl	8002de0 <INA229_readReg>
 8002ea8:	e9c7 0102 	strd	r0, r1, [r7, #8]
    float data;

    //Remove reserved bits
    value = value >> 4;
 8002eac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	f04f 0300 	mov.w	r3, #0
 8002eb8:	0902      	lsrs	r2, r0, #4
 8002eba:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8002ebe:	090b      	lsrs	r3, r1, #4
 8002ec0:	e9c7 2302 	strd	r2, r3, [r7, #8]

    //Convert for 2's compliment and signed value (though always positive)
    if(value > 0x7FFFF)
 8002ec4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ec8:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 8002ecc:	f173 0300 	sbcs.w	r3, r3, #0
 8002ed0:	d30c      	bcc.n	8002eec <INA229_getVBUS_V+0x54>
    {
        data = (float)value - 0x100000; //left for redundancy and error checking, should never get used
 8002ed2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ed6:	f7fd fec1 	bl	8000c5c <__aeabi_ul2f>
 8002eda:	ee07 0a10 	vmov	s14, r0
 8002ede:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 8002f50 <INA229_getVBUS_V+0xb8>
 8002ee2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ee6:	edc7 7a05 	vstr	s15, [r7, #20]
 8002eea:	e005      	b.n	8002ef8 <INA229_getVBUS_V+0x60>
    }
    else
    {
        data = (float)value;
 8002eec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ef0:	f7fd feb4 	bl	8000c5c <__aeabi_ul2f>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	617b      	str	r3, [r7, #20]
    }

    //Convert to V
    data = (data * 195.3125) / 1000000;
 8002ef8:	6978      	ldr	r0, [r7, #20]
 8002efa:	f7fd fb2d 	bl	8000558 <__aeabi_f2d>
 8002efe:	a310      	add	r3, pc, #64	@ (adr r3, 8002f40 <INA229_getVBUS_V+0xa8>)
 8002f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f04:	f7fd fb80 	bl	8000608 <__aeabi_dmul>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4610      	mov	r0, r2
 8002f0e:	4619      	mov	r1, r3
 8002f10:	a30d      	add	r3, pc, #52	@ (adr r3, 8002f48 <INA229_getVBUS_V+0xb0>)
 8002f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f16:	f7fd fca1 	bl	800085c <__aeabi_ddiv>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4610      	mov	r0, r2
 8002f20:	4619      	mov	r1, r3
 8002f22:	f7fd fd83 	bl	8000a2c <__aeabi_d2f>
 8002f26:	4603      	mov	r3, r0
 8002f28:	617b      	str	r3, [r7, #20]

    return data;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	ee07 3a90 	vmov	s15, r3
}
 8002f30:	eeb0 0a67 	vmov.f32	s0, s15
 8002f34:	3718      	adds	r7, #24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	f3af 8000 	nop.w
 8002f40:	00000000 	.word	0x00000000
 8002f44:	40686a00 	.word	0x40686a00
 8002f48:	00000000 	.word	0x00000000
 8002f4c:	412e8480 	.word	0x412e8480
 8002f50:	49800000 	.word	0x49800000

08002f54 <INA229_getDIETEMP_C>:
/*
 *  ======== INA229_getDIETEMP_C ========
 *  Get DIETMEP value (C)
 */
float INA229_getDIETEMP_C(INA229_Handle sensor)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
    uint64_t value = INA229_readReg(sensor, INA229_dietemp_register);
 8002f5c:	2106      	movs	r1, #6
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7ff ff3e 	bl	8002de0 <INA229_readReg>
 8002f64:	e9c7 0102 	strd	r0, r1, [r7, #8]
    float data;

    //Convert for 2's compliment and signed value
    if(value > 0x7FFF)
 8002f68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f6c:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8002f70:	f173 0300 	sbcs.w	r3, r3, #0
 8002f74:	d30c      	bcc.n	8002f90 <INA229_getDIETEMP_C+0x3c>
    {
        data = (float)value - 0x10000; 
 8002f76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f7a:	f7fd fe6f 	bl	8000c5c <__aeabi_ul2f>
 8002f7e:	ee07 0a10 	vmov	s14, r0
 8002f82:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8002fe0 <INA229_getDIETEMP_C+0x8c>
 8002f86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f8a:	edc7 7a05 	vstr	s15, [r7, #20]
 8002f8e:	e005      	b.n	8002f9c <INA229_getDIETEMP_C+0x48>
    }
    else
    {
        data = (float)value;
 8002f90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f94:	f7fd fe62 	bl	8000c5c <__aeabi_ul2f>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	617b      	str	r3, [r7, #20]
    }

    //Convert to C
    data = (data * 7.8125) / 1000;
 8002f9c:	6978      	ldr	r0, [r7, #20]
 8002f9e:	f7fd fadb 	bl	8000558 <__aeabi_f2d>
 8002fa2:	f04f 0200 	mov.w	r2, #0
 8002fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8002fe4 <INA229_getDIETEMP_C+0x90>)
 8002fa8:	f7fd fb2e 	bl	8000608 <__aeabi_dmul>
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	f04f 0200 	mov.w	r2, #0
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe8 <INA229_getDIETEMP_C+0x94>)
 8002fba:	f7fd fc4f 	bl	800085c <__aeabi_ddiv>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4610      	mov	r0, r2
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	f7fd fd31 	bl	8000a2c <__aeabi_d2f>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	617b      	str	r3, [r7, #20]

    return data;
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	ee07 3a90 	vmov	s15, r3
}
 8002fd4:	eeb0 0a67 	vmov.f32	s0, s15
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	47800000 	.word	0x47800000
 8002fe4:	401f4000 	.word	0x401f4000
 8002fe8:	408f4000 	.word	0x408f4000

08002fec <LTC6811_init_reg_limits>:

/* Initialize the Register limits */
void LTC6811_init_reg_limits(uint8_t total_ic, //The number of ICs in the system
        cell_asic *ic  //A two dimensional array where data will be written
        )
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	6039      	str	r1, [r7, #0]
 8002ff6:	71fb      	strb	r3, [r7, #7]
    uint8_t cic;
    for (cic = 0; cic < total_ic; cic++)
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	73fb      	strb	r3, [r7, #15]
 8002ffc:	e044      	b.n	8003088 <LTC6811_init_reg_limits+0x9c>
    {
        ic[cic].ic_reg.cell_channels = 12;
 8002ffe:	7bfa      	ldrb	r2, [r7, #15]
 8003000:	4613      	mov	r3, r2
 8003002:	019b      	lsls	r3, r3, #6
 8003004:	4413      	add	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	461a      	mov	r2, r3
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	4413      	add	r3, r2
 800300e:	220c      	movs	r2, #12
 8003010:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
        ic[cic].ic_reg.stat_channels = 4;
 8003014:	7bfa      	ldrb	r2, [r7, #15]
 8003016:	4613      	mov	r3, r2
 8003018:	019b      	lsls	r3, r3, #6
 800301a:	4413      	add	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	461a      	mov	r2, r3
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	4413      	add	r3, r2
 8003024:	2204      	movs	r2, #4
 8003026:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
        ic[cic].ic_reg.aux_channels = 6;
 800302a:	7bfa      	ldrb	r2, [r7, #15]
 800302c:	4613      	mov	r3, r2
 800302e:	019b      	lsls	r3, r3, #6
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	461a      	mov	r2, r3
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	4413      	add	r3, r2
 800303a:	2206      	movs	r2, #6
 800303c:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
        ic[cic].ic_reg.num_cv_reg = 4;
 8003040:	7bfa      	ldrb	r2, [r7, #15]
 8003042:	4613      	mov	r3, r2
 8003044:	019b      	lsls	r3, r3, #6
 8003046:	4413      	add	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	461a      	mov	r2, r3
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	4413      	add	r3, r2
 8003050:	2204      	movs	r2, #4
 8003052:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
        ic[cic].ic_reg.num_gpio_reg = 2;
 8003056:	7bfa      	ldrb	r2, [r7, #15]
 8003058:	4613      	mov	r3, r2
 800305a:	019b      	lsls	r3, r3, #6
 800305c:	4413      	add	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	461a      	mov	r2, r3
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	4413      	add	r3, r2
 8003066:	2202      	movs	r2, #2
 8003068:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
        ic[cic].ic_reg.num_stat_reg = 3;
 800306c:	7bfa      	ldrb	r2, [r7, #15]
 800306e:	4613      	mov	r3, r2
 8003070:	019b      	lsls	r3, r3, #6
 8003072:	4413      	add	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	461a      	mov	r2, r3
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	4413      	add	r3, r2
 800307c:	2203      	movs	r2, #3
 800307e:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
    for (cic = 0; cic < total_ic; cic++)
 8003082:	7bfb      	ldrb	r3, [r7, #15]
 8003084:	3301      	adds	r3, #1
 8003086:	73fb      	strb	r3, [r7, #15]
 8003088:	7bfa      	ldrb	r2, [r7, #15]
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	429a      	cmp	r2, r3
 800308e:	d3b6      	bcc.n	8002ffe <LTC6811_init_reg_limits+0x12>
    }
}
 8003090:	bf00      	nop
 8003092:	bf00      	nop
 8003094:	3714      	adds	r7, #20
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr

0800309e <LTC6811_wrcfg>:
 order so the last device's configuration is written first.
 */
void LTC6811_wrcfg(uint8_t total_ic, //The number of ICs being written to
        cell_asic *ic //A two dimensional array of the configuration data that will be written
        )
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b082      	sub	sp, #8
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	4603      	mov	r3, r0
 80030a6:	6039      	str	r1, [r7, #0]
 80030a8:	71fb      	strb	r3, [r7, #7]
    LTC681x_wrcfg(total_ic, ic);
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	6839      	ldr	r1, [r7, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 f9a4 	bl	80033fc <LTC681x_wrcfg>
}
 80030b4:	bf00      	nop
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <LTC6811_adcv>:
/* Starts cell voltage conversion */
void LTC6811_adcv(uint8_t MD, //ADC Mode
        uint8_t DCP, //Discharge Permit
        uint8_t CH //Cell Channels to be measured
        )
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	4603      	mov	r3, r0
 80030c4:	71fb      	strb	r3, [r7, #7]
 80030c6:	460b      	mov	r3, r1
 80030c8:	71bb      	strb	r3, [r7, #6]
 80030ca:	4613      	mov	r3, r2
 80030cc:	717b      	strb	r3, [r7, #5]
    LTC681x_adcv(MD, DCP, CH);
 80030ce:	797a      	ldrb	r2, [r7, #5]
 80030d0:	79b9      	ldrb	r1, [r7, #6]
 80030d2:	79fb      	ldrb	r3, [r7, #7]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 fa0f 	bl	80034f8 <LTC681x_adcv>
}
 80030da:	bf00      	nop
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <LTC6811_adax>:

/* Start a GPIO and Vref2 Conversion */
void LTC6811_adax(uint8_t MD, //ADC Mode
        uint8_t CHG //GPIO Channels to be measured
        )
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	4603      	mov	r3, r0
 80030ea:	460a      	mov	r2, r1
 80030ec:	71fb      	strb	r3, [r7, #7]
 80030ee:	4613      	mov	r3, r2
 80030f0:	71bb      	strb	r3, [r7, #6]
    LTC681x_adax(MD, CHG);
 80030f2:	79ba      	ldrb	r2, [r7, #6]
 80030f4:	79fb      	ldrb	r3, [r7, #7]
 80030f6:	4611      	mov	r1, r2
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 fa28 	bl	800354e <LTC681x_adax>
}
 80030fe:	bf00      	nop
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <LTC6811_rdcv>:
 */
uint8_t LTC6811_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
        uint8_t total_ic, // The number of ICs in the system
        cell_asic *ic // Array of the parsed cell codes
        )
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b084      	sub	sp, #16
 800310a:	af00      	add	r7, sp, #0
 800310c:	4603      	mov	r3, r0
 800310e:	603a      	str	r2, [r7, #0]
 8003110:	71fb      	strb	r3, [r7, #7]
 8003112:	460b      	mov	r3, r1
 8003114:	71bb      	strb	r3, [r7, #6]
    int8_t pec_error = 0;
 8003116:	2300      	movs	r3, #0
 8003118:	73fb      	strb	r3, [r7, #15]
    pec_error = LTC681x_rdcv(reg, total_ic, ic);
 800311a:	79b9      	ldrb	r1, [r7, #6]
 800311c:	79fb      	ldrb	r3, [r7, #7]
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	4618      	mov	r0, r3
 8003122:	f000 fa39 	bl	8003598 <LTC681x_rdcv>
 8003126:	4603      	mov	r3, r0
 8003128:	73fb      	strb	r3, [r7, #15]
    return (pec_error);
 800312a:	7bfb      	ldrb	r3, [r7, #15]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <LTC6811_rdaux>:
 */
int8_t LTC6811_rdaux(uint8_t reg, //Determines which GPIO voltage register is read back.
        uint8_t total_ic, //The number of ICs in the system
        cell_asic *ic //A two dimensional array of the gpio voltage codes.
        )
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	603a      	str	r2, [r7, #0]
 800313e:	71fb      	strb	r3, [r7, #7]
 8003140:	460b      	mov	r3, r1
 8003142:	71bb      	strb	r3, [r7, #6]
    int8_t pec_error = 0;
 8003144:	2300      	movs	r3, #0
 8003146:	73fb      	strb	r3, [r7, #15]
    LTC681x_rdaux(reg, total_ic, ic);
 8003148:	79b9      	ldrb	r1, [r7, #6]
 800314a:	79fb      	ldrb	r3, [r7, #7]
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f000 fad8 	bl	8003704 <LTC681x_rdaux>
    return (pec_error);
 8003154:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <LTC6811_pollAdc>:
    return (LTC681x_pladc());
}

//This function will block operation until the ADC has finished it's conversion */
uint32_t LTC6811_pollAdc()
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
    return (LTC681x_pollAdc());
 8003164:	f000 fc94 	bl	8003a90 <LTC681x_pollAdc>
 8003168:	4603      	mov	r3, r0
}
 800316a:	4618      	mov	r0, r3
 800316c:	bd80      	pop	{r7, pc}

0800316e <LTC6811_clraux>:
/*
 The command clears the Auxiliary registers and initializes all values to 1.
 The register will read back hexadecimal 0xFF after the command is sent.
 */
void LTC6811_clraux()
{
 800316e:	b580      	push	{r7, lr}
 8003170:	af00      	add	r7, sp, #0
    LTC681x_clraux();
 8003172:	f000 fccf 	bl	8003b14 <LTC681x_clraux>
}
 8003176:	bf00      	nop
 8003178:	bd80      	pop	{r7, pc}

0800317a <LTC6811_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC6811_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that will store the data
        )
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b082      	sub	sp, #8
 800317e:	af00      	add	r7, sp, #0
 8003180:	4603      	mov	r3, r0
 8003182:	6039      	str	r1, [r7, #0]
 8003184:	71fb      	strb	r3, [r7, #7]
    LTC681x_reset_crc_count(total_ic, ic);
 8003186:	79fb      	ldrb	r3, [r7, #7]
 8003188:	6839      	ldr	r1, [r7, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	f000 feb6 	bl	8003efc <LTC681x_reset_crc_count>
}
 8003190:	bf00      	nop
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <LTC6811_init_cfg>:

/* Helper function to initialize CFG variables.*/
void LTC6811_init_cfg(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that will store the data
        )
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	6039      	str	r1, [r7, #0]
 80031a2:	71fb      	strb	r3, [r7, #7]
    LTC681x_init_cfg(total_ic, ic);
 80031a4:	79fb      	ldrb	r3, [r7, #7]
 80031a6:	6839      	ldr	r1, [r7, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 ff19 	bl	8003fe0 <LTC681x_init_cfg>
}
 80031ae:	bf00      	nop
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <LTC6811_set_cfgr>:
        bool dcc[12], // The DCC bit
        bool dcto[4], // The Dcto bit
        uint16_t uv, // The UV bit
        uint16_t ov // The OV bit
        )
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b088      	sub	sp, #32
 80031ba:	af06      	add	r7, sp, #24
 80031bc:	6039      	str	r1, [r7, #0]
 80031be:	4611      	mov	r1, r2
 80031c0:	461a      	mov	r2, r3
 80031c2:	4603      	mov	r3, r0
 80031c4:	71fb      	strb	r3, [r7, #7]
 80031c6:	460b      	mov	r3, r1
 80031c8:	71bb      	strb	r3, [r7, #6]
 80031ca:	4613      	mov	r3, r2
 80031cc:	717b      	strb	r3, [r7, #5]
    LTC681x_set_cfgr(nIC, ic, refon, adcopt, gpio, dcc, dcto, uv, ov);
 80031ce:	7979      	ldrb	r1, [r7, #5]
 80031d0:	79ba      	ldrb	r2, [r7, #6]
 80031d2:	79f8      	ldrb	r0, [r7, #7]
 80031d4:	8c3b      	ldrh	r3, [r7, #32]
 80031d6:	9304      	str	r3, [sp, #16]
 80031d8:	8bbb      	ldrh	r3, [r7, #28]
 80031da:	9303      	str	r3, [sp, #12]
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	9302      	str	r3, [sp, #8]
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	9301      	str	r3, [sp, #4]
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	460b      	mov	r3, r1
 80031ea:	6839      	ldr	r1, [r7, #0]
 80031ec:	f000 ff2e 	bl	800404c <LTC681x_set_cfgr>
}
 80031f0:	bf00      	nop
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <wakeup_sleep>:
 * @param parameters   :  Total number of BMS ICs
 * @return Value       :  none
 */

void wakeup_sleep(uint8_t total_ic) //Number of ICs in the system
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	4603      	mov	r3, r0
 8003200:	71fb      	strb	r3, [r7, #7]
    int i;
    for (i = 0; i < total_ic; i++)
 8003202:	2300      	movs	r3, #0
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	e00c      	b.n	8003222 <wakeup_sleep+0x2a>
    {
        cs_low();
 8003208:	f001 fd8a 	bl	8004d20 <cs_low>
        delay_time_us(160);
 800320c:	20a0      	movs	r0, #160	@ 0xa0
 800320e:	f001 fd9f 	bl	8004d50 <delay_time_us>
//       HAL_Delay(2500); // Guarantees the LTC681x will be in standby
        cs_high();
 8003212:	f001 fd91 	bl	8004d38 <cs_high>
        delay_time_us(18);
 8003216:	2012      	movs	r0, #18
 8003218:	f001 fd9a 	bl	8004d50 <delay_time_us>
    for (i = 0; i < total_ic; i++)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	3301      	adds	r3, #1
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	79fb      	ldrb	r3, [r7, #7]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	429a      	cmp	r2, r3
 8003228:	dbee      	blt.n	8003208 <wakeup_sleep+0x10>
//        HAL_Delay(2500);
    }
}
 800322a:	bf00      	nop
 800322c:	bf00      	nop
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <cmd_68>:
 * @brief Description  :  Generic function to write 68xx commands. Function calculates PEC for tx_cmd data.
 * @param parameters   :  transmit commands
 * @return Value       :  none
 */
void cmd_68(uint8_t tx_cmd[2]) //The command to be transmitted
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
    uint8_t cmd[4];
    uint16_t cmd_pec;

    cmd[0] = tx_cmd[0];
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	723b      	strb	r3, [r7, #8]
    cmd[1] = tx_cmd[1];
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	785b      	ldrb	r3, [r3, #1]
 8003246:	727b      	strb	r3, [r7, #9]
    cmd_pec = pec15_calc(2, cmd);
 8003248:	f107 0308 	add.w	r3, r7, #8
 800324c:	4619      	mov	r1, r3
 800324e:	2002      	movs	r0, #2
 8003250:	f000 f8a2 	bl	8003398 <pec15_calc>
 8003254:	4603      	mov	r3, r0
 8003256:	81fb      	strh	r3, [r7, #14]
    cmd[2] = (uint8_t) (cmd_pec >> 8);
 8003258:	89fb      	ldrh	r3, [r7, #14]
 800325a:	0a1b      	lsrs	r3, r3, #8
 800325c:	b29b      	uxth	r3, r3
 800325e:	b2db      	uxtb	r3, r3
 8003260:	72bb      	strb	r3, [r7, #10]
    cmd[3] = (uint8_t) (cmd_pec);
 8003262:	89fb      	ldrh	r3, [r7, #14]
 8003264:	b2db      	uxtb	r3, r3
 8003266:	72fb      	strb	r3, [r7, #11]

    cs_low();
 8003268:	f001 fd5a 	bl	8004d20 <cs_low>
    spi_write_array(4, cmd);
 800326c:	f107 0308 	add.w	r3, r7, #8
 8003270:	4619      	mov	r1, r3
 8003272:	2004      	movs	r0, #4
 8003274:	f001 fd88 	bl	8004d88 <spi_write_array>
    cs_high();
 8003278:	f001 fd5e 	bl	8004d38 <cs_high>
}
 800327c:	bf00      	nop
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <write_68>:
 */
void write_68(uint8_t total_ic, //Number of ICs to be written to
        uint8_t tx_cmd[2], //The command to be transmitted
        uint8_t data[] // Payload Data
        )
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b088      	sub	sp, #32
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
 8003290:	73fb      	strb	r3, [r7, #15]
    const uint8_t BYTES_IN_REG = 6;
 8003292:	2306      	movs	r3, #6
 8003294:	773b      	strb	r3, [r7, #28]
    const uint8_t CMD_LEN = 4 + (8 * total_ic);
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	b2db      	uxtb	r3, r3
 800329c:	3304      	adds	r3, #4
 800329e:	76fb      	strb	r3, [r7, #27]
    uint16_t data_pec;
    uint16_t cmd_pec;
    uint8_t cmd_index;
    uint8_t *cmd;

    cmd = (uint8_t *) malloc(CMD_LEN * sizeof(uint8_t));
 80032a0:	7efb      	ldrb	r3, [r7, #27]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f006 fdd4 	bl	8009e50 <malloc>
 80032a8:	4603      	mov	r3, r0
 80032aa:	617b      	str	r3, [r7, #20]
    cmd[0] = tx_cmd[0];
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	781a      	ldrb	r2, [r3, #0]
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	701a      	strb	r2, [r3, #0]
    cmd[1] = tx_cmd[1];
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	3301      	adds	r3, #1
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	7852      	ldrb	r2, [r2, #1]
 80032bc:	701a      	strb	r2, [r3, #0]
    cmd_pec = pec15_calc(2, cmd);
 80032be:	6979      	ldr	r1, [r7, #20]
 80032c0:	2002      	movs	r0, #2
 80032c2:	f000 f869 	bl	8003398 <pec15_calc>
 80032c6:	4603      	mov	r3, r0
 80032c8:	827b      	strh	r3, [r7, #18]
    cmd[2] = (uint8_t) (cmd_pec >> 8);
 80032ca:	8a7b      	ldrh	r3, [r7, #18]
 80032cc:	0a1b      	lsrs	r3, r3, #8
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	3302      	adds	r3, #2
 80032d4:	b2d2      	uxtb	r2, r2
 80032d6:	701a      	strb	r2, [r3, #0]
    cmd[3] = (uint8_t) (cmd_pec);
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	3303      	adds	r3, #3
 80032dc:	8a7a      	ldrh	r2, [r7, #18]
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	701a      	strb	r2, [r3, #0]

    cmd_index = 4;
 80032e2:	2304      	movs	r3, #4
 80032e4:	77fb      	strb	r3, [r7, #31]
    uint8_t current_ic;
    uint8_t current_byte;
    for (current_ic = total_ic; current_ic > 0; current_ic--) // Executes for each LTC681x, this loops starts with the last IC on the stack.
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
 80032e8:	77bb      	strb	r3, [r7, #30]
 80032ea:	e042      	b.n	8003372 <write_68+0xee>
    { //The first configuration written is received by the last IC in the daisy chain
        for (current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80032ec:	2300      	movs	r3, #0
 80032ee:	777b      	strb	r3, [r7, #29]
 80032f0:	e016      	b.n	8003320 <write_68+0x9c>
        {
            cmd[cmd_index] = data[((current_ic - 1) * 6) + current_byte];
 80032f2:	7fbb      	ldrb	r3, [r7, #30]
 80032f4:	1e5a      	subs	r2, r3, #1
 80032f6:	4613      	mov	r3, r2
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	4413      	add	r3, r2
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	461a      	mov	r2, r3
 8003300:	7f7b      	ldrb	r3, [r7, #29]
 8003302:	4413      	add	r3, r2
 8003304:	461a      	mov	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	441a      	add	r2, r3
 800330a:	7ffb      	ldrb	r3, [r7, #31]
 800330c:	6979      	ldr	r1, [r7, #20]
 800330e:	440b      	add	r3, r1
 8003310:	7812      	ldrb	r2, [r2, #0]
 8003312:	701a      	strb	r2, [r3, #0]
            cmd_index = cmd_index + 1;
 8003314:	7ffb      	ldrb	r3, [r7, #31]
 8003316:	3301      	adds	r3, #1
 8003318:	77fb      	strb	r3, [r7, #31]
        for (current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 800331a:	7f7b      	ldrb	r3, [r7, #29]
 800331c:	3301      	adds	r3, #1
 800331e:	777b      	strb	r3, [r7, #29]
 8003320:	7f7a      	ldrb	r2, [r7, #29]
 8003322:	7f3b      	ldrb	r3, [r7, #28]
 8003324:	429a      	cmp	r2, r3
 8003326:	d3e4      	bcc.n	80032f2 <write_68+0x6e>
        }

        data_pec = (uint16_t) pec15_calc(BYTES_IN_REG,
                                         &data[(current_ic - 1) * 6]); // Calculating the PEC for each ICs configuration register data
 8003328:	7fbb      	ldrb	r3, [r7, #30]
 800332a:	1e5a      	subs	r2, r3, #1
 800332c:	4613      	mov	r3, r2
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	4413      	add	r3, r2
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	461a      	mov	r2, r3
        data_pec = (uint16_t) pec15_calc(BYTES_IN_REG,
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	441a      	add	r2, r3
 800333a:	7f3b      	ldrb	r3, [r7, #28]
 800333c:	4611      	mov	r1, r2
 800333e:	4618      	mov	r0, r3
 8003340:	f000 f82a 	bl	8003398 <pec15_calc>
 8003344:	4603      	mov	r3, r0
 8003346:	823b      	strh	r3, [r7, #16]
        cmd[cmd_index] = (uint8_t) (data_pec >> 8);
 8003348:	8a3b      	ldrh	r3, [r7, #16]
 800334a:	0a1b      	lsrs	r3, r3, #8
 800334c:	b299      	uxth	r1, r3
 800334e:	7ffb      	ldrb	r3, [r7, #31]
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	4413      	add	r3, r2
 8003354:	b2ca      	uxtb	r2, r1
 8003356:	701a      	strb	r2, [r3, #0]
        cmd[cmd_index + 1] = (uint8_t) data_pec;
 8003358:	7ffb      	ldrb	r3, [r7, #31]
 800335a:	3301      	adds	r3, #1
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	4413      	add	r3, r2
 8003360:	8a3a      	ldrh	r2, [r7, #16]
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	701a      	strb	r2, [r3, #0]
        cmd_index = cmd_index + 2;
 8003366:	7ffb      	ldrb	r3, [r7, #31]
 8003368:	3302      	adds	r3, #2
 800336a:	77fb      	strb	r3, [r7, #31]
    for (current_ic = total_ic; current_ic > 0; current_ic--) // Executes for each LTC681x, this loops starts with the last IC on the stack.
 800336c:	7fbb      	ldrb	r3, [r7, #30]
 800336e:	3b01      	subs	r3, #1
 8003370:	77bb      	strb	r3, [r7, #30]
 8003372:	7fbb      	ldrb	r3, [r7, #30]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1b9      	bne.n	80032ec <write_68+0x68>
    }

    cs_low();
 8003378:	f001 fcd2 	bl	8004d20 <cs_low>
    spi_write_array(CMD_LEN, cmd);
 800337c:	7efb      	ldrb	r3, [r7, #27]
 800337e:	6979      	ldr	r1, [r7, #20]
 8003380:	4618      	mov	r0, r3
 8003382:	f001 fd01 	bl	8004d88 <spi_write_array>
    cs_high();
 8003386:	f001 fcd7 	bl	8004d38 <cs_high>

    free(cmd);
 800338a:	6978      	ldr	r0, [r7, #20]
 800338c:	f006 fd68 	bl	8009e60 <free>
}
 8003390:	bf00      	nop
 8003392:	3720      	adds	r7, #32
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <pec15_calc>:
 */
/* Calculates  and returns the CRC15 */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
        uint8_t *data //Array of data that will be used to calculate  a PEC
        )
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	6039      	str	r1, [r7, #0]
 80033a2:	71fb      	strb	r3, [r7, #7]
    uint16_t remainder, addr;
    remainder = 16; //initialize the PEC
 80033a4:	2310      	movs	r3, #16
 80033a6:	81fb      	strh	r3, [r7, #14]
    uint8_t i;

    for (i = 0; i < len; i++) // loops for each byte in data array
 80033a8:	2300      	movs	r3, #0
 80033aa:	737b      	strb	r3, [r7, #13]
 80033ac:	e017      	b.n	80033de <pec15_calc+0x46>
    {
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 80033ae:	89fb      	ldrh	r3, [r7, #14]
 80033b0:	09db      	lsrs	r3, r3, #7
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	7b7a      	ldrb	r2, [r7, #13]
 80033b6:	6839      	ldr	r1, [r7, #0]
 80033b8:	440a      	add	r2, r1
 80033ba:	7812      	ldrb	r2, [r2, #0]
 80033bc:	4053      	eors	r3, r2
 80033be:	b29b      	uxth	r3, r3
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	817b      	strh	r3, [r7, #10]
        remainder = (remainder << 8) ^ crc15Table[addr];
 80033c4:	89fb      	ldrh	r3, [r7, #14]
 80033c6:	021b      	lsls	r3, r3, #8
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	897b      	ldrh	r3, [r7, #10]
 80033cc:	490a      	ldr	r1, [pc, #40]	@ (80033f8 <pec15_calc+0x60>)
 80033ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	4053      	eors	r3, r2
 80033d6:	81fb      	strh	r3, [r7, #14]
    for (i = 0; i < len; i++) // loops for each byte in data array
 80033d8:	7b7b      	ldrb	r3, [r7, #13]
 80033da:	3301      	adds	r3, #1
 80033dc:	737b      	strb	r3, [r7, #13]
 80033de:	7b7a      	ldrb	r2, [r7, #13]
 80033e0:	79fb      	ldrb	r3, [r7, #7]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d3e3      	bcc.n	80033ae <pec15_calc+0x16>
    }
    return (remainder * 2); //The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 80033e6:	89fb      	ldrh	r3, [r7, #14]
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	b29b      	uxth	r3, r3
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	0800b520 	.word	0x0800b520

080033fc <LTC681x_wrcfg>:

/* Write the LTC681x CFGRA */
void LTC681x_wrcfg(uint8_t total_ic, //The number of ICs being written to
        cell_asic ic[] // A two dimensional array of the configuration data that will be written
        )
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b0c4      	sub	sp, #272	@ 0x110
 8003400:	af00      	add	r7, sp, #0
 8003402:	4602      	mov	r2, r0
 8003404:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003408:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800340c:	6019      	str	r1, [r3, #0]
 800340e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003412:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8003416:	701a      	strb	r2, [r3, #0]
    uint8_t cmd[2] = { 0x00, 0x01 };
 8003418:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800341c:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
    uint8_t write_buffer[256];
    uint8_t write_count = 0;
 8003420:	2300      	movs	r3, #0
 8003422:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
    uint8_t c_ic = 0;
 8003426:	2300      	movs	r3, #0
 8003428:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
    uint8_t current_ic;
    uint8_t data;

    for (current_ic = 0; current_ic < total_ic; current_ic++)
 800342c:	2300      	movs	r3, #0
 800342e:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 8003432:	e047      	b.n	80034c4 <LTC681x_wrcfg+0xc8>
    {
        if (ic->isospi_reverse == false)
 8003434:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003438:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 8003442:	2b00      	cmp	r3, #0
 8003444:	d104      	bne.n	8003450 <LTC681x_wrcfg+0x54>
        {
            c_ic = current_ic;
 8003446:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 800344a:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 800344e:	e00b      	b.n	8003468 <LTC681x_wrcfg+0x6c>
        }
        else
        {
            c_ic = total_ic - current_ic - 1;
 8003450:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003454:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8003458:	781a      	ldrb	r2, [r3, #0]
 800345a:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	b2db      	uxtb	r3, r3
 8003462:	3b01      	subs	r3, #1
 8003464:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
        }

        for (data = 0; data < 6; data++)
 8003468:	2300      	movs	r3, #0
 800346a:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 800346e:	e020      	b.n	80034b2 <LTC681x_wrcfg+0xb6>
        {
            write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 8003470:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 8003474:	4613      	mov	r3, r2
 8003476:	019b      	lsls	r3, r3, #6
 8003478:	4413      	add	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	461a      	mov	r2, r3
 800347e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003482:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	1899      	adds	r1, r3, r2
 800348a:	f897 210c 	ldrb.w	r2, [r7, #268]	@ 0x10c
 800348e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003492:	5c89      	ldrb	r1, [r1, r2]
 8003494:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003498:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800349c:	54d1      	strb	r1, [r2, r3]
            write_count++;
 800349e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80034a2:	3301      	adds	r3, #1
 80034a4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        for (data = 0; data < 6; data++)
 80034a8:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 80034ac:	3301      	adds	r3, #1
 80034ae:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 80034b2:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 80034b6:	2b05      	cmp	r3, #5
 80034b8:	d9da      	bls.n	8003470 <LTC681x_wrcfg+0x74>
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 80034ba:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80034be:	3301      	adds	r3, #1
 80034c0:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 80034c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80034c8:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80034cc:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d3ae      	bcc.n	8003434 <LTC681x_wrcfg+0x38>
        }
    }
    write_68(total_ic, cmd, write_buffer);
 80034d6:	f107 0208 	add.w	r2, r7, #8
 80034da:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 80034de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80034e2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff fecb 	bl	8003284 <write_68>
}
 80034ee:	bf00      	nop
 80034f0:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <LTC681x_adcv>:
/* Starts ADC conversion for cell voltage */
void LTC681x_adcv(uint8_t MD, //ADC Mode
        uint8_t DCP, //Discharge Permit
        uint8_t CH //Cell Channels to be measured
        )
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	71fb      	strb	r3, [r7, #7]
 8003502:	460b      	mov	r3, r1
 8003504:	71bb      	strb	r3, [r7, #6]
 8003506:	4613      	mov	r3, r2
 8003508:	717b      	strb	r3, [r7, #5]
    uint8_t cmd[2];
    uint8_t md_bits;

    md_bits = (MD & 0x02) >> 1;
 800350a:	79fb      	ldrb	r3, [r7, #7]
 800350c:	105b      	asrs	r3, r3, #1
 800350e:	b2db      	uxtb	r3, r3
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	73fb      	strb	r3, [r7, #15]
    cmd[0] = md_bits + 0x02;
 8003516:	7bfb      	ldrb	r3, [r7, #15]
 8003518:	3302      	adds	r3, #2
 800351a:	b2db      	uxtb	r3, r3
 800351c:	733b      	strb	r3, [r7, #12]
    md_bits = (MD & 0x01) << 7;
 800351e:	79fb      	ldrb	r3, [r7, #7]
 8003520:	01db      	lsls	r3, r3, #7
 8003522:	73fb      	strb	r3, [r7, #15]
    cmd[1] = md_bits + 0x60 + (DCP << 4) + CH;
 8003524:	79bb      	ldrb	r3, [r7, #6]
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	b2da      	uxtb	r2, r3
 800352a:	7bfb      	ldrb	r3, [r7, #15]
 800352c:	4413      	add	r3, r2
 800352e:	b2da      	uxtb	r2, r3
 8003530:	797b      	ldrb	r3, [r7, #5]
 8003532:	4413      	add	r3, r2
 8003534:	b2db      	uxtb	r3, r3
 8003536:	3360      	adds	r3, #96	@ 0x60
 8003538:	b2db      	uxtb	r3, r3
 800353a:	737b      	strb	r3, [r7, #13]

    cmd_68(cmd);
 800353c:	f107 030c 	add.w	r3, r7, #12
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff fe77 	bl	8003234 <cmd_68>
}
 8003546:	bf00      	nop
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <LTC681x_adax>:

/* Start ADC Conversion for GPIO and Vref2  */
void LTC681x_adax(uint8_t MD, //ADC Mode
        uint8_t CHG //GPIO Channels to be measured
        )
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b084      	sub	sp, #16
 8003552:	af00      	add	r7, sp, #0
 8003554:	4603      	mov	r3, r0
 8003556:	460a      	mov	r2, r1
 8003558:	71fb      	strb	r3, [r7, #7]
 800355a:	4613      	mov	r3, r2
 800355c:	71bb      	strb	r3, [r7, #6]
    uint8_t cmd[4];
    uint8_t md_bits;

    md_bits = (MD & 0x02) >> 1;
 800355e:	79fb      	ldrb	r3, [r7, #7]
 8003560:	105b      	asrs	r3, r3, #1
 8003562:	b2db      	uxtb	r3, r3
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	73fb      	strb	r3, [r7, #15]
    cmd[0] = md_bits + 0x04;
 800356a:	7bfb      	ldrb	r3, [r7, #15]
 800356c:	3304      	adds	r3, #4
 800356e:	b2db      	uxtb	r3, r3
 8003570:	723b      	strb	r3, [r7, #8]
    md_bits = (MD & 0x01) << 7;
 8003572:	79fb      	ldrb	r3, [r7, #7]
 8003574:	01db      	lsls	r3, r3, #7
 8003576:	73fb      	strb	r3, [r7, #15]
    cmd[1] = md_bits + 0x60 + CHG;
 8003578:	7bfa      	ldrb	r2, [r7, #15]
 800357a:	79bb      	ldrb	r3, [r7, #6]
 800357c:	4413      	add	r3, r2
 800357e:	b2db      	uxtb	r3, r3
 8003580:	3360      	adds	r3, #96	@ 0x60
 8003582:	b2db      	uxtb	r3, r3
 8003584:	727b      	strb	r3, [r7, #9]

    cmd_68(cmd);
 8003586:	f107 0308 	add.w	r3, r7, #8
 800358a:	4618      	mov	r0, r3
 800358c:	f7ff fe52 	bl	8003234 <cmd_68>
}
 8003590:	bf00      	nop
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <LTC681x_rdcv>:
 */
uint8_t LTC681x_rdcv(uint8_t reg, // Controls which cell voltage register is read back.
        uint8_t total_ic, // The number of ICs in the system
        cell_asic *ic // Array of the parsed cell codes
        )
{
 8003598:	b5b0      	push	{r4, r5, r7, lr}
 800359a:	b088      	sub	sp, #32
 800359c:	af02      	add	r7, sp, #8
 800359e:	4603      	mov	r3, r0
 80035a0:	603a      	str	r2, [r7, #0]
 80035a2:	71fb      	strb	r3, [r7, #7]
 80035a4:	460b      	mov	r3, r1
 80035a6:	71bb      	strb	r3, [r7, #6]
    int8_t pec_error = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	75fb      	strb	r3, [r7, #23]
    uint8_t *cell_data;
    uint8_t c_ic = 0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	75bb      	strb	r3, [r7, #22]
    uint8_t cell_reg;
    int current_ic;
    cell_data = (uint8_t *) malloc((NUM_RX_BYT * total_ic) * sizeof(uint8_t));
 80035b0:	79bb      	ldrb	r3, [r7, #6]
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	4618      	mov	r0, r3
 80035b6:	f006 fc4b 	bl	8009e50 <malloc>
 80035ba:	4603      	mov	r3, r0
 80035bc:	60fb      	str	r3, [r7, #12]

    if (reg == 0)
 80035be:	79fb      	ldrb	r3, [r7, #7]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d14c      	bne.n	800365e <LTC681x_rdcv+0xc6>
    {
        for (cell_reg = 1; cell_reg < ic[0].ic_reg.num_cv_reg + 1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 80035c4:	2301      	movs	r3, #1
 80035c6:	757b      	strb	r3, [r7, #21]
 80035c8:	e042      	b.n	8003650 <LTC681x_rdcv+0xb8>
        {
            LTC681x_rdcv_reg(cell_reg, total_ic, cell_data);
 80035ca:	79b9      	ldrb	r1, [r7, #6]
 80035cc:	7d7b      	ldrb	r3, [r7, #21]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 f941 	bl	8003858 <LTC681x_rdcv_reg>
            for (current_ic = 0; current_ic < total_ic; current_ic++)
 80035d6:	2300      	movs	r3, #0
 80035d8:	613b      	str	r3, [r7, #16]
 80035da:	e032      	b.n	8003642 <LTC681x_rdcv+0xaa>
            {
                if (ic->isospi_reverse == false)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d102      	bne.n	80035ec <LTC681x_rdcv+0x54>
                {
                    c_ic = current_ic;
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	75bb      	strb	r3, [r7, #22]
 80035ea:	e006      	b.n	80035fa <LTC681x_rdcv+0x62>
                }
                else
                {
                    c_ic = total_ic - current_ic - 1;
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	79ba      	ldrb	r2, [r7, #6]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	3b01      	subs	r3, #1
 80035f8:	75bb      	strb	r3, [r7, #22]
                }
                pec_error = pec_error + parse_cells(current_ic, cell_reg, cell_data,
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	b2d8      	uxtb	r0, r3
                                                    &ic[c_ic].cells.c_codes[0],
 80035fe:	7dba      	ldrb	r2, [r7, #22]
 8003600:	4613      	mov	r3, r2
 8003602:	019b      	lsls	r3, r3, #6
 8003604:	4413      	add	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	461a      	mov	r2, r3
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	4413      	add	r3, r2
                pec_error = pec_error + parse_cells(current_ic, cell_reg, cell_data,
 800360e:	f103 041e 	add.w	r4, r3, #30
                                                    &ic[c_ic].cells.pec_match[0]);;
 8003612:	7dba      	ldrb	r2, [r7, #22]
 8003614:	4613      	mov	r3, r2
 8003616:	019b      	lsls	r3, r3, #6
 8003618:	4413      	add	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	461a      	mov	r2, r3
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	4413      	add	r3, r2
                pec_error = pec_error + parse_cells(current_ic, cell_reg, cell_data,
 8003622:	3342      	adds	r3, #66	@ 0x42
 8003624:	7d79      	ldrb	r1, [r7, #21]
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	4623      	mov	r3, r4
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	f000 f9bf 	bl	80039ae <parse_cells>
 8003630:	4603      	mov	r3, r0
 8003632:	b2da      	uxtb	r2, r3
 8003634:	7dfb      	ldrb	r3, [r7, #23]
 8003636:	4413      	add	r3, r2
 8003638:	b2db      	uxtb	r3, r3
 800363a:	75fb      	strb	r3, [r7, #23]
            for (current_ic = 0; current_ic < total_ic; current_ic++)
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	3301      	adds	r3, #1
 8003640:	613b      	str	r3, [r7, #16]
 8003642:	79bb      	ldrb	r3, [r7, #6]
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	429a      	cmp	r2, r3
 8003648:	dbc8      	blt.n	80035dc <LTC681x_rdcv+0x44>
        for (cell_reg = 1; cell_reg < ic[0].ic_reg.num_cv_reg + 1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 800364a:	7d7b      	ldrb	r3, [r7, #21]
 800364c:	3301      	adds	r3, #1
 800364e:	757b      	strb	r3, [r7, #21]
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 8003656:	7d7a      	ldrb	r2, [r7, #21]
 8003658:	429a      	cmp	r2, r3
 800365a:	d9b6      	bls.n	80035ca <LTC681x_rdcv+0x32>
 800365c:	e044      	b.n	80036e8 <LTC681x_rdcv+0x150>
        }
    }

    else
    {
        LTC681x_rdcv_reg(reg, total_ic, cell_data);
 800365e:	79b9      	ldrb	r1, [r7, #6]
 8003660:	79fb      	ldrb	r3, [r7, #7]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4618      	mov	r0, r3
 8003666:	f000 f8f7 	bl	8003858 <LTC681x_rdcv_reg>

        for (current_ic = 0; current_ic < total_ic; current_ic++)
 800366a:	2300      	movs	r3, #0
 800366c:	613b      	str	r3, [r7, #16]
 800366e:	e037      	b.n	80036e0 <LTC681x_rdcv+0x148>
        {
            if (ic->isospi_reverse == false)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 8003676:	2b00      	cmp	r3, #0
 8003678:	d102      	bne.n	8003680 <LTC681x_rdcv+0xe8>
            {
                c_ic = current_ic;
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	75bb      	strb	r3, [r7, #22]
 800367e:	e006      	b.n	800368e <LTC681x_rdcv+0xf6>
            }
            else
            {
                c_ic = total_ic - current_ic - 1;
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	b2db      	uxtb	r3, r3
 8003684:	79ba      	ldrb	r2, [r7, #6]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	b2db      	uxtb	r3, r3
 800368a:	3b01      	subs	r3, #1
 800368c:	75bb      	strb	r3, [r7, #22]
            }
            pec_error = pec_error
                    + parse_cells(current_ic, reg, &cell_data[8 * c_ic],
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	b2d8      	uxtb	r0, r3
 8003692:	7dbb      	ldrb	r3, [r7, #22]
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	461a      	mov	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	189c      	adds	r4, r3, r2
                                  &ic[c_ic].cells.c_codes[0],
 800369c:	7dba      	ldrb	r2, [r7, #22]
 800369e:	4613      	mov	r3, r2
 80036a0:	019b      	lsls	r3, r3, #6
 80036a2:	4413      	add	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	461a      	mov	r2, r3
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	4413      	add	r3, r2
                    + parse_cells(current_ic, reg, &cell_data[8 * c_ic],
 80036ac:	f103 051e 	add.w	r5, r3, #30
                                  &ic[c_ic].cells.pec_match[0]);;
 80036b0:	7dba      	ldrb	r2, [r7, #22]
 80036b2:	4613      	mov	r3, r2
 80036b4:	019b      	lsls	r3, r3, #6
 80036b6:	4413      	add	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	461a      	mov	r2, r3
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	4413      	add	r3, r2
                    + parse_cells(current_ic, reg, &cell_data[8 * c_ic],
 80036c0:	3342      	adds	r3, #66	@ 0x42
 80036c2:	79f9      	ldrb	r1, [r7, #7]
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	462b      	mov	r3, r5
 80036c8:	4622      	mov	r2, r4
 80036ca:	f000 f970 	bl	80039ae <parse_cells>
 80036ce:	4603      	mov	r3, r0
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	7dfb      	ldrb	r3, [r7, #23]
 80036d4:	4413      	add	r3, r2
 80036d6:	b2db      	uxtb	r3, r3
            pec_error = pec_error
 80036d8:	75fb      	strb	r3, [r7, #23]
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	3301      	adds	r3, #1
 80036de:	613b      	str	r3, [r7, #16]
 80036e0:	79bb      	ldrb	r3, [r7, #6]
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	dbc3      	blt.n	8003670 <LTC681x_rdcv+0xd8>
        }
    }
    LTC681x_check_pec(total_ic, CELL, ic);
 80036e8:	79bb      	ldrb	r3, [r7, #6]
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	2101      	movs	r1, #1
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 fa1e 	bl	8003b30 <LTC681x_check_pec>
    free(cell_data);
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f006 fbb3 	bl	8009e60 <free>

    return (pec_error);
 80036fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bdb0      	pop	{r4, r5, r7, pc}

08003704 <LTC681x_rdaux>:
 */
int8_t LTC681x_rdaux(uint8_t reg, //Determines which GPIO voltage register is read back.
        uint8_t total_ic, //The number of ICs in the system
        cell_asic *ic //A two dimensional array of the gpio voltage codes.
        )
{
 8003704:	b590      	push	{r4, r7, lr}
 8003706:	b089      	sub	sp, #36	@ 0x24
 8003708:	af02      	add	r7, sp, #8
 800370a:	4603      	mov	r3, r0
 800370c:	603a      	str	r2, [r7, #0]
 800370e:	71fb      	strb	r3, [r7, #7]
 8003710:	460b      	mov	r3, r1
 8003712:	71bb      	strb	r3, [r7, #6]
    uint8_t *data;
    int8_t pec_error = 0;
 8003714:	2300      	movs	r3, #0
 8003716:	75fb      	strb	r3, [r7, #23]
    uint8_t c_ic = 0;
 8003718:	2300      	movs	r3, #0
 800371a:	75bb      	strb	r3, [r7, #22]
    uint8_t gpio_reg;
    int current_ic;
    data = (uint8_t *) malloc((NUM_RX_BYT * total_ic) * sizeof(uint8_t));
 800371c:	79bb      	ldrb	r3, [r7, #6]
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	4618      	mov	r0, r3
 8003722:	f006 fb95 	bl	8009e50 <malloc>
 8003726:	4603      	mov	r3, r0
 8003728:	60fb      	str	r3, [r7, #12]

    if (reg == 0)
 800372a:	79fb      	ldrb	r3, [r7, #7]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d148      	bne.n	80037c2 <LTC681x_rdaux+0xbe>
    {
        for (gpio_reg = 1; gpio_reg < ic[0].ic_reg.num_gpio_reg + 1; gpio_reg++) //Executes once for each of the LTC681x aux voltage registers
 8003730:	2301      	movs	r3, #1
 8003732:	757b      	strb	r3, [r7, #21]
 8003734:	e03e      	b.n	80037b4 <LTC681x_rdaux+0xb0>
        {
            LTC681x_rdaux_reg(gpio_reg, total_ic, data); //Reads the raw auxiliary register data into the data[] array
 8003736:	79b9      	ldrb	r1, [r7, #6]
 8003738:	7d7b      	ldrb	r3, [r7, #21]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	4618      	mov	r0, r3
 800373e:	f000 f8e6 	bl	800390e <LTC681x_rdaux_reg>
            for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003742:	2300      	movs	r3, #0
 8003744:	613b      	str	r3, [r7, #16]
 8003746:	e02e      	b.n	80037a6 <LTC681x_rdaux+0xa2>
            {
                if (ic->isospi_reverse == false)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 800374e:	2b00      	cmp	r3, #0
 8003750:	d102      	bne.n	8003758 <LTC681x_rdaux+0x54>
                {
                    c_ic = current_ic;
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	75bb      	strb	r3, [r7, #22]
 8003756:	e006      	b.n	8003766 <LTC681x_rdaux+0x62>
                }
                else
                {
                    c_ic = total_ic - current_ic - 1;
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	b2db      	uxtb	r3, r3
 800375c:	79ba      	ldrb	r2, [r7, #6]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	b2db      	uxtb	r3, r3
 8003762:	3b01      	subs	r3, #1
 8003764:	75bb      	strb	r3, [r7, #22]
                }
                pec_error = parse_cells(current_ic, gpio_reg, data,
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	b2d8      	uxtb	r0, r3
                                        &ic[c_ic].aux.a_codes[0],
 800376a:	7dba      	ldrb	r2, [r7, #22]
 800376c:	4613      	mov	r3, r2
 800376e:	019b      	lsls	r3, r3, #6
 8003770:	4413      	add	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	461a      	mov	r2, r3
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	4413      	add	r3, r2
                pec_error = parse_cells(current_ic, gpio_reg, data,
 800377a:	f103 044e 	add.w	r4, r3, #78	@ 0x4e
                                        &ic[c_ic].aux.pec_match[0]);
 800377e:	7dba      	ldrb	r2, [r7, #22]
 8003780:	4613      	mov	r3, r2
 8003782:	019b      	lsls	r3, r3, #6
 8003784:	4413      	add	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	461a      	mov	r2, r3
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	4413      	add	r3, r2
                pec_error = parse_cells(current_ic, gpio_reg, data,
 800378e:	3360      	adds	r3, #96	@ 0x60
 8003790:	7d79      	ldrb	r1, [r7, #21]
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	4623      	mov	r3, r4
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	f000 f909 	bl	80039ae <parse_cells>
 800379c:	4603      	mov	r3, r0
 800379e:	75fb      	strb	r3, [r7, #23]
            for (current_ic = 0; current_ic < total_ic; current_ic++)
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	3301      	adds	r3, #1
 80037a4:	613b      	str	r3, [r7, #16]
 80037a6:	79bb      	ldrb	r3, [r7, #6]
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	dbcc      	blt.n	8003748 <LTC681x_rdaux+0x44>
        for (gpio_reg = 1; gpio_reg < ic[0].ic_reg.num_gpio_reg + 1; gpio_reg++) //Executes once for each of the LTC681x aux voltage registers
 80037ae:	7d7b      	ldrb	r3, [r7, #21]
 80037b0:	3301      	adds	r3, #1
 80037b2:	757b      	strb	r3, [r7, #21]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 80037ba:	7d7a      	ldrb	r2, [r7, #21]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d9ba      	bls.n	8003736 <LTC681x_rdaux+0x32>
 80037c0:	e03b      	b.n	800383a <LTC681x_rdaux+0x136>
            }
        }
    }
    else
    {
        LTC681x_rdaux_reg(reg, total_ic, data);
 80037c2:	79b9      	ldrb	r1, [r7, #6]
 80037c4:	79fb      	ldrb	r3, [r7, #7]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 f8a0 	bl	800390e <LTC681x_rdaux_reg>

        for (current_ic = 0; current_ic < total_ic; current_ic++)
 80037ce:	2300      	movs	r3, #0
 80037d0:	613b      	str	r3, [r7, #16]
 80037d2:	e02e      	b.n	8003832 <LTC681x_rdaux+0x12e>
        {
            if (ic->isospi_reverse == false)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d102      	bne.n	80037e4 <LTC681x_rdaux+0xe0>
            {
                c_ic = current_ic;
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	75bb      	strb	r3, [r7, #22]
 80037e2:	e006      	b.n	80037f2 <LTC681x_rdaux+0xee>
            }
            else
            {
                c_ic = total_ic - current_ic - 1;
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	79ba      	ldrb	r2, [r7, #6]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	3b01      	subs	r3, #1
 80037f0:	75bb      	strb	r3, [r7, #22]
            }
            pec_error = parse_cells(current_ic, reg, data,
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	b2d8      	uxtb	r0, r3
                                    &ic[c_ic].aux.a_codes[0],
 80037f6:	7dba      	ldrb	r2, [r7, #22]
 80037f8:	4613      	mov	r3, r2
 80037fa:	019b      	lsls	r3, r3, #6
 80037fc:	4413      	add	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	461a      	mov	r2, r3
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	4413      	add	r3, r2
            pec_error = parse_cells(current_ic, reg, data,
 8003806:	f103 044e 	add.w	r4, r3, #78	@ 0x4e
                                    &ic[c_ic].aux.pec_match[0]);
 800380a:	7dba      	ldrb	r2, [r7, #22]
 800380c:	4613      	mov	r3, r2
 800380e:	019b      	lsls	r3, r3, #6
 8003810:	4413      	add	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	461a      	mov	r2, r3
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	4413      	add	r3, r2
            pec_error = parse_cells(current_ic, reg, data,
 800381a:	3360      	adds	r3, #96	@ 0x60
 800381c:	79f9      	ldrb	r1, [r7, #7]
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	4623      	mov	r3, r4
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	f000 f8c3 	bl	80039ae <parse_cells>
 8003828:	4603      	mov	r3, r0
 800382a:	75fb      	strb	r3, [r7, #23]
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	3301      	adds	r3, #1
 8003830:	613b      	str	r3, [r7, #16]
 8003832:	79bb      	ldrb	r3, [r7, #6]
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	429a      	cmp	r2, r3
 8003838:	dbcc      	blt.n	80037d4 <LTC681x_rdaux+0xd0>
        }
    }
    LTC681x_check_pec(total_ic, AUX, ic);
 800383a:	79bb      	ldrb	r3, [r7, #6]
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	2102      	movs	r1, #2
 8003840:	4618      	mov	r0, r3
 8003842:	f000 f975 	bl	8003b30 <LTC681x_check_pec>
    free(data);
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f006 fb0a 	bl	8009e60 <free>

    return (pec_error);
 800384c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003850:	4618      	mov	r0, r3
 8003852:	371c      	adds	r7, #28
 8003854:	46bd      	mov	sp, r7
 8003856:	bd90      	pop	{r4, r7, pc}

08003858 <LTC681x_rdcv_reg>:
/* Writes the command and reads the raw cell voltage register data */
void LTC681x_rdcv_reg(uint8_t reg, //Determines which cell voltage register is read back
        uint8_t total_ic, //the number of ICs in the
        uint8_t *data //An array of the unparsed cell codes
        )
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	4603      	mov	r3, r0
 8003860:	603a      	str	r2, [r7, #0]
 8003862:	71fb      	strb	r3, [r7, #7]
 8003864:	460b      	mov	r3, r1
 8003866:	71bb      	strb	r3, [r7, #6]
    const uint8_t REG_LEN = 8; //Number of bytes in each ICs register + 2 bytes for the PEC
 8003868:	2308      	movs	r3, #8
 800386a:	73fb      	strb	r3, [r7, #15]
    uint8_t cmd[4];
    uint16_t cmd_pec;

    if (reg == 1)     //1: RDCVA
 800386c:	79fb      	ldrb	r3, [r7, #7]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d104      	bne.n	800387c <LTC681x_rdcv_reg+0x24>
    {
        cmd[1] = 0x04;
 8003872:	2304      	movs	r3, #4
 8003874:	727b      	strb	r3, [r7, #9]
        cmd[0] = 0x00;
 8003876:	2300      	movs	r3, #0
 8003878:	723b      	strb	r3, [r7, #8]
 800387a:	e026      	b.n	80038ca <LTC681x_rdcv_reg+0x72>
    }
    else if (reg == 2) //2: RDCVB
 800387c:	79fb      	ldrb	r3, [r7, #7]
 800387e:	2b02      	cmp	r3, #2
 8003880:	d104      	bne.n	800388c <LTC681x_rdcv_reg+0x34>
    {
        cmd[1] = 0x06;
 8003882:	2306      	movs	r3, #6
 8003884:	727b      	strb	r3, [r7, #9]
        cmd[0] = 0x00;
 8003886:	2300      	movs	r3, #0
 8003888:	723b      	strb	r3, [r7, #8]
 800388a:	e01e      	b.n	80038ca <LTC681x_rdcv_reg+0x72>
    }
    else if (reg == 3) //3: RDCVC
 800388c:	79fb      	ldrb	r3, [r7, #7]
 800388e:	2b03      	cmp	r3, #3
 8003890:	d104      	bne.n	800389c <LTC681x_rdcv_reg+0x44>
    {
        cmd[1] = 0x08;
 8003892:	2308      	movs	r3, #8
 8003894:	727b      	strb	r3, [r7, #9]
        cmd[0] = 0x00;
 8003896:	2300      	movs	r3, #0
 8003898:	723b      	strb	r3, [r7, #8]
 800389a:	e016      	b.n	80038ca <LTC681x_rdcv_reg+0x72>
    }
    else if (reg == 4) //4: RDCVD
 800389c:	79fb      	ldrb	r3, [r7, #7]
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d104      	bne.n	80038ac <LTC681x_rdcv_reg+0x54>
    {
        cmd[1] = 0x0A;
 80038a2:	230a      	movs	r3, #10
 80038a4:	727b      	strb	r3, [r7, #9]
        cmd[0] = 0x00;
 80038a6:	2300      	movs	r3, #0
 80038a8:	723b      	strb	r3, [r7, #8]
 80038aa:	e00e      	b.n	80038ca <LTC681x_rdcv_reg+0x72>
    }
    else if (reg == 5) //4: RDCVE
 80038ac:	79fb      	ldrb	r3, [r7, #7]
 80038ae:	2b05      	cmp	r3, #5
 80038b0:	d104      	bne.n	80038bc <LTC681x_rdcv_reg+0x64>
    {
        cmd[1] = 0x09;
 80038b2:	2309      	movs	r3, #9
 80038b4:	727b      	strb	r3, [r7, #9]
        cmd[0] = 0x00;
 80038b6:	2300      	movs	r3, #0
 80038b8:	723b      	strb	r3, [r7, #8]
 80038ba:	e006      	b.n	80038ca <LTC681x_rdcv_reg+0x72>
    }
    else if (reg == 6) //4: RDCVF
 80038bc:	79fb      	ldrb	r3, [r7, #7]
 80038be:	2b06      	cmp	r3, #6
 80038c0:	d103      	bne.n	80038ca <LTC681x_rdcv_reg+0x72>
    {
        cmd[1] = 0x0B;
 80038c2:	230b      	movs	r3, #11
 80038c4:	727b      	strb	r3, [r7, #9]
        cmd[0] = 0x00;
 80038c6:	2300      	movs	r3, #0
 80038c8:	723b      	strb	r3, [r7, #8]
    }

    cmd_pec = pec15_calc(2, cmd);
 80038ca:	f107 0308 	add.w	r3, r7, #8
 80038ce:	4619      	mov	r1, r3
 80038d0:	2002      	movs	r0, #2
 80038d2:	f7ff fd61 	bl	8003398 <pec15_calc>
 80038d6:	4603      	mov	r3, r0
 80038d8:	81bb      	strh	r3, [r7, #12]
    cmd[2] = (uint8_t) (cmd_pec >> 8);
 80038da:	89bb      	ldrh	r3, [r7, #12]
 80038dc:	0a1b      	lsrs	r3, r3, #8
 80038de:	b29b      	uxth	r3, r3
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	72bb      	strb	r3, [r7, #10]
    cmd[3] = (uint8_t) (cmd_pec);
 80038e4:	89bb      	ldrh	r3, [r7, #12]
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	72fb      	strb	r3, [r7, #11]

    cs_low();
 80038ea:	f001 fa19 	bl	8004d20 <cs_low>
    spi_write_read(cmd, 4, data, (REG_LEN * total_ic));
 80038ee:	7bfb      	ldrb	r3, [r7, #15]
 80038f0:	79ba      	ldrb	r2, [r7, #6]
 80038f2:	fb02 f303 	mul.w	r3, r2, r3
 80038f6:	f107 0008 	add.w	r0, r7, #8
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	2104      	movs	r1, #4
 80038fe:	f001 fa67 	bl	8004dd0 <spi_write_read>
    cs_high();
 8003902:	f001 fa19 	bl	8004d38 <cs_high>
}
 8003906:	bf00      	nop
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <LTC681x_rdaux_reg>:
 */
void LTC681x_rdaux_reg(uint8_t reg, //Determines which GPIO voltage register is read back
        uint8_t total_ic, //The number of ICs in the system
        uint8_t *data //Array of the unparsed auxiliary codes
        )
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b084      	sub	sp, #16
 8003912:	af00      	add	r7, sp, #0
 8003914:	4603      	mov	r3, r0
 8003916:	603a      	str	r2, [r7, #0]
 8003918:	71fb      	strb	r3, [r7, #7]
 800391a:	460b      	mov	r3, r1
 800391c:	71bb      	strb	r3, [r7, #6]
    const uint8_t REG_LEN = 8; // Number of bytes in the register + 2 bytes for the PEC
 800391e:	2308      	movs	r3, #8
 8003920:	73fb      	strb	r3, [r7, #15]
    uint8_t cmd[4];
    uint16_t cmd_pec;

    if (reg == 1)     //Read back auxiliary group A
 8003922:	79fb      	ldrb	r3, [r7, #7]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d104      	bne.n	8003932 <LTC681x_rdaux_reg+0x24>
    {
        cmd[1] = 0x0C;
 8003928:	230c      	movs	r3, #12
 800392a:	727b      	strb	r3, [r7, #9]
        cmd[0] = 0x00;
 800392c:	2300      	movs	r3, #0
 800392e:	723b      	strb	r3, [r7, #8]
 8003930:	e01b      	b.n	800396a <LTC681x_rdaux_reg+0x5c>
    }
    else if (reg == 2)  //Read back auxiliary group B
 8003932:	79fb      	ldrb	r3, [r7, #7]
 8003934:	2b02      	cmp	r3, #2
 8003936:	d104      	bne.n	8003942 <LTC681x_rdaux_reg+0x34>
    {
        cmd[1] = 0x0E;
 8003938:	230e      	movs	r3, #14
 800393a:	727b      	strb	r3, [r7, #9]
        cmd[0] = 0x00;
 800393c:	2300      	movs	r3, #0
 800393e:	723b      	strb	r3, [r7, #8]
 8003940:	e013      	b.n	800396a <LTC681x_rdaux_reg+0x5c>
    }
    else if (reg == 3)  //Read back auxiliary group C
 8003942:	79fb      	ldrb	r3, [r7, #7]
 8003944:	2b03      	cmp	r3, #3
 8003946:	d104      	bne.n	8003952 <LTC681x_rdaux_reg+0x44>
    {
        cmd[1] = 0x0D;
 8003948:	230d      	movs	r3, #13
 800394a:	727b      	strb	r3, [r7, #9]
        cmd[0] = 0x00;
 800394c:	2300      	movs	r3, #0
 800394e:	723b      	strb	r3, [r7, #8]
 8003950:	e00b      	b.n	800396a <LTC681x_rdaux_reg+0x5c>
    }
    else if (reg == 4)  //Read back auxiliary group D
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	2b04      	cmp	r3, #4
 8003956:	d104      	bne.n	8003962 <LTC681x_rdaux_reg+0x54>
    {
        cmd[1] = 0x0F;
 8003958:	230f      	movs	r3, #15
 800395a:	727b      	strb	r3, [r7, #9]
        cmd[0] = 0x00;
 800395c:	2300      	movs	r3, #0
 800395e:	723b      	strb	r3, [r7, #8]
 8003960:	e003      	b.n	800396a <LTC681x_rdaux_reg+0x5c>
    }
    else          //Read back auxiliary group A
    {
        cmd[1] = 0x0C;
 8003962:	230c      	movs	r3, #12
 8003964:	727b      	strb	r3, [r7, #9]
        cmd[0] = 0x00;
 8003966:	2300      	movs	r3, #0
 8003968:	723b      	strb	r3, [r7, #8]
    }

    cmd_pec = pec15_calc(2, cmd);
 800396a:	f107 0308 	add.w	r3, r7, #8
 800396e:	4619      	mov	r1, r3
 8003970:	2002      	movs	r0, #2
 8003972:	f7ff fd11 	bl	8003398 <pec15_calc>
 8003976:	4603      	mov	r3, r0
 8003978:	81bb      	strh	r3, [r7, #12]
    cmd[2] = (uint8_t) (cmd_pec >> 8);
 800397a:	89bb      	ldrh	r3, [r7, #12]
 800397c:	0a1b      	lsrs	r3, r3, #8
 800397e:	b29b      	uxth	r3, r3
 8003980:	b2db      	uxtb	r3, r3
 8003982:	72bb      	strb	r3, [r7, #10]
    cmd[3] = (uint8_t) (cmd_pec);
 8003984:	89bb      	ldrh	r3, [r7, #12]
 8003986:	b2db      	uxtb	r3, r3
 8003988:	72fb      	strb	r3, [r7, #11]

    cs_low();
 800398a:	f001 f9c9 	bl	8004d20 <cs_low>
    spi_write_read(cmd, 4, data, (REG_LEN * total_ic));
 800398e:	7bfb      	ldrb	r3, [r7, #15]
 8003990:	79ba      	ldrb	r2, [r7, #6]
 8003992:	fb02 f303 	mul.w	r3, r2, r3
 8003996:	f107 0008 	add.w	r0, r7, #8
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	2104      	movs	r1, #4
 800399e:	f001 fa17 	bl	8004dd0 <spi_write_read>
    cs_high();
 80039a2:	f001 f9c9 	bl	8004d38 <cs_high>
}
 80039a6:	bf00      	nop
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <parse_cells>:
        uint8_t cell_reg,  // Type of register
        uint8_t cell_data[], // Unparsed data
        uint16_t *cell_codes, // Parsed data
        uint8_t *ic_pec // PEC error
        )
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b088      	sub	sp, #32
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	60ba      	str	r2, [r7, #8]
 80039b6:	607b      	str	r3, [r7, #4]
 80039b8:	4603      	mov	r3, r0
 80039ba:	73fb      	strb	r3, [r7, #15]
 80039bc:	460b      	mov	r3, r1
 80039be:	73bb      	strb	r3, [r7, #14]
    const uint8_t BYT_IN_REG = 6;
 80039c0:	2306      	movs	r3, #6
 80039c2:	773b      	strb	r3, [r7, #28]
    const uint8_t CELL_IN_REG = 3;
 80039c4:	2303      	movs	r3, #3
 80039c6:	76fb      	strb	r3, [r7, #27]
    int8_t pec_error = 0;
 80039c8:	2300      	movs	r3, #0
 80039ca:	77fb      	strb	r3, [r7, #31]
    uint16_t parsed_cell;
    uint16_t received_pec;
    uint16_t data_pec;
    uint8_t data_counter = current_ic * NUM_RX_BYT; //data counter
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	77bb      	strb	r3, [r7, #30]
    uint8_t current_cell;

    for (current_cell = 0; current_cell < CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 80039d2:	2300      	movs	r3, #0
 80039d4:	777b      	strb	r3, [r7, #29]
 80039d6:	e01f      	b.n	8003a18 <parse_cells+0x6a>
    {                      // loops once for each of the 3 codes in the register

        parsed_cell = cell_data[data_counter]
 80039d8:	7fbb      	ldrb	r3, [r7, #30]
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	4413      	add	r3, r2
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	4619      	mov	r1, r3
                + (cell_data[data_counter + 1] << 8); //Each code is received as two bytes and is combined to
 80039e2:	7fbb      	ldrb	r3, [r7, #30]
 80039e4:	3301      	adds	r3, #1
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	4413      	add	r3, r2
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	021b      	lsls	r3, r3, #8
 80039ee:	b29b      	uxth	r3, r3
        parsed_cell = cell_data[data_counter]
 80039f0:	440b      	add	r3, r1
 80039f2:	82bb      	strh	r3, [r7, #20]
                                                      // create the parsed code
        cell_codes[current_cell + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 80039f4:	7f7a      	ldrb	r2, [r7, #29]
 80039f6:	7bbb      	ldrb	r3, [r7, #14]
 80039f8:	3b01      	subs	r3, #1
 80039fa:	7ef9      	ldrb	r1, [r7, #27]
 80039fc:	fb01 f303 	mul.w	r3, r1, r3
 8003a00:	4413      	add	r3, r2
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	4413      	add	r3, r2
 8003a08:	8aba      	ldrh	r2, [r7, #20]
 8003a0a:	801a      	strh	r2, [r3, #0]

        data_counter = data_counter + 2; //Because the codes are two bytes, the data counter
 8003a0c:	7fbb      	ldrb	r3, [r7, #30]
 8003a0e:	3302      	adds	r3, #2
 8003a10:	77bb      	strb	r3, [r7, #30]
    for (current_cell = 0; current_cell < CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 8003a12:	7f7b      	ldrb	r3, [r7, #29]
 8003a14:	3301      	adds	r3, #1
 8003a16:	777b      	strb	r3, [r7, #29]
 8003a18:	7f7a      	ldrb	r2, [r7, #29]
 8003a1a:	7efb      	ldrb	r3, [r7, #27]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d3db      	bcc.n	80039d8 <parse_cells+0x2a>
                                         //must increment by two for each parsed code
    }

    received_pec = (cell_data[data_counter] << 8) | cell_data[data_counter + 1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 8003a20:	7fbb      	ldrb	r3, [r7, #30]
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	4413      	add	r3, r2
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	021b      	lsls	r3, r3, #8
 8003a2a:	b21a      	sxth	r2, r3
 8003a2c:	7fbb      	ldrb	r3, [r7, #30]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	68b9      	ldr	r1, [r7, #8]
 8003a32:	440b      	add	r3, r1
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	b21b      	sxth	r3, r3
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	b21b      	sxth	r3, r3
 8003a3c:	833b      	strh	r3, [r7, #24]
                                                                                 //after the 6 cell voltage data bytes
    data_pec = pec15_calc(BYT_IN_REG, &cell_data[(current_ic) * NUM_RX_BYT]);
 8003a3e:	7bfb      	ldrb	r3, [r7, #15]
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	461a      	mov	r2, r3
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	441a      	add	r2, r3
 8003a48:	7f3b      	ldrb	r3, [r7, #28]
 8003a4a:	4611      	mov	r1, r2
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7ff fca3 	bl	8003398 <pec15_calc>
 8003a52:	4603      	mov	r3, r0
 8003a54:	82fb      	strh	r3, [r7, #22]

    if (received_pec != data_pec)
 8003a56:	8b3a      	ldrh	r2, [r7, #24]
 8003a58:	8afb      	ldrh	r3, [r7, #22]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d008      	beq.n	8003a70 <parse_cells+0xc2>
    {
        pec_error = 1; //The pec_error variable is simply set negative if any PEC errors
 8003a5e:	2301      	movs	r3, #1
 8003a60:	77fb      	strb	r3, [r7, #31]
        ic_pec[cell_reg - 1] = 1;
 8003a62:	7bbb      	ldrb	r3, [r7, #14]
 8003a64:	3b01      	subs	r3, #1
 8003a66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a68:	4413      	add	r3, r2
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	701a      	strb	r2, [r3, #0]
 8003a6e:	e005      	b.n	8003a7c <parse_cells+0xce>
    }
    else
    {
        ic_pec[cell_reg - 1] = 0;
 8003a70:	7bbb      	ldrb	r3, [r7, #14]
 8003a72:	3b01      	subs	r3, #1
 8003a74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a76:	4413      	add	r3, r2
 8003a78:	2200      	movs	r2, #0
 8003a7a:	701a      	strb	r2, [r3, #0]
    }
    data_counter = data_counter + 2;
 8003a7c:	7fbb      	ldrb	r3, [r7, #30]
 8003a7e:	3302      	adds	r3, #2
 8003a80:	77bb      	strb	r3, [r7, #30]

    return (pec_error);
 8003a82:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3720      	adds	r7, #32
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <LTC681x_pollAdc>:
    return (adc_state);
}

/* This function will block operation until the ADC has finished it's conversion */
uint32_t LTC681x_pollAdc()
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
    uint32_t counter = 0;
 8003a96:	2300      	movs	r3, #0
 8003a98:	60fb      	str	r3, [r7, #12]
    uint8_t finished = 0;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	72fb      	strb	r3, [r7, #11]
    uint8_t current_time = 0;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	72bb      	strb	r3, [r7, #10]
    uint8_t cmd[4];
    uint16_t cmd_pec;

    cmd[0] = 0x07;
 8003aa2:	2307      	movs	r3, #7
 8003aa4:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0x14;
 8003aa6:	2314      	movs	r3, #20
 8003aa8:	717b      	strb	r3, [r7, #5]
    cmd_pec = pec15_calc(2, cmd);
 8003aaa:	1d3b      	adds	r3, r7, #4
 8003aac:	4619      	mov	r1, r3
 8003aae:	2002      	movs	r0, #2
 8003ab0:	f7ff fc72 	bl	8003398 <pec15_calc>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	813b      	strh	r3, [r7, #8]
    cmd[2] = (uint8_t) (cmd_pec >> 8);
 8003ab8:	893b      	ldrh	r3, [r7, #8]
 8003aba:	0a1b      	lsrs	r3, r3, #8
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	71bb      	strb	r3, [r7, #6]
    cmd[3] = (uint8_t) (cmd_pec);
 8003ac2:	893b      	ldrh	r3, [r7, #8]
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	71fb      	strb	r3, [r7, #7]

    cs_low();
 8003ac8:	f001 f92a 	bl	8004d20 <cs_low>
    spi_write_array(4, cmd);
 8003acc:	1d3b      	adds	r3, r7, #4
 8003ace:	4619      	mov	r1, r3
 8003ad0:	2004      	movs	r0, #4
 8003ad2:	f001 f959 	bl	8004d88 <spi_write_array>
    while ((counter < 400000) && (finished == 0))
 8003ad6:	e00d      	b.n	8003af4 <LTC681x_pollAdc+0x64>
    {
        current_time = spi_read_byte(0xFF);
 8003ad8:	20ff      	movs	r0, #255	@ 0xff
 8003ada:	f001 f9b5 	bl	8004e48 <spi_read_byte>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	72bb      	strb	r3, [r7, #10]
        if (current_time > 0)
 8003ae2:	7abb      	ldrb	r3, [r7, #10]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d002      	beq.n	8003aee <LTC681x_pollAdc+0x5e>
        {
            finished = 1;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	72fb      	strb	r3, [r7, #11]
 8003aec:	e002      	b.n	8003af4 <LTC681x_pollAdc+0x64>

        }
        else
        {
            counter = counter + 10;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	330a      	adds	r3, #10
 8003af2:	60fb      	str	r3, [r7, #12]
    while ((counter < 400000) && (finished == 0))
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4a06      	ldr	r2, [pc, #24]	@ (8003b10 <LTC681x_pollAdc+0x80>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d802      	bhi.n	8003b02 <LTC681x_pollAdc+0x72>
 8003afc:	7afb      	ldrb	r3, [r7, #11]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0ea      	beq.n	8003ad8 <LTC681x_pollAdc+0x48>
        }
    }
    cs_high();
 8003b02:	f001 f919 	bl	8004d38 <cs_high>

    return ((uint32_t)current_time);
 8003b06:	7abb      	ldrb	r3, [r7, #10]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	00061a7f 	.word	0x00061a7f

08003b14 <LTC681x_clraux>:
 The command clears the Auxiliary registers and initializes
 all values to 1. The register will read back hexadecimal 0xFF
 after the command is sent.
 */
void LTC681x_clraux()
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
    uint8_t cmd[2] = { 0x07, 0x12 };
 8003b1a:	f241 2307 	movw	r3, #4615	@ 0x1207
 8003b1e:	80bb      	strh	r3, [r7, #4]
    cmd_68(cmd);
 8003b20:	1d3b      	adds	r3, r7, #4
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff fb86 	bl	8003234 <cmd_68>
}
 8003b28:	bf00      	nop
 8003b2a:	3708      	adds	r7, #8
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <LTC681x_check_pec>:
/* Helper function that increments PEC counters */
void LTC681x_check_pec(uint8_t total_ic, //Number of ICs in the system
        uint8_t reg, //Type of Register
        cell_asic *ic //A two dimensional array that stores the data
        )
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	4603      	mov	r3, r0
 8003b38:	603a      	str	r2, [r7, #0]
 8003b3a:	71fb      	strb	r3, [r7, #7]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	71bb      	strb	r3, [r7, #6]
    int current_ic;
    int i;
    switch (reg)
 8003b40:	79bb      	ldrb	r3, [r7, #6]
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	f200 81d3 	bhi.w	8003eee <LTC681x_check_pec+0x3be>
 8003b48:	a201      	add	r2, pc, #4	@ (adr r2, 8003b50 <LTC681x_check_pec+0x20>)
 8003b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4e:	bf00      	nop
 8003b50:	08003b65 	.word	0x08003b65
 8003b54:	08003c91 	.word	0x08003c91
 8003b58:	08003d5b 	.word	0x08003d5b
 8003b5c:	08003e25 	.word	0x08003e25
 8003b60:	08003bfb 	.word	0x08003bfb
    {
    case CFGR:
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003b64:	2300      	movs	r3, #0
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	e042      	b.n	8003bf0 <LTC681x_check_pec+0xc0>
        {
            ic[current_ic].crc_count.pec_count =
                    ic[current_ic].crc_count.pec_count
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	019b      	lsls	r3, r3, #6
 8003b70:	4413      	add	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	461a      	mov	r2, r3
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	4413      	add	r3, r2
 8003b7a:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	@ 0xc6
                            + ic[current_ic].config.rx_pec_match;
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	4613      	mov	r3, r2
 8003b82:	019b      	lsls	r3, r3, #6
 8003b84:	4413      	add	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	461a      	mov	r2, r3
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	7b9b      	ldrb	r3, [r3, #14]
 8003b90:	4618      	mov	r0, r3
            ic[current_ic].crc_count.pec_count =
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	4613      	mov	r3, r2
 8003b96:	019b      	lsls	r3, r3, #6
 8003b98:	4413      	add	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	4413      	add	r3, r2
                            + ic[current_ic].config.rx_pec_match;
 8003ba2:	180a      	adds	r2, r1, r0
 8003ba4:	b292      	uxth	r2, r2
            ic[current_ic].crc_count.pec_count =
 8003ba6:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
            ic[current_ic].crc_count.cfgr_pec =
                    ic[current_ic].crc_count.cfgr_pec
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	4613      	mov	r3, r2
 8003bae:	019b      	lsls	r3, r3, #6
 8003bb0:	4413      	add	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	@ 0xc8
                            + ic[current_ic].config.rx_pec_match;
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	019b      	lsls	r3, r3, #6
 8003bc4:	4413      	add	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	461a      	mov	r2, r3
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	4413      	add	r3, r2
 8003bce:	7b9b      	ldrb	r3, [r3, #14]
 8003bd0:	4618      	mov	r0, r3
            ic[current_ic].crc_count.cfgr_pec =
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	019b      	lsls	r3, r3, #6
 8003bd8:	4413      	add	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	461a      	mov	r2, r3
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	4413      	add	r3, r2
                            + ic[current_ic].config.rx_pec_match;
 8003be2:	180a      	adds	r2, r1, r0
 8003be4:	b292      	uxth	r2, r2
            ic[current_ic].crc_count.cfgr_pec =
 8003be6:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	3301      	adds	r3, #1
 8003bee:	60fb      	str	r3, [r7, #12]
 8003bf0:	79fb      	ldrb	r3, [r7, #7]
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	dbb8      	blt.n	8003b6a <LTC681x_check_pec+0x3a>
        }
        break;
 8003bf8:	e17a      	b.n	8003ef0 <LTC681x_check_pec+0x3c0>

    case CFGRB:
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	60fb      	str	r3, [r7, #12]
 8003bfe:	e042      	b.n	8003c86 <LTC681x_check_pec+0x156>
        {
            ic[current_ic].crc_count.pec_count =
                    ic[current_ic].crc_count.pec_count
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	4613      	mov	r3, r2
 8003c04:	019b      	lsls	r3, r3, #6
 8003c06:	4413      	add	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	@ 0xc6
                            + ic[current_ic].configb.rx_pec_match;
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	4613      	mov	r3, r2
 8003c18:	019b      	lsls	r3, r3, #6
 8003c1a:	4413      	add	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	461a      	mov	r2, r3
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	4413      	add	r3, r2
 8003c24:	7f5b      	ldrb	r3, [r3, #29]
 8003c26:	4618      	mov	r0, r3
            ic[current_ic].crc_count.pec_count =
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	019b      	lsls	r3, r3, #6
 8003c2e:	4413      	add	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	461a      	mov	r2, r3
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	4413      	add	r3, r2
                            + ic[current_ic].configb.rx_pec_match;
 8003c38:	180a      	adds	r2, r1, r0
 8003c3a:	b292      	uxth	r2, r2
            ic[current_ic].crc_count.pec_count =
 8003c3c:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
            ic[current_ic].crc_count.cfgr_pec =
                    ic[current_ic].crc_count.cfgr_pec
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	4613      	mov	r3, r2
 8003c44:	019b      	lsls	r3, r3, #6
 8003c46:	4413      	add	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	@ 0xc8
                            + ic[current_ic].configb.rx_pec_match;
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	4613      	mov	r3, r2
 8003c58:	019b      	lsls	r3, r3, #6
 8003c5a:	4413      	add	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	461a      	mov	r2, r3
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	4413      	add	r3, r2
 8003c64:	7f5b      	ldrb	r3, [r3, #29]
 8003c66:	4618      	mov	r0, r3
            ic[current_ic].crc_count.cfgr_pec =
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	019b      	lsls	r3, r3, #6
 8003c6e:	4413      	add	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	461a      	mov	r2, r3
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	4413      	add	r3, r2
                            + ic[current_ic].configb.rx_pec_match;
 8003c78:	180a      	adds	r2, r1, r0
 8003c7a:	b292      	uxth	r2, r2
            ic[current_ic].crc_count.cfgr_pec =
 8003c7c:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	3301      	adds	r3, #1
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	79fb      	ldrb	r3, [r7, #7]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	dbb8      	blt.n	8003c00 <LTC681x_check_pec+0xd0>
        }
        break;
 8003c8e:	e12f      	b.n	8003ef0 <LTC681x_check_pec+0x3c0>
    case CELL:
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003c90:	2300      	movs	r3, #0
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	e05c      	b.n	8003d50 <LTC681x_check_pec+0x220>
        {
            for (i = 0; i < ic[0].ic_reg.num_cv_reg; i++)
 8003c96:	2300      	movs	r3, #0
 8003c98:	60bb      	str	r3, [r7, #8]
 8003c9a:	e04f      	b.n	8003d3c <LTC681x_check_pec+0x20c>
            {
                ic[current_ic].crc_count.pec_count =
                        ic[current_ic].crc_count.pec_count
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	019b      	lsls	r3, r3, #6
 8003ca2:	4413      	add	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	4413      	add	r3, r2
 8003cac:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	@ 0xc6
                                + ic[current_ic].cells.pec_match[i];
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	019b      	lsls	r3, r3, #6
 8003cb6:	4413      	add	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	461a      	mov	r2, r3
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	441a      	add	r2, r3
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	3342      	adds	r3, #66	@ 0x42
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	4618      	mov	r0, r3
                ic[current_ic].crc_count.pec_count =
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	019b      	lsls	r3, r3, #6
 8003cd0:	4413      	add	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	4413      	add	r3, r2
                                + ic[current_ic].cells.pec_match[i];
 8003cda:	180a      	adds	r2, r1, r0
 8003cdc:	b292      	uxth	r2, r2
                ic[current_ic].crc_count.pec_count =
 8003cde:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
                ic[current_ic].crc_count.cell_pec[i] =
                        ic[current_ic].crc_count.cell_pec[i]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	019b      	lsls	r3, r3, #6
 8003ce8:	4413      	add	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	461a      	mov	r2, r3
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	441a      	add	r2, r3
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	3360      	adds	r3, #96	@ 0x60
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	4413      	add	r3, r2
 8003cfa:	8959      	ldrh	r1, [r3, #10]
                                + ic[current_ic].cells.pec_match[i];
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	019b      	lsls	r3, r3, #6
 8003d02:	4413      	add	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	461a      	mov	r2, r3
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	441a      	add	r2, r3
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	4413      	add	r3, r2
 8003d10:	3342      	adds	r3, #66	@ 0x42
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	4618      	mov	r0, r3
                ic[current_ic].crc_count.cell_pec[i] =
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	019b      	lsls	r3, r3, #6
 8003d1c:	4413      	add	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	461a      	mov	r2, r3
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	441a      	add	r2, r3
                                + ic[current_ic].cells.pec_match[i];
 8003d26:	180b      	adds	r3, r1, r0
 8003d28:	b299      	uxth	r1, r3
                ic[current_ic].crc_count.cell_pec[i] =
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	3360      	adds	r3, #96	@ 0x60
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	4413      	add	r3, r2
 8003d32:	460a      	mov	r2, r1
 8003d34:	815a      	strh	r2, [r3, #10]
            for (i = 0; i < ic[0].ic_reg.num_cv_reg; i++)
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	60bb      	str	r3, [r7, #8]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 8003d42:	461a      	mov	r2, r3
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	4293      	cmp	r3, r2
 8003d48:	dba8      	blt.n	8003c9c <LTC681x_check_pec+0x16c>
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	79fb      	ldrb	r3, [r7, #7]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	db9e      	blt.n	8003c96 <LTC681x_check_pec+0x166>
            }
        }
        break;
 8003d58:	e0ca      	b.n	8003ef0 <LTC681x_check_pec+0x3c0>
    case AUX:
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	e05c      	b.n	8003e1a <LTC681x_check_pec+0x2ea>
        {
            for (i = 0; i < ic[0].ic_reg.num_gpio_reg; i++)
 8003d60:	2300      	movs	r3, #0
 8003d62:	60bb      	str	r3, [r7, #8]
 8003d64:	e04f      	b.n	8003e06 <LTC681x_check_pec+0x2d6>
            {
                ic[current_ic].crc_count.pec_count =
                        ic[current_ic].crc_count.pec_count
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	019b      	lsls	r3, r3, #6
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	461a      	mov	r2, r3
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	4413      	add	r3, r2
 8003d76:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	@ 0xc6
                                + (ic[current_ic].aux.pec_match[i]);
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	019b      	lsls	r3, r3, #6
 8003d80:	4413      	add	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	461a      	mov	r2, r3
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	441a      	add	r2, r3
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	3360      	adds	r3, #96	@ 0x60
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
                ic[current_ic].crc_count.pec_count =
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4613      	mov	r3, r2
 8003d98:	019b      	lsls	r3, r3, #6
 8003d9a:	4413      	add	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	461a      	mov	r2, r3
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	4413      	add	r3, r2
                                + (ic[current_ic].aux.pec_match[i]);
 8003da4:	180a      	adds	r2, r1, r0
 8003da6:	b292      	uxth	r2, r2
                ic[current_ic].crc_count.pec_count =
 8003da8:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
                ic[current_ic].crc_count.aux_pec[i] =
                        ic[current_ic].crc_count.aux_pec[i]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	4613      	mov	r3, r2
 8003db0:	019b      	lsls	r3, r3, #6
 8003db2:	4413      	add	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	461a      	mov	r2, r3
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	441a      	add	r2, r3
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	3368      	adds	r3, #104	@ 0x68
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	4413      	add	r3, r2
 8003dc4:	88d9      	ldrh	r1, [r3, #6]
                                + (ic[current_ic].aux.pec_match[i]);
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	019b      	lsls	r3, r3, #6
 8003dcc:	4413      	add	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	441a      	add	r2, r3
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	4413      	add	r3, r2
 8003dda:	3360      	adds	r3, #96	@ 0x60
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	4618      	mov	r0, r3
                ic[current_ic].crc_count.aux_pec[i] =
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	4613      	mov	r3, r2
 8003de4:	019b      	lsls	r3, r3, #6
 8003de6:	4413      	add	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	461a      	mov	r2, r3
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	441a      	add	r2, r3
                                + (ic[current_ic].aux.pec_match[i]);
 8003df0:	180b      	adds	r3, r1, r0
 8003df2:	b299      	uxth	r1, r3
                ic[current_ic].crc_count.aux_pec[i] =
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	3368      	adds	r3, #104	@ 0x68
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	4413      	add	r3, r2
 8003dfc:	460a      	mov	r2, r1
 8003dfe:	80da      	strh	r2, [r3, #6]
            for (i = 0; i < ic[0].ic_reg.num_gpio_reg; i++)
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	3301      	adds	r3, #1
 8003e04:	60bb      	str	r3, [r7, #8]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	4293      	cmp	r3, r2
 8003e12:	dba8      	blt.n	8003d66 <LTC681x_check_pec+0x236>
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	3301      	adds	r3, #1
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	79fb      	ldrb	r3, [r7, #7]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	db9e      	blt.n	8003d60 <LTC681x_check_pec+0x230>
            }
        }

        break;
 8003e22:	e065      	b.n	8003ef0 <LTC681x_check_pec+0x3c0>
    case STAT:
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003e24:	2300      	movs	r3, #0
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	e05c      	b.n	8003ee4 <LTC681x_check_pec+0x3b4>
        {

            for (i = 0; i < ic[0].ic_reg.num_stat_reg - 1; i++)
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60bb      	str	r3, [r7, #8]
 8003e2e:	e04f      	b.n	8003ed0 <LTC681x_check_pec+0x3a0>
            {
                ic[current_ic].crc_count.pec_count =
                        ic[current_ic].crc_count.pec_count
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	4613      	mov	r3, r2
 8003e34:	019b      	lsls	r3, r3, #6
 8003e36:	4413      	add	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	@ 0xc6
                                + ic[current_ic].stat.pec_match[i];
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	4613      	mov	r3, r2
 8003e48:	019b      	lsls	r3, r3, #6
 8003e4a:	4413      	add	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	461a      	mov	r2, r3
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	441a      	add	r2, r3
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	4413      	add	r3, r2
 8003e58:	3371      	adds	r3, #113	@ 0x71
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	4618      	mov	r0, r3
                ic[current_ic].crc_count.pec_count =
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	4613      	mov	r3, r2
 8003e62:	019b      	lsls	r3, r3, #6
 8003e64:	4413      	add	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	461a      	mov	r2, r3
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	4413      	add	r3, r2
                                + ic[current_ic].stat.pec_match[i];
 8003e6e:	180a      	adds	r2, r1, r0
 8003e70:	b292      	uxth	r2, r2
                ic[current_ic].crc_count.pec_count =
 8003e72:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
                ic[current_ic].crc_count.stat_pec[i] =
                        ic[current_ic].crc_count.stat_pec[i]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	019b      	lsls	r3, r3, #6
 8003e7c:	4413      	add	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	461a      	mov	r2, r3
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	441a      	add	r2, r3
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	336c      	adds	r3, #108	@ 0x6c
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	4413      	add	r3, r2
 8003e8e:	88d9      	ldrh	r1, [r3, #6]
                                + ic[current_ic].stat.pec_match[i];
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	4613      	mov	r3, r2
 8003e94:	019b      	lsls	r3, r3, #6
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	441a      	add	r2, r3
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	3371      	adds	r3, #113	@ 0x71
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	4618      	mov	r0, r3
                ic[current_ic].crc_count.stat_pec[i] =
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	4613      	mov	r3, r2
 8003eae:	019b      	lsls	r3, r3, #6
 8003eb0:	4413      	add	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	441a      	add	r2, r3
                                + ic[current_ic].stat.pec_match[i];
 8003eba:	180b      	adds	r3, r1, r0
 8003ebc:	b299      	uxth	r1, r3
                ic[current_ic].crc_count.stat_pec[i] =
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	336c      	adds	r3, #108	@ 0x6c
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	4413      	add	r3, r2
 8003ec6:	460a      	mov	r2, r1
 8003ec8:	80da      	strh	r2, [r3, #6]
            for (i = 0; i < ic[0].ic_reg.num_stat_reg - 1; i++)
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	60bb      	str	r3, [r7, #8]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	f893 30e9 	ldrb.w	r3, [r3, #233]	@ 0xe9
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	dba8      	blt.n	8003e30 <LTC681x_check_pec+0x300>
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	79fb      	ldrb	r3, [r7, #7]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	db9e      	blt.n	8003e2a <LTC681x_check_pec+0x2fa>
            }
        }
        break;
 8003eec:	e000      	b.n	8003ef0 <LTC681x_check_pec+0x3c0>
    default:
        break;
 8003eee:	bf00      	nop
    }
}
 8003ef0:	bf00      	nop
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <LTC681x_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC681x_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that stores the data
        )
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	4603      	mov	r3, r0
 8003f04:	6039      	str	r1, [r7, #0]
 8003f06:	71fb      	strb	r3, [r7, #7]
    int i, current_ic;
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60bb      	str	r3, [r7, #8]
 8003f0c:	e05d      	b.n	8003fca <LTC681x_reset_crc_count+0xce>
    {
        ic[current_ic].crc_count.pec_count = 0;
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	4613      	mov	r3, r2
 8003f12:	019b      	lsls	r3, r3, #6
 8003f14:	4413      	add	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	461a      	mov	r2, r3
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
        ic[current_ic].crc_count.cfgr_pec = 0;
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	4613      	mov	r3, r2
 8003f28:	019b      	lsls	r3, r3, #6
 8003f2a:	4413      	add	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	461a      	mov	r2, r3
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	4413      	add	r3, r2
 8003f34:	2200      	movs	r2, #0
 8003f36:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
        for (i = 0; i < 6; i++)
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	e010      	b.n	8003f62 <LTC681x_reset_crc_count+0x66>
        {
            ic[current_ic].crc_count.cell_pec[i] = 0;
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	4613      	mov	r3, r2
 8003f44:	019b      	lsls	r3, r3, #6
 8003f46:	4413      	add	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	441a      	add	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	3360      	adds	r3, #96	@ 0x60
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	4413      	add	r3, r2
 8003f58:	2200      	movs	r2, #0
 8003f5a:	815a      	strh	r2, [r3, #10]
        for (i = 0; i < 6; i++)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2b05      	cmp	r3, #5
 8003f66:	ddeb      	ble.n	8003f40 <LTC681x_reset_crc_count+0x44>
        }
        for (i = 0; i < 4; i++)
 8003f68:	2300      	movs	r3, #0
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	e010      	b.n	8003f90 <LTC681x_reset_crc_count+0x94>
        {
            ic[current_ic].crc_count.aux_pec[i] = 0;
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	4613      	mov	r3, r2
 8003f72:	019b      	lsls	r3, r3, #6
 8003f74:	4413      	add	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	461a      	mov	r2, r3
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	441a      	add	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	3368      	adds	r3, #104	@ 0x68
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	4413      	add	r3, r2
 8003f86:	2200      	movs	r2, #0
 8003f88:	80da      	strh	r2, [r3, #6]
        for (i = 0; i < 4; i++)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b03      	cmp	r3, #3
 8003f94:	ddeb      	ble.n	8003f6e <LTC681x_reset_crc_count+0x72>
        }
        for (i = 0; i < 2; i++)
 8003f96:	2300      	movs	r3, #0
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	e010      	b.n	8003fbe <LTC681x_reset_crc_count+0xc2>
        {
            ic[current_ic].crc_count.stat_pec[i] = 0;
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	019b      	lsls	r3, r3, #6
 8003fa2:	4413      	add	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	441a      	add	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	336c      	adds	r3, #108	@ 0x6c
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	4413      	add	r3, r2
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	80da      	strh	r2, [r3, #6]
        for (i = 0; i < 2; i++)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	60fb      	str	r3, [r7, #12]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	ddeb      	ble.n	8003f9c <LTC681x_reset_crc_count+0xa0>
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	60bb      	str	r3, [r7, #8]
 8003fca:	79fb      	ldrb	r3, [r7, #7]
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	db9d      	blt.n	8003f0e <LTC681x_reset_crc_count+0x12>
        }
    }
}
 8003fd2:	bf00      	nop
 8003fd4:	bf00      	nop
 8003fd6:	3714      	adds	r7, #20
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <LTC681x_init_cfg>:

/* Helper function to initialize CFG variables */
void LTC681x_init_cfg(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that stores the data
        )
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	6039      	str	r1, [r7, #0]
 8003fea:	71fb      	strb	r3, [r7, #7]
    uint8_t current_ic, j;
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003fec:	2300      	movs	r3, #0
 8003fee:	73fb      	strb	r3, [r7, #15]
 8003ff0:	e021      	b.n	8004036 <LTC681x_init_cfg+0x56>
    {
        for (j = 0; j < 6; j++)
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	73bb      	strb	r3, [r7, #14]
 8003ff6:	e00d      	b.n	8004014 <LTC681x_init_cfg+0x34>
        {
            ic[current_ic].config.tx_data[j] = 0;
 8003ff8:	7bfa      	ldrb	r2, [r7, #15]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	019b      	lsls	r3, r3, #6
 8003ffe:	4413      	add	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	461a      	mov	r2, r3
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	441a      	add	r2, r3
 8004008:	7bbb      	ldrb	r3, [r7, #14]
 800400a:	2100      	movs	r1, #0
 800400c:	54d1      	strb	r1, [r2, r3]
        for (j = 0; j < 6; j++)
 800400e:	7bbb      	ldrb	r3, [r7, #14]
 8004010:	3301      	adds	r3, #1
 8004012:	73bb      	strb	r3, [r7, #14]
 8004014:	7bbb      	ldrb	r3, [r7, #14]
 8004016:	2b05      	cmp	r3, #5
 8004018:	d9ee      	bls.n	8003ff8 <LTC681x_init_cfg+0x18>
        }
        ic[current_ic].isospi_reverse = 0;
 800401a:	7bfa      	ldrb	r2, [r7, #15]
 800401c:	4613      	mov	r3, r2
 800401e:	019b      	lsls	r3, r3, #6
 8004020:	4413      	add	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	461a      	mov	r2, r3
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	4413      	add	r3, r2
 800402a:	2200      	movs	r2, #0
 800402c:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8004030:	7bfb      	ldrb	r3, [r7, #15]
 8004032:	3301      	adds	r3, #1
 8004034:	73fb      	strb	r3, [r7, #15]
 8004036:	7bfa      	ldrb	r2, [r7, #15]
 8004038:	79fb      	ldrb	r3, [r7, #7]
 800403a:	429a      	cmp	r2, r3
 800403c:	d3d9      	bcc.n	8003ff2 <LTC681x_init_cfg+0x12>
    }
}
 800403e:	bf00      	nop
 8004040:	bf00      	nop
 8004042:	3714      	adds	r7, #20
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <LTC681x_set_cfgr>:
        bool dcc[12], // The DCC bits
        bool dcto[4], // The Dcto bits
        uint16_t uv, // The UV value
        uint16_t ov // The OV value
        )
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6039      	str	r1, [r7, #0]
 8004054:	4611      	mov	r1, r2
 8004056:	461a      	mov	r2, r3
 8004058:	4603      	mov	r3, r0
 800405a:	71fb      	strb	r3, [r7, #7]
 800405c:	460b      	mov	r3, r1
 800405e:	71bb      	strb	r3, [r7, #6]
 8004060:	4613      	mov	r3, r2
 8004062:	717b      	strb	r3, [r7, #5]
    LTC681x_set_cfgr_refon(nIC, ic, refon);
 8004064:	79ba      	ldrb	r2, [r7, #6]
 8004066:	79fb      	ldrb	r3, [r7, #7]
 8004068:	6839      	ldr	r1, [r7, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f000 f828 	bl	80040c0 <LTC681x_set_cfgr_refon>
    LTC681x_set_cfgr_adcopt(nIC, ic, adcopt);
 8004070:	797a      	ldrb	r2, [r7, #5]
 8004072:	79fb      	ldrb	r3, [r7, #7]
 8004074:	6839      	ldr	r1, [r7, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f000 f85e 	bl	8004138 <LTC681x_set_cfgr_adcopt>
    LTC681x_set_cfgr_gpio(nIC, ic, gpio);
 800407c:	79fb      	ldrb	r3, [r7, #7]
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	6839      	ldr	r1, [r7, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f000 f894 	bl	80041b0 <LTC681x_set_cfgr_gpio>
    LTC681x_set_cfgr_dis(nIC, ic, dcc);
 8004088:	79fb      	ldrb	r3, [r7, #7]
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	6839      	ldr	r1, [r7, #0]
 800408e:	4618      	mov	r0, r3
 8004090:	f000 f8e6 	bl	8004260 <LTC681x_set_cfgr_dis>
    LTC681x_set_cfgr_dcto(nIC, ic, dcto);
 8004094:	79fb      	ldrb	r3, [r7, #7]
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	6839      	ldr	r1, [r7, #0]
 800409a:	4618      	mov	r0, r3
 800409c:	f000 f97f 	bl	800439e <LTC681x_set_cfgr_dcto>
    LTC681x_set_cfgr_uv(nIC, ic, uv);
 80040a0:	8bba      	ldrh	r2, [r7, #28]
 80040a2:	79fb      	ldrb	r3, [r7, #7]
 80040a4:	6839      	ldr	r1, [r7, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 f9d1 	bl	800444e <LTC681x_set_cfgr_uv>
    LTC681x_set_cfgr_ov(nIC, ic, ov);
 80040ac:	8c3a      	ldrh	r2, [r7, #32]
 80040ae:	79fb      	ldrb	r3, [r7, #7]
 80040b0:	6839      	ldr	r1, [r7, #0]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 fa1b 	bl	80044ee <LTC681x_set_cfgr_ov>
}
 80040b8:	bf00      	nop
 80040ba:	3708      	adds	r7, #8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <LTC681x_set_cfgr_refon>:

/* Helper function to set the REFON bit */
void LTC681x_set_cfgr_refon(uint8_t nIC, cell_asic *ic, bool refon)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	4603      	mov	r3, r0
 80040c8:	6039      	str	r1, [r7, #0]
 80040ca:	71fb      	strb	r3, [r7, #7]
 80040cc:	4613      	mov	r3, r2
 80040ce:	71bb      	strb	r3, [r7, #6]
    if (refon)
 80040d0:	79bb      	ldrb	r3, [r7, #6]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d015      	beq.n	8004102 <LTC681x_set_cfgr_refon+0x42>
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] | 0x04;
 80040d6:	79fa      	ldrb	r2, [r7, #7]
 80040d8:	4613      	mov	r3, r2
 80040da:	019b      	lsls	r3, r3, #6
 80040dc:	4413      	add	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	461a      	mov	r2, r3
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	4413      	add	r3, r2
 80040e6:	7819      	ldrb	r1, [r3, #0]
 80040e8:	79fa      	ldrb	r2, [r7, #7]
 80040ea:	4613      	mov	r3, r2
 80040ec:	019b      	lsls	r3, r3, #6
 80040ee:	4413      	add	r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	461a      	mov	r2, r3
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	4413      	add	r3, r2
 80040f8:	f041 0204 	orr.w	r2, r1, #4
 80040fc:	b2d2      	uxtb	r2, r2
 80040fe:	701a      	strb	r2, [r3, #0]
    else
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] & 0xFB;
}
 8004100:	e014      	b.n	800412c <LTC681x_set_cfgr_refon+0x6c>
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] & 0xFB;
 8004102:	79fa      	ldrb	r2, [r7, #7]
 8004104:	4613      	mov	r3, r2
 8004106:	019b      	lsls	r3, r3, #6
 8004108:	4413      	add	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	461a      	mov	r2, r3
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	4413      	add	r3, r2
 8004112:	7819      	ldrb	r1, [r3, #0]
 8004114:	79fa      	ldrb	r2, [r7, #7]
 8004116:	4613      	mov	r3, r2
 8004118:	019b      	lsls	r3, r3, #6
 800411a:	4413      	add	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	461a      	mov	r2, r3
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	4413      	add	r3, r2
 8004124:	f021 0204 	bic.w	r2, r1, #4
 8004128:	b2d2      	uxtb	r2, r2
 800412a:	701a      	strb	r2, [r3, #0]
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <LTC681x_set_cfgr_adcopt>:

/* Helper function to set the ADCOPT bit */
void LTC681x_set_cfgr_adcopt(uint8_t nIC, cell_asic *ic, bool adcopt)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	4603      	mov	r3, r0
 8004140:	6039      	str	r1, [r7, #0]
 8004142:	71fb      	strb	r3, [r7, #7]
 8004144:	4613      	mov	r3, r2
 8004146:	71bb      	strb	r3, [r7, #6]
    if (adcopt)
 8004148:	79bb      	ldrb	r3, [r7, #6]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d015      	beq.n	800417a <LTC681x_set_cfgr_adcopt+0x42>
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] | 0x01;
 800414e:	79fa      	ldrb	r2, [r7, #7]
 8004150:	4613      	mov	r3, r2
 8004152:	019b      	lsls	r3, r3, #6
 8004154:	4413      	add	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	461a      	mov	r2, r3
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	4413      	add	r3, r2
 800415e:	7819      	ldrb	r1, [r3, #0]
 8004160:	79fa      	ldrb	r2, [r7, #7]
 8004162:	4613      	mov	r3, r2
 8004164:	019b      	lsls	r3, r3, #6
 8004166:	4413      	add	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	461a      	mov	r2, r3
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	4413      	add	r3, r2
 8004170:	f041 0201 	orr.w	r2, r1, #1
 8004174:	b2d2      	uxtb	r2, r2
 8004176:	701a      	strb	r2, [r3, #0]
    else
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] & 0xFE;
}
 8004178:	e014      	b.n	80041a4 <LTC681x_set_cfgr_adcopt+0x6c>
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] & 0xFE;
 800417a:	79fa      	ldrb	r2, [r7, #7]
 800417c:	4613      	mov	r3, r2
 800417e:	019b      	lsls	r3, r3, #6
 8004180:	4413      	add	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	461a      	mov	r2, r3
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	4413      	add	r3, r2
 800418a:	7819      	ldrb	r1, [r3, #0]
 800418c:	79fa      	ldrb	r2, [r7, #7]
 800418e:	4613      	mov	r3, r2
 8004190:	019b      	lsls	r3, r3, #6
 8004192:	4413      	add	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	461a      	mov	r2, r3
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	4413      	add	r3, r2
 800419c:	f021 0201 	bic.w	r2, r1, #1
 80041a0:	b2d2      	uxtb	r2, r2
 80041a2:	701a      	strb	r2, [r3, #0]
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <LTC681x_set_cfgr_gpio>:

/* Helper function to set GPIO bits */
void LTC681x_set_cfgr_gpio(uint8_t nIC, cell_asic *ic, bool gpio[5])
{
 80041b0:	b480      	push	{r7}
 80041b2:	b087      	sub	sp, #28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	4603      	mov	r3, r0
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
 80041bc:	73fb      	strb	r3, [r7, #15]
    int i;
    for (i = 0; i < 5; i++)
 80041be:	2300      	movs	r3, #0
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	e043      	b.n	800424c <LTC681x_set_cfgr_gpio+0x9c>
    {
        if (gpio[i])
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	4413      	add	r3, r2
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d01c      	beq.n	800420a <LTC681x_set_cfgr_gpio+0x5a>
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 80041d0:	7bfa      	ldrb	r2, [r7, #15]
 80041d2:	4613      	mov	r3, r2
 80041d4:	019b      	lsls	r3, r3, #6
 80041d6:	4413      	add	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	461a      	mov	r2, r3
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	4413      	add	r3, r2
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	b25a      	sxtb	r2, r3
                    | (0x01 << (i + 3));
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	3303      	adds	r3, #3
 80041e8:	2101      	movs	r1, #1
 80041ea:	fa01 f303 	lsl.w	r3, r1, r3
 80041ee:	b25b      	sxtb	r3, r3
 80041f0:	4313      	orrs	r3, r2
 80041f2:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 80041f4:	7bfa      	ldrb	r2, [r7, #15]
 80041f6:	4613      	mov	r3, r2
 80041f8:	019b      	lsls	r3, r3, #6
 80041fa:	4413      	add	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	461a      	mov	r2, r3
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	4413      	add	r3, r2
                    | (0x01 << (i + 3));
 8004204:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 8004206:	701a      	strb	r2, [r3, #0]
 8004208:	e01d      	b.n	8004246 <LTC681x_set_cfgr_gpio+0x96>
        else
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 800420a:	7bfa      	ldrb	r2, [r7, #15]
 800420c:	4613      	mov	r3, r2
 800420e:	019b      	lsls	r3, r3, #6
 8004210:	4413      	add	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	461a      	mov	r2, r3
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	4413      	add	r3, r2
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	b25a      	sxtb	r2, r3
                    & (~(0x01 << (i + 3)));
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	3303      	adds	r3, #3
 8004222:	2101      	movs	r1, #1
 8004224:	fa01 f303 	lsl.w	r3, r1, r3
 8004228:	b25b      	sxtb	r3, r3
 800422a:	43db      	mvns	r3, r3
 800422c:	b25b      	sxtb	r3, r3
 800422e:	4013      	ands	r3, r2
 8004230:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 8004232:	7bfa      	ldrb	r2, [r7, #15]
 8004234:	4613      	mov	r3, r2
 8004236:	019b      	lsls	r3, r3, #6
 8004238:	4413      	add	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	461a      	mov	r2, r3
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	4413      	add	r3, r2
                    & (~(0x01 << (i + 3)));
 8004242:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 8004244:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 5; i++)
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	3301      	adds	r3, #1
 800424a:	617b      	str	r3, [r7, #20]
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	2b04      	cmp	r3, #4
 8004250:	ddb8      	ble.n	80041c4 <LTC681x_set_cfgr_gpio+0x14>
    }
}
 8004252:	bf00      	nop
 8004254:	bf00      	nop
 8004256:	371c      	adds	r7, #28
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <LTC681x_set_cfgr_dis>:

/* Helper function to control discharge */
void LTC681x_set_cfgr_dis(uint8_t nIC, cell_asic *ic, bool dcc[12])
{
 8004260:	b480      	push	{r7}
 8004262:	b087      	sub	sp, #28
 8004264:	af00      	add	r7, sp, #0
 8004266:	4603      	mov	r3, r0
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
 800426c:	73fb      	strb	r3, [r7, #15]
    int i;
    for (i = 0; i < 8; i++)
 800426e:	2300      	movs	r3, #0
 8004270:	617b      	str	r3, [r7, #20]
 8004272:	e041      	b.n	80042f8 <LTC681x_set_cfgr_dis+0x98>
    {
        if (dcc[i])
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	4413      	add	r3, r2
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d01b      	beq.n	80042b8 <LTC681x_set_cfgr_dis+0x58>
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4] | (0x01 << i);
 8004280:	7bfa      	ldrb	r2, [r7, #15]
 8004282:	4613      	mov	r3, r2
 8004284:	019b      	lsls	r3, r3, #6
 8004286:	4413      	add	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	461a      	mov	r2, r3
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	4413      	add	r3, r2
 8004290:	791b      	ldrb	r3, [r3, #4]
 8004292:	b25a      	sxtb	r2, r3
 8004294:	2101      	movs	r1, #1
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	fa01 f303 	lsl.w	r3, r1, r3
 800429c:	b25b      	sxtb	r3, r3
 800429e:	4313      	orrs	r3, r2
 80042a0:	b259      	sxtb	r1, r3
 80042a2:	7bfa      	ldrb	r2, [r7, #15]
 80042a4:	4613      	mov	r3, r2
 80042a6:	019b      	lsls	r3, r3, #6
 80042a8:	4413      	add	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	461a      	mov	r2, r3
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	4413      	add	r3, r2
 80042b2:	b2ca      	uxtb	r2, r1
 80042b4:	711a      	strb	r2, [r3, #4]
 80042b6:	e01c      	b.n	80042f2 <LTC681x_set_cfgr_dis+0x92>
        else
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]
 80042b8:	7bfa      	ldrb	r2, [r7, #15]
 80042ba:	4613      	mov	r3, r2
 80042bc:	019b      	lsls	r3, r3, #6
 80042be:	4413      	add	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	461a      	mov	r2, r3
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4413      	add	r3, r2
 80042c8:	791b      	ldrb	r3, [r3, #4]
 80042ca:	b25a      	sxtb	r2, r3
                    & (~(0x01 << i));
 80042cc:	2101      	movs	r1, #1
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	fa01 f303 	lsl.w	r3, r1, r3
 80042d4:	b25b      	sxtb	r3, r3
 80042d6:	43db      	mvns	r3, r3
 80042d8:	b25b      	sxtb	r3, r3
 80042da:	4013      	ands	r3, r2
 80042dc:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]
 80042de:	7bfa      	ldrb	r2, [r7, #15]
 80042e0:	4613      	mov	r3, r2
 80042e2:	019b      	lsls	r3, r3, #6
 80042e4:	4413      	add	r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	461a      	mov	r2, r3
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	4413      	add	r3, r2
                    & (~(0x01 << i));
 80042ee:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]
 80042f0:	711a      	strb	r2, [r3, #4]
    for (i = 0; i < 8; i++)
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	3301      	adds	r3, #1
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	2b07      	cmp	r3, #7
 80042fc:	ddba      	ble.n	8004274 <LTC681x_set_cfgr_dis+0x14>
    }
    for (i = 0; i < 4; i++)
 80042fe:	2300      	movs	r3, #0
 8004300:	617b      	str	r3, [r7, #20]
 8004302:	e042      	b.n	800438a <LTC681x_set_cfgr_dis+0x12a>
    {
        if (dcc[i + 8])
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	3308      	adds	r3, #8
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	4413      	add	r3, r2
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d01b      	beq.n	800434a <LTC681x_set_cfgr_dis+0xea>
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5] | (0x01 << i);
 8004312:	7bfa      	ldrb	r2, [r7, #15]
 8004314:	4613      	mov	r3, r2
 8004316:	019b      	lsls	r3, r3, #6
 8004318:	4413      	add	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	461a      	mov	r2, r3
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	4413      	add	r3, r2
 8004322:	795b      	ldrb	r3, [r3, #5]
 8004324:	b25a      	sxtb	r2, r3
 8004326:	2101      	movs	r1, #1
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	fa01 f303 	lsl.w	r3, r1, r3
 800432e:	b25b      	sxtb	r3, r3
 8004330:	4313      	orrs	r3, r2
 8004332:	b259      	sxtb	r1, r3
 8004334:	7bfa      	ldrb	r2, [r7, #15]
 8004336:	4613      	mov	r3, r2
 8004338:	019b      	lsls	r3, r3, #6
 800433a:	4413      	add	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	461a      	mov	r2, r3
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	4413      	add	r3, r2
 8004344:	b2ca      	uxtb	r2, r1
 8004346:	715a      	strb	r2, [r3, #5]
 8004348:	e01c      	b.n	8004384 <LTC681x_set_cfgr_dis+0x124>
        else
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 800434a:	7bfa      	ldrb	r2, [r7, #15]
 800434c:	4613      	mov	r3, r2
 800434e:	019b      	lsls	r3, r3, #6
 8004350:	4413      	add	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	461a      	mov	r2, r3
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	4413      	add	r3, r2
 800435a:	795b      	ldrb	r3, [r3, #5]
 800435c:	b25a      	sxtb	r2, r3
                    & (~(0x01 << i));
 800435e:	2101      	movs	r1, #1
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	fa01 f303 	lsl.w	r3, r1, r3
 8004366:	b25b      	sxtb	r3, r3
 8004368:	43db      	mvns	r3, r3
 800436a:	b25b      	sxtb	r3, r3
 800436c:	4013      	ands	r3, r2
 800436e:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8004370:	7bfa      	ldrb	r2, [r7, #15]
 8004372:	4613      	mov	r3, r2
 8004374:	019b      	lsls	r3, r3, #6
 8004376:	4413      	add	r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	461a      	mov	r2, r3
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	4413      	add	r3, r2
                    & (~(0x01 << i));
 8004380:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8004382:	715a      	strb	r2, [r3, #5]
    for (i = 0; i < 4; i++)
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	3301      	adds	r3, #1
 8004388:	617b      	str	r3, [r7, #20]
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2b03      	cmp	r3, #3
 800438e:	ddb9      	ble.n	8004304 <LTC681x_set_cfgr_dis+0xa4>
    }
}
 8004390:	bf00      	nop
 8004392:	bf00      	nop
 8004394:	371c      	adds	r7, #28
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <LTC681x_set_cfgr_dcto>:

/* Helper function to control discharge time value */
void LTC681x_set_cfgr_dcto(uint8_t nIC, cell_asic *ic, bool dcto[4])
{
 800439e:	b480      	push	{r7}
 80043a0:	b087      	sub	sp, #28
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	4603      	mov	r3, r0
 80043a6:	60b9      	str	r1, [r7, #8]
 80043a8:	607a      	str	r2, [r7, #4]
 80043aa:	73fb      	strb	r3, [r7, #15]
    int i;
    for (i = 0; i < 4; i++)
 80043ac:	2300      	movs	r3, #0
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	e043      	b.n	800443a <LTC681x_set_cfgr_dcto+0x9c>
    {
        if (dcto[i])
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	4413      	add	r3, r2
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d01c      	beq.n	80043f8 <LTC681x_set_cfgr_dcto+0x5a>
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 80043be:	7bfa      	ldrb	r2, [r7, #15]
 80043c0:	4613      	mov	r3, r2
 80043c2:	019b      	lsls	r3, r3, #6
 80043c4:	4413      	add	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	461a      	mov	r2, r3
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	4413      	add	r3, r2
 80043ce:	795b      	ldrb	r3, [r3, #5]
 80043d0:	b25a      	sxtb	r2, r3
                    | (0x01 << (i + 4));
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	3304      	adds	r3, #4
 80043d6:	2101      	movs	r1, #1
 80043d8:	fa01 f303 	lsl.w	r3, r1, r3
 80043dc:	b25b      	sxtb	r3, r3
 80043de:	4313      	orrs	r3, r2
 80043e0:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 80043e2:	7bfa      	ldrb	r2, [r7, #15]
 80043e4:	4613      	mov	r3, r2
 80043e6:	019b      	lsls	r3, r3, #6
 80043e8:	4413      	add	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	461a      	mov	r2, r3
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	4413      	add	r3, r2
                    | (0x01 << (i + 4));
 80043f2:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 80043f4:	715a      	strb	r2, [r3, #5]
 80043f6:	e01d      	b.n	8004434 <LTC681x_set_cfgr_dcto+0x96>
        else
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 80043f8:	7bfa      	ldrb	r2, [r7, #15]
 80043fa:	4613      	mov	r3, r2
 80043fc:	019b      	lsls	r3, r3, #6
 80043fe:	4413      	add	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	461a      	mov	r2, r3
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	4413      	add	r3, r2
 8004408:	795b      	ldrb	r3, [r3, #5]
 800440a:	b25a      	sxtb	r2, r3
                    & (~(0x01 << (i + 4)));
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	3304      	adds	r3, #4
 8004410:	2101      	movs	r1, #1
 8004412:	fa01 f303 	lsl.w	r3, r1, r3
 8004416:	b25b      	sxtb	r3, r3
 8004418:	43db      	mvns	r3, r3
 800441a:	b25b      	sxtb	r3, r3
 800441c:	4013      	ands	r3, r2
 800441e:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8004420:	7bfa      	ldrb	r2, [r7, #15]
 8004422:	4613      	mov	r3, r2
 8004424:	019b      	lsls	r3, r3, #6
 8004426:	4413      	add	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	461a      	mov	r2, r3
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	4413      	add	r3, r2
                    & (~(0x01 << (i + 4)));
 8004430:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8004432:	715a      	strb	r2, [r3, #5]
    for (i = 0; i < 4; i++)
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	3301      	adds	r3, #1
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2b03      	cmp	r3, #3
 800443e:	ddb8      	ble.n	80043b2 <LTC681x_set_cfgr_dcto+0x14>
    }
}
 8004440:	bf00      	nop
 8004442:	bf00      	nop
 8004444:	371c      	adds	r7, #28
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <LTC681x_set_cfgr_uv>:

/* Helper Function to set UV value in CFG register */
void LTC681x_set_cfgr_uv(uint8_t nIC, cell_asic *ic, uint16_t uv)
{
 800444e:	b480      	push	{r7}
 8004450:	b085      	sub	sp, #20
 8004452:	af00      	add	r7, sp, #0
 8004454:	4603      	mov	r3, r0
 8004456:	6039      	str	r1, [r7, #0]
 8004458:	71fb      	strb	r3, [r7, #7]
 800445a:	4613      	mov	r3, r2
 800445c:	80bb      	strh	r3, [r7, #4]
    uint16_t tmp = (uv / 16) - 1;
 800445e:	88bb      	ldrh	r3, [r7, #4]
 8004460:	091b      	lsrs	r3, r3, #4
 8004462:	b29b      	uxth	r3, r3
 8004464:	3b01      	subs	r3, #1
 8004466:	81fb      	strh	r3, [r7, #14]
    ic[nIC].config.tx_data[1] = 0x00FF & tmp;
 8004468:	79fa      	ldrb	r2, [r7, #7]
 800446a:	4613      	mov	r3, r2
 800446c:	019b      	lsls	r3, r3, #6
 800446e:	4413      	add	r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	461a      	mov	r2, r3
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	4413      	add	r3, r2
 8004478:	89fa      	ldrh	r2, [r7, #14]
 800447a:	b2d2      	uxtb	r2, r2
 800447c:	705a      	strb	r2, [r3, #1]
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2] & 0xF0;
 800447e:	79fa      	ldrb	r2, [r7, #7]
 8004480:	4613      	mov	r3, r2
 8004482:	019b      	lsls	r3, r3, #6
 8004484:	4413      	add	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	461a      	mov	r2, r3
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	4413      	add	r3, r2
 800448e:	7899      	ldrb	r1, [r3, #2]
 8004490:	79fa      	ldrb	r2, [r7, #7]
 8004492:	4613      	mov	r3, r2
 8004494:	019b      	lsls	r3, r3, #6
 8004496:	4413      	add	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	461a      	mov	r2, r3
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	4413      	add	r3, r2
 80044a0:	f021 020f 	bic.w	r2, r1, #15
 80044a4:	b2d2      	uxtb	r2, r2
 80044a6:	709a      	strb	r2, [r3, #2]
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 80044a8:	79fa      	ldrb	r2, [r7, #7]
 80044aa:	4613      	mov	r3, r2
 80044ac:	019b      	lsls	r3, r3, #6
 80044ae:	4413      	add	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	461a      	mov	r2, r3
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	4413      	add	r3, r2
 80044b8:	789b      	ldrb	r3, [r3, #2]
 80044ba:	b25a      	sxtb	r2, r3
            | ((0x0F00 & tmp) >> 8);
 80044bc:	89fb      	ldrh	r3, [r7, #14]
 80044be:	0a1b      	lsrs	r3, r3, #8
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	b25b      	sxtb	r3, r3
 80044c4:	f003 030f 	and.w	r3, r3, #15
 80044c8:	b25b      	sxtb	r3, r3
 80044ca:	4313      	orrs	r3, r2
 80044cc:	b259      	sxtb	r1, r3
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 80044ce:	79fa      	ldrb	r2, [r7, #7]
 80044d0:	4613      	mov	r3, r2
 80044d2:	019b      	lsls	r3, r3, #6
 80044d4:	4413      	add	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	461a      	mov	r2, r3
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	4413      	add	r3, r2
            | ((0x0F00 & tmp) >> 8);
 80044de:	b2ca      	uxtb	r2, r1
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 80044e0:	709a      	strb	r2, [r3, #2]
}
 80044e2:	bf00      	nop
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <LTC681x_set_cfgr_ov>:

/* Helper function to set OV value in CFG register */
void LTC681x_set_cfgr_ov(uint8_t nIC, cell_asic *ic, uint16_t ov)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b085      	sub	sp, #20
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	4603      	mov	r3, r0
 80044f6:	6039      	str	r1, [r7, #0]
 80044f8:	71fb      	strb	r3, [r7, #7]
 80044fa:	4613      	mov	r3, r2
 80044fc:	80bb      	strh	r3, [r7, #4]
    uint16_t tmp = (ov / 16);
 80044fe:	88bb      	ldrh	r3, [r7, #4]
 8004500:	091b      	lsrs	r3, r3, #4
 8004502:	81fb      	strh	r3, [r7, #14]
    ic[nIC].config.tx_data[3] = 0x00FF & (tmp >> 4);
 8004504:	89fb      	ldrh	r3, [r7, #14]
 8004506:	091b      	lsrs	r3, r3, #4
 8004508:	b299      	uxth	r1, r3
 800450a:	79fa      	ldrb	r2, [r7, #7]
 800450c:	4613      	mov	r3, r2
 800450e:	019b      	lsls	r3, r3, #6
 8004510:	4413      	add	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	461a      	mov	r2, r3
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	4413      	add	r3, r2
 800451a:	b2ca      	uxtb	r2, r1
 800451c:	70da      	strb	r2, [r3, #3]
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2] & 0x0F;
 800451e:	79fa      	ldrb	r2, [r7, #7]
 8004520:	4613      	mov	r3, r2
 8004522:	019b      	lsls	r3, r3, #6
 8004524:	4413      	add	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	461a      	mov	r2, r3
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	4413      	add	r3, r2
 800452e:	7899      	ldrb	r1, [r3, #2]
 8004530:	79fa      	ldrb	r2, [r7, #7]
 8004532:	4613      	mov	r3, r2
 8004534:	019b      	lsls	r3, r3, #6
 8004536:	4413      	add	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	461a      	mov	r2, r3
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	4413      	add	r3, r2
 8004540:	f001 020f 	and.w	r2, r1, #15
 8004544:	b2d2      	uxtb	r2, r2
 8004546:	709a      	strb	r2, [r3, #2]
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 8004548:	79fa      	ldrb	r2, [r7, #7]
 800454a:	4613      	mov	r3, r2
 800454c:	019b      	lsls	r3, r3, #6
 800454e:	4413      	add	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	461a      	mov	r2, r3
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	4413      	add	r3, r2
 8004558:	789b      	ldrb	r3, [r3, #2]
 800455a:	b25a      	sxtb	r2, r3
            | ((0x000F & tmp) << 4);
 800455c:	89fb      	ldrh	r3, [r7, #14]
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	b25b      	sxtb	r3, r3
 8004562:	4313      	orrs	r3, r2
 8004564:	b259      	sxtb	r1, r3
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 8004566:	79fa      	ldrb	r2, [r7, #7]
 8004568:	4613      	mov	r3, r2
 800456a:	019b      	lsls	r3, r3, #6
 800456c:	4413      	add	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	461a      	mov	r2, r3
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	4413      	add	r3, r2
            | ((0x000F & tmp) << 4);
 8004576:	b2ca      	uxtb	r2, r1
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 8004578:	709a      	strb	r2, [r3, #2]
}
 800457a:	bf00      	nop
 800457c:	3714      	adds	r7, #20
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
	...

08004588 <u8x8_stm32_gpio_and_delay>:
 */
static uint8_t u8x8_stm32_gpio_and_delay(u8x8_t * const u8x8,
                                           uint8_t msg,
                                           uint8_t arg_int,
                                           void * const arg_ptr)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	607b      	str	r3, [r7, #4]
 8004592:	460b      	mov	r3, r1
 8004594:	72fb      	strb	r3, [r7, #11]
 8004596:	4613      	mov	r3, r2
 8004598:	72bb      	strb	r3, [r7, #10]
    /* Suppress unused parameter warnings */
    (void)u8x8;
    (void)arg_ptr;

    switch (msg)
 800459a:	7afb      	ldrb	r3, [r7, #11]
 800459c:	2b4b      	cmp	r3, #75	@ 0x4b
 800459e:	d01a      	beq.n	80045d6 <u8x8_stm32_gpio_and_delay+0x4e>
 80045a0:	2b4b      	cmp	r3, #75	@ 0x4b
 80045a2:	dc1f      	bgt.n	80045e4 <u8x8_stm32_gpio_and_delay+0x5c>
 80045a4:	2b4a      	cmp	r3, #74	@ 0x4a
 80045a6:	d00f      	beq.n	80045c8 <u8x8_stm32_gpio_and_delay+0x40>
 80045a8:	2b4a      	cmp	r3, #74	@ 0x4a
 80045aa:	dc1b      	bgt.n	80045e4 <u8x8_stm32_gpio_and_delay+0x5c>
 80045ac:	2b28      	cmp	r3, #40	@ 0x28
 80045ae:	d002      	beq.n	80045b6 <u8x8_stm32_gpio_and_delay+0x2e>
 80045b0:	2b29      	cmp	r3, #41	@ 0x29
 80045b2:	d004      	beq.n	80045be <u8x8_stm32_gpio_and_delay+0x36>
        case U8X8_MSG_GPIO_RESET:
            HAL_GPIO_WritePin(DISPLAY_IO_1_GPIO_Port, DISPLAY_IO_1_Pin, (GPIO_PinState)arg_int);
            break;
        default:
            /* No action */
            break;
 80045b4:	e016      	b.n	80045e4 <u8x8_stm32_gpio_and_delay+0x5c>
            HAL_Delay(DISPLAY_UPDATE_DELAY_U32);
 80045b6:	2002      	movs	r0, #2
 80045b8:	f002 fd46 	bl	8007048 <HAL_Delay>
            break;
 80045bc:	e013      	b.n	80045e6 <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_Delay(arg_int);
 80045be:	7abb      	ldrb	r3, [r7, #10]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f002 fd41 	bl	8007048 <HAL_Delay>
            break;
 80045c6:	e00e      	b.n	80045e6 <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_GPIO_WritePin(DISPLAY_IO_2_GPIO_Port, DISPLAY_IO_2_Pin, (GPIO_PinState)arg_int);
 80045c8:	7abb      	ldrb	r3, [r7, #10]
 80045ca:	461a      	mov	r2, r3
 80045cc:	2108      	movs	r1, #8
 80045ce:	4808      	ldr	r0, [pc, #32]	@ (80045f0 <u8x8_stm32_gpio_and_delay+0x68>)
 80045d0:	f002 fff0 	bl	80075b4 <HAL_GPIO_WritePin>
            break;
 80045d4:	e007      	b.n	80045e6 <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_GPIO_WritePin(DISPLAY_IO_1_GPIO_Port, DISPLAY_IO_1_Pin, (GPIO_PinState)arg_int);
 80045d6:	7abb      	ldrb	r3, [r7, #10]
 80045d8:	461a      	mov	r2, r3
 80045da:	2104      	movs	r1, #4
 80045dc:	4804      	ldr	r0, [pc, #16]	@ (80045f0 <u8x8_stm32_gpio_and_delay+0x68>)
 80045de:	f002 ffe9 	bl	80075b4 <HAL_GPIO_WritePin>
            break;
 80045e2:	e000      	b.n	80045e6 <u8x8_stm32_gpio_and_delay+0x5e>
            break;
 80045e4:	bf00      	nop
    }
    return 1U;
 80045e6:	2301      	movs	r3, #1
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	40021800 	.word	0x40021800

080045f4 <u8x8_byte_4wire_hw_spi>:
 */
static uint8_t u8x8_byte_4wire_hw_spi(u8x8_t * const u8x8,
                                      uint8_t msg,
                                      uint8_t arg_int,
                                      void * const arg_ptr)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	607b      	str	r3, [r7, #4]
 80045fe:	460b      	mov	r3, r1
 8004600:	72fb      	strb	r3, [r7, #11]
 8004602:	4613      	mov	r3, r2
 8004604:	72bb      	strb	r3, [r7, #10]
    uint8_t retVal = 1U;
 8004606:	2301      	movs	r3, #1
 8004608:	75fb      	strb	r3, [r7, #23]

    switch (msg)
 800460a:	7afb      	ldrb	r3, [r7, #11]
 800460c:	3b14      	subs	r3, #20
 800460e:	2b0c      	cmp	r3, #12
 8004610:	d83e      	bhi.n	8004690 <u8x8_byte_4wire_hw_spi+0x9c>
 8004612:	a201      	add	r2, pc, #4	@ (adr r2, 8004618 <u8x8_byte_4wire_hw_spi+0x24>)
 8004614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004618:	08004697 	.word	0x08004697
 800461c:	08004691 	.word	0x08004691
 8004620:	08004691 	.word	0x08004691
 8004624:	0800464d 	.word	0x0800464d
 8004628:	0800466d 	.word	0x0800466d
 800462c:	0800467f 	.word	0x0800467f
 8004630:	08004691 	.word	0x08004691
 8004634:	08004691 	.word	0x08004691
 8004638:	08004691 	.word	0x08004691
 800463c:	08004691 	.word	0x08004691
 8004640:	08004691 	.word	0x08004691
 8004644:	08004691 	.word	0x08004691
 8004648:	0800465f 	.word	0x0800465f
    {
        case U8X8_MSG_BYTE_SEND:
            (void)HAL_SPI_Transmit(&hspi3, (uint8_t *)arg_ptr, arg_int, SPI_TIMEOUT_U32);
 800464c:	7abb      	ldrb	r3, [r7, #10]
 800464e:	b29a      	uxth	r2, r3
 8004650:	f242 7310 	movw	r3, #10000	@ 0x2710
 8004654:	6879      	ldr	r1, [r7, #4]
 8004656:	4813      	ldr	r0, [pc, #76]	@ (80046a4 <u8x8_byte_4wire_hw_spi+0xb0>)
 8004658:	f004 feb1 	bl	80093be <HAL_SPI_Transmit>
            break;
 800465c:	e01c      	b.n	8004698 <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_INIT:
            break;
        case U8X8_MSG_BYTE_SET_DC:
            HAL_GPIO_WritePin(DISPLAY_IO_2_GPIO_Port, DISPLAY_IO_2_Pin, (GPIO_PinState)arg_int);
 800465e:	7abb      	ldrb	r3, [r7, #10]
 8004660:	461a      	mov	r2, r3
 8004662:	2108      	movs	r1, #8
 8004664:	4810      	ldr	r0, [pc, #64]	@ (80046a8 <u8x8_byte_4wire_hw_spi+0xb4>)
 8004666:	f002 ffa5 	bl	80075b4 <HAL_GPIO_WritePin>
            break;
 800466a:	e015      	b.n	8004698 <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_START_TRANSFER:
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, u8x8->display_info->chip_enable_level);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	461a      	mov	r2, r3
 8004674:	2104      	movs	r1, #4
 8004676:	480d      	ldr	r0, [pc, #52]	@ (80046ac <u8x8_byte_4wire_hw_spi+0xb8>)
 8004678:	f002 ff9c 	bl	80075b4 <HAL_GPIO_WritePin>
            break;
 800467c:	e00c      	b.n	8004698 <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_END_TRANSFER:
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, u8x8->display_info->chip_disable_level);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	785b      	ldrb	r3, [r3, #1]
 8004684:	461a      	mov	r2, r3
 8004686:	2104      	movs	r1, #4
 8004688:	4808      	ldr	r0, [pc, #32]	@ (80046ac <u8x8_byte_4wire_hw_spi+0xb8>)
 800468a:	f002 ff93 	bl	80075b4 <HAL_GPIO_WritePin>
            break;
 800468e:	e003      	b.n	8004698 <u8x8_byte_4wire_hw_spi+0xa4>
        default:
            retVal = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	75fb      	strb	r3, [r7, #23]
            break;
 8004694:	e000      	b.n	8004698 <u8x8_byte_4wire_hw_spi+0xa4>
            break;
 8004696:	bf00      	nop
    }
    return retVal;
 8004698:	7dfb      	ldrb	r3, [r7, #23]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3718      	adds	r7, #24
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	20000ecc 	.word	0x20000ecc
 80046a8:	40021800 	.word	0x40021800
 80046ac:	40020c00 	.word	0x40020c00

080046b0 <Display_Init>:

/**
 * @brief Initializes the display hardware and u8g2 library.
 */
void Display_Init(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
    /* Turn on the backlight */
    HAL_GPIO_WritePin(BACKLIGHT_1_GPIO_Port, BACKLIGHT_1_Pin, GPIO_PIN_SET);
 80046b4:	2201      	movs	r2, #1
 80046b6:	2110      	movs	r1, #16
 80046b8:	480c      	ldr	r0, [pc, #48]	@ (80046ec <Display_Init+0x3c>)
 80046ba:	f002 ff7b 	bl	80075b4 <HAL_GPIO_WritePin>

    /* Setup u8g2 for the ST7565 display.
       Adjust the setup function if your display type differs. */
    u8g2_Setup_st7565_64128n_f(&u8g2, U8G2_R2, u8x8_byte_4wire_hw_spi, u8x8_stm32_gpio_and_delay);
 80046be:	4b0c      	ldr	r3, [pc, #48]	@ (80046f0 <Display_Init+0x40>)
 80046c0:	4a0c      	ldr	r2, [pc, #48]	@ (80046f4 <Display_Init+0x44>)
 80046c2:	490d      	ldr	r1, [pc, #52]	@ (80046f8 <Display_Init+0x48>)
 80046c4:	480d      	ldr	r0, [pc, #52]	@ (80046fc <Display_Init+0x4c>)
 80046c6:	f7fc fe39 	bl	800133c <u8g2_Setup_st7565_64128n_f>
    u8g2_InitDisplay(&u8g2);
 80046ca:	480c      	ldr	r0, [pc, #48]	@ (80046fc <Display_Init+0x4c>)
 80046cc:	f7fe fa44 	bl	8002b58 <u8x8_InitDisplay>
    u8g2_SetPowerSave(&u8g2, 0);
 80046d0:	2100      	movs	r1, #0
 80046d2:	480a      	ldr	r0, [pc, #40]	@ (80046fc <Display_Init+0x4c>)
 80046d4:	f7fe fa4f 	bl	8002b76 <u8x8_SetPowerSave>
    u8g2_ClearDisplay(&u8g2);
 80046d8:	4808      	ldr	r0, [pc, #32]	@ (80046fc <Display_Init+0x4c>)
 80046da:	f7fc fe09 	bl	80012f0 <u8g2_ClearDisplay>
    u8g2_SetContrast(&u8g2, CONTRAST_VALUE_U8);
 80046de:	2178      	movs	r1, #120	@ 0x78
 80046e0:	4806      	ldr	r0, [pc, #24]	@ (80046fc <Display_Init+0x4c>)
 80046e2:	f7fe fa59 	bl	8002b98 <u8x8_SetContrast>
}
 80046e6:	bf00      	nop
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	40021800 	.word	0x40021800
 80046f0:	08004589 	.word	0x08004589
 80046f4:	080045f5 	.word	0x080045f5
 80046f8:	0800b47c 	.word	0x0800b47c
 80046fc:	20000c0c 	.word	0x20000c0c

08004700 <Display_MainTitlePage>:
 * @brief Displays the main title page.
 *
 * This function draws the main title page with a logo and text.
 */
void Display_MainTitlePage(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af02      	add	r7, sp, #8
    do
    {
        /* Begin a new page */
        u8g2_FirstPage(&u8g2);
 8004706:	4824      	ldr	r0, [pc, #144]	@ (8004798 <Display_MainTitlePage+0x98>)
 8004708:	f7fc fdb0 	bl	800126c <u8g2_FirstPage>
        do
        {
            /* Draw the logo image */
            u8g2_DrawXBM(&u8g2, 0, 0, 128, 64, logo);
 800470c:	4b23      	ldr	r3, [pc, #140]	@ (800479c <Display_MainTitlePage+0x9c>)
 800470e:	9301      	str	r3, [sp, #4]
 8004710:	2340      	movs	r3, #64	@ 0x40
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	2380      	movs	r3, #128	@ 0x80
 8004716:	2200      	movs	r2, #0
 8004718:	2100      	movs	r1, #0
 800471a:	481f      	ldr	r0, [pc, #124]	@ (8004798 <Display_MainTitlePage+0x98>)
 800471c:	f7fc fcca 	bl	80010b4 <u8g2_DrawXBM>
        }
        while (u8g2_NextPage(&u8g2) != 0U);
 8004720:	481d      	ldr	r0, [pc, #116]	@ (8004798 <Display_MainTitlePage+0x98>)
 8004722:	f7fc fdb7 	bl	8001294 <u8g2_NextPage>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1ef      	bne.n	800470c <Display_MainTitlePage+0xc>

        HAL_Delay(PAGE_DELAY_U32);
 800472c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004730:	f002 fc8a 	bl	8007048 <HAL_Delay>

        /* Clear the buffer and draw title text */
        u8g2_ClearBuffer(&u8g2);
 8004734:	4818      	ldr	r0, [pc, #96]	@ (8004798 <Display_MainTitlePage+0x98>)
 8004736:	f7fc fd00 	bl	800113a <u8g2_ClearBuffer>
        u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 800473a:	4919      	ldr	r1, [pc, #100]	@ (80047a0 <Display_MainTitlePage+0xa0>)
 800473c:	4816      	ldr	r0, [pc, #88]	@ (8004798 <Display_MainTitlePage+0x98>)
 800473e:	f7fd fbad 	bl	8001e9c <u8g2_SetFont>
        u8g2_DrawStr(&u8g2, 42, 16, "VEGA");
 8004742:	4b18      	ldr	r3, [pc, #96]	@ (80047a4 <Display_MainTitlePage+0xa4>)
 8004744:	2210      	movs	r2, #16
 8004746:	212a      	movs	r1, #42	@ 0x2a
 8004748:	4813      	ldr	r0, [pc, #76]	@ (8004798 <Display_MainTitlePage+0x98>)
 800474a:	f7fd fb05 	bl	8001d58 <u8g2_DrawStr>
        u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 800474e:	4914      	ldr	r1, [pc, #80]	@ (80047a0 <Display_MainTitlePage+0xa0>)
 8004750:	4811      	ldr	r0, [pc, #68]	@ (8004798 <Display_MainTitlePage+0x98>)
 8004752:	f7fd fba3 	bl	8001e9c <u8g2_SetFont>
        u8g2_DrawStr(&u8g2, 6, 33, "INNOVATIONS");
 8004756:	4b14      	ldr	r3, [pc, #80]	@ (80047a8 <Display_MainTitlePage+0xa8>)
 8004758:	2221      	movs	r2, #33	@ 0x21
 800475a:	2106      	movs	r1, #6
 800475c:	480e      	ldr	r0, [pc, #56]	@ (8004798 <Display_MainTitlePage+0x98>)
 800475e:	f7fd fafb 	bl	8001d58 <u8g2_DrawStr>
        HAL_Delay(TEXT_DELAY_U32);
 8004762:	200a      	movs	r0, #10
 8004764:	f002 fc70 	bl	8007048 <HAL_Delay>
        u8g2_ClearBuffer(&u8g2);
 8004768:	480b      	ldr	r0, [pc, #44]	@ (8004798 <Display_MainTitlePage+0x98>)
 800476a:	f7fc fce6 	bl	800113a <u8g2_ClearBuffer>
    }
    while (u8g2_NextPage(&u8g2) != 0U);
 800476e:	480a      	ldr	r0, [pc, #40]	@ (8004798 <Display_MainTitlePage+0x98>)
 8004770:	f7fc fd90 	bl	8001294 <u8g2_NextPage>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1c5      	bne.n	8004706 <Display_MainTitlePage+0x6>

    HAL_Delay(FINAL_PAGE_DELAY_U32);
 800477a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800477e:	f002 fc63 	bl	8007048 <HAL_Delay>

    u8g2_ClearBuffer(&u8g2);
 8004782:	4805      	ldr	r0, [pc, #20]	@ (8004798 <Display_MainTitlePage+0x98>)
 8004784:	f7fc fcd9 	bl	800113a <u8g2_ClearBuffer>

    HAL_GPIO_WritePin(BACKLIGHT_1_GPIO_Port, BACKLIGHT_1_Pin, GPIO_PIN_RESET);
 8004788:	2200      	movs	r2, #0
 800478a:	2110      	movs	r1, #16
 800478c:	4807      	ldr	r0, [pc, #28]	@ (80047ac <Display_MainTitlePage+0xac>)
 800478e:	f002 ff11 	bl	80075b4 <HAL_GPIO_WritePin>
}
 8004792:	bf00      	nop
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	20000c0c 	.word	0x20000c0c
 800479c:	20000340 	.word	0x20000340
 80047a0:	0800a824 	.word	0x0800a824
 80047a4:	0800a7cc 	.word	0x0800a7cc
 80047a8:	0800a7d4 	.word	0x0800a7d4
 80047ac:	40021800 	.word	0x40021800

080047b0 <Display_Address>:
/**
 * @brief  Displays an I2C address on the display.
 * @param  address: The 7-bit I2C device address to display.
 */
void Display_Address(uint8_t address)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	4603      	mov	r3, r0
 80047b8:	71fb      	strb	r3, [r7, #7]
    char addressBuffer[16];

    /* Format the address into a string.
       The format "0x%02X" displays the address in hexadecimal with two digits. */
    (void)sprintf(addressBuffer, "I2C Addr: 0x%02X", address);
 80047ba:	79fa      	ldrb	r2, [r7, #7]
 80047bc:	f107 0308 	add.w	r3, r7, #8
 80047c0:	490c      	ldr	r1, [pc, #48]	@ (80047f4 <Display_Address+0x44>)
 80047c2:	4618      	mov	r0, r3
 80047c4:	f005 fc02 	bl	8009fcc <siprintf>

    /* Clear the display buffer */
    u8g2_ClearBuffer(&u8g2);
 80047c8:	480b      	ldr	r0, [pc, #44]	@ (80047f8 <Display_Address+0x48>)
 80047ca:	f7fc fcb6 	bl	800113a <u8g2_ClearBuffer>

    /* Set an appropriate font */
    u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 80047ce:	490b      	ldr	r1, [pc, #44]	@ (80047fc <Display_Address+0x4c>)
 80047d0:	4809      	ldr	r0, [pc, #36]	@ (80047f8 <Display_Address+0x48>)
 80047d2:	f7fd fb63 	bl	8001e9c <u8g2_SetFont>

    /* Draw the formatted string at desired coordinates (adjust as needed) */
    u8g2_DrawStr(&u8g2, 0, 20, addressBuffer);
 80047d6:	f107 0308 	add.w	r3, r7, #8
 80047da:	2214      	movs	r2, #20
 80047dc:	2100      	movs	r1, #0
 80047de:	4806      	ldr	r0, [pc, #24]	@ (80047f8 <Display_Address+0x48>)
 80047e0:	f7fd faba 	bl	8001d58 <u8g2_DrawStr>

    /* Send the buffer to the display */
    u8g2_SendBuffer(&u8g2);
 80047e4:	4804      	ldr	r0, [pc, #16]	@ (80047f8 <Display_Address+0x48>)
 80047e6:	f7fc fd1b 	bl	8001220 <u8g2_SendBuffer>
}
 80047ea:	bf00      	nop
 80047ec:	3718      	adds	r7, #24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	0800a7f4 	.word	0x0800a7f4
 80047f8:	20000c0c 	.word	0x20000c0c
 80047fc:	0800a824 	.word	0x0800a824

08004800 <Expander_InitPinDirections>:
 * @param hi2c          Pointer to the I2C handle.
 * @param deviceAddress I2C address of the expander.
 * @return HAL_StatusTypeDef HAL_OK if successful, or an error code.
 */
HAL_StatusTypeDef Expander_InitPinDirections(I2C_HandleTypeDef *hi2c, uint8_t deviceAddress)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b088      	sub	sp, #32
 8004804:	af04      	add	r7, sp, #16
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	460b      	mov	r3, r1
 800480a:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef status;
    uint8_t port0_config = 0;
 800480c:	2300      	movs	r3, #0
 800480e:	73bb      	strb	r3, [r7, #14]

    // Build Port 0 configuration mask using the defined direction macros:
    port0_config |= (ALERT_PIN_CELL_01_DIR == PIN_INPUT) ? ALERT_PIN_CELL_01 : 0;
 8004810:	7bbb      	ldrb	r3, [r7, #14]
 8004812:	f043 0301 	orr.w	r3, r3, #1
 8004816:	b2db      	uxtb	r3, r3
 8004818:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_VOLTAGE_01_DIR == PIN_INPUT) ? CELL_01_VOLTAGE_01 : 0;
 800481a:	7bbb      	ldrb	r3, [r7, #14]
 800481c:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_VOLTAGE_02_DIR == PIN_INPUT) ? CELL_01_VOLTAGE_02 : 0;
 800481e:	7bbb      	ldrb	r3, [r7, #14]
 8004820:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_VOLTAGE_03_DIR == PIN_INPUT) ? CELL_01_VOLTAGE_03 : 0;
 8004822:	7bbb      	ldrb	r3, [r7, #14]
 8004824:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_LED_01_DIR       == PIN_INPUT) ? CELL_01_LED_01       : 0;
 8004826:	7bbb      	ldrb	r3, [r7, #14]
 8004828:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_02_VOLTAGE_03_DIR == PIN_INPUT) ? CELL_02_VOLTAGE_03 : 0;
 800482a:	7bbb      	ldrb	r3, [r7, #14]
 800482c:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_02_VOLTAGE_02_DIR == PIN_INPUT) ? CELL_02_VOLTAGE_02 : 0;
 800482e:	7bbb      	ldrb	r3, [r7, #14]
 8004830:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_02_VOLTAGE_01_DIR == PIN_INPUT) ? CELL_02_VOLTAGE_01 : 0;
 8004832:	7bbb      	ldrb	r3, [r7, #14]
 8004834:	73bb      	strb	r3, [r7, #14]

    // For Port 1, use the corresponding direction macros if needed.
    // In this example, we build Port 1 configuration mask similarly:
    uint8_t port1_config = 0;
 8004836:	2300      	movs	r3, #0
 8004838:	737b      	strb	r3, [r7, #13]
    port1_config |= (ALERT_PIN_CELL_02_DIR   == PIN_INPUT) ? (1U << 0) : 0;
 800483a:	7b7b      	ldrb	r3, [r7, #13]
 800483c:	f043 0301 	orr.w	r3, r3, #1
 8004840:	b2db      	uxtb	r3, r3
 8004842:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_02_LED_01_DIR      == PIN_INPUT) ? (1U << 1) : 0;
 8004844:	7b7b      	ldrb	r3, [r7, #13]
 8004846:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_LED_01_DIR      == PIN_INPUT) ? (1U << 2) : 0;
 8004848:	7b7b      	ldrb	r3, [r7, #13]
 800484a:	737b      	strb	r3, [r7, #13]
    port1_config |= (EXPANDER_FAN_CTRL_DIR   == PIN_INPUT) ? (1U << 3) : 0;
 800484c:	7b7b      	ldrb	r3, [r7, #13]
 800484e:	f043 0308 	orr.w	r3, r3, #8
 8004852:	b2db      	uxtb	r3, r3
 8004854:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_VOLTAGE_03_DIR  == PIN_INPUT) ? (1U << 4) : 0;
 8004856:	7b7b      	ldrb	r3, [r7, #13]
 8004858:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_VOLTAGE_02_DIR  == PIN_INPUT) ? (1U << 5) : 0;
 800485a:	7b7b      	ldrb	r3, [r7, #13]
 800485c:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_VOLTAGE_01_DIR  == PIN_INPUT) ? (1U << 6) : 0;
 800485e:	7b7b      	ldrb	r3, [r7, #13]
 8004860:	737b      	strb	r3, [r7, #13]
    port1_config |= (ALERT_PIN_CELL_03_DIR   == PIN_INPUT) ? (1U << 7) : 0;
 8004862:	7b7b      	ldrb	r3, [r7, #13]
 8004864:	737b      	strb	r3, [r7, #13]

    // Write configuration to Port 0 register.
    status = HAL_I2C_Mem_Write(hi2c,
 8004866:	78fb      	ldrb	r3, [r7, #3]
 8004868:	b29b      	uxth	r3, r3
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	b299      	uxth	r1, r3
 800486e:	2364      	movs	r3, #100	@ 0x64
 8004870:	9302      	str	r3, [sp, #8]
 8004872:	2301      	movs	r3, #1
 8004874:	9301      	str	r3, [sp, #4]
 8004876:	f107 030e 	add.w	r3, r7, #14
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	2301      	movs	r3, #1
 800487e:	2206      	movs	r2, #6
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f002 fff5 	bl	8007870 <HAL_I2C_Mem_Write>
 8004886:	4603      	mov	r3, r0
 8004888:	73fb      	strb	r3, [r7, #15]
                               PCA9535_REG_CONFIG_PORT0,
                               I2C_MEMADD_SIZE_8BIT,
                               &port0_config,
                               1,
                               EXPANDER_I2C_TIMEOUT);
    if (status != HAL_OK)
 800488a:	7bfb      	ldrb	r3, [r7, #15]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d001      	beq.n	8004894 <Expander_InitPinDirections+0x94>
    {
        return status;
 8004890:	7bfb      	ldrb	r3, [r7, #15]
 8004892:	e012      	b.n	80048ba <Expander_InitPinDirections+0xba>
    }

    // Write configuration to Port 1 register.
    status = HAL_I2C_Mem_Write(hi2c,
 8004894:	78fb      	ldrb	r3, [r7, #3]
 8004896:	b29b      	uxth	r3, r3
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	b299      	uxth	r1, r3
 800489c:	2364      	movs	r3, #100	@ 0x64
 800489e:	9302      	str	r3, [sp, #8]
 80048a0:	2301      	movs	r3, #1
 80048a2:	9301      	str	r3, [sp, #4]
 80048a4:	f107 030d 	add.w	r3, r7, #13
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	2301      	movs	r3, #1
 80048ac:	2207      	movs	r2, #7
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f002 ffde 	bl	8007870 <HAL_I2C_Mem_Write>
 80048b4:	4603      	mov	r3, r0
 80048b6:	73fb      	strb	r3, [r7, #15]
                               PCA9535_REG_CONFIG_PORT1,
                               I2C_MEMADD_SIZE_8BIT,
                               &port1_config,
                               1,
                               EXPANDER_I2C_TIMEOUT);
    return status;
 80048b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <Expander_SetPinState>:
 */
HAL_StatusTypeDef Expander_SetPinState(I2C_HandleTypeDef *hi2c,
                                       uint8_t deviceAddress,
                                       uint16_t pin,
                                       uint8_t state)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b088      	sub	sp, #32
 80048c6:	af04      	add	r7, sp, #16
 80048c8:	6078      	str	r0, [r7, #4]
 80048ca:	4608      	mov	r0, r1
 80048cc:	4611      	mov	r1, r2
 80048ce:	461a      	mov	r2, r3
 80048d0:	4603      	mov	r3, r0
 80048d2:	70fb      	strb	r3, [r7, #3]
 80048d4:	460b      	mov	r3, r1
 80048d6:	803b      	strh	r3, [r7, #0]
 80048d8:	4613      	mov	r3, r2
 80048da:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef status;
    uint8_t regAddress;
    uint8_t currentOutput;

    // Determine which port the pin belongs to.
    if ((pin & 0xFF00) == 0)
 80048dc:	883b      	ldrh	r3, [r7, #0]
 80048de:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d142      	bne.n	800496c <Expander_SetPinState+0xaa>
    {
        // Pin belongs to Port 0.
        regAddress = PCA9535_REG_OUTPUT_PORT0;
 80048e6:	2302      	movs	r3, #2
 80048e8:	73fb      	strb	r3, [r7, #15]
        status = HAL_I2C_Mem_Read(hi2c,
 80048ea:	78fb      	ldrb	r3, [r7, #3]
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	b299      	uxth	r1, r3
 80048f2:	7bfb      	ldrb	r3, [r7, #15]
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	2364      	movs	r3, #100	@ 0x64
 80048f8:	9302      	str	r3, [sp, #8]
 80048fa:	2301      	movs	r3, #1
 80048fc:	9301      	str	r3, [sp, #4]
 80048fe:	f107 030c 	add.w	r3, r7, #12
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	2301      	movs	r3, #1
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f003 f8ac 	bl	8007a64 <HAL_I2C_Mem_Read>
 800490c:	4603      	mov	r3, r0
 800490e:	73bb      	strb	r3, [r7, #14]
                                  regAddress,
                                  I2C_MEMADD_SIZE_8BIT,
                                  &currentOutput,
                                  1,
                                  EXPANDER_I2C_TIMEOUT);
        if (status != HAL_OK) {
 8004910:	7bbb      	ldrb	r3, [r7, #14]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <Expander_SetPinState+0x58>
            return status;
 8004916:	7bbb      	ldrb	r3, [r7, #14]
 8004918:	e073      	b.n	8004a02 <Expander_SetPinState+0x140>
        }
        if (state == HIGH) {
 800491a:	78bb      	ldrb	r3, [r7, #2]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d106      	bne.n	800492e <Expander_SetPinState+0x6c>
            currentOutput |= (uint8_t)pin;
 8004920:	883b      	ldrh	r3, [r7, #0]
 8004922:	b2da      	uxtb	r2, r3
 8004924:	7b3b      	ldrb	r3, [r7, #12]
 8004926:	4313      	orrs	r3, r2
 8004928:	b2db      	uxtb	r3, r3
 800492a:	733b      	strb	r3, [r7, #12]
 800492c:	e009      	b.n	8004942 <Expander_SetPinState+0x80>
        } else {
            currentOutput &= ~(uint8_t)pin;
 800492e:	883b      	ldrh	r3, [r7, #0]
 8004930:	b25b      	sxtb	r3, r3
 8004932:	43db      	mvns	r3, r3
 8004934:	b25a      	sxtb	r2, r3
 8004936:	7b3b      	ldrb	r3, [r7, #12]
 8004938:	b25b      	sxtb	r3, r3
 800493a:	4013      	ands	r3, r2
 800493c:	b25b      	sxtb	r3, r3
 800493e:	b2db      	uxtb	r3, r3
 8004940:	733b      	strb	r3, [r7, #12]
        }
        status = HAL_I2C_Mem_Write(hi2c,
 8004942:	78fb      	ldrb	r3, [r7, #3]
 8004944:	b29b      	uxth	r3, r3
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	b299      	uxth	r1, r3
 800494a:	7bfb      	ldrb	r3, [r7, #15]
 800494c:	b29a      	uxth	r2, r3
 800494e:	2364      	movs	r3, #100	@ 0x64
 8004950:	9302      	str	r3, [sp, #8]
 8004952:	2301      	movs	r3, #1
 8004954:	9301      	str	r3, [sp, #4]
 8004956:	f107 030c 	add.w	r3, r7, #12
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	2301      	movs	r3, #1
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f002 ff86 	bl	8007870 <HAL_I2C_Mem_Write>
 8004964:	4603      	mov	r3, r0
 8004966:	73bb      	strb	r3, [r7, #14]
                                   regAddress,
                                   I2C_MEMADD_SIZE_8BIT,
                                   &currentOutput,
                                   1,
                                   EXPANDER_I2C_TIMEOUT);
        return status;
 8004968:	7bbb      	ldrb	r3, [r7, #14]
 800496a:	e04a      	b.n	8004a02 <Expander_SetPinState+0x140>
    }
    else if ((pin & 0x00FF) == 0)
 800496c:	883b      	ldrh	r3, [r7, #0]
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	d145      	bne.n	8004a00 <Expander_SetPinState+0x13e>
    {
        // Pin belongs to Port 1.
        regAddress = PCA9535_REG_OUTPUT_PORT1;
 8004974:	2303      	movs	r3, #3
 8004976:	73fb      	strb	r3, [r7, #15]
        status = HAL_I2C_Mem_Read(hi2c,
 8004978:	78fb      	ldrb	r3, [r7, #3]
 800497a:	b29b      	uxth	r3, r3
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	b299      	uxth	r1, r3
 8004980:	7bfb      	ldrb	r3, [r7, #15]
 8004982:	b29a      	uxth	r2, r3
 8004984:	2364      	movs	r3, #100	@ 0x64
 8004986:	9302      	str	r3, [sp, #8]
 8004988:	2301      	movs	r3, #1
 800498a:	9301      	str	r3, [sp, #4]
 800498c:	f107 030c 	add.w	r3, r7, #12
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	2301      	movs	r3, #1
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f003 f865 	bl	8007a64 <HAL_I2C_Mem_Read>
 800499a:	4603      	mov	r3, r0
 800499c:	73bb      	strb	r3, [r7, #14]
                                  regAddress,
                                  I2C_MEMADD_SIZE_8BIT,
                                  &currentOutput,
                                  1,
                                  EXPANDER_I2C_TIMEOUT);
        if (status != HAL_OK) {
 800499e:	7bbb      	ldrb	r3, [r7, #14]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d001      	beq.n	80049a8 <Expander_SetPinState+0xe6>
            return status;
 80049a4:	7bbb      	ldrb	r3, [r7, #14]
 80049a6:	e02c      	b.n	8004a02 <Expander_SetPinState+0x140>
        }
        uint8_t pin_mask = (uint8_t)(pin >> 8);
 80049a8:	883b      	ldrh	r3, [r7, #0]
 80049aa:	0a1b      	lsrs	r3, r3, #8
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	737b      	strb	r3, [r7, #13]
        if (state == HIGH) {
 80049b0:	78bb      	ldrb	r3, [r7, #2]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d105      	bne.n	80049c2 <Expander_SetPinState+0x100>
            currentOutput |= pin_mask;
 80049b6:	7b3a      	ldrb	r2, [r7, #12]
 80049b8:	7b7b      	ldrb	r3, [r7, #13]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	733b      	strb	r3, [r7, #12]
 80049c0:	e009      	b.n	80049d6 <Expander_SetPinState+0x114>
        } else {
            currentOutput &= ~pin_mask;
 80049c2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80049c6:	43db      	mvns	r3, r3
 80049c8:	b25a      	sxtb	r2, r3
 80049ca:	7b3b      	ldrb	r3, [r7, #12]
 80049cc:	b25b      	sxtb	r3, r3
 80049ce:	4013      	ands	r3, r2
 80049d0:	b25b      	sxtb	r3, r3
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	733b      	strb	r3, [r7, #12]
        }
        status = HAL_I2C_Mem_Write(hi2c,
 80049d6:	78fb      	ldrb	r3, [r7, #3]
 80049d8:	b29b      	uxth	r3, r3
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	b299      	uxth	r1, r3
 80049de:	7bfb      	ldrb	r3, [r7, #15]
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	2364      	movs	r3, #100	@ 0x64
 80049e4:	9302      	str	r3, [sp, #8]
 80049e6:	2301      	movs	r3, #1
 80049e8:	9301      	str	r3, [sp, #4]
 80049ea:	f107 030c 	add.w	r3, r7, #12
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	2301      	movs	r3, #1
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f002 ff3c 	bl	8007870 <HAL_I2C_Mem_Write>
 80049f8:	4603      	mov	r3, r0
 80049fa:	73bb      	strb	r3, [r7, #14]
                                   regAddress,
                                   I2C_MEMADD_SIZE_8BIT,
                                   &currentOutput,
                                   1,
                                   EXPANDER_I2C_TIMEOUT);
        return status;
 80049fc:	7bbb      	ldrb	r3, [r7, #14]
 80049fe:	e000      	b.n	8004a02 <Expander_SetPinState+0x140>
    }
    else {
        // Invalid pin mask.
        return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
    }
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
	...

08004a0c <Expander_InitAllDevices>:
 *
 * @param hi2c Pointer to the I2C handle.
 * @return HAL_StatusTypeDef HAL_OK if all devices are initialized successfully, or an error code.
 */
HAL_StatusTypeDef Expander_InitAllDevices(I2C_HandleTypeDef *hi2c)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;

    // List of expander addresses.
    uint8_t addresses[] = {
 8004a14:	4b11      	ldr	r3, [pc, #68]	@ (8004a5c <Expander_InitAllDevices+0x50>)
 8004a16:	60bb      	str	r3, [r7, #8]
        GPIO_EXPANDER_ID_02,
        GPIO_EXPANDER_ID_03,
        GPIO_EXPANDER_ID_04
    };

    size_t count = sizeof(addresses) / sizeof(addresses[0]);
 8004a18:	2304      	movs	r3, #4
 8004a1a:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < count; i++)
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	617b      	str	r3, [r7, #20]
 8004a20:	e012      	b.n	8004a48 <Expander_InitAllDevices+0x3c>
    {
        status = Expander_InitPinDirections(hi2c, addresses[i]);
 8004a22:	f107 0208 	add.w	r2, r7, #8
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	4413      	add	r3, r2
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7ff fee6 	bl	8004800 <Expander_InitPinDirections>
 8004a34:	4603      	mov	r3, r0
 8004a36:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8004a38:	7bfb      	ldrb	r3, [r7, #15]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <Expander_InitAllDevices+0x36>
        {
            return status;
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
 8004a40:	e007      	b.n	8004a52 <Expander_InitAllDevices+0x46>
    for (size_t i = 0; i < count; i++)
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	3301      	adds	r3, #1
 8004a46:	617b      	str	r3, [r7, #20]
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d3e8      	bcc.n	8004a22 <Expander_InitAllDevices+0x16>
        }
    }
    return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3718      	adds	r7, #24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	24232221 	.word	0x24232221

08004a60 <get_voltage_map>:


// In this example all cells share the same voltage mapping.
static VoltageMap* get_voltage_map(CellID cell)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	4603      	mov	r3, r0
 8004a68:	71fb      	strb	r3, [r7, #7]
    (void)cell;  // Unused since mapping is the same for all cells.
    return default_map;
 8004a6a:	4b03      	ldr	r3, [pc, #12]	@ (8004a78 <get_voltage_map+0x18>)
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	20000740 	.word	0x20000740

08004a7c <get_cell_control_params>:

// Helper function to get the expander address and MUX control pin definitions for a given cell.
// Each cell has three control pins (S0, S1, S2) that drive your MUX select lines.
static void get_cell_control_params(CellID cell, uint8_t *expanderAddr, uint16_t *sel0, uint16_t *sel1, uint16_t *sel2)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60b9      	str	r1, [r7, #8]
 8004a84:	607a      	str	r2, [r7, #4]
 8004a86:	603b      	str	r3, [r7, #0]
 8004a88:	4603      	mov	r3, r0
 8004a8a:	73fb      	strb	r3, [r7, #15]
    switch(cell)
 8004a8c:	7bfb      	ldrb	r3, [r7, #15]
 8004a8e:	2b0b      	cmp	r3, #11
 8004a90:	f200 80c4 	bhi.w	8004c1c <get_cell_control_params+0x1a0>
 8004a94:	a201      	add	r2, pc, #4	@ (adr r2, 8004a9c <get_cell_control_params+0x20>)
 8004a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9a:	bf00      	nop
 8004a9c:	08004acd 	.word	0x08004acd
 8004aa0:	08004ae7 	.word	0x08004ae7
 8004aa4:	08004b01 	.word	0x08004b01
 8004aa8:	08004b21 	.word	0x08004b21
 8004aac:	08004b3b 	.word	0x08004b3b
 8004ab0:	08004b55 	.word	0x08004b55
 8004ab4:	08004b75 	.word	0x08004b75
 8004ab8:	08004b8f 	.word	0x08004b8f
 8004abc:	08004ba9 	.word	0x08004ba9
 8004ac0:	08004bc9 	.word	0x08004bc9
 8004ac4:	08004be3 	.word	0x08004be3
 8004ac8:	08004bfd 	.word	0x08004bfd
    {
        case CELL_1:
            *expanderAddr = GPIO_EXPANDER_ID_01;
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	2221      	movs	r2, #33	@ 0x21
 8004ad0:	701a      	strb	r2, [r3, #0]
            *sel0 = CELL_01_VOLTAGE_01;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	801a      	strh	r2, [r3, #0]
            *sel1 = CELL_01_VOLTAGE_02;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	2204      	movs	r2, #4
 8004adc:	801a      	strh	r2, [r3, #0]
            *sel2 = CELL_01_VOLTAGE_03;
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	2208      	movs	r2, #8
 8004ae2:	801a      	strh	r2, [r3, #0]
            break;
 8004ae4:	e0a7      	b.n	8004c36 <get_cell_control_params+0x1ba>
        case CELL_2:
            *expanderAddr = GPIO_EXPANDER_ID_01;
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	2221      	movs	r2, #33	@ 0x21
 8004aea:	701a      	strb	r2, [r3, #0]
            *sel0 = CELL_02_VOLTAGE_01;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2280      	movs	r2, #128	@ 0x80
 8004af0:	801a      	strh	r2, [r3, #0]
            *sel1 = CELL_02_VOLTAGE_02;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	2240      	movs	r2, #64	@ 0x40
 8004af6:	801a      	strh	r2, [r3, #0]
            *sel2 = CELL_02_VOLTAGE_03;
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	2220      	movs	r2, #32
 8004afc:	801a      	strh	r2, [r3, #0]
            break;
 8004afe:	e09a      	b.n	8004c36 <get_cell_control_params+0x1ba>
        case CELL_3:
            *expanderAddr = GPIO_EXPANDER_ID_01;
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	2221      	movs	r2, #33	@ 0x21
 8004b04:	701a      	strb	r2, [r3, #0]
            *sel0 = CELL_03_VOLTAGE_01;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004b0c:	801a      	strh	r2, [r3, #0]
            *sel1 = CELL_03_VOLTAGE_02;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004b14:	801a      	strh	r2, [r3, #0]
            *sel2 = CELL_03_VOLTAGE_03;
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004b1c:	801a      	strh	r2, [r3, #0]
            break;
 8004b1e:	e08a      	b.n	8004c36 <get_cell_control_params+0x1ba>
        case CELL_4:
            *expanderAddr = GPIO_EXPANDER_ID_02;
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	2222      	movs	r2, #34	@ 0x22
 8004b24:	701a      	strb	r2, [r3, #0]
            *sel0 = CELL_01_VOLTAGE_01;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2202      	movs	r2, #2
 8004b2a:	801a      	strh	r2, [r3, #0]
            *sel1 = CELL_01_VOLTAGE_02;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	2204      	movs	r2, #4
 8004b30:	801a      	strh	r2, [r3, #0]
            *sel2 = CELL_01_VOLTAGE_03;
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	2208      	movs	r2, #8
 8004b36:	801a      	strh	r2, [r3, #0]
            break;
 8004b38:	e07d      	b.n	8004c36 <get_cell_control_params+0x1ba>
        case CELL_5:
            *expanderAddr = GPIO_EXPANDER_ID_02;
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	2222      	movs	r2, #34	@ 0x22
 8004b3e:	701a      	strb	r2, [r3, #0]
            *sel0 = CELL_02_VOLTAGE_01;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2280      	movs	r2, #128	@ 0x80
 8004b44:	801a      	strh	r2, [r3, #0]
            *sel1 = CELL_02_VOLTAGE_02;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	2240      	movs	r2, #64	@ 0x40
 8004b4a:	801a      	strh	r2, [r3, #0]
            *sel2 = CELL_02_VOLTAGE_03;
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	801a      	strh	r2, [r3, #0]
            break;
 8004b52:	e070      	b.n	8004c36 <get_cell_control_params+0x1ba>
        case CELL_6:
            *expanderAddr = GPIO_EXPANDER_ID_02;
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	2222      	movs	r2, #34	@ 0x22
 8004b58:	701a      	strb	r2, [r3, #0]
            *sel0 = CELL_03_VOLTAGE_01;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004b60:	801a      	strh	r2, [r3, #0]
            *sel1 = CELL_03_VOLTAGE_02;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004b68:	801a      	strh	r2, [r3, #0]
            *sel2 = CELL_03_VOLTAGE_03;
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004b70:	801a      	strh	r2, [r3, #0]
            break;
 8004b72:	e060      	b.n	8004c36 <get_cell_control_params+0x1ba>
        case CELL_7:
            *expanderAddr = GPIO_EXPANDER_ID_03;
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2223      	movs	r2, #35	@ 0x23
 8004b78:	701a      	strb	r2, [r3, #0]
            *sel0 = CELL_01_VOLTAGE_01;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2202      	movs	r2, #2
 8004b7e:	801a      	strh	r2, [r3, #0]
            *sel1 = CELL_01_VOLTAGE_02;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	2204      	movs	r2, #4
 8004b84:	801a      	strh	r2, [r3, #0]
            *sel2 = CELL_01_VOLTAGE_03;
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	2208      	movs	r2, #8
 8004b8a:	801a      	strh	r2, [r3, #0]
            break;
 8004b8c:	e053      	b.n	8004c36 <get_cell_control_params+0x1ba>
        case CELL_8:
            *expanderAddr = GPIO_EXPANDER_ID_03;
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	2223      	movs	r2, #35	@ 0x23
 8004b92:	701a      	strb	r2, [r3, #0]
            *sel0 = CELL_02_VOLTAGE_01;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2280      	movs	r2, #128	@ 0x80
 8004b98:	801a      	strh	r2, [r3, #0]
            *sel1 = CELL_02_VOLTAGE_02;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2240      	movs	r2, #64	@ 0x40
 8004b9e:	801a      	strh	r2, [r3, #0]
            *sel2 = CELL_02_VOLTAGE_03;
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	801a      	strh	r2, [r3, #0]
            break;
 8004ba6:	e046      	b.n	8004c36 <get_cell_control_params+0x1ba>
        case CELL_9:
            *expanderAddr = GPIO_EXPANDER_ID_03;
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	2223      	movs	r2, #35	@ 0x23
 8004bac:	701a      	strb	r2, [r3, #0]
            *sel0 = CELL_03_VOLTAGE_01;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004bb4:	801a      	strh	r2, [r3, #0]
            *sel1 = CELL_03_VOLTAGE_02;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004bbc:	801a      	strh	r2, [r3, #0]
            *sel2 = CELL_03_VOLTAGE_03;
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004bc4:	801a      	strh	r2, [r3, #0]
            break;
 8004bc6:	e036      	b.n	8004c36 <get_cell_control_params+0x1ba>
        case CELL_10:
            *expanderAddr = GPIO_EXPANDER_ID_04;
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	2224      	movs	r2, #36	@ 0x24
 8004bcc:	701a      	strb	r2, [r3, #0]
            *sel0 = CELL_01_VOLTAGE_01;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2202      	movs	r2, #2
 8004bd2:	801a      	strh	r2, [r3, #0]
            *sel1 = CELL_01_VOLTAGE_02;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	2204      	movs	r2, #4
 8004bd8:	801a      	strh	r2, [r3, #0]
            *sel2 = CELL_01_VOLTAGE_03;
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	2208      	movs	r2, #8
 8004bde:	801a      	strh	r2, [r3, #0]
            break;
 8004be0:	e029      	b.n	8004c36 <get_cell_control_params+0x1ba>
        case CELL_11:
            *expanderAddr = GPIO_EXPANDER_ID_04;
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	2224      	movs	r2, #36	@ 0x24
 8004be6:	701a      	strb	r2, [r3, #0]
            *sel0 = CELL_02_VOLTAGE_01;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2280      	movs	r2, #128	@ 0x80
 8004bec:	801a      	strh	r2, [r3, #0]
            *sel1 = CELL_02_VOLTAGE_02;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2240      	movs	r2, #64	@ 0x40
 8004bf2:	801a      	strh	r2, [r3, #0]
            *sel2 = CELL_02_VOLTAGE_03;
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	801a      	strh	r2, [r3, #0]
            break;
 8004bfa:	e01c      	b.n	8004c36 <get_cell_control_params+0x1ba>
        case CELL_12:
            *expanderAddr = GPIO_EXPANDER_ID_04;
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	2224      	movs	r2, #36	@ 0x24
 8004c00:	701a      	strb	r2, [r3, #0]
            *sel0 = CELL_03_VOLTAGE_01;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004c08:	801a      	strh	r2, [r3, #0]
            *sel1 = CELL_03_VOLTAGE_02;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004c10:	801a      	strh	r2, [r3, #0]
            *sel2 = CELL_03_VOLTAGE_03;
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004c18:	801a      	strh	r2, [r3, #0]
            break;
 8004c1a:	e00c      	b.n	8004c36 <get_cell_control_params+0x1ba>
        default:
            // Default to CELL_1 if an invalid cell is specified
            *expanderAddr = GPIO_EXPANDER_ID_01;
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	2221      	movs	r2, #33	@ 0x21
 8004c20:	701a      	strb	r2, [r3, #0]
            *sel0 = CELL_01_VOLTAGE_01;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2202      	movs	r2, #2
 8004c26:	801a      	strh	r2, [r3, #0]
            *sel1 = CELL_01_VOLTAGE_02;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	2204      	movs	r2, #4
 8004c2c:	801a      	strh	r2, [r3, #0]
            *sel2 = CELL_01_VOLTAGE_03;
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	2208      	movs	r2, #8
 8004c32:	801a      	strh	r2, [r3, #0]
            break;
 8004c34:	bf00      	nop
    }
}
 8004c36:	bf00      	nop
 8004c38:	3714      	adds	r7, #20
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop

08004c44 <Set_Output_Voltage>:

// Function to set the output voltage for a given cell by selecting the appropriate MUX channel.
// Example usage: Set_Output_Voltage(&hi2c2, CELL_1, 2.5f);
void Set_Output_Voltage(I2C_HandleTypeDef *hi2c, CellID cell, float voltage)
{
 8004c44:	b590      	push	{r4, r7, lr}
 8004c46:	b08d      	sub	sp, #52	@ 0x34
 8004c48:	af02      	add	r7, sp, #8
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004c52:	72fb      	strb	r3, [r7, #11]
    // Get the voltage mapping for this cell (all cells share the same mapping in this example)
    VoltageMap *map = get_voltage_map(cell);
 8004c54:	7afb      	ldrb	r3, [r7, #11]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7ff ff02 	bl	8004a60 <get_voltage_map>
 8004c5c:	61f8      	str	r0, [r7, #28]
    if (map == NULL) return;
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d057      	beq.n	8004d14 <Set_Output_Voltage+0xd0>

    // Look up the MUX channel for the desired voltage.
    uint8_t mux_channel = 0xFF;
 8004c64:	23ff      	movs	r3, #255	@ 0xff
 8004c66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    for (int i = 0; i < 8; i++) {
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	623b      	str	r3, [r7, #32]
 8004c6e:	e017      	b.n	8004ca0 <Set_Output_Voltage+0x5c>
        if (map[i].voltage == voltage) {
 8004c70:	6a3b      	ldr	r3, [r7, #32]
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	69fa      	ldr	r2, [r7, #28]
 8004c76:	4413      	add	r3, r2
 8004c78:	edd3 7a00 	vldr	s15, [r3]
 8004c7c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004c80:	eeb4 7a67 	vcmp.f32	s14, s15
 8004c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c88:	d107      	bne.n	8004c9a <Set_Output_Voltage+0x56>
            mux_channel = map[i].mux_channel;
 8004c8a:	6a3b      	ldr	r3, [r7, #32]
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	69fa      	ldr	r2, [r7, #28]
 8004c90:	4413      	add	r3, r2
 8004c92:	791b      	ldrb	r3, [r3, #4]
 8004c94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8004c98:	e005      	b.n	8004ca6 <Set_Output_Voltage+0x62>
    for (int i = 0; i < 8; i++) {
 8004c9a:	6a3b      	ldr	r3, [r7, #32]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	623b      	str	r3, [r7, #32]
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	2b07      	cmp	r3, #7
 8004ca4:	dde4      	ble.n	8004c70 <Set_Output_Voltage+0x2c>
        }
    }
    if (mux_channel == 0xFF) return; // Voltage not found
 8004ca6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004caa:	2bff      	cmp	r3, #255	@ 0xff
 8004cac:	d034      	beq.n	8004d18 <Set_Output_Voltage+0xd4>

    // Convert mux_channel into its 3 select bits.
    uint8_t s0 = (mux_channel >> 0) & 0x01;
 8004cae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	76fb      	strb	r3, [r7, #27]
    uint8_t s1 = (mux_channel >> 1) & 0x01;
 8004cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004cbc:	085b      	lsrs	r3, r3, #1
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	76bb      	strb	r3, [r7, #26]
    uint8_t s2 = (mux_channel >> 2) & 0x01;
 8004cc6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004cca:	089b      	lsrs	r3, r3, #2
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	767b      	strb	r3, [r7, #25]

    // Get the expander address and control pins for this cell.
    uint8_t expanderAddr;
    uint16_t sel0, sel1, sel2;
    get_cell_control_params(cell, &expanderAddr, &sel0, &sel1, &sel2);
 8004cd4:	f107 0414 	add.w	r4, r7, #20
 8004cd8:	f107 0216 	add.w	r2, r7, #22
 8004cdc:	f107 0118 	add.w	r1, r7, #24
 8004ce0:	7af8      	ldrb	r0, [r7, #11]
 8004ce2:	f107 0312 	add.w	r3, r7, #18
 8004ce6:	9300      	str	r3, [sp, #0]
 8004ce8:	4623      	mov	r3, r4
 8004cea:	f7ff fec7 	bl	8004a7c <get_cell_control_params>

    // Set the multiplexer select lines accordingly.
    Expander_SetPinState(hi2c, expanderAddr, sel0, s0);
 8004cee:	7e39      	ldrb	r1, [r7, #24]
 8004cf0:	8afa      	ldrh	r2, [r7, #22]
 8004cf2:	7efb      	ldrb	r3, [r7, #27]
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f7ff fde4 	bl	80048c2 <Expander_SetPinState>
    Expander_SetPinState(hi2c, expanderAddr, sel1, s1);
 8004cfa:	7e39      	ldrb	r1, [r7, #24]
 8004cfc:	8aba      	ldrh	r2, [r7, #20]
 8004cfe:	7ebb      	ldrb	r3, [r7, #26]
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f7ff fdde 	bl	80048c2 <Expander_SetPinState>
    Expander_SetPinState(hi2c, expanderAddr, sel2, s2);
 8004d06:	7e39      	ldrb	r1, [r7, #24]
 8004d08:	8a7a      	ldrh	r2, [r7, #18]
 8004d0a:	7e7b      	ldrb	r3, [r7, #25]
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f7ff fdd8 	bl	80048c2 <Expander_SetPinState>
 8004d12:	e002      	b.n	8004d1a <Set_Output_Voltage+0xd6>
    if (map == NULL) return;
 8004d14:	bf00      	nop
 8004d16:	e000      	b.n	8004d1a <Set_Output_Voltage+0xd6>
    if (mux_channel == 0xFF) return; // Voltage not found
 8004d18:	bf00      	nop
}
 8004d1a:	372c      	adds	r7, #44	@ 0x2c
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd90      	pop	{r4, r7, pc}

08004d20 <cs_low>:
/* USER CODE BEGIN 0 */

//--------------------------------------------------------------//


void cs_low() {
 8004d20:	b580      	push	{r7, lr}
 8004d22:	af00      	add	r7, sp, #0

//	HAL_GPIO_WritePin(GPIOB, CS_ISOSPI_12_CELLS_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(CS_ISOSPI_11_CELLS_GPIO_Port, CS_ISOSPI_11_CELLS_Pin, GPIO_PIN_RESET);
 8004d24:	2200      	movs	r2, #0
 8004d26:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004d2a:	4802      	ldr	r0, [pc, #8]	@ (8004d34 <cs_low+0x14>)
 8004d2c:	f002 fc42 	bl	80075b4 <HAL_GPIO_WritePin>


}
 8004d30:	bf00      	nop
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	40020c00 	.word	0x40020c00

08004d38 <cs_high>:

void cs_high() {
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	af00      	add	r7, sp, #0

//	HAL_GPIO_WritePin(GPIOB, CS_ISOSPI_12_CELLS_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(CS_ISOSPI_11_CELLS_GPIO_Port, CS_ISOSPI_11_CELLS_Pin, GPIO_PIN_SET);
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004d42:	4802      	ldr	r0, [pc, #8]	@ (8004d4c <cs_high+0x14>)
 8004d44:	f002 fc36 	bl	80075b4 <HAL_GPIO_WritePin>


}
 8004d48:	bf00      	nop
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	40020c00 	.word	0x40020c00

08004d50 <delay_time_us>:

void delay_time_us(uint32_t time_delay_val) {
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
	uint32_t time_delay_count;
	uint32_t time_delay_val_temp = time_delay_val * 9;
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	00db      	lsls	r3, r3, #3
 8004d5e:	4413      	add	r3, r2
 8004d60:	60bb      	str	r3, [r7, #8]
	for (time_delay_count = 0; time_delay_count < time_delay_val_temp;
 8004d62:	2300      	movs	r3, #0
 8004d64:	60fb      	str	r3, [r7, #12]
 8004d66:	e003      	b.n	8004d70 <delay_time_us+0x20>
			time_delay_count++) {
		__NOP();
 8004d68:	bf00      	nop
			time_delay_count++) {
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	60fb      	str	r3, [r7, #12]
	for (time_delay_count = 0; time_delay_count < time_delay_val_temp;
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d3f7      	bcc.n	8004d68 <delay_time_us+0x18>
	}
}
 8004d78:	bf00      	nop
 8004d7a:	bf00      	nop
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
	...

08004d88 <spi_write_array>:
 * @param parameters   :  Data length, data to transmit
 */

void spi_write_array(uint8_t len, // Option: Number of bytes to be written on the SPI port
		uint8_t data[] //Array of bytes to be written on the SPI port
		) {
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	4603      	mov	r3, r0
 8004d90:	6039      	str	r1, [r7, #0]
 8004d92:	71fb      	strb	r3, [r7, #7]
	uint8_t len_t;
	for (len_t = 0; len_t < len; len_t++) {
 8004d94:	2300      	movs	r3, #0
 8004d96:	73fb      	strb	r3, [r7, #15]
 8004d98:	e00f      	b.n	8004dba <spi_write_array+0x32>
		if (HAL_SPI_Transmit(&hspi4, &data[len_t], 1, 20) != HAL_OK) {
 8004d9a:	7bfb      	ldrb	r3, [r7, #15]
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	18d1      	adds	r1, r2, r3
 8004da0:	2314      	movs	r3, #20
 8004da2:	2201      	movs	r2, #1
 8004da4:	4809      	ldr	r0, [pc, #36]	@ (8004dcc <spi_write_array+0x44>)
 8004da6:	f004 fb0a 	bl	80093be <HAL_SPI_Transmit>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <spi_write_array+0x2c>
			/* Transfer error in transmission process */
			Error_Handler();
 8004db0:	f001 fe62 	bl	8006a78 <Error_Handler>
	for (len_t = 0; len_t < len; len_t++) {
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
 8004db6:	3301      	adds	r3, #1
 8004db8:	73fb      	strb	r3, [r7, #15]
 8004dba:	7bfa      	ldrb	r2, [r7, #15]
 8004dbc:	79fb      	ldrb	r3, [r7, #7]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d3eb      	bcc.n	8004d9a <spi_write_array+0x12>
		}
	}

}
 8004dc2:	bf00      	nop
 8004dc4:	bf00      	nop
 8004dc6:	3710      	adds	r7, #16
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	20000f24 	.word	0x20000f24

08004dd0 <spi_write_read>:
HAL_StatusTypeDef status_spi_in = HAL_OK;
void spi_write_read(uint8_t tx_Data[], //array of data to be written on SPI port
		uint8_t tx_len, //length of the tx data array
		uint8_t *rx_data, //Input: array that will store the data read by the SPI port
		uint8_t rx_len //Option: number of bytes to be read from the SPI port
		) {
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	607a      	str	r2, [r7, #4]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	460b      	mov	r3, r1
 8004dde:	72fb      	strb	r3, [r7, #11]
 8004de0:	4613      	mov	r3, r2
 8004de2:	72bb      	strb	r3, [r7, #10]
	status_spi_out = HAL_SPI_Transmit(&hspi4, tx_Data, tx_len, 20);
 8004de4:	7afb      	ldrb	r3, [r7, #11]
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	2314      	movs	r3, #20
 8004dea:	68f9      	ldr	r1, [r7, #12]
 8004dec:	4812      	ldr	r0, [pc, #72]	@ (8004e38 <spi_write_read+0x68>)
 8004dee:	f004 fae6 	bl	80093be <HAL_SPI_Transmit>
 8004df2:	4603      	mov	r3, r0
 8004df4:	461a      	mov	r2, r3
 8004df6:	4b11      	ldr	r3, [pc, #68]	@ (8004e3c <spi_write_read+0x6c>)
 8004df8:	701a      	strb	r2, [r3, #0]
	rx_len_local = rx_len;
 8004dfa:	4a11      	ldr	r2, [pc, #68]	@ (8004e40 <spi_write_read+0x70>)
 8004dfc:	7abb      	ldrb	r3, [r7, #10]
 8004dfe:	7013      	strb	r3, [r2, #0]
	if (status_spi_out != HAL_OK) {
 8004e00:	4b0e      	ldr	r3, [pc, #56]	@ (8004e3c <spi_write_read+0x6c>)
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <spi_write_read+0x3c>

		Error_Handler();
 8004e08:	f001 fe36 	bl	8006a78 <Error_Handler>
	}
	status_spi_in = HAL_SPI_Receive(&hspi4, rx_data, rx_len, 20);
 8004e0c:	7abb      	ldrb	r3, [r7, #10]
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	2314      	movs	r3, #20
 8004e12:	6879      	ldr	r1, [r7, #4]
 8004e14:	4808      	ldr	r0, [pc, #32]	@ (8004e38 <spi_write_read+0x68>)
 8004e16:	f004 fc16 	bl	8009646 <HAL_SPI_Receive>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	4b09      	ldr	r3, [pc, #36]	@ (8004e44 <spi_write_read+0x74>)
 8004e20:	701a      	strb	r2, [r3, #0]
	if (status_spi_in != HAL_OK) {
 8004e22:	4b08      	ldr	r3, [pc, #32]	@ (8004e44 <spi_write_read+0x74>)
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <spi_write_read+0x5e>

		Error_Handler();
 8004e2a:	f001 fe25 	bl	8006a78 <Error_Handler>
	}

}
 8004e2e:	bf00      	nop
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	20000f24 	.word	0x20000f24
 8004e3c:	20001091 	.word	0x20001091
 8004e40:	20001090 	.word	0x20001090
 8004e44:	20001092 	.word	0x20001092

08004e48 <spi_read_byte>:
 * @brief Description  :  Read just 1 byte using the SPI port
 * @param parameters   :  TX data array, TX data length, RX data pointer, number of bytes to be read from the SPI port
 * @return Value       :  return the data RX buffer
 */

uint8_t spi_read_byte(uint8_t tx_dat) {
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af02      	add	r7, sp, #8
 8004e4e:	4603      	mov	r3, r0
 8004e50:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	if (HAL_SPI_TransmitReceive(&hspi4, &tx_dat, &data, 1, 20) != HAL_OK) {
 8004e52:	f107 020f 	add.w	r2, r7, #15
 8004e56:	1df9      	adds	r1, r7, #7
 8004e58:	2314      	movs	r3, #20
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	4806      	ldr	r0, [pc, #24]	@ (8004e78 <spi_read_byte+0x30>)
 8004e60:	f004 fd0a 	bl	8009878 <HAL_SPI_TransmitReceive>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <spi_read_byte+0x26>
		Error_Handler();
 8004e6a:	f001 fe05 	bl	8006a78 <Error_Handler>
	}
	return (data);
 8004e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	20000f24 	.word	0x20000f24

08004e7c <temparature_data_read>:
 * @brief Function Name: temparature_data_read.
 * @brief Description  : Read all LTC6811-1 temperature sensors
 */

void temparature_data_read()
{
 8004e7c:	b590      	push	{r4, r7, lr}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
   LTC6811_clraux();
 8004e82:	f7fe f974 	bl	800316e <LTC6811_clraux>
   int8_t error = 0;
 8004e86:	2300      	movs	r3, #0
 8004e88:	73bb      	strb	r3, [r7, #14]
   int32_t time = 0;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60bb      	str	r3, [r7, #8]
   uint8_t i_1;
   uint32_t conv_time = 0;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	607b      	str	r3, [r7, #4]
   //-----------------------
   wakeup_sleep(TOTAL_IC);
 8004e92:	2001      	movs	r0, #1
 8004e94:	f7fe f9b0 	bl	80031f8 <wakeup_sleep>
   LTC6811_adax(ADC_CONVERSION_MODE, AUX_CH_ALL);
 8004e98:	2302      	movs	r3, #2
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7fe f920 	bl	80030e2 <LTC6811_adax>
   conv_time = LTC6811_pollAdc();
 8004ea2:	f7fe f95d 	bl	8003160 <LTC6811_pollAdc>
 8004ea6:	6078      	str	r0, [r7, #4]
   time += conv_time / 1000;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a2e      	ldr	r2, [pc, #184]	@ (8004f64 <temparature_data_read+0xe8>)
 8004eac:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb0:	099a      	lsrs	r2, r3, #6
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	60bb      	str	r3, [r7, #8]
   //-----------------------
   wakeup_sleep(TOTAL_IC);
 8004eb8:	2001      	movs	r0, #1
 8004eba:	f7fe f99d 	bl	80031f8 <wakeup_sleep>
   error = LTC6811_rdaux(SEL_ALL_REG, TOTAL_IC, BMS_IC); // Set to read back all aux registers
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	4a29      	ldr	r2, [pc, #164]	@ (8004f68 <temparature_data_read+0xec>)
 8004ec2:	2101      	movs	r1, #1
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7fe f935 	bl	8003134 <LTC6811_rdaux>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	73bb      	strb	r3, [r7, #14]

   if (error == -1)
 8004ece:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed6:	d117      	bne.n	8004f08 <temparature_data_read+0x8c>
   {
       for (i_1 = 0; i_1 < TEMP_PER_IC; i_1++)
 8004ed8:	2300      	movs	r3, #0
 8004eda:	73fb      	strb	r3, [r7, #15]
 8004edc:	e010      	b.n	8004f00 <temparature_data_read+0x84>
       {
           BMS_IC[0].heat.temp[i_1] = TemperatureDataTable[123];
 8004ede:	7bfb      	ldrb	r3, [r7, #15]
 8004ee0:	210f      	movs	r1, #15
 8004ee2:	4a21      	ldr	r2, [pc, #132]	@ (8004f68 <temparature_data_read+0xec>)
 8004ee4:	4413      	add	r3, r2
 8004ee6:	460a      	mov	r2, r1
 8004ee8:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
           BMS_IC[1].heat.temp[i_1] = TemperatureDataTable[123];
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
 8004eee:	210f      	movs	r1, #15
 8004ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8004f68 <temparature_data_read+0xec>)
 8004ef2:	4413      	add	r3, r2
 8004ef4:	460a      	mov	r2, r1
 8004ef6:	f883 21f4 	strb.w	r2, [r3, #500]	@ 0x1f4
       for (i_1 = 0; i_1 < TEMP_PER_IC; i_1++)
 8004efa:	7bfb      	ldrb	r3, [r7, #15]
 8004efc:	3301      	adds	r3, #1
 8004efe:	73fb      	strb	r3, [r7, #15]
 8004f00:	7bfb      	ldrb	r3, [r7, #15]
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d9eb      	bls.n	8004ede <temparature_data_read+0x62>
                   BMS_IC[0].aux.a_codes[i_1]);
           BMS_IC[1].heat.temp[i_1] = tempDataTableRead(
                               BMS_IC[1].aux.a_codes[i_1]);
       }
   }
}
 8004f06:	e028      	b.n	8004f5a <temparature_data_read+0xde>
       for (i_1 = 0; i_1 < TEMP_PER_IC; i_1++)
 8004f08:	2300      	movs	r3, #0
 8004f0a:	73fb      	strb	r3, [r7, #15]
 8004f0c:	e022      	b.n	8004f54 <temparature_data_read+0xd8>
           BMS_IC[0].heat.temp[i_1] = tempDataTableRead(
 8004f0e:	7bfb      	ldrb	r3, [r7, #15]
 8004f10:	4a15      	ldr	r2, [pc, #84]	@ (8004f68 <temparature_data_read+0xec>)
 8004f12:	3324      	adds	r3, #36	@ 0x24
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	4413      	add	r3, r2
 8004f18:	88db      	ldrh	r3, [r3, #6]
 8004f1a:	7bfc      	ldrb	r4, [r7, #15]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f000 f825 	bl	8004f6c <tempDataTableRead>
 8004f22:	4603      	mov	r3, r0
 8004f24:	461a      	mov	r2, r3
 8004f26:	4b10      	ldr	r3, [pc, #64]	@ (8004f68 <temparature_data_read+0xec>)
 8004f28:	4423      	add	r3, r4
 8004f2a:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
           BMS_IC[1].heat.temp[i_1] = tempDataTableRead(
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
 8004f30:	4a0d      	ldr	r2, [pc, #52]	@ (8004f68 <temparature_data_read+0xec>)
 8004f32:	33a6      	adds	r3, #166	@ 0xa6
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	4413      	add	r3, r2
 8004f38:	88db      	ldrh	r3, [r3, #6]
 8004f3a:	7bfc      	ldrb	r4, [r7, #15]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f000 f815 	bl	8004f6c <tempDataTableRead>
 8004f42:	4603      	mov	r3, r0
 8004f44:	461a      	mov	r2, r3
 8004f46:	4b08      	ldr	r3, [pc, #32]	@ (8004f68 <temparature_data_read+0xec>)
 8004f48:	4423      	add	r3, r4
 8004f4a:	f883 21f4 	strb.w	r2, [r3, #500]	@ 0x1f4
       for (i_1 = 0; i_1 < TEMP_PER_IC; i_1++)
 8004f4e:	7bfb      	ldrb	r3, [r7, #15]
 8004f50:	3301      	adds	r3, #1
 8004f52:	73fb      	strb	r3, [r7, #15]
 8004f54:	7bfb      	ldrb	r3, [r7, #15]
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d9d9      	bls.n	8004f0e <temparature_data_read+0x92>
}
 8004f5a:	bf00      	nop
 8004f5c:	3714      	adds	r7, #20
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd90      	pop	{r4, r7, pc}
 8004f62:	bf00      	nop
 8004f64:	10624dd3 	.word	0x10624dd3
 8004f68:	20000f7c 	.word	0x20000f7c

08004f6c <tempDataTableRead>:
/*
 * @Function : tempDataTableRead
 * @Description : per calculated temperature values for voltage readings
 */
signed char tempDataTableRead(uint16_t tempe_v_in)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	4603      	mov	r3, r0
 8004f74:	80fb      	strh	r3, [r7, #6]
    signed char temperature_val_tb;
    int temp_val_tp;
    temp_val_tp = (tempe_v_in >> 7) - 0x12;//0x30;
 8004f76:	88fb      	ldrh	r3, [r7, #6]
 8004f78:	09db      	lsrs	r3, r3, #7
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	3b12      	subs	r3, #18
 8004f7e:	60bb      	str	r3, [r7, #8]
    if (temp_val_tp < 0)
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	da02      	bge.n	8004f8c <tempDataTableRead+0x20>
    {
        temperature_val_tb = 105;
 8004f86:	2369      	movs	r3, #105	@ 0x69
 8004f88:	73fb      	strb	r3, [r7, #15]
 8004f8a:	e00a      	b.n	8004fa2 <tempDataTableRead+0x36>
    }
    else if (temp_val_tp > 222)
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	2bde      	cmp	r3, #222	@ 0xde
 8004f90:	dd02      	ble.n	8004f98 <tempDataTableRead+0x2c>
    {
        temperature_val_tb = -25;
 8004f92:	23e7      	movs	r3, #231	@ 0xe7
 8004f94:	73fb      	strb	r3, [r7, #15]
 8004f96:	e004      	b.n	8004fa2 <tempDataTableRead+0x36>
    }
    else
    {
        temperature_val_tb = TemperatureDataTable[temp_val_tp];
 8004f98:	4a06      	ldr	r2, [pc, #24]	@ (8004fb4 <tempDataTableRead+0x48>)
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	73fb      	strb	r3, [r7, #15]
    }
    return temperature_val_tb;
 8004fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	0800b988 	.word	0x0800b988

08004fb8 <cell_voltage_read>:

int8_t cell_voltage_read(void) {
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
	int8_t error = 0;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	717b      	strb	r3, [r7, #5]
	wakeup_sleep(TOTAL_IC);
 8004fc2:	2001      	movs	r0, #1
 8004fc4:	f7fe f918 	bl	80031f8 <wakeup_sleep>
	LTC6811_adcv(ADC_CONVERSION_MODE, ADC_DCP, CELL_CH_TO_CONVERT);
 8004fc8:	2302      	movs	r3, #2
 8004fca:	2100      	movs	r1, #0
 8004fcc:	2200      	movs	r2, #0
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7fe f874 	bl	80030bc <LTC6811_adcv>
	 LTC6811_pollAdc();
 8004fd4:	f7fe f8c4 	bl	8003160 <LTC6811_pollAdc>
	wakeup_sleep(TOTAL_IC);
 8004fd8:	2001      	movs	r0, #1
 8004fda:	f7fe f90d 	bl	80031f8 <wakeup_sleep>
	error = LTC6811_rdcv(SEL_ALL_REG, TOTAL_IC, BMS_IC);
 8004fde:	2300      	movs	r3, #0
 8004fe0:	4a19      	ldr	r2, [pc, #100]	@ (8005048 <cell_voltage_read+0x90>)
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7fe f88e 	bl	8003106 <LTC6811_rdcv>
 8004fea:	4603      	mov	r3, r0
 8004fec:	717b      	strb	r3, [r7, #5]
//	check_error(error);
	uint8_t i_1, current_ic_1;
	if (error == -1) {
 8004fee:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff6:	d121      	bne.n	800503c <cell_voltage_read+0x84>
		for (current_ic_1 = 0; current_ic_1 < TOTAL_IC; current_ic_1++) {
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	71bb      	strb	r3, [r7, #6]
 8004ffc:	e01b      	b.n	8005036 <cell_voltage_read+0x7e>
			for (i_1 = 0; i_1 < BMS_IC[0].ic_reg.cell_channels; i_1++) {
 8004ffe:	2300      	movs	r3, #0
 8005000:	71fb      	strb	r3, [r7, #7]
 8005002:	e00f      	b.n	8005024 <cell_voltage_read+0x6c>
				BMS_IC[current_ic_1].cells.c_codes[i_1] = 0;
 8005004:	79ba      	ldrb	r2, [r7, #6]
 8005006:	79f9      	ldrb	r1, [r7, #7]
 8005008:	480f      	ldr	r0, [pc, #60]	@ (8005048 <cell_voltage_read+0x90>)
 800500a:	4613      	mov	r3, r2
 800500c:	019b      	lsls	r3, r3, #6
 800500e:	4413      	add	r3, r2
 8005010:	005b      	lsls	r3, r3, #1
 8005012:	440b      	add	r3, r1
 8005014:	330c      	adds	r3, #12
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	4403      	add	r3, r0
 800501a:	2200      	movs	r2, #0
 800501c:	80da      	strh	r2, [r3, #6]
			for (i_1 = 0; i_1 < BMS_IC[0].ic_reg.cell_channels; i_1++) {
 800501e:	79fb      	ldrb	r3, [r7, #7]
 8005020:	3301      	adds	r3, #1
 8005022:	71fb      	strb	r3, [r7, #7]
 8005024:	4b08      	ldr	r3, [pc, #32]	@ (8005048 <cell_voltage_read+0x90>)
 8005026:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 800502a:	79fa      	ldrb	r2, [r7, #7]
 800502c:	429a      	cmp	r2, r3
 800502e:	d3e9      	bcc.n	8005004 <cell_voltage_read+0x4c>
		for (current_ic_1 = 0; current_ic_1 < TOTAL_IC; current_ic_1++) {
 8005030:	79bb      	ldrb	r3, [r7, #6]
 8005032:	3301      	adds	r3, #1
 8005034:	71bb      	strb	r3, [r7, #6]
 8005036:	79bb      	ldrb	r3, [r7, #6]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d0e0      	beq.n	8004ffe <cell_voltage_read+0x46>
			}
		}
	}
	//cell_data_print(error, conv_time);
	return error;
 800503c:	f997 3005 	ldrsb.w	r3, [r7, #5]
}
 8005040:	4618      	mov	r0, r3
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	20000f7c 	.word	0x20000f7c

0800504c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800504c:	b590      	push	{r4, r7, lr}
 800504e:	b089      	sub	sp, #36	@ 0x24
 8005050:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005052:	f001 ff87 	bl	8006f64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005056:	f001 f8e7 	bl	8006228 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800505a:	f001 faad 	bl	80065b8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800505e:	f001 f9d3 	bl	8006408 <MX_SPI1_Init>
  MX_SPI2_Init();
 8005062:	f001 fa07 	bl	8006474 <MX_SPI2_Init>
  MX_I2C2_Init();
 8005066:	f001 f94f 	bl	8006308 <MX_I2C2_Init>
  MX_I2C3_Init();
 800506a:	f001 f98d 	bl	8006388 <MX_I2C3_Init>
  MX_SPI3_Init();
 800506e:	f001 fa37 	bl	80064e0 <MX_SPI3_Init>
  MX_SPI4_Init();
 8005072:	f001 fa6b 	bl	800654c <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */


  mcu_spiInit(0);
 8005076:	2000      	movs	r0, #0
 8005078:	f001 fd04 	bl	8006a84 <mcu_spiInit>
  HAL_Delay(10);
 800507c:	200a      	movs	r0, #10
 800507e:	f001 ffe3 	bl	8007048 <HAL_Delay>
  HAL_Delay(10);
 8005082:	200a      	movs	r0, #10
 8005084:	f001 ffe0 	bl	8007048 <HAL_Delay>

  INA229_config(&INA229_0);
 8005088:	4850      	ldr	r0, [pc, #320]	@ (80051cc <main+0x180>)
 800508a:	f7fd fe4f 	bl	8002d2c <INA229_config>

  HAL_Delay(10);
 800508e:	200a      	movs	r0, #10
 8005090:	f001 ffda 	bl	8007048 <HAL_Delay>
  INA229_config(&INA229_1);
 8005094:	484e      	ldr	r0, [pc, #312]	@ (80051d0 <main+0x184>)
 8005096:	f7fd fe49 	bl	8002d2c <INA229_config>

  HAL_Delay(10);
 800509a:	200a      	movs	r0, #10
 800509c:	f001 ffd4 	bl	8007048 <HAL_Delay>
  INA229_config(&INA229_2);
 80050a0:	484c      	ldr	r0, [pc, #304]	@ (80051d4 <main+0x188>)
 80050a2:	f7fd fe43 	bl	8002d2c <INA229_config>

  HAL_Delay(10);
 80050a6:	200a      	movs	r0, #10
 80050a8:	f001 ffce 	bl	8007048 <HAL_Delay>
  INA229_config(&INA229_3);
 80050ac:	484a      	ldr	r0, [pc, #296]	@ (80051d8 <main+0x18c>)
 80050ae:	f7fd fe3d 	bl	8002d2c <INA229_config>

  HAL_Delay(10);
 80050b2:	200a      	movs	r0, #10
 80050b4:	f001 ffc8 	bl	8007048 <HAL_Delay>
  INA229_config(&INA229_4);
 80050b8:	4848      	ldr	r0, [pc, #288]	@ (80051dc <main+0x190>)
 80050ba:	f7fd fe37 	bl	8002d2c <INA229_config>

  INA229_config(&INA229_5);
 80050be:	4848      	ldr	r0, [pc, #288]	@ (80051e0 <main+0x194>)
 80050c0:	f7fd fe34 	bl	8002d2c <INA229_config>

  HAL_Delay(10);
 80050c4:	200a      	movs	r0, #10
 80050c6:	f001 ffbf 	bl	8007048 <HAL_Delay>
  INA229_config(&INA229_6);
 80050ca:	4846      	ldr	r0, [pc, #280]	@ (80051e4 <main+0x198>)
 80050cc:	f7fd fe2e 	bl	8002d2c <INA229_config>

  HAL_Delay(10);
 80050d0:	200a      	movs	r0, #10
 80050d2:	f001 ffb9 	bl	8007048 <HAL_Delay>
  INA229_config(&INA229_7);
 80050d6:	4844      	ldr	r0, [pc, #272]	@ (80051e8 <main+0x19c>)
 80050d8:	f7fd fe28 	bl	8002d2c <INA229_config>

  HAL_Delay(10);
 80050dc:	200a      	movs	r0, #10
 80050de:	f001 ffb3 	bl	8007048 <HAL_Delay>
  INA229_config(&INA229_8);
 80050e2:	4842      	ldr	r0, [pc, #264]	@ (80051ec <main+0x1a0>)
 80050e4:	f7fd fe22 	bl	8002d2c <INA229_config>

  HAL_Delay(10);
 80050e8:	200a      	movs	r0, #10
 80050ea:	f001 ffad 	bl	8007048 <HAL_Delay>
  INA229_config(&INA229_9);
 80050ee:	4840      	ldr	r0, [pc, #256]	@ (80051f0 <main+0x1a4>)
 80050f0:	f7fd fe1c 	bl	8002d2c <INA229_config>

  HAL_Delay(10);
 80050f4:	200a      	movs	r0, #10
 80050f6:	f001 ffa7 	bl	8007048 <HAL_Delay>
  INA229_config(&INA229_10);
 80050fa:	483e      	ldr	r0, [pc, #248]	@ (80051f4 <main+0x1a8>)
 80050fc:	f7fd fe16 	bl	8002d2c <INA229_config>

  HAL_Delay(10);
 8005100:	200a      	movs	r0, #10
 8005102:	f001 ffa1 	bl	8007048 <HAL_Delay>
  INA229_config(&INA229_11);
 8005106:	483c      	ldr	r0, [pc, #240]	@ (80051f8 <main+0x1ac>)
 8005108:	f7fd fe10 	bl	8002d2c <INA229_config>

  HAL_Delay(10);
 800510c:	200a      	movs	r0, #10
 800510e:	f001 ff9b 	bl	8007048 <HAL_Delay>
  INA229_config(&INA229_12);
 8005112:	483a      	ldr	r0, [pc, #232]	@ (80051fc <main+0x1b0>)
 8005114:	f7fd fe0a 	bl	8002d2c <INA229_config>

  HAL_Delay(10);
 8005118:	200a      	movs	r0, #10
 800511a:	f001 ff95 	bl	8007048 <HAL_Delay>

  INA229_config(INA229_13);
 800511e:	4b38      	ldr	r3, [pc, #224]	@ (8005200 <main+0x1b4>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4618      	mov	r0, r3
 8005124:	f7fd fe02 	bl	8002d2c <INA229_config>

  HAL_Delay(10);
 8005128:	200a      	movs	r0, #10
 800512a:	f001 ff8d 	bl	8007048 <HAL_Delay>
  INA229_config(&INA229_14);
 800512e:	4835      	ldr	r0, [pc, #212]	@ (8005204 <main+0x1b8>)
 8005130:	f7fd fdfc 	bl	8002d2c <INA229_config>

  HAL_Delay(10);
 8005134:	200a      	movs	r0, #10
 8005136:	f001 ff87 	bl	8007048 <HAL_Delay>
  INA229_config(&INA229_15);
 800513a:	4833      	ldr	r0, [pc, #204]	@ (8005208 <main+0x1bc>)
 800513c:	f7fd fdf6 	bl	8002d2c <INA229_config>

  HAL_Delay(10);
 8005140:	200a      	movs	r0, #10
 8005142:	f001 ff81 	bl	8007048 <HAL_Delay>
  INA229_config(&INA229_16);
 8005146:	4831      	ldr	r0, [pc, #196]	@ (800520c <main+0x1c0>)
 8005148:	f7fd fdf0 	bl	8002d2c <INA229_config>

  HAL_Delay(10);
 800514c:	200a      	movs	r0, #10
 800514e:	f001 ff7b 	bl	8007048 <HAL_Delay>
  INA229_config(&INA229_17);
 8005152:	482f      	ldr	r0, [pc, #188]	@ (8005210 <main+0x1c4>)
 8005154:	f7fd fdea 	bl	8002d2c <INA229_config>

  HAL_Delay(10);
 8005158:	200a      	movs	r0, #10
 800515a:	f001 ff75 	bl	8007048 <HAL_Delay>
  INA229_config(&INA229_18);
 800515e:	482d      	ldr	r0, [pc, #180]	@ (8005214 <main+0x1c8>)
 8005160:	f7fd fde4 	bl	8002d2c <INA229_config>

  HAL_Delay(10);
 8005164:	200a      	movs	r0, #10
 8005166:	f001 ff6f 	bl	8007048 <HAL_Delay>
  INA229_config(&INA229_19);
 800516a:	482b      	ldr	r0, [pc, #172]	@ (8005218 <main+0x1cc>)
 800516c:	f7fd fdde 	bl	8002d2c <INA229_config>

  HAL_Delay(10);
 8005170:	200a      	movs	r0, #10
 8005172:	f001 ff69 	bl	8007048 <HAL_Delay>
  INA229_config(&INA229_20);
 8005176:	4829      	ldr	r0, [pc, #164]	@ (800521c <main+0x1d0>)
 8005178:	f7fd fdd8 	bl	8002d2c <INA229_config>

  HAL_Delay(10);
 800517c:	200a      	movs	r0, #10
 800517e:	f001 ff63 	bl	8007048 <HAL_Delay>
  INA229_config(&INA229_21);
 8005182:	4827      	ldr	r0, [pc, #156]	@ (8005220 <main+0x1d4>)
 8005184:	f7fd fdd2 	bl	8002d2c <INA229_config>

  HAL_Delay(10);
 8005188:	200a      	movs	r0, #10
 800518a:	f001 ff5d 	bl	8007048 <HAL_Delay>
  INA229_config(&INA229_22);
 800518e:	4825      	ldr	r0, [pc, #148]	@ (8005224 <main+0x1d8>)
 8005190:	f7fd fdcc 	bl	8002d2c <INA229_config>

  HAL_Delay(10);
 8005194:	200a      	movs	r0, #10
 8005196:	f001 ff57 	bl	8007048 <HAL_Delay>
  INA229_config(&INA229_23);
 800519a:	4823      	ldr	r0, [pc, #140]	@ (8005228 <main+0x1dc>)
 800519c:	f7fd fdc6 	bl	8002d2c <INA229_config>

  HAL_Delay(10);
 80051a0:	200a      	movs	r0, #10
 80051a2:	f001 ff51 	bl	8007048 <HAL_Delay>
  INA229_config(&INA229_24);
 80051a6:	4821      	ldr	r0, [pc, #132]	@ (800522c <main+0x1e0>)
 80051a8:	f7fd fdc0 	bl	8002d2c <INA229_config>

  HAL_Delay(10);
 80051ac:	200a      	movs	r0, #10
 80051ae:	f001 ff4b 	bl	8007048 <HAL_Delay>
  INA229_config(&INA229_25);
 80051b2:	481f      	ldr	r0, [pc, #124]	@ (8005230 <main+0x1e4>)
 80051b4:	f7fd fdba 	bl	8002d2c <INA229_config>

  HAL_Delay(10);
 80051b8:	200a      	movs	r0, #10
 80051ba:	f001 ff45 	bl	8007048 <HAL_Delay>

  //--------------------------------------------------------------//

	LTC6811_init_cfg(TOTAL_IC, BMS_IC);
 80051be:	491d      	ldr	r1, [pc, #116]	@ (8005234 <main+0x1e8>)
 80051c0:	2001      	movs	r0, #1
 80051c2:	f7fd ffe9 	bl	8003198 <LTC6811_init_cfg>
	uint8_t main_current_ic;
	for (main_current_ic = 0; main_current_ic < TOTAL_IC; main_current_ic++) {
 80051c6:	2300      	movs	r3, #0
 80051c8:	71fb      	strb	r3, [r7, #7]
 80051ca:	e04e      	b.n	800526a <main+0x21e>
 80051cc:	0800b920 	.word	0x0800b920
 80051d0:	0800b924 	.word	0x0800b924
 80051d4:	0800b928 	.word	0x0800b928
 80051d8:	0800b92c 	.word	0x0800b92c
 80051dc:	0800b930 	.word	0x0800b930
 80051e0:	0800b934 	.word	0x0800b934
 80051e4:	0800b938 	.word	0x0800b938
 80051e8:	0800b93c 	.word	0x0800b93c
 80051ec:	0800b940 	.word	0x0800b940
 80051f0:	0800b944 	.word	0x0800b944
 80051f4:	0800b948 	.word	0x0800b948
 80051f8:	0800b94c 	.word	0x0800b94c
 80051fc:	0800b950 	.word	0x0800b950
 8005200:	0800b954 	.word	0x0800b954
 8005204:	0800b958 	.word	0x0800b958
 8005208:	0800b95c 	.word	0x0800b95c
 800520c:	0800b960 	.word	0x0800b960
 8005210:	0800b964 	.word	0x0800b964
 8005214:	0800b968 	.word	0x0800b968
 8005218:	0800b96c 	.word	0x0800b96c
 800521c:	0800b970 	.word	0x0800b970
 8005220:	0800b974 	.word	0x0800b974
 8005224:	0800b978 	.word	0x0800b978
 8005228:	0800b97c 	.word	0x0800b97c
 800522c:	0800b980 	.word	0x0800b980
 8005230:	0800b984 	.word	0x0800b984
 8005234:	20000f7c 	.word	0x20000f7c
		LTC6811_set_cfgr(main_current_ic, BMS_IC, REF_ON, ADCOPT, GPIOBITS_A,
 8005238:	4bcc      	ldr	r3, [pc, #816]	@ (800556c <main+0x520>)
 800523a:	7819      	ldrb	r1, [r3, #0]
 800523c:	4bcc      	ldr	r3, [pc, #816]	@ (8005570 <main+0x524>)
 800523e:	781c      	ldrb	r4, [r3, #0]
 8005240:	4bcc      	ldr	r3, [pc, #816]	@ (8005574 <main+0x528>)
 8005242:	881b      	ldrh	r3, [r3, #0]
 8005244:	4acc      	ldr	r2, [pc, #816]	@ (8005578 <main+0x52c>)
 8005246:	8812      	ldrh	r2, [r2, #0]
 8005248:	79f8      	ldrb	r0, [r7, #7]
 800524a:	9204      	str	r2, [sp, #16]
 800524c:	9303      	str	r3, [sp, #12]
 800524e:	4bcb      	ldr	r3, [pc, #812]	@ (800557c <main+0x530>)
 8005250:	9302      	str	r3, [sp, #8]
 8005252:	4bcb      	ldr	r3, [pc, #812]	@ (8005580 <main+0x534>)
 8005254:	9301      	str	r3, [sp, #4]
 8005256:	4bcb      	ldr	r3, [pc, #812]	@ (8005584 <main+0x538>)
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	4623      	mov	r3, r4
 800525c:	460a      	mov	r2, r1
 800525e:	49ca      	ldr	r1, [pc, #808]	@ (8005588 <main+0x53c>)
 8005260:	f7fd ffa9 	bl	80031b6 <LTC6811_set_cfgr>
	for (main_current_ic = 0; main_current_ic < TOTAL_IC; main_current_ic++) {
 8005264:	79fb      	ldrb	r3, [r7, #7]
 8005266:	3301      	adds	r3, #1
 8005268:	71fb      	strb	r3, [r7, #7]
 800526a:	79fb      	ldrb	r3, [r7, #7]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d0e3      	beq.n	8005238 <main+0x1ec>
				DCCBITS_A, DCTOBITS, UV, OV);
	}
	LTC6811_wrcfg(TOTAL_IC, BMS_IC);
 8005270:	49c5      	ldr	r1, [pc, #788]	@ (8005588 <main+0x53c>)
 8005272:	2001      	movs	r0, #1
 8005274:	f7fd ff13 	bl	800309e <LTC6811_wrcfg>
	LTC6811_reset_crc_count(TOTAL_IC, BMS_IC);
 8005278:	49c3      	ldr	r1, [pc, #780]	@ (8005588 <main+0x53c>)
 800527a:	2001      	movs	r0, #1
 800527c:	f7fd ff7d 	bl	800317a <LTC6811_reset_crc_count>
	LTC6811_init_reg_limits(TOTAL_IC, BMS_IC);
 8005280:	49c1      	ldr	r1, [pc, #772]	@ (8005588 <main+0x53c>)
 8005282:	2001      	movs	r0, #1
 8005284:	f7fd feb2 	bl	8002fec <LTC6811_init_reg_limits>

  //--------------------------------------------------------------//

  /* Initialize the display module */
  Display_Init();
 8005288:	f7ff fa12 	bl	80046b0 <Display_Init>

  /* Display the main title page */
  Display_MainTitlePage();
 800528c:	f7ff fa38 	bl	8004700 <Display_MainTitlePage>

  /* Initialize the expander at address 0x20 by configuring all its pins as outputs */
  Expander_InitAllDevices(&hi2c2);
 8005290:	48be      	ldr	r0, [pc, #760]	@ (800558c <main+0x540>)
 8005292:	f7ff fbbb 	bl	8004a0c <Expander_InitAllDevices>
  Expander_InitAllDevices(&hi2c3);
 8005296:	48be      	ldr	r0, [pc, #760]	@ (8005590 <main+0x544>)
 8005298:	f7ff fbb8 	bl	8004a0c <Expander_InitAllDevices>
//		  cell11_Temp_02_Set(resistance[4]);
//		  cell11_Temp_03_Set(resistance[5]);

	  ////////////////////////////////////////////////////////////

	  Set_Output_Voltage(&hi2c2, CELL_1, 4.0f);
 800529c:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 80052a0:	2100      	movs	r1, #0
 80052a2:	48ba      	ldr	r0, [pc, #744]	@ (800558c <main+0x540>)
 80052a4:	f7ff fcce 	bl	8004c44 <Set_Output_Voltage>
Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_01, CELL_01_LED_01 , HIGH);
 80052a8:	2301      	movs	r3, #1
 80052aa:	2210      	movs	r2, #16
 80052ac:	2121      	movs	r1, #33	@ 0x21
 80052ae:	48b7      	ldr	r0, [pc, #732]	@ (800558c <main+0x540>)
 80052b0:	f7ff fb07 	bl	80048c2 <Expander_SetPinState>

HAL_GPIO_WritePin(GPIOE, CELL12_CS_01_Pin, GPIO_PIN_RESET);
 80052b4:	2200      	movs	r2, #0
 80052b6:	2101      	movs	r1, #1
 80052b8:	48b6      	ldr	r0, [pc, #728]	@ (8005594 <main+0x548>)
 80052ba:	f002 f97b 	bl	80075b4 <HAL_GPIO_WritePin>
//
  busVoltage_01 = INA229_getVBUS_V(INA229_0);
 80052be:	4bb6      	ldr	r3, [pc, #728]	@ (8005598 <main+0x54c>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7fd fde8 	bl	8002e98 <INA229_getVBUS_V>
 80052c8:	eef0 7a40 	vmov.f32	s15, s0
 80052cc:	4bb3      	ldr	r3, [pc, #716]	@ (800559c <main+0x550>)
 80052ce:	edc3 7a00 	vstr	s15, [r3]

//
//HAL_Delay(1000);
  HAL_GPIO_WritePin(GPIOE, CELL12_CS_01_Pin, GPIO_PIN_SET);
 80052d2:	2201      	movs	r2, #1
 80052d4:	2101      	movs	r1, #1
 80052d6:	48af      	ldr	r0, [pc, #700]	@ (8005594 <main+0x548>)
 80052d8:	f002 f96c 	bl	80075b4 <HAL_GPIO_WritePin>



  HAL_GPIO_WritePin(GPIOE, CELL12_CS_01_Pin, GPIO_PIN_RESET);
 80052dc:	2200      	movs	r2, #0
 80052de:	2101      	movs	r1, #1
 80052e0:	48ac      	ldr	r0, [pc, #688]	@ (8005594 <main+0x548>)
 80052e2:	f002 f967 	bl	80075b4 <HAL_GPIO_WritePin>
//
  temperatureC_01 = INA229_getDIETEMP_C(INA229_0);
 80052e6:	4bac      	ldr	r3, [pc, #688]	@ (8005598 <main+0x54c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7fd fe32 	bl	8002f54 <INA229_getDIETEMP_C>
 80052f0:	eef0 7a40 	vmov.f32	s15, s0
 80052f4:	4baa      	ldr	r3, [pc, #680]	@ (80055a0 <main+0x554>)
 80052f6:	edc3 7a00 	vstr	s15, [r3]

//
//HAL_Delay(1000);
HAL_GPIO_WritePin(GPIOE, CELL12_CS_01_Pin, GPIO_PIN_SET);
 80052fa:	2201      	movs	r2, #1
 80052fc:	2101      	movs	r1, #1
 80052fe:	48a5      	ldr	r0, [pc, #660]	@ (8005594 <main+0x548>)
 8005300:	f002 f958 	bl	80075b4 <HAL_GPIO_WritePin>
HAL_Delay(1000);
 8005304:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005308:	f001 fe9e 	bl	8007048 <HAL_Delay>

Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_01, CELL_01_LED_01 , LOW);
 800530c:	2300      	movs	r3, #0
 800530e:	2210      	movs	r2, #16
 8005310:	2121      	movs	r1, #33	@ 0x21
 8005312:	489e      	ldr	r0, [pc, #632]	@ (800558c <main+0x540>)
 8005314:	f7ff fad5 	bl	80048c2 <Expander_SetPinState>



///////////////////////////////////////////////////////////////////

Set_Output_Voltage(&hi2c2, CELL_2, 3.3f);
 8005318:	ed9f 0aa2 	vldr	s0, [pc, #648]	@ 80055a4 <main+0x558>
 800531c:	2101      	movs	r1, #1
 800531e:	489b      	ldr	r0, [pc, #620]	@ (800558c <main+0x540>)
 8005320:	f7ff fc90 	bl	8004c44 <Set_Output_Voltage>

Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_01, CELL_02_LED_01 , HIGH);
 8005324:	2301      	movs	r3, #1
 8005326:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800532a:	2121      	movs	r1, #33	@ 0x21
 800532c:	4897      	ldr	r0, [pc, #604]	@ (800558c <main+0x540>)
 800532e:	f7ff fac8 	bl	80048c2 <Expander_SetPinState>

			  HAL_GPIO_WritePin(GPIOE, CELL12_CS_02_Pin, GPIO_PIN_RESET);
 8005332:	2200      	movs	r2, #0
 8005334:	2102      	movs	r1, #2
 8005336:	4897      	ldr	r0, [pc, #604]	@ (8005594 <main+0x548>)
 8005338:	f002 f93c 	bl	80075b4 <HAL_GPIO_WritePin>


//
		  busVoltage_02 = INA229_getVBUS_V(INA229_1);
 800533c:	4b9a      	ldr	r3, [pc, #616]	@ (80055a8 <main+0x55c>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4618      	mov	r0, r3
 8005342:	f7fd fda9 	bl	8002e98 <INA229_getVBUS_V>
 8005346:	eef0 7a40 	vmov.f32	s15, s0
 800534a:	4b98      	ldr	r3, [pc, #608]	@ (80055ac <main+0x560>)
 800534c:	edc3 7a00 	vstr	s15, [r3]

//
//HAL_Delay(1000);
		  HAL_GPIO_WritePin(GPIOE, CELL12_CS_02_Pin, GPIO_PIN_SET);
 8005350:	2201      	movs	r2, #1
 8005352:	2102      	movs	r1, #2
 8005354:	488f      	ldr	r0, [pc, #572]	@ (8005594 <main+0x548>)
 8005356:	f002 f92d 	bl	80075b4 <HAL_GPIO_WritePin>



		  HAL_GPIO_WritePin(GPIOE, CELL12_CS_02_Pin, GPIO_PIN_RESET);
 800535a:	2200      	movs	r2, #0
 800535c:	2102      	movs	r1, #2
 800535e:	488d      	ldr	r0, [pc, #564]	@ (8005594 <main+0x548>)
 8005360:	f002 f928 	bl	80075b4 <HAL_GPIO_WritePin>
//

		  temperatureC_02 = INA229_getDIETEMP_C(INA229_1);
 8005364:	4b90      	ldr	r3, [pc, #576]	@ (80055a8 <main+0x55c>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4618      	mov	r0, r3
 800536a:	f7fd fdf3 	bl	8002f54 <INA229_getDIETEMP_C>
 800536e:	eef0 7a40 	vmov.f32	s15, s0
 8005372:	4b8f      	ldr	r3, [pc, #572]	@ (80055b0 <main+0x564>)
 8005374:	edc3 7a00 	vstr	s15, [r3]

//
//HAL_Delay(1000);
	  HAL_GPIO_WritePin(GPIOE, CELL12_CS_02_Pin, GPIO_PIN_SET);
 8005378:	2201      	movs	r2, #1
 800537a:	2102      	movs	r1, #2
 800537c:	4885      	ldr	r0, [pc, #532]	@ (8005594 <main+0x548>)
 800537e:	f002 f919 	bl	80075b4 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8005382:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005386:	f001 fe5f 	bl	8007048 <HAL_Delay>

	Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_01, CELL_02_LED_01 , LOW);
 800538a:	2300      	movs	r3, #0
 800538c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005390:	2121      	movs	r1, #33	@ 0x21
 8005392:	487e      	ldr	r0, [pc, #504]	@ (800558c <main+0x540>)
 8005394:	f7ff fa95 	bl	80048c2 <Expander_SetPinState>

	  ///////////////////////////////////////////////////////////////////
	 ///////////////////////////////////////////////////////////////////

			  Set_Output_Voltage(&hi2c2, CELL_3, 4.0f);
 8005398:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 800539c:	2102      	movs	r1, #2
 800539e:	487b      	ldr	r0, [pc, #492]	@ (800558c <main+0x540>)
 80053a0:	f7ff fc50 	bl	8004c44 <Set_Output_Voltage>

			  Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_01, CELL_03_LED_01 , HIGH);
 80053a4:	2301      	movs	r3, #1
 80053a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80053aa:	2121      	movs	r1, #33	@ 0x21
 80053ac:	4877      	ldr	r0, [pc, #476]	@ (800558c <main+0x540>)
 80053ae:	f7ff fa88 	bl	80048c2 <Expander_SetPinState>

			  			  HAL_GPIO_WritePin(GPIOE, CELL12_CS_03_Pin, GPIO_PIN_RESET);
 80053b2:	2200      	movs	r2, #0
 80053b4:	2104      	movs	r1, #4
 80053b6:	4877      	ldr	r0, [pc, #476]	@ (8005594 <main+0x548>)
 80053b8:	f002 f8fc 	bl	80075b4 <HAL_GPIO_WritePin>

			  		  busVoltage_03 = INA229_getVBUS_V(INA229_2);
 80053bc:	4b7d      	ldr	r3, [pc, #500]	@ (80055b4 <main+0x568>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7fd fd69 	bl	8002e98 <INA229_getVBUS_V>
 80053c6:	eef0 7a40 	vmov.f32	s15, s0
 80053ca:	4b7b      	ldr	r3, [pc, #492]	@ (80055b8 <main+0x56c>)
 80053cc:	edc3 7a00 	vstr	s15, [r3]

			  //
			  //HAL_Delay(1000);
			  		  HAL_GPIO_WritePin(GPIOE, CELL12_CS_03_Pin, GPIO_PIN_SET);
 80053d0:	2201      	movs	r2, #1
 80053d2:	2104      	movs	r1, #4
 80053d4:	486f      	ldr	r0, [pc, #444]	@ (8005594 <main+0x548>)
 80053d6:	f002 f8ed 	bl	80075b4 <HAL_GPIO_WritePin>



			  		  HAL_GPIO_WritePin(GPIOE, CELL12_CS_03_Pin, GPIO_PIN_RESET);
 80053da:	2200      	movs	r2, #0
 80053dc:	2104      	movs	r1, #4
 80053de:	486d      	ldr	r0, [pc, #436]	@ (8005594 <main+0x548>)
 80053e0:	f002 f8e8 	bl	80075b4 <HAL_GPIO_WritePin>
			  //
			  		  temperatureC_03 = INA229_getDIETEMP_C(INA229_2);
 80053e4:	4b73      	ldr	r3, [pc, #460]	@ (80055b4 <main+0x568>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7fd fdb3 	bl	8002f54 <INA229_getDIETEMP_C>
 80053ee:	eef0 7a40 	vmov.f32	s15, s0
 80053f2:	4b72      	ldr	r3, [pc, #456]	@ (80055bc <main+0x570>)
 80053f4:	edc3 7a00 	vstr	s15, [r3]

			  //
			  //HAL_Delay(1000);
			  	  HAL_GPIO_WritePin(GPIOE, CELL12_CS_03_Pin, GPIO_PIN_SET);
 80053f8:	2201      	movs	r2, #1
 80053fa:	2104      	movs	r1, #4
 80053fc:	4865      	ldr	r0, [pc, #404]	@ (8005594 <main+0x548>)
 80053fe:	f002 f8d9 	bl	80075b4 <HAL_GPIO_WritePin>
			  	  HAL_Delay(1000);
 8005402:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005406:	f001 fe1f 	bl	8007048 <HAL_Delay>
			  	Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_01, CELL_03_LED_01 , LOW);
 800540a:	2300      	movs	r3, #0
 800540c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005410:	2121      	movs	r1, #33	@ 0x21
 8005412:	485e      	ldr	r0, [pc, #376]	@ (800558c <main+0x540>)
 8005414:	f7ff fa55 	bl	80048c2 <Expander_SetPinState>
			  	  ///////////////////////////////////////////////////////////////////

				  Set_Output_Voltage(&hi2c2, CELL_4, 3.6f);
 8005418:	ed9f 0a69 	vldr	s0, [pc, #420]	@ 80055c0 <main+0x574>
 800541c:	2103      	movs	r1, #3
 800541e:	485b      	ldr	r0, [pc, #364]	@ (800558c <main+0x540>)
 8005420:	f7ff fc10 	bl	8004c44 <Set_Output_Voltage>

				  Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_02, CELL_01_LED_01 , HIGH);
 8005424:	2301      	movs	r3, #1
 8005426:	2210      	movs	r2, #16
 8005428:	2122      	movs	r1, #34	@ 0x22
 800542a:	4858      	ldr	r0, [pc, #352]	@ (800558c <main+0x540>)
 800542c:	f7ff fa49 	bl	80048c2 <Expander_SetPinState>

				  			  HAL_GPIO_WritePin(GPIOE, CELL12_CS_04_Pin, GPIO_PIN_RESET);
 8005430:	2200      	movs	r2, #0
 8005432:	2108      	movs	r1, #8
 8005434:	4857      	ldr	r0, [pc, #348]	@ (8005594 <main+0x548>)
 8005436:	f002 f8bd 	bl	80075b4 <HAL_GPIO_WritePin>

				  		  busVoltage_04 = INA229_getVBUS_V(INA229_3);
 800543a:	4b62      	ldr	r3, [pc, #392]	@ (80055c4 <main+0x578>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4618      	mov	r0, r3
 8005440:	f7fd fd2a 	bl	8002e98 <INA229_getVBUS_V>
 8005444:	eef0 7a40 	vmov.f32	s15, s0
 8005448:	4b5f      	ldr	r3, [pc, #380]	@ (80055c8 <main+0x57c>)
 800544a:	edc3 7a00 	vstr	s15, [r3]

				  //
				  //HAL_Delay(1000);
				  		  HAL_GPIO_WritePin(GPIOE, CELL12_CS_04_Pin, GPIO_PIN_SET);
 800544e:	2201      	movs	r2, #1
 8005450:	2108      	movs	r1, #8
 8005452:	4850      	ldr	r0, [pc, #320]	@ (8005594 <main+0x548>)
 8005454:	f002 f8ae 	bl	80075b4 <HAL_GPIO_WritePin>



				  		  HAL_GPIO_WritePin(GPIOE, CELL12_CS_04_Pin, GPIO_PIN_RESET);
 8005458:	2200      	movs	r2, #0
 800545a:	2108      	movs	r1, #8
 800545c:	484d      	ldr	r0, [pc, #308]	@ (8005594 <main+0x548>)
 800545e:	f002 f8a9 	bl	80075b4 <HAL_GPIO_WritePin>
				  //
				  		  temperatureC_04 = INA229_getDIETEMP_C(INA229_3);
 8005462:	4b58      	ldr	r3, [pc, #352]	@ (80055c4 <main+0x578>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4618      	mov	r0, r3
 8005468:	f7fd fd74 	bl	8002f54 <INA229_getDIETEMP_C>
 800546c:	eef0 7a40 	vmov.f32	s15, s0
 8005470:	4b56      	ldr	r3, [pc, #344]	@ (80055cc <main+0x580>)
 8005472:	edc3 7a00 	vstr	s15, [r3]

				  //
				  //HAL_Delay(1000);
				  	  HAL_GPIO_WritePin(GPIOE, CELL12_CS_04_Pin, GPIO_PIN_SET);
 8005476:	2201      	movs	r2, #1
 8005478:	2108      	movs	r1, #8
 800547a:	4846      	ldr	r0, [pc, #280]	@ (8005594 <main+0x548>)
 800547c:	f002 f89a 	bl	80075b4 <HAL_GPIO_WritePin>
				  	HAL_Delay(10);
 8005480:	200a      	movs	r0, #10
 8005482:	f001 fde1 	bl	8007048 <HAL_Delay>
				  	Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_02, CELL_01_LED_01 , LOW);
 8005486:	2300      	movs	r3, #0
 8005488:	2210      	movs	r2, #16
 800548a:	2122      	movs	r1, #34	@ 0x22
 800548c:	483f      	ldr	r0, [pc, #252]	@ (800558c <main+0x540>)
 800548e:	f7ff fa18 	bl	80048c2 <Expander_SetPinState>
				  	  ///////////////////////////////////////////////////////////////////

					  Set_Output_Voltage(&hi2c2, CELL_5, 2.5f);
 8005492:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
 8005496:	2104      	movs	r1, #4
 8005498:	483c      	ldr	r0, [pc, #240]	@ (800558c <main+0x540>)
 800549a:	f7ff fbd3 	bl	8004c44 <Set_Output_Voltage>

					  Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_02, CELL_02_LED_01 , HIGH);
 800549e:	2301      	movs	r3, #1
 80054a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054a4:	2122      	movs	r1, #34	@ 0x22
 80054a6:	4839      	ldr	r0, [pc, #228]	@ (800558c <main+0x540>)
 80054a8:	f7ff fa0b 	bl	80048c2 <Expander_SetPinState>
					  HAL_Delay(10);
 80054ac:	200a      	movs	r0, #10
 80054ae:	f001 fdcb 	bl	8007048 <HAL_Delay>
					  			  HAL_GPIO_WritePin(GPIOE, CELL12_CS_05_Pin, GPIO_PIN_RESET);
 80054b2:	2200      	movs	r2, #0
 80054b4:	2110      	movs	r1, #16
 80054b6:	4837      	ldr	r0, [pc, #220]	@ (8005594 <main+0x548>)
 80054b8:	f002 f87c 	bl	80075b4 <HAL_GPIO_WritePin>
					  HAL_Delay(10);
 80054bc:	200a      	movs	r0, #10
 80054be:	f001 fdc3 	bl	8007048 <HAL_Delay>
					  		  busVoltage_05 = INA229_getVBUS_V(INA229_4);
 80054c2:	4b43      	ldr	r3, [pc, #268]	@ (80055d0 <main+0x584>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7fd fce6 	bl	8002e98 <INA229_getVBUS_V>
 80054cc:	eef0 7a40 	vmov.f32	s15, s0
 80054d0:	4b40      	ldr	r3, [pc, #256]	@ (80055d4 <main+0x588>)
 80054d2:	edc3 7a00 	vstr	s15, [r3]
					  		HAL_Delay(10);
 80054d6:	200a      	movs	r0, #10
 80054d8:	f001 fdb6 	bl	8007048 <HAL_Delay>
					  //
					  //HAL_Delay(1000);
					  		  HAL_GPIO_WritePin(GPIOE, CELL12_CS_05_Pin, GPIO_PIN_SET);
 80054dc:	2201      	movs	r2, #1
 80054de:	2110      	movs	r1, #16
 80054e0:	482c      	ldr	r0, [pc, #176]	@ (8005594 <main+0x548>)
 80054e2:	f002 f867 	bl	80075b4 <HAL_GPIO_WritePin>
					  		  HAL_Delay(1000);
 80054e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80054ea:	f001 fdad 	bl	8007048 <HAL_Delay>


					  		  HAL_GPIO_WritePin(GPIOE, CELL12_CS_05_Pin, GPIO_PIN_RESET);
 80054ee:	2200      	movs	r2, #0
 80054f0:	2110      	movs	r1, #16
 80054f2:	4828      	ldr	r0, [pc, #160]	@ (8005594 <main+0x548>)
 80054f4:	f002 f85e 	bl	80075b4 <HAL_GPIO_WritePin>
					  //
					  		  temperatureC_05 = INA229_getDIETEMP_C(INA229_4);
 80054f8:	4b35      	ldr	r3, [pc, #212]	@ (80055d0 <main+0x584>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7fd fd29 	bl	8002f54 <INA229_getDIETEMP_C>
 8005502:	eef0 7a40 	vmov.f32	s15, s0
 8005506:	4b34      	ldr	r3, [pc, #208]	@ (80055d8 <main+0x58c>)
 8005508:	edc3 7a00 	vstr	s15, [r3]

					  //
					  //HAL_Delay(1000);
					  	  HAL_GPIO_WritePin(GPIOE, CELL12_CS_05_Pin, GPIO_PIN_SET);
 800550c:	2201      	movs	r2, #1
 800550e:	2110      	movs	r1, #16
 8005510:	4820      	ldr	r0, [pc, #128]	@ (8005594 <main+0x548>)
 8005512:	f002 f84f 	bl	80075b4 <HAL_GPIO_WritePin>
					  	HAL_Delay(10);
 8005516:	200a      	movs	r0, #10
 8005518:	f001 fd96 	bl	8007048 <HAL_Delay>
					  	Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_02, CELL_02_LED_01 , LOW);
 800551c:	2300      	movs	r3, #0
 800551e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005522:	2122      	movs	r1, #34	@ 0x22
 8005524:	4819      	ldr	r0, [pc, #100]	@ (800558c <main+0x540>)
 8005526:	f7ff f9cc 	bl	80048c2 <Expander_SetPinState>
					  	  ///////////////////////////////////////////////////////////////////

						  Set_Output_Voltage(&hi2c2, CELL_6, 3.6f);
 800552a:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 80055c0 <main+0x574>
 800552e:	2105      	movs	r1, #5
 8005530:	4816      	ldr	r0, [pc, #88]	@ (800558c <main+0x540>)
 8005532:	f7ff fb87 	bl	8004c44 <Set_Output_Voltage>

						  Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_02, CELL_03_LED_01 , HIGH);
 8005536:	2301      	movs	r3, #1
 8005538:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800553c:	2122      	movs	r1, #34	@ 0x22
 800553e:	4813      	ldr	r0, [pc, #76]	@ (800558c <main+0x540>)
 8005540:	f7ff f9bf 	bl	80048c2 <Expander_SetPinState>
						  HAL_Delay(10);
 8005544:	200a      	movs	r0, #10
 8005546:	f001 fd7f 	bl	8007048 <HAL_Delay>
						  			  HAL_GPIO_WritePin(GPIOI, CELL12_CS_06_Pin, GPIO_PIN_RESET);
 800554a:	2200      	movs	r2, #0
 800554c:	2120      	movs	r1, #32
 800554e:	4823      	ldr	r0, [pc, #140]	@ (80055dc <main+0x590>)
 8005550:	f002 f830 	bl	80075b4 <HAL_GPIO_WritePin>
						  HAL_Delay(10);
 8005554:	200a      	movs	r0, #10
 8005556:	f001 fd77 	bl	8007048 <HAL_Delay>
						  		  busVoltage_06 = INA229_getVBUS_V(INA229_5);
 800555a:	4b21      	ldr	r3, [pc, #132]	@ (80055e0 <main+0x594>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4618      	mov	r0, r3
 8005560:	f7fd fc9a 	bl	8002e98 <INA229_getVBUS_V>
 8005564:	eef0 7a40 	vmov.f32	s15, s0
 8005568:	e03c      	b.n	80055e4 <main+0x598>
 800556a:	bf00      	nop
 800556c:	20000780 	.word	0x20000780
 8005570:	20001080 	.word	0x20001080
 8005574:	2000078a 	.word	0x2000078a
 8005578:	2000078c 	.word	0x2000078c
 800557c:	20000790 	.word	0x20000790
 8005580:	20001084 	.word	0x20001084
 8005584:	20000784 	.word	0x20000784
 8005588:	20000f7c 	.word	0x20000f7c
 800558c:	20000d74 	.word	0x20000d74
 8005590:	20000dc8 	.word	0x20000dc8
 8005594:	40021000 	.word	0x40021000
 8005598:	0800b920 	.word	0x0800b920
 800559c:	20000ca4 	.word	0x20000ca4
 80055a0:	20000ca8 	.word	0x20000ca8
 80055a4:	40533333 	.word	0x40533333
 80055a8:	0800b924 	.word	0x0800b924
 80055ac:	20000cac 	.word	0x20000cac
 80055b0:	20000cb0 	.word	0x20000cb0
 80055b4:	0800b928 	.word	0x0800b928
 80055b8:	20000cb4 	.word	0x20000cb4
 80055bc:	20000cb8 	.word	0x20000cb8
 80055c0:	40666666 	.word	0x40666666
 80055c4:	0800b92c 	.word	0x0800b92c
 80055c8:	20000cbc 	.word	0x20000cbc
 80055cc:	20000cc0 	.word	0x20000cc0
 80055d0:	0800b930 	.word	0x0800b930
 80055d4:	20000cc4 	.word	0x20000cc4
 80055d8:	20000cc8 	.word	0x20000cc8
 80055dc:	40022000 	.word	0x40022000
 80055e0:	0800b934 	.word	0x0800b934
 80055e4:	4bd8      	ldr	r3, [pc, #864]	@ (8005948 <main+0x8fc>)
 80055e6:	edc3 7a00 	vstr	s15, [r3]
						  		HAL_Delay(10);
 80055ea:	200a      	movs	r0, #10
 80055ec:	f001 fd2c 	bl	8007048 <HAL_Delay>
						  //
						  //HAL_Delay(1000);
						  		  HAL_GPIO_WritePin(GPIOI, CELL12_CS_06_Pin, GPIO_PIN_SET);
 80055f0:	2201      	movs	r2, #1
 80055f2:	2120      	movs	r1, #32
 80055f4:	48d5      	ldr	r0, [pc, #852]	@ (800594c <main+0x900>)
 80055f6:	f001 ffdd 	bl	80075b4 <HAL_GPIO_WritePin>
						  		  HAL_Delay(1000);
 80055fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80055fe:	f001 fd23 	bl	8007048 <HAL_Delay>


						  		  HAL_GPIO_WritePin(GPIOI, CELL12_CS_06_Pin, GPIO_PIN_RESET);
 8005602:	2200      	movs	r2, #0
 8005604:	2120      	movs	r1, #32
 8005606:	48d1      	ldr	r0, [pc, #836]	@ (800594c <main+0x900>)
 8005608:	f001 ffd4 	bl	80075b4 <HAL_GPIO_WritePin>
						  //
						  		  temperatureC_06 = INA229_getDIETEMP_C(INA229_5);
 800560c:	4bd0      	ldr	r3, [pc, #832]	@ (8005950 <main+0x904>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4618      	mov	r0, r3
 8005612:	f7fd fc9f 	bl	8002f54 <INA229_getDIETEMP_C>
 8005616:	eef0 7a40 	vmov.f32	s15, s0
 800561a:	4bce      	ldr	r3, [pc, #824]	@ (8005954 <main+0x908>)
 800561c:	edc3 7a00 	vstr	s15, [r3]

						  //
						  //HAL_Delay(1000);
						  	  HAL_GPIO_WritePin(GPIOI, CELL12_CS_06_Pin, GPIO_PIN_SET);
 8005620:	2201      	movs	r2, #1
 8005622:	2120      	movs	r1, #32
 8005624:	48c9      	ldr	r0, [pc, #804]	@ (800594c <main+0x900>)
 8005626:	f001 ffc5 	bl	80075b4 <HAL_GPIO_WritePin>
						  	HAL_Delay(10);
 800562a:	200a      	movs	r0, #10
 800562c:	f001 fd0c 	bl	8007048 <HAL_Delay>
						  	Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_02, CELL_03_LED_01 , LOW);
 8005630:	2300      	movs	r3, #0
 8005632:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005636:	2122      	movs	r1, #34	@ 0x22
 8005638:	48c7      	ldr	r0, [pc, #796]	@ (8005958 <main+0x90c>)
 800563a:	f7ff f942 	bl	80048c2 <Expander_SetPinState>
						  	  ///////////////////////////////////////////////////////////////////

							  Set_Output_Voltage(&hi2c2, CELL_7, 4.0f);
 800563e:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8005642:	2106      	movs	r1, #6
 8005644:	48c4      	ldr	r0, [pc, #784]	@ (8005958 <main+0x90c>)
 8005646:	f7ff fafd 	bl	8004c44 <Set_Output_Voltage>

							  Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_03, CELL_01_LED_01 , HIGH);
 800564a:	2301      	movs	r3, #1
 800564c:	2210      	movs	r2, #16
 800564e:	2123      	movs	r1, #35	@ 0x23
 8005650:	48c1      	ldr	r0, [pc, #772]	@ (8005958 <main+0x90c>)
 8005652:	f7ff f936 	bl	80048c2 <Expander_SetPinState>
							  HAL_Delay(10);
 8005656:	200a      	movs	r0, #10
 8005658:	f001 fcf6 	bl	8007048 <HAL_Delay>
							  HAL_GPIO_WritePin(CELL12_CS_07_GPIO_Port, CELL12_CS_07_Pin, GPIO_PIN_RESET);
 800565c:	2200      	movs	r2, #0
 800565e:	2140      	movs	r1, #64	@ 0x40
 8005660:	48be      	ldr	r0, [pc, #760]	@ (800595c <main+0x910>)
 8005662:	f001 ffa7 	bl	80075b4 <HAL_GPIO_WritePin>
							  HAL_Delay(10);
 8005666:	200a      	movs	r0, #10
 8005668:	f001 fcee 	bl	8007048 <HAL_Delay>
							  		  busVoltage_07 = INA229_getVBUS_V(INA229_6);
 800566c:	4bbc      	ldr	r3, [pc, #752]	@ (8005960 <main+0x914>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4618      	mov	r0, r3
 8005672:	f7fd fc11 	bl	8002e98 <INA229_getVBUS_V>
 8005676:	eef0 7a40 	vmov.f32	s15, s0
 800567a:	4bba      	ldr	r3, [pc, #744]	@ (8005964 <main+0x918>)
 800567c:	edc3 7a00 	vstr	s15, [r3]
							  		HAL_Delay(10);
 8005680:	200a      	movs	r0, #10
 8005682:	f001 fce1 	bl	8007048 <HAL_Delay>
							  //
							  //HAL_Delay(1000);
							  		HAL_GPIO_WritePin(CELL12_CS_07_GPIO_Port, CELL12_CS_07_Pin, GPIO_PIN_SET);
 8005686:	2201      	movs	r2, #1
 8005688:	2140      	movs	r1, #64	@ 0x40
 800568a:	48b4      	ldr	r0, [pc, #720]	@ (800595c <main+0x910>)
 800568c:	f001 ff92 	bl	80075b4 <HAL_GPIO_WritePin>
							  		  HAL_Delay(1000);
 8005690:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005694:	f001 fcd8 	bl	8007048 <HAL_Delay>


							  		HAL_GPIO_WritePin(CELL12_CS_07_GPIO_Port, CELL12_CS_07_Pin, GPIO_PIN_RESET);
 8005698:	2200      	movs	r2, #0
 800569a:	2140      	movs	r1, #64	@ 0x40
 800569c:	48af      	ldr	r0, [pc, #700]	@ (800595c <main+0x910>)
 800569e:	f001 ff89 	bl	80075b4 <HAL_GPIO_WritePin>
							  //
							  		  temperatureC_07 = INA229_getDIETEMP_C(INA229_6);
 80056a2:	4baf      	ldr	r3, [pc, #700]	@ (8005960 <main+0x914>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fd fc54 	bl	8002f54 <INA229_getDIETEMP_C>
 80056ac:	eef0 7a40 	vmov.f32	s15, s0
 80056b0:	4bad      	ldr	r3, [pc, #692]	@ (8005968 <main+0x91c>)
 80056b2:	edc3 7a00 	vstr	s15, [r3]

							  //
							  //HAL_Delay(1000);
							  		HAL_GPIO_WritePin(CELL12_CS_07_GPIO_Port, CELL12_CS_07_Pin, GPIO_PIN_SET);
 80056b6:	2201      	movs	r2, #1
 80056b8:	2140      	movs	r1, #64	@ 0x40
 80056ba:	48a8      	ldr	r0, [pc, #672]	@ (800595c <main+0x910>)
 80056bc:	f001 ff7a 	bl	80075b4 <HAL_GPIO_WritePin>
							  	  HAL_Delay(1000);
 80056c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80056c4:	f001 fcc0 	bl	8007048 <HAL_Delay>
							  	Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_03, CELL_01_LED_01 , LOW);
 80056c8:	2300      	movs	r3, #0
 80056ca:	2210      	movs	r2, #16
 80056cc:	2123      	movs	r1, #35	@ 0x23
 80056ce:	48a2      	ldr	r0, [pc, #648]	@ (8005958 <main+0x90c>)
 80056d0:	f7ff f8f7 	bl	80048c2 <Expander_SetPinState>

								  ////////////////////////////////////////////////////////////

								  Set_Output_Voltage(&hi2c2, CELL_8, 2.5f);
 80056d4:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
 80056d8:	2107      	movs	r1, #7
 80056da:	489f      	ldr	r0, [pc, #636]	@ (8005958 <main+0x90c>)
 80056dc:	f7ff fab2 	bl	8004c44 <Set_Output_Voltage>
					Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_03, CELL_02_LED_01 , HIGH);
 80056e0:	2301      	movs	r3, #1
 80056e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056e6:	2123      	movs	r1, #35	@ 0x23
 80056e8:	489b      	ldr	r0, [pc, #620]	@ (8005958 <main+0x90c>)
 80056ea:	f7ff f8ea 	bl	80048c2 <Expander_SetPinState>
					HAL_Delay(10);
 80056ee:	200a      	movs	r0, #10
 80056f0:	f001 fcaa 	bl	8007048 <HAL_Delay>
								  HAL_GPIO_WritePin(GPIOI, CELL12_CS_08_Pin, GPIO_PIN_RESET);
 80056f4:	2200      	movs	r2, #0
 80056f6:	2180      	movs	r1, #128	@ 0x80
 80056f8:	4894      	ldr	r0, [pc, #592]	@ (800594c <main+0x900>)
 80056fa:	f001 ff5b 	bl	80075b4 <HAL_GPIO_WritePin>
					//
							  busVoltage_08 = INA229_getVBUS_V(INA229_7);
 80056fe:	4b9b      	ldr	r3, [pc, #620]	@ (800596c <main+0x920>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4618      	mov	r0, r3
 8005704:	f7fd fbc8 	bl	8002e98 <INA229_getVBUS_V>
 8005708:	eef0 7a40 	vmov.f32	s15, s0
 800570c:	4b98      	ldr	r3, [pc, #608]	@ (8005970 <main+0x924>)
 800570e:	edc3 7a00 	vstr	s15, [r3]

					//
					//HAL_Delay(1000);
							  HAL_GPIO_WritePin(GPIOI, CELL12_CS_08_Pin, GPIO_PIN_SET);
 8005712:	2201      	movs	r2, #1
 8005714:	2180      	movs	r1, #128	@ 0x80
 8005716:	488d      	ldr	r0, [pc, #564]	@ (800594c <main+0x900>)
 8005718:	f001 ff4c 	bl	80075b4 <HAL_GPIO_WritePin>
							  HAL_Delay(10);
 800571c:	200a      	movs	r0, #10
 800571e:	f001 fc93 	bl	8007048 <HAL_Delay>


							  HAL_GPIO_WritePin(GPIOI, CELL12_CS_08_Pin, GPIO_PIN_RESET);
 8005722:	2200      	movs	r2, #0
 8005724:	2180      	movs	r1, #128	@ 0x80
 8005726:	4889      	ldr	r0, [pc, #548]	@ (800594c <main+0x900>)
 8005728:	f001 ff44 	bl	80075b4 <HAL_GPIO_WritePin>
					//
							  temperatureC_08 = INA229_getDIETEMP_C(INA229_7);
 800572c:	4b8f      	ldr	r3, [pc, #572]	@ (800596c <main+0x920>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4618      	mov	r0, r3
 8005732:	f7fd fc0f 	bl	8002f54 <INA229_getDIETEMP_C>
 8005736:	eef0 7a40 	vmov.f32	s15, s0
 800573a:	4b8e      	ldr	r3, [pc, #568]	@ (8005974 <main+0x928>)
 800573c:	edc3 7a00 	vstr	s15, [r3]

					//
					//HAL_Delay(1000);
						  HAL_GPIO_WritePin(GPIOI, CELL12_CS_08_Pin, GPIO_PIN_SET);
 8005740:	2201      	movs	r2, #1
 8005742:	2180      	movs	r1, #128	@ 0x80
 8005744:	4881      	ldr	r0, [pc, #516]	@ (800594c <main+0x900>)
 8005746:	f001 ff35 	bl	80075b4 <HAL_GPIO_WritePin>
						  HAL_Delay(1000);
 800574a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800574e:	f001 fc7b 	bl	8007048 <HAL_Delay>

						  Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_03, CELL_02_LED_01 , LOW);
 8005752:	2300      	movs	r3, #0
 8005754:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005758:	2123      	movs	r1, #35	@ 0x23
 800575a:	487f      	ldr	r0, [pc, #508]	@ (8005958 <main+0x90c>)
 800575c:	f7ff f8b1 	bl	80048c2 <Expander_SetPinState>

						  ///////////////////////////////////////////////////////////////////

						  Set_Output_Voltage(&hi2c2, CELL_9,3.6f);
 8005760:	ed9f 0a85 	vldr	s0, [pc, #532]	@ 8005978 <main+0x92c>
 8005764:	2108      	movs	r1, #8
 8005766:	487c      	ldr	r0, [pc, #496]	@ (8005958 <main+0x90c>)
 8005768:	f7ff fa6c 	bl	8004c44 <Set_Output_Voltage>

						  Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_03, CELL_03_LED_01 , HIGH);
 800576c:	2301      	movs	r3, #1
 800576e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005772:	2123      	movs	r1, #35	@ 0x23
 8005774:	4878      	ldr	r0, [pc, #480]	@ (8005958 <main+0x90c>)
 8005776:	f7ff f8a4 	bl	80048c2 <Expander_SetPinState>
						  HAL_Delay(10);
 800577a:	200a      	movs	r0, #10
 800577c:	f001 fc64 	bl	8007048 <HAL_Delay>
						  			  HAL_GPIO_WritePin(GPIOI, CELL12_CS_09_Pin, GPIO_PIN_RESET);
 8005780:	2200      	movs	r2, #0
 8005782:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005786:	4871      	ldr	r0, [pc, #452]	@ (800594c <main+0x900>)
 8005788:	f001 ff14 	bl	80075b4 <HAL_GPIO_WritePin>

						  			HAL_Delay(10);
 800578c:	200a      	movs	r0, #10
 800578e:	f001 fc5b 	bl	8007048 <HAL_Delay>
						  //
						  		  busVoltage_09 = INA229_getVBUS_V(INA229_8);
 8005792:	4b7a      	ldr	r3, [pc, #488]	@ (800597c <main+0x930>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4618      	mov	r0, r3
 8005798:	f7fd fb7e 	bl	8002e98 <INA229_getVBUS_V>
 800579c:	eef0 7a40 	vmov.f32	s15, s0
 80057a0:	4b77      	ldr	r3, [pc, #476]	@ (8005980 <main+0x934>)
 80057a2:	edc3 7a00 	vstr	s15, [r3]
						  		HAL_Delay(10);
 80057a6:	200a      	movs	r0, #10
 80057a8:	f001 fc4e 	bl	8007048 <HAL_Delay>
						  //
						  //HAL_Delay(1000);
						  		  HAL_GPIO_WritePin(GPIOI, CELL12_CS_09_Pin, GPIO_PIN_SET);
 80057ac:	2201      	movs	r2, #1
 80057ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80057b2:	4866      	ldr	r0, [pc, #408]	@ (800594c <main+0x900>)
 80057b4:	f001 fefe 	bl	80075b4 <HAL_GPIO_WritePin>
						  		HAL_Delay(10);
 80057b8:	200a      	movs	r0, #10
 80057ba:	f001 fc45 	bl	8007048 <HAL_Delay>


						  		  HAL_GPIO_WritePin(GPIOI, CELL12_CS_09_Pin, GPIO_PIN_RESET);
 80057be:	2200      	movs	r2, #0
 80057c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80057c4:	4861      	ldr	r0, [pc, #388]	@ (800594c <main+0x900>)
 80057c6:	f001 fef5 	bl	80075b4 <HAL_GPIO_WritePin>
						  //
						  		HAL_Delay(10);
 80057ca:	200a      	movs	r0, #10
 80057cc:	f001 fc3c 	bl	8007048 <HAL_Delay>
						  		  temperatureC_09 = INA229_getDIETEMP_C(INA229_8);
 80057d0:	4b6a      	ldr	r3, [pc, #424]	@ (800597c <main+0x930>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7fd fbbd 	bl	8002f54 <INA229_getDIETEMP_C>
 80057da:	eef0 7a40 	vmov.f32	s15, s0
 80057de:	4b69      	ldr	r3, [pc, #420]	@ (8005984 <main+0x938>)
 80057e0:	edc3 7a00 	vstr	s15, [r3]
						  		HAL_Delay(10);
 80057e4:	200a      	movs	r0, #10
 80057e6:	f001 fc2f 	bl	8007048 <HAL_Delay>
						  //
						  //HAL_Delay(1000);
						  	  HAL_GPIO_WritePin(GPIOI, CELL12_CS_09_Pin, GPIO_PIN_SET);
 80057ea:	2201      	movs	r2, #1
 80057ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80057f0:	4856      	ldr	r0, [pc, #344]	@ (800594c <main+0x900>)
 80057f2:	f001 fedf 	bl	80075b4 <HAL_GPIO_WritePin>
						  	  HAL_Delay(1000);
 80057f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80057fa:	f001 fc25 	bl	8007048 <HAL_Delay>

						  	Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_03, CELL_03_LED_01 , LOW);
 80057fe:	2300      	movs	r3, #0
 8005800:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005804:	2123      	movs	r1, #35	@ 0x23
 8005806:	4854      	ldr	r0, [pc, #336]	@ (8005958 <main+0x90c>)
 8005808:	f7ff f85b 	bl	80048c2 <Expander_SetPinState>

						  	  ///////////////////////////////////////////////////////////////////

							  ///////////////////////////////////////////////////////////////////

							  Set_Output_Voltage(&hi2c2, CELL_10, 4.0f);
 800580c:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8005810:	2109      	movs	r1, #9
 8005812:	4851      	ldr	r0, [pc, #324]	@ (8005958 <main+0x90c>)
 8005814:	f7ff fa16 	bl	8004c44 <Set_Output_Voltage>

							  Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_04, CELL_01_LED_01 , HIGH);
 8005818:	2301      	movs	r3, #1
 800581a:	2210      	movs	r2, #16
 800581c:	2124      	movs	r1, #36	@ 0x24
 800581e:	484e      	ldr	r0, [pc, #312]	@ (8005958 <main+0x90c>)
 8005820:	f7ff f84f 	bl	80048c2 <Expander_SetPinState>

							  			  HAL_GPIO_WritePin(GPIOI, CELL12_CS_10_Pin, GPIO_PIN_RESET);
 8005824:	2200      	movs	r2, #0
 8005826:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800582a:	4848      	ldr	r0, [pc, #288]	@ (800594c <main+0x900>)
 800582c:	f001 fec2 	bl	80075b4 <HAL_GPIO_WritePin>
							  HAL_Delay(10);
 8005830:	200a      	movs	r0, #10
 8005832:	f001 fc09 	bl	8007048 <HAL_Delay>
							  		  busVoltage_10 = INA229_getVBUS_V(INA229_9);
 8005836:	4b54      	ldr	r3, [pc, #336]	@ (8005988 <main+0x93c>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4618      	mov	r0, r3
 800583c:	f7fd fb2c 	bl	8002e98 <INA229_getVBUS_V>
 8005840:	eef0 7a40 	vmov.f32	s15, s0
 8005844:	4b51      	ldr	r3, [pc, #324]	@ (800598c <main+0x940>)
 8005846:	edc3 7a00 	vstr	s15, [r3]
							  		HAL_Delay(10);
 800584a:	200a      	movs	r0, #10
 800584c:	f001 fbfc 	bl	8007048 <HAL_Delay>
							  //
							  //HAL_Delay(1000);
							  		  HAL_GPIO_WritePin(GPIOI, CELL12_CS_10_Pin, GPIO_PIN_SET);
 8005850:	2201      	movs	r2, #1
 8005852:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005856:	483d      	ldr	r0, [pc, #244]	@ (800594c <main+0x900>)
 8005858:	f001 feac 	bl	80075b4 <HAL_GPIO_WritePin>
							  		HAL_Delay(10);
 800585c:	200a      	movs	r0, #10
 800585e:	f001 fbf3 	bl	8007048 <HAL_Delay>


							  		  HAL_GPIO_WritePin(GPIOI, CELL12_CS_10_Pin, GPIO_PIN_RESET);
 8005862:	2200      	movs	r2, #0
 8005864:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005868:	4838      	ldr	r0, [pc, #224]	@ (800594c <main+0x900>)
 800586a:	f001 fea3 	bl	80075b4 <HAL_GPIO_WritePin>
							  //
							  		  temperatureC_10 = INA229_getDIETEMP_C(INA229_9);
 800586e:	4b46      	ldr	r3, [pc, #280]	@ (8005988 <main+0x93c>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4618      	mov	r0, r3
 8005874:	f7fd fb6e 	bl	8002f54 <INA229_getDIETEMP_C>
 8005878:	eef0 7a40 	vmov.f32	s15, s0
 800587c:	4b44      	ldr	r3, [pc, #272]	@ (8005990 <main+0x944>)
 800587e:	edc3 7a00 	vstr	s15, [r3]

							  //
							  //HAL_Delay(1000);
							  	  HAL_GPIO_WritePin(GPIOI, CELL12_CS_10_Pin, GPIO_PIN_SET);
 8005882:	2201      	movs	r2, #1
 8005884:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005888:	4830      	ldr	r0, [pc, #192]	@ (800594c <main+0x900>)
 800588a:	f001 fe93 	bl	80075b4 <HAL_GPIO_WritePin>
							  	HAL_Delay(10);
 800588e:	200a      	movs	r0, #10
 8005890:	f001 fbda 	bl	8007048 <HAL_Delay>
							  	Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_04, CELL_01_LED_01 , LOW);
 8005894:	2300      	movs	r3, #0
 8005896:	2210      	movs	r2, #16
 8005898:	2124      	movs	r1, #36	@ 0x24
 800589a:	482f      	ldr	r0, [pc, #188]	@ (8005958 <main+0x90c>)
 800589c:	f7ff f811 	bl	80048c2 <Expander_SetPinState>
							  	  ///////////////////////////////////////////////////////////////////

								  Set_Output_Voltage(&hi2c2, CELL_11, 2.5f);
 80058a0:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
 80058a4:	210a      	movs	r1, #10
 80058a6:	482c      	ldr	r0, [pc, #176]	@ (8005958 <main+0x90c>)
 80058a8:	f7ff f9cc 	bl	8004c44 <Set_Output_Voltage>

								  Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_04, CELL_02_LED_01 , HIGH);
 80058ac:	2301      	movs	r3, #1
 80058ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058b2:	2124      	movs	r1, #36	@ 0x24
 80058b4:	4828      	ldr	r0, [pc, #160]	@ (8005958 <main+0x90c>)
 80058b6:	f7ff f804 	bl	80048c2 <Expander_SetPinState>
								  HAL_Delay(10);
 80058ba:	200a      	movs	r0, #10
 80058bc:	f001 fbc4 	bl	8007048 <HAL_Delay>
								  			  HAL_GPIO_WritePin(GPIOF, CELL12_CS_11_Pin, GPIO_PIN_RESET);
 80058c0:	2200      	movs	r2, #0
 80058c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80058c6:	4833      	ldr	r0, [pc, #204]	@ (8005994 <main+0x948>)
 80058c8:	f001 fe74 	bl	80075b4 <HAL_GPIO_WritePin>
								  HAL_Delay(10);
 80058cc:	200a      	movs	r0, #10
 80058ce:	f001 fbbb 	bl	8007048 <HAL_Delay>
								  		  busVoltage_11 = INA229_getVBUS_V(INA229_10);
 80058d2:	4b31      	ldr	r3, [pc, #196]	@ (8005998 <main+0x94c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7fd fade 	bl	8002e98 <INA229_getVBUS_V>
 80058dc:	eef0 7a40 	vmov.f32	s15, s0
 80058e0:	4b2e      	ldr	r3, [pc, #184]	@ (800599c <main+0x950>)
 80058e2:	edc3 7a00 	vstr	s15, [r3]
								  		HAL_Delay(10);
 80058e6:	200a      	movs	r0, #10
 80058e8:	f001 fbae 	bl	8007048 <HAL_Delay>
								  //
								  //HAL_Delay(1000);
								  		  HAL_GPIO_WritePin(GPIOF, CELL12_CS_11_Pin, GPIO_PIN_SET);
 80058ec:	2201      	movs	r2, #1
 80058ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80058f2:	4828      	ldr	r0, [pc, #160]	@ (8005994 <main+0x948>)
 80058f4:	f001 fe5e 	bl	80075b4 <HAL_GPIO_WritePin>
								  		HAL_Delay(10);
 80058f8:	200a      	movs	r0, #10
 80058fa:	f001 fba5 	bl	8007048 <HAL_Delay>


								  		  HAL_GPIO_WritePin(GPIOF, CELL12_CS_11_Pin, GPIO_PIN_RESET);
 80058fe:	2200      	movs	r2, #0
 8005900:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005904:	4823      	ldr	r0, [pc, #140]	@ (8005994 <main+0x948>)
 8005906:	f001 fe55 	bl	80075b4 <HAL_GPIO_WritePin>
								  //
								  		  temperatureC_11 = INA229_getDIETEMP_C(INA229_10);
 800590a:	4b23      	ldr	r3, [pc, #140]	@ (8005998 <main+0x94c>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4618      	mov	r0, r3
 8005910:	f7fd fb20 	bl	8002f54 <INA229_getDIETEMP_C>
 8005914:	eef0 7a40 	vmov.f32	s15, s0
 8005918:	4b21      	ldr	r3, [pc, #132]	@ (80059a0 <main+0x954>)
 800591a:	edc3 7a00 	vstr	s15, [r3]

								  //
								  //HAL_Delay(1000);
								  	  HAL_GPIO_WritePin(GPIOF, CELL12_CS_11_Pin, GPIO_PIN_SET);
 800591e:	2201      	movs	r2, #1
 8005920:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005924:	481b      	ldr	r0, [pc, #108]	@ (8005994 <main+0x948>)
 8005926:	f001 fe45 	bl	80075b4 <HAL_GPIO_WritePin>
								  	  HAL_Delay(1000);
 800592a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800592e:	f001 fb8b 	bl	8007048 <HAL_Delay>
								  	Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_04, CELL_02_LED_01 , LOW);
 8005932:	2300      	movs	r3, #0
 8005934:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005938:	2124      	movs	r1, #36	@ 0x24
 800593a:	4807      	ldr	r0, [pc, #28]	@ (8005958 <main+0x90c>)
 800593c:	f7fe ffc1 	bl	80048c2 <Expander_SetPinState>
								  	  ///////////////////////////////////////////////////////////////////

									  Set_Output_Voltage(&hi2c2, CELL_12, 3.6f);
 8005940:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8005978 <main+0x92c>
 8005944:	210b      	movs	r1, #11
 8005946:	e02d      	b.n	80059a4 <main+0x958>
 8005948:	20000ccc 	.word	0x20000ccc
 800594c:	40022000 	.word	0x40022000
 8005950:	0800b934 	.word	0x0800b934
 8005954:	20000cd0 	.word	0x20000cd0
 8005958:	20000d74 	.word	0x20000d74
 800595c:	40020800 	.word	0x40020800
 8005960:	0800b938 	.word	0x0800b938
 8005964:	20000cd4 	.word	0x20000cd4
 8005968:	20000cd8 	.word	0x20000cd8
 800596c:	0800b93c 	.word	0x0800b93c
 8005970:	20000cdc 	.word	0x20000cdc
 8005974:	20000ce0 	.word	0x20000ce0
 8005978:	40666666 	.word	0x40666666
 800597c:	0800b940 	.word	0x0800b940
 8005980:	20000ce4 	.word	0x20000ce4
 8005984:	20000ce8 	.word	0x20000ce8
 8005988:	0800b944 	.word	0x0800b944
 800598c:	20000cec 	.word	0x20000cec
 8005990:	20000cf0 	.word	0x20000cf0
 8005994:	40021400 	.word	0x40021400
 8005998:	0800b948 	.word	0x0800b948
 800599c:	20000cf4 	.word	0x20000cf4
 80059a0:	20000cf8 	.word	0x20000cf8
 80059a4:	48d4      	ldr	r0, [pc, #848]	@ (8005cf8 <main+0xcac>)
 80059a6:	f7ff f94d 	bl	8004c44 <Set_Output_Voltage>

									  Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_04, CELL_03_LED_01 , HIGH);
 80059aa:	2301      	movs	r3, #1
 80059ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80059b0:	2124      	movs	r1, #36	@ 0x24
 80059b2:	48d1      	ldr	r0, [pc, #836]	@ (8005cf8 <main+0xcac>)
 80059b4:	f7fe ff85 	bl	80048c2 <Expander_SetPinState>
									  HAL_Delay(10);
 80059b8:	200a      	movs	r0, #10
 80059ba:	f001 fb45 	bl	8007048 <HAL_Delay>
									  			  HAL_GPIO_WritePin(GPIOF, CELL12_CS_12_Pin, GPIO_PIN_RESET);
 80059be:	2200      	movs	r2, #0
 80059c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80059c4:	48cd      	ldr	r0, [pc, #820]	@ (8005cfc <main+0xcb0>)
 80059c6:	f001 fdf5 	bl	80075b4 <HAL_GPIO_WritePin>
									  HAL_Delay(10);
 80059ca:	200a      	movs	r0, #10
 80059cc:	f001 fb3c 	bl	8007048 <HAL_Delay>
									  		  busVoltage_12 = INA229_getVBUS_V(INA229_11);
 80059d0:	4bcb      	ldr	r3, [pc, #812]	@ (8005d00 <main+0xcb4>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7fd fa5f 	bl	8002e98 <INA229_getVBUS_V>
 80059da:	eef0 7a40 	vmov.f32	s15, s0
 80059de:	4bc9      	ldr	r3, [pc, #804]	@ (8005d04 <main+0xcb8>)
 80059e0:	edc3 7a00 	vstr	s15, [r3]
									  		HAL_Delay(10);
 80059e4:	200a      	movs	r0, #10
 80059e6:	f001 fb2f 	bl	8007048 <HAL_Delay>
									  //
									  //HAL_Delay(1000);
									  		  HAL_GPIO_WritePin(GPIOF, CELL12_CS_12_Pin, GPIO_PIN_SET);
 80059ea:	2201      	movs	r2, #1
 80059ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80059f0:	48c2      	ldr	r0, [pc, #776]	@ (8005cfc <main+0xcb0>)
 80059f2:	f001 fddf 	bl	80075b4 <HAL_GPIO_WritePin>
									  		HAL_Delay(10);
 80059f6:	200a      	movs	r0, #10
 80059f8:	f001 fb26 	bl	8007048 <HAL_Delay>


									  		  HAL_GPIO_WritePin(GPIOF, CELL12_CS_12_Pin, GPIO_PIN_RESET);
 80059fc:	2200      	movs	r2, #0
 80059fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005a02:	48be      	ldr	r0, [pc, #760]	@ (8005cfc <main+0xcb0>)
 8005a04:	f001 fdd6 	bl	80075b4 <HAL_GPIO_WritePin>
									  //
									  		  temperatureC_12 = INA229_getDIETEMP_C(INA229_11);
 8005a08:	4bbd      	ldr	r3, [pc, #756]	@ (8005d00 <main+0xcb4>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7fd faa1 	bl	8002f54 <INA229_getDIETEMP_C>
 8005a12:	eef0 7a40 	vmov.f32	s15, s0
 8005a16:	4bbc      	ldr	r3, [pc, #752]	@ (8005d08 <main+0xcbc>)
 8005a18:	edc3 7a00 	vstr	s15, [r3]

									  //
									  //HAL_Delay(1000);
									  	  HAL_GPIO_WritePin(GPIOF, CELL12_CS_12_Pin, GPIO_PIN_SET);
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005a22:	48b6      	ldr	r0, [pc, #728]	@ (8005cfc <main+0xcb0>)
 8005a24:	f001 fdc6 	bl	80075b4 <HAL_GPIO_WritePin>
									  	  HAL_Delay(1000);
 8005a28:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005a2c:	f001 fb0c 	bl	8007048 <HAL_Delay>
									  	Expander_SetPinState(&hi2c2, GPIO_EXPANDER_ID_04, CELL_03_LED_01 , LOW);
 8005a30:	2300      	movs	r3, #0
 8005a32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005a36:	2124      	movs	r1, #36	@ 0x24
 8005a38:	48af      	ldr	r0, [pc, #700]	@ (8005cf8 <main+0xcac>)
 8005a3a:	f7fe ff42 	bl	80048c2 <Expander_SetPinState>
									  	  ///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
									  	/////////////////////////////////////////////////////////////

										  Set_Output_Voltage(&hi2c3, CELL_1, 4.0f);
 8005a3e:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8005a42:	2100      	movs	r1, #0
 8005a44:	48b1      	ldr	r0, [pc, #708]	@ (8005d0c <main+0xcc0>)
 8005a46:	f7ff f8fd 	bl	8004c44 <Set_Output_Voltage>
									Expander_SetPinState(&hi2c3, GPIO_EXPANDER_ID_01, CELL_01_LED_01 , HIGH);
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	2210      	movs	r2, #16
 8005a4e:	2121      	movs	r1, #33	@ 0x21
 8005a50:	48ae      	ldr	r0, [pc, #696]	@ (8005d0c <main+0xcc0>)
 8005a52:	f7fe ff36 	bl	80048c2 <Expander_SetPinState>

										  HAL_GPIO_WritePin(GPIOB, CELL11_CS_01_Pin, GPIO_PIN_RESET);
 8005a56:	2200      	movs	r2, #0
 8005a58:	2101      	movs	r1, #1
 8005a5a:	48ad      	ldr	r0, [pc, #692]	@ (8005d10 <main+0xcc4>)
 8005a5c:	f001 fdaa 	bl	80075b4 <HAL_GPIO_WritePin>
									//
									  busVoltage_13 = INA229_getVBUS_V(INA229_13);
 8005a60:	4bac      	ldr	r3, [pc, #688]	@ (8005d14 <main+0xcc8>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7fd fa17 	bl	8002e98 <INA229_getVBUS_V>
 8005a6a:	eef0 7a40 	vmov.f32	s15, s0
 8005a6e:	4baa      	ldr	r3, [pc, #680]	@ (8005d18 <main+0xccc>)
 8005a70:	edc3 7a00 	vstr	s15, [r3]

									//
									//HAL_Delay(1000);
									  HAL_GPIO_WritePin(GPIOB, CELL11_CS_01_Pin, GPIO_PIN_SET);
 8005a74:	2201      	movs	r2, #1
 8005a76:	2101      	movs	r1, #1
 8005a78:	48a5      	ldr	r0, [pc, #660]	@ (8005d10 <main+0xcc4>)
 8005a7a:	f001 fd9b 	bl	80075b4 <HAL_GPIO_WritePin>



									  HAL_GPIO_WritePin(GPIOB, CELL11_CS_01_Pin, GPIO_PIN_RESET);
 8005a7e:	2200      	movs	r2, #0
 8005a80:	2101      	movs	r1, #1
 8005a82:	48a3      	ldr	r0, [pc, #652]	@ (8005d10 <main+0xcc4>)
 8005a84:	f001 fd96 	bl	80075b4 <HAL_GPIO_WritePin>
									//
									  temperatureC_13 = INA229_getDIETEMP_C(INA229_13);
 8005a88:	4ba2      	ldr	r3, [pc, #648]	@ (8005d14 <main+0xcc8>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7fd fa61 	bl	8002f54 <INA229_getDIETEMP_C>
 8005a92:	eef0 7a40 	vmov.f32	s15, s0
 8005a96:	4ba1      	ldr	r3, [pc, #644]	@ (8005d1c <main+0xcd0>)
 8005a98:	edc3 7a00 	vstr	s15, [r3]

									//
									//HAL_Delay(1000);
									HAL_GPIO_WritePin(GPIOB, CELL11_CS_01_Pin, GPIO_PIN_SET);
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	2101      	movs	r1, #1
 8005aa0:	489b      	ldr	r0, [pc, #620]	@ (8005d10 <main+0xcc4>)
 8005aa2:	f001 fd87 	bl	80075b4 <HAL_GPIO_WritePin>
									HAL_Delay(1000);
 8005aa6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005aaa:	f001 facd 	bl	8007048 <HAL_Delay>

									Expander_SetPinState(&hi2c3, GPIO_EXPANDER_ID_01, CELL_01_LED_01 , LOW);
 8005aae:	2300      	movs	r3, #0
 8005ab0:	2210      	movs	r2, #16
 8005ab2:	2121      	movs	r1, #33	@ 0x21
 8005ab4:	4895      	ldr	r0, [pc, #596]	@ (8005d0c <main+0xcc0>)
 8005ab6:	f7fe ff04 	bl	80048c2 <Expander_SetPinState>

									///////////////////////////////////////////////////////////////////
									  Set_Output_Voltage(&hi2c3, CELL_2, 4.0f);
 8005aba:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8005abe:	2101      	movs	r1, #1
 8005ac0:	4892      	ldr	r0, [pc, #584]	@ (8005d0c <main+0xcc0>)
 8005ac2:	f7ff f8bf 	bl	8004c44 <Set_Output_Voltage>
								Expander_SetPinState(&hi2c3, GPIO_EXPANDER_ID_01, CELL_02_LED_01 , HIGH);
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005acc:	2121      	movs	r1, #33	@ 0x21
 8005ace:	488f      	ldr	r0, [pc, #572]	@ (8005d0c <main+0xcc0>)
 8005ad0:	f7fe fef7 	bl	80048c2 <Expander_SetPinState>

									  HAL_GPIO_WritePin(GPIOB, CELL11_CS_02_Pin, GPIO_PIN_RESET);
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	2102      	movs	r1, #2
 8005ad8:	488d      	ldr	r0, [pc, #564]	@ (8005d10 <main+0xcc4>)
 8005ada:	f001 fd6b 	bl	80075b4 <HAL_GPIO_WritePin>
								//
								  busVoltage_14 = INA229_getVBUS_V(INA229_14);
 8005ade:	4b90      	ldr	r3, [pc, #576]	@ (8005d20 <main+0xcd4>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7fd f9d8 	bl	8002e98 <INA229_getVBUS_V>
 8005ae8:	eef0 7a40 	vmov.f32	s15, s0
 8005aec:	4b8d      	ldr	r3, [pc, #564]	@ (8005d24 <main+0xcd8>)
 8005aee:	edc3 7a00 	vstr	s15, [r3]

								//
								//HAL_Delay(1000);
								  HAL_GPIO_WritePin(GPIOB, CELL11_CS_02_Pin, GPIO_PIN_SET);
 8005af2:	2201      	movs	r2, #1
 8005af4:	2102      	movs	r1, #2
 8005af6:	4886      	ldr	r0, [pc, #536]	@ (8005d10 <main+0xcc4>)
 8005af8:	f001 fd5c 	bl	80075b4 <HAL_GPIO_WritePin>



								  HAL_GPIO_WritePin(GPIOB, CELL11_CS_02_Pin, GPIO_PIN_RESET);
 8005afc:	2200      	movs	r2, #0
 8005afe:	2102      	movs	r1, #2
 8005b00:	4883      	ldr	r0, [pc, #524]	@ (8005d10 <main+0xcc4>)
 8005b02:	f001 fd57 	bl	80075b4 <HAL_GPIO_WritePin>
								//
								  temperatureC_14 = INA229_getDIETEMP_C(INA229_14);
 8005b06:	4b86      	ldr	r3, [pc, #536]	@ (8005d20 <main+0xcd4>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7fd fa22 	bl	8002f54 <INA229_getDIETEMP_C>
 8005b10:	eef0 7a40 	vmov.f32	s15, s0
 8005b14:	4b84      	ldr	r3, [pc, #528]	@ (8005d28 <main+0xcdc>)
 8005b16:	edc3 7a00 	vstr	s15, [r3]

								//
								//HAL_Delay(1000);
								HAL_GPIO_WritePin(GPIOB, CELL11_CS_02_Pin, GPIO_PIN_SET);
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	2102      	movs	r1, #2
 8005b1e:	487c      	ldr	r0, [pc, #496]	@ (8005d10 <main+0xcc4>)
 8005b20:	f001 fd48 	bl	80075b4 <HAL_GPIO_WritePin>
								HAL_Delay(1000);
 8005b24:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005b28:	f001 fa8e 	bl	8007048 <HAL_Delay>

								Expander_SetPinState(&hi2c3, GPIO_EXPANDER_ID_01, CELL_02_LED_01 , LOW);
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b32:	2121      	movs	r1, #33	@ 0x21
 8005b34:	4875      	ldr	r0, [pc, #468]	@ (8005d0c <main+0xcc0>)
 8005b36:	f7fe fec4 	bl	80048c2 <Expander_SetPinState>



									  	/////////////////////////////////////////////////////////////
								///////////////////////////////////////////////////////////////////
								  Set_Output_Voltage(&hi2c3, CELL_3, 4.0f);
 8005b3a:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8005b3e:	2102      	movs	r1, #2
 8005b40:	4872      	ldr	r0, [pc, #456]	@ (8005d0c <main+0xcc0>)
 8005b42:	f7ff f87f 	bl	8004c44 <Set_Output_Voltage>
							Expander_SetPinState(&hi2c3, GPIO_EXPANDER_ID_01, CELL_03_LED_01 , HIGH);
 8005b46:	2301      	movs	r3, #1
 8005b48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005b4c:	2121      	movs	r1, #33	@ 0x21
 8005b4e:	486f      	ldr	r0, [pc, #444]	@ (8005d0c <main+0xcc0>)
 8005b50:	f7fe feb7 	bl	80048c2 <Expander_SetPinState>

								  HAL_GPIO_WritePin(GPIOF, CELL11_CS_03_Pin, GPIO_PIN_RESET);
 8005b54:	2200      	movs	r2, #0
 8005b56:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005b5a:	4868      	ldr	r0, [pc, #416]	@ (8005cfc <main+0xcb0>)
 8005b5c:	f001 fd2a 	bl	80075b4 <HAL_GPIO_WritePin>
							//
							  busVoltage_15 = INA229_getVBUS_V(INA229_15);
 8005b60:	4b72      	ldr	r3, [pc, #456]	@ (8005d2c <main+0xce0>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7fd f997 	bl	8002e98 <INA229_getVBUS_V>
 8005b6a:	eef0 7a40 	vmov.f32	s15, s0
 8005b6e:	4b70      	ldr	r3, [pc, #448]	@ (8005d30 <main+0xce4>)
 8005b70:	edc3 7a00 	vstr	s15, [r3]

							//
							//HAL_Delay(1000);
							  HAL_GPIO_WritePin(GPIOF, CELL11_CS_03_Pin, GPIO_PIN_SET);
 8005b74:	2201      	movs	r2, #1
 8005b76:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005b7a:	4860      	ldr	r0, [pc, #384]	@ (8005cfc <main+0xcb0>)
 8005b7c:	f001 fd1a 	bl	80075b4 <HAL_GPIO_WritePin>



							  HAL_GPIO_WritePin(GPIOF, CELL11_CS_03_Pin, GPIO_PIN_RESET);
 8005b80:	2200      	movs	r2, #0
 8005b82:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005b86:	485d      	ldr	r0, [pc, #372]	@ (8005cfc <main+0xcb0>)
 8005b88:	f001 fd14 	bl	80075b4 <HAL_GPIO_WritePin>
							//
							  temperatureC_15 = INA229_getDIETEMP_C(INA229_15);
 8005b8c:	4b67      	ldr	r3, [pc, #412]	@ (8005d2c <main+0xce0>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7fd f9df 	bl	8002f54 <INA229_getDIETEMP_C>
 8005b96:	eef0 7a40 	vmov.f32	s15, s0
 8005b9a:	4b66      	ldr	r3, [pc, #408]	@ (8005d34 <main+0xce8>)
 8005b9c:	edc3 7a00 	vstr	s15, [r3]

							//
							//HAL_Delay(1000);
							HAL_GPIO_WritePin(GPIOF, CELL11_CS_03_Pin, GPIO_PIN_SET);
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005ba6:	4855      	ldr	r0, [pc, #340]	@ (8005cfc <main+0xcb0>)
 8005ba8:	f001 fd04 	bl	80075b4 <HAL_GPIO_WritePin>
							HAL_Delay(1000);
 8005bac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005bb0:	f001 fa4a 	bl	8007048 <HAL_Delay>

							Expander_SetPinState(&hi2c3, GPIO_EXPANDER_ID_01, CELL_03_LED_01 , LOW);
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005bba:	2121      	movs	r1, #33	@ 0x21
 8005bbc:	4853      	ldr	r0, [pc, #332]	@ (8005d0c <main+0xcc0>)
 8005bbe:	f7fe fe80 	bl	80048c2 <Expander_SetPinState>

								  	/////////////////////////////////////////////////////////////

						  	/////////////////////////////////////////////////////////////

							  Set_Output_Voltage(&hi2c3, CELL_4, 3.3f);
 8005bc2:	ed9f 0a5d 	vldr	s0, [pc, #372]	@ 8005d38 <main+0xcec>
 8005bc6:	2103      	movs	r1, #3
 8005bc8:	4850      	ldr	r0, [pc, #320]	@ (8005d0c <main+0xcc0>)
 8005bca:	f7ff f83b 	bl	8004c44 <Set_Output_Voltage>
						Expander_SetPinState(&hi2c3, GPIO_EXPANDER_ID_02, CELL_01_LED_01 , HIGH);
 8005bce:	2301      	movs	r3, #1
 8005bd0:	2210      	movs	r2, #16
 8005bd2:	2122      	movs	r1, #34	@ 0x22
 8005bd4:	484d      	ldr	r0, [pc, #308]	@ (8005d0c <main+0xcc0>)
 8005bd6:	f7fe fe74 	bl	80048c2 <Expander_SetPinState>

							  HAL_GPIO_WritePin(GPIOF, CELL11_CS_04_Pin, GPIO_PIN_RESET);
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005be0:	4846      	ldr	r0, [pc, #280]	@ (8005cfc <main+0xcb0>)
 8005be2:	f001 fce7 	bl	80075b4 <HAL_GPIO_WritePin>
						//
						  busVoltage_16 = INA229_getVBUS_V(INA229_16);
 8005be6:	4b55      	ldr	r3, [pc, #340]	@ (8005d3c <main+0xcf0>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7fd f954 	bl	8002e98 <INA229_getVBUS_V>
 8005bf0:	eef0 7a40 	vmov.f32	s15, s0
 8005bf4:	4b52      	ldr	r3, [pc, #328]	@ (8005d40 <main+0xcf4>)
 8005bf6:	edc3 7a00 	vstr	s15, [r3]

						//
						//HAL_Delay(1000);
						  HAL_GPIO_WritePin(GPIOF, CELL11_CS_04_Pin, GPIO_PIN_SET);
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005c00:	483e      	ldr	r0, [pc, #248]	@ (8005cfc <main+0xcb0>)
 8005c02:	f001 fcd7 	bl	80075b4 <HAL_GPIO_WritePin>



						  HAL_GPIO_WritePin(GPIOF, CELL11_CS_04_Pin, GPIO_PIN_RESET);
 8005c06:	2200      	movs	r2, #0
 8005c08:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005c0c:	483b      	ldr	r0, [pc, #236]	@ (8005cfc <main+0xcb0>)
 8005c0e:	f001 fcd1 	bl	80075b4 <HAL_GPIO_WritePin>
						//
						  temperatureC_16 = INA229_getDIETEMP_C(INA229_16);
 8005c12:	4b4a      	ldr	r3, [pc, #296]	@ (8005d3c <main+0xcf0>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fd f99c 	bl	8002f54 <INA229_getDIETEMP_C>
 8005c1c:	eef0 7a40 	vmov.f32	s15, s0
 8005c20:	4b48      	ldr	r3, [pc, #288]	@ (8005d44 <main+0xcf8>)
 8005c22:	edc3 7a00 	vstr	s15, [r3]

						//
						//HAL_Delay(1000);
						HAL_GPIO_WritePin(GPIOF, CELL11_CS_04_Pin, GPIO_PIN_SET);
 8005c26:	2201      	movs	r2, #1
 8005c28:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005c2c:	4833      	ldr	r0, [pc, #204]	@ (8005cfc <main+0xcb0>)
 8005c2e:	f001 fcc1 	bl	80075b4 <HAL_GPIO_WritePin>
						HAL_Delay(1000);
 8005c32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005c36:	f001 fa07 	bl	8007048 <HAL_Delay>

						Expander_SetPinState(&hi2c3, GPIO_EXPANDER_ID_02, CELL_01_LED_01 , LOW);
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	2210      	movs	r2, #16
 8005c3e:	2122      	movs	r1, #34	@ 0x22
 8005c40:	4832      	ldr	r0, [pc, #200]	@ (8005d0c <main+0xcc0>)
 8005c42:	f7fe fe3e 	bl	80048c2 <Expander_SetPinState>

						///////////////////////////////////////////////////////////////////
						  Set_Output_Voltage(&hi2c3, CELL_5, 3.3f);
 8005c46:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 8005d38 <main+0xcec>
 8005c4a:	2104      	movs	r1, #4
 8005c4c:	482f      	ldr	r0, [pc, #188]	@ (8005d0c <main+0xcc0>)
 8005c4e:	f7fe fff9 	bl	8004c44 <Set_Output_Voltage>
					Expander_SetPinState(&hi2c3, GPIO_EXPANDER_ID_02, CELL_02_LED_01 , HIGH);
 8005c52:	2301      	movs	r3, #1
 8005c54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c58:	2122      	movs	r1, #34	@ 0x22
 8005c5a:	482c      	ldr	r0, [pc, #176]	@ (8005d0c <main+0xcc0>)
 8005c5c:	f7fe fe31 	bl	80048c2 <Expander_SetPinState>

						  HAL_GPIO_WritePin(GPIOF, CELL11_CS_05_Pin, GPIO_PIN_RESET);
 8005c60:	2200      	movs	r2, #0
 8005c62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005c66:	4825      	ldr	r0, [pc, #148]	@ (8005cfc <main+0xcb0>)
 8005c68:	f001 fca4 	bl	80075b4 <HAL_GPIO_WritePin>
					//
					  busVoltage_17 = INA229_getVBUS_V(INA229_17);
 8005c6c:	4b36      	ldr	r3, [pc, #216]	@ (8005d48 <main+0xcfc>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7fd f911 	bl	8002e98 <INA229_getVBUS_V>
 8005c76:	eef0 7a40 	vmov.f32	s15, s0
 8005c7a:	4b34      	ldr	r3, [pc, #208]	@ (8005d4c <main+0xd00>)
 8005c7c:	edc3 7a00 	vstr	s15, [r3]

					//
					//HAL_Delay(1000);
					  HAL_GPIO_WritePin(GPIOF, CELL11_CS_05_Pin, GPIO_PIN_SET);
 8005c80:	2201      	movs	r2, #1
 8005c82:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005c86:	481d      	ldr	r0, [pc, #116]	@ (8005cfc <main+0xcb0>)
 8005c88:	f001 fc94 	bl	80075b4 <HAL_GPIO_WritePin>



					  HAL_GPIO_WritePin(GPIOF, CELL11_CS_05_Pin, GPIO_PIN_RESET);
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005c92:	481a      	ldr	r0, [pc, #104]	@ (8005cfc <main+0xcb0>)
 8005c94:	f001 fc8e 	bl	80075b4 <HAL_GPIO_WritePin>
					//
					  temperatureC_17 = INA229_getDIETEMP_C(INA229_17);
 8005c98:	4b2b      	ldr	r3, [pc, #172]	@ (8005d48 <main+0xcfc>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7fd f959 	bl	8002f54 <INA229_getDIETEMP_C>
 8005ca2:	eef0 7a40 	vmov.f32	s15, s0
 8005ca6:	4b2a      	ldr	r3, [pc, #168]	@ (8005d50 <main+0xd04>)
 8005ca8:	edc3 7a00 	vstr	s15, [r3]

					//
					//HAL_Delay(1000);
					HAL_GPIO_WritePin(GPIOF, CELL11_CS_05_Pin, GPIO_PIN_SET);
 8005cac:	2201      	movs	r2, #1
 8005cae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005cb2:	4812      	ldr	r0, [pc, #72]	@ (8005cfc <main+0xcb0>)
 8005cb4:	f001 fc7e 	bl	80075b4 <HAL_GPIO_WritePin>
					HAL_Delay(1000);
 8005cb8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005cbc:	f001 f9c4 	bl	8007048 <HAL_Delay>

					Expander_SetPinState(&hi2c3, GPIO_EXPANDER_ID_02, CELL_02_LED_01 , LOW);
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cc6:	2122      	movs	r1, #34	@ 0x22
 8005cc8:	4810      	ldr	r0, [pc, #64]	@ (8005d0c <main+0xcc0>)
 8005cca:	f7fe fdfa 	bl	80048c2 <Expander_SetPinState>



						  	/////////////////////////////////////////////////////////////
					///////////////////////////////////////////////////////////////////
					  Set_Output_Voltage(&hi2c3, CELL_6, 3.3f);
 8005cce:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 8005d38 <main+0xcec>
 8005cd2:	2105      	movs	r1, #5
 8005cd4:	480d      	ldr	r0, [pc, #52]	@ (8005d0c <main+0xcc0>)
 8005cd6:	f7fe ffb5 	bl	8004c44 <Set_Output_Voltage>
				Expander_SetPinState(&hi2c3, GPIO_EXPANDER_ID_02, CELL_03_LED_01 , HIGH);
 8005cda:	2301      	movs	r3, #1
 8005cdc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005ce0:	2122      	movs	r1, #34	@ 0x22
 8005ce2:	480a      	ldr	r0, [pc, #40]	@ (8005d0c <main+0xcc0>)
 8005ce4:	f7fe fded 	bl	80048c2 <Expander_SetPinState>

					  HAL_GPIO_WritePin(GPIOF, CELL11_CS_06_Pin, GPIO_PIN_RESET);
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005cee:	4803      	ldr	r0, [pc, #12]	@ (8005cfc <main+0xcb0>)
 8005cf0:	f001 fc60 	bl	80075b4 <HAL_GPIO_WritePin>
 8005cf4:	e02e      	b.n	8005d54 <main+0xd08>
 8005cf6:	bf00      	nop
 8005cf8:	20000d74 	.word	0x20000d74
 8005cfc:	40021400 	.word	0x40021400
 8005d00:	0800b94c 	.word	0x0800b94c
 8005d04:	20000cfc 	.word	0x20000cfc
 8005d08:	20000d00 	.word	0x20000d00
 8005d0c:	20000dc8 	.word	0x20000dc8
 8005d10:	40020400 	.word	0x40020400
 8005d14:	0800b954 	.word	0x0800b954
 8005d18:	20000d04 	.word	0x20000d04
 8005d1c:	20000d08 	.word	0x20000d08
 8005d20:	0800b958 	.word	0x0800b958
 8005d24:	20000d0c 	.word	0x20000d0c
 8005d28:	20000d10 	.word	0x20000d10
 8005d2c:	0800b95c 	.word	0x0800b95c
 8005d30:	20000d14 	.word	0x20000d14
 8005d34:	20000d18 	.word	0x20000d18
 8005d38:	40533333 	.word	0x40533333
 8005d3c:	0800b960 	.word	0x0800b960
 8005d40:	20000d1c 	.word	0x20000d1c
 8005d44:	20000d20 	.word	0x20000d20
 8005d48:	0800b964 	.word	0x0800b964
 8005d4c:	20000d24 	.word	0x20000d24
 8005d50:	20000d28 	.word	0x20000d28
				//
				  busVoltage_18 = INA229_getVBUS_V(INA229_18);
 8005d54:	4bd3      	ldr	r3, [pc, #844]	@ (80060a4 <main+0x1058>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f7fd f89d 	bl	8002e98 <INA229_getVBUS_V>
 8005d5e:	eef0 7a40 	vmov.f32	s15, s0
 8005d62:	4bd1      	ldr	r3, [pc, #836]	@ (80060a8 <main+0x105c>)
 8005d64:	edc3 7a00 	vstr	s15, [r3]

				//
				//HAL_Delay(1000);
				  HAL_GPIO_WritePin(GPIOF, CELL11_CS_06_Pin, GPIO_PIN_SET);
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005d6e:	48cf      	ldr	r0, [pc, #828]	@ (80060ac <main+0x1060>)
 8005d70:	f001 fc20 	bl	80075b4 <HAL_GPIO_WritePin>



				  HAL_GPIO_WritePin(GPIOF, CELL11_CS_06_Pin, GPIO_PIN_RESET);
 8005d74:	2200      	movs	r2, #0
 8005d76:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005d7a:	48cc      	ldr	r0, [pc, #816]	@ (80060ac <main+0x1060>)
 8005d7c:	f001 fc1a 	bl	80075b4 <HAL_GPIO_WritePin>
				//
				  temperatureC_18 = INA229_getDIETEMP_C(INA229_18);
 8005d80:	4bc8      	ldr	r3, [pc, #800]	@ (80060a4 <main+0x1058>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7fd f8e5 	bl	8002f54 <INA229_getDIETEMP_C>
 8005d8a:	eef0 7a40 	vmov.f32	s15, s0
 8005d8e:	4bc8      	ldr	r3, [pc, #800]	@ (80060b0 <main+0x1064>)
 8005d90:	edc3 7a00 	vstr	s15, [r3]

				//
				//HAL_Delay(1000);
				HAL_GPIO_WritePin(GPIOF, CELL11_CS_06_Pin, GPIO_PIN_SET);
 8005d94:	2201      	movs	r2, #1
 8005d96:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005d9a:	48c4      	ldr	r0, [pc, #784]	@ (80060ac <main+0x1060>)
 8005d9c:	f001 fc0a 	bl	80075b4 <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 8005da0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005da4:	f001 f950 	bl	8007048 <HAL_Delay>

				Expander_SetPinState(&hi2c3, GPIO_EXPANDER_ID_02, CELL_03_LED_01 , LOW);
 8005da8:	2300      	movs	r3, #0
 8005daa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005dae:	2122      	movs	r1, #34	@ 0x22
 8005db0:	48c0      	ldr	r0, [pc, #768]	@ (80060b4 <main+0x1068>)
 8005db2:	f7fe fd86 	bl	80048c2 <Expander_SetPinState>
			  	/////////////////////////////////////////////////////////////

				  Set_Output_Voltage(&hi2c3, CELL_7, 4.0f);
 8005db6:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8005dba:	2106      	movs	r1, #6
 8005dbc:	48bd      	ldr	r0, [pc, #756]	@ (80060b4 <main+0x1068>)
 8005dbe:	f7fe ff41 	bl	8004c44 <Set_Output_Voltage>
			Expander_SetPinState(&hi2c3, GPIO_EXPANDER_ID_03, CELL_01_LED_01 , HIGH);
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	2210      	movs	r2, #16
 8005dc6:	2123      	movs	r1, #35	@ 0x23
 8005dc8:	48ba      	ldr	r0, [pc, #744]	@ (80060b4 <main+0x1068>)
 8005dca:	f7fe fd7a 	bl	80048c2 <Expander_SetPinState>

				  HAL_GPIO_WritePin(GPIOF, CELL11_CS_07_Pin, GPIO_PIN_RESET);
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005dd4:	48b5      	ldr	r0, [pc, #724]	@ (80060ac <main+0x1060>)
 8005dd6:	f001 fbed 	bl	80075b4 <HAL_GPIO_WritePin>
			//
			  busVoltage_19 = INA229_getVBUS_V(INA229_19);
 8005dda:	4bb7      	ldr	r3, [pc, #732]	@ (80060b8 <main+0x106c>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7fd f85a 	bl	8002e98 <INA229_getVBUS_V>
 8005de4:	eef0 7a40 	vmov.f32	s15, s0
 8005de8:	4bb4      	ldr	r3, [pc, #720]	@ (80060bc <main+0x1070>)
 8005dea:	edc3 7a00 	vstr	s15, [r3]

			//
			//HAL_Delay(1000);
			  HAL_GPIO_WritePin(GPIOF, CELL11_CS_07_Pin, GPIO_PIN_SET);
 8005dee:	2201      	movs	r2, #1
 8005df0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005df4:	48ad      	ldr	r0, [pc, #692]	@ (80060ac <main+0x1060>)
 8005df6:	f001 fbdd 	bl	80075b4 <HAL_GPIO_WritePin>



			  HAL_GPIO_WritePin(GPIOF, CELL11_CS_07_Pin, GPIO_PIN_RESET);
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e00:	48aa      	ldr	r0, [pc, #680]	@ (80060ac <main+0x1060>)
 8005e02:	f001 fbd7 	bl	80075b4 <HAL_GPIO_WritePin>
			//
			  temperatureC_19 = INA229_getDIETEMP_C(INA229_19);
 8005e06:	4bac      	ldr	r3, [pc, #688]	@ (80060b8 <main+0x106c>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7fd f8a2 	bl	8002f54 <INA229_getDIETEMP_C>
 8005e10:	eef0 7a40 	vmov.f32	s15, s0
 8005e14:	4baa      	ldr	r3, [pc, #680]	@ (80060c0 <main+0x1074>)
 8005e16:	edc3 7a00 	vstr	s15, [r3]

			//
			//HAL_Delay(1000);
			HAL_GPIO_WritePin(GPIOF, CELL11_CS_07_Pin, GPIO_PIN_SET);
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e20:	48a2      	ldr	r0, [pc, #648]	@ (80060ac <main+0x1060>)
 8005e22:	f001 fbc7 	bl	80075b4 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8005e26:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005e2a:	f001 f90d 	bl	8007048 <HAL_Delay>

			Expander_SetPinState(&hi2c3, GPIO_EXPANDER_ID_03, CELL_01_LED_01 , LOW);
 8005e2e:	2300      	movs	r3, #0
 8005e30:	2210      	movs	r2, #16
 8005e32:	2123      	movs	r1, #35	@ 0x23
 8005e34:	489f      	ldr	r0, [pc, #636]	@ (80060b4 <main+0x1068>)
 8005e36:	f7fe fd44 	bl	80048c2 <Expander_SetPinState>

			///////////////////////////////////////////////////////////////////
			  Set_Output_Voltage(&hi2c3, CELL_8, 4.0f);
 8005e3a:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8005e3e:	2107      	movs	r1, #7
 8005e40:	489c      	ldr	r0, [pc, #624]	@ (80060b4 <main+0x1068>)
 8005e42:	f7fe feff 	bl	8004c44 <Set_Output_Voltage>
		Expander_SetPinState(&hi2c3, GPIO_EXPANDER_ID_03, CELL_02_LED_01 , HIGH);
 8005e46:	2301      	movs	r3, #1
 8005e48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e4c:	2123      	movs	r1, #35	@ 0x23
 8005e4e:	4899      	ldr	r0, [pc, #612]	@ (80060b4 <main+0x1068>)
 8005e50:	f7fe fd37 	bl	80048c2 <Expander_SetPinState>

			  HAL_GPIO_WritePin(GPIOG, CELL11_CS_08_Pin, GPIO_PIN_RESET);
 8005e54:	2200      	movs	r2, #0
 8005e56:	2101      	movs	r1, #1
 8005e58:	489a      	ldr	r0, [pc, #616]	@ (80060c4 <main+0x1078>)
 8005e5a:	f001 fbab 	bl	80075b4 <HAL_GPIO_WritePin>
		//
		  busVoltage_20 = INA229_getVBUS_V(INA229_20);
 8005e5e:	4b9a      	ldr	r3, [pc, #616]	@ (80060c8 <main+0x107c>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7fd f818 	bl	8002e98 <INA229_getVBUS_V>
 8005e68:	eef0 7a40 	vmov.f32	s15, s0
 8005e6c:	4b97      	ldr	r3, [pc, #604]	@ (80060cc <main+0x1080>)
 8005e6e:	edc3 7a00 	vstr	s15, [r3]

		//
		//HAL_Delay(1000);
		  HAL_GPIO_WritePin(GPIOG, CELL11_CS_05_Pin, GPIO_PIN_SET);
 8005e72:	2201      	movs	r2, #1
 8005e74:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005e78:	4892      	ldr	r0, [pc, #584]	@ (80060c4 <main+0x1078>)
 8005e7a:	f001 fb9b 	bl	80075b4 <HAL_GPIO_WritePin>



		  HAL_GPIO_WritePin(GPIOG, CELL11_CS_08_Pin, GPIO_PIN_RESET);
 8005e7e:	2200      	movs	r2, #0
 8005e80:	2101      	movs	r1, #1
 8005e82:	4890      	ldr	r0, [pc, #576]	@ (80060c4 <main+0x1078>)
 8005e84:	f001 fb96 	bl	80075b4 <HAL_GPIO_WritePin>
		//
		  temperatureC_20 = INA229_getDIETEMP_C(INA229_20);
 8005e88:	4b8f      	ldr	r3, [pc, #572]	@ (80060c8 <main+0x107c>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f7fd f861 	bl	8002f54 <INA229_getDIETEMP_C>
 8005e92:	eef0 7a40 	vmov.f32	s15, s0
 8005e96:	4b8e      	ldr	r3, [pc, #568]	@ (80060d0 <main+0x1084>)
 8005e98:	edc3 7a00 	vstr	s15, [r3]

		//
		//HAL_Delay(1000);
		HAL_GPIO_WritePin(GPIOG, CELL11_CS_08_Pin, GPIO_PIN_SET);
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	2101      	movs	r1, #1
 8005ea0:	4888      	ldr	r0, [pc, #544]	@ (80060c4 <main+0x1078>)
 8005ea2:	f001 fb87 	bl	80075b4 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8005ea6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005eaa:	f001 f8cd 	bl	8007048 <HAL_Delay>

		Expander_SetPinState(&hi2c3, GPIO_EXPANDER_ID_03, CELL_02_LED_01 , LOW);
 8005eae:	2300      	movs	r3, #0
 8005eb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005eb4:	2123      	movs	r1, #35	@ 0x23
 8005eb6:	487f      	ldr	r0, [pc, #508]	@ (80060b4 <main+0x1068>)
 8005eb8:	f7fe fd03 	bl	80048c2 <Expander_SetPinState>



			  	/////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////
		  Set_Output_Voltage(&hi2c3, CELL_9, 4.0f);
 8005ebc:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8005ec0:	2108      	movs	r1, #8
 8005ec2:	487c      	ldr	r0, [pc, #496]	@ (80060b4 <main+0x1068>)
 8005ec4:	f7fe febe 	bl	8004c44 <Set_Output_Voltage>
	Expander_SetPinState(&hi2c3, GPIO_EXPANDER_ID_03, CELL_03_LED_01 , HIGH);
 8005ec8:	2301      	movs	r3, #1
 8005eca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005ece:	2123      	movs	r1, #35	@ 0x23
 8005ed0:	4878      	ldr	r0, [pc, #480]	@ (80060b4 <main+0x1068>)
 8005ed2:	f7fe fcf6 	bl	80048c2 <Expander_SetPinState>

		  HAL_GPIO_WritePin(GPIOG, CELL11_CS_09_Pin, GPIO_PIN_RESET);
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	2102      	movs	r1, #2
 8005eda:	487a      	ldr	r0, [pc, #488]	@ (80060c4 <main+0x1078>)
 8005edc:	f001 fb6a 	bl	80075b4 <HAL_GPIO_WritePin>
	//
	  busVoltage_21 = INA229_getVBUS_V(INA229_21);
 8005ee0:	4b7c      	ldr	r3, [pc, #496]	@ (80060d4 <main+0x1088>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7fc ffd7 	bl	8002e98 <INA229_getVBUS_V>
 8005eea:	eef0 7a40 	vmov.f32	s15, s0
 8005eee:	4b7a      	ldr	r3, [pc, #488]	@ (80060d8 <main+0x108c>)
 8005ef0:	edc3 7a00 	vstr	s15, [r3]

	//
	//HAL_Delay(1000);
	  HAL_GPIO_WritePin(GPIOG, CELL11_CS_09_Pin, GPIO_PIN_SET);
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	2102      	movs	r1, #2
 8005ef8:	4872      	ldr	r0, [pc, #456]	@ (80060c4 <main+0x1078>)
 8005efa:	f001 fb5b 	bl	80075b4 <HAL_GPIO_WritePin>



	  HAL_GPIO_WritePin(GPIOG, CELL11_CS_09_Pin, GPIO_PIN_RESET);
 8005efe:	2200      	movs	r2, #0
 8005f00:	2102      	movs	r1, #2
 8005f02:	4870      	ldr	r0, [pc, #448]	@ (80060c4 <main+0x1078>)
 8005f04:	f001 fb56 	bl	80075b4 <HAL_GPIO_WritePin>
	//
	  temperatureC_21 = INA229_getDIETEMP_C(INA229_21);
 8005f08:	4b72      	ldr	r3, [pc, #456]	@ (80060d4 <main+0x1088>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7fd f821 	bl	8002f54 <INA229_getDIETEMP_C>
 8005f12:	eef0 7a40 	vmov.f32	s15, s0
 8005f16:	4b71      	ldr	r3, [pc, #452]	@ (80060dc <main+0x1090>)
 8005f18:	edc3 7a00 	vstr	s15, [r3]

	//
	//HAL_Delay(1000);
	HAL_GPIO_WritePin(GPIOG, CELL11_CS_09_Pin, GPIO_PIN_SET);
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	2102      	movs	r1, #2
 8005f20:	4868      	ldr	r0, [pc, #416]	@ (80060c4 <main+0x1078>)
 8005f22:	f001 fb47 	bl	80075b4 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8005f26:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005f2a:	f001 f88d 	bl	8007048 <HAL_Delay>

	Expander_SetPinState(&hi2c3, GPIO_EXPANDER_ID_03, CELL_03_LED_01 , LOW);
 8005f2e:	2300      	movs	r3, #0
 8005f30:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005f34:	2123      	movs	r1, #35	@ 0x23
 8005f36:	485f      	ldr	r0, [pc, #380]	@ (80060b4 <main+0x1068>)
 8005f38:	f7fe fcc3 	bl	80048c2 <Expander_SetPinState>


					  	/////////////////////////////////////////////////////////////
  	/////////////////////////////////////////////////////////////

	  Set_Output_Voltage(&hi2c3, CELL_10, 4.0f);
 8005f3c:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8005f40:	2109      	movs	r1, #9
 8005f42:	485c      	ldr	r0, [pc, #368]	@ (80060b4 <main+0x1068>)
 8005f44:	f7fe fe7e 	bl	8004c44 <Set_Output_Voltage>
Expander_SetPinState(&hi2c3, GPIO_EXPANDER_ID_04, CELL_01_LED_01 , HIGH);
 8005f48:	2301      	movs	r3, #1
 8005f4a:	2210      	movs	r2, #16
 8005f4c:	2124      	movs	r1, #36	@ 0x24
 8005f4e:	4859      	ldr	r0, [pc, #356]	@ (80060b4 <main+0x1068>)
 8005f50:	f7fe fcb7 	bl	80048c2 <Expander_SetPinState>

	  HAL_GPIO_WritePin(GPIOE, CELL11_CS_10_Pin, GPIO_PIN_RESET);
 8005f54:	2200      	movs	r2, #0
 8005f56:	2180      	movs	r1, #128	@ 0x80
 8005f58:	4861      	ldr	r0, [pc, #388]	@ (80060e0 <main+0x1094>)
 8005f5a:	f001 fb2b 	bl	80075b4 <HAL_GPIO_WritePin>
//
  busVoltage_22 = INA229_getVBUS_V(INA229_22);
 8005f5e:	4b61      	ldr	r3, [pc, #388]	@ (80060e4 <main+0x1098>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7fc ff98 	bl	8002e98 <INA229_getVBUS_V>
 8005f68:	eef0 7a40 	vmov.f32	s15, s0
 8005f6c:	4b5e      	ldr	r3, [pc, #376]	@ (80060e8 <main+0x109c>)
 8005f6e:	edc3 7a00 	vstr	s15, [r3]

//
//HAL_Delay(1000);
  HAL_GPIO_WritePin(GPIOE, CELL11_CS_10_Pin, GPIO_PIN_SET);
 8005f72:	2201      	movs	r2, #1
 8005f74:	2180      	movs	r1, #128	@ 0x80
 8005f76:	485a      	ldr	r0, [pc, #360]	@ (80060e0 <main+0x1094>)
 8005f78:	f001 fb1c 	bl	80075b4 <HAL_GPIO_WritePin>



  HAL_GPIO_WritePin(GPIOE, CELL11_CS_10_Pin, GPIO_PIN_RESET);
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	2180      	movs	r1, #128	@ 0x80
 8005f80:	4857      	ldr	r0, [pc, #348]	@ (80060e0 <main+0x1094>)
 8005f82:	f001 fb17 	bl	80075b4 <HAL_GPIO_WritePin>
//
  temperatureC_22 = INA229_getDIETEMP_C(INA229_22);
 8005f86:	4b57      	ldr	r3, [pc, #348]	@ (80060e4 <main+0x1098>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7fc ffe2 	bl	8002f54 <INA229_getDIETEMP_C>
 8005f90:	eef0 7a40 	vmov.f32	s15, s0
 8005f94:	4b55      	ldr	r3, [pc, #340]	@ (80060ec <main+0x10a0>)
 8005f96:	edc3 7a00 	vstr	s15, [r3]

//
//HAL_Delay(1000);
HAL_GPIO_WritePin(GPIOE, CELL11_CS_10_Pin, GPIO_PIN_SET);
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	2180      	movs	r1, #128	@ 0x80
 8005f9e:	4850      	ldr	r0, [pc, #320]	@ (80060e0 <main+0x1094>)
 8005fa0:	f001 fb08 	bl	80075b4 <HAL_GPIO_WritePin>
HAL_Delay(1000);
 8005fa4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005fa8:	f001 f84e 	bl	8007048 <HAL_Delay>

Expander_SetPinState(&hi2c3, GPIO_EXPANDER_ID_04, CELL_01_LED_01 , LOW);
 8005fac:	2300      	movs	r3, #0
 8005fae:	2210      	movs	r2, #16
 8005fb0:	2124      	movs	r1, #36	@ 0x24
 8005fb2:	4840      	ldr	r0, [pc, #256]	@ (80060b4 <main+0x1068>)
 8005fb4:	f7fe fc85 	bl	80048c2 <Expander_SetPinState>

///////////////////////////////////////////////////////////////////
  Set_Output_Voltage(&hi2c3, CELL_11, 4.0f);
 8005fb8:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8005fbc:	210a      	movs	r1, #10
 8005fbe:	483d      	ldr	r0, [pc, #244]	@ (80060b4 <main+0x1068>)
 8005fc0:	f7fe fe40 	bl	8004c44 <Set_Output_Voltage>
Expander_SetPinState(&hi2c3, GPIO_EXPANDER_ID_04, CELL_02_LED_01 , HIGH);
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fca:	2124      	movs	r1, #36	@ 0x24
 8005fcc:	4839      	ldr	r0, [pc, #228]	@ (80060b4 <main+0x1068>)
 8005fce:	f7fe fc78 	bl	80048c2 <Expander_SetPinState>

  HAL_GPIO_WritePin(GPIOE, CELL11_CS_11_Pin, GPIO_PIN_RESET);
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005fd8:	4841      	ldr	r0, [pc, #260]	@ (80060e0 <main+0x1094>)
 8005fda:	f001 faeb 	bl	80075b4 <HAL_GPIO_WritePin>
//
busVoltage_23 = INA229_getVBUS_V(INA229_23);
 8005fde:	4b44      	ldr	r3, [pc, #272]	@ (80060f0 <main+0x10a4>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7fc ff58 	bl	8002e98 <INA229_getVBUS_V>
 8005fe8:	eef0 7a40 	vmov.f32	s15, s0
 8005fec:	4b41      	ldr	r3, [pc, #260]	@ (80060f4 <main+0x10a8>)
 8005fee:	edc3 7a00 	vstr	s15, [r3]

//
//HAL_Delay(1000);
HAL_GPIO_WritePin(GPIOE, CELL11_CS_11_Pin, GPIO_PIN_SET);
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005ff8:	4839      	ldr	r0, [pc, #228]	@ (80060e0 <main+0x1094>)
 8005ffa:	f001 fadb 	bl	80075b4 <HAL_GPIO_WritePin>



HAL_GPIO_WritePin(GPIOE, CELL11_CS_11_Pin, GPIO_PIN_RESET);
 8005ffe:	2200      	movs	r2, #0
 8006000:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006004:	4836      	ldr	r0, [pc, #216]	@ (80060e0 <main+0x1094>)
 8006006:	f001 fad5 	bl	80075b4 <HAL_GPIO_WritePin>
//
temperatureC_23 = INA229_getDIETEMP_C(INA229_23);
 800600a:	4b39      	ldr	r3, [pc, #228]	@ (80060f0 <main+0x10a4>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4618      	mov	r0, r3
 8006010:	f7fc ffa0 	bl	8002f54 <INA229_getDIETEMP_C>
 8006014:	eef0 7a40 	vmov.f32	s15, s0
 8006018:	4b37      	ldr	r3, [pc, #220]	@ (80060f8 <main+0x10ac>)
 800601a:	edc3 7a00 	vstr	s15, [r3]

//
//HAL_Delay(1000);
HAL_GPIO_WritePin(GPIOE, CELL11_CS_11_Pin, GPIO_PIN_SET);
 800601e:	2201      	movs	r2, #1
 8006020:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006024:	482e      	ldr	r0, [pc, #184]	@ (80060e0 <main+0x1094>)
 8006026:	f001 fac5 	bl	80075b4 <HAL_GPIO_WritePin>
HAL_Delay(1000);
 800602a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800602e:	f001 f80b 	bl	8007048 <HAL_Delay>

Expander_SetPinState(&hi2c3, GPIO_EXPANDER_ID_04, CELL_02_LED_01 , LOW);
 8006032:	2300      	movs	r3, #0
 8006034:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006038:	2124      	movs	r1, #36	@ 0x24
 800603a:	481e      	ldr	r0, [pc, #120]	@ (80060b4 <main+0x1068>)
 800603c:	f7fe fc41 	bl	80048c2 <Expander_SetPinState>



  	/////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
Set_Output_Voltage(&hi2c3, CELL_12, 4.0f);
 8006040:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8006044:	210b      	movs	r1, #11
 8006046:	481b      	ldr	r0, [pc, #108]	@ (80060b4 <main+0x1068>)
 8006048:	f7fe fdfc 	bl	8004c44 <Set_Output_Voltage>
Expander_SetPinState(&hi2c3, GPIO_EXPANDER_ID_04, CELL_03_LED_01 , HIGH);
 800604c:	2301      	movs	r3, #1
 800604e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006052:	2124      	movs	r1, #36	@ 0x24
 8006054:	4817      	ldr	r0, [pc, #92]	@ (80060b4 <main+0x1068>)
 8006056:	f7fe fc34 	bl	80048c2 <Expander_SetPinState>

HAL_GPIO_WritePin(GPIOE, CELL11_CS_12_Pin, GPIO_PIN_RESET);
 800605a:	2200      	movs	r2, #0
 800605c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006060:	481f      	ldr	r0, [pc, #124]	@ (80060e0 <main+0x1094>)
 8006062:	f001 faa7 	bl	80075b4 <HAL_GPIO_WritePin>
//
busVoltage_24 = INA229_getVBUS_V(INA229_24);
 8006066:	4b25      	ldr	r3, [pc, #148]	@ (80060fc <main+0x10b0>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4618      	mov	r0, r3
 800606c:	f7fc ff14 	bl	8002e98 <INA229_getVBUS_V>
 8006070:	eef0 7a40 	vmov.f32	s15, s0
 8006074:	4b22      	ldr	r3, [pc, #136]	@ (8006100 <main+0x10b4>)
 8006076:	edc3 7a00 	vstr	s15, [r3]

//
//HAL_Delay(1000);
HAL_GPIO_WritePin(GPIOE, CELL11_CS_12_Pin, GPIO_PIN_SET);
 800607a:	2201      	movs	r2, #1
 800607c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006080:	4817      	ldr	r0, [pc, #92]	@ (80060e0 <main+0x1094>)
 8006082:	f001 fa97 	bl	80075b4 <HAL_GPIO_WritePin>



HAL_GPIO_WritePin(GPIOE, CELL11_CS_12_Pin, GPIO_PIN_RESET);
 8006086:	2200      	movs	r2, #0
 8006088:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800608c:	4814      	ldr	r0, [pc, #80]	@ (80060e0 <main+0x1094>)
 800608e:	f001 fa91 	bl	80075b4 <HAL_GPIO_WritePin>
//
temperatureC_24 = INA229_getDIETEMP_C(INA229_24);
 8006092:	4b1a      	ldr	r3, [pc, #104]	@ (80060fc <main+0x10b0>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4618      	mov	r0, r3
 8006098:	f7fc ff5c 	bl	8002f54 <INA229_getDIETEMP_C>
 800609c:	eef0 7a40 	vmov.f32	s15, s0
 80060a0:	e030      	b.n	8006104 <main+0x10b8>
 80060a2:	bf00      	nop
 80060a4:	0800b968 	.word	0x0800b968
 80060a8:	20000d2c 	.word	0x20000d2c
 80060ac:	40021400 	.word	0x40021400
 80060b0:	20000d30 	.word	0x20000d30
 80060b4:	20000dc8 	.word	0x20000dc8
 80060b8:	0800b96c 	.word	0x0800b96c
 80060bc:	20000d34 	.word	0x20000d34
 80060c0:	20000d38 	.word	0x20000d38
 80060c4:	40021800 	.word	0x40021800
 80060c8:	0800b970 	.word	0x0800b970
 80060cc:	20000d3c 	.word	0x20000d3c
 80060d0:	20000d40 	.word	0x20000d40
 80060d4:	0800b974 	.word	0x0800b974
 80060d8:	20000d44 	.word	0x20000d44
 80060dc:	20000d48 	.word	0x20000d48
 80060e0:	40021000 	.word	0x40021000
 80060e4:	0800b978 	.word	0x0800b978
 80060e8:	20000d4c 	.word	0x20000d4c
 80060ec:	20000d50 	.word	0x20000d50
 80060f0:	0800b97c 	.word	0x0800b97c
 80060f4:	20000d54 	.word	0x20000d54
 80060f8:	20000d58 	.word	0x20000d58
 80060fc:	0800b980 	.word	0x0800b980
 8006100:	20000d5c 	.word	0x20000d5c
 8006104:	4b3d      	ldr	r3, [pc, #244]	@ (80061fc <main+0x11b0>)
 8006106:	edc3 7a00 	vstr	s15, [r3]

//
//HAL_Delay(1000);
HAL_GPIO_WritePin(GPIOE, CELL11_CS_12_Pin, GPIO_PIN_SET);
 800610a:	2201      	movs	r2, #1
 800610c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006110:	483b      	ldr	r0, [pc, #236]	@ (8006200 <main+0x11b4>)
 8006112:	f001 fa4f 	bl	80075b4 <HAL_GPIO_WritePin>
HAL_Delay(1000);
 8006116:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800611a:	f000 ff95 	bl	8007048 <HAL_Delay>

Expander_SetPinState(&hi2c3, GPIO_EXPANDER_ID_04, CELL_03_LED_01 , LOW);
 800611e:	2300      	movs	r3, #0
 8006120:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006124:	2124      	movs	r1, #36	@ 0x24
 8006126:	4837      	ldr	r0, [pc, #220]	@ (8006204 <main+0x11b8>)
 8006128:	f7fe fbcb 	bl	80048c2 <Expander_SetPinState>

		  	/////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////


  HAL_GPIO_WritePin(GPIOF, CSU_12_CELLS_Pin, GPIO_PIN_RESET);
 800612c:	2200      	movs	r2, #0
 800612e:	2104      	movs	r1, #4
 8006130:	4835      	ldr	r0, [pc, #212]	@ (8006208 <main+0x11bc>)
 8006132:	f001 fa3f 	bl	80075b4 <HAL_GPIO_WritePin>
//
busVoltage_25 = INA229_getVBUS_V(INA229_12);
 8006136:	4b35      	ldr	r3, [pc, #212]	@ (800620c <main+0x11c0>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4618      	mov	r0, r3
 800613c:	f7fc feac 	bl	8002e98 <INA229_getVBUS_V>
 8006140:	eef0 7a40 	vmov.f32	s15, s0
 8006144:	4b32      	ldr	r3, [pc, #200]	@ (8006210 <main+0x11c4>)
 8006146:	edc3 7a00 	vstr	s15, [r3]

//
//HAL_Delay(1000);
HAL_GPIO_WritePin(GPIOF, CSU_12_CELLS_Pin, GPIO_PIN_SET);
 800614a:	2201      	movs	r2, #1
 800614c:	2104      	movs	r1, #4
 800614e:	482e      	ldr	r0, [pc, #184]	@ (8006208 <main+0x11bc>)
 8006150:	f001 fa30 	bl	80075b4 <HAL_GPIO_WritePin>



HAL_GPIO_WritePin(GPIOF, CSU_12_CELLS_Pin, GPIO_PIN_RESET);
 8006154:	2200      	movs	r2, #0
 8006156:	2104      	movs	r1, #4
 8006158:	482b      	ldr	r0, [pc, #172]	@ (8006208 <main+0x11bc>)
 800615a:	f001 fa2b 	bl	80075b4 <HAL_GPIO_WritePin>
//
temperatureC_25 = INA229_getDIETEMP_C(INA229_12);
 800615e:	4b2b      	ldr	r3, [pc, #172]	@ (800620c <main+0x11c0>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4618      	mov	r0, r3
 8006164:	f7fc fef6 	bl	8002f54 <INA229_getDIETEMP_C>
 8006168:	eef0 7a40 	vmov.f32	s15, s0
 800616c:	4b29      	ldr	r3, [pc, #164]	@ (8006214 <main+0x11c8>)
 800616e:	edc3 7a00 	vstr	s15, [r3]

//
//HAL_Delay(1000);
HAL_GPIO_WritePin(GPIOF, CSU_12_CELLS_Pin, GPIO_PIN_SET);
 8006172:	2201      	movs	r2, #1
 8006174:	2104      	movs	r1, #4
 8006176:	4824      	ldr	r0, [pc, #144]	@ (8006208 <main+0x11bc>)
 8006178:	f001 fa1c 	bl	80075b4 <HAL_GPIO_WritePin>
HAL_Delay(1000);
 800617c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006180:	f000 ff62 	bl	8007048 <HAL_Delay>

  	/////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////


HAL_GPIO_WritePin(GPIOE, CSU_11_CELLS_Pin, GPIO_PIN_RESET);
 8006184:	2200      	movs	r2, #0
 8006186:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800618a:	481d      	ldr	r0, [pc, #116]	@ (8006200 <main+0x11b4>)
 800618c:	f001 fa12 	bl	80075b4 <HAL_GPIO_WritePin>
//
busVoltage_26 = INA229_getVBUS_V(INA229_25);
 8006190:	4b21      	ldr	r3, [pc, #132]	@ (8006218 <main+0x11cc>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4618      	mov	r0, r3
 8006196:	f7fc fe7f 	bl	8002e98 <INA229_getVBUS_V>
 800619a:	eef0 7a40 	vmov.f32	s15, s0
 800619e:	4b1f      	ldr	r3, [pc, #124]	@ (800621c <main+0x11d0>)
 80061a0:	edc3 7a00 	vstr	s15, [r3]

//
//HAL_Delay(1000);
HAL_GPIO_WritePin(GPIOE, CSU_11_CELLS_Pin, GPIO_PIN_SET);
 80061a4:	2201      	movs	r2, #1
 80061a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80061aa:	4815      	ldr	r0, [pc, #84]	@ (8006200 <main+0x11b4>)
 80061ac:	f001 fa02 	bl	80075b4 <HAL_GPIO_WritePin>



HAL_GPIO_WritePin(GPIOE, CSU_11_CELLS_Pin, GPIO_PIN_RESET);
 80061b0:	2200      	movs	r2, #0
 80061b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80061b6:	4812      	ldr	r0, [pc, #72]	@ (8006200 <main+0x11b4>)
 80061b8:	f001 f9fc 	bl	80075b4 <HAL_GPIO_WritePin>
//
temperatureC_26 = INA229_getDIETEMP_C(INA229_25);
 80061bc:	4b16      	ldr	r3, [pc, #88]	@ (8006218 <main+0x11cc>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7fc fec7 	bl	8002f54 <INA229_getDIETEMP_C>
 80061c6:	eef0 7a40 	vmov.f32	s15, s0
 80061ca:	4b15      	ldr	r3, [pc, #84]	@ (8006220 <main+0x11d4>)
 80061cc:	edc3 7a00 	vstr	s15, [r3]

//
//HAL_Delay(1000);
HAL_GPIO_WritePin(GPIOE, CSU_11_CELLS_Pin, GPIO_PIN_SET);
 80061d0:	2201      	movs	r2, #1
 80061d2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80061d6:	480a      	ldr	r0, [pc, #40]	@ (8006200 <main+0x11b4>)
 80061d8:	f001 f9ec 	bl	80075b4 <HAL_GPIO_WritePin>
HAL_Delay(1000);
 80061dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80061e0:	f000 ff32 	bl	8007048 <HAL_Delay>


//--------------------------------------------------------------//

cell_voltage_read();
 80061e4:	f7fe fee8 	bl	8004fb8 <cell_voltage_read>
delay_time_us(500000);
 80061e8:	480e      	ldr	r0, [pc, #56]	@ (8006224 <main+0x11d8>)
 80061ea:	f7fe fdb1 	bl	8004d50 <delay_time_us>
temparature_data_read();
 80061ee:	f7fe fe45 	bl	8004e7c <temparature_data_read>


//--------------------------------------------------------------//

		  	/////////////////////////////////////////////////////////////
Scan_I2C_Bus();
 80061f2:	f000 fc0d 	bl	8006a10 <Scan_I2C_Bus>
	  Set_Output_Voltage(&hi2c2, CELL_1, 4.0f);
 80061f6:	bf00      	nop
 80061f8:	f7ff b850 	b.w	800529c <main+0x250>
 80061fc:	20000d60 	.word	0x20000d60
 8006200:	40021000 	.word	0x40021000
 8006204:	20000dc8 	.word	0x20000dc8
 8006208:	40021400 	.word	0x40021400
 800620c:	0800b950 	.word	0x0800b950
 8006210:	20000d64 	.word	0x20000d64
 8006214:	20000d68 	.word	0x20000d68
 8006218:	0800b984 	.word	0x0800b984
 800621c:	20000d6c 	.word	0x20000d6c
 8006220:	20000d70 	.word	0x20000d70
 8006224:	0007a120 	.word	0x0007a120

08006228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b094      	sub	sp, #80	@ 0x50
 800622c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800622e:	f107 0320 	add.w	r3, r7, #32
 8006232:	2230      	movs	r2, #48	@ 0x30
 8006234:	2100      	movs	r1, #0
 8006236:	4618      	mov	r0, r3
 8006238:	f003 fee8 	bl	800a00c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800623c:	f107 030c 	add.w	r3, r7, #12
 8006240:	2200      	movs	r2, #0
 8006242:	601a      	str	r2, [r3, #0]
 8006244:	605a      	str	r2, [r3, #4]
 8006246:	609a      	str	r2, [r3, #8]
 8006248:	60da      	str	r2, [r3, #12]
 800624a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800624c:	2300      	movs	r3, #0
 800624e:	60bb      	str	r3, [r7, #8]
 8006250:	4b2b      	ldr	r3, [pc, #172]	@ (8006300 <SystemClock_Config+0xd8>)
 8006252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006254:	4a2a      	ldr	r2, [pc, #168]	@ (8006300 <SystemClock_Config+0xd8>)
 8006256:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800625a:	6413      	str	r3, [r2, #64]	@ 0x40
 800625c:	4b28      	ldr	r3, [pc, #160]	@ (8006300 <SystemClock_Config+0xd8>)
 800625e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006260:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006264:	60bb      	str	r3, [r7, #8]
 8006266:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006268:	2300      	movs	r3, #0
 800626a:	607b      	str	r3, [r7, #4]
 800626c:	4b25      	ldr	r3, [pc, #148]	@ (8006304 <SystemClock_Config+0xdc>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a24      	ldr	r2, [pc, #144]	@ (8006304 <SystemClock_Config+0xdc>)
 8006272:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006276:	6013      	str	r3, [r2, #0]
 8006278:	4b22      	ldr	r3, [pc, #136]	@ (8006304 <SystemClock_Config+0xdc>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006280:	607b      	str	r3, [r7, #4]
 8006282:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006284:	2301      	movs	r3, #1
 8006286:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006288:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800628c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800628e:	2302      	movs	r3, #2
 8006290:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006292:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006296:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8006298:	230f      	movs	r3, #15
 800629a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800629c:	23d8      	movs	r3, #216	@ 0xd8
 800629e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80062a0:	2302      	movs	r3, #2
 80062a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80062a4:	2304      	movs	r3, #4
 80062a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80062a8:	f107 0320 	add.w	r3, r7, #32
 80062ac:	4618      	mov	r0, r3
 80062ae:	f002 fbb9 	bl	8008a24 <HAL_RCC_OscConfig>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d001      	beq.n	80062bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80062b8:	f000 fbde 	bl	8006a78 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80062bc:	f002 fb62 	bl	8008984 <HAL_PWREx_EnableOverDrive>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d001      	beq.n	80062ca <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80062c6:	f000 fbd7 	bl	8006a78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80062ca:	230f      	movs	r3, #15
 80062cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80062ce:	2302      	movs	r3, #2
 80062d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80062d2:	2300      	movs	r3, #0
 80062d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80062d6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80062da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80062dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80062e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80062e2:	f107 030c 	add.w	r3, r7, #12
 80062e6:	2105      	movs	r1, #5
 80062e8:	4618      	mov	r0, r3
 80062ea:	f002 fe13 	bl	8008f14 <HAL_RCC_ClockConfig>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d001      	beq.n	80062f8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80062f4:	f000 fbc0 	bl	8006a78 <Error_Handler>
  }
}
 80062f8:	bf00      	nop
 80062fa:	3750      	adds	r7, #80	@ 0x50
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	40023800 	.word	0x40023800
 8006304:	40007000 	.word	0x40007000

08006308 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800630c:	4b1b      	ldr	r3, [pc, #108]	@ (800637c <MX_I2C2_Init+0x74>)
 800630e:	4a1c      	ldr	r2, [pc, #112]	@ (8006380 <MX_I2C2_Init+0x78>)
 8006310:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8006312:	4b1a      	ldr	r3, [pc, #104]	@ (800637c <MX_I2C2_Init+0x74>)
 8006314:	4a1b      	ldr	r2, [pc, #108]	@ (8006384 <MX_I2C2_Init+0x7c>)
 8006316:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006318:	4b18      	ldr	r3, [pc, #96]	@ (800637c <MX_I2C2_Init+0x74>)
 800631a:	2200      	movs	r2, #0
 800631c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800631e:	4b17      	ldr	r3, [pc, #92]	@ (800637c <MX_I2C2_Init+0x74>)
 8006320:	2200      	movs	r2, #0
 8006322:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006324:	4b15      	ldr	r3, [pc, #84]	@ (800637c <MX_I2C2_Init+0x74>)
 8006326:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800632a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800632c:	4b13      	ldr	r3, [pc, #76]	@ (800637c <MX_I2C2_Init+0x74>)
 800632e:	2200      	movs	r2, #0
 8006330:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8006332:	4b12      	ldr	r3, [pc, #72]	@ (800637c <MX_I2C2_Init+0x74>)
 8006334:	2200      	movs	r2, #0
 8006336:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006338:	4b10      	ldr	r3, [pc, #64]	@ (800637c <MX_I2C2_Init+0x74>)
 800633a:	2200      	movs	r2, #0
 800633c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800633e:	4b0f      	ldr	r3, [pc, #60]	@ (800637c <MX_I2C2_Init+0x74>)
 8006340:	2200      	movs	r2, #0
 8006342:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006344:	480d      	ldr	r0, [pc, #52]	@ (800637c <MX_I2C2_Init+0x74>)
 8006346:	f001 f94f 	bl	80075e8 <HAL_I2C_Init>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d001      	beq.n	8006354 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8006350:	f000 fb92 	bl	8006a78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006354:	2100      	movs	r1, #0
 8006356:	4809      	ldr	r0, [pc, #36]	@ (800637c <MX_I2C2_Init+0x74>)
 8006358:	f002 fa98 	bl	800888c <HAL_I2CEx_ConfigAnalogFilter>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d001      	beq.n	8006366 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8006362:	f000 fb89 	bl	8006a78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006366:	2100      	movs	r1, #0
 8006368:	4804      	ldr	r0, [pc, #16]	@ (800637c <MX_I2C2_Init+0x74>)
 800636a:	f002 facb 	bl	8008904 <HAL_I2CEx_ConfigDigitalFilter>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8006374:	f000 fb80 	bl	8006a78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006378:	bf00      	nop
 800637a:	bd80      	pop	{r7, pc}
 800637c:	20000d74 	.word	0x20000d74
 8006380:	40005800 	.word	0x40005800
 8006384:	00061a80 	.word	0x00061a80

08006388 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800638c:	4b1b      	ldr	r3, [pc, #108]	@ (80063fc <MX_I2C3_Init+0x74>)
 800638e:	4a1c      	ldr	r2, [pc, #112]	@ (8006400 <MX_I2C3_Init+0x78>)
 8006390:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8006392:	4b1a      	ldr	r3, [pc, #104]	@ (80063fc <MX_I2C3_Init+0x74>)
 8006394:	4a1b      	ldr	r2, [pc, #108]	@ (8006404 <MX_I2C3_Init+0x7c>)
 8006396:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006398:	4b18      	ldr	r3, [pc, #96]	@ (80063fc <MX_I2C3_Init+0x74>)
 800639a:	2200      	movs	r2, #0
 800639c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800639e:	4b17      	ldr	r3, [pc, #92]	@ (80063fc <MX_I2C3_Init+0x74>)
 80063a0:	2200      	movs	r2, #0
 80063a2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80063a4:	4b15      	ldr	r3, [pc, #84]	@ (80063fc <MX_I2C3_Init+0x74>)
 80063a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80063aa:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80063ac:	4b13      	ldr	r3, [pc, #76]	@ (80063fc <MX_I2C3_Init+0x74>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80063b2:	4b12      	ldr	r3, [pc, #72]	@ (80063fc <MX_I2C3_Init+0x74>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80063b8:	4b10      	ldr	r3, [pc, #64]	@ (80063fc <MX_I2C3_Init+0x74>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80063be:	4b0f      	ldr	r3, [pc, #60]	@ (80063fc <MX_I2C3_Init+0x74>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80063c4:	480d      	ldr	r0, [pc, #52]	@ (80063fc <MX_I2C3_Init+0x74>)
 80063c6:	f001 f90f 	bl	80075e8 <HAL_I2C_Init>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d001      	beq.n	80063d4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80063d0:	f000 fb52 	bl	8006a78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80063d4:	2100      	movs	r1, #0
 80063d6:	4809      	ldr	r0, [pc, #36]	@ (80063fc <MX_I2C3_Init+0x74>)
 80063d8:	f002 fa58 	bl	800888c <HAL_I2CEx_ConfigAnalogFilter>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d001      	beq.n	80063e6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80063e2:	f000 fb49 	bl	8006a78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80063e6:	2100      	movs	r1, #0
 80063e8:	4804      	ldr	r0, [pc, #16]	@ (80063fc <MX_I2C3_Init+0x74>)
 80063ea:	f002 fa8b 	bl	8008904 <HAL_I2CEx_ConfigDigitalFilter>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d001      	beq.n	80063f8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80063f4:	f000 fb40 	bl	8006a78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80063f8:	bf00      	nop
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	20000dc8 	.word	0x20000dc8
 8006400:	40005c00 	.word	0x40005c00
 8006404:	00061a80 	.word	0x00061a80

08006408 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800640c:	4b17      	ldr	r3, [pc, #92]	@ (800646c <MX_SPI1_Init+0x64>)
 800640e:	4a18      	ldr	r2, [pc, #96]	@ (8006470 <MX_SPI1_Init+0x68>)
 8006410:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006412:	4b16      	ldr	r3, [pc, #88]	@ (800646c <MX_SPI1_Init+0x64>)
 8006414:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006418:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800641a:	4b14      	ldr	r3, [pc, #80]	@ (800646c <MX_SPI1_Init+0x64>)
 800641c:	2200      	movs	r2, #0
 800641e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006420:	4b12      	ldr	r3, [pc, #72]	@ (800646c <MX_SPI1_Init+0x64>)
 8006422:	2200      	movs	r2, #0
 8006424:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006426:	4b11      	ldr	r3, [pc, #68]	@ (800646c <MX_SPI1_Init+0x64>)
 8006428:	2200      	movs	r2, #0
 800642a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800642c:	4b0f      	ldr	r3, [pc, #60]	@ (800646c <MX_SPI1_Init+0x64>)
 800642e:	2201      	movs	r2, #1
 8006430:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006432:	4b0e      	ldr	r3, [pc, #56]	@ (800646c <MX_SPI1_Init+0x64>)
 8006434:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006438:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800643a:	4b0c      	ldr	r3, [pc, #48]	@ (800646c <MX_SPI1_Init+0x64>)
 800643c:	2228      	movs	r2, #40	@ 0x28
 800643e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006440:	4b0a      	ldr	r3, [pc, #40]	@ (800646c <MX_SPI1_Init+0x64>)
 8006442:	2200      	movs	r2, #0
 8006444:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006446:	4b09      	ldr	r3, [pc, #36]	@ (800646c <MX_SPI1_Init+0x64>)
 8006448:	2200      	movs	r2, #0
 800644a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800644c:	4b07      	ldr	r3, [pc, #28]	@ (800646c <MX_SPI1_Init+0x64>)
 800644e:	2200      	movs	r2, #0
 8006450:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8006452:	4b06      	ldr	r3, [pc, #24]	@ (800646c <MX_SPI1_Init+0x64>)
 8006454:	220a      	movs	r2, #10
 8006456:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006458:	4804      	ldr	r0, [pc, #16]	@ (800646c <MX_SPI1_Init+0x64>)
 800645a:	f002 ff27 	bl	80092ac <HAL_SPI_Init>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d001      	beq.n	8006468 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8006464:	f000 fb08 	bl	8006a78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006468:	bf00      	nop
 800646a:	bd80      	pop	{r7, pc}
 800646c:	20000e1c 	.word	0x20000e1c
 8006470:	40013000 	.word	0x40013000

08006474 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006478:	4b17      	ldr	r3, [pc, #92]	@ (80064d8 <MX_SPI2_Init+0x64>)
 800647a:	4a18      	ldr	r2, [pc, #96]	@ (80064dc <MX_SPI2_Init+0x68>)
 800647c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800647e:	4b16      	ldr	r3, [pc, #88]	@ (80064d8 <MX_SPI2_Init+0x64>)
 8006480:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006484:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006486:	4b14      	ldr	r3, [pc, #80]	@ (80064d8 <MX_SPI2_Init+0x64>)
 8006488:	2200      	movs	r2, #0
 800648a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800648c:	4b12      	ldr	r3, [pc, #72]	@ (80064d8 <MX_SPI2_Init+0x64>)
 800648e:	2200      	movs	r2, #0
 8006490:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006492:	4b11      	ldr	r3, [pc, #68]	@ (80064d8 <MX_SPI2_Init+0x64>)
 8006494:	2200      	movs	r2, #0
 8006496:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006498:	4b0f      	ldr	r3, [pc, #60]	@ (80064d8 <MX_SPI2_Init+0x64>)
 800649a:	2201      	movs	r2, #1
 800649c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800649e:	4b0e      	ldr	r3, [pc, #56]	@ (80064d8 <MX_SPI2_Init+0x64>)
 80064a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064a4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80064a6:	4b0c      	ldr	r3, [pc, #48]	@ (80064d8 <MX_SPI2_Init+0x64>)
 80064a8:	2218      	movs	r2, #24
 80064aa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80064ac:	4b0a      	ldr	r3, [pc, #40]	@ (80064d8 <MX_SPI2_Init+0x64>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80064b2:	4b09      	ldr	r3, [pc, #36]	@ (80064d8 <MX_SPI2_Init+0x64>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064b8:	4b07      	ldr	r3, [pc, #28]	@ (80064d8 <MX_SPI2_Init+0x64>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80064be:	4b06      	ldr	r3, [pc, #24]	@ (80064d8 <MX_SPI2_Init+0x64>)
 80064c0:	220a      	movs	r2, #10
 80064c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80064c4:	4804      	ldr	r0, [pc, #16]	@ (80064d8 <MX_SPI2_Init+0x64>)
 80064c6:	f002 fef1 	bl	80092ac <HAL_SPI_Init>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d001      	beq.n	80064d4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80064d0:	f000 fad2 	bl	8006a78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80064d4:	bf00      	nop
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	20000e74 	.word	0x20000e74
 80064dc:	40003800 	.word	0x40003800

080064e0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80064e4:	4b17      	ldr	r3, [pc, #92]	@ (8006544 <MX_SPI3_Init+0x64>)
 80064e6:	4a18      	ldr	r2, [pc, #96]	@ (8006548 <MX_SPI3_Init+0x68>)
 80064e8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80064ea:	4b16      	ldr	r3, [pc, #88]	@ (8006544 <MX_SPI3_Init+0x64>)
 80064ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80064f0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80064f2:	4b14      	ldr	r3, [pc, #80]	@ (8006544 <MX_SPI3_Init+0x64>)
 80064f4:	2200      	movs	r2, #0
 80064f6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80064f8:	4b12      	ldr	r3, [pc, #72]	@ (8006544 <MX_SPI3_Init+0x64>)
 80064fa:	2200      	movs	r2, #0
 80064fc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80064fe:	4b11      	ldr	r3, [pc, #68]	@ (8006544 <MX_SPI3_Init+0x64>)
 8006500:	2200      	movs	r2, #0
 8006502:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006504:	4b0f      	ldr	r3, [pc, #60]	@ (8006544 <MX_SPI3_Init+0x64>)
 8006506:	2200      	movs	r2, #0
 8006508:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800650a:	4b0e      	ldr	r3, [pc, #56]	@ (8006544 <MX_SPI3_Init+0x64>)
 800650c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006510:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006512:	4b0c      	ldr	r3, [pc, #48]	@ (8006544 <MX_SPI3_Init+0x64>)
 8006514:	2220      	movs	r2, #32
 8006516:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006518:	4b0a      	ldr	r3, [pc, #40]	@ (8006544 <MX_SPI3_Init+0x64>)
 800651a:	2200      	movs	r2, #0
 800651c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800651e:	4b09      	ldr	r3, [pc, #36]	@ (8006544 <MX_SPI3_Init+0x64>)
 8006520:	2200      	movs	r2, #0
 8006522:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006524:	4b07      	ldr	r3, [pc, #28]	@ (8006544 <MX_SPI3_Init+0x64>)
 8006526:	2200      	movs	r2, #0
 8006528:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800652a:	4b06      	ldr	r3, [pc, #24]	@ (8006544 <MX_SPI3_Init+0x64>)
 800652c:	220a      	movs	r2, #10
 800652e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8006530:	4804      	ldr	r0, [pc, #16]	@ (8006544 <MX_SPI3_Init+0x64>)
 8006532:	f002 febb 	bl	80092ac <HAL_SPI_Init>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d001      	beq.n	8006540 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800653c:	f000 fa9c 	bl	8006a78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8006540:	bf00      	nop
 8006542:	bd80      	pop	{r7, pc}
 8006544:	20000ecc 	.word	0x20000ecc
 8006548:	40003c00 	.word	0x40003c00

0800654c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8006550:	4b17      	ldr	r3, [pc, #92]	@ (80065b0 <MX_SPI4_Init+0x64>)
 8006552:	4a18      	ldr	r2, [pc, #96]	@ (80065b4 <MX_SPI4_Init+0x68>)
 8006554:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8006556:	4b16      	ldr	r3, [pc, #88]	@ (80065b0 <MX_SPI4_Init+0x64>)
 8006558:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800655c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800655e:	4b14      	ldr	r3, [pc, #80]	@ (80065b0 <MX_SPI4_Init+0x64>)
 8006560:	2200      	movs	r2, #0
 8006562:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8006564:	4b12      	ldr	r3, [pc, #72]	@ (80065b0 <MX_SPI4_Init+0x64>)
 8006566:	2200      	movs	r2, #0
 8006568:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800656a:	4b11      	ldr	r3, [pc, #68]	@ (80065b0 <MX_SPI4_Init+0x64>)
 800656c:	2200      	movs	r2, #0
 800656e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006570:	4b0f      	ldr	r3, [pc, #60]	@ (80065b0 <MX_SPI4_Init+0x64>)
 8006572:	2200      	movs	r2, #0
 8006574:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8006576:	4b0e      	ldr	r3, [pc, #56]	@ (80065b0 <MX_SPI4_Init+0x64>)
 8006578:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800657c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800657e:	4b0c      	ldr	r3, [pc, #48]	@ (80065b0 <MX_SPI4_Init+0x64>)
 8006580:	2228      	movs	r2, #40	@ 0x28
 8006582:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006584:	4b0a      	ldr	r3, [pc, #40]	@ (80065b0 <MX_SPI4_Init+0x64>)
 8006586:	2200      	movs	r2, #0
 8006588:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800658a:	4b09      	ldr	r3, [pc, #36]	@ (80065b0 <MX_SPI4_Init+0x64>)
 800658c:	2200      	movs	r2, #0
 800658e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006590:	4b07      	ldr	r3, [pc, #28]	@ (80065b0 <MX_SPI4_Init+0x64>)
 8006592:	2200      	movs	r2, #0
 8006594:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 8006596:	4b06      	ldr	r3, [pc, #24]	@ (80065b0 <MX_SPI4_Init+0x64>)
 8006598:	220a      	movs	r2, #10
 800659a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800659c:	4804      	ldr	r0, [pc, #16]	@ (80065b0 <MX_SPI4_Init+0x64>)
 800659e:	f002 fe85 	bl	80092ac <HAL_SPI_Init>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d001      	beq.n	80065ac <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 80065a8:	f000 fa66 	bl	8006a78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80065ac:	bf00      	nop
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	20000f24 	.word	0x20000f24
 80065b4:	40013400 	.word	0x40013400

080065b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b08e      	sub	sp, #56	@ 0x38
 80065bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80065c2:	2200      	movs	r2, #0
 80065c4:	601a      	str	r2, [r3, #0]
 80065c6:	605a      	str	r2, [r3, #4]
 80065c8:	609a      	str	r2, [r3, #8]
 80065ca:	60da      	str	r2, [r3, #12]
 80065cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80065ce:	2300      	movs	r3, #0
 80065d0:	623b      	str	r3, [r7, #32]
 80065d2:	4bb5      	ldr	r3, [pc, #724]	@ (80068a8 <MX_GPIO_Init+0x2f0>)
 80065d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065d6:	4ab4      	ldr	r2, [pc, #720]	@ (80068a8 <MX_GPIO_Init+0x2f0>)
 80065d8:	f043 0310 	orr.w	r3, r3, #16
 80065dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80065de:	4bb2      	ldr	r3, [pc, #712]	@ (80068a8 <MX_GPIO_Init+0x2f0>)
 80065e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065e2:	f003 0310 	and.w	r3, r3, #16
 80065e6:	623b      	str	r3, [r7, #32]
 80065e8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80065ea:	2300      	movs	r3, #0
 80065ec:	61fb      	str	r3, [r7, #28]
 80065ee:	4bae      	ldr	r3, [pc, #696]	@ (80068a8 <MX_GPIO_Init+0x2f0>)
 80065f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065f2:	4aad      	ldr	r2, [pc, #692]	@ (80068a8 <MX_GPIO_Init+0x2f0>)
 80065f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80065fa:	4bab      	ldr	r3, [pc, #684]	@ (80068a8 <MX_GPIO_Init+0x2f0>)
 80065fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006602:	61fb      	str	r3, [r7, #28]
 8006604:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006606:	2300      	movs	r3, #0
 8006608:	61bb      	str	r3, [r7, #24]
 800660a:	4ba7      	ldr	r3, [pc, #668]	@ (80068a8 <MX_GPIO_Init+0x2f0>)
 800660c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800660e:	4aa6      	ldr	r2, [pc, #664]	@ (80068a8 <MX_GPIO_Init+0x2f0>)
 8006610:	f043 0304 	orr.w	r3, r3, #4
 8006614:	6313      	str	r3, [r2, #48]	@ 0x30
 8006616:	4ba4      	ldr	r3, [pc, #656]	@ (80068a8 <MX_GPIO_Init+0x2f0>)
 8006618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800661a:	f003 0304 	and.w	r3, r3, #4
 800661e:	61bb      	str	r3, [r7, #24]
 8006620:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006622:	2300      	movs	r3, #0
 8006624:	617b      	str	r3, [r7, #20]
 8006626:	4ba0      	ldr	r3, [pc, #640]	@ (80068a8 <MX_GPIO_Init+0x2f0>)
 8006628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800662a:	4a9f      	ldr	r2, [pc, #636]	@ (80068a8 <MX_GPIO_Init+0x2f0>)
 800662c:	f043 0320 	orr.w	r3, r3, #32
 8006630:	6313      	str	r3, [r2, #48]	@ 0x30
 8006632:	4b9d      	ldr	r3, [pc, #628]	@ (80068a8 <MX_GPIO_Init+0x2f0>)
 8006634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006636:	f003 0320 	and.w	r3, r3, #32
 800663a:	617b      	str	r3, [r7, #20]
 800663c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800663e:	2300      	movs	r3, #0
 8006640:	613b      	str	r3, [r7, #16]
 8006642:	4b99      	ldr	r3, [pc, #612]	@ (80068a8 <MX_GPIO_Init+0x2f0>)
 8006644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006646:	4a98      	ldr	r2, [pc, #608]	@ (80068a8 <MX_GPIO_Init+0x2f0>)
 8006648:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800664c:	6313      	str	r3, [r2, #48]	@ 0x30
 800664e:	4b96      	ldr	r3, [pc, #600]	@ (80068a8 <MX_GPIO_Init+0x2f0>)
 8006650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006656:	613b      	str	r3, [r7, #16]
 8006658:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800665a:	2300      	movs	r3, #0
 800665c:	60fb      	str	r3, [r7, #12]
 800665e:	4b92      	ldr	r3, [pc, #584]	@ (80068a8 <MX_GPIO_Init+0x2f0>)
 8006660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006662:	4a91      	ldr	r2, [pc, #580]	@ (80068a8 <MX_GPIO_Init+0x2f0>)
 8006664:	f043 0301 	orr.w	r3, r3, #1
 8006668:	6313      	str	r3, [r2, #48]	@ 0x30
 800666a:	4b8f      	ldr	r3, [pc, #572]	@ (80068a8 <MX_GPIO_Init+0x2f0>)
 800666c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	60fb      	str	r3, [r7, #12]
 8006674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006676:	2300      	movs	r3, #0
 8006678:	60bb      	str	r3, [r7, #8]
 800667a:	4b8b      	ldr	r3, [pc, #556]	@ (80068a8 <MX_GPIO_Init+0x2f0>)
 800667c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800667e:	4a8a      	ldr	r2, [pc, #552]	@ (80068a8 <MX_GPIO_Init+0x2f0>)
 8006680:	f043 0302 	orr.w	r3, r3, #2
 8006684:	6313      	str	r3, [r2, #48]	@ 0x30
 8006686:	4b88      	ldr	r3, [pc, #544]	@ (80068a8 <MX_GPIO_Init+0x2f0>)
 8006688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800668a:	f003 0302 	and.w	r3, r3, #2
 800668e:	60bb      	str	r3, [r7, #8]
 8006690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006692:	2300      	movs	r3, #0
 8006694:	607b      	str	r3, [r7, #4]
 8006696:	4b84      	ldr	r3, [pc, #528]	@ (80068a8 <MX_GPIO_Init+0x2f0>)
 8006698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800669a:	4a83      	ldr	r2, [pc, #524]	@ (80068a8 <MX_GPIO_Init+0x2f0>)
 800669c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80066a2:	4b81      	ldr	r3, [pc, #516]	@ (80068a8 <MX_GPIO_Init+0x2f0>)
 80066a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066aa:	607b      	str	r3, [r7, #4]
 80066ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80066ae:	2300      	movs	r3, #0
 80066b0:	603b      	str	r3, [r7, #0]
 80066b2:	4b7d      	ldr	r3, [pc, #500]	@ (80068a8 <MX_GPIO_Init+0x2f0>)
 80066b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066b6:	4a7c      	ldr	r2, [pc, #496]	@ (80068a8 <MX_GPIO_Init+0x2f0>)
 80066b8:	f043 0308 	orr.w	r3, r3, #8
 80066bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80066be:	4b7a      	ldr	r3, [pc, #488]	@ (80068a8 <MX_GPIO_Init+0x2f0>)
 80066c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066c2:	f003 0308 	and.w	r3, r3, #8
 80066c6:	603b      	str	r3, [r7, #0]
 80066c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CELL12_CS_01_Pin|CELL12_CS_02_Pin|CELL12_CS_03_Pin|CELL12_CS_04_Pin
 80066ca:	2201      	movs	r2, #1
 80066cc:	f240 719f 	movw	r1, #1951	@ 0x79f
 80066d0:	4876      	ldr	r0, [pc, #472]	@ (80068ac <MX_GPIO_Init+0x2f4>)
 80066d2:	f000 ff6f 	bl	80075b4 <HAL_GPIO_WritePin>
                          |CELL12_CS_05_Pin|CELL11_CS_10_Pin|CELL11_CS_11_Pin|CELL11_CS_12_Pin
                          |CSU_11_CELLS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, CELL12_CS_06_Pin|CELL12_CS_08_Pin|CELL12_CS_10_Pin|CELL12_CS_09_Pin, GPIO_PIN_SET);
 80066d6:	2201      	movs	r2, #1
 80066d8:	f44f 7168 	mov.w	r1, #928	@ 0x3a0
 80066dc:	4874      	ldr	r0, [pc, #464]	@ (80068b0 <MX_GPIO_Init+0x2f8>)
 80066de:	f000 ff69 	bl	80075b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CELL12_CS_07_GPIO_Port, CELL12_CS_07_Pin, GPIO_PIN_RESET);
 80066e2:	2200      	movs	r2, #0
 80066e4:	2140      	movs	r1, #64	@ 0x40
 80066e6:	4873      	ldr	r0, [pc, #460]	@ (80068b4 <MX_GPIO_Init+0x2fc>)
 80066e8:	f000 ff64 	bl	80075b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CELL12_CS_11_Pin|CELL12_CS_12_Pin|CSU_12_CELLS_Pin|CELL12_TEMP_03_CS_Pin
 80066ec:	2201      	movs	r2, #1
 80066ee:	f64f 5144 	movw	r1, #64836	@ 0xfd44
 80066f2:	4871      	ldr	r0, [pc, #452]	@ (80068b8 <MX_GPIO_Init+0x300>)
 80066f4:	f000 ff5e 	bl	80075b4 <HAL_GPIO_WritePin>
                          |CELL12_TEMP_03_LED_Pin|CELL12_TEMP_02_CS_Pin|CELL11_CS_03_Pin|CELL11_CS_04_Pin
                          |CELL11_CS_05_Pin|CELL11_CS_06_Pin|CELL11_CS_07_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_02_LED_Pin|CELL12_TEMP_01_CS_Pin|SPI3_CS_03_Pin|SPI3_CS_02_Pin, GPIO_PIN_SET);
 80066f8:	2201      	movs	r2, #1
 80066fa:	2133      	movs	r1, #51	@ 0x33
 80066fc:	486d      	ldr	r0, [pc, #436]	@ (80068b4 <MX_GPIO_Init+0x2fc>)
 80066fe:	f000 ff59 	bl	80075b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CELL12_TEMP_01_LED_Pin|GPIO_PIN_1, GPIO_PIN_SET);
 8006702:	2201      	movs	r2, #1
 8006704:	2103      	movs	r1, #3
 8006706:	486d      	ldr	r0, [pc, #436]	@ (80068bc <MX_GPIO_Init+0x304>)
 8006708:	f000 ff54 	bl	80075b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CELL11_CS_01_Pin|CELL11_CS_02_Pin|CELL11_TEMP_03_CS_Pin|CS_ISOSPI_12_CELLS_Pin, GPIO_PIN_SET);
 800670c:	2201      	movs	r2, #1
 800670e:	f648 0103 	movw	r1, #34819	@ 0x8803
 8006712:	486b      	ldr	r0, [pc, #428]	@ (80068c0 <MX_GPIO_Init+0x308>)
 8006714:	f000 ff4e 	bl	80075b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, CELL11_CS_08_Pin|CELL11_CS_09_Pin, GPIO_PIN_SET);
 8006718:	2201      	movs	r2, #1
 800671a:	2103      	movs	r1, #3
 800671c:	4869      	ldr	r0, [pc, #420]	@ (80068c4 <MX_GPIO_Init+0x30c>)
 800671e:	f000 ff49 	bl	80075b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_03_LED_Pin|CELL11_TEMP_02_CS_Pin|CELL11_TEMP_02_LED_Pin|CELL11_TEMP_01_CS_Pin
 8006722:	2201      	movs	r2, #1
 8006724:	f44f 51f2 	mov.w	r1, #7744	@ 0x1e40
 8006728:	4867      	ldr	r0, [pc, #412]	@ (80068c8 <MX_GPIO_Init+0x310>)
 800672a:	f000 ff43 	bl	80075b4 <HAL_GPIO_WritePin>
                          |CELL11_TEMP_01_LED_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_ISOSPI_11_CELLS_GPIO_Port, CS_ISOSPI_11_CELLS_Pin, GPIO_PIN_SET);
 800672e:	2201      	movs	r2, #1
 8006730:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006734:	4865      	ldr	r0, [pc, #404]	@ (80068cc <MX_GPIO_Init+0x314>)
 8006736:	f000 ff3d 	bl	80075b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, DISPLAY_IO_1_Pin|DISPLAY_IO_2_Pin|BACKLIGHT_1_Pin|BACKLIGHT_2_Pin
 800673a:	2200      	movs	r2, #0
 800673c:	f24e 013c 	movw	r1, #57404	@ 0xe03c
 8006740:	4860      	ldr	r0, [pc, #384]	@ (80068c4 <MX_GPIO_Init+0x30c>)
 8006742:	f000 ff37 	bl	80075b4 <HAL_GPIO_WritePin>
                          |LED_09_Pin|LED_04_Pin|LED_08_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_01_Pin|LED_02_Pin, GPIO_PIN_RESET);
 8006746:	2200      	movs	r2, #0
 8006748:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 800674c:	485e      	ldr	r0, [pc, #376]	@ (80068c8 <MX_GPIO_Init+0x310>)
 800674e:	f000 ff31 	bl	80075b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DISPLAY_CS_Pin|DISPLAY_CSD3_Pin, GPIO_PIN_RESET);
 8006752:	2200      	movs	r2, #0
 8006754:	210c      	movs	r1, #12
 8006756:	485d      	ldr	r0, [pc, #372]	@ (80068cc <MX_GPIO_Init+0x314>)
 8006758:	f000 ff2c 	bl	80075b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_03_Pin|LED_07_Pin, GPIO_PIN_RESET);
 800675c:	2200      	movs	r2, #0
 800675e:	2118      	movs	r1, #24
 8006760:	4857      	ldr	r0, [pc, #348]	@ (80068c0 <MX_GPIO_Init+0x308>)
 8006762:	f000 ff27 	bl	80075b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8006766:	2200      	movs	r2, #0
 8006768:	2103      	movs	r1, #3
 800676a:	4850      	ldr	r0, [pc, #320]	@ (80068ac <MX_GPIO_Init+0x2f4>)
 800676c:	f000 ff22 	bl	80075b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED_DC_Y_Pin|LED_DC_G_Pin|LED_PC_Y_Pin|LED_PC_G_Pin, GPIO_PIN_RESET);
 8006770:	2200      	movs	r2, #0
 8006772:	21f0      	movs	r1, #240	@ 0xf0
 8006774:	484e      	ldr	r0, [pc, #312]	@ (80068b0 <MX_GPIO_Init+0x2f8>)
 8006776:	f000 ff1d 	bl	80075b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CELL12_CS_01_Pin CELL12_CS_02_Pin CELL12_CS_03_Pin CELL12_CS_04_Pin
                           CELL11_CS_10_Pin CELL11_CS_11_Pin CELL11_CS_12_Pin CSU_11_CELLS_Pin
                           PE0 PE1 */
  GPIO_InitStruct.Pin = CELL12_CS_01_Pin|CELL12_CS_02_Pin|CELL12_CS_03_Pin|CELL12_CS_04_Pin
 800677a:	f240 738f 	movw	r3, #1935	@ 0x78f
 800677e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |CELL11_CS_10_Pin|CELL11_CS_11_Pin|CELL11_CS_12_Pin|CSU_11_CELLS_Pin
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006780:	2301      	movs	r3, #1
 8006782:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006784:	2300      	movs	r3, #0
 8006786:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006788:	2300      	movs	r3, #0
 800678a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800678c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006790:	4619      	mov	r1, r3
 8006792:	4846      	ldr	r0, [pc, #280]	@ (80068ac <MX_GPIO_Init+0x2f4>)
 8006794:	f000 fd62 	bl	800725c <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_CS_05_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_05_Pin;
 8006798:	2310      	movs	r3, #16
 800679a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800679c:	2301      	movs	r3, #1
 800679e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067a0:	2300      	movs	r3, #0
 80067a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80067a4:	2302      	movs	r3, #2
 80067a6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_CS_05_GPIO_Port, &GPIO_InitStruct);
 80067a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80067ac:	4619      	mov	r1, r3
 80067ae:	483f      	ldr	r0, [pc, #252]	@ (80068ac <MX_GPIO_Init+0x2f4>)
 80067b0:	f000 fd54 	bl	800725c <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_CS_06_Pin LED_DC_Y_Pin LED_DC_G_Pin LED_PC_Y_Pin
                           LED_PC_G_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_06_Pin|LED_DC_Y_Pin|LED_DC_G_Pin|LED_PC_Y_Pin
 80067b4:	23f0      	movs	r3, #240	@ 0xf0
 80067b6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LED_PC_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067b8:	2301      	movs	r3, #1
 80067ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067bc:	2300      	movs	r3, #0
 80067be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067c0:	2300      	movs	r3, #0
 80067c2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80067c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80067c8:	4619      	mov	r1, r3
 80067ca:	4839      	ldr	r0, [pc, #228]	@ (80068b0 <MX_GPIO_Init+0x2f8>)
 80067cc:	f000 fd46 	bl	800725c <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_CS_07_Pin SPI3_CS_03_Pin SPI3_CS_02_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_07_Pin|SPI3_CS_03_Pin|SPI3_CS_02_Pin;
 80067d0:	2370      	movs	r3, #112	@ 0x70
 80067d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067d4:	2301      	movs	r3, #1
 80067d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067d8:	2300      	movs	r3, #0
 80067da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067dc:	2300      	movs	r3, #0
 80067de:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80067e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80067e4:	4619      	mov	r1, r3
 80067e6:	4833      	ldr	r0, [pc, #204]	@ (80068b4 <MX_GPIO_Init+0x2fc>)
 80067e8:	f000 fd38 	bl	800725c <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_CS_08_Pin CELL12_CS_10_Pin CELL12_CS_09_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_08_Pin|CELL12_CS_10_Pin|CELL12_CS_09_Pin;
 80067ec:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80067f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067f2:	2301      	movs	r3, #1
 80067f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067f6:	2300      	movs	r3, #0
 80067f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80067fa:	2302      	movs	r3, #2
 80067fc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80067fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006802:	4619      	mov	r1, r3
 8006804:	482a      	ldr	r0, [pc, #168]	@ (80068b0 <MX_GPIO_Init+0x2f8>)
 8006806:	f000 fd29 	bl	800725c <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_CS_11_Pin CELL11_CS_03_Pin CELL11_CS_04_Pin CELL11_CS_05_Pin
                           CELL11_CS_06_Pin CELL11_CS_07_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_11_Pin|CELL11_CS_03_Pin|CELL11_CS_04_Pin|CELL11_CS_05_Pin
 800680a:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800680e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |CELL11_CS_06_Pin|CELL11_CS_07_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006810:	2301      	movs	r3, #1
 8006812:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006814:	2300      	movs	r3, #0
 8006816:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006818:	2300      	movs	r3, #0
 800681a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800681c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006820:	4619      	mov	r1, r3
 8006822:	4825      	ldr	r0, [pc, #148]	@ (80068b8 <MX_GPIO_Init+0x300>)
 8006824:	f000 fd1a 	bl	800725c <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_CS_12_Pin CSU_12_CELLS_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_12_Pin|CSU_12_CELLS_Pin;
 8006828:	f640 0304 	movw	r3, #2052	@ 0x804
 800682c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800682e:	2301      	movs	r3, #1
 8006830:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006832:	2300      	movs	r3, #0
 8006834:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006836:	2302      	movs	r3, #2
 8006838:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800683a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800683e:	4619      	mov	r1, r3
 8006840:	481d      	ldr	r0, [pc, #116]	@ (80068b8 <MX_GPIO_Init+0x300>)
 8006842:	f000 fd0b 	bl	800725c <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_TEMP_03_CS_Pin CELL12_TEMP_02_CS_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_03_CS_Pin|CELL12_TEMP_02_CS_Pin;
 8006846:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 800684a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800684c:	2301      	movs	r3, #1
 800684e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006850:	2301      	movs	r3, #1
 8006852:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006854:	2303      	movs	r3, #3
 8006856:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006858:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800685c:	4619      	mov	r1, r3
 800685e:	4816      	ldr	r0, [pc, #88]	@ (80068b8 <MX_GPIO_Init+0x300>)
 8006860:	f000 fcfc 	bl	800725c <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_03_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_03_LED_Pin;
 8006864:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006868:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800686a:	2301      	movs	r3, #1
 800686c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800686e:	2302      	movs	r3, #2
 8006870:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006872:	2303      	movs	r3, #3
 8006874:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_03_LED_GPIO_Port, &GPIO_InitStruct);
 8006876:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800687a:	4619      	mov	r1, r3
 800687c:	480e      	ldr	r0, [pc, #56]	@ (80068b8 <MX_GPIO_Init+0x300>)
 800687e:	f000 fced 	bl	800725c <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_02_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_02_LED_Pin;
 8006882:	2301      	movs	r3, #1
 8006884:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006886:	2301      	movs	r3, #1
 8006888:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800688a:	2302      	movs	r3, #2
 800688c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800688e:	2303      	movs	r3, #3
 8006890:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_02_LED_GPIO_Port, &GPIO_InitStruct);
 8006892:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006896:	4619      	mov	r1, r3
 8006898:	4806      	ldr	r0, [pc, #24]	@ (80068b4 <MX_GPIO_Init+0x2fc>)
 800689a:	f000 fcdf 	bl	800725c <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_01_CS_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_01_CS_Pin;
 800689e:	2302      	movs	r3, #2
 80068a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e014      	b.n	80068d0 <MX_GPIO_Init+0x318>
 80068a6:	bf00      	nop
 80068a8:	40023800 	.word	0x40023800
 80068ac:	40021000 	.word	0x40021000
 80068b0:	40022000 	.word	0x40022000
 80068b4:	40020800 	.word	0x40020800
 80068b8:	40021400 	.word	0x40021400
 80068bc:	40020000 	.word	0x40020000
 80068c0:	40020400 	.word	0x40020400
 80068c4:	40021800 	.word	0x40021800
 80068c8:	40021c00 	.word	0x40021c00
 80068cc:	40020c00 	.word	0x40020c00
 80068d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80068d2:	2301      	movs	r3, #1
 80068d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068d6:	2303      	movs	r3, #3
 80068d8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_01_CS_GPIO_Port, &GPIO_InitStruct);
 80068da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80068de:	4619      	mov	r1, r3
 80068e0:	4845      	ldr	r0, [pc, #276]	@ (80069f8 <MX_GPIO_Init+0x440>)
 80068e2:	f000 fcbb 	bl	800725c <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_01_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_01_LED_Pin;
 80068e6:	2301      	movs	r3, #1
 80068e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80068ea:	2301      	movs	r3, #1
 80068ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80068ee:	2302      	movs	r3, #2
 80068f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068f2:	2303      	movs	r3, #3
 80068f4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_01_LED_GPIO_Port, &GPIO_InitStruct);
 80068f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80068fa:	4619      	mov	r1, r3
 80068fc:	483f      	ldr	r0, [pc, #252]	@ (80069fc <MX_GPIO_Init+0x444>)
 80068fe:	f000 fcad 	bl	800725c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006902:	2302      	movs	r3, #2
 8006904:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006906:	2301      	movs	r3, #1
 8006908:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800690a:	2300      	movs	r3, #0
 800690c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800690e:	2302      	movs	r3, #2
 8006910:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006912:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006916:	4619      	mov	r1, r3
 8006918:	4838      	ldr	r0, [pc, #224]	@ (80069fc <MX_GPIO_Init+0x444>)
 800691a:	f000 fc9f 	bl	800725c <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_CS_01_Pin CELL11_CS_02_Pin CS_ISOSPI_12_CELLS_Pin LED_03_Pin
                           LED_07_Pin */
  GPIO_InitStruct.Pin = CELL11_CS_01_Pin|CELL11_CS_02_Pin|CS_ISOSPI_12_CELLS_Pin|LED_03_Pin
 800691e:	f248 031b 	movw	r3, #32795	@ 0x801b
 8006922:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LED_07_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006924:	2301      	movs	r3, #1
 8006926:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006928:	2300      	movs	r3, #0
 800692a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800692c:	2300      	movs	r3, #0
 800692e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006930:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006934:	4619      	mov	r1, r3
 8006936:	4832      	ldr	r0, [pc, #200]	@ (8006a00 <MX_GPIO_Init+0x448>)
 8006938:	f000 fc90 	bl	800725c <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_CS_08_Pin CELL11_CS_09_Pin DISPLAY_IO_1_Pin DISPLAY_IO_2_Pin
                           BACKLIGHT_1_Pin BACKLIGHT_2_Pin LED_09_Pin LED_04_Pin
                           LED_08_Pin */
  GPIO_InitStruct.Pin = CELL11_CS_08_Pin|CELL11_CS_09_Pin|DISPLAY_IO_1_Pin|DISPLAY_IO_2_Pin
 800693c:	f24e 033f 	movw	r3, #57407	@ 0xe03f
 8006940:	627b      	str	r3, [r7, #36]	@ 0x24
                          |BACKLIGHT_1_Pin|BACKLIGHT_2_Pin|LED_09_Pin|LED_04_Pin
                          |LED_08_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006942:	2301      	movs	r3, #1
 8006944:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006946:	2300      	movs	r3, #0
 8006948:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800694a:	2300      	movs	r3, #0
 800694c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800694e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006952:	4619      	mov	r1, r3
 8006954:	482b      	ldr	r0, [pc, #172]	@ (8006a04 <MX_GPIO_Init+0x44c>)
 8006956:	f000 fc81 	bl	800725c <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL11_TEMP_03_CS_Pin */
  GPIO_InitStruct.Pin = CELL11_TEMP_03_CS_Pin;
 800695a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800695e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006960:	2301      	movs	r3, #1
 8006962:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006964:	2301      	movs	r3, #1
 8006966:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006968:	2303      	movs	r3, #3
 800696a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL11_TEMP_03_CS_GPIO_Port, &GPIO_InitStruct);
 800696c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006970:	4619      	mov	r1, r3
 8006972:	4823      	ldr	r0, [pc, #140]	@ (8006a00 <MX_GPIO_Init+0x448>)
 8006974:	f000 fc72 	bl	800725c <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_TEMP_03_LED_Pin CELL11_TEMP_02_LED_Pin CELL11_TEMP_01_LED_Pin */
  GPIO_InitStruct.Pin = CELL11_TEMP_03_LED_Pin|CELL11_TEMP_02_LED_Pin|CELL11_TEMP_01_LED_Pin;
 8006978:	f44f 53a2 	mov.w	r3, #5184	@ 0x1440
 800697c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800697e:	2301      	movs	r3, #1
 8006980:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006982:	2302      	movs	r3, #2
 8006984:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006986:	2303      	movs	r3, #3
 8006988:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800698a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800698e:	4619      	mov	r1, r3
 8006990:	481d      	ldr	r0, [pc, #116]	@ (8006a08 <MX_GPIO_Init+0x450>)
 8006992:	f000 fc63 	bl	800725c <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_TEMP_02_CS_Pin CELL11_TEMP_01_CS_Pin */
  GPIO_InitStruct.Pin = CELL11_TEMP_02_CS_Pin|CELL11_TEMP_01_CS_Pin;
 8006996:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800699a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800699c:	2301      	movs	r3, #1
 800699e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80069a0:	2301      	movs	r3, #1
 80069a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069a4:	2303      	movs	r3, #3
 80069a6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80069a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069ac:	4619      	mov	r1, r3
 80069ae:	4816      	ldr	r0, [pc, #88]	@ (8006a08 <MX_GPIO_Init+0x450>)
 80069b0:	f000 fc54 	bl	800725c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_ISOSPI_11_CELLS_Pin DISPLAY_CS_Pin DISPLAY_CSD3_Pin */
  GPIO_InitStruct.Pin = CS_ISOSPI_11_CELLS_Pin|DISPLAY_CS_Pin|DISPLAY_CSD3_Pin;
 80069b4:	f240 430c 	movw	r3, #1036	@ 0x40c
 80069b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069ba:	2301      	movs	r3, #1
 80069bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069be:	2300      	movs	r3, #0
 80069c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069c2:	2300      	movs	r3, #0
 80069c4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80069c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069ca:	4619      	mov	r1, r3
 80069cc:	480f      	ldr	r0, [pc, #60]	@ (8006a0c <MX_GPIO_Init+0x454>)
 80069ce:	f000 fc45 	bl	800725c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_01_Pin LED_02_Pin */
  GPIO_InitStruct.Pin = LED_01_Pin|LED_02_Pin;
 80069d2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80069d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069d8:	2301      	movs	r3, #1
 80069da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069dc:	2300      	movs	r3, #0
 80069de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069e0:	2300      	movs	r3, #0
 80069e2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80069e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069e8:	4619      	mov	r1, r3
 80069ea:	4807      	ldr	r0, [pc, #28]	@ (8006a08 <MX_GPIO_Init+0x450>)
 80069ec:	f000 fc36 	bl	800725c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80069f0:	bf00      	nop
 80069f2:	3738      	adds	r7, #56	@ 0x38
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	40020800 	.word	0x40020800
 80069fc:	40020000 	.word	0x40020000
 8006a00:	40020400 	.word	0x40020400
 8006a04:	40021800 	.word	0x40021800
 8006a08:	40021c00 	.word	0x40021c00
 8006a0c:	40020c00 	.word	0x40020c00

08006a10 <Scan_I2C_Bus>:

/* USER CODE BEGIN 4 */

void Scan_I2C_Bus(void)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	af00      	add	r7, sp, #0

      /* Declare the address variable */

    /* Iterate over the possible 7-bit I²C addresses (1 to 127) */
    for (address = 1U; address < 128U; address++)
 8006a14:	4b15      	ldr	r3, [pc, #84]	@ (8006a6c <Scan_I2C_Bus+0x5c>)
 8006a16:	2201      	movs	r2, #1
 8006a18:	701a      	strb	r2, [r3, #0]
 8006a1a:	e01f      	b.n	8006a5c <Scan_I2C_Bus+0x4c>
    {
        /* Check if a device is ready at this address
         * The address is left-shifted by 1 as HAL_I2C_IsDeviceReady expects the 7-bit address in the upper bits.
         */
        result = HAL_I2C_IsDeviceReady(&hi2c2, (address << 1), 1U, 10U);
 8006a1c:	4b13      	ldr	r3, [pc, #76]	@ (8006a6c <Scan_I2C_Bus+0x5c>)
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	005b      	lsls	r3, r3, #1
 8006a22:	b299      	uxth	r1, r3
 8006a24:	230a      	movs	r3, #10
 8006a26:	2201      	movs	r2, #1
 8006a28:	4811      	ldr	r0, [pc, #68]	@ (8006a70 <Scan_I2C_Bus+0x60>)
 8006a2a:	f001 fa4d 	bl	8007ec8 <HAL_I2C_IsDeviceReady>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	461a      	mov	r2, r3
 8006a32:	4b10      	ldr	r3, [pc, #64]	@ (8006a74 <Scan_I2C_Bus+0x64>)
 8006a34:	701a      	strb	r2, [r3, #0]

        if (result == HAL_OK)
 8006a36:	4b0f      	ldr	r3, [pc, #60]	@ (8006a74 <Scan_I2C_Bus+0x64>)
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d108      	bne.n	8006a50 <Scan_I2C_Bus+0x40>
        {
            /* Display the detected address (your Display_Address function should handle this)
             * For example, this could light up LEDs or update an LCD.
             */
            Display_Address(address);
 8006a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8006a6c <Scan_I2C_Bus+0x5c>)
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7fd feb4 	bl	80047b0 <Display_Address>
            HAL_Delay(1000U);  /* Display the address for 1 second */
 8006a48:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006a4c:	f000 fafc 	bl	8007048 <HAL_Delay>
    for (address = 1U; address < 128U; address++)
 8006a50:	4b06      	ldr	r3, [pc, #24]	@ (8006a6c <Scan_I2C_Bus+0x5c>)
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	3301      	adds	r3, #1
 8006a56:	b2da      	uxtb	r2, r3
 8006a58:	4b04      	ldr	r3, [pc, #16]	@ (8006a6c <Scan_I2C_Bus+0x5c>)
 8006a5a:	701a      	strb	r2, [r3, #0]
 8006a5c:	4b03      	ldr	r3, [pc, #12]	@ (8006a6c <Scan_I2C_Bus+0x5c>)
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	b25b      	sxtb	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	dada      	bge.n	8006a1c <Scan_I2C_Bus+0xc>
        }
    }
}
 8006a66:	bf00      	nop
 8006a68:	bf00      	nop
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	20000ca0 	.word	0x20000ca0
 8006a70:	20000d74 	.word	0x20000d74
 8006a74:	20000ca1 	.word	0x20000ca1

08006a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006a7c:	b672      	cpsid	i
}
 8006a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006a80:	bf00      	nop
 8006a82:	e7fd      	b.n	8006a80 <Error_Handler+0x8>

08006a84 <mcu_spiInit>:



/********* MCU SPECIFIC SPI CODE STARTS HERE **********/
void mcu_spiInit(uint8_t busId)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	71fb      	strb	r3, [r7, #7]
    /* Add MCU specific init necessary for I2C to be used */




}
 8006a8e:	bf00      	nop
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
	...

08006a9c <mcu_spiTransfer>:

uint8_t mcu_spiTransfer(uint8_t busId, uint8_t csGPIOId, uint8_t count, uint8_t* txBuf, uint8_t* rxBuf)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b086      	sub	sp, #24
 8006aa0:	af02      	add	r7, sp, #8
 8006aa2:	603b      	str	r3, [r7, #0]
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	71fb      	strb	r3, [r7, #7]
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	71bb      	strb	r3, [r7, #6]
 8006aac:	4613      	mov	r3, r2
 8006aae:	717b      	strb	r3, [r7, #5]
    /*
     *  Add MCU specific SPI read/write code here.
     */

    SPI_HandleTypeDef *hspi = NULL; // Declare local SPI handle variable
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	60fb      	str	r3, [r7, #12]

    // Select the SPI handle based on the busId value
    if(busId == 0)
 8006ab4:	79fb      	ldrb	r3, [r7, #7]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d102      	bne.n	8006ac0 <mcu_spiTransfer+0x24>
    {
        hspi = &hspi1;  // Map busId 0 to SPI1
 8006aba:	4b0f      	ldr	r3, [pc, #60]	@ (8006af8 <mcu_spiTransfer+0x5c>)
 8006abc:	60fb      	str	r3, [r7, #12]
 8006abe:	e007      	b.n	8006ad0 <mcu_spiTransfer+0x34>
    }
    else if(busId == 1)
 8006ac0:	79fb      	ldrb	r3, [r7, #7]
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d102      	bne.n	8006acc <mcu_spiTransfer+0x30>
    {
        hspi = &hspi2;  // Map busId 1 to SPI2
 8006ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8006afc <mcu_spiTransfer+0x60>)
 8006ac8:	60fb      	str	r3, [r7, #12]
 8006aca:	e001      	b.n	8006ad0 <mcu_spiTransfer+0x34>
    }
    else
    {
        // Invalid bus id, return error
        return 1;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e00f      	b.n	8006af0 <mcu_spiTransfer+0x54>
    }
//    HAL_SPI_TransmitReceive(hspi, txBuf, rxBuf, count, HAL_MAX_DELAY);
    // Perform the SPI transfer using the selected SPI handle
    if (HAL_SPI_TransmitReceive(hspi, txBuf, rxBuf, count, HAL_MAX_DELAY) != HAL_OK)
 8006ad0:	797b      	ldrb	r3, [r7, #5]
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ad8:	9200      	str	r2, [sp, #0]
 8006ada:	69ba      	ldr	r2, [r7, #24]
 8006adc:	6839      	ldr	r1, [r7, #0]
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f002 feca 	bl	8009878 <HAL_SPI_TransmitReceive>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d001      	beq.n	8006aee <mcu_spiTransfer+0x52>
    {
        return 1; // SPI transaction failed
 8006aea:	2301      	movs	r3, #1
 8006aec:	e000      	b.n	8006af0 <mcu_spiTransfer+0x54>
    }
    return 0; // Transaction successful
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	20000e1c 	.word	0x20000e1c
 8006afc:	20000e74 	.word	0x20000e74

08006b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b06:	2300      	movs	r3, #0
 8006b08:	607b      	str	r3, [r7, #4]
 8006b0a:	4b10      	ldr	r3, [pc, #64]	@ (8006b4c <HAL_MspInit+0x4c>)
 8006b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b0e:	4a0f      	ldr	r2, [pc, #60]	@ (8006b4c <HAL_MspInit+0x4c>)
 8006b10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006b14:	6453      	str	r3, [r2, #68]	@ 0x44
 8006b16:	4b0d      	ldr	r3, [pc, #52]	@ (8006b4c <HAL_MspInit+0x4c>)
 8006b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b1e:	607b      	str	r3, [r7, #4]
 8006b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006b22:	2300      	movs	r3, #0
 8006b24:	603b      	str	r3, [r7, #0]
 8006b26:	4b09      	ldr	r3, [pc, #36]	@ (8006b4c <HAL_MspInit+0x4c>)
 8006b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b2a:	4a08      	ldr	r2, [pc, #32]	@ (8006b4c <HAL_MspInit+0x4c>)
 8006b2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b30:	6413      	str	r3, [r2, #64]	@ 0x40
 8006b32:	4b06      	ldr	r3, [pc, #24]	@ (8006b4c <HAL_MspInit+0x4c>)
 8006b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b3a:	603b      	str	r3, [r7, #0]
 8006b3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006b3e:	bf00      	nop
 8006b40:	370c      	adds	r7, #12
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	40023800 	.word	0x40023800

08006b50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b08c      	sub	sp, #48	@ 0x30
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b58:	f107 031c 	add.w	r3, r7, #28
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	601a      	str	r2, [r3, #0]
 8006b60:	605a      	str	r2, [r3, #4]
 8006b62:	609a      	str	r2, [r3, #8]
 8006b64:	60da      	str	r2, [r3, #12]
 8006b66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a32      	ldr	r2, [pc, #200]	@ (8006c38 <HAL_I2C_MspInit+0xe8>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d12c      	bne.n	8006bcc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006b72:	2300      	movs	r3, #0
 8006b74:	61bb      	str	r3, [r7, #24]
 8006b76:	4b31      	ldr	r3, [pc, #196]	@ (8006c3c <HAL_I2C_MspInit+0xec>)
 8006b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b7a:	4a30      	ldr	r2, [pc, #192]	@ (8006c3c <HAL_I2C_MspInit+0xec>)
 8006b7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8006b82:	4b2e      	ldr	r3, [pc, #184]	@ (8006c3c <HAL_I2C_MspInit+0xec>)
 8006b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b8a:	61bb      	str	r3, [r7, #24]
 8006b8c:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006b8e:	2330      	movs	r3, #48	@ 0x30
 8006b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006b92:	2312      	movs	r3, #18
 8006b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b96:	2300      	movs	r3, #0
 8006b98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006b9e:	2304      	movs	r3, #4
 8006ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006ba2:	f107 031c 	add.w	r3, r7, #28
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	4825      	ldr	r0, [pc, #148]	@ (8006c40 <HAL_I2C_MspInit+0xf0>)
 8006baa:	f000 fb57 	bl	800725c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006bae:	2300      	movs	r3, #0
 8006bb0:	617b      	str	r3, [r7, #20]
 8006bb2:	4b22      	ldr	r3, [pc, #136]	@ (8006c3c <HAL_I2C_MspInit+0xec>)
 8006bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bb6:	4a21      	ldr	r2, [pc, #132]	@ (8006c3c <HAL_I2C_MspInit+0xec>)
 8006bb8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006bbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8006bbe:	4b1f      	ldr	r3, [pc, #124]	@ (8006c3c <HAL_I2C_MspInit+0xec>)
 8006bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bc6:	617b      	str	r3, [r7, #20]
 8006bc8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8006bca:	e031      	b.n	8006c30 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C3)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a1c      	ldr	r2, [pc, #112]	@ (8006c44 <HAL_I2C_MspInit+0xf4>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d12c      	bne.n	8006c30 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	613b      	str	r3, [r7, #16]
 8006bda:	4b18      	ldr	r3, [pc, #96]	@ (8006c3c <HAL_I2C_MspInit+0xec>)
 8006bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bde:	4a17      	ldr	r2, [pc, #92]	@ (8006c3c <HAL_I2C_MspInit+0xec>)
 8006be0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8006be6:	4b15      	ldr	r3, [pc, #84]	@ (8006c3c <HAL_I2C_MspInit+0xec>)
 8006be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bee:	613b      	str	r3, [r7, #16]
 8006bf0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8006bf2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8006bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006bf8:	2312      	movs	r3, #18
 8006bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c00:	2303      	movs	r3, #3
 8006c02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006c04:	2304      	movs	r3, #4
 8006c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006c08:	f107 031c 	add.w	r3, r7, #28
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	480c      	ldr	r0, [pc, #48]	@ (8006c40 <HAL_I2C_MspInit+0xf0>)
 8006c10:	f000 fb24 	bl	800725c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006c14:	2300      	movs	r3, #0
 8006c16:	60fb      	str	r3, [r7, #12]
 8006c18:	4b08      	ldr	r3, [pc, #32]	@ (8006c3c <HAL_I2C_MspInit+0xec>)
 8006c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c1c:	4a07      	ldr	r2, [pc, #28]	@ (8006c3c <HAL_I2C_MspInit+0xec>)
 8006c1e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006c22:	6413      	str	r3, [r2, #64]	@ 0x40
 8006c24:	4b05      	ldr	r3, [pc, #20]	@ (8006c3c <HAL_I2C_MspInit+0xec>)
 8006c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c2c:	60fb      	str	r3, [r7, #12]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
}
 8006c30:	bf00      	nop
 8006c32:	3730      	adds	r7, #48	@ 0x30
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	40005800 	.word	0x40005800
 8006c3c:	40023800 	.word	0x40023800
 8006c40:	40021c00 	.word	0x40021c00
 8006c44:	40005c00 	.word	0x40005c00

08006c48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b090      	sub	sp, #64	@ 0x40
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006c54:	2200      	movs	r2, #0
 8006c56:	601a      	str	r2, [r3, #0]
 8006c58:	605a      	str	r2, [r3, #4]
 8006c5a:	609a      	str	r2, [r3, #8]
 8006c5c:	60da      	str	r2, [r3, #12]
 8006c5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a65      	ldr	r2, [pc, #404]	@ (8006dfc <HAL_SPI_MspInit+0x1b4>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d12c      	bne.n	8006cc4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c6e:	4b64      	ldr	r3, [pc, #400]	@ (8006e00 <HAL_SPI_MspInit+0x1b8>)
 8006c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c72:	4a63      	ldr	r2, [pc, #396]	@ (8006e00 <HAL_SPI_MspInit+0x1b8>)
 8006c74:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006c78:	6453      	str	r3, [r2, #68]	@ 0x44
 8006c7a:	4b61      	ldr	r3, [pc, #388]	@ (8006e00 <HAL_SPI_MspInit+0x1b8>)
 8006c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c86:	2300      	movs	r3, #0
 8006c88:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c8a:	4b5d      	ldr	r3, [pc, #372]	@ (8006e00 <HAL_SPI_MspInit+0x1b8>)
 8006c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c8e:	4a5c      	ldr	r2, [pc, #368]	@ (8006e00 <HAL_SPI_MspInit+0x1b8>)
 8006c90:	f043 0301 	orr.w	r3, r3, #1
 8006c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8006c96:	4b5a      	ldr	r3, [pc, #360]	@ (8006e00 <HAL_SPI_MspInit+0x1b8>)
 8006c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c9a:	f003 0301 	and.w	r3, r3, #1
 8006c9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006ca2:	23e0      	movs	r3, #224	@ 0xe0
 8006ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ca6:	2302      	movs	r3, #2
 8006ca8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006caa:	2300      	movs	r3, #0
 8006cac:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006cb2:	2305      	movs	r3, #5
 8006cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006cba:	4619      	mov	r1, r3
 8006cbc:	4851      	ldr	r0, [pc, #324]	@ (8006e04 <HAL_SPI_MspInit+0x1bc>)
 8006cbe:	f000 facd 	bl	800725c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8006cc2:	e096      	b.n	8006df2 <HAL_SPI_MspInit+0x1aa>
  else if(hspi->Instance==SPI2)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a4f      	ldr	r2, [pc, #316]	@ (8006e08 <HAL_SPI_MspInit+0x1c0>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d12c      	bne.n	8006d28 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006cce:	2300      	movs	r3, #0
 8006cd0:	623b      	str	r3, [r7, #32]
 8006cd2:	4b4b      	ldr	r3, [pc, #300]	@ (8006e00 <HAL_SPI_MspInit+0x1b8>)
 8006cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cd6:	4a4a      	ldr	r2, [pc, #296]	@ (8006e00 <HAL_SPI_MspInit+0x1b8>)
 8006cd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006cdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8006cde:	4b48      	ldr	r3, [pc, #288]	@ (8006e00 <HAL_SPI_MspInit+0x1b8>)
 8006ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ce2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ce6:	623b      	str	r3, [r7, #32]
 8006ce8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8006cea:	2300      	movs	r3, #0
 8006cec:	61fb      	str	r3, [r7, #28]
 8006cee:	4b44      	ldr	r3, [pc, #272]	@ (8006e00 <HAL_SPI_MspInit+0x1b8>)
 8006cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cf2:	4a43      	ldr	r2, [pc, #268]	@ (8006e00 <HAL_SPI_MspInit+0x1b8>)
 8006cf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8006cfa:	4b41      	ldr	r3, [pc, #260]	@ (8006e00 <HAL_SPI_MspInit+0x1b8>)
 8006cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d02:	61fb      	str	r3, [r7, #28]
 8006d04:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006d06:	230e      	movs	r3, #14
 8006d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d0a:	2302      	movs	r3, #2
 8006d0c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d12:	2303      	movs	r3, #3
 8006d14:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006d16:	2305      	movs	r3, #5
 8006d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8006d1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006d1e:	4619      	mov	r1, r3
 8006d20:	483a      	ldr	r0, [pc, #232]	@ (8006e0c <HAL_SPI_MspInit+0x1c4>)
 8006d22:	f000 fa9b 	bl	800725c <HAL_GPIO_Init>
}
 8006d26:	e064      	b.n	8006df2 <HAL_SPI_MspInit+0x1aa>
  else if(hspi->Instance==SPI3)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a38      	ldr	r2, [pc, #224]	@ (8006e10 <HAL_SPI_MspInit+0x1c8>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d12d      	bne.n	8006d8e <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006d32:	2300      	movs	r3, #0
 8006d34:	61bb      	str	r3, [r7, #24]
 8006d36:	4b32      	ldr	r3, [pc, #200]	@ (8006e00 <HAL_SPI_MspInit+0x1b8>)
 8006d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d3a:	4a31      	ldr	r2, [pc, #196]	@ (8006e00 <HAL_SPI_MspInit+0x1b8>)
 8006d3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d40:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d42:	4b2f      	ldr	r3, [pc, #188]	@ (8006e00 <HAL_SPI_MspInit+0x1b8>)
 8006d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d4a:	61bb      	str	r3, [r7, #24]
 8006d4c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d4e:	2300      	movs	r3, #0
 8006d50:	617b      	str	r3, [r7, #20]
 8006d52:	4b2b      	ldr	r3, [pc, #172]	@ (8006e00 <HAL_SPI_MspInit+0x1b8>)
 8006d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d56:	4a2a      	ldr	r2, [pc, #168]	@ (8006e00 <HAL_SPI_MspInit+0x1b8>)
 8006d58:	f043 0304 	orr.w	r3, r3, #4
 8006d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8006d5e:	4b28      	ldr	r3, [pc, #160]	@ (8006e00 <HAL_SPI_MspInit+0x1b8>)
 8006d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d62:	f003 0304 	and.w	r3, r3, #4
 8006d66:	617b      	str	r3, [r7, #20]
 8006d68:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8006d6a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8006d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d70:	2302      	movs	r3, #2
 8006d72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d74:	2300      	movs	r3, #0
 8006d76:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006d7c:	2306      	movs	r3, #6
 8006d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006d84:	4619      	mov	r1, r3
 8006d86:	4823      	ldr	r0, [pc, #140]	@ (8006e14 <HAL_SPI_MspInit+0x1cc>)
 8006d88:	f000 fa68 	bl	800725c <HAL_GPIO_Init>
}
 8006d8c:	e031      	b.n	8006df2 <HAL_SPI_MspInit+0x1aa>
  else if(hspi->Instance==SPI4)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a21      	ldr	r2, [pc, #132]	@ (8006e18 <HAL_SPI_MspInit+0x1d0>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d12c      	bne.n	8006df2 <HAL_SPI_MspInit+0x1aa>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8006d98:	2300      	movs	r3, #0
 8006d9a:	613b      	str	r3, [r7, #16]
 8006d9c:	4b18      	ldr	r3, [pc, #96]	@ (8006e00 <HAL_SPI_MspInit+0x1b8>)
 8006d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006da0:	4a17      	ldr	r2, [pc, #92]	@ (8006e00 <HAL_SPI_MspInit+0x1b8>)
 8006da2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006da6:	6453      	str	r3, [r2, #68]	@ 0x44
 8006da8:	4b15      	ldr	r3, [pc, #84]	@ (8006e00 <HAL_SPI_MspInit+0x1b8>)
 8006daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006db0:	613b      	str	r3, [r7, #16]
 8006db2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006db4:	2300      	movs	r3, #0
 8006db6:	60fb      	str	r3, [r7, #12]
 8006db8:	4b11      	ldr	r3, [pc, #68]	@ (8006e00 <HAL_SPI_MspInit+0x1b8>)
 8006dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dbc:	4a10      	ldr	r2, [pc, #64]	@ (8006e00 <HAL_SPI_MspInit+0x1b8>)
 8006dbe:	f043 0310 	orr.w	r3, r3, #16
 8006dc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8006dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8006e00 <HAL_SPI_MspInit+0x1b8>)
 8006dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dc8:	f003 0310 	and.w	r3, r3, #16
 8006dcc:	60fb      	str	r3, [r7, #12]
 8006dce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8006dd0:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8006dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dd6:	2302      	movs	r3, #2
 8006dd8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006dde:	2303      	movs	r3, #3
 8006de0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8006de2:	2305      	movs	r3, #5
 8006de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006de6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006dea:	4619      	mov	r1, r3
 8006dec:	480b      	ldr	r0, [pc, #44]	@ (8006e1c <HAL_SPI_MspInit+0x1d4>)
 8006dee:	f000 fa35 	bl	800725c <HAL_GPIO_Init>
}
 8006df2:	bf00      	nop
 8006df4:	3740      	adds	r7, #64	@ 0x40
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	40013000 	.word	0x40013000
 8006e00:	40023800 	.word	0x40023800
 8006e04:	40020000 	.word	0x40020000
 8006e08:	40003800 	.word	0x40003800
 8006e0c:	40022000 	.word	0x40022000
 8006e10:	40003c00 	.word	0x40003c00
 8006e14:	40020800 	.word	0x40020800
 8006e18:	40013400 	.word	0x40013400
 8006e1c:	40021000 	.word	0x40021000

08006e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006e20:	b480      	push	{r7}
 8006e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006e24:	bf00      	nop
 8006e26:	e7fd      	b.n	8006e24 <NMI_Handler+0x4>

08006e28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006e2c:	bf00      	nop
 8006e2e:	e7fd      	b.n	8006e2c <HardFault_Handler+0x4>

08006e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006e30:	b480      	push	{r7}
 8006e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006e34:	bf00      	nop
 8006e36:	e7fd      	b.n	8006e34 <MemManage_Handler+0x4>

08006e38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006e3c:	bf00      	nop
 8006e3e:	e7fd      	b.n	8006e3c <BusFault_Handler+0x4>

08006e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006e40:	b480      	push	{r7}
 8006e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006e44:	bf00      	nop
 8006e46:	e7fd      	b.n	8006e44 <UsageFault_Handler+0x4>

08006e48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006e4c:	bf00      	nop
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr

08006e56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006e56:	b480      	push	{r7}
 8006e58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006e5a:	bf00      	nop
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006e64:	b480      	push	{r7}
 8006e66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006e68:	bf00      	nop
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr

08006e72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006e76:	f000 f8c7 	bl	8007008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006e7a:	bf00      	nop
 8006e7c:	bd80      	pop	{r7, pc}
	...

08006e80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006e88:	4a14      	ldr	r2, [pc, #80]	@ (8006edc <_sbrk+0x5c>)
 8006e8a:	4b15      	ldr	r3, [pc, #84]	@ (8006ee0 <_sbrk+0x60>)
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006e94:	4b13      	ldr	r3, [pc, #76]	@ (8006ee4 <_sbrk+0x64>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d102      	bne.n	8006ea2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006e9c:	4b11      	ldr	r3, [pc, #68]	@ (8006ee4 <_sbrk+0x64>)
 8006e9e:	4a12      	ldr	r2, [pc, #72]	@ (8006ee8 <_sbrk+0x68>)
 8006ea0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006ea2:	4b10      	ldr	r3, [pc, #64]	@ (8006ee4 <_sbrk+0x64>)
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d207      	bcs.n	8006ec0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006eb0:	f003 f8c4 	bl	800a03c <__errno>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	220c      	movs	r2, #12
 8006eb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006eba:	f04f 33ff 	mov.w	r3, #4294967295
 8006ebe:	e009      	b.n	8006ed4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006ec0:	4b08      	ldr	r3, [pc, #32]	@ (8006ee4 <_sbrk+0x64>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006ec6:	4b07      	ldr	r3, [pc, #28]	@ (8006ee4 <_sbrk+0x64>)
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4413      	add	r3, r2
 8006ece:	4a05      	ldr	r2, [pc, #20]	@ (8006ee4 <_sbrk+0x64>)
 8006ed0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3718      	adds	r7, #24
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	20030000 	.word	0x20030000
 8006ee0:	00000400 	.word	0x00000400
 8006ee4:	20001094 	.word	0x20001094
 8006ee8:	200011e8 	.word	0x200011e8

08006eec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006eec:	b480      	push	{r7}
 8006eee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006ef0:	4b06      	ldr	r3, [pc, #24]	@ (8006f0c <SystemInit+0x20>)
 8006ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ef6:	4a05      	ldr	r2, [pc, #20]	@ (8006f0c <SystemInit+0x20>)
 8006ef8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006efc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006f00:	bf00      	nop
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	e000ed00 	.word	0xe000ed00

08006f10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8006f10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006f48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006f14:	f7ff ffea 	bl	8006eec <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006f18:	480c      	ldr	r0, [pc, #48]	@ (8006f4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006f1a:	490d      	ldr	r1, [pc, #52]	@ (8006f50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006f1c:	4a0d      	ldr	r2, [pc, #52]	@ (8006f54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006f20:	e002      	b.n	8006f28 <LoopCopyDataInit>

08006f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006f26:	3304      	adds	r3, #4

08006f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006f2c:	d3f9      	bcc.n	8006f22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8006f58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006f30:	4c0a      	ldr	r4, [pc, #40]	@ (8006f5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8006f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006f34:	e001      	b.n	8006f3a <LoopFillZerobss>

08006f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006f38:	3204      	adds	r2, #4

08006f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006f3c:	d3fb      	bcc.n	8006f36 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8006f3e:	f003 f883 	bl	800a048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006f42:	f7fe f883 	bl	800504c <main>
  bx  lr    
 8006f46:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8006f48:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8006f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006f50:	200007f0 	.word	0x200007f0
  ldr r2, =_sidata
 8006f54:	0800bac4 	.word	0x0800bac4
  ldr r2, =_sbss
 8006f58:	200007f0 	.word	0x200007f0
  ldr r4, =_ebss
 8006f5c:	200011e4 	.word	0x200011e4

08006f60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006f60:	e7fe      	b.n	8006f60 <ADC_IRQHandler>
	...

08006f64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006f68:	4b0e      	ldr	r3, [pc, #56]	@ (8006fa4 <HAL_Init+0x40>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8006fa4 <HAL_Init+0x40>)
 8006f6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006f72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006f74:	4b0b      	ldr	r3, [pc, #44]	@ (8006fa4 <HAL_Init+0x40>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a0a      	ldr	r2, [pc, #40]	@ (8006fa4 <HAL_Init+0x40>)
 8006f7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006f7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006f80:	4b08      	ldr	r3, [pc, #32]	@ (8006fa4 <HAL_Init+0x40>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a07      	ldr	r2, [pc, #28]	@ (8006fa4 <HAL_Init+0x40>)
 8006f86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006f8c:	2003      	movs	r0, #3
 8006f8e:	f000 f931 	bl	80071f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006f92:	200f      	movs	r0, #15
 8006f94:	f000 f808 	bl	8006fa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006f98:	f7ff fdb2 	bl	8006b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	40023c00 	.word	0x40023c00

08006fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006fb0:	4b12      	ldr	r3, [pc, #72]	@ (8006ffc <HAL_InitTick+0x54>)
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	4b12      	ldr	r3, [pc, #72]	@ (8007000 <HAL_InitTick+0x58>)
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	4619      	mov	r1, r3
 8006fba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8006fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 f93b 	bl	8007242 <HAL_SYSTICK_Config>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d001      	beq.n	8006fd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e00e      	b.n	8006ff4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2b0f      	cmp	r3, #15
 8006fda:	d80a      	bhi.n	8006ff2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006fdc:	2200      	movs	r2, #0
 8006fde:	6879      	ldr	r1, [r7, #4]
 8006fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe4:	f000 f911 	bl	800720a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006fe8:	4a06      	ldr	r2, [pc, #24]	@ (8007004 <HAL_InitTick+0x5c>)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	e000      	b.n	8006ff4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3708      	adds	r7, #8
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	20000794 	.word	0x20000794
 8007000:	2000079c 	.word	0x2000079c
 8007004:	20000798 	.word	0x20000798

08007008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007008:	b480      	push	{r7}
 800700a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800700c:	4b06      	ldr	r3, [pc, #24]	@ (8007028 <HAL_IncTick+0x20>)
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	461a      	mov	r2, r3
 8007012:	4b06      	ldr	r3, [pc, #24]	@ (800702c <HAL_IncTick+0x24>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4413      	add	r3, r2
 8007018:	4a04      	ldr	r2, [pc, #16]	@ (800702c <HAL_IncTick+0x24>)
 800701a:	6013      	str	r3, [r2, #0]
}
 800701c:	bf00      	nop
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	2000079c 	.word	0x2000079c
 800702c:	20001098 	.word	0x20001098

08007030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007030:	b480      	push	{r7}
 8007032:	af00      	add	r7, sp, #0
  return uwTick;
 8007034:	4b03      	ldr	r3, [pc, #12]	@ (8007044 <HAL_GetTick+0x14>)
 8007036:	681b      	ldr	r3, [r3, #0]
}
 8007038:	4618      	mov	r0, r3
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	20001098 	.word	0x20001098

08007048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007050:	f7ff ffee 	bl	8007030 <HAL_GetTick>
 8007054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007060:	d005      	beq.n	800706e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007062:	4b0a      	ldr	r3, [pc, #40]	@ (800708c <HAL_Delay+0x44>)
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	461a      	mov	r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	4413      	add	r3, r2
 800706c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800706e:	bf00      	nop
 8007070:	f7ff ffde 	bl	8007030 <HAL_GetTick>
 8007074:	4602      	mov	r2, r0
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	429a      	cmp	r2, r3
 800707e:	d8f7      	bhi.n	8007070 <HAL_Delay+0x28>
  {
  }
}
 8007080:	bf00      	nop
 8007082:	bf00      	nop
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	2000079c 	.word	0x2000079c

08007090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f003 0307 	and.w	r3, r3, #7
 800709e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80070a0:	4b0c      	ldr	r3, [pc, #48]	@ (80070d4 <__NVIC_SetPriorityGrouping+0x44>)
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80070a6:	68ba      	ldr	r2, [r7, #8]
 80070a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80070ac:	4013      	ands	r3, r2
 80070ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80070b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80070bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80070c2:	4a04      	ldr	r2, [pc, #16]	@ (80070d4 <__NVIC_SetPriorityGrouping+0x44>)
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	60d3      	str	r3, [r2, #12]
}
 80070c8:	bf00      	nop
 80070ca:	3714      	adds	r7, #20
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr
 80070d4:	e000ed00 	.word	0xe000ed00

080070d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80070d8:	b480      	push	{r7}
 80070da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80070dc:	4b04      	ldr	r3, [pc, #16]	@ (80070f0 <__NVIC_GetPriorityGrouping+0x18>)
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	0a1b      	lsrs	r3, r3, #8
 80070e2:	f003 0307 	and.w	r3, r3, #7
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	e000ed00 	.word	0xe000ed00

080070f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	4603      	mov	r3, r0
 80070fc:	6039      	str	r1, [r7, #0]
 80070fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007104:	2b00      	cmp	r3, #0
 8007106:	db0a      	blt.n	800711e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	b2da      	uxtb	r2, r3
 800710c:	490c      	ldr	r1, [pc, #48]	@ (8007140 <__NVIC_SetPriority+0x4c>)
 800710e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007112:	0112      	lsls	r2, r2, #4
 8007114:	b2d2      	uxtb	r2, r2
 8007116:	440b      	add	r3, r1
 8007118:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800711c:	e00a      	b.n	8007134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	b2da      	uxtb	r2, r3
 8007122:	4908      	ldr	r1, [pc, #32]	@ (8007144 <__NVIC_SetPriority+0x50>)
 8007124:	79fb      	ldrb	r3, [r7, #7]
 8007126:	f003 030f 	and.w	r3, r3, #15
 800712a:	3b04      	subs	r3, #4
 800712c:	0112      	lsls	r2, r2, #4
 800712e:	b2d2      	uxtb	r2, r2
 8007130:	440b      	add	r3, r1
 8007132:	761a      	strb	r2, [r3, #24]
}
 8007134:	bf00      	nop
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr
 8007140:	e000e100 	.word	0xe000e100
 8007144:	e000ed00 	.word	0xe000ed00

08007148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007148:	b480      	push	{r7}
 800714a:	b089      	sub	sp, #36	@ 0x24
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f003 0307 	and.w	r3, r3, #7
 800715a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	f1c3 0307 	rsb	r3, r3, #7
 8007162:	2b04      	cmp	r3, #4
 8007164:	bf28      	it	cs
 8007166:	2304      	movcs	r3, #4
 8007168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	3304      	adds	r3, #4
 800716e:	2b06      	cmp	r3, #6
 8007170:	d902      	bls.n	8007178 <NVIC_EncodePriority+0x30>
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	3b03      	subs	r3, #3
 8007176:	e000      	b.n	800717a <NVIC_EncodePriority+0x32>
 8007178:	2300      	movs	r3, #0
 800717a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800717c:	f04f 32ff 	mov.w	r2, #4294967295
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	fa02 f303 	lsl.w	r3, r2, r3
 8007186:	43da      	mvns	r2, r3
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	401a      	ands	r2, r3
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007190:	f04f 31ff 	mov.w	r1, #4294967295
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	fa01 f303 	lsl.w	r3, r1, r3
 800719a:	43d9      	mvns	r1, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071a0:	4313      	orrs	r3, r2
         );
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3724      	adds	r7, #36	@ 0x24
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
	...

080071b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	3b01      	subs	r3, #1
 80071bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80071c0:	d301      	bcc.n	80071c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80071c2:	2301      	movs	r3, #1
 80071c4:	e00f      	b.n	80071e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80071c6:	4a0a      	ldr	r2, [pc, #40]	@ (80071f0 <SysTick_Config+0x40>)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	3b01      	subs	r3, #1
 80071cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80071ce:	210f      	movs	r1, #15
 80071d0:	f04f 30ff 	mov.w	r0, #4294967295
 80071d4:	f7ff ff8e 	bl	80070f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80071d8:	4b05      	ldr	r3, [pc, #20]	@ (80071f0 <SysTick_Config+0x40>)
 80071da:	2200      	movs	r2, #0
 80071dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80071de:	4b04      	ldr	r3, [pc, #16]	@ (80071f0 <SysTick_Config+0x40>)
 80071e0:	2207      	movs	r2, #7
 80071e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3708      	adds	r7, #8
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	e000e010 	.word	0xe000e010

080071f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f7ff ff47 	bl	8007090 <__NVIC_SetPriorityGrouping>
}
 8007202:	bf00      	nop
 8007204:	3708      	adds	r7, #8
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800720a:	b580      	push	{r7, lr}
 800720c:	b086      	sub	sp, #24
 800720e:	af00      	add	r7, sp, #0
 8007210:	4603      	mov	r3, r0
 8007212:	60b9      	str	r1, [r7, #8]
 8007214:	607a      	str	r2, [r7, #4]
 8007216:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007218:	2300      	movs	r3, #0
 800721a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800721c:	f7ff ff5c 	bl	80070d8 <__NVIC_GetPriorityGrouping>
 8007220:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	68b9      	ldr	r1, [r7, #8]
 8007226:	6978      	ldr	r0, [r7, #20]
 8007228:	f7ff ff8e 	bl	8007148 <NVIC_EncodePriority>
 800722c:	4602      	mov	r2, r0
 800722e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007232:	4611      	mov	r1, r2
 8007234:	4618      	mov	r0, r3
 8007236:	f7ff ff5d 	bl	80070f4 <__NVIC_SetPriority>
}
 800723a:	bf00      	nop
 800723c:	3718      	adds	r7, #24
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b082      	sub	sp, #8
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7ff ffb0 	bl	80071b0 <SysTick_Config>
 8007250:	4603      	mov	r3, r0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
	...

0800725c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800725c:	b480      	push	{r7}
 800725e:	b089      	sub	sp, #36	@ 0x24
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007266:	2300      	movs	r3, #0
 8007268:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800726a:	2300      	movs	r3, #0
 800726c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800726e:	2300      	movs	r3, #0
 8007270:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007272:	2300      	movs	r3, #0
 8007274:	61fb      	str	r3, [r7, #28]
 8007276:	e177      	b.n	8007568 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007278:	2201      	movs	r2, #1
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	fa02 f303 	lsl.w	r3, r2, r3
 8007280:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	697a      	ldr	r2, [r7, #20]
 8007288:	4013      	ands	r3, r2
 800728a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	429a      	cmp	r2, r3
 8007292:	f040 8166 	bne.w	8007562 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	f003 0303 	and.w	r3, r3, #3
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d005      	beq.n	80072ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d130      	bne.n	8007310 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	005b      	lsls	r3, r3, #1
 80072b8:	2203      	movs	r2, #3
 80072ba:	fa02 f303 	lsl.w	r3, r2, r3
 80072be:	43db      	mvns	r3, r3
 80072c0:	69ba      	ldr	r2, [r7, #24]
 80072c2:	4013      	ands	r3, r2
 80072c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	68da      	ldr	r2, [r3, #12]
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	005b      	lsls	r3, r3, #1
 80072ce:	fa02 f303 	lsl.w	r3, r2, r3
 80072d2:	69ba      	ldr	r2, [r7, #24]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	69ba      	ldr	r2, [r7, #24]
 80072dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80072e4:	2201      	movs	r2, #1
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	fa02 f303 	lsl.w	r3, r2, r3
 80072ec:	43db      	mvns	r3, r3
 80072ee:	69ba      	ldr	r2, [r7, #24]
 80072f0:	4013      	ands	r3, r2
 80072f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	091b      	lsrs	r3, r3, #4
 80072fa:	f003 0201 	and.w	r2, r3, #1
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	fa02 f303 	lsl.w	r3, r2, r3
 8007304:	69ba      	ldr	r2, [r7, #24]
 8007306:	4313      	orrs	r3, r2
 8007308:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	69ba      	ldr	r2, [r7, #24]
 800730e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	f003 0303 	and.w	r3, r3, #3
 8007318:	2b03      	cmp	r3, #3
 800731a:	d017      	beq.n	800734c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	005b      	lsls	r3, r3, #1
 8007326:	2203      	movs	r2, #3
 8007328:	fa02 f303 	lsl.w	r3, r2, r3
 800732c:	43db      	mvns	r3, r3
 800732e:	69ba      	ldr	r2, [r7, #24]
 8007330:	4013      	ands	r3, r2
 8007332:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	689a      	ldr	r2, [r3, #8]
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	005b      	lsls	r3, r3, #1
 800733c:	fa02 f303 	lsl.w	r3, r2, r3
 8007340:	69ba      	ldr	r2, [r7, #24]
 8007342:	4313      	orrs	r3, r2
 8007344:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	69ba      	ldr	r2, [r7, #24]
 800734a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	f003 0303 	and.w	r3, r3, #3
 8007354:	2b02      	cmp	r3, #2
 8007356:	d123      	bne.n	80073a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	08da      	lsrs	r2, r3, #3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	3208      	adds	r2, #8
 8007360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007364:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	f003 0307 	and.w	r3, r3, #7
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	220f      	movs	r2, #15
 8007370:	fa02 f303 	lsl.w	r3, r2, r3
 8007374:	43db      	mvns	r3, r3
 8007376:	69ba      	ldr	r2, [r7, #24]
 8007378:	4013      	ands	r3, r2
 800737a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	691a      	ldr	r2, [r3, #16]
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	f003 0307 	and.w	r3, r3, #7
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	fa02 f303 	lsl.w	r3, r2, r3
 800738c:	69ba      	ldr	r2, [r7, #24]
 800738e:	4313      	orrs	r3, r2
 8007390:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	08da      	lsrs	r2, r3, #3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	3208      	adds	r2, #8
 800739a:	69b9      	ldr	r1, [r7, #24]
 800739c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	005b      	lsls	r3, r3, #1
 80073aa:	2203      	movs	r2, #3
 80073ac:	fa02 f303 	lsl.w	r3, r2, r3
 80073b0:	43db      	mvns	r3, r3
 80073b2:	69ba      	ldr	r2, [r7, #24]
 80073b4:	4013      	ands	r3, r2
 80073b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	f003 0203 	and.w	r2, r3, #3
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	005b      	lsls	r3, r3, #1
 80073c4:	fa02 f303 	lsl.w	r3, r2, r3
 80073c8:	69ba      	ldr	r2, [r7, #24]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	69ba      	ldr	r2, [r7, #24]
 80073d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f000 80c0 	beq.w	8007562 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073e2:	2300      	movs	r3, #0
 80073e4:	60fb      	str	r3, [r7, #12]
 80073e6:	4b66      	ldr	r3, [pc, #408]	@ (8007580 <HAL_GPIO_Init+0x324>)
 80073e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073ea:	4a65      	ldr	r2, [pc, #404]	@ (8007580 <HAL_GPIO_Init+0x324>)
 80073ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80073f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80073f2:	4b63      	ldr	r3, [pc, #396]	@ (8007580 <HAL_GPIO_Init+0x324>)
 80073f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80073fa:	60fb      	str	r3, [r7, #12]
 80073fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80073fe:	4a61      	ldr	r2, [pc, #388]	@ (8007584 <HAL_GPIO_Init+0x328>)
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	089b      	lsrs	r3, r3, #2
 8007404:	3302      	adds	r3, #2
 8007406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800740a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	f003 0303 	and.w	r3, r3, #3
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	220f      	movs	r2, #15
 8007416:	fa02 f303 	lsl.w	r3, r2, r3
 800741a:	43db      	mvns	r3, r3
 800741c:	69ba      	ldr	r2, [r7, #24]
 800741e:	4013      	ands	r3, r2
 8007420:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a58      	ldr	r2, [pc, #352]	@ (8007588 <HAL_GPIO_Init+0x32c>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d037      	beq.n	800749a <HAL_GPIO_Init+0x23e>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a57      	ldr	r2, [pc, #348]	@ (800758c <HAL_GPIO_Init+0x330>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d031      	beq.n	8007496 <HAL_GPIO_Init+0x23a>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a56      	ldr	r2, [pc, #344]	@ (8007590 <HAL_GPIO_Init+0x334>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d02b      	beq.n	8007492 <HAL_GPIO_Init+0x236>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a55      	ldr	r2, [pc, #340]	@ (8007594 <HAL_GPIO_Init+0x338>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d025      	beq.n	800748e <HAL_GPIO_Init+0x232>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a54      	ldr	r2, [pc, #336]	@ (8007598 <HAL_GPIO_Init+0x33c>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d01f      	beq.n	800748a <HAL_GPIO_Init+0x22e>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a53      	ldr	r2, [pc, #332]	@ (800759c <HAL_GPIO_Init+0x340>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d019      	beq.n	8007486 <HAL_GPIO_Init+0x22a>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a52      	ldr	r2, [pc, #328]	@ (80075a0 <HAL_GPIO_Init+0x344>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d013      	beq.n	8007482 <HAL_GPIO_Init+0x226>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a51      	ldr	r2, [pc, #324]	@ (80075a4 <HAL_GPIO_Init+0x348>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d00d      	beq.n	800747e <HAL_GPIO_Init+0x222>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4a50      	ldr	r2, [pc, #320]	@ (80075a8 <HAL_GPIO_Init+0x34c>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d007      	beq.n	800747a <HAL_GPIO_Init+0x21e>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a4f      	ldr	r2, [pc, #316]	@ (80075ac <HAL_GPIO_Init+0x350>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d101      	bne.n	8007476 <HAL_GPIO_Init+0x21a>
 8007472:	2309      	movs	r3, #9
 8007474:	e012      	b.n	800749c <HAL_GPIO_Init+0x240>
 8007476:	230a      	movs	r3, #10
 8007478:	e010      	b.n	800749c <HAL_GPIO_Init+0x240>
 800747a:	2308      	movs	r3, #8
 800747c:	e00e      	b.n	800749c <HAL_GPIO_Init+0x240>
 800747e:	2307      	movs	r3, #7
 8007480:	e00c      	b.n	800749c <HAL_GPIO_Init+0x240>
 8007482:	2306      	movs	r3, #6
 8007484:	e00a      	b.n	800749c <HAL_GPIO_Init+0x240>
 8007486:	2305      	movs	r3, #5
 8007488:	e008      	b.n	800749c <HAL_GPIO_Init+0x240>
 800748a:	2304      	movs	r3, #4
 800748c:	e006      	b.n	800749c <HAL_GPIO_Init+0x240>
 800748e:	2303      	movs	r3, #3
 8007490:	e004      	b.n	800749c <HAL_GPIO_Init+0x240>
 8007492:	2302      	movs	r3, #2
 8007494:	e002      	b.n	800749c <HAL_GPIO_Init+0x240>
 8007496:	2301      	movs	r3, #1
 8007498:	e000      	b.n	800749c <HAL_GPIO_Init+0x240>
 800749a:	2300      	movs	r3, #0
 800749c:	69fa      	ldr	r2, [r7, #28]
 800749e:	f002 0203 	and.w	r2, r2, #3
 80074a2:	0092      	lsls	r2, r2, #2
 80074a4:	4093      	lsls	r3, r2
 80074a6:	69ba      	ldr	r2, [r7, #24]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80074ac:	4935      	ldr	r1, [pc, #212]	@ (8007584 <HAL_GPIO_Init+0x328>)
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	089b      	lsrs	r3, r3, #2
 80074b2:	3302      	adds	r3, #2
 80074b4:	69ba      	ldr	r2, [r7, #24]
 80074b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80074ba:	4b3d      	ldr	r3, [pc, #244]	@ (80075b0 <HAL_GPIO_Init+0x354>)
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	43db      	mvns	r3, r3
 80074c4:	69ba      	ldr	r2, [r7, #24]
 80074c6:	4013      	ands	r3, r2
 80074c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d003      	beq.n	80074de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80074d6:	69ba      	ldr	r2, [r7, #24]
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	4313      	orrs	r3, r2
 80074dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80074de:	4a34      	ldr	r2, [pc, #208]	@ (80075b0 <HAL_GPIO_Init+0x354>)
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80074e4:	4b32      	ldr	r3, [pc, #200]	@ (80075b0 <HAL_GPIO_Init+0x354>)
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	43db      	mvns	r3, r3
 80074ee:	69ba      	ldr	r2, [r7, #24]
 80074f0:	4013      	ands	r3, r2
 80074f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d003      	beq.n	8007508 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007500:	69ba      	ldr	r2, [r7, #24]
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	4313      	orrs	r3, r2
 8007506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007508:	4a29      	ldr	r2, [pc, #164]	@ (80075b0 <HAL_GPIO_Init+0x354>)
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800750e:	4b28      	ldr	r3, [pc, #160]	@ (80075b0 <HAL_GPIO_Init+0x354>)
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	43db      	mvns	r3, r3
 8007518:	69ba      	ldr	r2, [r7, #24]
 800751a:	4013      	ands	r3, r2
 800751c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d003      	beq.n	8007532 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800752a:	69ba      	ldr	r2, [r7, #24]
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	4313      	orrs	r3, r2
 8007530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007532:	4a1f      	ldr	r2, [pc, #124]	@ (80075b0 <HAL_GPIO_Init+0x354>)
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007538:	4b1d      	ldr	r3, [pc, #116]	@ (80075b0 <HAL_GPIO_Init+0x354>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	43db      	mvns	r3, r3
 8007542:	69ba      	ldr	r2, [r7, #24]
 8007544:	4013      	ands	r3, r2
 8007546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007550:	2b00      	cmp	r3, #0
 8007552:	d003      	beq.n	800755c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007554:	69ba      	ldr	r2, [r7, #24]
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	4313      	orrs	r3, r2
 800755a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800755c:	4a14      	ldr	r2, [pc, #80]	@ (80075b0 <HAL_GPIO_Init+0x354>)
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	3301      	adds	r3, #1
 8007566:	61fb      	str	r3, [r7, #28]
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	2b0f      	cmp	r3, #15
 800756c:	f67f ae84 	bls.w	8007278 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007570:	bf00      	nop
 8007572:	bf00      	nop
 8007574:	3724      	adds	r7, #36	@ 0x24
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	40023800 	.word	0x40023800
 8007584:	40013800 	.word	0x40013800
 8007588:	40020000 	.word	0x40020000
 800758c:	40020400 	.word	0x40020400
 8007590:	40020800 	.word	0x40020800
 8007594:	40020c00 	.word	0x40020c00
 8007598:	40021000 	.word	0x40021000
 800759c:	40021400 	.word	0x40021400
 80075a0:	40021800 	.word	0x40021800
 80075a4:	40021c00 	.word	0x40021c00
 80075a8:	40022000 	.word	0x40022000
 80075ac:	40022400 	.word	0x40022400
 80075b0:	40013c00 	.word	0x40013c00

080075b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	460b      	mov	r3, r1
 80075be:	807b      	strh	r3, [r7, #2]
 80075c0:	4613      	mov	r3, r2
 80075c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80075c4:	787b      	ldrb	r3, [r7, #1]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d003      	beq.n	80075d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80075ca:	887a      	ldrh	r2, [r7, #2]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80075d0:	e003      	b.n	80075da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80075d2:	887b      	ldrh	r3, [r7, #2]
 80075d4:	041a      	lsls	r2, r3, #16
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	619a      	str	r2, [r3, #24]
}
 80075da:	bf00      	nop
 80075dc:	370c      	adds	r7, #12
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
	...

080075e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d101      	bne.n	80075fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e12b      	b.n	8007852 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007600:	b2db      	uxtb	r3, r3
 8007602:	2b00      	cmp	r3, #0
 8007604:	d106      	bne.n	8007614 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f7ff fa9e 	bl	8006b50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2224      	movs	r2, #36	@ 0x24
 8007618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f022 0201 	bic.w	r2, r2, #1
 800762a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800763a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800764a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800764c:	f001 fe1a 	bl	8009284 <HAL_RCC_GetPCLK1Freq>
 8007650:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	4a81      	ldr	r2, [pc, #516]	@ (800785c <HAL_I2C_Init+0x274>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d807      	bhi.n	800766c <HAL_I2C_Init+0x84>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	4a80      	ldr	r2, [pc, #512]	@ (8007860 <HAL_I2C_Init+0x278>)
 8007660:	4293      	cmp	r3, r2
 8007662:	bf94      	ite	ls
 8007664:	2301      	movls	r3, #1
 8007666:	2300      	movhi	r3, #0
 8007668:	b2db      	uxtb	r3, r3
 800766a:	e006      	b.n	800767a <HAL_I2C_Init+0x92>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	4a7d      	ldr	r2, [pc, #500]	@ (8007864 <HAL_I2C_Init+0x27c>)
 8007670:	4293      	cmp	r3, r2
 8007672:	bf94      	ite	ls
 8007674:	2301      	movls	r3, #1
 8007676:	2300      	movhi	r3, #0
 8007678:	b2db      	uxtb	r3, r3
 800767a:	2b00      	cmp	r3, #0
 800767c:	d001      	beq.n	8007682 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e0e7      	b.n	8007852 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	4a78      	ldr	r2, [pc, #480]	@ (8007868 <HAL_I2C_Init+0x280>)
 8007686:	fba2 2303 	umull	r2, r3, r2, r3
 800768a:	0c9b      	lsrs	r3, r3, #18
 800768c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	430a      	orrs	r2, r1
 80076a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	6a1b      	ldr	r3, [r3, #32]
 80076a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	4a6a      	ldr	r2, [pc, #424]	@ (800785c <HAL_I2C_Init+0x274>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d802      	bhi.n	80076bc <HAL_I2C_Init+0xd4>
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	3301      	adds	r3, #1
 80076ba:	e009      	b.n	80076d0 <HAL_I2C_Init+0xe8>
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80076c2:	fb02 f303 	mul.w	r3, r2, r3
 80076c6:	4a69      	ldr	r2, [pc, #420]	@ (800786c <HAL_I2C_Init+0x284>)
 80076c8:	fba2 2303 	umull	r2, r3, r2, r3
 80076cc:	099b      	lsrs	r3, r3, #6
 80076ce:	3301      	adds	r3, #1
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	6812      	ldr	r2, [r2, #0]
 80076d4:	430b      	orrs	r3, r1
 80076d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	69db      	ldr	r3, [r3, #28]
 80076de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80076e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	495c      	ldr	r1, [pc, #368]	@ (800785c <HAL_I2C_Init+0x274>)
 80076ec:	428b      	cmp	r3, r1
 80076ee:	d819      	bhi.n	8007724 <HAL_I2C_Init+0x13c>
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	1e59      	subs	r1, r3, #1
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	005b      	lsls	r3, r3, #1
 80076fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80076fe:	1c59      	adds	r1, r3, #1
 8007700:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007704:	400b      	ands	r3, r1
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00a      	beq.n	8007720 <HAL_I2C_Init+0x138>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	1e59      	subs	r1, r3, #1
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	005b      	lsls	r3, r3, #1
 8007714:	fbb1 f3f3 	udiv	r3, r1, r3
 8007718:	3301      	adds	r3, #1
 800771a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800771e:	e051      	b.n	80077c4 <HAL_I2C_Init+0x1dc>
 8007720:	2304      	movs	r3, #4
 8007722:	e04f      	b.n	80077c4 <HAL_I2C_Init+0x1dc>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d111      	bne.n	8007750 <HAL_I2C_Init+0x168>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	1e58      	subs	r0, r3, #1
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6859      	ldr	r1, [r3, #4]
 8007734:	460b      	mov	r3, r1
 8007736:	005b      	lsls	r3, r3, #1
 8007738:	440b      	add	r3, r1
 800773a:	fbb0 f3f3 	udiv	r3, r0, r3
 800773e:	3301      	adds	r3, #1
 8007740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007744:	2b00      	cmp	r3, #0
 8007746:	bf0c      	ite	eq
 8007748:	2301      	moveq	r3, #1
 800774a:	2300      	movne	r3, #0
 800774c:	b2db      	uxtb	r3, r3
 800774e:	e012      	b.n	8007776 <HAL_I2C_Init+0x18e>
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	1e58      	subs	r0, r3, #1
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6859      	ldr	r1, [r3, #4]
 8007758:	460b      	mov	r3, r1
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	440b      	add	r3, r1
 800775e:	0099      	lsls	r1, r3, #2
 8007760:	440b      	add	r3, r1
 8007762:	fbb0 f3f3 	udiv	r3, r0, r3
 8007766:	3301      	adds	r3, #1
 8007768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800776c:	2b00      	cmp	r3, #0
 800776e:	bf0c      	ite	eq
 8007770:	2301      	moveq	r3, #1
 8007772:	2300      	movne	r3, #0
 8007774:	b2db      	uxtb	r3, r3
 8007776:	2b00      	cmp	r3, #0
 8007778:	d001      	beq.n	800777e <HAL_I2C_Init+0x196>
 800777a:	2301      	movs	r3, #1
 800777c:	e022      	b.n	80077c4 <HAL_I2C_Init+0x1dc>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d10e      	bne.n	80077a4 <HAL_I2C_Init+0x1bc>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	1e58      	subs	r0, r3, #1
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6859      	ldr	r1, [r3, #4]
 800778e:	460b      	mov	r3, r1
 8007790:	005b      	lsls	r3, r3, #1
 8007792:	440b      	add	r3, r1
 8007794:	fbb0 f3f3 	udiv	r3, r0, r3
 8007798:	3301      	adds	r3, #1
 800779a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800779e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077a2:	e00f      	b.n	80077c4 <HAL_I2C_Init+0x1dc>
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	1e58      	subs	r0, r3, #1
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6859      	ldr	r1, [r3, #4]
 80077ac:	460b      	mov	r3, r1
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	440b      	add	r3, r1
 80077b2:	0099      	lsls	r1, r3, #2
 80077b4:	440b      	add	r3, r1
 80077b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80077ba:	3301      	adds	r3, #1
 80077bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80077c4:	6879      	ldr	r1, [r7, #4]
 80077c6:	6809      	ldr	r1, [r1, #0]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	69da      	ldr	r2, [r3, #28]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6a1b      	ldr	r3, [r3, #32]
 80077de:	431a      	orrs	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	430a      	orrs	r2, r1
 80077e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80077f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	6911      	ldr	r1, [r2, #16]
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	68d2      	ldr	r2, [r2, #12]
 80077fe:	4311      	orrs	r1, r2
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	6812      	ldr	r2, [r2, #0]
 8007804:	430b      	orrs	r3, r1
 8007806:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	695a      	ldr	r2, [r3, #20]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	431a      	orrs	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	430a      	orrs	r2, r1
 8007822:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f042 0201 	orr.w	r2, r2, #1
 8007832:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2220      	movs	r2, #32
 800783e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3710      	adds	r7, #16
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	000186a0 	.word	0x000186a0
 8007860:	001e847f 	.word	0x001e847f
 8007864:	003d08ff 	.word	0x003d08ff
 8007868:	431bde83 	.word	0x431bde83
 800786c:	10624dd3 	.word	0x10624dd3

08007870 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b088      	sub	sp, #32
 8007874:	af02      	add	r7, sp, #8
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	4608      	mov	r0, r1
 800787a:	4611      	mov	r1, r2
 800787c:	461a      	mov	r2, r3
 800787e:	4603      	mov	r3, r0
 8007880:	817b      	strh	r3, [r7, #10]
 8007882:	460b      	mov	r3, r1
 8007884:	813b      	strh	r3, [r7, #8]
 8007886:	4613      	mov	r3, r2
 8007888:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800788a:	f7ff fbd1 	bl	8007030 <HAL_GetTick>
 800788e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007896:	b2db      	uxtb	r3, r3
 8007898:	2b20      	cmp	r3, #32
 800789a:	f040 80d9 	bne.w	8007a50 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	9300      	str	r3, [sp, #0]
 80078a2:	2319      	movs	r3, #25
 80078a4:	2201      	movs	r2, #1
 80078a6:	496d      	ldr	r1, [pc, #436]	@ (8007a5c <HAL_I2C_Mem_Write+0x1ec>)
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f000 fdb9 	bl	8008420 <I2C_WaitOnFlagUntilTimeout>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d001      	beq.n	80078b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80078b4:	2302      	movs	r3, #2
 80078b6:	e0cc      	b.n	8007a52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d101      	bne.n	80078c6 <HAL_I2C_Mem_Write+0x56>
 80078c2:	2302      	movs	r3, #2
 80078c4:	e0c5      	b.n	8007a52 <HAL_I2C_Mem_Write+0x1e2>
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 0301 	and.w	r3, r3, #1
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d007      	beq.n	80078ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f042 0201 	orr.w	r2, r2, #1
 80078ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80078fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2221      	movs	r2, #33	@ 0x21
 8007900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2240      	movs	r2, #64	@ 0x40
 8007908:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6a3a      	ldr	r2, [r7, #32]
 8007916:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800791c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007922:	b29a      	uxth	r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	4a4d      	ldr	r2, [pc, #308]	@ (8007a60 <HAL_I2C_Mem_Write+0x1f0>)
 800792c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800792e:	88f8      	ldrh	r0, [r7, #6]
 8007930:	893a      	ldrh	r2, [r7, #8]
 8007932:	8979      	ldrh	r1, [r7, #10]
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	9301      	str	r3, [sp, #4]
 8007938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	4603      	mov	r3, r0
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	f000 fbf0 	bl	8008124 <I2C_RequestMemoryWrite>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d052      	beq.n	80079f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e081      	b.n	8007a52 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007952:	68f8      	ldr	r0, [r7, #12]
 8007954:	f000 fe7e 	bl	8008654 <I2C_WaitOnTXEFlagUntilTimeout>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00d      	beq.n	800797a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007962:	2b04      	cmp	r3, #4
 8007964:	d107      	bne.n	8007976 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007974:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e06b      	b.n	8007a52 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800797e:	781a      	ldrb	r2, [r3, #0]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800798a:	1c5a      	adds	r2, r3, #1
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007994:	3b01      	subs	r3, #1
 8007996:	b29a      	uxth	r2, r3
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	3b01      	subs	r3, #1
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	695b      	ldr	r3, [r3, #20]
 80079b0:	f003 0304 	and.w	r3, r3, #4
 80079b4:	2b04      	cmp	r3, #4
 80079b6:	d11b      	bne.n	80079f0 <HAL_I2C_Mem_Write+0x180>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d017      	beq.n	80079f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079c4:	781a      	ldrb	r2, [r3, #0]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079d0:	1c5a      	adds	r2, r3, #1
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079da:	3b01      	subs	r3, #1
 80079dc:	b29a      	uxth	r2, r3
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	3b01      	subs	r3, #1
 80079ea:	b29a      	uxth	r2, r3
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d1aa      	bne.n	800794e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079f8:	697a      	ldr	r2, [r7, #20]
 80079fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	f000 fe71 	bl	80086e4 <I2C_WaitOnBTFFlagUntilTimeout>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d00d      	beq.n	8007a24 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a0c:	2b04      	cmp	r3, #4
 8007a0e:	d107      	bne.n	8007a20 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a1e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	e016      	b.n	8007a52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2220      	movs	r2, #32
 8007a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	e000      	b.n	8007a52 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007a50:	2302      	movs	r3, #2
  }
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3718      	adds	r7, #24
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	00100002 	.word	0x00100002
 8007a60:	ffff0000 	.word	0xffff0000

08007a64 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b08c      	sub	sp, #48	@ 0x30
 8007a68:	af02      	add	r7, sp, #8
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	4608      	mov	r0, r1
 8007a6e:	4611      	mov	r1, r2
 8007a70:	461a      	mov	r2, r3
 8007a72:	4603      	mov	r3, r0
 8007a74:	817b      	strh	r3, [r7, #10]
 8007a76:	460b      	mov	r3, r1
 8007a78:	813b      	strh	r3, [r7, #8]
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007a7e:	f7ff fad7 	bl	8007030 <HAL_GetTick>
 8007a82:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	2b20      	cmp	r3, #32
 8007a8e:	f040 8214 	bne.w	8007eba <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a94:	9300      	str	r3, [sp, #0]
 8007a96:	2319      	movs	r3, #25
 8007a98:	2201      	movs	r2, #1
 8007a9a:	497b      	ldr	r1, [pc, #492]	@ (8007c88 <HAL_I2C_Mem_Read+0x224>)
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f000 fcbf 	bl	8008420 <I2C_WaitOnFlagUntilTimeout>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d001      	beq.n	8007aac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007aa8:	2302      	movs	r3, #2
 8007aaa:	e207      	b.n	8007ebc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d101      	bne.n	8007aba <HAL_I2C_Mem_Read+0x56>
 8007ab6:	2302      	movs	r3, #2
 8007ab8:	e200      	b.n	8007ebc <HAL_I2C_Mem_Read+0x458>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 0301 	and.w	r3, r3, #1
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d007      	beq.n	8007ae0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f042 0201 	orr.w	r2, r2, #1
 8007ade:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007aee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2222      	movs	r2, #34	@ 0x22
 8007af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2240      	movs	r2, #64	@ 0x40
 8007afc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2200      	movs	r2, #0
 8007b04:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b0a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007b10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b16:	b29a      	uxth	r2, r3
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	4a5b      	ldr	r2, [pc, #364]	@ (8007c8c <HAL_I2C_Mem_Read+0x228>)
 8007b20:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007b22:	88f8      	ldrh	r0, [r7, #6]
 8007b24:	893a      	ldrh	r2, [r7, #8]
 8007b26:	8979      	ldrh	r1, [r7, #10]
 8007b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b2a:	9301      	str	r3, [sp, #4]
 8007b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b2e:	9300      	str	r3, [sp, #0]
 8007b30:	4603      	mov	r3, r0
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f000 fb8c 	bl	8008250 <I2C_RequestMemoryRead>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d001      	beq.n	8007b42 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e1bc      	b.n	8007ebc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d113      	bne.n	8007b72 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	623b      	str	r3, [r7, #32]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	695b      	ldr	r3, [r3, #20]
 8007b54:	623b      	str	r3, [r7, #32]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	699b      	ldr	r3, [r3, #24]
 8007b5c:	623b      	str	r3, [r7, #32]
 8007b5e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b6e:	601a      	str	r2, [r3, #0]
 8007b70:	e190      	b.n	8007e94 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d11b      	bne.n	8007bb2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	61fb      	str	r3, [r7, #28]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	695b      	ldr	r3, [r3, #20]
 8007b94:	61fb      	str	r3, [r7, #28]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	61fb      	str	r3, [r7, #28]
 8007b9e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007bae:	601a      	str	r2, [r3, #0]
 8007bb0:	e170      	b.n	8007e94 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d11b      	bne.n	8007bf2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007bc8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007bd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bda:	2300      	movs	r3, #0
 8007bdc:	61bb      	str	r3, [r7, #24]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	695b      	ldr	r3, [r3, #20]
 8007be4:	61bb      	str	r3, [r7, #24]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	699b      	ldr	r3, [r3, #24]
 8007bec:	61bb      	str	r3, [r7, #24]
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	e150      	b.n	8007e94 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	617b      	str	r3, [r7, #20]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	695b      	ldr	r3, [r3, #20]
 8007bfc:	617b      	str	r3, [r7, #20]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	699b      	ldr	r3, [r3, #24]
 8007c04:	617b      	str	r3, [r7, #20]
 8007c06:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007c08:	e144      	b.n	8007e94 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c0e:	2b03      	cmp	r3, #3
 8007c10:	f200 80f1 	bhi.w	8007df6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d123      	bne.n	8007c64 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c1e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	f000 fda7 	bl	8008774 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d001      	beq.n	8007c30 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e145      	b.n	8007ebc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	691a      	ldr	r2, [r3, #16]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c3a:	b2d2      	uxtb	r2, r2
 8007c3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c42:	1c5a      	adds	r2, r3, #1
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	b29a      	uxth	r2, r3
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007c62:	e117      	b.n	8007e94 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d14e      	bne.n	8007d0a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c72:	2200      	movs	r2, #0
 8007c74:	4906      	ldr	r1, [pc, #24]	@ (8007c90 <HAL_I2C_Mem_Read+0x22c>)
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	f000 fbd2 	bl	8008420 <I2C_WaitOnFlagUntilTimeout>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d008      	beq.n	8007c94 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e11a      	b.n	8007ebc <HAL_I2C_Mem_Read+0x458>
 8007c86:	bf00      	nop
 8007c88:	00100002 	.word	0x00100002
 8007c8c:	ffff0000 	.word	0xffff0000
 8007c90:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ca2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	691a      	ldr	r2, [r3, #16]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cae:	b2d2      	uxtb	r2, r2
 8007cb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cb6:	1c5a      	adds	r2, r3, #1
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cc0:	3b01      	subs	r3, #1
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	3b01      	subs	r3, #1
 8007cd0:	b29a      	uxth	r2, r3
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	691a      	ldr	r2, [r3, #16]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ce0:	b2d2      	uxtb	r2, r2
 8007ce2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ce8:	1c5a      	adds	r2, r3, #1
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	b29a      	uxth	r2, r3
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	3b01      	subs	r3, #1
 8007d02:	b29a      	uxth	r2, r3
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007d08:	e0c4      	b.n	8007e94 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d10:	2200      	movs	r2, #0
 8007d12:	496c      	ldr	r1, [pc, #432]	@ (8007ec4 <HAL_I2C_Mem_Read+0x460>)
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f000 fb83 	bl	8008420 <I2C_WaitOnFlagUntilTimeout>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d001      	beq.n	8007d24 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e0cb      	b.n	8007ebc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	691a      	ldr	r2, [r3, #16]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d3e:	b2d2      	uxtb	r2, r2
 8007d40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d46:	1c5a      	adds	r2, r3, #1
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d50:	3b01      	subs	r3, #1
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	3b01      	subs	r3, #1
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d68:	9300      	str	r3, [sp, #0]
 8007d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	4955      	ldr	r1, [pc, #340]	@ (8007ec4 <HAL_I2C_Mem_Read+0x460>)
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f000 fb55 	bl	8008420 <I2C_WaitOnFlagUntilTimeout>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d001      	beq.n	8007d80 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e09d      	b.n	8007ebc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	691a      	ldr	r2, [r3, #16]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d9a:	b2d2      	uxtb	r2, r2
 8007d9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007da2:	1c5a      	adds	r2, r3, #1
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007dac:	3b01      	subs	r3, #1
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	b29a      	uxth	r2, r3
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	691a      	ldr	r2, [r3, #16]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dcc:	b2d2      	uxtb	r2, r2
 8007dce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dd4:	1c5a      	adds	r2, r3, #1
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007dde:	3b01      	subs	r3, #1
 8007de0:	b29a      	uxth	r2, r3
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	3b01      	subs	r3, #1
 8007dee:	b29a      	uxth	r2, r3
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007df4:	e04e      	b.n	8007e94 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007df6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007df8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f000 fcba 	bl	8008774 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d001      	beq.n	8007e0a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e058      	b.n	8007ebc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	691a      	ldr	r2, [r3, #16]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e14:	b2d2      	uxtb	r2, r2
 8007e16:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e1c:	1c5a      	adds	r2, r3, #1
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e26:	3b01      	subs	r3, #1
 8007e28:	b29a      	uxth	r2, r3
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	3b01      	subs	r3, #1
 8007e36:	b29a      	uxth	r2, r3
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	695b      	ldr	r3, [r3, #20]
 8007e42:	f003 0304 	and.w	r3, r3, #4
 8007e46:	2b04      	cmp	r3, #4
 8007e48:	d124      	bne.n	8007e94 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e4e:	2b03      	cmp	r3, #3
 8007e50:	d107      	bne.n	8007e62 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e60:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	691a      	ldr	r2, [r3, #16]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e6c:	b2d2      	uxtb	r2, r2
 8007e6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e74:	1c5a      	adds	r2, r3, #1
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e7e:	3b01      	subs	r3, #1
 8007e80:	b29a      	uxth	r2, r3
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	3b01      	subs	r3, #1
 8007e8e:	b29a      	uxth	r2, r3
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f47f aeb6 	bne.w	8007c0a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2220      	movs	r2, #32
 8007ea2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	e000      	b.n	8007ebc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8007eba:	2302      	movs	r3, #2
  }
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3728      	adds	r7, #40	@ 0x28
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	00010004 	.word	0x00010004

08007ec8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b08a      	sub	sp, #40	@ 0x28
 8007ecc:	af02      	add	r7, sp, #8
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	607a      	str	r2, [r7, #4]
 8007ed2:	603b      	str	r3, [r7, #0]
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8007ed8:	f7ff f8aa 	bl	8007030 <HAL_GetTick>
 8007edc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	2b20      	cmp	r3, #32
 8007eec:	f040 8111 	bne.w	8008112 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	9300      	str	r3, [sp, #0]
 8007ef4:	2319      	movs	r3, #25
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	4988      	ldr	r1, [pc, #544]	@ (800811c <HAL_I2C_IsDeviceReady+0x254>)
 8007efa:	68f8      	ldr	r0, [r7, #12]
 8007efc:	f000 fa90 	bl	8008420 <I2C_WaitOnFlagUntilTimeout>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d001      	beq.n	8007f0a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8007f06:	2302      	movs	r3, #2
 8007f08:	e104      	b.n	8008114 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d101      	bne.n	8007f18 <HAL_I2C_IsDeviceReady+0x50>
 8007f14:	2302      	movs	r3, #2
 8007f16:	e0fd      	b.n	8008114 <HAL_I2C_IsDeviceReady+0x24c>
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f003 0301 	and.w	r3, r3, #1
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d007      	beq.n	8007f3e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f042 0201 	orr.w	r2, r2, #1
 8007f3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007f4c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2224      	movs	r2, #36	@ 0x24
 8007f52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	4a70      	ldr	r2, [pc, #448]	@ (8008120 <HAL_I2C_IsDeviceReady+0x258>)
 8007f60:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f70:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	9300      	str	r3, [sp, #0]
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007f7e:	68f8      	ldr	r0, [r7, #12]
 8007f80:	f000 fa4e 	bl	8008420 <I2C_WaitOnFlagUntilTimeout>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00d      	beq.n	8007fa6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f98:	d103      	bne.n	8007fa2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007fa0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	e0b6      	b.n	8008114 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007fa6:	897b      	ldrh	r3, [r7, #10]
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	461a      	mov	r2, r3
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007fb4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8007fb6:	f7ff f83b 	bl	8007030 <HAL_GetTick>
 8007fba:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	695b      	ldr	r3, [r3, #20]
 8007fc2:	f003 0302 	and.w	r3, r3, #2
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	bf0c      	ite	eq
 8007fca:	2301      	moveq	r3, #1
 8007fcc:	2300      	movne	r3, #0
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	695b      	ldr	r3, [r3, #20]
 8007fd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fe0:	bf0c      	ite	eq
 8007fe2:	2301      	moveq	r3, #1
 8007fe4:	2300      	movne	r3, #0
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007fea:	e025      	b.n	8008038 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007fec:	f7ff f820 	bl	8007030 <HAL_GetTick>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	69fb      	ldr	r3, [r7, #28]
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	683a      	ldr	r2, [r7, #0]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d302      	bcc.n	8008002 <HAL_I2C_IsDeviceReady+0x13a>
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d103      	bne.n	800800a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	22a0      	movs	r2, #160	@ 0xa0
 8008006:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	695b      	ldr	r3, [r3, #20]
 8008010:	f003 0302 	and.w	r3, r3, #2
 8008014:	2b02      	cmp	r3, #2
 8008016:	bf0c      	ite	eq
 8008018:	2301      	moveq	r3, #1
 800801a:	2300      	movne	r3, #0
 800801c:	b2db      	uxtb	r3, r3
 800801e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	695b      	ldr	r3, [r3, #20]
 8008026:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800802a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800802e:	bf0c      	ite	eq
 8008030:	2301      	moveq	r3, #1
 8008032:	2300      	movne	r3, #0
 8008034:	b2db      	uxtb	r3, r3
 8008036:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800803e:	b2db      	uxtb	r3, r3
 8008040:	2ba0      	cmp	r3, #160	@ 0xa0
 8008042:	d005      	beq.n	8008050 <HAL_I2C_IsDeviceReady+0x188>
 8008044:	7dfb      	ldrb	r3, [r7, #23]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d102      	bne.n	8008050 <HAL_I2C_IsDeviceReady+0x188>
 800804a:	7dbb      	ldrb	r3, [r7, #22]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d0cd      	beq.n	8007fec <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2220      	movs	r2, #32
 8008054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	695b      	ldr	r3, [r3, #20]
 800805e:	f003 0302 	and.w	r3, r3, #2
 8008062:	2b02      	cmp	r3, #2
 8008064:	d129      	bne.n	80080ba <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008074:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008076:	2300      	movs	r3, #0
 8008078:	613b      	str	r3, [r7, #16]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	695b      	ldr	r3, [r3, #20]
 8008080:	613b      	str	r3, [r7, #16]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	699b      	ldr	r3, [r3, #24]
 8008088:	613b      	str	r3, [r7, #16]
 800808a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	9300      	str	r3, [sp, #0]
 8008090:	2319      	movs	r3, #25
 8008092:	2201      	movs	r2, #1
 8008094:	4921      	ldr	r1, [pc, #132]	@ (800811c <HAL_I2C_IsDeviceReady+0x254>)
 8008096:	68f8      	ldr	r0, [r7, #12]
 8008098:	f000 f9c2 	bl	8008420 <I2C_WaitOnFlagUntilTimeout>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d001      	beq.n	80080a6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e036      	b.n	8008114 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2220      	movs	r2, #32
 80080aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80080b6:	2300      	movs	r3, #0
 80080b8:	e02c      	b.n	8008114 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80080c8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80080d2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	9300      	str	r3, [sp, #0]
 80080d8:	2319      	movs	r3, #25
 80080da:	2201      	movs	r2, #1
 80080dc:	490f      	ldr	r1, [pc, #60]	@ (800811c <HAL_I2C_IsDeviceReady+0x254>)
 80080de:	68f8      	ldr	r0, [r7, #12]
 80080e0:	f000 f99e 	bl	8008420 <I2C_WaitOnFlagUntilTimeout>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d001      	beq.n	80080ee <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	e012      	b.n	8008114 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	3301      	adds	r3, #1
 80080f2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80080f4:	69ba      	ldr	r2, [r7, #24]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	f4ff af32 	bcc.w	8007f62 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2220      	movs	r2, #32
 8008102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2200      	movs	r2, #0
 800810a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e000      	b.n	8008114 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8008112:	2302      	movs	r3, #2
  }
}
 8008114:	4618      	mov	r0, r3
 8008116:	3720      	adds	r7, #32
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}
 800811c:	00100002 	.word	0x00100002
 8008120:	ffff0000 	.word	0xffff0000

08008124 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b088      	sub	sp, #32
 8008128:	af02      	add	r7, sp, #8
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	4608      	mov	r0, r1
 800812e:	4611      	mov	r1, r2
 8008130:	461a      	mov	r2, r3
 8008132:	4603      	mov	r3, r0
 8008134:	817b      	strh	r3, [r7, #10]
 8008136:	460b      	mov	r3, r1
 8008138:	813b      	strh	r3, [r7, #8]
 800813a:	4613      	mov	r3, r2
 800813c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800814c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800814e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008150:	9300      	str	r3, [sp, #0]
 8008152:	6a3b      	ldr	r3, [r7, #32]
 8008154:	2200      	movs	r2, #0
 8008156:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	f000 f960 	bl	8008420 <I2C_WaitOnFlagUntilTimeout>
 8008160:	4603      	mov	r3, r0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00d      	beq.n	8008182 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008170:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008174:	d103      	bne.n	800817e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800817c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800817e:	2303      	movs	r3, #3
 8008180:	e05f      	b.n	8008242 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008182:	897b      	ldrh	r3, [r7, #10]
 8008184:	b2db      	uxtb	r3, r3
 8008186:	461a      	mov	r2, r3
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008190:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008194:	6a3a      	ldr	r2, [r7, #32]
 8008196:	492d      	ldr	r1, [pc, #180]	@ (800824c <I2C_RequestMemoryWrite+0x128>)
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f000 f9bb 	bl	8008514 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d001      	beq.n	80081a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	e04c      	b.n	8008242 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081a8:	2300      	movs	r3, #0
 80081aa:	617b      	str	r3, [r7, #20]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	695b      	ldr	r3, [r3, #20]
 80081b2:	617b      	str	r3, [r7, #20]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	699b      	ldr	r3, [r3, #24]
 80081ba:	617b      	str	r3, [r7, #20]
 80081bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081c0:	6a39      	ldr	r1, [r7, #32]
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f000 fa46 	bl	8008654 <I2C_WaitOnTXEFlagUntilTimeout>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00d      	beq.n	80081ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081d2:	2b04      	cmp	r3, #4
 80081d4:	d107      	bne.n	80081e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80081e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e02b      	b.n	8008242 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80081ea:	88fb      	ldrh	r3, [r7, #6]
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d105      	bne.n	80081fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80081f0:	893b      	ldrh	r3, [r7, #8]
 80081f2:	b2da      	uxtb	r2, r3
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	611a      	str	r2, [r3, #16]
 80081fa:	e021      	b.n	8008240 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80081fc:	893b      	ldrh	r3, [r7, #8]
 80081fe:	0a1b      	lsrs	r3, r3, #8
 8008200:	b29b      	uxth	r3, r3
 8008202:	b2da      	uxtb	r2, r3
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800820a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800820c:	6a39      	ldr	r1, [r7, #32]
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	f000 fa20 	bl	8008654 <I2C_WaitOnTXEFlagUntilTimeout>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00d      	beq.n	8008236 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800821e:	2b04      	cmp	r3, #4
 8008220:	d107      	bne.n	8008232 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008230:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	e005      	b.n	8008242 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008236:	893b      	ldrh	r3, [r7, #8]
 8008238:	b2da      	uxtb	r2, r3
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3718      	adds	r7, #24
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	00010002 	.word	0x00010002

08008250 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b088      	sub	sp, #32
 8008254:	af02      	add	r7, sp, #8
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	4608      	mov	r0, r1
 800825a:	4611      	mov	r1, r2
 800825c:	461a      	mov	r2, r3
 800825e:	4603      	mov	r3, r0
 8008260:	817b      	strh	r3, [r7, #10]
 8008262:	460b      	mov	r3, r1
 8008264:	813b      	strh	r3, [r7, #8]
 8008266:	4613      	mov	r3, r2
 8008268:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008278:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008288:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800828a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800828c:	9300      	str	r3, [sp, #0]
 800828e:	6a3b      	ldr	r3, [r7, #32]
 8008290:	2200      	movs	r2, #0
 8008292:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	f000 f8c2 	bl	8008420 <I2C_WaitOnFlagUntilTimeout>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d00d      	beq.n	80082be <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082b0:	d103      	bne.n	80082ba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80082b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80082ba:	2303      	movs	r3, #3
 80082bc:	e0aa      	b.n	8008414 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80082be:	897b      	ldrh	r3, [r7, #10]
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	461a      	mov	r2, r3
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80082cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80082ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d0:	6a3a      	ldr	r2, [r7, #32]
 80082d2:	4952      	ldr	r1, [pc, #328]	@ (800841c <I2C_RequestMemoryRead+0x1cc>)
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	f000 f91d 	bl	8008514 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d001      	beq.n	80082e4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	e097      	b.n	8008414 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082e4:	2300      	movs	r3, #0
 80082e6:	617b      	str	r3, [r7, #20]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	695b      	ldr	r3, [r3, #20]
 80082ee:	617b      	str	r3, [r7, #20]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	699b      	ldr	r3, [r3, #24]
 80082f6:	617b      	str	r3, [r7, #20]
 80082f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082fc:	6a39      	ldr	r1, [r7, #32]
 80082fe:	68f8      	ldr	r0, [r7, #12]
 8008300:	f000 f9a8 	bl	8008654 <I2C_WaitOnTXEFlagUntilTimeout>
 8008304:	4603      	mov	r3, r0
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00d      	beq.n	8008326 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800830e:	2b04      	cmp	r3, #4
 8008310:	d107      	bne.n	8008322 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008320:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e076      	b.n	8008414 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008326:	88fb      	ldrh	r3, [r7, #6]
 8008328:	2b01      	cmp	r3, #1
 800832a:	d105      	bne.n	8008338 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800832c:	893b      	ldrh	r3, [r7, #8]
 800832e:	b2da      	uxtb	r2, r3
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	611a      	str	r2, [r3, #16]
 8008336:	e021      	b.n	800837c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008338:	893b      	ldrh	r3, [r7, #8]
 800833a:	0a1b      	lsrs	r3, r3, #8
 800833c:	b29b      	uxth	r3, r3
 800833e:	b2da      	uxtb	r2, r3
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008346:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008348:	6a39      	ldr	r1, [r7, #32]
 800834a:	68f8      	ldr	r0, [r7, #12]
 800834c:	f000 f982 	bl	8008654 <I2C_WaitOnTXEFlagUntilTimeout>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00d      	beq.n	8008372 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800835a:	2b04      	cmp	r3, #4
 800835c:	d107      	bne.n	800836e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800836c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	e050      	b.n	8008414 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008372:	893b      	ldrh	r3, [r7, #8]
 8008374:	b2da      	uxtb	r2, r3
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800837c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800837e:	6a39      	ldr	r1, [r7, #32]
 8008380:	68f8      	ldr	r0, [r7, #12]
 8008382:	f000 f967 	bl	8008654 <I2C_WaitOnTXEFlagUntilTimeout>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00d      	beq.n	80083a8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008390:	2b04      	cmp	r3, #4
 8008392:	d107      	bne.n	80083a4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80083a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	e035      	b.n	8008414 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80083b6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80083b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ba:	9300      	str	r3, [sp, #0]
 80083bc:	6a3b      	ldr	r3, [r7, #32]
 80083be:	2200      	movs	r2, #0
 80083c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f000 f82b 	bl	8008420 <I2C_WaitOnFlagUntilTimeout>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00d      	beq.n	80083ec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083de:	d103      	bne.n	80083e8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80083e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80083e8:	2303      	movs	r3, #3
 80083ea:	e013      	b.n	8008414 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80083ec:	897b      	ldrh	r3, [r7, #10]
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	f043 0301 	orr.w	r3, r3, #1
 80083f4:	b2da      	uxtb	r2, r3
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80083fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083fe:	6a3a      	ldr	r2, [r7, #32]
 8008400:	4906      	ldr	r1, [pc, #24]	@ (800841c <I2C_RequestMemoryRead+0x1cc>)
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	f000 f886 	bl	8008514 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d001      	beq.n	8008412 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	e000      	b.n	8008414 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008412:	2300      	movs	r3, #0
}
 8008414:	4618      	mov	r0, r3
 8008416:	3718      	adds	r7, #24
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	00010002 	.word	0x00010002

08008420 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	603b      	str	r3, [r7, #0]
 800842c:	4613      	mov	r3, r2
 800842e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008430:	e048      	b.n	80084c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008438:	d044      	beq.n	80084c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800843a:	f7fe fdf9 	bl	8007030 <HAL_GetTick>
 800843e:	4602      	mov	r2, r0
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	1ad3      	subs	r3, r2, r3
 8008444:	683a      	ldr	r2, [r7, #0]
 8008446:	429a      	cmp	r2, r3
 8008448:	d302      	bcc.n	8008450 <I2C_WaitOnFlagUntilTimeout+0x30>
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d139      	bne.n	80084c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	0c1b      	lsrs	r3, r3, #16
 8008454:	b2db      	uxtb	r3, r3
 8008456:	2b01      	cmp	r3, #1
 8008458:	d10d      	bne.n	8008476 <I2C_WaitOnFlagUntilTimeout+0x56>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	695b      	ldr	r3, [r3, #20]
 8008460:	43da      	mvns	r2, r3
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	4013      	ands	r3, r2
 8008466:	b29b      	uxth	r3, r3
 8008468:	2b00      	cmp	r3, #0
 800846a:	bf0c      	ite	eq
 800846c:	2301      	moveq	r3, #1
 800846e:	2300      	movne	r3, #0
 8008470:	b2db      	uxtb	r3, r3
 8008472:	461a      	mov	r2, r3
 8008474:	e00c      	b.n	8008490 <I2C_WaitOnFlagUntilTimeout+0x70>
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	699b      	ldr	r3, [r3, #24]
 800847c:	43da      	mvns	r2, r3
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	4013      	ands	r3, r2
 8008482:	b29b      	uxth	r3, r3
 8008484:	2b00      	cmp	r3, #0
 8008486:	bf0c      	ite	eq
 8008488:	2301      	moveq	r3, #1
 800848a:	2300      	movne	r3, #0
 800848c:	b2db      	uxtb	r3, r3
 800848e:	461a      	mov	r2, r3
 8008490:	79fb      	ldrb	r3, [r7, #7]
 8008492:	429a      	cmp	r2, r3
 8008494:	d116      	bne.n	80084c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2200      	movs	r2, #0
 800849a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2220      	movs	r2, #32
 80084a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084b0:	f043 0220 	orr.w	r2, r3, #32
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80084c0:	2301      	movs	r3, #1
 80084c2:	e023      	b.n	800850c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	0c1b      	lsrs	r3, r3, #16
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d10d      	bne.n	80084ea <I2C_WaitOnFlagUntilTimeout+0xca>
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	695b      	ldr	r3, [r3, #20]
 80084d4:	43da      	mvns	r2, r3
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	4013      	ands	r3, r2
 80084da:	b29b      	uxth	r3, r3
 80084dc:	2b00      	cmp	r3, #0
 80084de:	bf0c      	ite	eq
 80084e0:	2301      	moveq	r3, #1
 80084e2:	2300      	movne	r3, #0
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	461a      	mov	r2, r3
 80084e8:	e00c      	b.n	8008504 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	699b      	ldr	r3, [r3, #24]
 80084f0:	43da      	mvns	r2, r3
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	4013      	ands	r3, r2
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	bf0c      	ite	eq
 80084fc:	2301      	moveq	r3, #1
 80084fe:	2300      	movne	r3, #0
 8008500:	b2db      	uxtb	r3, r3
 8008502:	461a      	mov	r2, r3
 8008504:	79fb      	ldrb	r3, [r7, #7]
 8008506:	429a      	cmp	r2, r3
 8008508:	d093      	beq.n	8008432 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3710      	adds	r7, #16
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	607a      	str	r2, [r7, #4]
 8008520:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008522:	e071      	b.n	8008608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	695b      	ldr	r3, [r3, #20]
 800852a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800852e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008532:	d123      	bne.n	800857c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008542:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800854c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2200      	movs	r2, #0
 8008552:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2220      	movs	r2, #32
 8008558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2200      	movs	r2, #0
 8008560:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008568:	f043 0204 	orr.w	r2, r3, #4
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2200      	movs	r2, #0
 8008574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	e067      	b.n	800864c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008582:	d041      	beq.n	8008608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008584:	f7fe fd54 	bl	8007030 <HAL_GetTick>
 8008588:	4602      	mov	r2, r0
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	1ad3      	subs	r3, r2, r3
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	429a      	cmp	r2, r3
 8008592:	d302      	bcc.n	800859a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d136      	bne.n	8008608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	0c1b      	lsrs	r3, r3, #16
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d10c      	bne.n	80085be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	695b      	ldr	r3, [r3, #20]
 80085aa:	43da      	mvns	r2, r3
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	4013      	ands	r3, r2
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	bf14      	ite	ne
 80085b6:	2301      	movne	r3, #1
 80085b8:	2300      	moveq	r3, #0
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	e00b      	b.n	80085d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	699b      	ldr	r3, [r3, #24]
 80085c4:	43da      	mvns	r2, r3
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	4013      	ands	r3, r2
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	bf14      	ite	ne
 80085d0:	2301      	movne	r3, #1
 80085d2:	2300      	moveq	r3, #0
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d016      	beq.n	8008608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2200      	movs	r2, #0
 80085de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2220      	movs	r2, #32
 80085e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2200      	movs	r2, #0
 80085ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085f4:	f043 0220 	orr.w	r2, r3, #32
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2200      	movs	r2, #0
 8008600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008604:	2301      	movs	r3, #1
 8008606:	e021      	b.n	800864c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	0c1b      	lsrs	r3, r3, #16
 800860c:	b2db      	uxtb	r3, r3
 800860e:	2b01      	cmp	r3, #1
 8008610:	d10c      	bne.n	800862c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	695b      	ldr	r3, [r3, #20]
 8008618:	43da      	mvns	r2, r3
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	4013      	ands	r3, r2
 800861e:	b29b      	uxth	r3, r3
 8008620:	2b00      	cmp	r3, #0
 8008622:	bf14      	ite	ne
 8008624:	2301      	movne	r3, #1
 8008626:	2300      	moveq	r3, #0
 8008628:	b2db      	uxtb	r3, r3
 800862a:	e00b      	b.n	8008644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	699b      	ldr	r3, [r3, #24]
 8008632:	43da      	mvns	r2, r3
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	4013      	ands	r3, r2
 8008638:	b29b      	uxth	r3, r3
 800863a:	2b00      	cmp	r3, #0
 800863c:	bf14      	ite	ne
 800863e:	2301      	movne	r3, #1
 8008640:	2300      	moveq	r3, #0
 8008642:	b2db      	uxtb	r3, r3
 8008644:	2b00      	cmp	r3, #0
 8008646:	f47f af6d 	bne.w	8008524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3710      	adds	r7, #16
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008660:	e034      	b.n	80086cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008662:	68f8      	ldr	r0, [r7, #12]
 8008664:	f000 f8e3 	bl	800882e <I2C_IsAcknowledgeFailed>
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d001      	beq.n	8008672 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	e034      	b.n	80086dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008678:	d028      	beq.n	80086cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800867a:	f7fe fcd9 	bl	8007030 <HAL_GetTick>
 800867e:	4602      	mov	r2, r0
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	1ad3      	subs	r3, r2, r3
 8008684:	68ba      	ldr	r2, [r7, #8]
 8008686:	429a      	cmp	r2, r3
 8008688:	d302      	bcc.n	8008690 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d11d      	bne.n	80086cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	695b      	ldr	r3, [r3, #20]
 8008696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800869a:	2b80      	cmp	r3, #128	@ 0x80
 800869c:	d016      	beq.n	80086cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2200      	movs	r2, #0
 80086a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2220      	movs	r2, #32
 80086a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086b8:	f043 0220 	orr.w	r2, r3, #32
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	e007      	b.n	80086dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	695b      	ldr	r3, [r3, #20]
 80086d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086d6:	2b80      	cmp	r3, #128	@ 0x80
 80086d8:	d1c3      	bne.n	8008662 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80086f0:	e034      	b.n	800875c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f000 f89b 	bl	800882e <I2C_IsAcknowledgeFailed>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d001      	beq.n	8008702 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	e034      	b.n	800876c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008708:	d028      	beq.n	800875c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800870a:	f7fe fc91 	bl	8007030 <HAL_GetTick>
 800870e:	4602      	mov	r2, r0
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	1ad3      	subs	r3, r2, r3
 8008714:	68ba      	ldr	r2, [r7, #8]
 8008716:	429a      	cmp	r2, r3
 8008718:	d302      	bcc.n	8008720 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d11d      	bne.n	800875c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	695b      	ldr	r3, [r3, #20]
 8008726:	f003 0304 	and.w	r3, r3, #4
 800872a:	2b04      	cmp	r3, #4
 800872c:	d016      	beq.n	800875c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2200      	movs	r2, #0
 8008732:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2220      	movs	r2, #32
 8008738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2200      	movs	r2, #0
 8008740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008748:	f043 0220 	orr.w	r2, r3, #32
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2200      	movs	r2, #0
 8008754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	e007      	b.n	800876c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	695b      	ldr	r3, [r3, #20]
 8008762:	f003 0304 	and.w	r3, r3, #4
 8008766:	2b04      	cmp	r3, #4
 8008768:	d1c3      	bne.n	80086f2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800876a:	2300      	movs	r3, #0
}
 800876c:	4618      	mov	r0, r3
 800876e:	3710      	adds	r7, #16
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008780:	e049      	b.n	8008816 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	695b      	ldr	r3, [r3, #20]
 8008788:	f003 0310 	and.w	r3, r3, #16
 800878c:	2b10      	cmp	r3, #16
 800878e:	d119      	bne.n	80087c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f06f 0210 	mvn.w	r2, #16
 8008798:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2200      	movs	r2, #0
 800879e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2220      	movs	r2, #32
 80087a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80087c0:	2301      	movs	r3, #1
 80087c2:	e030      	b.n	8008826 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087c4:	f7fe fc34 	bl	8007030 <HAL_GetTick>
 80087c8:	4602      	mov	r2, r0
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	1ad3      	subs	r3, r2, r3
 80087ce:	68ba      	ldr	r2, [r7, #8]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d302      	bcc.n	80087da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d11d      	bne.n	8008816 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	695b      	ldr	r3, [r3, #20]
 80087e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087e4:	2b40      	cmp	r3, #64	@ 0x40
 80087e6:	d016      	beq.n	8008816 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2200      	movs	r2, #0
 80087ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2220      	movs	r2, #32
 80087f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2200      	movs	r2, #0
 80087fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008802:	f043 0220 	orr.w	r2, r3, #32
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2200      	movs	r2, #0
 800880e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	e007      	b.n	8008826 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	695b      	ldr	r3, [r3, #20]
 800881c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008820:	2b40      	cmp	r3, #64	@ 0x40
 8008822:	d1ae      	bne.n	8008782 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008824:	2300      	movs	r3, #0
}
 8008826:	4618      	mov	r0, r3
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800882e:	b480      	push	{r7}
 8008830:	b083      	sub	sp, #12
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	695b      	ldr	r3, [r3, #20]
 800883c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008840:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008844:	d11b      	bne.n	800887e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800884e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2220      	movs	r2, #32
 800885a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800886a:	f043 0204 	orr.w	r2, r3, #4
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	e000      	b.n	8008880 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	370c      	adds	r7, #12
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800889c:	b2db      	uxtb	r3, r3
 800889e:	2b20      	cmp	r3, #32
 80088a0:	d129      	bne.n	80088f6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2224      	movs	r2, #36	@ 0x24
 80088a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f022 0201 	bic.w	r2, r2, #1
 80088b8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f022 0210 	bic.w	r2, r2, #16
 80088c8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	683a      	ldr	r2, [r7, #0]
 80088d6:	430a      	orrs	r2, r1
 80088d8:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f042 0201 	orr.w	r2, r2, #1
 80088e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2220      	movs	r2, #32
 80088ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80088f2:	2300      	movs	r3, #0
 80088f4:	e000      	b.n	80088f8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80088f6:	2302      	movs	r3, #2
  }
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	370c      	adds	r7, #12
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008904:	b480      	push	{r7}
 8008906:	b085      	sub	sp, #20
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800890e:	2300      	movs	r3, #0
 8008910:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008918:	b2db      	uxtb	r3, r3
 800891a:	2b20      	cmp	r3, #32
 800891c:	d12a      	bne.n	8008974 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2224      	movs	r2, #36	@ 0x24
 8008922:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f022 0201 	bic.w	r2, r2, #1
 8008934:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800893c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800893e:	89fb      	ldrh	r3, [r7, #14]
 8008940:	f023 030f 	bic.w	r3, r3, #15
 8008944:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	b29a      	uxth	r2, r3
 800894a:	89fb      	ldrh	r3, [r7, #14]
 800894c:	4313      	orrs	r3, r2
 800894e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	89fa      	ldrh	r2, [r7, #14]
 8008956:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f042 0201 	orr.w	r2, r2, #1
 8008966:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2220      	movs	r2, #32
 800896c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8008970:	2300      	movs	r3, #0
 8008972:	e000      	b.n	8008976 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8008974:	2302      	movs	r3, #2
  }
}
 8008976:	4618      	mov	r0, r3
 8008978:	3714      	adds	r7, #20
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr
	...

08008984 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800898a:	2300      	movs	r3, #0
 800898c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800898e:	2300      	movs	r3, #0
 8008990:	603b      	str	r3, [r7, #0]
 8008992:	4b20      	ldr	r3, [pc, #128]	@ (8008a14 <HAL_PWREx_EnableOverDrive+0x90>)
 8008994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008996:	4a1f      	ldr	r2, [pc, #124]	@ (8008a14 <HAL_PWREx_EnableOverDrive+0x90>)
 8008998:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800899c:	6413      	str	r3, [r2, #64]	@ 0x40
 800899e:	4b1d      	ldr	r3, [pc, #116]	@ (8008a14 <HAL_PWREx_EnableOverDrive+0x90>)
 80089a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80089a6:	603b      	str	r3, [r7, #0]
 80089a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80089aa:	4b1b      	ldr	r3, [pc, #108]	@ (8008a18 <HAL_PWREx_EnableOverDrive+0x94>)
 80089ac:	2201      	movs	r2, #1
 80089ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80089b0:	f7fe fb3e 	bl	8007030 <HAL_GetTick>
 80089b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80089b6:	e009      	b.n	80089cc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80089b8:	f7fe fb3a 	bl	8007030 <HAL_GetTick>
 80089bc:	4602      	mov	r2, r0
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	1ad3      	subs	r3, r2, r3
 80089c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80089c6:	d901      	bls.n	80089cc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80089c8:	2303      	movs	r3, #3
 80089ca:	e01f      	b.n	8008a0c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80089cc:	4b13      	ldr	r3, [pc, #76]	@ (8008a1c <HAL_PWREx_EnableOverDrive+0x98>)
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80089d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089d8:	d1ee      	bne.n	80089b8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80089da:	4b11      	ldr	r3, [pc, #68]	@ (8008a20 <HAL_PWREx_EnableOverDrive+0x9c>)
 80089dc:	2201      	movs	r2, #1
 80089de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80089e0:	f7fe fb26 	bl	8007030 <HAL_GetTick>
 80089e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80089e6:	e009      	b.n	80089fc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80089e8:	f7fe fb22 	bl	8007030 <HAL_GetTick>
 80089ec:	4602      	mov	r2, r0
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	1ad3      	subs	r3, r2, r3
 80089f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80089f6:	d901      	bls.n	80089fc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80089f8:	2303      	movs	r3, #3
 80089fa:	e007      	b.n	8008a0c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80089fc:	4b07      	ldr	r3, [pc, #28]	@ (8008a1c <HAL_PWREx_EnableOverDrive+0x98>)
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a08:	d1ee      	bne.n	80089e8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3708      	adds	r7, #8
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	40023800 	.word	0x40023800
 8008a18:	420e0040 	.word	0x420e0040
 8008a1c:	40007000 	.word	0x40007000
 8008a20:	420e0044 	.word	0x420e0044

08008a24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b086      	sub	sp, #24
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d101      	bne.n	8008a36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e267      	b.n	8008f06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d075      	beq.n	8008b2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008a42:	4b88      	ldr	r3, [pc, #544]	@ (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	f003 030c 	and.w	r3, r3, #12
 8008a4a:	2b04      	cmp	r3, #4
 8008a4c:	d00c      	beq.n	8008a68 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a4e:	4b85      	ldr	r3, [pc, #532]	@ (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008a56:	2b08      	cmp	r3, #8
 8008a58:	d112      	bne.n	8008a80 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a5a:	4b82      	ldr	r3, [pc, #520]	@ (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a66:	d10b      	bne.n	8008a80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a68:	4b7e      	ldr	r3, [pc, #504]	@ (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d05b      	beq.n	8008b2c <HAL_RCC_OscConfig+0x108>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d157      	bne.n	8008b2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e242      	b.n	8008f06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a88:	d106      	bne.n	8008a98 <HAL_RCC_OscConfig+0x74>
 8008a8a:	4b76      	ldr	r3, [pc, #472]	@ (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4a75      	ldr	r2, [pc, #468]	@ (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008a90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a94:	6013      	str	r3, [r2, #0]
 8008a96:	e01d      	b.n	8008ad4 <HAL_RCC_OscConfig+0xb0>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008aa0:	d10c      	bne.n	8008abc <HAL_RCC_OscConfig+0x98>
 8008aa2:	4b70      	ldr	r3, [pc, #448]	@ (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a6f      	ldr	r2, [pc, #444]	@ (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008aa8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008aac:	6013      	str	r3, [r2, #0]
 8008aae:	4b6d      	ldr	r3, [pc, #436]	@ (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a6c      	ldr	r2, [pc, #432]	@ (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008ab4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ab8:	6013      	str	r3, [r2, #0]
 8008aba:	e00b      	b.n	8008ad4 <HAL_RCC_OscConfig+0xb0>
 8008abc:	4b69      	ldr	r3, [pc, #420]	@ (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a68      	ldr	r2, [pc, #416]	@ (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008ac2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ac6:	6013      	str	r3, [r2, #0]
 8008ac8:	4b66      	ldr	r3, [pc, #408]	@ (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a65      	ldr	r2, [pc, #404]	@ (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008ace:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008ad2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d013      	beq.n	8008b04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008adc:	f7fe faa8 	bl	8007030 <HAL_GetTick>
 8008ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ae2:	e008      	b.n	8008af6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ae4:	f7fe faa4 	bl	8007030 <HAL_GetTick>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	1ad3      	subs	r3, r2, r3
 8008aee:	2b64      	cmp	r3, #100	@ 0x64
 8008af0:	d901      	bls.n	8008af6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008af2:	2303      	movs	r3, #3
 8008af4:	e207      	b.n	8008f06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008af6:	4b5b      	ldr	r3, [pc, #364]	@ (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d0f0      	beq.n	8008ae4 <HAL_RCC_OscConfig+0xc0>
 8008b02:	e014      	b.n	8008b2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b04:	f7fe fa94 	bl	8007030 <HAL_GetTick>
 8008b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b0a:	e008      	b.n	8008b1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b0c:	f7fe fa90 	bl	8007030 <HAL_GetTick>
 8008b10:	4602      	mov	r2, r0
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	1ad3      	subs	r3, r2, r3
 8008b16:	2b64      	cmp	r3, #100	@ 0x64
 8008b18:	d901      	bls.n	8008b1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	e1f3      	b.n	8008f06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b1e:	4b51      	ldr	r3, [pc, #324]	@ (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d1f0      	bne.n	8008b0c <HAL_RCC_OscConfig+0xe8>
 8008b2a:	e000      	b.n	8008b2e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f003 0302 	and.w	r3, r3, #2
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d063      	beq.n	8008c02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008b3a:	4b4a      	ldr	r3, [pc, #296]	@ (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	f003 030c 	and.w	r3, r3, #12
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d00b      	beq.n	8008b5e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008b46:	4b47      	ldr	r3, [pc, #284]	@ (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008b4e:	2b08      	cmp	r3, #8
 8008b50:	d11c      	bne.n	8008b8c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008b52:	4b44      	ldr	r3, [pc, #272]	@ (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d116      	bne.n	8008b8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b5e:	4b41      	ldr	r3, [pc, #260]	@ (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f003 0302 	and.w	r3, r3, #2
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d005      	beq.n	8008b76 <HAL_RCC_OscConfig+0x152>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d001      	beq.n	8008b76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	e1c7      	b.n	8008f06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b76:	4b3b      	ldr	r3, [pc, #236]	@ (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	00db      	lsls	r3, r3, #3
 8008b84:	4937      	ldr	r1, [pc, #220]	@ (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008b86:	4313      	orrs	r3, r2
 8008b88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b8a:	e03a      	b.n	8008c02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d020      	beq.n	8008bd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008b94:	4b34      	ldr	r3, [pc, #208]	@ (8008c68 <HAL_RCC_OscConfig+0x244>)
 8008b96:	2201      	movs	r2, #1
 8008b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b9a:	f7fe fa49 	bl	8007030 <HAL_GetTick>
 8008b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ba0:	e008      	b.n	8008bb4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ba2:	f7fe fa45 	bl	8007030 <HAL_GetTick>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	1ad3      	subs	r3, r2, r3
 8008bac:	2b02      	cmp	r3, #2
 8008bae:	d901      	bls.n	8008bb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008bb0:	2303      	movs	r3, #3
 8008bb2:	e1a8      	b.n	8008f06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bb4:	4b2b      	ldr	r3, [pc, #172]	@ (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 0302 	and.w	r3, r3, #2
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d0f0      	beq.n	8008ba2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bc0:	4b28      	ldr	r3, [pc, #160]	@ (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	691b      	ldr	r3, [r3, #16]
 8008bcc:	00db      	lsls	r3, r3, #3
 8008bce:	4925      	ldr	r1, [pc, #148]	@ (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	600b      	str	r3, [r1, #0]
 8008bd4:	e015      	b.n	8008c02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008bd6:	4b24      	ldr	r3, [pc, #144]	@ (8008c68 <HAL_RCC_OscConfig+0x244>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bdc:	f7fe fa28 	bl	8007030 <HAL_GetTick>
 8008be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008be2:	e008      	b.n	8008bf6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008be4:	f7fe fa24 	bl	8007030 <HAL_GetTick>
 8008be8:	4602      	mov	r2, r0
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	1ad3      	subs	r3, r2, r3
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d901      	bls.n	8008bf6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	e187      	b.n	8008f06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008bf6:	4b1b      	ldr	r3, [pc, #108]	@ (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f003 0302 	and.w	r3, r3, #2
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d1f0      	bne.n	8008be4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f003 0308 	and.w	r3, r3, #8
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d036      	beq.n	8008c7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	695b      	ldr	r3, [r3, #20]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d016      	beq.n	8008c44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c16:	4b15      	ldr	r3, [pc, #84]	@ (8008c6c <HAL_RCC_OscConfig+0x248>)
 8008c18:	2201      	movs	r2, #1
 8008c1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c1c:	f7fe fa08 	bl	8007030 <HAL_GetTick>
 8008c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c22:	e008      	b.n	8008c36 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c24:	f7fe fa04 	bl	8007030 <HAL_GetTick>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	1ad3      	subs	r3, r2, r3
 8008c2e:	2b02      	cmp	r3, #2
 8008c30:	d901      	bls.n	8008c36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008c32:	2303      	movs	r3, #3
 8008c34:	e167      	b.n	8008f06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c36:	4b0b      	ldr	r3, [pc, #44]	@ (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008c38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c3a:	f003 0302 	and.w	r3, r3, #2
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d0f0      	beq.n	8008c24 <HAL_RCC_OscConfig+0x200>
 8008c42:	e01b      	b.n	8008c7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c44:	4b09      	ldr	r3, [pc, #36]	@ (8008c6c <HAL_RCC_OscConfig+0x248>)
 8008c46:	2200      	movs	r2, #0
 8008c48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c4a:	f7fe f9f1 	bl	8007030 <HAL_GetTick>
 8008c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c50:	e00e      	b.n	8008c70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c52:	f7fe f9ed 	bl	8007030 <HAL_GetTick>
 8008c56:	4602      	mov	r2, r0
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	1ad3      	subs	r3, r2, r3
 8008c5c:	2b02      	cmp	r3, #2
 8008c5e:	d907      	bls.n	8008c70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008c60:	2303      	movs	r3, #3
 8008c62:	e150      	b.n	8008f06 <HAL_RCC_OscConfig+0x4e2>
 8008c64:	40023800 	.word	0x40023800
 8008c68:	42470000 	.word	0x42470000
 8008c6c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c70:	4b88      	ldr	r3, [pc, #544]	@ (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008c72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c74:	f003 0302 	and.w	r3, r3, #2
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d1ea      	bne.n	8008c52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f003 0304 	and.w	r3, r3, #4
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	f000 8097 	beq.w	8008db8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008c8e:	4b81      	ldr	r3, [pc, #516]	@ (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d10f      	bne.n	8008cba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	60bb      	str	r3, [r7, #8]
 8008c9e:	4b7d      	ldr	r3, [pc, #500]	@ (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ca2:	4a7c      	ldr	r2, [pc, #496]	@ (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008ca4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ca8:	6413      	str	r3, [r2, #64]	@ 0x40
 8008caa:	4b7a      	ldr	r3, [pc, #488]	@ (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008cb2:	60bb      	str	r3, [r7, #8]
 8008cb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cba:	4b77      	ldr	r3, [pc, #476]	@ (8008e98 <HAL_RCC_OscConfig+0x474>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d118      	bne.n	8008cf8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008cc6:	4b74      	ldr	r3, [pc, #464]	@ (8008e98 <HAL_RCC_OscConfig+0x474>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a73      	ldr	r2, [pc, #460]	@ (8008e98 <HAL_RCC_OscConfig+0x474>)
 8008ccc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008cd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008cd2:	f7fe f9ad 	bl	8007030 <HAL_GetTick>
 8008cd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cd8:	e008      	b.n	8008cec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008cda:	f7fe f9a9 	bl	8007030 <HAL_GetTick>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	1ad3      	subs	r3, r2, r3
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	d901      	bls.n	8008cec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008ce8:	2303      	movs	r3, #3
 8008cea:	e10c      	b.n	8008f06 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cec:	4b6a      	ldr	r3, [pc, #424]	@ (8008e98 <HAL_RCC_OscConfig+0x474>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d0f0      	beq.n	8008cda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d106      	bne.n	8008d0e <HAL_RCC_OscConfig+0x2ea>
 8008d00:	4b64      	ldr	r3, [pc, #400]	@ (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008d02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d04:	4a63      	ldr	r2, [pc, #396]	@ (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008d06:	f043 0301 	orr.w	r3, r3, #1
 8008d0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d0c:	e01c      	b.n	8008d48 <HAL_RCC_OscConfig+0x324>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	2b05      	cmp	r3, #5
 8008d14:	d10c      	bne.n	8008d30 <HAL_RCC_OscConfig+0x30c>
 8008d16:	4b5f      	ldr	r3, [pc, #380]	@ (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d1a:	4a5e      	ldr	r2, [pc, #376]	@ (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008d1c:	f043 0304 	orr.w	r3, r3, #4
 8008d20:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d22:	4b5c      	ldr	r3, [pc, #368]	@ (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d26:	4a5b      	ldr	r2, [pc, #364]	@ (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008d28:	f043 0301 	orr.w	r3, r3, #1
 8008d2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d2e:	e00b      	b.n	8008d48 <HAL_RCC_OscConfig+0x324>
 8008d30:	4b58      	ldr	r3, [pc, #352]	@ (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008d32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d34:	4a57      	ldr	r2, [pc, #348]	@ (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008d36:	f023 0301 	bic.w	r3, r3, #1
 8008d3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d3c:	4b55      	ldr	r3, [pc, #340]	@ (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008d3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d40:	4a54      	ldr	r2, [pc, #336]	@ (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008d42:	f023 0304 	bic.w	r3, r3, #4
 8008d46:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d015      	beq.n	8008d7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d50:	f7fe f96e 	bl	8007030 <HAL_GetTick>
 8008d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d56:	e00a      	b.n	8008d6e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d58:	f7fe f96a 	bl	8007030 <HAL_GetTick>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	1ad3      	subs	r3, r2, r3
 8008d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d901      	bls.n	8008d6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008d6a:	2303      	movs	r3, #3
 8008d6c:	e0cb      	b.n	8008f06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d6e:	4b49      	ldr	r3, [pc, #292]	@ (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d72:	f003 0302 	and.w	r3, r3, #2
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d0ee      	beq.n	8008d58 <HAL_RCC_OscConfig+0x334>
 8008d7a:	e014      	b.n	8008da6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d7c:	f7fe f958 	bl	8007030 <HAL_GetTick>
 8008d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d82:	e00a      	b.n	8008d9a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d84:	f7fe f954 	bl	8007030 <HAL_GetTick>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	1ad3      	subs	r3, r2, r3
 8008d8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d901      	bls.n	8008d9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008d96:	2303      	movs	r3, #3
 8008d98:	e0b5      	b.n	8008f06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d9a:	4b3e      	ldr	r3, [pc, #248]	@ (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d9e:	f003 0302 	and.w	r3, r3, #2
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d1ee      	bne.n	8008d84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008da6:	7dfb      	ldrb	r3, [r7, #23]
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d105      	bne.n	8008db8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008dac:	4b39      	ldr	r3, [pc, #228]	@ (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008db0:	4a38      	ldr	r2, [pc, #224]	@ (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008db2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008db6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	699b      	ldr	r3, [r3, #24]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f000 80a1 	beq.w	8008f04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008dc2:	4b34      	ldr	r3, [pc, #208]	@ (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	f003 030c 	and.w	r3, r3, #12
 8008dca:	2b08      	cmp	r3, #8
 8008dcc:	d05c      	beq.n	8008e88 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	699b      	ldr	r3, [r3, #24]
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d141      	bne.n	8008e5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008dd6:	4b31      	ldr	r3, [pc, #196]	@ (8008e9c <HAL_RCC_OscConfig+0x478>)
 8008dd8:	2200      	movs	r2, #0
 8008dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ddc:	f7fe f928 	bl	8007030 <HAL_GetTick>
 8008de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008de2:	e008      	b.n	8008df6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008de4:	f7fe f924 	bl	8007030 <HAL_GetTick>
 8008de8:	4602      	mov	r2, r0
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	1ad3      	subs	r3, r2, r3
 8008dee:	2b02      	cmp	r3, #2
 8008df0:	d901      	bls.n	8008df6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008df2:	2303      	movs	r3, #3
 8008df4:	e087      	b.n	8008f06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008df6:	4b27      	ldr	r3, [pc, #156]	@ (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d1f0      	bne.n	8008de4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	69da      	ldr	r2, [r3, #28]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6a1b      	ldr	r3, [r3, #32]
 8008e0a:	431a      	orrs	r2, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e10:	019b      	lsls	r3, r3, #6
 8008e12:	431a      	orrs	r2, r3
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e18:	085b      	lsrs	r3, r3, #1
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	041b      	lsls	r3, r3, #16
 8008e1e:	431a      	orrs	r2, r3
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e24:	061b      	lsls	r3, r3, #24
 8008e26:	491b      	ldr	r1, [pc, #108]	@ (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e2c:	4b1b      	ldr	r3, [pc, #108]	@ (8008e9c <HAL_RCC_OscConfig+0x478>)
 8008e2e:	2201      	movs	r2, #1
 8008e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e32:	f7fe f8fd 	bl	8007030 <HAL_GetTick>
 8008e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e38:	e008      	b.n	8008e4c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e3a:	f7fe f8f9 	bl	8007030 <HAL_GetTick>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	1ad3      	subs	r3, r2, r3
 8008e44:	2b02      	cmp	r3, #2
 8008e46:	d901      	bls.n	8008e4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008e48:	2303      	movs	r3, #3
 8008e4a:	e05c      	b.n	8008f06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e4c:	4b11      	ldr	r3, [pc, #68]	@ (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d0f0      	beq.n	8008e3a <HAL_RCC_OscConfig+0x416>
 8008e58:	e054      	b.n	8008f04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e5a:	4b10      	ldr	r3, [pc, #64]	@ (8008e9c <HAL_RCC_OscConfig+0x478>)
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e60:	f7fe f8e6 	bl	8007030 <HAL_GetTick>
 8008e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e66:	e008      	b.n	8008e7a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e68:	f7fe f8e2 	bl	8007030 <HAL_GetTick>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	1ad3      	subs	r3, r2, r3
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	d901      	bls.n	8008e7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008e76:	2303      	movs	r3, #3
 8008e78:	e045      	b.n	8008f06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e7a:	4b06      	ldr	r3, [pc, #24]	@ (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d1f0      	bne.n	8008e68 <HAL_RCC_OscConfig+0x444>
 8008e86:	e03d      	b.n	8008f04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	699b      	ldr	r3, [r3, #24]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d107      	bne.n	8008ea0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008e90:	2301      	movs	r3, #1
 8008e92:	e038      	b.n	8008f06 <HAL_RCC_OscConfig+0x4e2>
 8008e94:	40023800 	.word	0x40023800
 8008e98:	40007000 	.word	0x40007000
 8008e9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8008f10 <HAL_RCC_OscConfig+0x4ec>)
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	699b      	ldr	r3, [r3, #24]
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d028      	beq.n	8008f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d121      	bne.n	8008f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d11a      	bne.n	8008f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008ed0:	4013      	ands	r3, r2
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008ed6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d111      	bne.n	8008f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ee6:	085b      	lsrs	r3, r3, #1
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d107      	bne.n	8008f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008efa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d001      	beq.n	8008f04 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008f00:	2301      	movs	r3, #1
 8008f02:	e000      	b.n	8008f06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3718      	adds	r7, #24
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	40023800 	.word	0x40023800

08008f14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d101      	bne.n	8008f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	e0cc      	b.n	80090c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008f28:	4b68      	ldr	r3, [pc, #416]	@ (80090cc <HAL_RCC_ClockConfig+0x1b8>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f003 030f 	and.w	r3, r3, #15
 8008f30:	683a      	ldr	r2, [r7, #0]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d90c      	bls.n	8008f50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f36:	4b65      	ldr	r3, [pc, #404]	@ (80090cc <HAL_RCC_ClockConfig+0x1b8>)
 8008f38:	683a      	ldr	r2, [r7, #0]
 8008f3a:	b2d2      	uxtb	r2, r2
 8008f3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f3e:	4b63      	ldr	r3, [pc, #396]	@ (80090cc <HAL_RCC_ClockConfig+0x1b8>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f003 030f 	and.w	r3, r3, #15
 8008f46:	683a      	ldr	r2, [r7, #0]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d001      	beq.n	8008f50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	e0b8      	b.n	80090c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f003 0302 	and.w	r3, r3, #2
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d020      	beq.n	8008f9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f003 0304 	and.w	r3, r3, #4
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d005      	beq.n	8008f74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008f68:	4b59      	ldr	r3, [pc, #356]	@ (80090d0 <HAL_RCC_ClockConfig+0x1bc>)
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	4a58      	ldr	r2, [pc, #352]	@ (80090d0 <HAL_RCC_ClockConfig+0x1bc>)
 8008f6e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008f72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f003 0308 	and.w	r3, r3, #8
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d005      	beq.n	8008f8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008f80:	4b53      	ldr	r3, [pc, #332]	@ (80090d0 <HAL_RCC_ClockConfig+0x1bc>)
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	4a52      	ldr	r2, [pc, #328]	@ (80090d0 <HAL_RCC_ClockConfig+0x1bc>)
 8008f86:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008f8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f8c:	4b50      	ldr	r3, [pc, #320]	@ (80090d0 <HAL_RCC_ClockConfig+0x1bc>)
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	494d      	ldr	r1, [pc, #308]	@ (80090d0 <HAL_RCC_ClockConfig+0x1bc>)
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f003 0301 	and.w	r3, r3, #1
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d044      	beq.n	8009034 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d107      	bne.n	8008fc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008fb2:	4b47      	ldr	r3, [pc, #284]	@ (80090d0 <HAL_RCC_ClockConfig+0x1bc>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d119      	bne.n	8008ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e07f      	b.n	80090c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	2b02      	cmp	r3, #2
 8008fc8:	d003      	beq.n	8008fd2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008fce:	2b03      	cmp	r3, #3
 8008fd0:	d107      	bne.n	8008fe2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008fd2:	4b3f      	ldr	r3, [pc, #252]	@ (80090d0 <HAL_RCC_ClockConfig+0x1bc>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d109      	bne.n	8008ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e06f      	b.n	80090c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008fe2:	4b3b      	ldr	r3, [pc, #236]	@ (80090d0 <HAL_RCC_ClockConfig+0x1bc>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f003 0302 	and.w	r3, r3, #2
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d101      	bne.n	8008ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e067      	b.n	80090c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008ff2:	4b37      	ldr	r3, [pc, #220]	@ (80090d0 <HAL_RCC_ClockConfig+0x1bc>)
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	f023 0203 	bic.w	r2, r3, #3
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	4934      	ldr	r1, [pc, #208]	@ (80090d0 <HAL_RCC_ClockConfig+0x1bc>)
 8009000:	4313      	orrs	r3, r2
 8009002:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009004:	f7fe f814 	bl	8007030 <HAL_GetTick>
 8009008:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800900a:	e00a      	b.n	8009022 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800900c:	f7fe f810 	bl	8007030 <HAL_GetTick>
 8009010:	4602      	mov	r2, r0
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	1ad3      	subs	r3, r2, r3
 8009016:	f241 3288 	movw	r2, #5000	@ 0x1388
 800901a:	4293      	cmp	r3, r2
 800901c:	d901      	bls.n	8009022 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800901e:	2303      	movs	r3, #3
 8009020:	e04f      	b.n	80090c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009022:	4b2b      	ldr	r3, [pc, #172]	@ (80090d0 <HAL_RCC_ClockConfig+0x1bc>)
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	f003 020c 	and.w	r2, r3, #12
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	429a      	cmp	r2, r3
 8009032:	d1eb      	bne.n	800900c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009034:	4b25      	ldr	r3, [pc, #148]	@ (80090cc <HAL_RCC_ClockConfig+0x1b8>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f003 030f 	and.w	r3, r3, #15
 800903c:	683a      	ldr	r2, [r7, #0]
 800903e:	429a      	cmp	r2, r3
 8009040:	d20c      	bcs.n	800905c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009042:	4b22      	ldr	r3, [pc, #136]	@ (80090cc <HAL_RCC_ClockConfig+0x1b8>)
 8009044:	683a      	ldr	r2, [r7, #0]
 8009046:	b2d2      	uxtb	r2, r2
 8009048:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800904a:	4b20      	ldr	r3, [pc, #128]	@ (80090cc <HAL_RCC_ClockConfig+0x1b8>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f003 030f 	and.w	r3, r3, #15
 8009052:	683a      	ldr	r2, [r7, #0]
 8009054:	429a      	cmp	r2, r3
 8009056:	d001      	beq.n	800905c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009058:	2301      	movs	r3, #1
 800905a:	e032      	b.n	80090c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f003 0304 	and.w	r3, r3, #4
 8009064:	2b00      	cmp	r3, #0
 8009066:	d008      	beq.n	800907a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009068:	4b19      	ldr	r3, [pc, #100]	@ (80090d0 <HAL_RCC_ClockConfig+0x1bc>)
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	4916      	ldr	r1, [pc, #88]	@ (80090d0 <HAL_RCC_ClockConfig+0x1bc>)
 8009076:	4313      	orrs	r3, r2
 8009078:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f003 0308 	and.w	r3, r3, #8
 8009082:	2b00      	cmp	r3, #0
 8009084:	d009      	beq.n	800909a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009086:	4b12      	ldr	r3, [pc, #72]	@ (80090d0 <HAL_RCC_ClockConfig+0x1bc>)
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	691b      	ldr	r3, [r3, #16]
 8009092:	00db      	lsls	r3, r3, #3
 8009094:	490e      	ldr	r1, [pc, #56]	@ (80090d0 <HAL_RCC_ClockConfig+0x1bc>)
 8009096:	4313      	orrs	r3, r2
 8009098:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800909a:	f000 f821 	bl	80090e0 <HAL_RCC_GetSysClockFreq>
 800909e:	4602      	mov	r2, r0
 80090a0:	4b0b      	ldr	r3, [pc, #44]	@ (80090d0 <HAL_RCC_ClockConfig+0x1bc>)
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	091b      	lsrs	r3, r3, #4
 80090a6:	f003 030f 	and.w	r3, r3, #15
 80090aa:	490a      	ldr	r1, [pc, #40]	@ (80090d4 <HAL_RCC_ClockConfig+0x1c0>)
 80090ac:	5ccb      	ldrb	r3, [r1, r3]
 80090ae:	fa22 f303 	lsr.w	r3, r2, r3
 80090b2:	4a09      	ldr	r2, [pc, #36]	@ (80090d8 <HAL_RCC_ClockConfig+0x1c4>)
 80090b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80090b6:	4b09      	ldr	r3, [pc, #36]	@ (80090dc <HAL_RCC_ClockConfig+0x1c8>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7fd ff74 	bl	8006fa8 <HAL_InitTick>

  return HAL_OK;
 80090c0:	2300      	movs	r3, #0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3710      	adds	r7, #16
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	40023c00 	.word	0x40023c00
 80090d0:	40023800 	.word	0x40023800
 80090d4:	0800ba68 	.word	0x0800ba68
 80090d8:	20000794 	.word	0x20000794
 80090dc:	20000798 	.word	0x20000798

080090e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80090e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090e4:	b090      	sub	sp, #64	@ 0x40
 80090e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80090e8:	2300      	movs	r3, #0
 80090ea:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80090ec:	2300      	movs	r3, #0
 80090ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80090f0:	2300      	movs	r3, #0
 80090f2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80090f4:	2300      	movs	r3, #0
 80090f6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80090f8:	4b59      	ldr	r3, [pc, #356]	@ (8009260 <HAL_RCC_GetSysClockFreq+0x180>)
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	f003 030c 	and.w	r3, r3, #12
 8009100:	2b08      	cmp	r3, #8
 8009102:	d00d      	beq.n	8009120 <HAL_RCC_GetSysClockFreq+0x40>
 8009104:	2b08      	cmp	r3, #8
 8009106:	f200 80a1 	bhi.w	800924c <HAL_RCC_GetSysClockFreq+0x16c>
 800910a:	2b00      	cmp	r3, #0
 800910c:	d002      	beq.n	8009114 <HAL_RCC_GetSysClockFreq+0x34>
 800910e:	2b04      	cmp	r3, #4
 8009110:	d003      	beq.n	800911a <HAL_RCC_GetSysClockFreq+0x3a>
 8009112:	e09b      	b.n	800924c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009114:	4b53      	ldr	r3, [pc, #332]	@ (8009264 <HAL_RCC_GetSysClockFreq+0x184>)
 8009116:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009118:	e09b      	b.n	8009252 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800911a:	4b53      	ldr	r3, [pc, #332]	@ (8009268 <HAL_RCC_GetSysClockFreq+0x188>)
 800911c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800911e:	e098      	b.n	8009252 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009120:	4b4f      	ldr	r3, [pc, #316]	@ (8009260 <HAL_RCC_GetSysClockFreq+0x180>)
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009128:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800912a:	4b4d      	ldr	r3, [pc, #308]	@ (8009260 <HAL_RCC_GetSysClockFreq+0x180>)
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009132:	2b00      	cmp	r3, #0
 8009134:	d028      	beq.n	8009188 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009136:	4b4a      	ldr	r3, [pc, #296]	@ (8009260 <HAL_RCC_GetSysClockFreq+0x180>)
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	099b      	lsrs	r3, r3, #6
 800913c:	2200      	movs	r2, #0
 800913e:	623b      	str	r3, [r7, #32]
 8009140:	627a      	str	r2, [r7, #36]	@ 0x24
 8009142:	6a3b      	ldr	r3, [r7, #32]
 8009144:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009148:	2100      	movs	r1, #0
 800914a:	4b47      	ldr	r3, [pc, #284]	@ (8009268 <HAL_RCC_GetSysClockFreq+0x188>)
 800914c:	fb03 f201 	mul.w	r2, r3, r1
 8009150:	2300      	movs	r3, #0
 8009152:	fb00 f303 	mul.w	r3, r0, r3
 8009156:	4413      	add	r3, r2
 8009158:	4a43      	ldr	r2, [pc, #268]	@ (8009268 <HAL_RCC_GetSysClockFreq+0x188>)
 800915a:	fba0 1202 	umull	r1, r2, r0, r2
 800915e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009160:	460a      	mov	r2, r1
 8009162:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009164:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009166:	4413      	add	r3, r2
 8009168:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800916a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800916c:	2200      	movs	r2, #0
 800916e:	61bb      	str	r3, [r7, #24]
 8009170:	61fa      	str	r2, [r7, #28]
 8009172:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009176:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800917a:	f7f7 fdb5 	bl	8000ce8 <__aeabi_uldivmod>
 800917e:	4602      	mov	r2, r0
 8009180:	460b      	mov	r3, r1
 8009182:	4613      	mov	r3, r2
 8009184:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009186:	e053      	b.n	8009230 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009188:	4b35      	ldr	r3, [pc, #212]	@ (8009260 <HAL_RCC_GetSysClockFreq+0x180>)
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	099b      	lsrs	r3, r3, #6
 800918e:	2200      	movs	r2, #0
 8009190:	613b      	str	r3, [r7, #16]
 8009192:	617a      	str	r2, [r7, #20]
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800919a:	f04f 0b00 	mov.w	fp, #0
 800919e:	4652      	mov	r2, sl
 80091a0:	465b      	mov	r3, fp
 80091a2:	f04f 0000 	mov.w	r0, #0
 80091a6:	f04f 0100 	mov.w	r1, #0
 80091aa:	0159      	lsls	r1, r3, #5
 80091ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80091b0:	0150      	lsls	r0, r2, #5
 80091b2:	4602      	mov	r2, r0
 80091b4:	460b      	mov	r3, r1
 80091b6:	ebb2 080a 	subs.w	r8, r2, sl
 80091ba:	eb63 090b 	sbc.w	r9, r3, fp
 80091be:	f04f 0200 	mov.w	r2, #0
 80091c2:	f04f 0300 	mov.w	r3, #0
 80091c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80091ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80091ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80091d2:	ebb2 0408 	subs.w	r4, r2, r8
 80091d6:	eb63 0509 	sbc.w	r5, r3, r9
 80091da:	f04f 0200 	mov.w	r2, #0
 80091de:	f04f 0300 	mov.w	r3, #0
 80091e2:	00eb      	lsls	r3, r5, #3
 80091e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80091e8:	00e2      	lsls	r2, r4, #3
 80091ea:	4614      	mov	r4, r2
 80091ec:	461d      	mov	r5, r3
 80091ee:	eb14 030a 	adds.w	r3, r4, sl
 80091f2:	603b      	str	r3, [r7, #0]
 80091f4:	eb45 030b 	adc.w	r3, r5, fp
 80091f8:	607b      	str	r3, [r7, #4]
 80091fa:	f04f 0200 	mov.w	r2, #0
 80091fe:	f04f 0300 	mov.w	r3, #0
 8009202:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009206:	4629      	mov	r1, r5
 8009208:	028b      	lsls	r3, r1, #10
 800920a:	4621      	mov	r1, r4
 800920c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009210:	4621      	mov	r1, r4
 8009212:	028a      	lsls	r2, r1, #10
 8009214:	4610      	mov	r0, r2
 8009216:	4619      	mov	r1, r3
 8009218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800921a:	2200      	movs	r2, #0
 800921c:	60bb      	str	r3, [r7, #8]
 800921e:	60fa      	str	r2, [r7, #12]
 8009220:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009224:	f7f7 fd60 	bl	8000ce8 <__aeabi_uldivmod>
 8009228:	4602      	mov	r2, r0
 800922a:	460b      	mov	r3, r1
 800922c:	4613      	mov	r3, r2
 800922e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8009230:	4b0b      	ldr	r3, [pc, #44]	@ (8009260 <HAL_RCC_GetSysClockFreq+0x180>)
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	0c1b      	lsrs	r3, r3, #16
 8009236:	f003 0303 	and.w	r3, r3, #3
 800923a:	3301      	adds	r3, #1
 800923c:	005b      	lsls	r3, r3, #1
 800923e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8009240:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009244:	fbb2 f3f3 	udiv	r3, r2, r3
 8009248:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800924a:	e002      	b.n	8009252 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800924c:	4b05      	ldr	r3, [pc, #20]	@ (8009264 <HAL_RCC_GetSysClockFreq+0x184>)
 800924e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009250:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8009254:	4618      	mov	r0, r3
 8009256:	3740      	adds	r7, #64	@ 0x40
 8009258:	46bd      	mov	sp, r7
 800925a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800925e:	bf00      	nop
 8009260:	40023800 	.word	0x40023800
 8009264:	00f42400 	.word	0x00f42400
 8009268:	017d7840 	.word	0x017d7840

0800926c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800926c:	b480      	push	{r7}
 800926e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009270:	4b03      	ldr	r3, [pc, #12]	@ (8009280 <HAL_RCC_GetHCLKFreq+0x14>)
 8009272:	681b      	ldr	r3, [r3, #0]
}
 8009274:	4618      	mov	r0, r3
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	20000794 	.word	0x20000794

08009284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009288:	f7ff fff0 	bl	800926c <HAL_RCC_GetHCLKFreq>
 800928c:	4602      	mov	r2, r0
 800928e:	4b05      	ldr	r3, [pc, #20]	@ (80092a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	0a9b      	lsrs	r3, r3, #10
 8009294:	f003 0307 	and.w	r3, r3, #7
 8009298:	4903      	ldr	r1, [pc, #12]	@ (80092a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800929a:	5ccb      	ldrb	r3, [r1, r3]
 800929c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	40023800 	.word	0x40023800
 80092a8:	0800ba78 	.word	0x0800ba78

080092ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d101      	bne.n	80092be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80092ba:	2301      	movs	r3, #1
 80092bc:	e07b      	b.n	80093b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d108      	bne.n	80092d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80092ce:	d009      	beq.n	80092e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	61da      	str	r2, [r3, #28]
 80092d6:	e005      	b.n	80092e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d106      	bne.n	8009304 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2200      	movs	r2, #0
 80092fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f7fd fca2 	bl	8006c48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2202      	movs	r2, #2
 8009308:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800931a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800932c:	431a      	orrs	r2, r3
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	68db      	ldr	r3, [r3, #12]
 8009332:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009336:	431a      	orrs	r2, r3
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	691b      	ldr	r3, [r3, #16]
 800933c:	f003 0302 	and.w	r3, r3, #2
 8009340:	431a      	orrs	r2, r3
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	695b      	ldr	r3, [r3, #20]
 8009346:	f003 0301 	and.w	r3, r3, #1
 800934a:	431a      	orrs	r2, r3
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	699b      	ldr	r3, [r3, #24]
 8009350:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009354:	431a      	orrs	r2, r3
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	69db      	ldr	r3, [r3, #28]
 800935a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800935e:	431a      	orrs	r2, r3
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6a1b      	ldr	r3, [r3, #32]
 8009364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009368:	ea42 0103 	orr.w	r1, r2, r3
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009370:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	430a      	orrs	r2, r1
 800937a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	699b      	ldr	r3, [r3, #24]
 8009380:	0c1b      	lsrs	r3, r3, #16
 8009382:	f003 0104 	and.w	r1, r3, #4
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800938a:	f003 0210 	and.w	r2, r3, #16
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	430a      	orrs	r2, r1
 8009394:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	69da      	ldr	r2, [r3, #28]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80093a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2200      	movs	r2, #0
 80093aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2201      	movs	r2, #1
 80093b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80093b4:	2300      	movs	r3, #0
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3708      	adds	r7, #8
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b088      	sub	sp, #32
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	60f8      	str	r0, [r7, #12]
 80093c6:	60b9      	str	r1, [r7, #8]
 80093c8:	603b      	str	r3, [r7, #0]
 80093ca:	4613      	mov	r3, r2
 80093cc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80093ce:	f7fd fe2f 	bl	8007030 <HAL_GetTick>
 80093d2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80093d4:	88fb      	ldrh	r3, [r7, #6]
 80093d6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d001      	beq.n	80093e8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80093e4:	2302      	movs	r3, #2
 80093e6:	e12a      	b.n	800963e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d002      	beq.n	80093f4 <HAL_SPI_Transmit+0x36>
 80093ee:	88fb      	ldrh	r3, [r7, #6]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d101      	bne.n	80093f8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	e122      	b.n	800963e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d101      	bne.n	8009406 <HAL_SPI_Transmit+0x48>
 8009402:	2302      	movs	r3, #2
 8009404:	e11b      	b.n	800963e <HAL_SPI_Transmit+0x280>
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2201      	movs	r2, #1
 800940a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2203      	movs	r2, #3
 8009412:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2200      	movs	r2, #0
 800941a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	68ba      	ldr	r2, [r7, #8]
 8009420:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	88fa      	ldrh	r2, [r7, #6]
 8009426:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	88fa      	ldrh	r2, [r7, #6]
 800942c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2200      	movs	r2, #0
 8009432:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2200      	movs	r2, #0
 8009438:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2200      	movs	r2, #0
 800943e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2200      	movs	r2, #0
 8009444:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2200      	movs	r2, #0
 800944a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009454:	d10f      	bne.n	8009476 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009464:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009474:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009480:	2b40      	cmp	r3, #64	@ 0x40
 8009482:	d007      	beq.n	8009494 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009492:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800949c:	d152      	bne.n	8009544 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d002      	beq.n	80094ac <HAL_SPI_Transmit+0xee>
 80094a6:	8b7b      	ldrh	r3, [r7, #26]
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d145      	bne.n	8009538 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094b0:	881a      	ldrh	r2, [r3, #0]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094bc:	1c9a      	adds	r2, r3, #2
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	3b01      	subs	r3, #1
 80094ca:	b29a      	uxth	r2, r3
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80094d0:	e032      	b.n	8009538 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	f003 0302 	and.w	r3, r3, #2
 80094dc:	2b02      	cmp	r3, #2
 80094de:	d112      	bne.n	8009506 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094e4:	881a      	ldrh	r2, [r3, #0]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094f0:	1c9a      	adds	r2, r3, #2
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	3b01      	subs	r3, #1
 80094fe:	b29a      	uxth	r2, r3
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	86da      	strh	r2, [r3, #54]	@ 0x36
 8009504:	e018      	b.n	8009538 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009506:	f7fd fd93 	bl	8007030 <HAL_GetTick>
 800950a:	4602      	mov	r2, r0
 800950c:	69fb      	ldr	r3, [r7, #28]
 800950e:	1ad3      	subs	r3, r2, r3
 8009510:	683a      	ldr	r2, [r7, #0]
 8009512:	429a      	cmp	r2, r3
 8009514:	d803      	bhi.n	800951e <HAL_SPI_Transmit+0x160>
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800951c:	d102      	bne.n	8009524 <HAL_SPI_Transmit+0x166>
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d109      	bne.n	8009538 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2201      	movs	r2, #1
 8009528:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2200      	movs	r2, #0
 8009530:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009534:	2303      	movs	r3, #3
 8009536:	e082      	b.n	800963e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800953c:	b29b      	uxth	r3, r3
 800953e:	2b00      	cmp	r3, #0
 8009540:	d1c7      	bne.n	80094d2 <HAL_SPI_Transmit+0x114>
 8009542:	e053      	b.n	80095ec <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d002      	beq.n	8009552 <HAL_SPI_Transmit+0x194>
 800954c:	8b7b      	ldrh	r3, [r7, #26]
 800954e:	2b01      	cmp	r3, #1
 8009550:	d147      	bne.n	80095e2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	330c      	adds	r3, #12
 800955c:	7812      	ldrb	r2, [r2, #0]
 800955e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009564:	1c5a      	adds	r2, r3, #1
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800956e:	b29b      	uxth	r3, r3
 8009570:	3b01      	subs	r3, #1
 8009572:	b29a      	uxth	r2, r3
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009578:	e033      	b.n	80095e2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	f003 0302 	and.w	r3, r3, #2
 8009584:	2b02      	cmp	r3, #2
 8009586:	d113      	bne.n	80095b0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	330c      	adds	r3, #12
 8009592:	7812      	ldrb	r2, [r2, #0]
 8009594:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800959a:	1c5a      	adds	r2, r3, #1
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	3b01      	subs	r3, #1
 80095a8:	b29a      	uxth	r2, r3
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	86da      	strh	r2, [r3, #54]	@ 0x36
 80095ae:	e018      	b.n	80095e2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80095b0:	f7fd fd3e 	bl	8007030 <HAL_GetTick>
 80095b4:	4602      	mov	r2, r0
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	1ad3      	subs	r3, r2, r3
 80095ba:	683a      	ldr	r2, [r7, #0]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d803      	bhi.n	80095c8 <HAL_SPI_Transmit+0x20a>
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c6:	d102      	bne.n	80095ce <HAL_SPI_Transmit+0x210>
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d109      	bne.n	80095e2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2201      	movs	r2, #1
 80095d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2200      	movs	r2, #0
 80095da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80095de:	2303      	movs	r3, #3
 80095e0:	e02d      	b.n	800963e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d1c6      	bne.n	800957a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80095ec:	69fa      	ldr	r2, [r7, #28]
 80095ee:	6839      	ldr	r1, [r7, #0]
 80095f0:	68f8      	ldr	r0, [r7, #12]
 80095f2:	f000 fbd9 	bl	8009da8 <SPI_EndRxTxTransaction>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d002      	beq.n	8009602 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2220      	movs	r2, #32
 8009600:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d10a      	bne.n	8009620 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800960a:	2300      	movs	r3, #0
 800960c:	617b      	str	r3, [r7, #20]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	68db      	ldr	r3, [r3, #12]
 8009614:	617b      	str	r3, [r7, #20]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	617b      	str	r3, [r7, #20]
 800961e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2201      	movs	r2, #1
 8009624:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2200      	movs	r2, #0
 800962c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009634:	2b00      	cmp	r3, #0
 8009636:	d001      	beq.n	800963c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8009638:	2301      	movs	r3, #1
 800963a:	e000      	b.n	800963e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800963c:	2300      	movs	r3, #0
  }
}
 800963e:	4618      	mov	r0, r3
 8009640:	3720      	adds	r7, #32
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b088      	sub	sp, #32
 800964a:	af02      	add	r7, sp, #8
 800964c:	60f8      	str	r0, [r7, #12]
 800964e:	60b9      	str	r1, [r7, #8]
 8009650:	603b      	str	r3, [r7, #0]
 8009652:	4613      	mov	r3, r2
 8009654:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800965c:	b2db      	uxtb	r3, r3
 800965e:	2b01      	cmp	r3, #1
 8009660:	d001      	beq.n	8009666 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8009662:	2302      	movs	r3, #2
 8009664:	e104      	b.n	8009870 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800966e:	d112      	bne.n	8009696 <HAL_SPI_Receive+0x50>
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d10e      	bne.n	8009696 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2204      	movs	r2, #4
 800967c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009680:	88fa      	ldrh	r2, [r7, #6]
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	9300      	str	r3, [sp, #0]
 8009686:	4613      	mov	r3, r2
 8009688:	68ba      	ldr	r2, [r7, #8]
 800968a:	68b9      	ldr	r1, [r7, #8]
 800968c:	68f8      	ldr	r0, [r7, #12]
 800968e:	f000 f8f3 	bl	8009878 <HAL_SPI_TransmitReceive>
 8009692:	4603      	mov	r3, r0
 8009694:	e0ec      	b.n	8009870 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009696:	f7fd fccb 	bl	8007030 <HAL_GetTick>
 800969a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d002      	beq.n	80096a8 <HAL_SPI_Receive+0x62>
 80096a2:	88fb      	ldrh	r3, [r7, #6]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d101      	bne.n	80096ac <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80096a8:	2301      	movs	r3, #1
 80096aa:	e0e1      	b.n	8009870 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d101      	bne.n	80096ba <HAL_SPI_Receive+0x74>
 80096b6:	2302      	movs	r3, #2
 80096b8:	e0da      	b.n	8009870 <HAL_SPI_Receive+0x22a>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2201      	movs	r2, #1
 80096be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2204      	movs	r2, #4
 80096c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2200      	movs	r2, #0
 80096ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	68ba      	ldr	r2, [r7, #8]
 80096d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	88fa      	ldrh	r2, [r7, #6]
 80096da:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	88fa      	ldrh	r2, [r7, #6]
 80096e0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2200      	movs	r2, #0
 80096e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2200      	movs	r2, #0
 80096ec:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2200      	movs	r2, #0
 80096f2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2200      	movs	r2, #0
 80096f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2200      	movs	r2, #0
 80096fe:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009708:	d10f      	bne.n	800972a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009718:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009728:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009734:	2b40      	cmp	r3, #64	@ 0x40
 8009736:	d007      	beq.n	8009748 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	681a      	ldr	r2, [r3, #0]
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009746:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d170      	bne.n	8009832 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009750:	e035      	b.n	80097be <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	f003 0301 	and.w	r3, r3, #1
 800975c:	2b01      	cmp	r3, #1
 800975e:	d115      	bne.n	800978c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f103 020c 	add.w	r2, r3, #12
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800976c:	7812      	ldrb	r2, [r2, #0]
 800976e:	b2d2      	uxtb	r2, r2
 8009770:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009776:	1c5a      	adds	r2, r3, #1
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009780:	b29b      	uxth	r3, r3
 8009782:	3b01      	subs	r3, #1
 8009784:	b29a      	uxth	r2, r3
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800978a:	e018      	b.n	80097be <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800978c:	f7fd fc50 	bl	8007030 <HAL_GetTick>
 8009790:	4602      	mov	r2, r0
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	1ad3      	subs	r3, r2, r3
 8009796:	683a      	ldr	r2, [r7, #0]
 8009798:	429a      	cmp	r2, r3
 800979a:	d803      	bhi.n	80097a4 <HAL_SPI_Receive+0x15e>
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097a2:	d102      	bne.n	80097aa <HAL_SPI_Receive+0x164>
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d109      	bne.n	80097be <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2201      	movs	r2, #1
 80097ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2200      	movs	r2, #0
 80097b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80097ba:	2303      	movs	r3, #3
 80097bc:	e058      	b.n	8009870 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d1c4      	bne.n	8009752 <HAL_SPI_Receive+0x10c>
 80097c8:	e038      	b.n	800983c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	f003 0301 	and.w	r3, r3, #1
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d113      	bne.n	8009800 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	68da      	ldr	r2, [r3, #12]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097e2:	b292      	uxth	r2, r2
 80097e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097ea:	1c9a      	adds	r2, r3, #2
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	3b01      	subs	r3, #1
 80097f8:	b29a      	uxth	r2, r3
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80097fe:	e018      	b.n	8009832 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009800:	f7fd fc16 	bl	8007030 <HAL_GetTick>
 8009804:	4602      	mov	r2, r0
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	1ad3      	subs	r3, r2, r3
 800980a:	683a      	ldr	r2, [r7, #0]
 800980c:	429a      	cmp	r2, r3
 800980e:	d803      	bhi.n	8009818 <HAL_SPI_Receive+0x1d2>
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009816:	d102      	bne.n	800981e <HAL_SPI_Receive+0x1d8>
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d109      	bne.n	8009832 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2201      	movs	r2, #1
 8009822:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2200      	movs	r2, #0
 800982a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800982e:	2303      	movs	r3, #3
 8009830:	e01e      	b.n	8009870 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009836:	b29b      	uxth	r3, r3
 8009838:	2b00      	cmp	r3, #0
 800983a:	d1c6      	bne.n	80097ca <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800983c:	697a      	ldr	r2, [r7, #20]
 800983e:	6839      	ldr	r1, [r7, #0]
 8009840:	68f8      	ldr	r0, [r7, #12]
 8009842:	f000 fa4b 	bl	8009cdc <SPI_EndRxTransaction>
 8009846:	4603      	mov	r3, r0
 8009848:	2b00      	cmp	r3, #0
 800984a:	d002      	beq.n	8009852 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2220      	movs	r2, #32
 8009850:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2201      	movs	r2, #1
 8009856:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2200      	movs	r2, #0
 800985e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009866:	2b00      	cmp	r3, #0
 8009868:	d001      	beq.n	800986e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800986a:	2301      	movs	r3, #1
 800986c:	e000      	b.n	8009870 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800986e:	2300      	movs	r3, #0
  }
}
 8009870:	4618      	mov	r0, r3
 8009872:	3718      	adds	r7, #24
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b08a      	sub	sp, #40	@ 0x28
 800987c:	af00      	add	r7, sp, #0
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	60b9      	str	r1, [r7, #8]
 8009882:	607a      	str	r2, [r7, #4]
 8009884:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009886:	2301      	movs	r3, #1
 8009888:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800988a:	f7fd fbd1 	bl	8007030 <HAL_GetTick>
 800988e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009896:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800989e:	887b      	ldrh	r3, [r7, #2]
 80098a0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80098a2:	7ffb      	ldrb	r3, [r7, #31]
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d00c      	beq.n	80098c2 <HAL_SPI_TransmitReceive+0x4a>
 80098a8:	69bb      	ldr	r3, [r7, #24]
 80098aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80098ae:	d106      	bne.n	80098be <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d102      	bne.n	80098be <HAL_SPI_TransmitReceive+0x46>
 80098b8:	7ffb      	ldrb	r3, [r7, #31]
 80098ba:	2b04      	cmp	r3, #4
 80098bc:	d001      	beq.n	80098c2 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80098be:	2302      	movs	r3, #2
 80098c0:	e17f      	b.n	8009bc2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d005      	beq.n	80098d4 <HAL_SPI_TransmitReceive+0x5c>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d002      	beq.n	80098d4 <HAL_SPI_TransmitReceive+0x5c>
 80098ce:	887b      	ldrh	r3, [r7, #2]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d101      	bne.n	80098d8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80098d4:	2301      	movs	r3, #1
 80098d6:	e174      	b.n	8009bc2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d101      	bne.n	80098e6 <HAL_SPI_TransmitReceive+0x6e>
 80098e2:	2302      	movs	r3, #2
 80098e4:	e16d      	b.n	8009bc2 <HAL_SPI_TransmitReceive+0x34a>
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2201      	movs	r2, #1
 80098ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	2b04      	cmp	r3, #4
 80098f8:	d003      	beq.n	8009902 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2205      	movs	r2, #5
 80098fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2200      	movs	r2, #0
 8009906:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	687a      	ldr	r2, [r7, #4]
 800990c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	887a      	ldrh	r2, [r7, #2]
 8009912:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	887a      	ldrh	r2, [r7, #2]
 8009918:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	68ba      	ldr	r2, [r7, #8]
 800991e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	887a      	ldrh	r2, [r7, #2]
 8009924:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	887a      	ldrh	r2, [r7, #2]
 800992a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2200      	movs	r2, #0
 8009930:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2200      	movs	r2, #0
 8009936:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009942:	2b40      	cmp	r3, #64	@ 0x40
 8009944:	d007      	beq.n	8009956 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009954:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	68db      	ldr	r3, [r3, #12]
 800995a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800995e:	d17e      	bne.n	8009a5e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d002      	beq.n	800996e <HAL_SPI_TransmitReceive+0xf6>
 8009968:	8afb      	ldrh	r3, [r7, #22]
 800996a:	2b01      	cmp	r3, #1
 800996c:	d16c      	bne.n	8009a48 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009972:	881a      	ldrh	r2, [r3, #0]
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800997e:	1c9a      	adds	r2, r3, #2
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009988:	b29b      	uxth	r3, r3
 800998a:	3b01      	subs	r3, #1
 800998c:	b29a      	uxth	r2, r3
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009992:	e059      	b.n	8009a48 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	f003 0302 	and.w	r3, r3, #2
 800999e:	2b02      	cmp	r3, #2
 80099a0:	d11b      	bne.n	80099da <HAL_SPI_TransmitReceive+0x162>
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d016      	beq.n	80099da <HAL_SPI_TransmitReceive+0x162>
 80099ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d113      	bne.n	80099da <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099b6:	881a      	ldrh	r2, [r3, #0]
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099c2:	1c9a      	adds	r2, r3, #2
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	3b01      	subs	r3, #1
 80099d0:	b29a      	uxth	r2, r3
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80099d6:	2300      	movs	r3, #0
 80099d8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	f003 0301 	and.w	r3, r3, #1
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d119      	bne.n	8009a1c <HAL_SPI_TransmitReceive+0x1a4>
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d014      	beq.n	8009a1c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	68da      	ldr	r2, [r3, #12]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099fc:	b292      	uxth	r2, r2
 80099fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a04:	1c9a      	adds	r2, r3, #2
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	3b01      	subs	r3, #1
 8009a12:	b29a      	uxth	r2, r3
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009a1c:	f7fd fb08 	bl	8007030 <HAL_GetTick>
 8009a20:	4602      	mov	r2, r0
 8009a22:	6a3b      	ldr	r3, [r7, #32]
 8009a24:	1ad3      	subs	r3, r2, r3
 8009a26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d80d      	bhi.n	8009a48 <HAL_SPI_TransmitReceive+0x1d0>
 8009a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a32:	d009      	beq.n	8009a48 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2201      	movs	r2, #1
 8009a38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8009a44:	2303      	movs	r3, #3
 8009a46:	e0bc      	b.n	8009bc2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d1a0      	bne.n	8009994 <HAL_SPI_TransmitReceive+0x11c>
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d19b      	bne.n	8009994 <HAL_SPI_TransmitReceive+0x11c>
 8009a5c:	e082      	b.n	8009b64 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d002      	beq.n	8009a6c <HAL_SPI_TransmitReceive+0x1f4>
 8009a66:	8afb      	ldrh	r3, [r7, #22]
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d171      	bne.n	8009b50 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	330c      	adds	r3, #12
 8009a76:	7812      	ldrb	r2, [r2, #0]
 8009a78:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a7e:	1c5a      	adds	r2, r3, #1
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	b29a      	uxth	r2, r3
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a92:	e05d      	b.n	8009b50 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	f003 0302 	and.w	r3, r3, #2
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	d11c      	bne.n	8009adc <HAL_SPI_TransmitReceive+0x264>
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d017      	beq.n	8009adc <HAL_SPI_TransmitReceive+0x264>
 8009aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d114      	bne.n	8009adc <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	330c      	adds	r3, #12
 8009abc:	7812      	ldrb	r2, [r2, #0]
 8009abe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ac4:	1c5a      	adds	r2, r3, #1
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009ace:	b29b      	uxth	r3, r3
 8009ad0:	3b01      	subs	r3, #1
 8009ad2:	b29a      	uxth	r2, r3
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	689b      	ldr	r3, [r3, #8]
 8009ae2:	f003 0301 	and.w	r3, r3, #1
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d119      	bne.n	8009b1e <HAL_SPI_TransmitReceive+0x2a6>
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d014      	beq.n	8009b1e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68da      	ldr	r2, [r3, #12]
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009afe:	b2d2      	uxtb	r2, r2
 8009b00:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b06:	1c5a      	adds	r2, r3, #1
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	3b01      	subs	r3, #1
 8009b14:	b29a      	uxth	r2, r3
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009b1e:	f7fd fa87 	bl	8007030 <HAL_GetTick>
 8009b22:	4602      	mov	r2, r0
 8009b24:	6a3b      	ldr	r3, [r7, #32]
 8009b26:	1ad3      	subs	r3, r2, r3
 8009b28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d803      	bhi.n	8009b36 <HAL_SPI_TransmitReceive+0x2be>
 8009b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b34:	d102      	bne.n	8009b3c <HAL_SPI_TransmitReceive+0x2c4>
 8009b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d109      	bne.n	8009b50 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8009b4c:	2303      	movs	r3, #3
 8009b4e:	e038      	b.n	8009bc2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d19c      	bne.n	8009a94 <HAL_SPI_TransmitReceive+0x21c>
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d197      	bne.n	8009a94 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009b64:	6a3a      	ldr	r2, [r7, #32]
 8009b66:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009b68:	68f8      	ldr	r0, [r7, #12]
 8009b6a:	f000 f91d 	bl	8009da8 <SPI_EndRxTxTransaction>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d008      	beq.n	8009b86 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2220      	movs	r2, #32
 8009b78:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8009b82:	2301      	movs	r3, #1
 8009b84:	e01d      	b.n	8009bc2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d10a      	bne.n	8009ba4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009b8e:	2300      	movs	r3, #0
 8009b90:	613b      	str	r3, [r7, #16]
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	613b      	str	r3, [r7, #16]
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	613b      	str	r3, [r7, #16]
 8009ba2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d001      	beq.n	8009bc0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	e000      	b.n	8009bc2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8009bc0:	2300      	movs	r3, #0
  }
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3728      	adds	r7, #40	@ 0x28
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
	...

08009bcc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b088      	sub	sp, #32
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	60f8      	str	r0, [r7, #12]
 8009bd4:	60b9      	str	r1, [r7, #8]
 8009bd6:	603b      	str	r3, [r7, #0]
 8009bd8:	4613      	mov	r3, r2
 8009bda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009bdc:	f7fd fa28 	bl	8007030 <HAL_GetTick>
 8009be0:	4602      	mov	r2, r0
 8009be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be4:	1a9b      	subs	r3, r3, r2
 8009be6:	683a      	ldr	r2, [r7, #0]
 8009be8:	4413      	add	r3, r2
 8009bea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009bec:	f7fd fa20 	bl	8007030 <HAL_GetTick>
 8009bf0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009bf2:	4b39      	ldr	r3, [pc, #228]	@ (8009cd8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	015b      	lsls	r3, r3, #5
 8009bf8:	0d1b      	lsrs	r3, r3, #20
 8009bfa:	69fa      	ldr	r2, [r7, #28]
 8009bfc:	fb02 f303 	mul.w	r3, r2, r3
 8009c00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c02:	e054      	b.n	8009cae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c0a:	d050      	beq.n	8009cae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009c0c:	f7fd fa10 	bl	8007030 <HAL_GetTick>
 8009c10:	4602      	mov	r2, r0
 8009c12:	69bb      	ldr	r3, [r7, #24]
 8009c14:	1ad3      	subs	r3, r2, r3
 8009c16:	69fa      	ldr	r2, [r7, #28]
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d902      	bls.n	8009c22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009c1c:	69fb      	ldr	r3, [r7, #28]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d13d      	bne.n	8009c9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	685a      	ldr	r2, [r3, #4]
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009c30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009c3a:	d111      	bne.n	8009c60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c44:	d004      	beq.n	8009c50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	689b      	ldr	r3, [r3, #8]
 8009c4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c4e:	d107      	bne.n	8009c60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009c5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c68:	d10f      	bne.n	8009c8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	681a      	ldr	r2, [r3, #0]
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009c78:	601a      	str	r2, [r3, #0]
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	681a      	ldr	r2, [r3, #0]
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009c88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2200      	movs	r2, #0
 8009c96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8009c9a:	2303      	movs	r3, #3
 8009c9c:	e017      	b.n	8009cce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d101      	bne.n	8009ca8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	3b01      	subs	r3, #1
 8009cac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	689a      	ldr	r2, [r3, #8]
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	4013      	ands	r3, r2
 8009cb8:	68ba      	ldr	r2, [r7, #8]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	bf0c      	ite	eq
 8009cbe:	2301      	moveq	r3, #1
 8009cc0:	2300      	movne	r3, #0
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	79fb      	ldrb	r3, [r7, #7]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d19b      	bne.n	8009c04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009ccc:	2300      	movs	r3, #0
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3720      	adds	r7, #32
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	20000794 	.word	0x20000794

08009cdc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b086      	sub	sp, #24
 8009ce0:	af02      	add	r7, sp, #8
 8009ce2:	60f8      	str	r0, [r7, #12]
 8009ce4:	60b9      	str	r1, [r7, #8]
 8009ce6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009cf0:	d111      	bne.n	8009d16 <SPI_EndRxTransaction+0x3a>
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	689b      	ldr	r3, [r3, #8]
 8009cf6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009cfa:	d004      	beq.n	8009d06 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	689b      	ldr	r3, [r3, #8]
 8009d00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d04:	d107      	bne.n	8009d16 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009d14:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009d1e:	d12a      	bne.n	8009d76 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	689b      	ldr	r3, [r3, #8]
 8009d24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d28:	d012      	beq.n	8009d50 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	9300      	str	r3, [sp, #0]
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	2200      	movs	r2, #0
 8009d32:	2180      	movs	r1, #128	@ 0x80
 8009d34:	68f8      	ldr	r0, [r7, #12]
 8009d36:	f7ff ff49 	bl	8009bcc <SPI_WaitFlagStateUntilTimeout>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d02d      	beq.n	8009d9c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d44:	f043 0220 	orr.w	r2, r3, #32
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8009d4c:	2303      	movs	r3, #3
 8009d4e:	e026      	b.n	8009d9e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	9300      	str	r3, [sp, #0]
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	2200      	movs	r2, #0
 8009d58:	2101      	movs	r1, #1
 8009d5a:	68f8      	ldr	r0, [r7, #12]
 8009d5c:	f7ff ff36 	bl	8009bcc <SPI_WaitFlagStateUntilTimeout>
 8009d60:	4603      	mov	r3, r0
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d01a      	beq.n	8009d9c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d6a:	f043 0220 	orr.w	r2, r3, #32
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8009d72:	2303      	movs	r3, #3
 8009d74:	e013      	b.n	8009d9e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	9300      	str	r3, [sp, #0]
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	2101      	movs	r1, #1
 8009d80:	68f8      	ldr	r0, [r7, #12]
 8009d82:	f7ff ff23 	bl	8009bcc <SPI_WaitFlagStateUntilTimeout>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d007      	beq.n	8009d9c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d90:	f043 0220 	orr.w	r2, r3, #32
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009d98:	2303      	movs	r3, #3
 8009d9a:	e000      	b.n	8009d9e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009d9c:	2300      	movs	r3, #0
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
	...

08009da8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b088      	sub	sp, #32
 8009dac:	af02      	add	r7, sp, #8
 8009dae:	60f8      	str	r0, [r7, #12]
 8009db0:	60b9      	str	r1, [r7, #8]
 8009db2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	9300      	str	r3, [sp, #0]
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	2201      	movs	r2, #1
 8009dbc:	2102      	movs	r1, #2
 8009dbe:	68f8      	ldr	r0, [r7, #12]
 8009dc0:	f7ff ff04 	bl	8009bcc <SPI_WaitFlagStateUntilTimeout>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d007      	beq.n	8009dda <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dce:	f043 0220 	orr.w	r2, r3, #32
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8009dd6:	2303      	movs	r3, #3
 8009dd8:	e032      	b.n	8009e40 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009dda:	4b1b      	ldr	r3, [pc, #108]	@ (8009e48 <SPI_EndRxTxTransaction+0xa0>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a1b      	ldr	r2, [pc, #108]	@ (8009e4c <SPI_EndRxTxTransaction+0xa4>)
 8009de0:	fba2 2303 	umull	r2, r3, r2, r3
 8009de4:	0d5b      	lsrs	r3, r3, #21
 8009de6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009dea:	fb02 f303 	mul.w	r3, r2, r3
 8009dee:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009df8:	d112      	bne.n	8009e20 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	9300      	str	r3, [sp, #0]
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	2200      	movs	r2, #0
 8009e02:	2180      	movs	r1, #128	@ 0x80
 8009e04:	68f8      	ldr	r0, [r7, #12]
 8009e06:	f7ff fee1 	bl	8009bcc <SPI_WaitFlagStateUntilTimeout>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d016      	beq.n	8009e3e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e14:	f043 0220 	orr.w	r2, r3, #32
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009e1c:	2303      	movs	r3, #3
 8009e1e:	e00f      	b.n	8009e40 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d00a      	beq.n	8009e3c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	3b01      	subs	r3, #1
 8009e2a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	689b      	ldr	r3, [r3, #8]
 8009e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e36:	2b80      	cmp	r3, #128	@ 0x80
 8009e38:	d0f2      	beq.n	8009e20 <SPI_EndRxTxTransaction+0x78>
 8009e3a:	e000      	b.n	8009e3e <SPI_EndRxTxTransaction+0x96>
        break;
 8009e3c:	bf00      	nop
  }

  return HAL_OK;
 8009e3e:	2300      	movs	r3, #0
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3718      	adds	r7, #24
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	20000794 	.word	0x20000794
 8009e4c:	165e9f81 	.word	0x165e9f81

08009e50 <malloc>:
 8009e50:	4b02      	ldr	r3, [pc, #8]	@ (8009e5c <malloc+0xc>)
 8009e52:	4601      	mov	r1, r0
 8009e54:	6818      	ldr	r0, [r3, #0]
 8009e56:	f000 b82d 	b.w	8009eb4 <_malloc_r>
 8009e5a:	bf00      	nop
 8009e5c:	200007a0 	.word	0x200007a0

08009e60 <free>:
 8009e60:	4b02      	ldr	r3, [pc, #8]	@ (8009e6c <free+0xc>)
 8009e62:	4601      	mov	r1, r0
 8009e64:	6818      	ldr	r0, [r3, #0]
 8009e66:	f000 b915 	b.w	800a094 <_free_r>
 8009e6a:	bf00      	nop
 8009e6c:	200007a0 	.word	0x200007a0

08009e70 <sbrk_aligned>:
 8009e70:	b570      	push	{r4, r5, r6, lr}
 8009e72:	4e0f      	ldr	r6, [pc, #60]	@ (8009eb0 <sbrk_aligned+0x40>)
 8009e74:	460c      	mov	r4, r1
 8009e76:	6831      	ldr	r1, [r6, #0]
 8009e78:	4605      	mov	r5, r0
 8009e7a:	b911      	cbnz	r1, 8009e82 <sbrk_aligned+0x12>
 8009e7c:	f000 f8ce 	bl	800a01c <_sbrk_r>
 8009e80:	6030      	str	r0, [r6, #0]
 8009e82:	4621      	mov	r1, r4
 8009e84:	4628      	mov	r0, r5
 8009e86:	f000 f8c9 	bl	800a01c <_sbrk_r>
 8009e8a:	1c43      	adds	r3, r0, #1
 8009e8c:	d103      	bne.n	8009e96 <sbrk_aligned+0x26>
 8009e8e:	f04f 34ff 	mov.w	r4, #4294967295
 8009e92:	4620      	mov	r0, r4
 8009e94:	bd70      	pop	{r4, r5, r6, pc}
 8009e96:	1cc4      	adds	r4, r0, #3
 8009e98:	f024 0403 	bic.w	r4, r4, #3
 8009e9c:	42a0      	cmp	r0, r4
 8009e9e:	d0f8      	beq.n	8009e92 <sbrk_aligned+0x22>
 8009ea0:	1a21      	subs	r1, r4, r0
 8009ea2:	4628      	mov	r0, r5
 8009ea4:	f000 f8ba 	bl	800a01c <_sbrk_r>
 8009ea8:	3001      	adds	r0, #1
 8009eaa:	d1f2      	bne.n	8009e92 <sbrk_aligned+0x22>
 8009eac:	e7ef      	b.n	8009e8e <sbrk_aligned+0x1e>
 8009eae:	bf00      	nop
 8009eb0:	2000109c 	.word	0x2000109c

08009eb4 <_malloc_r>:
 8009eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009eb8:	1ccd      	adds	r5, r1, #3
 8009eba:	f025 0503 	bic.w	r5, r5, #3
 8009ebe:	3508      	adds	r5, #8
 8009ec0:	2d0c      	cmp	r5, #12
 8009ec2:	bf38      	it	cc
 8009ec4:	250c      	movcc	r5, #12
 8009ec6:	2d00      	cmp	r5, #0
 8009ec8:	4606      	mov	r6, r0
 8009eca:	db01      	blt.n	8009ed0 <_malloc_r+0x1c>
 8009ecc:	42a9      	cmp	r1, r5
 8009ece:	d904      	bls.n	8009eda <_malloc_r+0x26>
 8009ed0:	230c      	movs	r3, #12
 8009ed2:	6033      	str	r3, [r6, #0]
 8009ed4:	2000      	movs	r0, #0
 8009ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009eda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009fb0 <_malloc_r+0xfc>
 8009ede:	f000 f869 	bl	8009fb4 <__malloc_lock>
 8009ee2:	f8d8 3000 	ldr.w	r3, [r8]
 8009ee6:	461c      	mov	r4, r3
 8009ee8:	bb44      	cbnz	r4, 8009f3c <_malloc_r+0x88>
 8009eea:	4629      	mov	r1, r5
 8009eec:	4630      	mov	r0, r6
 8009eee:	f7ff ffbf 	bl	8009e70 <sbrk_aligned>
 8009ef2:	1c43      	adds	r3, r0, #1
 8009ef4:	4604      	mov	r4, r0
 8009ef6:	d158      	bne.n	8009faa <_malloc_r+0xf6>
 8009ef8:	f8d8 4000 	ldr.w	r4, [r8]
 8009efc:	4627      	mov	r7, r4
 8009efe:	2f00      	cmp	r7, #0
 8009f00:	d143      	bne.n	8009f8a <_malloc_r+0xd6>
 8009f02:	2c00      	cmp	r4, #0
 8009f04:	d04b      	beq.n	8009f9e <_malloc_r+0xea>
 8009f06:	6823      	ldr	r3, [r4, #0]
 8009f08:	4639      	mov	r1, r7
 8009f0a:	4630      	mov	r0, r6
 8009f0c:	eb04 0903 	add.w	r9, r4, r3
 8009f10:	f000 f884 	bl	800a01c <_sbrk_r>
 8009f14:	4581      	cmp	r9, r0
 8009f16:	d142      	bne.n	8009f9e <_malloc_r+0xea>
 8009f18:	6821      	ldr	r1, [r4, #0]
 8009f1a:	1a6d      	subs	r5, r5, r1
 8009f1c:	4629      	mov	r1, r5
 8009f1e:	4630      	mov	r0, r6
 8009f20:	f7ff ffa6 	bl	8009e70 <sbrk_aligned>
 8009f24:	3001      	adds	r0, #1
 8009f26:	d03a      	beq.n	8009f9e <_malloc_r+0xea>
 8009f28:	6823      	ldr	r3, [r4, #0]
 8009f2a:	442b      	add	r3, r5
 8009f2c:	6023      	str	r3, [r4, #0]
 8009f2e:	f8d8 3000 	ldr.w	r3, [r8]
 8009f32:	685a      	ldr	r2, [r3, #4]
 8009f34:	bb62      	cbnz	r2, 8009f90 <_malloc_r+0xdc>
 8009f36:	f8c8 7000 	str.w	r7, [r8]
 8009f3a:	e00f      	b.n	8009f5c <_malloc_r+0xa8>
 8009f3c:	6822      	ldr	r2, [r4, #0]
 8009f3e:	1b52      	subs	r2, r2, r5
 8009f40:	d420      	bmi.n	8009f84 <_malloc_r+0xd0>
 8009f42:	2a0b      	cmp	r2, #11
 8009f44:	d917      	bls.n	8009f76 <_malloc_r+0xc2>
 8009f46:	1961      	adds	r1, r4, r5
 8009f48:	42a3      	cmp	r3, r4
 8009f4a:	6025      	str	r5, [r4, #0]
 8009f4c:	bf18      	it	ne
 8009f4e:	6059      	strne	r1, [r3, #4]
 8009f50:	6863      	ldr	r3, [r4, #4]
 8009f52:	bf08      	it	eq
 8009f54:	f8c8 1000 	streq.w	r1, [r8]
 8009f58:	5162      	str	r2, [r4, r5]
 8009f5a:	604b      	str	r3, [r1, #4]
 8009f5c:	4630      	mov	r0, r6
 8009f5e:	f000 f82f 	bl	8009fc0 <__malloc_unlock>
 8009f62:	f104 000b 	add.w	r0, r4, #11
 8009f66:	1d23      	adds	r3, r4, #4
 8009f68:	f020 0007 	bic.w	r0, r0, #7
 8009f6c:	1ac2      	subs	r2, r0, r3
 8009f6e:	bf1c      	itt	ne
 8009f70:	1a1b      	subne	r3, r3, r0
 8009f72:	50a3      	strne	r3, [r4, r2]
 8009f74:	e7af      	b.n	8009ed6 <_malloc_r+0x22>
 8009f76:	6862      	ldr	r2, [r4, #4]
 8009f78:	42a3      	cmp	r3, r4
 8009f7a:	bf0c      	ite	eq
 8009f7c:	f8c8 2000 	streq.w	r2, [r8]
 8009f80:	605a      	strne	r2, [r3, #4]
 8009f82:	e7eb      	b.n	8009f5c <_malloc_r+0xa8>
 8009f84:	4623      	mov	r3, r4
 8009f86:	6864      	ldr	r4, [r4, #4]
 8009f88:	e7ae      	b.n	8009ee8 <_malloc_r+0x34>
 8009f8a:	463c      	mov	r4, r7
 8009f8c:	687f      	ldr	r7, [r7, #4]
 8009f8e:	e7b6      	b.n	8009efe <_malloc_r+0x4a>
 8009f90:	461a      	mov	r2, r3
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	42a3      	cmp	r3, r4
 8009f96:	d1fb      	bne.n	8009f90 <_malloc_r+0xdc>
 8009f98:	2300      	movs	r3, #0
 8009f9a:	6053      	str	r3, [r2, #4]
 8009f9c:	e7de      	b.n	8009f5c <_malloc_r+0xa8>
 8009f9e:	230c      	movs	r3, #12
 8009fa0:	6033      	str	r3, [r6, #0]
 8009fa2:	4630      	mov	r0, r6
 8009fa4:	f000 f80c 	bl	8009fc0 <__malloc_unlock>
 8009fa8:	e794      	b.n	8009ed4 <_malloc_r+0x20>
 8009faa:	6005      	str	r5, [r0, #0]
 8009fac:	e7d6      	b.n	8009f5c <_malloc_r+0xa8>
 8009fae:	bf00      	nop
 8009fb0:	200010a0 	.word	0x200010a0

08009fb4 <__malloc_lock>:
 8009fb4:	4801      	ldr	r0, [pc, #4]	@ (8009fbc <__malloc_lock+0x8>)
 8009fb6:	f000 b86b 	b.w	800a090 <__retarget_lock_acquire_recursive>
 8009fba:	bf00      	nop
 8009fbc:	200011e0 	.word	0x200011e0

08009fc0 <__malloc_unlock>:
 8009fc0:	4801      	ldr	r0, [pc, #4]	@ (8009fc8 <__malloc_unlock+0x8>)
 8009fc2:	f000 b866 	b.w	800a092 <__retarget_lock_release_recursive>
 8009fc6:	bf00      	nop
 8009fc8:	200011e0 	.word	0x200011e0

08009fcc <siprintf>:
 8009fcc:	b40e      	push	{r1, r2, r3}
 8009fce:	b500      	push	{lr}
 8009fd0:	b09c      	sub	sp, #112	@ 0x70
 8009fd2:	ab1d      	add	r3, sp, #116	@ 0x74
 8009fd4:	9002      	str	r0, [sp, #8]
 8009fd6:	9006      	str	r0, [sp, #24]
 8009fd8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009fdc:	4809      	ldr	r0, [pc, #36]	@ (800a004 <siprintf+0x38>)
 8009fde:	9107      	str	r1, [sp, #28]
 8009fe0:	9104      	str	r1, [sp, #16]
 8009fe2:	4909      	ldr	r1, [pc, #36]	@ (800a008 <siprintf+0x3c>)
 8009fe4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fe8:	9105      	str	r1, [sp, #20]
 8009fea:	6800      	ldr	r0, [r0, #0]
 8009fec:	9301      	str	r3, [sp, #4]
 8009fee:	a902      	add	r1, sp, #8
 8009ff0:	f000 f8f6 	bl	800a1e0 <_svfiprintf_r>
 8009ff4:	9b02      	ldr	r3, [sp, #8]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	701a      	strb	r2, [r3, #0]
 8009ffa:	b01c      	add	sp, #112	@ 0x70
 8009ffc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a000:	b003      	add	sp, #12
 800a002:	4770      	bx	lr
 800a004:	200007a0 	.word	0x200007a0
 800a008:	ffff0208 	.word	0xffff0208

0800a00c <memset>:
 800a00c:	4402      	add	r2, r0
 800a00e:	4603      	mov	r3, r0
 800a010:	4293      	cmp	r3, r2
 800a012:	d100      	bne.n	800a016 <memset+0xa>
 800a014:	4770      	bx	lr
 800a016:	f803 1b01 	strb.w	r1, [r3], #1
 800a01a:	e7f9      	b.n	800a010 <memset+0x4>

0800a01c <_sbrk_r>:
 800a01c:	b538      	push	{r3, r4, r5, lr}
 800a01e:	4d06      	ldr	r5, [pc, #24]	@ (800a038 <_sbrk_r+0x1c>)
 800a020:	2300      	movs	r3, #0
 800a022:	4604      	mov	r4, r0
 800a024:	4608      	mov	r0, r1
 800a026:	602b      	str	r3, [r5, #0]
 800a028:	f7fc ff2a 	bl	8006e80 <_sbrk>
 800a02c:	1c43      	adds	r3, r0, #1
 800a02e:	d102      	bne.n	800a036 <_sbrk_r+0x1a>
 800a030:	682b      	ldr	r3, [r5, #0]
 800a032:	b103      	cbz	r3, 800a036 <_sbrk_r+0x1a>
 800a034:	6023      	str	r3, [r4, #0]
 800a036:	bd38      	pop	{r3, r4, r5, pc}
 800a038:	200011dc 	.word	0x200011dc

0800a03c <__errno>:
 800a03c:	4b01      	ldr	r3, [pc, #4]	@ (800a044 <__errno+0x8>)
 800a03e:	6818      	ldr	r0, [r3, #0]
 800a040:	4770      	bx	lr
 800a042:	bf00      	nop
 800a044:	200007a0 	.word	0x200007a0

0800a048 <__libc_init_array>:
 800a048:	b570      	push	{r4, r5, r6, lr}
 800a04a:	4d0d      	ldr	r5, [pc, #52]	@ (800a080 <__libc_init_array+0x38>)
 800a04c:	4c0d      	ldr	r4, [pc, #52]	@ (800a084 <__libc_init_array+0x3c>)
 800a04e:	1b64      	subs	r4, r4, r5
 800a050:	10a4      	asrs	r4, r4, #2
 800a052:	2600      	movs	r6, #0
 800a054:	42a6      	cmp	r6, r4
 800a056:	d109      	bne.n	800a06c <__libc_init_array+0x24>
 800a058:	4d0b      	ldr	r5, [pc, #44]	@ (800a088 <__libc_init_array+0x40>)
 800a05a:	4c0c      	ldr	r4, [pc, #48]	@ (800a08c <__libc_init_array+0x44>)
 800a05c:	f000 fba8 	bl	800a7b0 <_init>
 800a060:	1b64      	subs	r4, r4, r5
 800a062:	10a4      	asrs	r4, r4, #2
 800a064:	2600      	movs	r6, #0
 800a066:	42a6      	cmp	r6, r4
 800a068:	d105      	bne.n	800a076 <__libc_init_array+0x2e>
 800a06a:	bd70      	pop	{r4, r5, r6, pc}
 800a06c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a070:	4798      	blx	r3
 800a072:	3601      	adds	r6, #1
 800a074:	e7ee      	b.n	800a054 <__libc_init_array+0xc>
 800a076:	f855 3b04 	ldr.w	r3, [r5], #4
 800a07a:	4798      	blx	r3
 800a07c:	3601      	adds	r6, #1
 800a07e:	e7f2      	b.n	800a066 <__libc_init_array+0x1e>
 800a080:	0800babc 	.word	0x0800babc
 800a084:	0800babc 	.word	0x0800babc
 800a088:	0800babc 	.word	0x0800babc
 800a08c:	0800bac0 	.word	0x0800bac0

0800a090 <__retarget_lock_acquire_recursive>:
 800a090:	4770      	bx	lr

0800a092 <__retarget_lock_release_recursive>:
 800a092:	4770      	bx	lr

0800a094 <_free_r>:
 800a094:	b538      	push	{r3, r4, r5, lr}
 800a096:	4605      	mov	r5, r0
 800a098:	2900      	cmp	r1, #0
 800a09a:	d041      	beq.n	800a120 <_free_r+0x8c>
 800a09c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0a0:	1f0c      	subs	r4, r1, #4
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	bfb8      	it	lt
 800a0a6:	18e4      	addlt	r4, r4, r3
 800a0a8:	f7ff ff84 	bl	8009fb4 <__malloc_lock>
 800a0ac:	4a1d      	ldr	r2, [pc, #116]	@ (800a124 <_free_r+0x90>)
 800a0ae:	6813      	ldr	r3, [r2, #0]
 800a0b0:	b933      	cbnz	r3, 800a0c0 <_free_r+0x2c>
 800a0b2:	6063      	str	r3, [r4, #4]
 800a0b4:	6014      	str	r4, [r2, #0]
 800a0b6:	4628      	mov	r0, r5
 800a0b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0bc:	f7ff bf80 	b.w	8009fc0 <__malloc_unlock>
 800a0c0:	42a3      	cmp	r3, r4
 800a0c2:	d908      	bls.n	800a0d6 <_free_r+0x42>
 800a0c4:	6820      	ldr	r0, [r4, #0]
 800a0c6:	1821      	adds	r1, r4, r0
 800a0c8:	428b      	cmp	r3, r1
 800a0ca:	bf01      	itttt	eq
 800a0cc:	6819      	ldreq	r1, [r3, #0]
 800a0ce:	685b      	ldreq	r3, [r3, #4]
 800a0d0:	1809      	addeq	r1, r1, r0
 800a0d2:	6021      	streq	r1, [r4, #0]
 800a0d4:	e7ed      	b.n	800a0b2 <_free_r+0x1e>
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	b10b      	cbz	r3, 800a0e0 <_free_r+0x4c>
 800a0dc:	42a3      	cmp	r3, r4
 800a0de:	d9fa      	bls.n	800a0d6 <_free_r+0x42>
 800a0e0:	6811      	ldr	r1, [r2, #0]
 800a0e2:	1850      	adds	r0, r2, r1
 800a0e4:	42a0      	cmp	r0, r4
 800a0e6:	d10b      	bne.n	800a100 <_free_r+0x6c>
 800a0e8:	6820      	ldr	r0, [r4, #0]
 800a0ea:	4401      	add	r1, r0
 800a0ec:	1850      	adds	r0, r2, r1
 800a0ee:	4283      	cmp	r3, r0
 800a0f0:	6011      	str	r1, [r2, #0]
 800a0f2:	d1e0      	bne.n	800a0b6 <_free_r+0x22>
 800a0f4:	6818      	ldr	r0, [r3, #0]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	6053      	str	r3, [r2, #4]
 800a0fa:	4408      	add	r0, r1
 800a0fc:	6010      	str	r0, [r2, #0]
 800a0fe:	e7da      	b.n	800a0b6 <_free_r+0x22>
 800a100:	d902      	bls.n	800a108 <_free_r+0x74>
 800a102:	230c      	movs	r3, #12
 800a104:	602b      	str	r3, [r5, #0]
 800a106:	e7d6      	b.n	800a0b6 <_free_r+0x22>
 800a108:	6820      	ldr	r0, [r4, #0]
 800a10a:	1821      	adds	r1, r4, r0
 800a10c:	428b      	cmp	r3, r1
 800a10e:	bf04      	itt	eq
 800a110:	6819      	ldreq	r1, [r3, #0]
 800a112:	685b      	ldreq	r3, [r3, #4]
 800a114:	6063      	str	r3, [r4, #4]
 800a116:	bf04      	itt	eq
 800a118:	1809      	addeq	r1, r1, r0
 800a11a:	6021      	streq	r1, [r4, #0]
 800a11c:	6054      	str	r4, [r2, #4]
 800a11e:	e7ca      	b.n	800a0b6 <_free_r+0x22>
 800a120:	bd38      	pop	{r3, r4, r5, pc}
 800a122:	bf00      	nop
 800a124:	200010a0 	.word	0x200010a0

0800a128 <__ssputs_r>:
 800a128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a12c:	688e      	ldr	r6, [r1, #8]
 800a12e:	461f      	mov	r7, r3
 800a130:	42be      	cmp	r6, r7
 800a132:	680b      	ldr	r3, [r1, #0]
 800a134:	4682      	mov	sl, r0
 800a136:	460c      	mov	r4, r1
 800a138:	4690      	mov	r8, r2
 800a13a:	d82d      	bhi.n	800a198 <__ssputs_r+0x70>
 800a13c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a140:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a144:	d026      	beq.n	800a194 <__ssputs_r+0x6c>
 800a146:	6965      	ldr	r5, [r4, #20]
 800a148:	6909      	ldr	r1, [r1, #16]
 800a14a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a14e:	eba3 0901 	sub.w	r9, r3, r1
 800a152:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a156:	1c7b      	adds	r3, r7, #1
 800a158:	444b      	add	r3, r9
 800a15a:	106d      	asrs	r5, r5, #1
 800a15c:	429d      	cmp	r5, r3
 800a15e:	bf38      	it	cc
 800a160:	461d      	movcc	r5, r3
 800a162:	0553      	lsls	r3, r2, #21
 800a164:	d527      	bpl.n	800a1b6 <__ssputs_r+0x8e>
 800a166:	4629      	mov	r1, r5
 800a168:	f7ff fea4 	bl	8009eb4 <_malloc_r>
 800a16c:	4606      	mov	r6, r0
 800a16e:	b360      	cbz	r0, 800a1ca <__ssputs_r+0xa2>
 800a170:	6921      	ldr	r1, [r4, #16]
 800a172:	464a      	mov	r2, r9
 800a174:	f000 fad8 	bl	800a728 <memcpy>
 800a178:	89a3      	ldrh	r3, [r4, #12]
 800a17a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a17e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a182:	81a3      	strh	r3, [r4, #12]
 800a184:	6126      	str	r6, [r4, #16]
 800a186:	6165      	str	r5, [r4, #20]
 800a188:	444e      	add	r6, r9
 800a18a:	eba5 0509 	sub.w	r5, r5, r9
 800a18e:	6026      	str	r6, [r4, #0]
 800a190:	60a5      	str	r5, [r4, #8]
 800a192:	463e      	mov	r6, r7
 800a194:	42be      	cmp	r6, r7
 800a196:	d900      	bls.n	800a19a <__ssputs_r+0x72>
 800a198:	463e      	mov	r6, r7
 800a19a:	6820      	ldr	r0, [r4, #0]
 800a19c:	4632      	mov	r2, r6
 800a19e:	4641      	mov	r1, r8
 800a1a0:	f000 faa8 	bl	800a6f4 <memmove>
 800a1a4:	68a3      	ldr	r3, [r4, #8]
 800a1a6:	1b9b      	subs	r3, r3, r6
 800a1a8:	60a3      	str	r3, [r4, #8]
 800a1aa:	6823      	ldr	r3, [r4, #0]
 800a1ac:	4433      	add	r3, r6
 800a1ae:	6023      	str	r3, [r4, #0]
 800a1b0:	2000      	movs	r0, #0
 800a1b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1b6:	462a      	mov	r2, r5
 800a1b8:	f000 fac4 	bl	800a744 <_realloc_r>
 800a1bc:	4606      	mov	r6, r0
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	d1e0      	bne.n	800a184 <__ssputs_r+0x5c>
 800a1c2:	6921      	ldr	r1, [r4, #16]
 800a1c4:	4650      	mov	r0, sl
 800a1c6:	f7ff ff65 	bl	800a094 <_free_r>
 800a1ca:	230c      	movs	r3, #12
 800a1cc:	f8ca 3000 	str.w	r3, [sl]
 800a1d0:	89a3      	ldrh	r3, [r4, #12]
 800a1d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1d6:	81a3      	strh	r3, [r4, #12]
 800a1d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1dc:	e7e9      	b.n	800a1b2 <__ssputs_r+0x8a>
	...

0800a1e0 <_svfiprintf_r>:
 800a1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1e4:	4698      	mov	r8, r3
 800a1e6:	898b      	ldrh	r3, [r1, #12]
 800a1e8:	061b      	lsls	r3, r3, #24
 800a1ea:	b09d      	sub	sp, #116	@ 0x74
 800a1ec:	4607      	mov	r7, r0
 800a1ee:	460d      	mov	r5, r1
 800a1f0:	4614      	mov	r4, r2
 800a1f2:	d510      	bpl.n	800a216 <_svfiprintf_r+0x36>
 800a1f4:	690b      	ldr	r3, [r1, #16]
 800a1f6:	b973      	cbnz	r3, 800a216 <_svfiprintf_r+0x36>
 800a1f8:	2140      	movs	r1, #64	@ 0x40
 800a1fa:	f7ff fe5b 	bl	8009eb4 <_malloc_r>
 800a1fe:	6028      	str	r0, [r5, #0]
 800a200:	6128      	str	r0, [r5, #16]
 800a202:	b930      	cbnz	r0, 800a212 <_svfiprintf_r+0x32>
 800a204:	230c      	movs	r3, #12
 800a206:	603b      	str	r3, [r7, #0]
 800a208:	f04f 30ff 	mov.w	r0, #4294967295
 800a20c:	b01d      	add	sp, #116	@ 0x74
 800a20e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a212:	2340      	movs	r3, #64	@ 0x40
 800a214:	616b      	str	r3, [r5, #20]
 800a216:	2300      	movs	r3, #0
 800a218:	9309      	str	r3, [sp, #36]	@ 0x24
 800a21a:	2320      	movs	r3, #32
 800a21c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a220:	f8cd 800c 	str.w	r8, [sp, #12]
 800a224:	2330      	movs	r3, #48	@ 0x30
 800a226:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a3c4 <_svfiprintf_r+0x1e4>
 800a22a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a22e:	f04f 0901 	mov.w	r9, #1
 800a232:	4623      	mov	r3, r4
 800a234:	469a      	mov	sl, r3
 800a236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a23a:	b10a      	cbz	r2, 800a240 <_svfiprintf_r+0x60>
 800a23c:	2a25      	cmp	r2, #37	@ 0x25
 800a23e:	d1f9      	bne.n	800a234 <_svfiprintf_r+0x54>
 800a240:	ebba 0b04 	subs.w	fp, sl, r4
 800a244:	d00b      	beq.n	800a25e <_svfiprintf_r+0x7e>
 800a246:	465b      	mov	r3, fp
 800a248:	4622      	mov	r2, r4
 800a24a:	4629      	mov	r1, r5
 800a24c:	4638      	mov	r0, r7
 800a24e:	f7ff ff6b 	bl	800a128 <__ssputs_r>
 800a252:	3001      	adds	r0, #1
 800a254:	f000 80a7 	beq.w	800a3a6 <_svfiprintf_r+0x1c6>
 800a258:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a25a:	445a      	add	r2, fp
 800a25c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a25e:	f89a 3000 	ldrb.w	r3, [sl]
 800a262:	2b00      	cmp	r3, #0
 800a264:	f000 809f 	beq.w	800a3a6 <_svfiprintf_r+0x1c6>
 800a268:	2300      	movs	r3, #0
 800a26a:	f04f 32ff 	mov.w	r2, #4294967295
 800a26e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a272:	f10a 0a01 	add.w	sl, sl, #1
 800a276:	9304      	str	r3, [sp, #16]
 800a278:	9307      	str	r3, [sp, #28]
 800a27a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a27e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a280:	4654      	mov	r4, sl
 800a282:	2205      	movs	r2, #5
 800a284:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a288:	484e      	ldr	r0, [pc, #312]	@ (800a3c4 <_svfiprintf_r+0x1e4>)
 800a28a:	f7f5 ffb1 	bl	80001f0 <memchr>
 800a28e:	9a04      	ldr	r2, [sp, #16]
 800a290:	b9d8      	cbnz	r0, 800a2ca <_svfiprintf_r+0xea>
 800a292:	06d0      	lsls	r0, r2, #27
 800a294:	bf44      	itt	mi
 800a296:	2320      	movmi	r3, #32
 800a298:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a29c:	0711      	lsls	r1, r2, #28
 800a29e:	bf44      	itt	mi
 800a2a0:	232b      	movmi	r3, #43	@ 0x2b
 800a2a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2a6:	f89a 3000 	ldrb.w	r3, [sl]
 800a2aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2ac:	d015      	beq.n	800a2da <_svfiprintf_r+0xfa>
 800a2ae:	9a07      	ldr	r2, [sp, #28]
 800a2b0:	4654      	mov	r4, sl
 800a2b2:	2000      	movs	r0, #0
 800a2b4:	f04f 0c0a 	mov.w	ip, #10
 800a2b8:	4621      	mov	r1, r4
 800a2ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2be:	3b30      	subs	r3, #48	@ 0x30
 800a2c0:	2b09      	cmp	r3, #9
 800a2c2:	d94b      	bls.n	800a35c <_svfiprintf_r+0x17c>
 800a2c4:	b1b0      	cbz	r0, 800a2f4 <_svfiprintf_r+0x114>
 800a2c6:	9207      	str	r2, [sp, #28]
 800a2c8:	e014      	b.n	800a2f4 <_svfiprintf_r+0x114>
 800a2ca:	eba0 0308 	sub.w	r3, r0, r8
 800a2ce:	fa09 f303 	lsl.w	r3, r9, r3
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	9304      	str	r3, [sp, #16]
 800a2d6:	46a2      	mov	sl, r4
 800a2d8:	e7d2      	b.n	800a280 <_svfiprintf_r+0xa0>
 800a2da:	9b03      	ldr	r3, [sp, #12]
 800a2dc:	1d19      	adds	r1, r3, #4
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	9103      	str	r1, [sp, #12]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	bfbb      	ittet	lt
 800a2e6:	425b      	neglt	r3, r3
 800a2e8:	f042 0202 	orrlt.w	r2, r2, #2
 800a2ec:	9307      	strge	r3, [sp, #28]
 800a2ee:	9307      	strlt	r3, [sp, #28]
 800a2f0:	bfb8      	it	lt
 800a2f2:	9204      	strlt	r2, [sp, #16]
 800a2f4:	7823      	ldrb	r3, [r4, #0]
 800a2f6:	2b2e      	cmp	r3, #46	@ 0x2e
 800a2f8:	d10a      	bne.n	800a310 <_svfiprintf_r+0x130>
 800a2fa:	7863      	ldrb	r3, [r4, #1]
 800a2fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2fe:	d132      	bne.n	800a366 <_svfiprintf_r+0x186>
 800a300:	9b03      	ldr	r3, [sp, #12]
 800a302:	1d1a      	adds	r2, r3, #4
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	9203      	str	r2, [sp, #12]
 800a308:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a30c:	3402      	adds	r4, #2
 800a30e:	9305      	str	r3, [sp, #20]
 800a310:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a3d4 <_svfiprintf_r+0x1f4>
 800a314:	7821      	ldrb	r1, [r4, #0]
 800a316:	2203      	movs	r2, #3
 800a318:	4650      	mov	r0, sl
 800a31a:	f7f5 ff69 	bl	80001f0 <memchr>
 800a31e:	b138      	cbz	r0, 800a330 <_svfiprintf_r+0x150>
 800a320:	9b04      	ldr	r3, [sp, #16]
 800a322:	eba0 000a 	sub.w	r0, r0, sl
 800a326:	2240      	movs	r2, #64	@ 0x40
 800a328:	4082      	lsls	r2, r0
 800a32a:	4313      	orrs	r3, r2
 800a32c:	3401      	adds	r4, #1
 800a32e:	9304      	str	r3, [sp, #16]
 800a330:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a334:	4824      	ldr	r0, [pc, #144]	@ (800a3c8 <_svfiprintf_r+0x1e8>)
 800a336:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a33a:	2206      	movs	r2, #6
 800a33c:	f7f5 ff58 	bl	80001f0 <memchr>
 800a340:	2800      	cmp	r0, #0
 800a342:	d036      	beq.n	800a3b2 <_svfiprintf_r+0x1d2>
 800a344:	4b21      	ldr	r3, [pc, #132]	@ (800a3cc <_svfiprintf_r+0x1ec>)
 800a346:	bb1b      	cbnz	r3, 800a390 <_svfiprintf_r+0x1b0>
 800a348:	9b03      	ldr	r3, [sp, #12]
 800a34a:	3307      	adds	r3, #7
 800a34c:	f023 0307 	bic.w	r3, r3, #7
 800a350:	3308      	adds	r3, #8
 800a352:	9303      	str	r3, [sp, #12]
 800a354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a356:	4433      	add	r3, r6
 800a358:	9309      	str	r3, [sp, #36]	@ 0x24
 800a35a:	e76a      	b.n	800a232 <_svfiprintf_r+0x52>
 800a35c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a360:	460c      	mov	r4, r1
 800a362:	2001      	movs	r0, #1
 800a364:	e7a8      	b.n	800a2b8 <_svfiprintf_r+0xd8>
 800a366:	2300      	movs	r3, #0
 800a368:	3401      	adds	r4, #1
 800a36a:	9305      	str	r3, [sp, #20]
 800a36c:	4619      	mov	r1, r3
 800a36e:	f04f 0c0a 	mov.w	ip, #10
 800a372:	4620      	mov	r0, r4
 800a374:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a378:	3a30      	subs	r2, #48	@ 0x30
 800a37a:	2a09      	cmp	r2, #9
 800a37c:	d903      	bls.n	800a386 <_svfiprintf_r+0x1a6>
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d0c6      	beq.n	800a310 <_svfiprintf_r+0x130>
 800a382:	9105      	str	r1, [sp, #20]
 800a384:	e7c4      	b.n	800a310 <_svfiprintf_r+0x130>
 800a386:	fb0c 2101 	mla	r1, ip, r1, r2
 800a38a:	4604      	mov	r4, r0
 800a38c:	2301      	movs	r3, #1
 800a38e:	e7f0      	b.n	800a372 <_svfiprintf_r+0x192>
 800a390:	ab03      	add	r3, sp, #12
 800a392:	9300      	str	r3, [sp, #0]
 800a394:	462a      	mov	r2, r5
 800a396:	4b0e      	ldr	r3, [pc, #56]	@ (800a3d0 <_svfiprintf_r+0x1f0>)
 800a398:	a904      	add	r1, sp, #16
 800a39a:	4638      	mov	r0, r7
 800a39c:	f3af 8000 	nop.w
 800a3a0:	1c42      	adds	r2, r0, #1
 800a3a2:	4606      	mov	r6, r0
 800a3a4:	d1d6      	bne.n	800a354 <_svfiprintf_r+0x174>
 800a3a6:	89ab      	ldrh	r3, [r5, #12]
 800a3a8:	065b      	lsls	r3, r3, #25
 800a3aa:	f53f af2d 	bmi.w	800a208 <_svfiprintf_r+0x28>
 800a3ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a3b0:	e72c      	b.n	800a20c <_svfiprintf_r+0x2c>
 800a3b2:	ab03      	add	r3, sp, #12
 800a3b4:	9300      	str	r3, [sp, #0]
 800a3b6:	462a      	mov	r2, r5
 800a3b8:	4b05      	ldr	r3, [pc, #20]	@ (800a3d0 <_svfiprintf_r+0x1f0>)
 800a3ba:	a904      	add	r1, sp, #16
 800a3bc:	4638      	mov	r0, r7
 800a3be:	f000 f879 	bl	800a4b4 <_printf_i>
 800a3c2:	e7ed      	b.n	800a3a0 <_svfiprintf_r+0x1c0>
 800a3c4:	0800ba80 	.word	0x0800ba80
 800a3c8:	0800ba8a 	.word	0x0800ba8a
 800a3cc:	00000000 	.word	0x00000000
 800a3d0:	0800a129 	.word	0x0800a129
 800a3d4:	0800ba86 	.word	0x0800ba86

0800a3d8 <_printf_common>:
 800a3d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3dc:	4616      	mov	r6, r2
 800a3de:	4698      	mov	r8, r3
 800a3e0:	688a      	ldr	r2, [r1, #8]
 800a3e2:	690b      	ldr	r3, [r1, #16]
 800a3e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	bfb8      	it	lt
 800a3ec:	4613      	movlt	r3, r2
 800a3ee:	6033      	str	r3, [r6, #0]
 800a3f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a3f4:	4607      	mov	r7, r0
 800a3f6:	460c      	mov	r4, r1
 800a3f8:	b10a      	cbz	r2, 800a3fe <_printf_common+0x26>
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	6033      	str	r3, [r6, #0]
 800a3fe:	6823      	ldr	r3, [r4, #0]
 800a400:	0699      	lsls	r1, r3, #26
 800a402:	bf42      	ittt	mi
 800a404:	6833      	ldrmi	r3, [r6, #0]
 800a406:	3302      	addmi	r3, #2
 800a408:	6033      	strmi	r3, [r6, #0]
 800a40a:	6825      	ldr	r5, [r4, #0]
 800a40c:	f015 0506 	ands.w	r5, r5, #6
 800a410:	d106      	bne.n	800a420 <_printf_common+0x48>
 800a412:	f104 0a19 	add.w	sl, r4, #25
 800a416:	68e3      	ldr	r3, [r4, #12]
 800a418:	6832      	ldr	r2, [r6, #0]
 800a41a:	1a9b      	subs	r3, r3, r2
 800a41c:	42ab      	cmp	r3, r5
 800a41e:	dc26      	bgt.n	800a46e <_printf_common+0x96>
 800a420:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a424:	6822      	ldr	r2, [r4, #0]
 800a426:	3b00      	subs	r3, #0
 800a428:	bf18      	it	ne
 800a42a:	2301      	movne	r3, #1
 800a42c:	0692      	lsls	r2, r2, #26
 800a42e:	d42b      	bmi.n	800a488 <_printf_common+0xb0>
 800a430:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a434:	4641      	mov	r1, r8
 800a436:	4638      	mov	r0, r7
 800a438:	47c8      	blx	r9
 800a43a:	3001      	adds	r0, #1
 800a43c:	d01e      	beq.n	800a47c <_printf_common+0xa4>
 800a43e:	6823      	ldr	r3, [r4, #0]
 800a440:	6922      	ldr	r2, [r4, #16]
 800a442:	f003 0306 	and.w	r3, r3, #6
 800a446:	2b04      	cmp	r3, #4
 800a448:	bf02      	ittt	eq
 800a44a:	68e5      	ldreq	r5, [r4, #12]
 800a44c:	6833      	ldreq	r3, [r6, #0]
 800a44e:	1aed      	subeq	r5, r5, r3
 800a450:	68a3      	ldr	r3, [r4, #8]
 800a452:	bf0c      	ite	eq
 800a454:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a458:	2500      	movne	r5, #0
 800a45a:	4293      	cmp	r3, r2
 800a45c:	bfc4      	itt	gt
 800a45e:	1a9b      	subgt	r3, r3, r2
 800a460:	18ed      	addgt	r5, r5, r3
 800a462:	2600      	movs	r6, #0
 800a464:	341a      	adds	r4, #26
 800a466:	42b5      	cmp	r5, r6
 800a468:	d11a      	bne.n	800a4a0 <_printf_common+0xc8>
 800a46a:	2000      	movs	r0, #0
 800a46c:	e008      	b.n	800a480 <_printf_common+0xa8>
 800a46e:	2301      	movs	r3, #1
 800a470:	4652      	mov	r2, sl
 800a472:	4641      	mov	r1, r8
 800a474:	4638      	mov	r0, r7
 800a476:	47c8      	blx	r9
 800a478:	3001      	adds	r0, #1
 800a47a:	d103      	bne.n	800a484 <_printf_common+0xac>
 800a47c:	f04f 30ff 	mov.w	r0, #4294967295
 800a480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a484:	3501      	adds	r5, #1
 800a486:	e7c6      	b.n	800a416 <_printf_common+0x3e>
 800a488:	18e1      	adds	r1, r4, r3
 800a48a:	1c5a      	adds	r2, r3, #1
 800a48c:	2030      	movs	r0, #48	@ 0x30
 800a48e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a492:	4422      	add	r2, r4
 800a494:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a498:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a49c:	3302      	adds	r3, #2
 800a49e:	e7c7      	b.n	800a430 <_printf_common+0x58>
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	4622      	mov	r2, r4
 800a4a4:	4641      	mov	r1, r8
 800a4a6:	4638      	mov	r0, r7
 800a4a8:	47c8      	blx	r9
 800a4aa:	3001      	adds	r0, #1
 800a4ac:	d0e6      	beq.n	800a47c <_printf_common+0xa4>
 800a4ae:	3601      	adds	r6, #1
 800a4b0:	e7d9      	b.n	800a466 <_printf_common+0x8e>
	...

0800a4b4 <_printf_i>:
 800a4b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4b8:	7e0f      	ldrb	r7, [r1, #24]
 800a4ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a4bc:	2f78      	cmp	r7, #120	@ 0x78
 800a4be:	4691      	mov	r9, r2
 800a4c0:	4680      	mov	r8, r0
 800a4c2:	460c      	mov	r4, r1
 800a4c4:	469a      	mov	sl, r3
 800a4c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a4ca:	d807      	bhi.n	800a4dc <_printf_i+0x28>
 800a4cc:	2f62      	cmp	r7, #98	@ 0x62
 800a4ce:	d80a      	bhi.n	800a4e6 <_printf_i+0x32>
 800a4d0:	2f00      	cmp	r7, #0
 800a4d2:	f000 80d2 	beq.w	800a67a <_printf_i+0x1c6>
 800a4d6:	2f58      	cmp	r7, #88	@ 0x58
 800a4d8:	f000 80b9 	beq.w	800a64e <_printf_i+0x19a>
 800a4dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a4e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a4e4:	e03a      	b.n	800a55c <_printf_i+0xa8>
 800a4e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a4ea:	2b15      	cmp	r3, #21
 800a4ec:	d8f6      	bhi.n	800a4dc <_printf_i+0x28>
 800a4ee:	a101      	add	r1, pc, #4	@ (adr r1, 800a4f4 <_printf_i+0x40>)
 800a4f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a4f4:	0800a54d 	.word	0x0800a54d
 800a4f8:	0800a561 	.word	0x0800a561
 800a4fc:	0800a4dd 	.word	0x0800a4dd
 800a500:	0800a4dd 	.word	0x0800a4dd
 800a504:	0800a4dd 	.word	0x0800a4dd
 800a508:	0800a4dd 	.word	0x0800a4dd
 800a50c:	0800a561 	.word	0x0800a561
 800a510:	0800a4dd 	.word	0x0800a4dd
 800a514:	0800a4dd 	.word	0x0800a4dd
 800a518:	0800a4dd 	.word	0x0800a4dd
 800a51c:	0800a4dd 	.word	0x0800a4dd
 800a520:	0800a661 	.word	0x0800a661
 800a524:	0800a58b 	.word	0x0800a58b
 800a528:	0800a61b 	.word	0x0800a61b
 800a52c:	0800a4dd 	.word	0x0800a4dd
 800a530:	0800a4dd 	.word	0x0800a4dd
 800a534:	0800a683 	.word	0x0800a683
 800a538:	0800a4dd 	.word	0x0800a4dd
 800a53c:	0800a58b 	.word	0x0800a58b
 800a540:	0800a4dd 	.word	0x0800a4dd
 800a544:	0800a4dd 	.word	0x0800a4dd
 800a548:	0800a623 	.word	0x0800a623
 800a54c:	6833      	ldr	r3, [r6, #0]
 800a54e:	1d1a      	adds	r2, r3, #4
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	6032      	str	r2, [r6, #0]
 800a554:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a558:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a55c:	2301      	movs	r3, #1
 800a55e:	e09d      	b.n	800a69c <_printf_i+0x1e8>
 800a560:	6833      	ldr	r3, [r6, #0]
 800a562:	6820      	ldr	r0, [r4, #0]
 800a564:	1d19      	adds	r1, r3, #4
 800a566:	6031      	str	r1, [r6, #0]
 800a568:	0606      	lsls	r6, r0, #24
 800a56a:	d501      	bpl.n	800a570 <_printf_i+0xbc>
 800a56c:	681d      	ldr	r5, [r3, #0]
 800a56e:	e003      	b.n	800a578 <_printf_i+0xc4>
 800a570:	0645      	lsls	r5, r0, #25
 800a572:	d5fb      	bpl.n	800a56c <_printf_i+0xb8>
 800a574:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a578:	2d00      	cmp	r5, #0
 800a57a:	da03      	bge.n	800a584 <_printf_i+0xd0>
 800a57c:	232d      	movs	r3, #45	@ 0x2d
 800a57e:	426d      	negs	r5, r5
 800a580:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a584:	4859      	ldr	r0, [pc, #356]	@ (800a6ec <_printf_i+0x238>)
 800a586:	230a      	movs	r3, #10
 800a588:	e011      	b.n	800a5ae <_printf_i+0xfa>
 800a58a:	6821      	ldr	r1, [r4, #0]
 800a58c:	6833      	ldr	r3, [r6, #0]
 800a58e:	0608      	lsls	r0, r1, #24
 800a590:	f853 5b04 	ldr.w	r5, [r3], #4
 800a594:	d402      	bmi.n	800a59c <_printf_i+0xe8>
 800a596:	0649      	lsls	r1, r1, #25
 800a598:	bf48      	it	mi
 800a59a:	b2ad      	uxthmi	r5, r5
 800a59c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a59e:	4853      	ldr	r0, [pc, #332]	@ (800a6ec <_printf_i+0x238>)
 800a5a0:	6033      	str	r3, [r6, #0]
 800a5a2:	bf14      	ite	ne
 800a5a4:	230a      	movne	r3, #10
 800a5a6:	2308      	moveq	r3, #8
 800a5a8:	2100      	movs	r1, #0
 800a5aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a5ae:	6866      	ldr	r6, [r4, #4]
 800a5b0:	60a6      	str	r6, [r4, #8]
 800a5b2:	2e00      	cmp	r6, #0
 800a5b4:	bfa2      	ittt	ge
 800a5b6:	6821      	ldrge	r1, [r4, #0]
 800a5b8:	f021 0104 	bicge.w	r1, r1, #4
 800a5bc:	6021      	strge	r1, [r4, #0]
 800a5be:	b90d      	cbnz	r5, 800a5c4 <_printf_i+0x110>
 800a5c0:	2e00      	cmp	r6, #0
 800a5c2:	d04b      	beq.n	800a65c <_printf_i+0x1a8>
 800a5c4:	4616      	mov	r6, r2
 800a5c6:	fbb5 f1f3 	udiv	r1, r5, r3
 800a5ca:	fb03 5711 	mls	r7, r3, r1, r5
 800a5ce:	5dc7      	ldrb	r7, [r0, r7]
 800a5d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a5d4:	462f      	mov	r7, r5
 800a5d6:	42bb      	cmp	r3, r7
 800a5d8:	460d      	mov	r5, r1
 800a5da:	d9f4      	bls.n	800a5c6 <_printf_i+0x112>
 800a5dc:	2b08      	cmp	r3, #8
 800a5de:	d10b      	bne.n	800a5f8 <_printf_i+0x144>
 800a5e0:	6823      	ldr	r3, [r4, #0]
 800a5e2:	07df      	lsls	r7, r3, #31
 800a5e4:	d508      	bpl.n	800a5f8 <_printf_i+0x144>
 800a5e6:	6923      	ldr	r3, [r4, #16]
 800a5e8:	6861      	ldr	r1, [r4, #4]
 800a5ea:	4299      	cmp	r1, r3
 800a5ec:	bfde      	ittt	le
 800a5ee:	2330      	movle	r3, #48	@ 0x30
 800a5f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a5f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a5f8:	1b92      	subs	r2, r2, r6
 800a5fa:	6122      	str	r2, [r4, #16]
 800a5fc:	f8cd a000 	str.w	sl, [sp]
 800a600:	464b      	mov	r3, r9
 800a602:	aa03      	add	r2, sp, #12
 800a604:	4621      	mov	r1, r4
 800a606:	4640      	mov	r0, r8
 800a608:	f7ff fee6 	bl	800a3d8 <_printf_common>
 800a60c:	3001      	adds	r0, #1
 800a60e:	d14a      	bne.n	800a6a6 <_printf_i+0x1f2>
 800a610:	f04f 30ff 	mov.w	r0, #4294967295
 800a614:	b004      	add	sp, #16
 800a616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a61a:	6823      	ldr	r3, [r4, #0]
 800a61c:	f043 0320 	orr.w	r3, r3, #32
 800a620:	6023      	str	r3, [r4, #0]
 800a622:	4833      	ldr	r0, [pc, #204]	@ (800a6f0 <_printf_i+0x23c>)
 800a624:	2778      	movs	r7, #120	@ 0x78
 800a626:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a62a:	6823      	ldr	r3, [r4, #0]
 800a62c:	6831      	ldr	r1, [r6, #0]
 800a62e:	061f      	lsls	r7, r3, #24
 800a630:	f851 5b04 	ldr.w	r5, [r1], #4
 800a634:	d402      	bmi.n	800a63c <_printf_i+0x188>
 800a636:	065f      	lsls	r7, r3, #25
 800a638:	bf48      	it	mi
 800a63a:	b2ad      	uxthmi	r5, r5
 800a63c:	6031      	str	r1, [r6, #0]
 800a63e:	07d9      	lsls	r1, r3, #31
 800a640:	bf44      	itt	mi
 800a642:	f043 0320 	orrmi.w	r3, r3, #32
 800a646:	6023      	strmi	r3, [r4, #0]
 800a648:	b11d      	cbz	r5, 800a652 <_printf_i+0x19e>
 800a64a:	2310      	movs	r3, #16
 800a64c:	e7ac      	b.n	800a5a8 <_printf_i+0xf4>
 800a64e:	4827      	ldr	r0, [pc, #156]	@ (800a6ec <_printf_i+0x238>)
 800a650:	e7e9      	b.n	800a626 <_printf_i+0x172>
 800a652:	6823      	ldr	r3, [r4, #0]
 800a654:	f023 0320 	bic.w	r3, r3, #32
 800a658:	6023      	str	r3, [r4, #0]
 800a65a:	e7f6      	b.n	800a64a <_printf_i+0x196>
 800a65c:	4616      	mov	r6, r2
 800a65e:	e7bd      	b.n	800a5dc <_printf_i+0x128>
 800a660:	6833      	ldr	r3, [r6, #0]
 800a662:	6825      	ldr	r5, [r4, #0]
 800a664:	6961      	ldr	r1, [r4, #20]
 800a666:	1d18      	adds	r0, r3, #4
 800a668:	6030      	str	r0, [r6, #0]
 800a66a:	062e      	lsls	r6, r5, #24
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	d501      	bpl.n	800a674 <_printf_i+0x1c0>
 800a670:	6019      	str	r1, [r3, #0]
 800a672:	e002      	b.n	800a67a <_printf_i+0x1c6>
 800a674:	0668      	lsls	r0, r5, #25
 800a676:	d5fb      	bpl.n	800a670 <_printf_i+0x1bc>
 800a678:	8019      	strh	r1, [r3, #0]
 800a67a:	2300      	movs	r3, #0
 800a67c:	6123      	str	r3, [r4, #16]
 800a67e:	4616      	mov	r6, r2
 800a680:	e7bc      	b.n	800a5fc <_printf_i+0x148>
 800a682:	6833      	ldr	r3, [r6, #0]
 800a684:	1d1a      	adds	r2, r3, #4
 800a686:	6032      	str	r2, [r6, #0]
 800a688:	681e      	ldr	r6, [r3, #0]
 800a68a:	6862      	ldr	r2, [r4, #4]
 800a68c:	2100      	movs	r1, #0
 800a68e:	4630      	mov	r0, r6
 800a690:	f7f5 fdae 	bl	80001f0 <memchr>
 800a694:	b108      	cbz	r0, 800a69a <_printf_i+0x1e6>
 800a696:	1b80      	subs	r0, r0, r6
 800a698:	6060      	str	r0, [r4, #4]
 800a69a:	6863      	ldr	r3, [r4, #4]
 800a69c:	6123      	str	r3, [r4, #16]
 800a69e:	2300      	movs	r3, #0
 800a6a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6a4:	e7aa      	b.n	800a5fc <_printf_i+0x148>
 800a6a6:	6923      	ldr	r3, [r4, #16]
 800a6a8:	4632      	mov	r2, r6
 800a6aa:	4649      	mov	r1, r9
 800a6ac:	4640      	mov	r0, r8
 800a6ae:	47d0      	blx	sl
 800a6b0:	3001      	adds	r0, #1
 800a6b2:	d0ad      	beq.n	800a610 <_printf_i+0x15c>
 800a6b4:	6823      	ldr	r3, [r4, #0]
 800a6b6:	079b      	lsls	r3, r3, #30
 800a6b8:	d413      	bmi.n	800a6e2 <_printf_i+0x22e>
 800a6ba:	68e0      	ldr	r0, [r4, #12]
 800a6bc:	9b03      	ldr	r3, [sp, #12]
 800a6be:	4298      	cmp	r0, r3
 800a6c0:	bfb8      	it	lt
 800a6c2:	4618      	movlt	r0, r3
 800a6c4:	e7a6      	b.n	800a614 <_printf_i+0x160>
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	4632      	mov	r2, r6
 800a6ca:	4649      	mov	r1, r9
 800a6cc:	4640      	mov	r0, r8
 800a6ce:	47d0      	blx	sl
 800a6d0:	3001      	adds	r0, #1
 800a6d2:	d09d      	beq.n	800a610 <_printf_i+0x15c>
 800a6d4:	3501      	adds	r5, #1
 800a6d6:	68e3      	ldr	r3, [r4, #12]
 800a6d8:	9903      	ldr	r1, [sp, #12]
 800a6da:	1a5b      	subs	r3, r3, r1
 800a6dc:	42ab      	cmp	r3, r5
 800a6de:	dcf2      	bgt.n	800a6c6 <_printf_i+0x212>
 800a6e0:	e7eb      	b.n	800a6ba <_printf_i+0x206>
 800a6e2:	2500      	movs	r5, #0
 800a6e4:	f104 0619 	add.w	r6, r4, #25
 800a6e8:	e7f5      	b.n	800a6d6 <_printf_i+0x222>
 800a6ea:	bf00      	nop
 800a6ec:	0800ba91 	.word	0x0800ba91
 800a6f0:	0800baa2 	.word	0x0800baa2

0800a6f4 <memmove>:
 800a6f4:	4288      	cmp	r0, r1
 800a6f6:	b510      	push	{r4, lr}
 800a6f8:	eb01 0402 	add.w	r4, r1, r2
 800a6fc:	d902      	bls.n	800a704 <memmove+0x10>
 800a6fe:	4284      	cmp	r4, r0
 800a700:	4623      	mov	r3, r4
 800a702:	d807      	bhi.n	800a714 <memmove+0x20>
 800a704:	1e43      	subs	r3, r0, #1
 800a706:	42a1      	cmp	r1, r4
 800a708:	d008      	beq.n	800a71c <memmove+0x28>
 800a70a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a70e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a712:	e7f8      	b.n	800a706 <memmove+0x12>
 800a714:	4402      	add	r2, r0
 800a716:	4601      	mov	r1, r0
 800a718:	428a      	cmp	r2, r1
 800a71a:	d100      	bne.n	800a71e <memmove+0x2a>
 800a71c:	bd10      	pop	{r4, pc}
 800a71e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a722:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a726:	e7f7      	b.n	800a718 <memmove+0x24>

0800a728 <memcpy>:
 800a728:	440a      	add	r2, r1
 800a72a:	4291      	cmp	r1, r2
 800a72c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a730:	d100      	bne.n	800a734 <memcpy+0xc>
 800a732:	4770      	bx	lr
 800a734:	b510      	push	{r4, lr}
 800a736:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a73a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a73e:	4291      	cmp	r1, r2
 800a740:	d1f9      	bne.n	800a736 <memcpy+0xe>
 800a742:	bd10      	pop	{r4, pc}

0800a744 <_realloc_r>:
 800a744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a748:	4680      	mov	r8, r0
 800a74a:	4615      	mov	r5, r2
 800a74c:	460c      	mov	r4, r1
 800a74e:	b921      	cbnz	r1, 800a75a <_realloc_r+0x16>
 800a750:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a754:	4611      	mov	r1, r2
 800a756:	f7ff bbad 	b.w	8009eb4 <_malloc_r>
 800a75a:	b92a      	cbnz	r2, 800a768 <_realloc_r+0x24>
 800a75c:	f7ff fc9a 	bl	800a094 <_free_r>
 800a760:	2400      	movs	r4, #0
 800a762:	4620      	mov	r0, r4
 800a764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a768:	f000 f81a 	bl	800a7a0 <_malloc_usable_size_r>
 800a76c:	4285      	cmp	r5, r0
 800a76e:	4606      	mov	r6, r0
 800a770:	d802      	bhi.n	800a778 <_realloc_r+0x34>
 800a772:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a776:	d8f4      	bhi.n	800a762 <_realloc_r+0x1e>
 800a778:	4629      	mov	r1, r5
 800a77a:	4640      	mov	r0, r8
 800a77c:	f7ff fb9a 	bl	8009eb4 <_malloc_r>
 800a780:	4607      	mov	r7, r0
 800a782:	2800      	cmp	r0, #0
 800a784:	d0ec      	beq.n	800a760 <_realloc_r+0x1c>
 800a786:	42b5      	cmp	r5, r6
 800a788:	462a      	mov	r2, r5
 800a78a:	4621      	mov	r1, r4
 800a78c:	bf28      	it	cs
 800a78e:	4632      	movcs	r2, r6
 800a790:	f7ff ffca 	bl	800a728 <memcpy>
 800a794:	4621      	mov	r1, r4
 800a796:	4640      	mov	r0, r8
 800a798:	f7ff fc7c 	bl	800a094 <_free_r>
 800a79c:	463c      	mov	r4, r7
 800a79e:	e7e0      	b.n	800a762 <_realloc_r+0x1e>

0800a7a0 <_malloc_usable_size_r>:
 800a7a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7a4:	1f18      	subs	r0, r3, #4
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	bfbc      	itt	lt
 800a7aa:	580b      	ldrlt	r3, [r1, r0]
 800a7ac:	18c0      	addlt	r0, r0, r3
 800a7ae:	4770      	bx	lr

0800a7b0 <_init>:
 800a7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7b2:	bf00      	nop
 800a7b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7b6:	bc08      	pop	{r3}
 800a7b8:	469e      	mov	lr, r3
 800a7ba:	4770      	bx	lr

0800a7bc <_fini>:
 800a7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7be:	bf00      	nop
 800a7c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7c2:	bc08      	pop	{r3}
 800a7c4:	469e      	mov	lr, r3
 800a7c6:	4770      	bx	lr
