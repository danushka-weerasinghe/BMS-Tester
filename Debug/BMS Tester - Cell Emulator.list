
BMS Tester - Cell Emulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008274  080001b0  080001b0  000011b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000150c  08008424  08008424  00009424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009930  08009930  0000b944  2**0
                  CONTENTS
  4 .ARM          00000008  08009930  08009930  0000a930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009938  08009938  0000b944  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009938  08009938  0000a938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800993c  0800993c  0000a93c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000944  20000000  08009940  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b944  2**0
                  CONTENTS
 10 .bss          0000119c  20000944  20000944  0000b944  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001ae0  20001ae0  0000b944  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b944  2**0
                  CONTENTS, READONLY
 13 .debug_info   00092bd5  00000000  00000000  0000b974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008f84  00000000  00000000  0009e549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0004cd76  00000000  00000000  000a74cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00004318  00000000  00000000  000f4248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000059fd  00000000  00000000  000f8560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a56f  00000000  00000000  000fdf5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000563ad  00000000  00000000  001284cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001010e0  00000000  00000000  0017e879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0027f959  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000e508  00000000  00000000  0027f99c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006c  00000000  00000000  0028dea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000944 	.word	0x20000944
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800840c 	.word	0x0800840c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000948 	.word	0x20000948
 80001ec:	0800840c 	.word	0x0800840c

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	@ 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2iz>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000994:	d215      	bcs.n	80009c2 <__aeabi_d2iz+0x36>
 8000996:	d511      	bpl.n	80009bc <__aeabi_d2iz+0x30>
 8000998:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a0:	d912      	bls.n	80009c8 <__aeabi_d2iz+0x3c>
 80009a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009b2:	fa23 f002 	lsr.w	r0, r3, r2
 80009b6:	bf18      	it	ne
 80009b8:	4240      	negne	r0, r0
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009c6:	d105      	bne.n	80009d4 <__aeabi_d2iz+0x48>
 80009c8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009cc:	bf08      	it	eq
 80009ce:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_d2f>:
 80009dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009e4:	bf24      	itt	cs
 80009e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009ee:	d90d      	bls.n	8000a0c <__aeabi_d2f+0x30>
 80009f0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009fc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a04:	bf08      	it	eq
 8000a06:	f020 0001 	biceq.w	r0, r0, #1
 8000a0a:	4770      	bx	lr
 8000a0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a10:	d121      	bne.n	8000a56 <__aeabi_d2f+0x7a>
 8000a12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a16:	bfbc      	itt	lt
 8000a18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a1c:	4770      	bxlt	lr
 8000a1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a26:	f1c2 0218 	rsb	r2, r2, #24
 8000a2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a32:	fa20 f002 	lsr.w	r0, r0, r2
 8000a36:	bf18      	it	ne
 8000a38:	f040 0001 	orrne.w	r0, r0, #1
 8000a3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a48:	ea40 000c 	orr.w	r0, r0, ip
 8000a4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a54:	e7cc      	b.n	80009f0 <__aeabi_d2f+0x14>
 8000a56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a5a:	d107      	bne.n	8000a6c <__aeabi_d2f+0x90>
 8000a5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a60:	bf1e      	ittt	ne
 8000a62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a6a:	4770      	bxne	lr
 8000a6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b96a 	b.w	8000d68 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	460c      	mov	r4, r1
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d14e      	bne.n	8000b56 <__udivmoddi4+0xaa>
 8000ab8:	4694      	mov	ip, r2
 8000aba:	458c      	cmp	ip, r1
 8000abc:	4686      	mov	lr, r0
 8000abe:	fab2 f282 	clz	r2, r2
 8000ac2:	d962      	bls.n	8000b8a <__udivmoddi4+0xde>
 8000ac4:	b14a      	cbz	r2, 8000ada <__udivmoddi4+0x2e>
 8000ac6:	f1c2 0320 	rsb	r3, r2, #32
 8000aca:	4091      	lsls	r1, r2
 8000acc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ad0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad4:	4319      	orrs	r1, r3
 8000ad6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ada:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ade:	fa1f f68c 	uxth.w	r6, ip
 8000ae2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ae6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aea:	fb07 1114 	mls	r1, r7, r4, r1
 8000aee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af2:	fb04 f106 	mul.w	r1, r4, r6
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x64>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b02:	f080 8112 	bcs.w	8000d2a <__udivmoddi4+0x27e>
 8000b06:	4299      	cmp	r1, r3
 8000b08:	f240 810f 	bls.w	8000d2a <__udivmoddi4+0x27e>
 8000b0c:	3c02      	subs	r4, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	1a59      	subs	r1, r3, r1
 8000b12:	fa1f f38e 	uxth.w	r3, lr
 8000b16:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b1a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b22:	fb00 f606 	mul.w	r6, r0, r6
 8000b26:	429e      	cmp	r6, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x94>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b32:	f080 80fc 	bcs.w	8000d2e <__udivmoddi4+0x282>
 8000b36:	429e      	cmp	r6, r3
 8000b38:	f240 80f9 	bls.w	8000d2e <__udivmoddi4+0x282>
 8000b3c:	4463      	add	r3, ip
 8000b3e:	3802      	subs	r0, #2
 8000b40:	1b9b      	subs	r3, r3, r6
 8000b42:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b46:	2100      	movs	r1, #0
 8000b48:	b11d      	cbz	r5, 8000b52 <__udivmoddi4+0xa6>
 8000b4a:	40d3      	lsrs	r3, r2
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d905      	bls.n	8000b66 <__udivmoddi4+0xba>
 8000b5a:	b10d      	cbz	r5, 8000b60 <__udivmoddi4+0xb4>
 8000b5c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b60:	2100      	movs	r1, #0
 8000b62:	4608      	mov	r0, r1
 8000b64:	e7f5      	b.n	8000b52 <__udivmoddi4+0xa6>
 8000b66:	fab3 f183 	clz	r1, r3
 8000b6a:	2900      	cmp	r1, #0
 8000b6c:	d146      	bne.n	8000bfc <__udivmoddi4+0x150>
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	d302      	bcc.n	8000b78 <__udivmoddi4+0xcc>
 8000b72:	4290      	cmp	r0, r2
 8000b74:	f0c0 80f0 	bcc.w	8000d58 <__udivmoddi4+0x2ac>
 8000b78:	1a86      	subs	r6, r0, r2
 8000b7a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b7e:	2001      	movs	r0, #1
 8000b80:	2d00      	cmp	r5, #0
 8000b82:	d0e6      	beq.n	8000b52 <__udivmoddi4+0xa6>
 8000b84:	e9c5 6300 	strd	r6, r3, [r5]
 8000b88:	e7e3      	b.n	8000b52 <__udivmoddi4+0xa6>
 8000b8a:	2a00      	cmp	r2, #0
 8000b8c:	f040 8090 	bne.w	8000cb0 <__udivmoddi4+0x204>
 8000b90:	eba1 040c 	sub.w	r4, r1, ip
 8000b94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b98:	fa1f f78c 	uxth.w	r7, ip
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ba2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ba6:	fb08 4416 	mls	r4, r8, r6, r4
 8000baa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bae:	fb07 f006 	mul.w	r0, r7, r6
 8000bb2:	4298      	cmp	r0, r3
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x11c>
 8000bb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bba:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x11a>
 8000bc0:	4298      	cmp	r0, r3
 8000bc2:	f200 80cd 	bhi.w	8000d60 <__udivmoddi4+0x2b4>
 8000bc6:	4626      	mov	r6, r4
 8000bc8:	1a1c      	subs	r4, r3, r0
 8000bca:	fa1f f38e 	uxth.w	r3, lr
 8000bce:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bd2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bda:	fb00 f707 	mul.w	r7, r0, r7
 8000bde:	429f      	cmp	r7, r3
 8000be0:	d908      	bls.n	8000bf4 <__udivmoddi4+0x148>
 8000be2:	eb1c 0303 	adds.w	r3, ip, r3
 8000be6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bea:	d202      	bcs.n	8000bf2 <__udivmoddi4+0x146>
 8000bec:	429f      	cmp	r7, r3
 8000bee:	f200 80b0 	bhi.w	8000d52 <__udivmoddi4+0x2a6>
 8000bf2:	4620      	mov	r0, r4
 8000bf4:	1bdb      	subs	r3, r3, r7
 8000bf6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bfa:	e7a5      	b.n	8000b48 <__udivmoddi4+0x9c>
 8000bfc:	f1c1 0620 	rsb	r6, r1, #32
 8000c00:	408b      	lsls	r3, r1
 8000c02:	fa22 f706 	lsr.w	r7, r2, r6
 8000c06:	431f      	orrs	r7, r3
 8000c08:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c0c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c10:	ea43 030c 	orr.w	r3, r3, ip
 8000c14:	40f4      	lsrs	r4, r6
 8000c16:	fa00 f801 	lsl.w	r8, r0, r1
 8000c1a:	0c38      	lsrs	r0, r7, #16
 8000c1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c20:	fbb4 fef0 	udiv	lr, r4, r0
 8000c24:	fa1f fc87 	uxth.w	ip, r7
 8000c28:	fb00 441e 	mls	r4, r0, lr, r4
 8000c2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c30:	fb0e f90c 	mul.w	r9, lr, ip
 8000c34:	45a1      	cmp	r9, r4
 8000c36:	fa02 f201 	lsl.w	r2, r2, r1
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x1a6>
 8000c3c:	193c      	adds	r4, r7, r4
 8000c3e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c42:	f080 8084 	bcs.w	8000d4e <__udivmoddi4+0x2a2>
 8000c46:	45a1      	cmp	r9, r4
 8000c48:	f240 8081 	bls.w	8000d4e <__udivmoddi4+0x2a2>
 8000c4c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c50:	443c      	add	r4, r7
 8000c52:	eba4 0409 	sub.w	r4, r4, r9
 8000c56:	fa1f f983 	uxth.w	r9, r3
 8000c5a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c5e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c62:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c66:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	d907      	bls.n	8000c7e <__udivmoddi4+0x1d2>
 8000c6e:	193c      	adds	r4, r7, r4
 8000c70:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c74:	d267      	bcs.n	8000d46 <__udivmoddi4+0x29a>
 8000c76:	45a4      	cmp	ip, r4
 8000c78:	d965      	bls.n	8000d46 <__udivmoddi4+0x29a>
 8000c7a:	3b02      	subs	r3, #2
 8000c7c:	443c      	add	r4, r7
 8000c7e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c82:	fba0 9302 	umull	r9, r3, r0, r2
 8000c86:	eba4 040c 	sub.w	r4, r4, ip
 8000c8a:	429c      	cmp	r4, r3
 8000c8c:	46ce      	mov	lr, r9
 8000c8e:	469c      	mov	ip, r3
 8000c90:	d351      	bcc.n	8000d36 <__udivmoddi4+0x28a>
 8000c92:	d04e      	beq.n	8000d32 <__udivmoddi4+0x286>
 8000c94:	b155      	cbz	r5, 8000cac <__udivmoddi4+0x200>
 8000c96:	ebb8 030e 	subs.w	r3, r8, lr
 8000c9a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c9e:	fa04 f606 	lsl.w	r6, r4, r6
 8000ca2:	40cb      	lsrs	r3, r1
 8000ca4:	431e      	orrs	r6, r3
 8000ca6:	40cc      	lsrs	r4, r1
 8000ca8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	e750      	b.n	8000b52 <__udivmoddi4+0xa6>
 8000cb0:	f1c2 0320 	rsb	r3, r2, #32
 8000cb4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cbc:	fa24 f303 	lsr.w	r3, r4, r3
 8000cc0:	4094      	lsls	r4, r2
 8000cc2:	430c      	orrs	r4, r1
 8000cc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ccc:	fa1f f78c 	uxth.w	r7, ip
 8000cd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cd8:	0c23      	lsrs	r3, r4, #16
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb00 f107 	mul.w	r1, r0, r7
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x24c>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cee:	d22c      	bcs.n	8000d4a <__udivmoddi4+0x29e>
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d92a      	bls.n	8000d4a <__udivmoddi4+0x29e>
 8000cf4:	3802      	subs	r0, #2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d00:	fb08 3311 	mls	r3, r8, r1, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb01 f307 	mul.w	r3, r1, r7
 8000d0c:	42a3      	cmp	r3, r4
 8000d0e:	d908      	bls.n	8000d22 <__udivmoddi4+0x276>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d18:	d213      	bcs.n	8000d42 <__udivmoddi4+0x296>
 8000d1a:	42a3      	cmp	r3, r4
 8000d1c:	d911      	bls.n	8000d42 <__udivmoddi4+0x296>
 8000d1e:	3902      	subs	r1, #2
 8000d20:	4464      	add	r4, ip
 8000d22:	1ae4      	subs	r4, r4, r3
 8000d24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d28:	e739      	b.n	8000b9e <__udivmoddi4+0xf2>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	e6f0      	b.n	8000b10 <__udivmoddi4+0x64>
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e706      	b.n	8000b40 <__udivmoddi4+0x94>
 8000d32:	45c8      	cmp	r8, r9
 8000d34:	d2ae      	bcs.n	8000c94 <__udivmoddi4+0x1e8>
 8000d36:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d3a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d3e:	3801      	subs	r0, #1
 8000d40:	e7a8      	b.n	8000c94 <__udivmoddi4+0x1e8>
 8000d42:	4631      	mov	r1, r6
 8000d44:	e7ed      	b.n	8000d22 <__udivmoddi4+0x276>
 8000d46:	4603      	mov	r3, r0
 8000d48:	e799      	b.n	8000c7e <__udivmoddi4+0x1d2>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	e7d4      	b.n	8000cf8 <__udivmoddi4+0x24c>
 8000d4e:	46d6      	mov	lr, sl
 8000d50:	e77f      	b.n	8000c52 <__udivmoddi4+0x1a6>
 8000d52:	4463      	add	r3, ip
 8000d54:	3802      	subs	r0, #2
 8000d56:	e74d      	b.n	8000bf4 <__udivmoddi4+0x148>
 8000d58:	4606      	mov	r6, r0
 8000d5a:	4623      	mov	r3, r4
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	e70f      	b.n	8000b80 <__udivmoddi4+0xd4>
 8000d60:	3e02      	subs	r6, #2
 8000d62:	4463      	add	r3, ip
 8000d64:	e730      	b.n	8000bc8 <__udivmoddi4+0x11c>
 8000d66:	bf00      	nop

08000d68 <__aeabi_idiv0>:
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop

08000d6c <LED_Init>:
};

GPIO_PinState cell_led_states[NUM_CELL_LEDS];

// Initialize all LEDs (set to OFF)
void LED_Init(void) {
 8000d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d6e:	4c19      	ldr	r4, [pc, #100]	@ (8000dd4 <LED_Init+0x68>)
 8000d70:	f104 0550 	add.w	r5, r4, #80	@ 0x50

    for (uint8_t i = 0; i < NUM_LEDS; i++) {
        HAL_GPIO_WritePin(leds[i].port, leds[i].pin, GPIO_PIN_RESET);
 8000d74:	88a1      	ldrh	r1, [r4, #4]
 8000d76:	f854 0b08 	ldr.w	r0, [r4], #8
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f004 ff14 	bl	8005ba8 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < NUM_LEDS; i++) {
 8000d80:	42ac      	cmp	r4, r5
 8000d82:	d1f7      	bne.n	8000d74 <LED_Init+0x8>
 8000d84:	4c14      	ldr	r4, [pc, #80]	@ (8000dd8 <LED_Init+0x6c>)
 8000d86:	f104 0520 	add.w	r5, r4, #32
    }

    for (uint8_t i = 0; i < NUM_COMM_LEDS; i++) {
        HAL_GPIO_WritePin(comm_leds[i].port, comm_leds[i].pin, GPIO_PIN_RESET);
 8000d8a:	88a1      	ldrh	r1, [r4, #4]
 8000d8c:	f854 0b08 	ldr.w	r0, [r4], #8
 8000d90:	2200      	movs	r2, #0
 8000d92:	f004 ff09 	bl	8005ba8 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < NUM_COMM_LEDS; i++) {
 8000d96:	42ac      	cmp	r4, r5
 8000d98:	d1f7      	bne.n	8000d8a <LED_Init+0x1e>
 8000d9a:	4c10      	ldr	r4, [pc, #64]	@ (8000ddc <LED_Init+0x70>)
 8000d9c:	f104 0530 	add.w	r5, r4, #48	@ 0x30
    }

    for (uint8_t i = 0; i < NUM_TEMP_LEDS; i++) {
        HAL_GPIO_WritePin(temp_leds[i].port, temp_leds[i].pin, GPIO_PIN_SET); // Active low
 8000da0:	88a1      	ldrh	r1, [r4, #4]
 8000da2:	f854 0b08 	ldr.w	r0, [r4], #8
 8000da6:	2201      	movs	r2, #1
 8000da8:	f004 fefe 	bl	8005ba8 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < NUM_TEMP_LEDS; i++) {
 8000dac:	42ac      	cmp	r4, r5
 8000dae:	d1f7      	bne.n	8000da0 <LED_Init+0x34>
 8000db0:	4d0b      	ldr	r5, [pc, #44]	@ (8000de0 <LED_Init+0x74>)
 8000db2:	4c0c      	ldr	r4, [pc, #48]	@ (8000de4 <LED_Init+0x78>)
 8000db4:	f105 0718 	add.w	r7, r5, #24
    }

    // Initialize cell LED states and set hardware LEDs to OFF
    for (uint8_t i = 0; i < NUM_CELL_LEDS; i++) {
        cell_led_states[i] = GPIO_PIN_SET; // Assume LEDs are off (active-low logic)
 8000db8:	2601      	movs	r6, #1
 8000dba:	f805 6f01 	strb.w	r6, [r5, #1]!
        I2C_HandleTypeDef *i2c_handle = cell_leds[i].i2c_handle;
        uint8_t expander_id = cell_leds[i].expander_id;
        uint16_t pin = cell_leds[i].pin;

        // Ensure LEDs are turned off at initialization
        Expander_SetPinState(i2c_handle, expander_id, pin, GPIO_PIN_SET); // Active low
 8000dbe:	88e2      	ldrh	r2, [r4, #6]
 8000dc0:	7921      	ldrb	r1, [r4, #4]
 8000dc2:	f854 0b08 	ldr.w	r0, [r4], #8
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	f001 fdda 	bl	8002980 <Expander_SetPinState>
    for (uint8_t i = 0; i < NUM_CELL_LEDS; i++) {
 8000dcc:	42bd      	cmp	r5, r7
 8000dce:	d1f4      	bne.n	8000dba <LED_Init+0x4e>
    }

}
 8000dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000110 	.word	0x20000110
 8000dd8:	200000f0 	.word	0x200000f0
 8000ddc:	200000c0 	.word	0x200000c0
 8000de0:	2000095f 	.word	0x2000095f
 8000de4:	20000000 	.word	0x20000000

08000de8 <Push_ButtonHandler>:

    return id;
}

void Push_ButtonHandler(uint16_t GPIO_Pin)
{
 8000de8:	b570      	push	{r4, r5, r6, lr}
    currentTime = HAL_GetTick();

    for(int j = 0; j < 4; j++) {
        if((GPIO_Pin == BUTTON_PINS[j]) && (currentTime - previousTime > 150)) {
 8000dea:	4d14      	ldr	r5, [pc, #80]	@ (8000e3c <Push_ButtonHandler+0x54>)
    currentTime = HAL_GetTick();
 8000dec:	4e14      	ldr	r6, [pc, #80]	@ (8000e40 <Push_ButtonHandler+0x58>)
{
 8000dee:	4604      	mov	r4, r0
    currentTime = HAL_GetTick();
 8000df0:	f004 fac0 	bl	8005374 <HAL_GetTick>
        if((GPIO_Pin == BUTTON_PINS[j]) && (currentTime - previousTime > 150)) {
 8000df4:	682b      	ldr	r3, [r5, #0]
    currentTime = HAL_GetTick();
 8000df6:	6030      	str	r0, [r6, #0]
        if((GPIO_Pin == BUTTON_PINS[j]) && (currentTime - previousTime > 150)) {
 8000df8:	1ac3      	subs	r3, r0, r3
 8000dfa:	2b96      	cmp	r3, #150	@ 0x96
 8000dfc:	d800      	bhi.n	8000e00 <Push_ButtonHandler+0x18>
            LED_Toggle(j+1);  // Keep your existing LED toggle
            previousTime = currentTime;
            break;
        }
    }
}
 8000dfe:	bd70      	pop	{r4, r5, r6, pc}
        if((GPIO_Pin == BUTTON_PINS[j]) && (currentTime - previousTime > 150)) {
 8000e00:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 8000e04:	d00a      	beq.n	8000e1c <Push_ButtonHandler+0x34>
 8000e06:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 8000e0a:	d015      	beq.n	8000e38 <Push_ButtonHandler+0x50>
 8000e0c:	f5b4 4f80 	cmp.w	r4, #16384	@ 0x4000
 8000e10:	d010      	beq.n	8000e34 <Push_ButtonHandler+0x4c>
 8000e12:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 8000e16:	d1f2      	bne.n	8000dfe <Push_ButtonHandler+0x16>
    for(int j = 0; j < 4; j++) {
 8000e18:	2303      	movs	r3, #3
 8000e1a:	e000      	b.n	8000e1e <Push_ButtonHandler+0x36>
 8000e1c:	2300      	movs	r3, #0
        HAL_GPIO_TogglePin(leds[led - 1].port, leds[led - 1].pin);
 8000e1e:	4a09      	ldr	r2, [pc, #36]	@ (8000e44 <Push_ButtonHandler+0x5c>)
 8000e20:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8000e24:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000e28:	8889      	ldrh	r1, [r1, #4]
 8000e2a:	f004 fec1 	bl	8005bb0 <HAL_GPIO_TogglePin>
            previousTime = currentTime;
 8000e2e:	6833      	ldr	r3, [r6, #0]
 8000e30:	602b      	str	r3, [r5, #0]
}
 8000e32:	bd70      	pop	{r4, r5, r6, pc}
    for(int j = 0; j < 4; j++) {
 8000e34:	2302      	movs	r3, #2
 8000e36:	e7f2      	b.n	8000e1e <Push_ButtonHandler+0x36>
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e7f0      	b.n	8000e1e <Push_ButtonHandler+0x36>
 8000e3c:	20000978 	.word	0x20000978
 8000e40:	2000097c 	.word	0x2000097c
 8000e44:	20000110 	.word	0x20000110

08000e48 <cell12_Temp_01_Set>:
		}
		return true;

	}

void cell12_Temp_01_Set(float resistance){
 8000e48:	b570      	push	{r4, r5, r6, lr}
 8000e4a:	ee10 0a10 	vmov	r0, s0
 8000e4e:	b084      	sub	sp, #16
	int res = (resistance/50.0)*1024;
 8000e50:	f7ff fb32 	bl	80004b8 <__aeabi_f2d>
 8000e54:	4b40      	ldr	r3, [pc, #256]	@ (8000f58 <cell12_Temp_01_Set+0x110>)
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
	assignBytes(resArray, resByteArray);
	HAL_GPIO_WritePin(CELL12_TEMP_01_LED_GPIO_Port, CELL12_TEMP_01_LED_Pin, GPIO_PIN_SET);
 8000e56:	4e41      	ldr	r6, [pc, #260]	@ (8000f5c <cell12_Temp_01_Set+0x114>)
	HAL_Delay(10);
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8000e58:	4c41      	ldr	r4, [pc, #260]	@ (8000f60 <cell12_Temp_01_Set+0x118>)
	HAL_Delay(10);
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 8000e5a:	4d42      	ldr	r5, [pc, #264]	@ (8000f64 <cell12_Temp_01_Set+0x11c>)
	int res = (resistance/50.0)*1024;
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f7ff fcad 	bl	80007bc <__aeabi_ddiv>
 8000e62:	4b41      	ldr	r3, [pc, #260]	@ (8000f68 <cell12_Temp_01_Set+0x120>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	f7ff fb7f 	bl	8000568 <__aeabi_dmul>
 8000e6a:	f7ff fd8f 	bl	800098c <__aeabi_d2iz>
	HAL_GPIO_WritePin(CELL12_TEMP_01_LED_GPIO_Port, CELL12_TEMP_01_LED_Pin, GPIO_PIN_SET);
 8000e6e:	2201      	movs	r2, #1
		        r[0] |= (resArray[i] << (7 - i));
 8000e70:	f3c0 2301 	ubfx	r3, r0, #8, #2
 8000e74:	f043 0304 	orr.w	r3, r3, #4
	HAL_GPIO_WritePin(CELL12_TEMP_01_LED_GPIO_Port, CELL12_TEMP_01_LED_Pin, GPIO_PIN_SET);
 8000e78:	4611      	mov	r1, r2
 8000e7a:	f88d 000d 	strb.w	r0, [sp, #13]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	f88d 300c 	strb.w	r3, [sp, #12]
 8000e84:	f004 fe90 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000e88:	200a      	movs	r0, #10
 8000e8a:	f004 fa79 	bl	8005380 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8000e8e:	2201      	movs	r2, #1
 8000e90:	2102      	movs	r1, #2
 8000e92:	4620      	mov	r0, r4
 8000e94:	f004 fe88 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000e98:	200a      	movs	r0, #10
 8000e9a:	f004 fa71 	bl	8005380 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 8000e9e:	4620      	mov	r0, r4
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2102      	movs	r1, #2
 8000ea4:	f004 fe80 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 8000ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8000eac:	492f      	ldr	r1, [pc, #188]	@ (8000f6c <cell12_Temp_01_Set+0x124>)
 8000eae:	2202      	movs	r2, #2
 8000eb0:	4628      	mov	r0, r5
 8000eb2:	f006 f891 	bl	8006fd8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	2102      	movs	r1, #2
 8000eba:	4620      	mov	r0, r4
 8000ebc:	f004 fe74 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000ec0:	200a      	movs	r0, #10
 8000ec2:	f004 fa5d 	bl	8005380 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 8000ec6:	4620      	mov	r0, r4
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2102      	movs	r1, #2
 8000ecc:	f004 fe6c 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 8000ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed4:	4926      	ldr	r1, [pc, #152]	@ (8000f70 <cell12_Temp_01_Set+0x128>)
 8000ed6:	2202      	movs	r2, #2
 8000ed8:	4628      	mov	r0, r5
 8000eda:	f006 f87d 	bl	8006fd8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	2102      	movs	r1, #2
 8000ee2:	4620      	mov	r0, r4
 8000ee4:	f004 fe60 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000ee8:	200a      	movs	r0, #10
 8000eea:	f004 fa49 	bl	8005380 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 8000eee:	4620      	mov	r0, r4
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2102      	movs	r1, #2
 8000ef4:	f004 fe58 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 8000ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8000efc:	a903      	add	r1, sp, #12
 8000efe:	2202      	movs	r2, #2
 8000f00:	4628      	mov	r0, r5
 8000f02:	f006 f869 	bl	8006fd8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8000f06:	2201      	movs	r2, #1
 8000f08:	2102      	movs	r1, #2
 8000f0a:	4620      	mov	r0, r4
 8000f0c:	f004 fe4c 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000f10:	200a      	movs	r0, #10
 8000f12:	f004 fa35 	bl	8005380 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 8000f16:	4620      	mov	r0, r4
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2102      	movs	r1, #2
 8000f1c:	f004 fe44 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 8000f20:	f04f 32ff 	mov.w	r2, #4294967295
 8000f24:	2302      	movs	r3, #2
 8000f26:	9200      	str	r2, [sp, #0]
 8000f28:	4912      	ldr	r1, [pc, #72]	@ (8000f74 <cell12_Temp_01_Set+0x12c>)
 8000f2a:	4a13      	ldr	r2, [pc, #76]	@ (8000f78 <cell12_Temp_01_Set+0x130>)
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	f006 f959 	bl	80071e4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8000f32:	2201      	movs	r2, #1
 8000f34:	2102      	movs	r1, #2
 8000f36:	4620      	mov	r0, r4
 8000f38:	f004 fe36 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000f3c:	200a      	movs	r0, #10
 8000f3e:	f004 fa1f 	bl	8005380 <HAL_Delay>
	HAL_GPIO_WritePin(CELL12_TEMP_01_LED_GPIO_Port, CELL12_TEMP_01_LED_Pin, GPIO_PIN_RESET);
 8000f42:	4630      	mov	r0, r6
 8000f44:	2200      	movs	r2, #0
 8000f46:	2101      	movs	r1, #1
 8000f48:	f004 fe2e 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000f4c:	200a      	movs	r0, #10
 8000f4e:	f004 fa17 	bl	8005380 <HAL_Delay>

}
 8000f52:	b004      	add	sp, #16
 8000f54:	bd70      	pop	{r4, r5, r6, pc}
 8000f56:	bf00      	nop
 8000f58:	40490000 	.word	0x40490000
 8000f5c:	40020000 	.word	0x40020000
 8000f60:	40020800 	.word	0x40020800
 8000f64:	20001448 	.word	0x20001448
 8000f68:	40900000 	.word	0x40900000
 8000f6c:	20000984 	.word	0x20000984
 8000f70:	20000164 	.word	0x20000164
 8000f74:	20000160 	.word	0x20000160
 8000f78:	20000980 	.word	0x20000980

08000f7c <cell12_Temp_02_Set>:

void cell12_Temp_02_Set(float resistance){
 8000f7c:	b570      	push	{r4, r5, r6, lr}
 8000f7e:	ee10 0a10 	vmov	r0, s0
 8000f82:	b084      	sub	sp, #16
	int res = (resistance/50.0)*1024;
 8000f84:	f7ff fa98 	bl	80004b8 <__aeabi_f2d>
 8000f88:	4b44      	ldr	r3, [pc, #272]	@ (800109c <cell12_Temp_02_Set+0x120>)
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
	assignBytes(resArray, resByteArray);
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_02_LED_Pin, GPIO_PIN_SET);
 8000f8a:	4e45      	ldr	r6, [pc, #276]	@ (80010a0 <cell12_Temp_02_Set+0x124>)
	HAL_Delay(10);
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8000f8c:	4c45      	ldr	r4, [pc, #276]	@ (80010a4 <cell12_Temp_02_Set+0x128>)
	HAL_Delay(10);
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 8000f8e:	4d46      	ldr	r5, [pc, #280]	@ (80010a8 <cell12_Temp_02_Set+0x12c>)
	int res = (resistance/50.0)*1024;
 8000f90:	2200      	movs	r2, #0
 8000f92:	f7ff fc13 	bl	80007bc <__aeabi_ddiv>
 8000f96:	4b45      	ldr	r3, [pc, #276]	@ (80010ac <cell12_Temp_02_Set+0x130>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f7ff fae5 	bl	8000568 <__aeabi_dmul>
 8000f9e:	f7ff fcf5 	bl	800098c <__aeabi_d2iz>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_02_LED_Pin, GPIO_PIN_SET);
 8000fa2:	2201      	movs	r2, #1
		        r[0] |= (resArray[i] << (7 - i));
 8000fa4:	f3c0 2301 	ubfx	r3, r0, #8, #2
 8000fa8:	f043 0304 	orr.w	r3, r3, #4
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_02_LED_Pin, GPIO_PIN_SET);
 8000fac:	4611      	mov	r1, r2
 8000fae:	f88d 000d 	strb.w	r0, [sp, #13]
 8000fb2:	4630      	mov	r0, r6
 8000fb4:	f88d 300c 	strb.w	r3, [sp, #12]
 8000fb8:	f004 fdf6 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000fbc:	200a      	movs	r0, #10
 8000fbe:	f004 f9df 	bl	8005380 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fc8:	4620      	mov	r0, r4
 8000fca:	f004 fded 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000fce:	200a      	movs	r0, #10
 8000fd0:	f004 f9d6 	bl	8005380 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 8000fd4:	4620      	mov	r0, r4
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fdc:	f004 fde4 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 8000fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe4:	4932      	ldr	r1, [pc, #200]	@ (80010b0 <cell12_Temp_02_Set+0x134>)
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	4628      	mov	r0, r5
 8000fea:	f005 fff5 	bl	8006fd8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ff4:	4620      	mov	r0, r4
 8000ff6:	f004 fdd7 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000ffa:	200a      	movs	r0, #10
 8000ffc:	f004 f9c0 	bl	8005380 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 8001000:	4620      	mov	r0, r4
 8001002:	2200      	movs	r2, #0
 8001004:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001008:	f004 fdce 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 800100c:	f04f 33ff 	mov.w	r3, #4294967295
 8001010:	4928      	ldr	r1, [pc, #160]	@ (80010b4 <cell12_Temp_02_Set+0x138>)
 8001012:	2202      	movs	r2, #2
 8001014:	4628      	mov	r0, r5
 8001016:	f005 ffdf 	bl	8006fd8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 800101a:	2201      	movs	r2, #1
 800101c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001020:	4620      	mov	r0, r4
 8001022:	f004 fdc1 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001026:	200a      	movs	r0, #10
 8001028:	f004 f9aa 	bl	8005380 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 800102c:	4620      	mov	r0, r4
 800102e:	2200      	movs	r2, #0
 8001030:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001034:	f004 fdb8 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 8001038:	f04f 33ff 	mov.w	r3, #4294967295
 800103c:	a903      	add	r1, sp, #12
 800103e:	2202      	movs	r2, #2
 8001040:	4628      	mov	r0, r5
 8001042:	f005 ffc9 	bl	8006fd8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8001046:	2201      	movs	r2, #1
 8001048:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800104c:	4620      	mov	r0, r4
 800104e:	f004 fdab 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001052:	200a      	movs	r0, #10
 8001054:	f004 f994 	bl	8005380 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 8001058:	4620      	mov	r0, r4
 800105a:	2200      	movs	r2, #0
 800105c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001060:	f004 fda2 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 8001064:	f04f 32ff 	mov.w	r2, #4294967295
 8001068:	2302      	movs	r3, #2
 800106a:	9200      	str	r2, [sp, #0]
 800106c:	4912      	ldr	r1, [pc, #72]	@ (80010b8 <cell12_Temp_02_Set+0x13c>)
 800106e:	4a13      	ldr	r2, [pc, #76]	@ (80010bc <cell12_Temp_02_Set+0x140>)
 8001070:	4628      	mov	r0, r5
 8001072:	f006 f8b7 	bl	80071e4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_02_CS_Pin, GPIO_PIN_SET);
 8001076:	2201      	movs	r2, #1
 8001078:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800107c:	4620      	mov	r0, r4
 800107e:	f004 fd93 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001082:	200a      	movs	r0, #10
 8001084:	f004 f97c 	bl	8005380 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, CELL12_TEMP_02_LED_Pin, GPIO_PIN_RESET);
 8001088:	4630      	mov	r0, r6
 800108a:	2200      	movs	r2, #0
 800108c:	2101      	movs	r1, #1
 800108e:	f004 fd8b 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001092:	200a      	movs	r0, #10
 8001094:	f004 f974 	bl	8005380 <HAL_Delay>

}
 8001098:	b004      	add	sp, #16
 800109a:	bd70      	pop	{r4, r5, r6, pc}
 800109c:	40490000 	.word	0x40490000
 80010a0:	40020800 	.word	0x40020800
 80010a4:	40021400 	.word	0x40021400
 80010a8:	20001448 	.word	0x20001448
 80010ac:	40900000 	.word	0x40900000
 80010b0:	20000984 	.word	0x20000984
 80010b4:	20000164 	.word	0x20000164
 80010b8:	20000160 	.word	0x20000160
 80010bc:	20000980 	.word	0x20000980

080010c0 <cell12_Temp_03_Set>:

void cell12_Temp_03_Set(float resistance){
 80010c0:	b530      	push	{r4, r5, lr}
 80010c2:	ee10 0a10 	vmov	r0, s0
 80010c6:	b085      	sub	sp, #20
	int res = (resistance/50.0)*1024;
 80010c8:	f7ff f9f6 	bl	80004b8 <__aeabi_f2d>
 80010cc:	4b40      	ldr	r3, [pc, #256]	@ (80011d0 <cell12_Temp_03_Set+0x110>)
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
	assignBytes(resArray, resByteArray);
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_LED_Pin, GPIO_PIN_SET);
 80010ce:	4c41      	ldr	r4, [pc, #260]	@ (80011d4 <cell12_Temp_03_Set+0x114>)
	HAL_Delay(10);
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
	HAL_Delay(10);
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 80010d0:	4d41      	ldr	r5, [pc, #260]	@ (80011d8 <cell12_Temp_03_Set+0x118>)
	int res = (resistance/50.0)*1024;
 80010d2:	2200      	movs	r2, #0
 80010d4:	f7ff fb72 	bl	80007bc <__aeabi_ddiv>
 80010d8:	4b40      	ldr	r3, [pc, #256]	@ (80011dc <cell12_Temp_03_Set+0x11c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	f7ff fa44 	bl	8000568 <__aeabi_dmul>
 80010e0:	f7ff fc54 	bl	800098c <__aeabi_d2iz>
		        r[0] |= (resArray[i] << (7 - i));
 80010e4:	f3c0 2301 	ubfx	r3, r0, #8, #2
 80010e8:	f043 0304 	orr.w	r3, r3, #4
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_LED_Pin, GPIO_PIN_SET);
 80010ec:	2201      	movs	r2, #1
 80010ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010f2:	f88d 000d 	strb.w	r0, [sp, #13]
 80010f6:	4620      	mov	r0, r4
 80010f8:	f88d 300c 	strb.w	r3, [sp, #12]
 80010fc:	f004 fd54 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001100:	200a      	movs	r0, #10
 8001102:	f004 f93d 	bl	8005380 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001106:	2201      	movs	r2, #1
 8001108:	2140      	movs	r1, #64	@ 0x40
 800110a:	4620      	mov	r0, r4
 800110c:	f004 fd4c 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001110:	200a      	movs	r0, #10
 8001112:	f004 f935 	bl	8005380 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8001116:	4620      	mov	r0, r4
 8001118:	2200      	movs	r2, #0
 800111a:	2140      	movs	r1, #64	@ 0x40
 800111c:	f004 fd44 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 8001120:	f04f 33ff 	mov.w	r3, #4294967295
 8001124:	492e      	ldr	r1, [pc, #184]	@ (80011e0 <cell12_Temp_03_Set+0x120>)
 8001126:	2202      	movs	r2, #2
 8001128:	4628      	mov	r0, r5
 800112a:	f005 ff55 	bl	8006fd8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 800112e:	2201      	movs	r2, #1
 8001130:	2140      	movs	r1, #64	@ 0x40
 8001132:	4620      	mov	r0, r4
 8001134:	f004 fd38 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001138:	200a      	movs	r0, #10
 800113a:	f004 f921 	bl	8005380 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 800113e:	4620      	mov	r0, r4
 8001140:	2200      	movs	r2, #0
 8001142:	2140      	movs	r1, #64	@ 0x40
 8001144:	f004 fd30 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 8001148:	f04f 33ff 	mov.w	r3, #4294967295
 800114c:	4925      	ldr	r1, [pc, #148]	@ (80011e4 <cell12_Temp_03_Set+0x124>)
 800114e:	2202      	movs	r2, #2
 8001150:	4628      	mov	r0, r5
 8001152:	f005 ff41 	bl	8006fd8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001156:	2201      	movs	r2, #1
 8001158:	2140      	movs	r1, #64	@ 0x40
 800115a:	4620      	mov	r0, r4
 800115c:	f004 fd24 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001160:	200a      	movs	r0, #10
 8001162:	f004 f90d 	bl	8005380 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8001166:	4620      	mov	r0, r4
 8001168:	2200      	movs	r2, #0
 800116a:	2140      	movs	r1, #64	@ 0x40
 800116c:	f004 fd1c 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 8001170:	f04f 33ff 	mov.w	r3, #4294967295
 8001174:	a903      	add	r1, sp, #12
 8001176:	2202      	movs	r2, #2
 8001178:	4628      	mov	r0, r5
 800117a:	f005 ff2d 	bl	8006fd8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 800117e:	2201      	movs	r2, #1
 8001180:	2140      	movs	r1, #64	@ 0x40
 8001182:	4620      	mov	r0, r4
 8001184:	f004 fd10 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001188:	200a      	movs	r0, #10
 800118a:	f004 f8f9 	bl	8005380 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 800118e:	4620      	mov	r0, r4
 8001190:	2200      	movs	r2, #0
 8001192:	2140      	movs	r1, #64	@ 0x40
 8001194:	f004 fd08 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 8001198:	f04f 31ff 	mov.w	r1, #4294967295
 800119c:	2302      	movs	r3, #2
 800119e:	9100      	str	r1, [sp, #0]
 80011a0:	4a11      	ldr	r2, [pc, #68]	@ (80011e8 <cell12_Temp_03_Set+0x128>)
 80011a2:	4912      	ldr	r1, [pc, #72]	@ (80011ec <cell12_Temp_03_Set+0x12c>)
 80011a4:	4628      	mov	r0, r5
 80011a6:	f006 f81d 	bl	80071e4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_CS_Pin, GPIO_PIN_SET);
 80011aa:	2201      	movs	r2, #1
 80011ac:	2140      	movs	r1, #64	@ 0x40
 80011ae:	4620      	mov	r0, r4
 80011b0:	f004 fcfa 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80011b4:	200a      	movs	r0, #10
 80011b6:	f004 f8e3 	bl	8005380 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, CELL12_TEMP_03_LED_Pin, GPIO_PIN_RESET);
 80011ba:	4620      	mov	r0, r4
 80011bc:	2200      	movs	r2, #0
 80011be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011c2:	f004 fcf1 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80011c6:	200a      	movs	r0, #10
 80011c8:	f004 f8da 	bl	8005380 <HAL_Delay>

}
 80011cc:	b005      	add	sp, #20
 80011ce:	bd30      	pop	{r4, r5, pc}
 80011d0:	40490000 	.word	0x40490000
 80011d4:	40021400 	.word	0x40021400
 80011d8:	20001448 	.word	0x20001448
 80011dc:	40900000 	.word	0x40900000
 80011e0:	20000984 	.word	0x20000984
 80011e4:	20000164 	.word	0x20000164
 80011e8:	20000980 	.word	0x20000980
 80011ec:	20000160 	.word	0x20000160

080011f0 <cell11_Temp_01_Set>:

void cell11_Temp_01_Set(float resistance){
 80011f0:	b530      	push	{r4, r5, lr}
 80011f2:	ee10 0a10 	vmov	r0, s0
 80011f6:	b085      	sub	sp, #20
	int res = (resistance/50.0)*1024;
 80011f8:	f7ff f95e 	bl	80004b8 <__aeabi_f2d>
 80011fc:	4b45      	ldr	r3, [pc, #276]	@ (8001314 <cell11_Temp_01_Set+0x124>)
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
	assignBytes(resArray, resByteArray);
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_LED_Pin, GPIO_PIN_SET);
 80011fe:	4c46      	ldr	r4, [pc, #280]	@ (8001318 <cell11_Temp_01_Set+0x128>)
	HAL_Delay(10);
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
	HAL_Delay(10);
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 8001200:	4d46      	ldr	r5, [pc, #280]	@ (800131c <cell11_Temp_01_Set+0x12c>)
	int res = (resistance/50.0)*1024;
 8001202:	2200      	movs	r2, #0
 8001204:	f7ff fada 	bl	80007bc <__aeabi_ddiv>
 8001208:	4b45      	ldr	r3, [pc, #276]	@ (8001320 <cell11_Temp_01_Set+0x130>)
 800120a:	2200      	movs	r2, #0
 800120c:	f7ff f9ac 	bl	8000568 <__aeabi_dmul>
 8001210:	f7ff fbbc 	bl	800098c <__aeabi_d2iz>
		        r[0] |= (resArray[i] << (7 - i));
 8001214:	f3c0 2301 	ubfx	r3, r0, #8, #2
 8001218:	f043 0304 	orr.w	r3, r3, #4
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_LED_Pin, GPIO_PIN_SET);
 800121c:	2201      	movs	r2, #1
 800121e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001222:	f88d 000d 	strb.w	r0, [sp, #13]
 8001226:	4620      	mov	r0, r4
 8001228:	f88d 300c 	strb.w	r3, [sp, #12]
 800122c:	f004 fcbc 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001230:	200a      	movs	r0, #10
 8001232:	f004 f8a5 	bl	8005380 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8001236:	2201      	movs	r2, #1
 8001238:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800123c:	4620      	mov	r0, r4
 800123e:	f004 fcb3 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001242:	200a      	movs	r0, #10
 8001244:	f004 f89c 	bl	8005380 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 8001248:	4620      	mov	r0, r4
 800124a:	2200      	movs	r2, #0
 800124c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001250:	f004 fcaa 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 8001254:	f04f 33ff 	mov.w	r3, #4294967295
 8001258:	4932      	ldr	r1, [pc, #200]	@ (8001324 <cell11_Temp_01_Set+0x134>)
 800125a:	2202      	movs	r2, #2
 800125c:	4628      	mov	r0, r5
 800125e:	f005 febb 	bl	8006fd8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 8001262:	2201      	movs	r2, #1
 8001264:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001268:	4620      	mov	r0, r4
 800126a:	f004 fc9d 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800126e:	200a      	movs	r0, #10
 8001270:	f004 f886 	bl	8005380 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 8001274:	4620      	mov	r0, r4
 8001276:	2200      	movs	r2, #0
 8001278:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800127c:	f004 fc94 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 8001280:	f04f 33ff 	mov.w	r3, #4294967295
 8001284:	4928      	ldr	r1, [pc, #160]	@ (8001328 <cell11_Temp_01_Set+0x138>)
 8001286:	2202      	movs	r2, #2
 8001288:	4628      	mov	r0, r5
 800128a:	f005 fea5 	bl	8006fd8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 800128e:	2201      	movs	r2, #1
 8001290:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001294:	4620      	mov	r0, r4
 8001296:	f004 fc87 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800129a:	200a      	movs	r0, #10
 800129c:	f004 f870 	bl	8005380 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 80012a0:	4620      	mov	r0, r4
 80012a2:	2200      	movs	r2, #0
 80012a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012a8:	f004 fc7e 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 80012ac:	f04f 33ff 	mov.w	r3, #4294967295
 80012b0:	a903      	add	r1, sp, #12
 80012b2:	2202      	movs	r2, #2
 80012b4:	4628      	mov	r0, r5
 80012b6:	f005 fe8f 	bl	8006fd8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 80012ba:	2201      	movs	r2, #1
 80012bc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012c0:	4620      	mov	r0, r4
 80012c2:	f004 fc71 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80012c6:	200a      	movs	r0, #10
 80012c8:	f004 f85a 	bl	8005380 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_RESET);
 80012cc:	4620      	mov	r0, r4
 80012ce:	2200      	movs	r2, #0
 80012d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012d4:	f004 fc68 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 80012d8:	f04f 31ff 	mov.w	r1, #4294967295
 80012dc:	2302      	movs	r3, #2
 80012de:	9100      	str	r1, [sp, #0]
 80012e0:	4a12      	ldr	r2, [pc, #72]	@ (800132c <cell11_Temp_01_Set+0x13c>)
 80012e2:	4913      	ldr	r1, [pc, #76]	@ (8001330 <cell11_Temp_01_Set+0x140>)
 80012e4:	4628      	mov	r0, r5
 80012e6:	f005 ff7d 	bl	80071e4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_CS_Pin, GPIO_PIN_SET);
 80012ea:	2201      	movs	r2, #1
 80012ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012f0:	4620      	mov	r0, r4
 80012f2:	f004 fc59 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80012f6:	200a      	movs	r0, #10
 80012f8:	f004 f842 	bl	8005380 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_01_LED_Pin, GPIO_PIN_RESET);
 80012fc:	4620      	mov	r0, r4
 80012fe:	2200      	movs	r2, #0
 8001300:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001304:	f004 fc50 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001308:	200a      	movs	r0, #10
 800130a:	f004 f839 	bl	8005380 <HAL_Delay>

}
 800130e:	b005      	add	sp, #20
 8001310:	bd30      	pop	{r4, r5, pc}
 8001312:	bf00      	nop
 8001314:	40490000 	.word	0x40490000
 8001318:	40021c00 	.word	0x40021c00
 800131c:	200013f0 	.word	0x200013f0
 8001320:	40900000 	.word	0x40900000
 8001324:	20000984 	.word	0x20000984
 8001328:	20000164 	.word	0x20000164
 800132c:	20000980 	.word	0x20000980
 8001330:	20000160 	.word	0x20000160

08001334 <cell11_Temp_02_Set>:

void cell11_Temp_02_Set(float resistance){
 8001334:	b530      	push	{r4, r5, lr}
 8001336:	ee10 0a10 	vmov	r0, s0
 800133a:	b085      	sub	sp, #20
	int res = (resistance/50.0)*1024;
 800133c:	f7ff f8bc 	bl	80004b8 <__aeabi_f2d>
 8001340:	4b45      	ldr	r3, [pc, #276]	@ (8001458 <cell11_Temp_02_Set+0x124>)
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
	assignBytes(resArray, resByteArray);
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_LED_Pin, GPIO_PIN_SET);
 8001342:	4c46      	ldr	r4, [pc, #280]	@ (800145c <cell11_Temp_02_Set+0x128>)
	HAL_Delay(10);
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
	HAL_Delay(10);
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 8001344:	4d46      	ldr	r5, [pc, #280]	@ (8001460 <cell11_Temp_02_Set+0x12c>)
	int res = (resistance/50.0)*1024;
 8001346:	2200      	movs	r2, #0
 8001348:	f7ff fa38 	bl	80007bc <__aeabi_ddiv>
 800134c:	4b45      	ldr	r3, [pc, #276]	@ (8001464 <cell11_Temp_02_Set+0x130>)
 800134e:	2200      	movs	r2, #0
 8001350:	f7ff f90a 	bl	8000568 <__aeabi_dmul>
 8001354:	f7ff fb1a 	bl	800098c <__aeabi_d2iz>
		        r[0] |= (resArray[i] << (7 - i));
 8001358:	f3c0 2301 	ubfx	r3, r0, #8, #2
 800135c:	f043 0304 	orr.w	r3, r3, #4
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_LED_Pin, GPIO_PIN_SET);
 8001360:	2201      	movs	r2, #1
 8001362:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001366:	f88d 000d 	strb.w	r0, [sp, #13]
 800136a:	4620      	mov	r0, r4
 800136c:	f88d 300c 	strb.w	r3, [sp, #12]
 8001370:	f004 fc1a 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001374:	200a      	movs	r0, #10
 8001376:	f004 f803 	bl	8005380 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 800137a:	2201      	movs	r2, #1
 800137c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001380:	4620      	mov	r0, r4
 8001382:	f004 fc11 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001386:	200a      	movs	r0, #10
 8001388:	f003 fffa 	bl	8005380 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 800138c:	4620      	mov	r0, r4
 800138e:	2200      	movs	r2, #0
 8001390:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001394:	f004 fc08 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 8001398:	f04f 33ff 	mov.w	r3, #4294967295
 800139c:	4932      	ldr	r1, [pc, #200]	@ (8001468 <cell11_Temp_02_Set+0x134>)
 800139e:	2202      	movs	r2, #2
 80013a0:	4628      	mov	r0, r5
 80013a2:	f005 fe19 	bl	8006fd8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 80013a6:	2201      	movs	r2, #1
 80013a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013ac:	4620      	mov	r0, r4
 80013ae:	f004 fbfb 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80013b2:	200a      	movs	r0, #10
 80013b4:	f003 ffe4 	bl	8005380 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 80013b8:	4620      	mov	r0, r4
 80013ba:	2200      	movs	r2, #0
 80013bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013c0:	f004 fbf2 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 80013c4:	f04f 33ff 	mov.w	r3, #4294967295
 80013c8:	4928      	ldr	r1, [pc, #160]	@ (800146c <cell11_Temp_02_Set+0x138>)
 80013ca:	2202      	movs	r2, #2
 80013cc:	4628      	mov	r0, r5
 80013ce:	f005 fe03 	bl	8006fd8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 80013d2:	2201      	movs	r2, #1
 80013d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013d8:	4620      	mov	r0, r4
 80013da:	f004 fbe5 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80013de:	200a      	movs	r0, #10
 80013e0:	f003 ffce 	bl	8005380 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 80013e4:	4620      	mov	r0, r4
 80013e6:	2200      	movs	r2, #0
 80013e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013ec:	f004 fbdc 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 80013f0:	f04f 33ff 	mov.w	r3, #4294967295
 80013f4:	a903      	add	r1, sp, #12
 80013f6:	2202      	movs	r2, #2
 80013f8:	4628      	mov	r0, r5
 80013fa:	f005 fded 	bl	8006fd8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 80013fe:	2201      	movs	r2, #1
 8001400:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001404:	4620      	mov	r0, r4
 8001406:	f004 fbcf 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800140a:	200a      	movs	r0, #10
 800140c:	f003 ffb8 	bl	8005380 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_RESET);
 8001410:	4620      	mov	r0, r4
 8001412:	2200      	movs	r2, #0
 8001414:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001418:	f004 fbc6 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 800141c:	f04f 31ff 	mov.w	r1, #4294967295
 8001420:	2302      	movs	r3, #2
 8001422:	9100      	str	r1, [sp, #0]
 8001424:	4a12      	ldr	r2, [pc, #72]	@ (8001470 <cell11_Temp_02_Set+0x13c>)
 8001426:	4913      	ldr	r1, [pc, #76]	@ (8001474 <cell11_Temp_02_Set+0x140>)
 8001428:	4628      	mov	r0, r5
 800142a:	f005 fedb 	bl	80071e4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_CS_Pin, GPIO_PIN_SET);
 800142e:	2201      	movs	r2, #1
 8001430:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001434:	4620      	mov	r0, r4
 8001436:	f004 fbb7 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800143a:	200a      	movs	r0, #10
 800143c:	f003 ffa0 	bl	8005380 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_02_LED_Pin, GPIO_PIN_RESET);
 8001440:	4620      	mov	r0, r4
 8001442:	2200      	movs	r2, #0
 8001444:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001448:	f004 fbae 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800144c:	200a      	movs	r0, #10
 800144e:	f003 ff97 	bl	8005380 <HAL_Delay>

}
 8001452:	b005      	add	sp, #20
 8001454:	bd30      	pop	{r4, r5, pc}
 8001456:	bf00      	nop
 8001458:	40490000 	.word	0x40490000
 800145c:	40021c00 	.word	0x40021c00
 8001460:	200013f0 	.word	0x200013f0
 8001464:	40900000 	.word	0x40900000
 8001468:	20000984 	.word	0x20000984
 800146c:	20000164 	.word	0x20000164
 8001470:	20000980 	.word	0x20000980
 8001474:	20000160 	.word	0x20000160

08001478 <cell11_Temp_03_Set>:

void cell11_Temp_03_Set(float resistance){
 8001478:	b570      	push	{r4, r5, r6, lr}
 800147a:	ee10 0a10 	vmov	r0, s0
 800147e:	b084      	sub	sp, #16
	int res = (resistance/50.0)*1024;
 8001480:	f7ff f81a 	bl	80004b8 <__aeabi_f2d>
 8001484:	4b44      	ldr	r3, [pc, #272]	@ (8001598 <cell11_Temp_03_Set+0x120>)
	int resArray [16]= {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0};
	uint8_t resByteArray [2];
	intToBinary(res, resArray);
	assignBytes(resArray, resByteArray);
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_03_LED_Pin, GPIO_PIN_SET);
 8001486:	4e45      	ldr	r6, [pc, #276]	@ (800159c <cell11_Temp_03_Set+0x124>)
	HAL_Delay(10);
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001488:	4c45      	ldr	r4, [pc, #276]	@ (80015a0 <cell11_Temp_03_Set+0x128>)
	HAL_Delay(10);
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 800148a:	4d46      	ldr	r5, [pc, #280]	@ (80015a4 <cell11_Temp_03_Set+0x12c>)
	int res = (resistance/50.0)*1024;
 800148c:	2200      	movs	r2, #0
 800148e:	f7ff f995 	bl	80007bc <__aeabi_ddiv>
 8001492:	4b45      	ldr	r3, [pc, #276]	@ (80015a8 <cell11_Temp_03_Set+0x130>)
 8001494:	2200      	movs	r2, #0
 8001496:	f7ff f867 	bl	8000568 <__aeabi_dmul>
 800149a:	f7ff fa77 	bl	800098c <__aeabi_d2iz>
		        r[0] |= (resArray[i] << (7 - i));
 800149e:	f3c0 2301 	ubfx	r3, r0, #8, #2
 80014a2:	f043 0304 	orr.w	r3, r3, #4
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_03_LED_Pin, GPIO_PIN_SET);
 80014a6:	2201      	movs	r2, #1
 80014a8:	2140      	movs	r1, #64	@ 0x40
 80014aa:	f88d 000d 	strb.w	r0, [sp, #13]
 80014ae:	4630      	mov	r0, r6
 80014b0:	f88d 300c 	strb.w	r3, [sp, #12]
 80014b4:	f004 fb78 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80014b8:	200a      	movs	r0, #10
 80014ba:	f003 ff61 	bl	8005380 <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 80014be:	2201      	movs	r2, #1
 80014c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014c4:	4620      	mov	r0, r4
 80014c6:	f004 fb6f 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80014ca:	200a      	movs	r0, #10
 80014cc:	f003 ff58 	bl	8005380 <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 80014d0:	4620      	mov	r0, r4
 80014d2:	2200      	movs	r2, #0
 80014d4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014d8:	f004 fb66 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&nopCommand, 2, HAL_MAX_DELAY);
 80014dc:	f04f 33ff 	mov.w	r3, #4294967295
 80014e0:	4932      	ldr	r1, [pc, #200]	@ (80015ac <cell11_Temp_03_Set+0x134>)
 80014e2:	2202      	movs	r2, #2
 80014e4:	4628      	mov	r0, r5
 80014e6:	f005 fd77 	bl	8006fd8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 80014ea:	2201      	movs	r2, #1
 80014ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014f0:	4620      	mov	r0, r4
 80014f2:	f004 fb59 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80014f6:	200a      	movs	r0, #10
 80014f8:	f003 ff42 	bl	8005380 <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 80014fc:	4620      	mov	r0, r4
 80014fe:	2200      	movs	r2, #0
 8001500:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001504:	f004 fb50 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&controlArray, 2, HAL_MAX_DELAY);
 8001508:	f04f 33ff 	mov.w	r3, #4294967295
 800150c:	4928      	ldr	r1, [pc, #160]	@ (80015b0 <cell11_Temp_03_Set+0x138>)
 800150e:	2202      	movs	r2, #2
 8001510:	4628      	mov	r0, r5
 8001512:	f005 fd61 	bl	8006fd8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001516:	2201      	movs	r2, #1
 8001518:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800151c:	4620      	mov	r0, r4
 800151e:	f004 fb43 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001522:	200a      	movs	r0, #10
 8001524:	f003 ff2c 	bl	8005380 <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8001528:	4620      	mov	r0, r4
 800152a:	2200      	movs	r2, #0
 800152c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001530:	f004 fb3a 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&resByteArray, 2, HAL_MAX_DELAY);
 8001534:	f04f 33ff 	mov.w	r3, #4294967295
 8001538:	a903      	add	r1, sp, #12
 800153a:	2202      	movs	r2, #2
 800153c:	4628      	mov	r0, r5
 800153e:	f005 fd4b 	bl	8006fd8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001542:	2201      	movs	r2, #1
 8001544:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001548:	4620      	mov	r0, r4
 800154a:	f004 fb2d 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800154e:	200a      	movs	r0, #10
 8001550:	f003 ff16 	bl	8005380 <HAL_Delay>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_RESET);
 8001554:	4620      	mov	r0, r4
 8001556:	2200      	movs	r2, #0
 8001558:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800155c:	f004 fb24 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&dataRead, (uint8_t*)&misoCell12Res1, 2, HAL_MAX_DELAY);
 8001560:	f04f 32ff 	mov.w	r2, #4294967295
 8001564:	2302      	movs	r3, #2
 8001566:	9200      	str	r2, [sp, #0]
 8001568:	4912      	ldr	r1, [pc, #72]	@ (80015b4 <cell11_Temp_03_Set+0x13c>)
 800156a:	4a13      	ldr	r2, [pc, #76]	@ (80015b8 <cell11_Temp_03_Set+0x140>)
 800156c:	4628      	mov	r0, r5
 800156e:	f005 fe39 	bl	80071e4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CELL11_TEMP_03_CS_GPIO_Port, CELL11_TEMP_03_CS_Pin, GPIO_PIN_SET);
 8001572:	2201      	movs	r2, #1
 8001574:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001578:	4620      	mov	r0, r4
 800157a:	f004 fb15 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800157e:	200a      	movs	r0, #10
 8001580:	f003 fefe 	bl	8005380 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_03_LED_Pin, GPIO_PIN_RESET);
 8001584:	4630      	mov	r0, r6
 8001586:	2200      	movs	r2, #0
 8001588:	2140      	movs	r1, #64	@ 0x40
 800158a:	f004 fb0d 	bl	8005ba8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800158e:	200a      	movs	r0, #10
 8001590:	f003 fef6 	bl	8005380 <HAL_Delay>

}
 8001594:	b004      	add	sp, #16
 8001596:	bd70      	pop	{r4, r5, r6, pc}
 8001598:	40490000 	.word	0x40490000
 800159c:	40021c00 	.word	0x40021c00
 80015a0:	40020400 	.word	0x40020400
 80015a4:	200013f0 	.word	0x200013f0
 80015a8:	40900000 	.word	0x40900000
 80015ac:	20000984 	.word	0x20000984
 80015b0:	20000164 	.word	0x20000164
 80015b4:	20000160 	.word	0x20000160
 80015b8:	20000980 	.word	0x20000980

080015bc <Set_Resistance>:
	HAL_Delay(10);

}


void Set_Resistance(uint8_t tempCardId,uint8_t temperature){
 80015bc:	b500      	push	{lr}
 80015be:	ed2d 8b02 	vpush	{d8}
 80015c2:	b083      	sub	sp, #12
	switch (tempCardId){
 80015c4:	3801      	subs	r0, #1
void Set_Resistance(uint8_t tempCardId,uint8_t temperature){
 80015c6:	9101      	str	r1, [sp, #4]
	switch (tempCardId){
 80015c8:	2805      	cmp	r0, #5
 80015ca:	d83e      	bhi.n	800164a <Set_Resistance+0x8e>
 80015cc:	e8df f000 	tbb	[pc, r0]
 80015d0:	332e2910 	.word	0x332e2910
 80015d4:	0338      	.short	0x0338


	case 0x01:
		cell12_Temp_01_Set(temperature);
 80015d6:	eddd 7a01 	vldr	s15, [sp, #4]
 80015da:	eeb8 8a67 	vcvt.f32.u32	s16, s15

	case 0x05:
		cell11_Temp_02_Set(temperature);

	case 0x06:
		cell11_Temp_03_Set(temperature);
 80015de:	eeb0 0a48 	vmov.f32	s0, s16





}
 80015e2:	b003      	add	sp, #12
 80015e4:	ecbd 8b02 	vpop	{d8}
 80015e8:	f85d eb04 	ldr.w	lr, [sp], #4
		cell11_Temp_03_Set(temperature);
 80015ec:	f7ff bf44 	b.w	8001478 <cell11_Temp_03_Set>
		cell12_Temp_01_Set(temperature);
 80015f0:	eddd 7a01 	vldr	s15, [sp, #4]
 80015f4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80015f8:	eeb0 0a48 	vmov.f32	s0, s16
 80015fc:	f7ff fc24 	bl	8000e48 <cell12_Temp_01_Set>
		cell12_Temp_02_Set(temperature);
 8001600:	eeb0 0a48 	vmov.f32	s0, s16
 8001604:	f7ff fcba 	bl	8000f7c <cell12_Temp_02_Set>
		cell12_Temp_03_Set(temperature);
 8001608:	eeb0 0a48 	vmov.f32	s0, s16
 800160c:	f7ff fd58 	bl	80010c0 <cell12_Temp_03_Set>
		cell11_Temp_01_Set(temperature);
 8001610:	eeb0 0a48 	vmov.f32	s0, s16
 8001614:	f7ff fdec 	bl	80011f0 <cell11_Temp_01_Set>
		cell11_Temp_02_Set(temperature);
 8001618:	eeb0 0a48 	vmov.f32	s0, s16
 800161c:	f7ff fe8a 	bl	8001334 <cell11_Temp_02_Set>
 8001620:	e7dd      	b.n	80015de <Set_Resistance+0x22>
		cell12_Temp_01_Set(temperature);
 8001622:	eddd 7a01 	vldr	s15, [sp, #4]
 8001626:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800162a:	e7e9      	b.n	8001600 <Set_Resistance+0x44>
 800162c:	eddd 7a01 	vldr	s15, [sp, #4]
 8001630:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001634:	e7e8      	b.n	8001608 <Set_Resistance+0x4c>
 8001636:	eddd 7a01 	vldr	s15, [sp, #4]
 800163a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800163e:	e7e7      	b.n	8001610 <Set_Resistance+0x54>
 8001640:	eddd 7a01 	vldr	s15, [sp, #4]
 8001644:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001648:	e7e6      	b.n	8001618 <Set_Resistance+0x5c>
}
 800164a:	b003      	add	sp, #12
 800164c:	ecbd 8b02 	vpop	{d8}
 8001650:	f85d fb04 	ldr.w	pc, [sp], #4

08001654 <u8x8_byte_4wire_hw_spi>:
                                      uint8_t arg_int,
                                      void * const arg_ptr)
{
    uint8_t retVal = 1U;

    switch (msg)
 8001654:	f1a1 0c14 	sub.w	ip, r1, #20
{
 8001658:	b508      	push	{r3, lr}
 800165a:	4619      	mov	r1, r3
    switch (msg)
 800165c:	f1bc 0f0c 	cmp.w	ip, #12
 8001660:	d808      	bhi.n	8001674 <u8x8_byte_4wire_hw_spi+0x20>
 8001662:	e8df f00c 	tbb	[pc, ip]
 8001666:	070d      	.short	0x070d
 8001668:	1c150f07 	.word	0x1c150f07
 800166c:	07070707 	.word	0x07070707
 8001670:	0707      	.short	0x0707
 8001672:	09          	.byte	0x09
 8001673:	00          	.byte	0x00
            break;
        case U8X8_MSG_BYTE_END_TRANSFER:
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, u8x8->display_info->chip_disable_level);
            break;
        default:
            retVal = 0U;
 8001674:	2000      	movs	r0, #0
            break;
    }
    return retVal;
}
 8001676:	bd08      	pop	{r3, pc}
            HAL_GPIO_WritePin(DISPLAY_IO_2_GPIO_Port, DISPLAY_IO_2_Pin, (GPIO_PinState)arg_int);
 8001678:	480c      	ldr	r0, [pc, #48]	@ (80016ac <u8x8_byte_4wire_hw_spi+0x58>)
 800167a:	2108      	movs	r1, #8
 800167c:	f004 fa94 	bl	8005ba8 <HAL_GPIO_WritePin>
{
 8001680:	2001      	movs	r0, #1
}
 8001682:	bd08      	pop	{r3, pc}
            (void)HAL_SPI_Transmit(&hspi3, (uint8_t *)arg_ptr, arg_int, SPI_TIMEOUT_U32);
 8001684:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001688:	4809      	ldr	r0, [pc, #36]	@ (80016b0 <u8x8_byte_4wire_hw_spi+0x5c>)
 800168a:	f005 fca5 	bl	8006fd8 <HAL_SPI_Transmit>
            break;
 800168e:	e7f7      	b.n	8001680 <u8x8_byte_4wire_hw_spi+0x2c>
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, u8x8->display_info->chip_enable_level);
 8001690:	6803      	ldr	r3, [r0, #0]
 8001692:	4808      	ldr	r0, [pc, #32]	@ (80016b4 <u8x8_byte_4wire_hw_spi+0x60>)
 8001694:	781a      	ldrb	r2, [r3, #0]
 8001696:	2104      	movs	r1, #4
 8001698:	f004 fa86 	bl	8005ba8 <HAL_GPIO_WritePin>
            break;
 800169c:	e7f0      	b.n	8001680 <u8x8_byte_4wire_hw_spi+0x2c>
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, u8x8->display_info->chip_disable_level);
 800169e:	6803      	ldr	r3, [r0, #0]
 80016a0:	4804      	ldr	r0, [pc, #16]	@ (80016b4 <u8x8_byte_4wire_hw_spi+0x60>)
 80016a2:	785a      	ldrb	r2, [r3, #1]
 80016a4:	2104      	movs	r1, #4
 80016a6:	f004 fa7f 	bl	8005ba8 <HAL_GPIO_WritePin>
            break;
 80016aa:	e7e9      	b.n	8001680 <u8x8_byte_4wire_hw_spi+0x2c>
 80016ac:	40021800 	.word	0x40021800
 80016b0:	20001398 	.word	0x20001398
 80016b4:	40020c00 	.word	0x40020c00

080016b8 <u8x8_stm32_gpio_and_delay>:
    switch (msg)
 80016b8:	294a      	cmp	r1, #74	@ 0x4a
{
 80016ba:	b508      	push	{r3, lr}
    switch (msg)
 80016bc:	d011      	beq.n	80016e2 <u8x8_stm32_gpio_and_delay+0x2a>
 80016be:	d808      	bhi.n	80016d2 <u8x8_stm32_gpio_and_delay+0x1a>
 80016c0:	2928      	cmp	r1, #40	@ 0x28
 80016c2:	d014      	beq.n	80016ee <u8x8_stm32_gpio_and_delay+0x36>
 80016c4:	2929      	cmp	r1, #41	@ 0x29
 80016c6:	d102      	bne.n	80016ce <u8x8_stm32_gpio_and_delay+0x16>
 80016c8:	4610      	mov	r0, r2
            HAL_Delay(arg_int);
 80016ca:	f003 fe59 	bl	8005380 <HAL_Delay>
}
 80016ce:	2001      	movs	r0, #1
 80016d0:	bd08      	pop	{r3, pc}
    switch (msg)
 80016d2:	294b      	cmp	r1, #75	@ 0x4b
 80016d4:	d1fb      	bne.n	80016ce <u8x8_stm32_gpio_and_delay+0x16>
            HAL_GPIO_WritePin(DISPLAY_IO_1_GPIO_Port, DISPLAY_IO_1_Pin, (GPIO_PinState)arg_int);
 80016d6:	4808      	ldr	r0, [pc, #32]	@ (80016f8 <u8x8_stm32_gpio_and_delay+0x40>)
 80016d8:	2104      	movs	r1, #4
 80016da:	f004 fa65 	bl	8005ba8 <HAL_GPIO_WritePin>
}
 80016de:	2001      	movs	r0, #1
 80016e0:	bd08      	pop	{r3, pc}
            HAL_GPIO_WritePin(DISPLAY_IO_2_GPIO_Port, DISPLAY_IO_2_Pin, (GPIO_PinState)arg_int);
 80016e2:	4805      	ldr	r0, [pc, #20]	@ (80016f8 <u8x8_stm32_gpio_and_delay+0x40>)
 80016e4:	2108      	movs	r1, #8
 80016e6:	f004 fa5f 	bl	8005ba8 <HAL_GPIO_WritePin>
}
 80016ea:	2001      	movs	r0, #1
 80016ec:	bd08      	pop	{r3, pc}
            HAL_Delay(DISPLAY_UPDATE_DELAY_U32);
 80016ee:	2002      	movs	r0, #2
 80016f0:	f003 fe46 	bl	8005380 <HAL_Delay>
}
 80016f4:	2001      	movs	r0, #1
 80016f6:	bd08      	pop	{r3, pc}
 80016f8:	40021800 	.word	0x40021800

080016fc <Display_Init>:

/**
 * @brief Initializes the display hardware and u8g2 library.
 */
void Display_Init(void)
{
 80016fc:	b510      	push	{r4, lr}
    /* Turn on the backlight */
    HAL_GPIO_WritePin(BACKLIGHT_1_GPIO_Port, BACKLIGHT_1_Pin, GPIO_PIN_SET);

    /* Setup u8g2 for the ST7565 display.
       Adjust the setup function if your display type differs. */
    u8g2_Setup_st7565_64128n_f(&u8g2, U8G2_R2, u8x8_byte_4wire_hw_spi, u8x8_stm32_gpio_and_delay);
 80016fe:	4c0e      	ldr	r4, [pc, #56]	@ (8001738 <Display_Init+0x3c>)
    HAL_GPIO_WritePin(BACKLIGHT_1_GPIO_Port, BACKLIGHT_1_Pin, GPIO_PIN_SET);
 8001700:	480e      	ldr	r0, [pc, #56]	@ (800173c <Display_Init+0x40>)
 8001702:	2201      	movs	r2, #1
 8001704:	2110      	movs	r1, #16
 8001706:	f004 fa4f 	bl	8005ba8 <HAL_GPIO_WritePin>
    u8g2_Setup_st7565_64128n_f(&u8g2, U8G2_R2, u8x8_byte_4wire_hw_spi, u8x8_stm32_gpio_and_delay);
 800170a:	4b0d      	ldr	r3, [pc, #52]	@ (8001740 <Display_Init+0x44>)
 800170c:	4a0d      	ldr	r2, [pc, #52]	@ (8001744 <Display_Init+0x48>)
 800170e:	490e      	ldr	r1, [pc, #56]	@ (8001748 <Display_Init+0x4c>)
 8001710:	4620      	mov	r0, r4
 8001712:	f000 f985 	bl	8001a20 <u8g2_Setup_st7565_64128n_f>
    u8g2_InitDisplay(&u8g2);
 8001716:	4620      	mov	r0, r4
 8001718:	f001 f8ee 	bl	80028f8 <u8x8_InitDisplay>
    u8g2_SetPowerSave(&u8g2, 0);
 800171c:	2100      	movs	r1, #0
 800171e:	4620      	mov	r0, r4
 8001720:	f001 f8f4 	bl	800290c <u8x8_SetPowerSave>
    u8g2_ClearDisplay(&u8g2);
 8001724:	4620      	mov	r0, r4
 8001726:	f000 f965 	bl	80019f4 <u8g2_ClearDisplay>
    u8g2_SetContrast(&u8g2, CONTRAST_VALUE_U8);
 800172a:	4620      	mov	r0, r4
 800172c:	2178      	movs	r1, #120	@ 0x78
}
 800172e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    u8g2_SetContrast(&u8g2, CONTRAST_VALUE_U8);
 8001732:	f001 b8f5 	b.w	8002920 <u8x8_SetContrast>
 8001736:	bf00      	nop
 8001738:	20000988 	.word	0x20000988
 800173c:	40021800 	.word	0x40021800
 8001740:	080016b9 	.word	0x080016b9
 8001744:	08001655 	.word	0x08001655
 8001748:	080090b4 	.word	0x080090b4

0800174c <Display_MainTitlePage>:
 * @brief Displays the main title page.
 *
 * This function draws the main title page with a logo and text.
 */
void Display_MainTitlePage(void)
{
 800174c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001750:	4e26      	ldr	r6, [pc, #152]	@ (80017ec <Display_MainTitlePage+0xa0>)
    do
    {
        /* Begin a new page */
        u8g2_FirstPage(&u8g2);
 8001752:	4c27      	ldr	r4, [pc, #156]	@ (80017f0 <Display_MainTitlePage+0xa4>)

        HAL_Delay(PAGE_DELAY_U32);

        /* Clear the buffer and draw title text */
        u8g2_ClearBuffer(&u8g2);
        u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 8001754:	4f27      	ldr	r7, [pc, #156]	@ (80017f4 <Display_MainTitlePage+0xa8>)
        u8g2_DrawStr(&u8g2, 42, 16, "VEGA");
 8001756:	f8df 80a8 	ldr.w	r8, [pc, #168]	@ 8001800 <Display_MainTitlePage+0xb4>
{
 800175a:	b082      	sub	sp, #8
        u8g2_FirstPage(&u8g2);
 800175c:	4620      	mov	r0, r4
 800175e:	f000 f907 	bl	8001970 <u8g2_FirstPage>
            u8g2_DrawXBM(&u8g2, 0, 0, 128, 64, logo);
 8001762:	2540      	movs	r5, #64	@ 0x40
 8001764:	2200      	movs	r2, #0
 8001766:	4620      	mov	r0, r4
 8001768:	e9cd 5600 	strd	r5, r6, [sp]
 800176c:	2380      	movs	r3, #128	@ 0x80
 800176e:	4611      	mov	r1, r2
 8001770:	f000 f894 	bl	800189c <u8g2_DrawXBM>
        while (u8g2_NextPage(&u8g2) != 0U);
 8001774:	4620      	mov	r0, r4
 8001776:	f000 f917 	bl	80019a8 <u8g2_NextPage>
 800177a:	2800      	cmp	r0, #0
 800177c:	d1f2      	bne.n	8001764 <Display_MainTitlePage+0x18>
        HAL_Delay(PAGE_DELAY_U32);
 800177e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001782:	f003 fdfd 	bl	8005380 <HAL_Delay>
        u8g2_ClearBuffer(&u8g2);
 8001786:	4620      	mov	r0, r4
 8001788:	f000 f8d8 	bl	800193c <u8g2_ClearBuffer>
        u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 800178c:	4639      	mov	r1, r7
 800178e:	4620      	mov	r0, r4
 8001790:	f000 fc94 	bl	80020bc <u8g2_SetFont>
        u8g2_DrawStr(&u8g2, 42, 16, "VEGA");
 8001794:	4643      	mov	r3, r8
 8001796:	2210      	movs	r2, #16
 8001798:	212a      	movs	r1, #42	@ 0x2a
 800179a:	4620      	mov	r0, r4
 800179c:	f000 fc7e 	bl	800209c <u8g2_DrawStr>
        u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 80017a0:	4639      	mov	r1, r7
 80017a2:	4620      	mov	r0, r4
 80017a4:	f000 fc8a 	bl	80020bc <u8g2_SetFont>
        u8g2_DrawStr(&u8g2, 6, 33, "INNOVATIONS");
 80017a8:	4b13      	ldr	r3, [pc, #76]	@ (80017f8 <Display_MainTitlePage+0xac>)
 80017aa:	2221      	movs	r2, #33	@ 0x21
 80017ac:	2106      	movs	r1, #6
 80017ae:	4620      	mov	r0, r4
 80017b0:	f000 fc74 	bl	800209c <u8g2_DrawStr>
        HAL_Delay(TEXT_DELAY_U32);
 80017b4:	200a      	movs	r0, #10
 80017b6:	f003 fde3 	bl	8005380 <HAL_Delay>
        u8g2_ClearBuffer(&u8g2);
 80017ba:	4620      	mov	r0, r4
 80017bc:	f000 f8be 	bl	800193c <u8g2_ClearBuffer>
    }
    while (u8g2_NextPage(&u8g2) != 0U);
 80017c0:	4620      	mov	r0, r4
 80017c2:	f000 f8f1 	bl	80019a8 <u8g2_NextPage>
 80017c6:	4605      	mov	r5, r0
 80017c8:	2800      	cmp	r0, #0
 80017ca:	d1c7      	bne.n	800175c <Display_MainTitlePage+0x10>

    HAL_Delay(FINAL_PAGE_DELAY_U32);
 80017cc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80017d0:	f003 fdd6 	bl	8005380 <HAL_Delay>

    u8g2_ClearBuffer(&u8g2);
 80017d4:	4806      	ldr	r0, [pc, #24]	@ (80017f0 <Display_MainTitlePage+0xa4>)
 80017d6:	f000 f8b1 	bl	800193c <u8g2_ClearBuffer>

    HAL_GPIO_WritePin(BACKLIGHT_1_GPIO_Port, BACKLIGHT_1_Pin, GPIO_PIN_RESET);
 80017da:	4808      	ldr	r0, [pc, #32]	@ (80017fc <Display_MainTitlePage+0xb0>)
 80017dc:	462a      	mov	r2, r5
 80017de:	2110      	movs	r1, #16
}
 80017e0:	b002      	add	sp, #8
 80017e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_GPIO_WritePin(BACKLIGHT_1_GPIO_Port, BACKLIGHT_1_Pin, GPIO_PIN_RESET);
 80017e6:	f004 b9df 	b.w	8005ba8 <HAL_GPIO_WritePin>
 80017ea:	bf00      	nop
 80017ec:	20000168 	.word	0x20000168
 80017f0:	20000988 	.word	0x20000988
 80017f4:	0800845c 	.word	0x0800845c
 80017f8:	08008450 	.word	0x08008450
 80017fc:	40021800 	.word	0x40021800
 8001800:	08008448 	.word	0x08008448

08001804 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8001804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
  uint8_t ncolor = (color == 0 ? 1 : 0);
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8001808:	eb01 0803 	add.w	r8, r1, r3
{
 800180c:	b085      	sub	sp, #20
 800180e:	461c      	mov	r4, r3
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8001810:	1c53      	adds	r3, r2, #1
 8001812:	b29b      	uxth	r3, r3
 8001814:	fa1f f888 	uxth.w	r8, r8
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	4643      	mov	r3, r8
{
 800181c:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
  uint8_t color = u8g2->draw_color;
 800181e:	f890 a092 	ldrb.w	sl, [r0, #146]	@ 0x92
{
 8001822:	4606      	mov	r6, r0
 8001824:	460d      	mov	r5, r1
 8001826:	4691      	mov	r9, r2
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8001828:	f000 fd3e 	bl	80022a8 <u8g2_IsIntersection>
 800182c:	b390      	cbz	r0, 8001894 <u8g2_DrawHXBM+0x90>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
  while(len > 0) {
 800182e:	b37c      	cbz	r4, 8001890 <u8g2_DrawHXBM+0x8c>
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8001830:	faba f28a 	clz	r2, sl
 8001834:	0952      	lsrs	r2, r2, #5
  mask = 1;
 8001836:	2401      	movs	r4, #1
    if ( *b & mask ) {
      u8g2->draw_color = color;
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001838:	f04f 0b00 	mov.w	fp, #0
 800183c:	9203      	str	r2, [sp, #12]
 800183e:	e00e      	b.n	800185e <u8g2_DrawHXBM+0x5a>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8001840:	f896 3091 	ldrb.w	r3, [r6, #145]	@ 0x91
 8001844:	b1cb      	cbz	r3, 800187a <u8g2_DrawHXBM+0x76>
      u8g2->draw_color = ncolor;
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
    }
    x++;
    mask <<= 1;
 8001846:	0064      	lsls	r4, r4, #1
    if ( mask == 0 )
 8001848:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
    x++;
 800184c:	f105 0501 	add.w	r5, r5, #1
    {
      mask = 1;
 8001850:	bf08      	it	eq
 8001852:	2401      	moveq	r4, #1
    x++;
 8001854:	b2ad      	uxth	r5, r5
      b++;
 8001856:	bf08      	it	eq
 8001858:	193f      	addeq	r7, r7, r4
  while(len > 0) {
 800185a:	45a8      	cmp	r8, r5
 800185c:	d018      	beq.n	8001890 <u8g2_DrawHXBM+0x8c>
    if ( *b & mask ) {
 800185e:	783b      	ldrb	r3, [r7, #0]
 8001860:	421c      	tst	r4, r3
 8001862:	d0ed      	beq.n	8001840 <u8g2_DrawHXBM+0x3c>
      u8g2->draw_color = color;
 8001864:	f886 a092 	strb.w	sl, [r6, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001868:	2301      	movs	r3, #1
 800186a:	f8cd b000 	str.w	fp, [sp]
 800186e:	464a      	mov	r2, r9
 8001870:	4629      	mov	r1, r5
 8001872:	4630      	mov	r0, r6
 8001874:	f000 fca6 	bl	80021c4 <u8g2_DrawHVLine>
 8001878:	e7e5      	b.n	8001846 <u8g2_DrawHXBM+0x42>
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800187a:	9300      	str	r3, [sp, #0]
      u8g2->draw_color = ncolor;
 800187c:	9b03      	ldr	r3, [sp, #12]
 800187e:	f886 3092 	strb.w	r3, [r6, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001882:	4629      	mov	r1, r5
 8001884:	2301      	movs	r3, #1
 8001886:	464a      	mov	r2, r9
 8001888:	4630      	mov	r0, r6
 800188a:	f000 fc9b 	bl	80021c4 <u8g2_DrawHVLine>
 800188e:	e7da      	b.n	8001846 <u8g2_DrawHXBM+0x42>
    }
    len--;
  }
  u8g2->draw_color = color;
 8001890:	f886 a092 	strb.w	sl, [r6, #146]	@ 0x92
}
 8001894:	b005      	add	sp, #20
 8001896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800189a:	bf00      	nop

0800189c <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 800189c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	461e      	mov	r6, r3
 80018a4:	f8bd a028 	ldrh.w	sl, [sp, #40]	@ 0x28
 80018a8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
  u8g2_uint_t blen;
  blen = w;
  blen += 7;
  blen >>= 3;
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80018aa:	eb02 070a 	add.w	r7, r2, sl
 80018ae:	b2bf      	uxth	r7, r7
 80018b0:	440b      	add	r3, r1
 80018b2:	9700      	str	r7, [sp, #0]
 80018b4:	b29b      	uxth	r3, r3
{
 80018b6:	4681      	mov	r9, r0
 80018b8:	4614      	mov	r4, r2
 80018ba:	4688      	mov	r8, r1
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80018bc:	f000 fcf4 	bl	80022a8 <u8g2_IsIntersection>
 80018c0:	b190      	cbz	r0, 80018e8 <u8g2_DrawXBM+0x4c>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 80018c2:	f1ba 0f00 	cmp.w	sl, #0
 80018c6:	d00f      	beq.n	80018e8 <u8g2_DrawXBM+0x4c>
  blen += 7;
 80018c8:	f106 0a07 	add.w	sl, r6, #7
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
    bitmap += blen;
 80018cc:	f3ca 0acc 	ubfx	sl, sl, #3, #13
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 80018d0:	4622      	mov	r2, r4
    y++;
 80018d2:	3401      	adds	r4, #1
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 80018d4:	9500      	str	r5, [sp, #0]
 80018d6:	4633      	mov	r3, r6
 80018d8:	4641      	mov	r1, r8
 80018da:	4648      	mov	r0, r9
    y++;
 80018dc:	b2a4      	uxth	r4, r4
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 80018de:	f7ff ff91 	bl	8001804 <u8g2_DrawHXBM>
  while( h > 0 )
 80018e2:	42a7      	cmp	r7, r4
    bitmap += blen;
 80018e4:	4455      	add	r5, sl
  while( h > 0 )
 80018e6:	d1f3      	bne.n	80018d0 <u8g2_DrawXBM+0x34>
    h--;
  }
}
 80018e8:	b002      	add	sp, #8
 80018ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018ee:	bf00      	nop

080018f0 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80018f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
  dest_row = u8g2->tile_curr_row;
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80018f4:	6803      	ldr	r3, [r0, #0]
  src_max = u8g2->tile_buf_height;
 80018f6:	f890 7038 	ldrb.w	r7, [r0, #56]	@ 0x38
  dest_row = u8g2->tile_curr_row;
 80018fa:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80018fe:	f893 8011 	ldrb.w	r8, [r3, #17]
{
 8001902:	b082      	sub	sp, #8
 8001904:	4606      	mov	r6, r0
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001906:	2400      	movs	r4, #0
 8001908:	e002      	b.n	8001910 <u8g2_send_buffer+0x20>
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
  } while( src_row < src_max && dest_row < dest_max );
 800190a:	45a8      	cmp	r8, r5
 800190c:	d913      	bls.n	8001936 <u8g2_send_buffer+0x46>
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800190e:	6833      	ldr	r3, [r6, #0]
 8001910:	7c1b      	ldrb	r3, [r3, #16]
  ptr = u8g2->tile_buf_ptr;
 8001912:	6b71      	ldr	r1, [r6, #52]	@ 0x34
  offset *= 8;
 8001914:	fb13 f204 	smulbb	r2, r3, r4
 8001918:	00d2      	lsls	r2, r2, #3
  ptr += offset;
 800191a:	b292      	uxth	r2, r2
 800191c:	4411      	add	r1, r2
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800191e:	9100      	str	r1, [sp, #0]
 8001920:	462a      	mov	r2, r5
 8001922:	2100      	movs	r1, #0
 8001924:	4630      	mov	r0, r6
  } while( src_row < src_max && dest_row < dest_max );
 8001926:	3401      	adds	r4, #1
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001928:	f000 ffca 	bl	80028c0 <u8x8_DrawTile>
  } while( src_row < src_max && dest_row < dest_max );
 800192c:	b2e3      	uxtb	r3, r4
    dest_row++;
 800192e:	3501      	adds	r5, #1
  } while( src_row < src_max && dest_row < dest_max );
 8001930:	429f      	cmp	r7, r3
    dest_row++;
 8001932:	b2ed      	uxtb	r5, r5
  } while( src_row < src_max && dest_row < dest_max );
 8001934:	d8e9      	bhi.n	800190a <u8g2_send_buffer+0x1a>
}
 8001936:	b002      	add	sp, #8
 8001938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800193c <u8g2_ClearBuffer>:
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800193c:	6802      	ldr	r2, [r0, #0]
  cnt *= 8;
 800193e:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8001942:	7c12      	ldrb	r2, [r2, #16]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001944:	6b40      	ldr	r0, [r0, #52]	@ 0x34
  cnt *= 8;
 8001946:	fb12 f203 	smulbb	r2, r2, r3
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800194a:	2100      	movs	r1, #0
 800194c:	00d2      	lsls	r2, r2, #3
 800194e:	f006 bccf 	b.w	80082f0 <memset>
 8001952:	bf00      	nop

08001954 <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8001954:	b510      	push	{r4, lr}
  u8g2->tile_curr_row = row;
  u8g2->cb->update_dimension(u8g2);
 8001956:	6b03      	ldr	r3, [r0, #48]	@ 0x30
  u8g2->tile_curr_row = row;
 8001958:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
{
 800195c:	4604      	mov	r4, r0
  u8g2->cb->update_dimension(u8g2);
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8001962:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001964:	4620      	mov	r0, r4
 8001966:	685b      	ldr	r3, [r3, #4]
}
 8001968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8g2->cb->update_page_win(u8g2);
 800196c:	4718      	bx	r3
 800196e:	bf00      	nop

08001970 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8001970:	b510      	push	{r4, lr}
  if ( u8g2->is_auto_page_clear )
 8001972:	f890 3093 	ldrb.w	r3, [r0, #147]	@ 0x93
{
 8001976:	4604      	mov	r4, r0
  if ( u8g2->is_auto_page_clear )
 8001978:	b92b      	cbnz	r3, 8001986 <u8g2_FirstPage+0x16>
  {
    u8g2_ClearBuffer(u8g2);
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 800197a:	4620      	mov	r0, r4
 800197c:	2100      	movs	r1, #0
}
 800197e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8001982:	f7ff bfe7 	b.w	8001954 <u8g2_SetBufferCurrTileRow>
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001986:	6802      	ldr	r2, [r0, #0]
  cnt *= 8;
 8001988:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800198c:	7c12      	ldrb	r2, [r2, #16]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800198e:	6b40      	ldr	r0, [r0, #52]	@ 0x34
  cnt *= 8;
 8001990:	fb12 f203 	smulbb	r2, r2, r3
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001994:	2100      	movs	r1, #0
 8001996:	00d2      	lsls	r2, r2, #3
 8001998:	f006 fcaa 	bl	80082f0 <memset>
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 800199c:	4620      	mov	r0, r4
 800199e:	2100      	movs	r1, #0
}
 80019a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 80019a4:	f7ff bfd6 	b.w	8001954 <u8g2_SetBufferCurrTileRow>

080019a8 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 80019a8:	b538      	push	{r3, r4, r5, lr}
 80019aa:	4604      	mov	r4, r0
  uint8_t row;
  u8g2_send_buffer(u8g2);
 80019ac:	f7ff ffa0 	bl	80018f0 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 80019b0:	f894 5039 	ldrb.w	r5, [r4, #57]	@ 0x39
  row += u8g2->tile_buf_height;
 80019b4:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80019b8:	6822      	ldr	r2, [r4, #0]
  row += u8g2->tile_buf_height;
 80019ba:	441d      	add	r5, r3
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80019bc:	7c51      	ldrb	r1, [r2, #17]
  row += u8g2->tile_buf_height;
 80019be:	b2ed      	uxtb	r5, r5
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80019c0:	42a9      	cmp	r1, r5
 80019c2:	d911      	bls.n	80019e8 <u8g2_NextPage+0x40>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
    return 0;
  }
  if ( u8g2->is_auto_page_clear )
 80019c4:	f894 1093 	ldrb.w	r1, [r4, #147]	@ 0x93
 80019c8:	b929      	cbnz	r1, 80019d6 <u8g2_NextPage+0x2e>
  {
    u8g2_ClearBuffer(u8g2);
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 80019ca:	4620      	mov	r0, r4
 80019cc:	4629      	mov	r1, r5
 80019ce:	f7ff ffc1 	bl	8001954 <u8g2_SetBufferCurrTileRow>
  return 1;
 80019d2:	2001      	movs	r0, #1
}
 80019d4:	bd38      	pop	{r3, r4, r5, pc}
  cnt *= 8;
 80019d6:	7c12      	ldrb	r2, [r2, #16]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80019d8:	6b60      	ldr	r0, [r4, #52]	@ 0x34
  cnt *= 8;
 80019da:	fb12 f203 	smulbb	r2, r2, r3
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80019de:	00d2      	lsls	r2, r2, #3
 80019e0:	2100      	movs	r1, #0
 80019e2:	f006 fc85 	bl	80082f0 <memset>
}
 80019e6:	e7f0      	b.n	80019ca <u8g2_NextPage+0x22>
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 80019e8:	4620      	mov	r0, r4
 80019ea:	f000 ffa3 	bl	8002934 <u8x8_RefreshDisplay>
    return 0;
 80019ee:	2000      	movs	r0, #0
}
 80019f0:	bd38      	pop	{r3, r4, r5, pc}
 80019f2:	bf00      	nop

080019f4 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 80019f4:	b510      	push	{r4, lr}
 80019f6:	4604      	mov	r4, r0
  u8g2_FirstPage(u8g2);
 80019f8:	f7ff ffba 	bl	8001970 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 80019fc:	4620      	mov	r0, r4
 80019fe:	f7ff ffd3 	bl	80019a8 <u8g2_NextPage>
 8001a02:	2800      	cmp	r0, #0
 8001a04:	d1fa      	bne.n	80019fc <u8g2_ClearDisplay+0x8>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8001a06:	4601      	mov	r1, r0
 8001a08:	4620      	mov	r0, r4
}
 8001a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8001a0e:	f7ff bfa1 	b.w	8001954 <u8g2_SetBufferCurrTileRow>
 8001a12:	bf00      	nop

08001a14 <u8g2_m_16_8_f>:
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8001a14:	2308      	movs	r3, #8
 8001a16:	7003      	strb	r3, [r0, #0]
  return buf;
  #endif
}
 8001a18:	4800      	ldr	r0, [pc, #0]	@ (8001a1c <u8g2_m_16_8_f+0x8>)
 8001a1a:	4770      	bx	lr
 8001a1c:	20000a1c 	.word	0x20000a1c

08001a20 <u8g2_Setup_st7565_64128n_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_lm6063, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_64128n_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001a20:	b530      	push	{r4, r5, lr}
 8001a22:	b085      	sub	sp, #20
 8001a24:	461c      	mov	r4, r3
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_64128n, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8001a26:	9400      	str	r4, [sp, #0]
 8001a28:	4613      	mov	r3, r2
{
 8001a2a:	460d      	mov	r5, r1
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_64128n, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8001a2c:	4a09      	ldr	r2, [pc, #36]	@ (8001a54 <u8g2_Setup_st7565_64128n_f+0x34>)
 8001a2e:	490a      	ldr	r1, [pc, #40]	@ (8001a58 <u8g2_Setup_st7565_64128n_f+0x38>)
{
 8001a30:	4604      	mov	r4, r0
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_64128n, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8001a32:	f000 ff91 	bl	8002958 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8001a36:	f10d 000f 	add.w	r0, sp, #15
 8001a3a:	f7ff ffeb 	bl	8001a14 <u8g2_m_16_8_f>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8001a3e:	4b07      	ldr	r3, [pc, #28]	@ (8001a5c <u8g2_Setup_st7565_64128n_f+0x3c>)
 8001a40:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8001a44:	9500      	str	r5, [sp, #0]
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8001a46:	4601      	mov	r1, r0
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8001a48:	4620      	mov	r0, r4
 8001a4a:	f000 fd8b 	bl	8002564 <u8g2_SetupBuffer>
}
 8001a4e:	b005      	add	sp, #20
 8001a50:	bd30      	pop	{r4, r5, pc}
 8001a52:	bf00      	nop
 8001a54:	080026f5 	.word	0x080026f5
 8001a58:	08002745 	.word	0x08002745
 8001a5c:	080022f9 	.word	0x080022f9

08001a60 <u8g2_font_get_word>:
    font += offset;
    pos = u8x8_pgm_read( font );
    font++;
    pos <<= 8;
    pos += u8x8_pgm_read( font);
    return pos;
 8001a60:	5a40      	ldrh	r0, [r0, r1]
 8001a62:	ba40      	rev16	r0, r0
}
 8001a64:	b280      	uxth	r0, r0
 8001a66:	4770      	bx	lr

08001a68 <u8g2_font_calc_vref_font>:
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
  return 0;
}
 8001a68:	2000      	movs	r0, #0
 8001a6a:	4770      	bx	lr

08001a6c <u8g2_font_get_word.constprop.0>:
    return pos;
 8001a6c:	8840      	ldrh	r0, [r0, #2]
 8001a6e:	ba40      	rev16	r0, r0
}
 8001a70:	b280      	uxth	r0, r0
 8001a72:	4770      	bx	lr

08001a74 <u8g2_font_get_word.constprop.1>:
    return pos;
 8001a74:	8800      	ldrh	r0, [r0, #0]
 8001a76:	ba40      	rev16	r0, r0
}
 8001a78:	b280      	uxth	r0, r0
 8001a7a:	4770      	bx	lr

08001a7c <u8g2_add_vector_y>:
  switch(dir)
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d005      	beq.n	8001a8c <u8g2_add_vector_y+0x10>
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d009      	beq.n	8001a98 <u8g2_add_vector_y+0x1c>
 8001a84:	b12b      	cbz	r3, 8001a92 <u8g2_add_vector_y+0x16>
      dy -= x;
 8001a86:	1a40      	subs	r0, r0, r1
 8001a88:	b280      	uxth	r0, r0
}
 8001a8a:	4770      	bx	lr
      dy += x;
 8001a8c:	4408      	add	r0, r1
 8001a8e:	b280      	uxth	r0, r0
      break;
 8001a90:	4770      	bx	lr
      dy += y;
 8001a92:	4410      	add	r0, r2
 8001a94:	b280      	uxth	r0, r0
      break;
 8001a96:	4770      	bx	lr
      dy -= y;
 8001a98:	1a80      	subs	r0, r0, r2
 8001a9a:	b280      	uxth	r0, r0
      break;
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop

08001aa0 <u8g2_add_vector_x>:
  switch(dir)
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d005      	beq.n	8001ab0 <u8g2_add_vector_x+0x10>
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d009      	beq.n	8001abc <u8g2_add_vector_x+0x1c>
 8001aa8:	b12b      	cbz	r3, 8001ab6 <u8g2_add_vector_x+0x16>
      dx += y;
 8001aaa:	4410      	add	r0, r2
 8001aac:	b280      	uxth	r0, r0
}
 8001aae:	4770      	bx	lr
      dx -= y;
 8001ab0:	1a80      	subs	r0, r0, r2
 8001ab2:	b280      	uxth	r0, r0
      break;
 8001ab4:	4770      	bx	lr
      dx += x;
 8001ab6:	4408      	add	r0, r1
 8001ab8:	b280      	uxth	r0, r0
      break;
 8001aba:	4770      	bx	lr
      dx -= x;
 8001abc:	1a40      	subs	r0, r0, r1
 8001abe:	b280      	uxth	r0, r0
      break;
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop

08001ac4 <u8g2_font_decode_glyph>:
{
 8001ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ac8:	4607      	mov	r7, r0
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8001aca:	f890 0078 	ldrb.w	r0, [r0, #120]	@ 0x78
  decode->decode_ptr = glyph_data;
 8001ace:	6639      	str	r1, [r7, #96]	@ 0x60
  decode->decode_bit_pos = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  if ( bit_pos_plus_cnt >= 8 )
 8001ad6:	2807      	cmp	r0, #7
  val = u8x8_pgm_read( f->decode_ptr );  
 8001ad8:	780c      	ldrb	r4, [r1, #0]
{
 8001ada:	b089      	sub	sp, #36	@ 0x24
  if ( bit_pos_plus_cnt >= 8 )
 8001adc:	f240 81ae 	bls.w	8001e3c <u8g2_font_decode_glyph+0x378>
    f->decode_ptr++;
 8001ae0:	3101      	adds	r1, #1
    bit_pos_plus_cnt -= 8;
 8001ae2:	f1a0 0208 	sub.w	r2, r0, #8
    f->decode_ptr++;
 8001ae6:	6639      	str	r1, [r7, #96]	@ 0x60
    bit_pos_plus_cnt -= 8;
 8001ae8:	b2d2      	uxtb	r2, r2
  val &= (1U<<cnt)-1;
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295
 8001aee:	4083      	lsls	r3, r0
 8001af0:	ea24 0403 	bic.w	r4, r4, r3
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8001af4:	fa4f f984 	sxtb.w	r9, r4
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001af8:	f887 206c 	strb.w	r2, [r7, #108]	@ 0x6c
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8001afc:	f887 906a 	strb.w	r9, [r7, #106]	@ 0x6a
  val >>= bit_pos;
 8001b00:	780b      	ldrb	r3, [r1, #0]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001b02:	f897 5079 	ldrb.w	r5, [r7, #121]	@ 0x79
  val >>= bit_pos;
 8001b06:	fa43 f002 	asr.w	r0, r3, r2
  bit_pos_plus_cnt += cnt;
 8001b0a:	1953      	adds	r3, r2, r5
 8001b0c:	b2db      	uxtb	r3, r3
  if ( bit_pos_plus_cnt >= 8 )
 8001b0e:	2b07      	cmp	r3, #7
 8001b10:	f200 8186 	bhi.w	8001e20 <u8g2_font_decode_glyph+0x35c>
  val >>= bit_pos;
 8001b14:	b2c2      	uxtb	r2, r0
  decode->fg_color = u8g2->draw_color;
 8001b16:	f897 0092 	ldrb.w	r0, [r7, #146]	@ 0x92
 8001b1a:	f887 006e 	strb.w	r0, [r7, #110]	@ 0x6e
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8001b1e:	fab0 f080 	clz	r0, r0
 8001b22:	0940      	lsrs	r0, r0, #5
 8001b24:	f887 006f 	strb.w	r0, [r7, #111]	@ 0x6f
  val &= (1U<<cnt)-1;
 8001b28:	f04f 30ff 	mov.w	r0, #4294967295
 8001b2c:	40a8      	lsls	r0, r5
 8001b2e:	ea22 0200 	bic.w	r2, r2, r0
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8001b32:	f897 607a 	ldrb.w	r6, [r7, #122]	@ 0x7a
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001b36:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001b3a:	fa4f fb82 	sxtb.w	fp, r2
 8001b3e:	f887 b06b 	strb.w	fp, [r7, #107]	@ 0x6b
  bit_pos_plus_cnt += cnt;
 8001b42:	18f0      	adds	r0, r6, r3
  val >>= bit_pos;
 8001b44:	780d      	ldrb	r5, [r1, #0]
  bit_pos_plus_cnt += cnt;
 8001b46:	b2c0      	uxtb	r0, r0
  if ( bit_pos_plus_cnt >= 8 )
 8001b48:	2807      	cmp	r0, #7
  val >>= bit_pos;
 8001b4a:	fa45 f503 	asr.w	r5, r5, r3
  if ( bit_pos_plus_cnt >= 8 )
 8001b4e:	f200 8157 	bhi.w	8001e00 <u8g2_font_decode_glyph+0x33c>
  val >>= bit_pos;
 8001b52:	b2ed      	uxtb	r5, r5
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001b54:	f887 006c 	strb.w	r0, [r7, #108]	@ 0x6c
  val >>= bit_pos;
 8001b58:	780b      	ldrb	r3, [r1, #0]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8001b5a:	f897 e07b 	ldrb.w	lr, [r7, #123]	@ 0x7b
  val >>= bit_pos;
 8001b5e:	fa43 fa00 	asr.w	sl, r3, r0
  bit_pos_plus_cnt += cnt;
 8001b62:	eb0e 0300 	add.w	r3, lr, r0
 8001b66:	b2db      	uxtb	r3, r3
  if ( bit_pos_plus_cnt >= 8 )
 8001b68:	2b07      	cmp	r3, #7
 8001b6a:	f200 8136 	bhi.w	8001dda <u8g2_font_decode_glyph+0x316>
  val >>= bit_pos;
 8001b6e:	fa5f fc8a 	uxtb.w	ip, sl
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8001b72:	f897 a07c 	ldrb.w	sl, [r7, #124]	@ 0x7c
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001b76:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  bit_pos_plus_cnt += cnt;
 8001b7a:	eb0a 0003 	add.w	r0, sl, r3
  val >>= bit_pos;
 8001b7e:	f891 8000 	ldrb.w	r8, [r1]
  bit_pos_plus_cnt += cnt;
 8001b82:	b2c0      	uxtb	r0, r0
  if ( bit_pos_plus_cnt >= 8 )
 8001b84:	2807      	cmp	r0, #7
  val >>= bit_pos;
 8001b86:	fa48 f803 	asr.w	r8, r8, r3
  if ( bit_pos_plus_cnt >= 8 )
 8001b8a:	f200 8116 	bhi.w	8001dba <u8g2_font_decode_glyph+0x2f6>
  val >>= bit_pos;
 8001b8e:	fa5f f388 	uxtb.w	r3, r8
  val &= (1U<<cnt)-1;
 8001b92:	f04f 31ff 	mov.w	r1, #4294967295
 8001b96:	fa01 f80a 	lsl.w	r8, r1, sl
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001b9a:	f887 006c 	strb.w	r0, [r7, #108]	@ 0x6c
  cnt--;
 8001b9e:	eb0a 0001 	add.w	r0, sl, r1
  val &= (1U<<cnt)-1;
 8001ba2:	ea23 0308 	bic.w	r3, r3, r8
  d <<= cnt;
 8001ba6:	fa5f f880 	uxtb.w	r8, r0
 8001baa:	2001      	movs	r0, #1
 8001bac:	fa00 f808 	lsl.w	r8, r0, r8
  v -= d;
 8001bb0:	eba3 0308 	sub.w	r3, r3, r8
  if ( decode->glyph_width > 0 )
 8001bb4:	f1b9 0f00 	cmp.w	r9, #0
  v -= d;
 8001bb8:	fa4f f883 	sxtb.w	r8, r3
  if ( decode->glyph_width > 0 )
 8001bbc:	f340 80f9 	ble.w	8001db2 <u8g2_font_decode_glyph+0x2ee>
  cnt--;
 8001bc0:	eb0e 0301 	add.w	r3, lr, r1
  d <<= cnt;
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	fa00 f303 	lsl.w	r3, r0, r3
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001bca:	1a9a      	subs	r2, r3, r2
  cnt--;
 8001bcc:	1e73      	subs	r3, r6, #1
  val &= (1U<<cnt)-1;
 8001bce:	fa01 fe0e 	lsl.w	lr, r1, lr
  d <<= cnt;
 8001bd2:	b2db      	uxtb	r3, r3
  val &= (1U<<cnt)-1;
 8001bd4:	40b1      	lsls	r1, r6
 8001bd6:	ea2c 0c0e 	bic.w	ip, ip, lr
  d <<= cnt;
 8001bda:	4098      	lsls	r0, r3
  val &= (1U<<cnt)-1;
 8001bdc:	ea25 0101 	bic.w	r1, r5, r1
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001be0:	eba2 020c 	sub.w	r2, r2, ip
  v -= d;
 8001be4:	1a09      	subs	r1, r1, r0
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001be6:	b252      	sxtb	r2, r2
 8001be8:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8001bec:	f8b7 0064 	ldrh.w	r0, [r7, #100]	@ 0x64
 8001bf0:	b249      	sxtb	r1, r1
 8001bf2:	f7ff ff55 	bl	8001aa0 <u8g2_add_vector_x>
 8001bf6:	f8a7 0064 	strh.w	r0, [r7, #100]	@ 0x64
 8001bfa:	4605      	mov	r5, r0
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001bfc:	f8b7 0066 	ldrh.w	r0, [r7, #102]	@ 0x66
 8001c00:	f7ff ff3c 	bl	8001a7c <u8g2_add_vector_y>
 8001c04:	4602      	mov	r2, r0
 8001c06:	f8a7 0066 	strh.w	r0, [r7, #102]	@ 0x66
      switch(decode->dir)
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	f200 8195 	bhi.w	8001f3a <u8g2_font_decode_glyph+0x476>
 8001c10:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001c14:	011c0116 	.word	0x011c0116
 8001c18:	00040125 	.word	0x00040125
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001c1c:	f1c4 0301 	rsb	r3, r4, #1
 8001c20:	4403      	add	r3, r0
	    y1++;
 8001c22:	1c41      	adds	r1, r0, #1
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001c24:	b29a      	uxth	r2, r3
	    x1 += h;
 8001c26:	eb05 030b 	add.w	r3, r5, fp
	    y1++;
 8001c2a:	b289      	uxth	r1, r1
	    x1 += h;
 8001c2c:	b29b      	uxth	r3, r3
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8001c2e:	9100      	str	r1, [sp, #0]
 8001c30:	4638      	mov	r0, r7
 8001c32:	4629      	mov	r1, r5
 8001c34:	f000 fb38 	bl	80022a8 <u8g2_IsIntersection>
 8001c38:	2800      	cmp	r0, #0
 8001c3a:	f000 80ba 	beq.w	8001db2 <u8g2_font_decode_glyph+0x2ee>
    decode->x = 0;
 8001c3e:	2200      	movs	r2, #0
  uint8_t bit_pos = f->decode_bit_pos;
 8001c40:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
  val = u8x8_pgm_read( f->decode_ptr );  
 8001c44:	6e3e      	ldr	r6, [r7, #96]	@ 0x60
    decode->x = 0;
 8001c46:	f8a7 2068 	strh.w	r2, [r7, #104]	@ 0x68
  val &= (1U<<cnt)-1;
 8001c4a:	e9cd b806 	strd	fp, r8, [sp, #24]
  val = u8x8_pgm_read( f->decode_ptr );  
 8001c4e:	4614      	mov	r4, r2
  val &= (1U<<cnt)-1;
 8001c50:	46b8      	mov	r8, r7
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001c52:	f898 0076 	ldrb.w	r0, [r8, #118]	@ 0x76
  val >>= bit_pos;
 8001c56:	7835      	ldrb	r5, [r6, #0]
  bit_pos_plus_cnt += cnt;
 8001c58:	18c1      	adds	r1, r0, r3
 8001c5a:	b2c9      	uxtb	r1, r1
  if ( bit_pos_plus_cnt >= 8 )
 8001c5c:	2907      	cmp	r1, #7
  val >>= bit_pos;
 8001c5e:	fa45 f503 	asr.w	r5, r5, r3
  if ( bit_pos_plus_cnt >= 8 )
 8001c62:	f200 815a 	bhi.w	8001f1a <u8g2_font_decode_glyph+0x456>
  val >>= bit_pos;
 8001c66:	b2eb      	uxtb	r3, r5
  val &= (1U<<cnt)-1;
 8001c68:	f04f 37ff 	mov.w	r7, #4294967295
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001c6c:	f898 5077 	ldrb.w	r5, [r8, #119]	@ 0x77
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001c70:	f888 106c 	strb.w	r1, [r8, #108]	@ 0x6c
  val &= (1U<<cnt)-1;
 8001c74:	fa07 f000 	lsl.w	r0, r7, r0
 8001c78:	ea23 0300 	bic.w	r3, r3, r0
  bit_pos_plus_cnt += cnt;
 8001c7c:	1868      	adds	r0, r5, r1
  val >>= bit_pos;
 8001c7e:	7837      	ldrb	r7, [r6, #0]
  val &= (1U<<cnt)-1;
 8001c80:	9305      	str	r3, [sp, #20]
  bit_pos_plus_cnt += cnt;
 8001c82:	b2c0      	uxtb	r0, r0
  if ( bit_pos_plus_cnt >= 8 )
 8001c84:	2807      	cmp	r0, #7
  val >>= bit_pos;
 8001c86:	fa47 f701 	asr.w	r7, r7, r1
  if ( bit_pos_plus_cnt >= 8 )
 8001c8a:	f200 8138 	bhi.w	8001efe <u8g2_font_decode_glyph+0x43a>
  val >>= bit_pos;
 8001c8e:	b2fb      	uxtb	r3, r7
  val &= (1U<<cnt)-1;
 8001c90:	f04f 31ff 	mov.w	r1, #4294967295
 8001c94:	fa01 f505 	lsl.w	r5, r1, r5
 8001c98:	ea23 0305 	bic.w	r3, r3, r5
 8001c9c:	9304      	str	r3, [sp, #16]
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001c9e:	f888 006c 	strb.w	r0, [r8, #108]	@ 0x6c
  lx = decode->x;
 8001ca2:	fa5f f984 	uxtb.w	r9, r4
  cnt = len;
 8001ca6:	9c05      	ldr	r4, [sp, #20]
  ly = decode->y;
 8001ca8:	b2d5      	uxtb	r5, r2
    rem = decode->glyph_width;
 8001caa:	f898 606a 	ldrb.w	r6, [r8, #106]	@ 0x6a
    else if ( decode->is_transparent == 0 )    
 8001cae:	f898 306d 	ldrb.w	r3, [r8, #109]	@ 0x6d
 8001cb2:	9303      	str	r3, [sp, #12]
    rem -= lx;
 8001cb4:	eba6 0a09 	sub.w	sl, r6, r9
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001cb8:	b26a      	sxtb	r2, r5
    rem -= lx;
 8001cba:	fa5f fa8a 	uxtb.w	sl, sl
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001cbe:	9202      	str	r2, [sp, #8]
    else if ( decode->is_transparent == 0 )    
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f000 80d9 	beq.w	8001e78 <u8g2_font_decode_glyph+0x3b4>
 8001cc6:	eb09 0104 	add.w	r1, r9, r4
    if ( cnt < rem )
 8001cca:	45a2      	cmp	sl, r4
 8001ccc:	4693      	mov	fp, r2
 8001cce:	fa5f f981 	uxtb.w	r9, r1
 8001cd2:	d811      	bhi.n	8001cf8 <u8g2_font_decode_glyph+0x234>
    cnt -= rem;
 8001cd4:	eba9 0106 	sub.w	r1, r9, r6
 8001cd8:	fa5f f981 	uxtb.w	r9, r1
    ly++;
 8001cdc:	3501      	adds	r5, #1
    if ( cnt < rem )
 8001cde:	454e      	cmp	r6, r9
    ly++;
 8001ce0:	b2ed      	uxtb	r5, r5
    if ( cnt < rem )
 8001ce2:	d807      	bhi.n	8001cf4 <u8g2_font_decode_glyph+0x230>
    cnt -= rem;
 8001ce4:	eba9 0906 	sub.w	r9, r9, r6
 8001ce8:	fa5f f989 	uxtb.w	r9, r9
    ly++;
 8001cec:	3501      	adds	r5, #1
    if ( cnt < rem )
 8001cee:	454e      	cmp	r6, r9
    ly++;
 8001cf0:	b2ed      	uxtb	r5, r5
    if ( cnt < rem )
 8001cf2:	d9f7      	bls.n	8001ce4 <u8g2_font_decode_glyph+0x220>
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001cf4:	fa4f fb85 	sxtb.w	fp, r5
  cnt = len;
 8001cf8:	9f04      	ldr	r7, [sp, #16]
  decode->x = lx;
 8001cfa:	f888 9068 	strb.w	r9, [r8, #104]	@ 0x68
  decode->y = ly;  
 8001cfe:	f888 b069 	strb.w	fp, [r8, #105]	@ 0x69
  cnt = len;
 8001d02:	9502      	str	r5, [sp, #8]
 8001d04:	e008      	b.n	8001d18 <u8g2_font_decode_glyph+0x254>
    ly++;
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	f898 606a 	ldrb.w	r6, [r8, #106]	@ 0x6a
 8001d0c:	9202      	str	r2, [sp, #8]
    cnt -= rem;
 8001d0e:	b2ff      	uxtb	r7, r7
    lx = 0;
 8001d10:	f04f 0900 	mov.w	r9, #0
 8001d14:	fa4f fb83 	sxtb.w	fp, r3
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001d18:	f898 3070 	ldrb.w	r3, [r8, #112]	@ 0x70
 8001d1c:	f8b8 0064 	ldrh.w	r0, [r8, #100]	@ 0x64
    y = decode->target_y;
 8001d20:	f8b8 a066 	ldrh.w	sl, [r8, #102]	@ 0x66
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001d24:	fa4f f189 	sxtb.w	r1, r9
 8001d28:	465a      	mov	r2, fp
 8001d2a:	f7ff feb9 	bl	8001aa0 <u8g2_add_vector_x>
    rem -= lx;
 8001d2e:	eba6 0409 	sub.w	r4, r6, r9
 8001d32:	b2e4      	uxtb	r4, r4
    if ( cnt < rem )
 8001d34:	42bc      	cmp	r4, r7
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001d36:	4605      	mov	r5, r0
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8001d38:	4650      	mov	r0, sl
 8001d3a:	46a2      	mov	sl, r4
 8001d3c:	bf28      	it	cs
 8001d3e:	46ba      	movcs	sl, r7
 8001d40:	f7ff fe9c 	bl	8001a7c <u8g2_add_vector_y>
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8001d44:	f898 106e 	ldrb.w	r1, [r8, #110]	@ 0x6e
 8001d48:	f888 1092 	strb.w	r1, [r8, #146]	@ 0x92
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8001d4c:	4602      	mov	r2, r0
      u8g2_DrawHVLine(u8g2, 
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	4629      	mov	r1, r5
 8001d52:	4653      	mov	r3, sl
 8001d54:	4640      	mov	r0, r8
 8001d56:	f000 fa35 	bl	80021c4 <u8g2_DrawHVLine>
    cnt -= rem;
 8001d5a:	44b9      	add	r9, r7
    ly++;
 8001d5c:	9b02      	ldr	r3, [sp, #8]
 8001d5e:	fa5f f189 	uxtb.w	r1, r9
    if ( cnt < rem )
 8001d62:	42bc      	cmp	r4, r7
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001d64:	465a      	mov	r2, fp
    cnt -= rem;
 8001d66:	eba1 0706 	sub.w	r7, r1, r6
    ly++;
 8001d6a:	f103 0301 	add.w	r3, r3, #1
    if ( cnt < rem )
 8001d6e:	d9ca      	bls.n	8001d06 <u8g2_font_decode_glyph+0x242>
  uint8_t bit_pos = f->decode_bit_pos;
 8001d70:	f898 006c 	ldrb.w	r0, [r8, #108]	@ 0x6c
  val = u8x8_pgm_read( f->decode_ptr );  
 8001d74:	f8d8 5060 	ldr.w	r5, [r8, #96]	@ 0x60
  decode->y = ly;  
 8001d78:	f888 b069 	strb.w	fp, [r8, #105]	@ 0x69
  decode->x = lx;
 8001d7c:	b24c      	sxtb	r4, r1
 8001d7e:	f888 4068 	strb.w	r4, [r8, #104]	@ 0x68
  bit_pos_plus_cnt += cnt;
 8001d82:	1c43      	adds	r3, r0, #1
  val >>= bit_pos;
 8001d84:	7829      	ldrb	r1, [r5, #0]
  bit_pos_plus_cnt += cnt;
 8001d86:	b2db      	uxtb	r3, r3
  if ( bit_pos_plus_cnt >= 8 )
 8001d88:	2b07      	cmp	r3, #7
  val >>= bit_pos;
 8001d8a:	fa41 f100 	asr.w	r1, r1, r0
  if ( bit_pos_plus_cnt >= 8 )
 8001d8e:	f200 80a0 	bhi.w	8001ed2 <u8g2_font_decode_glyph+0x40e>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001d92:	07c8      	lsls	r0, r1, #31
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001d94:	f888 306c 	strb.w	r3, [r8, #108]	@ 0x6c
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001d98:	d483      	bmi.n	8001ca2 <u8g2_font_decode_glyph+0x1de>
 8001d9a:	462e      	mov	r6, r5
      if ( decode->y >= h )
 8001d9c:	9906      	ldr	r1, [sp, #24]
 8001d9e:	4559      	cmp	r1, fp
 8001da0:	f73f af57 	bgt.w	8001c52 <u8g2_font_decode_glyph+0x18e>
    u8g2->draw_color = decode->fg_color;
 8001da4:	4647      	mov	r7, r8
 8001da6:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8001daa:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8001dae:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
}
 8001db2:	4640      	mov	r0, r8
 8001db4:	b009      	add	sp, #36	@ 0x24
 8001db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    s -= bit_pos;
 8001dba:	f1c3 0308 	rsb	r3, r3, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	9302      	str	r3, [sp, #8]
    f->decode_ptr++;
 8001dc2:	1c4b      	adds	r3, r1, #1
 8001dc4:	663b      	str	r3, [r7, #96]	@ 0x60
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001dc6:	7849      	ldrb	r1, [r1, #1]
 8001dc8:	9b02      	ldr	r3, [sp, #8]
 8001dca:	fa01 f303 	lsl.w	r3, r1, r3
    bit_pos_plus_cnt -= 8;
 8001dce:	3808      	subs	r0, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001dd0:	ea43 0308 	orr.w	r3, r3, r8
    bit_pos_plus_cnt -= 8;
 8001dd4:	b2c0      	uxtb	r0, r0
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001dd6:	b2db      	uxtb	r3, r3
    bit_pos_plus_cnt -= 8;
 8001dd8:	e6db      	b.n	8001b92 <u8g2_font_decode_glyph+0xce>
    f->decode_ptr++;
 8001dda:	f101 0801 	add.w	r8, r1, #1
 8001dde:	f8c7 8060 	str.w	r8, [r7, #96]	@ 0x60
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001de2:	f891 c001 	ldrb.w	ip, [r1, #1]
    s -= bit_pos;
 8001de6:	f1c0 0008 	rsb	r0, r0, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001dea:	b2c0      	uxtb	r0, r0
 8001dec:	fa0c fc00 	lsl.w	ip, ip, r0
    bit_pos_plus_cnt -= 8;
 8001df0:	3b08      	subs	r3, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001df2:	ea4c 0c0a 	orr.w	ip, ip, sl
    bit_pos_plus_cnt -= 8;
 8001df6:	b2db      	uxtb	r3, r3
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001df8:	fa5f fc8c 	uxtb.w	ip, ip
    bit_pos_plus_cnt -= 8;
 8001dfc:	4641      	mov	r1, r8
 8001dfe:	e6b8      	b.n	8001b72 <u8g2_font_decode_glyph+0xae>
    f->decode_ptr++;
 8001e00:	f101 0c01 	add.w	ip, r1, #1
 8001e04:	f8c7 c060 	str.w	ip, [r7, #96]	@ 0x60
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001e08:	7849      	ldrb	r1, [r1, #1]
    s -= bit_pos;
 8001e0a:	f1c3 0308 	rsb	r3, r3, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	fa01 f303 	lsl.w	r3, r1, r3
    bit_pos_plus_cnt -= 8;
 8001e14:	3808      	subs	r0, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001e16:	431d      	orrs	r5, r3
    bit_pos_plus_cnt -= 8;
 8001e18:	b2c0      	uxtb	r0, r0
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001e1a:	b2ed      	uxtb	r5, r5
    bit_pos_plus_cnt -= 8;
 8001e1c:	4661      	mov	r1, ip
 8001e1e:	e699      	b.n	8001b54 <u8g2_font_decode_glyph+0x90>
    f->decode_ptr++;
 8001e20:	1c4e      	adds	r6, r1, #1
 8001e22:	663e      	str	r6, [r7, #96]	@ 0x60
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001e24:	7849      	ldrb	r1, [r1, #1]
    s -= bit_pos;
 8001e26:	f1c2 0208 	rsb	r2, r2, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	fa01 f202 	lsl.w	r2, r1, r2
    bit_pos_plus_cnt -= 8;
 8001e30:	3b08      	subs	r3, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001e32:	4302      	orrs	r2, r0
    bit_pos_plus_cnt -= 8;
 8001e34:	b2db      	uxtb	r3, r3
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001e36:	b2d2      	uxtb	r2, r2
    bit_pos_plus_cnt -= 8;
 8001e38:	4631      	mov	r1, r6
 8001e3a:	e66c      	b.n	8001b16 <u8g2_font_decode_glyph+0x52>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	e654      	b.n	8001aea <u8g2_font_decode_glyph+0x26>
	    x1 += decode->glyph_width;
 8001e40:	1963      	adds	r3, r4, r5
	    y1 += h;
 8001e42:	eb00 010b 	add.w	r1, r0, fp
	    x1 += decode->glyph_width;
 8001e46:	b29b      	uxth	r3, r3
	    y1 += h;
 8001e48:	b289      	uxth	r1, r1
	    break;
 8001e4a:	e6f0      	b.n	8001c2e <u8g2_font_decode_glyph+0x16a>
	    y1 += decode->glyph_width;
 8001e4c:	1821      	adds	r1, r4, r0
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001e4e:	f1cb 0001 	rsb	r0, fp, #1
	    x1++;
 8001e52:	1c6b      	adds	r3, r5, #1
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001e54:	4428      	add	r0, r5
	    y1 += decode->glyph_width;
 8001e56:	b289      	uxth	r1, r1
	    x1++;
 8001e58:	b29b      	uxth	r3, r3
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001e5a:	b285      	uxth	r5, r0
	    break;
 8001e5c:	e6e7      	b.n	8001c2e <u8g2_font_decode_glyph+0x16a>
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001e5e:	f1c4 0101 	rsb	r1, r4, #1
 8001e62:	4429      	add	r1, r5
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001e64:	f1cb 0001 	rsb	r0, fp, #1
	    x1++;
 8001e68:	1c6b      	adds	r3, r5, #1
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001e6a:	4410      	add	r0, r2
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001e6c:	b28d      	uxth	r5, r1
	    y1++;
 8001e6e:	1c51      	adds	r1, r2, #1
	    x1++;
 8001e70:	b29b      	uxth	r3, r3
	    y1++;
 8001e72:	b289      	uxth	r1, r1
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001e74:	b282      	uxth	r2, r0
	    break;	  
 8001e76:	e6da      	b.n	8001c2e <u8g2_font_decode_glyph+0x16a>
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001e78:	f898 b070 	ldrb.w	fp, [r8, #112]	@ 0x70
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8001e7c:	f898 c06f 	ldrb.w	ip, [r8, #111]	@ 0x6f
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8001e80:	f8b8 0066 	ldrh.w	r0, [r8, #102]	@ 0x66
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8001e84:	f888 c092 	strb.w	ip, [r8, #146]	@ 0x92
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8001e88:	fa4f f189 	sxtb.w	r1, r9
 8001e8c:	465b      	mov	r3, fp
 8001e8e:	f7ff fdf5 	bl	8001a7c <u8g2_add_vector_y>
    x = decode->target_x;
 8001e92:	f8b8 7064 	ldrh.w	r7, [r8, #100]	@ 0x64
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8001e96:	4684      	mov	ip, r0
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001e98:	4638      	mov	r0, r7
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8001e9a:	4667      	mov	r7, ip
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001e9c:	f7ff fe00 	bl	8001aa0 <u8g2_add_vector_x>
      u8g2_DrawHVLine(u8g2, 
 8001ea0:	45a2      	cmp	sl, r4
 8001ea2:	4653      	mov	r3, sl
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001ea4:	4601      	mov	r1, r0
      u8g2_DrawHVLine(u8g2, 
 8001ea6:	bf28      	it	cs
 8001ea8:	4623      	movcs	r3, r4
 8001eaa:	44a1      	add	r9, r4
 8001eac:	f8cd b000 	str.w	fp, [sp]
 8001eb0:	463a      	mov	r2, r7
 8001eb2:	4640      	mov	r0, r8
 8001eb4:	f000 f986 	bl	80021c4 <u8g2_DrawHVLine>
    cnt -= rem;
 8001eb8:	fa5f f989 	uxtb.w	r9, r9
    if ( cnt < rem )
 8001ebc:	45a2      	cmp	sl, r4
    ly++;
 8001ebe:	f105 0301 	add.w	r3, r5, #1
    cnt -= rem;
 8001ec2:	eba9 0406 	sub.w	r4, r9, r6
    if ( cnt < rem )
 8001ec6:	d815      	bhi.n	8001ef4 <u8g2_font_decode_glyph+0x430>
    lx = 0;
 8001ec8:	f8dd 900c 	ldr.w	r9, [sp, #12]
    cnt -= rem;
 8001ecc:	b2e4      	uxtb	r4, r4
    ly++;
 8001ece:	b2dd      	uxtb	r5, r3
  for(;;)
 8001ed0:	e6eb      	b.n	8001caa <u8g2_font_decode_glyph+0x1e6>
    f->decode_ptr++;
 8001ed2:	1c6e      	adds	r6, r5, #1
 8001ed4:	f8c8 6060 	str.w	r6, [r8, #96]	@ 0x60
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001ed8:	786d      	ldrb	r5, [r5, #1]
    s -= bit_pos;
 8001eda:	f1c0 0308 	rsb	r3, r0, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	409d      	lsls	r5, r3
    bit_pos_plus_cnt -= 8;
 8001ee2:	3807      	subs	r0, #7
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001ee4:	4329      	orrs	r1, r5
    bit_pos_plus_cnt -= 8;
 8001ee6:	b2c3      	uxtb	r3, r0
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001ee8:	07c9      	lsls	r1, r1, #31
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001eea:	f888 306c 	strb.w	r3, [r8, #108]	@ 0x6c
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001eee:	f53f aed8 	bmi.w	8001ca2 <u8g2_font_decode_glyph+0x1de>
 8001ef2:	e753      	b.n	8001d9c <u8g2_font_decode_glyph+0x2d8>
 8001ef4:	f8dd b008 	ldr.w	fp, [sp, #8]
 8001ef8:	f898 606a 	ldrb.w	r6, [r8, #106]	@ 0x6a
 8001efc:	e6fc      	b.n	8001cf8 <u8g2_font_decode_glyph+0x234>
    s -= bit_pos;
 8001efe:	f1c1 0308 	rsb	r3, r1, #8
    f->decode_ptr++;
 8001f02:	1c71      	adds	r1, r6, #1
 8001f04:	f8c8 1060 	str.w	r1, [r8, #96]	@ 0x60
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001f08:	7871      	ldrb	r1, [r6, #1]
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	fa01 f303 	lsl.w	r3, r1, r3
    bit_pos_plus_cnt -= 8;
 8001f10:	3808      	subs	r0, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001f12:	433b      	orrs	r3, r7
    bit_pos_plus_cnt -= 8;
 8001f14:	b2c0      	uxtb	r0, r0
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001f16:	b2db      	uxtb	r3, r3
    bit_pos_plus_cnt -= 8;
 8001f18:	e6ba      	b.n	8001c90 <u8g2_font_decode_glyph+0x1cc>
    f->decode_ptr++;
 8001f1a:	1c77      	adds	r7, r6, #1
    s -= bit_pos;
 8001f1c:	f1c3 0308 	rsb	r3, r3, #8
    f->decode_ptr++;
 8001f20:	f8c8 7060 	str.w	r7, [r8, #96]	@ 0x60
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001f24:	fa5f fc83 	uxtb.w	ip, r3
 8001f28:	7873      	ldrb	r3, [r6, #1]
 8001f2a:	fa03 f30c 	lsl.w	r3, r3, ip
    bit_pos_plus_cnt -= 8;
 8001f2e:	3908      	subs	r1, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001f30:	432b      	orrs	r3, r5
    bit_pos_plus_cnt -= 8;
 8001f32:	b2c9      	uxtb	r1, r1
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001f34:	b2db      	uxtb	r3, r3
    bit_pos_plus_cnt -= 8;
 8001f36:	463e      	mov	r6, r7
 8001f38:	e696      	b.n	8001c68 <u8g2_font_decode_glyph+0x1a4>
      switch(decode->dir)
 8001f3a:	4601      	mov	r1, r0
 8001f3c:	462b      	mov	r3, r5
 8001f3e:	e676      	b.n	8001c2e <u8g2_font_decode_glyph+0x16a>

08001f40 <u8g2_font_get_glyph_data>:
{
 8001f40:	b508      	push	{r3, lr}
  const uint8_t *font = u8g2->font;
 8001f42:	6d83      	ldr	r3, [r0, #88]	@ 0x58
  if ( encoding <= 255 )
 8001f44:	29ff      	cmp	r1, #255	@ 0xff
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8001f46:	f103 0317 	add.w	r3, r3, #23
  if ( encoding <= 255 )
 8001f4a:	d80e      	bhi.n	8001f6a <u8g2_font_get_glyph_data+0x2a>
    if ( encoding >= 'a' )
 8001f4c:	2960      	cmp	r1, #96	@ 0x60
 8001f4e:	d92e      	bls.n	8001fae <u8g2_font_get_glyph_data+0x6e>
      font += u8g2->font_info.start_pos_lower_a;
 8001f50:	f8b0 2088 	ldrh.w	r2, [r0, #136]	@ 0x88
 8001f54:	4413      	add	r3, r2
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001f56:	7858      	ldrb	r0, [r3, #1]
 8001f58:	b130      	cbz	r0, 8001f68 <u8g2_font_get_glyph_data+0x28>
      if ( u8x8_pgm_read( font ) == encoding )
 8001f5a:	781a      	ldrb	r2, [r3, #0]
 8001f5c:	428a      	cmp	r2, r1
 8001f5e:	d02c      	beq.n	8001fba <u8g2_font_get_glyph_data+0x7a>
      font += u8x8_pgm_read( font + 1 );
 8001f60:	4403      	add	r3, r0
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001f62:	7858      	ldrb	r0, [r3, #1]
 8001f64:	2800      	cmp	r0, #0
 8001f66:	d1f8      	bne.n	8001f5a <u8g2_font_get_glyph_data+0x1a>
}
 8001f68:	bd08      	pop	{r3, pc}
    font += u8g2->font_info.start_pos_unicode;
 8001f6a:	f8b0 208a 	ldrh.w	r2, [r0, #138]	@ 0x8a
 8001f6e:	4413      	add	r3, r2
    unicode_lookup_table = font; 
 8001f70:	461a      	mov	r2, r3
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8001f72:	4610      	mov	r0, r2
 8001f74:	f7ff fd7e 	bl	8001a74 <u8g2_font_get_word.constprop.1>
 8001f78:	4684      	mov	ip, r0
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001f7a:	4610      	mov	r0, r2
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8001f7c:	4463      	add	r3, ip
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001f7e:	f7ff fd75 	bl	8001a6c <u8g2_font_get_word.constprop.0>
    } while( e < encoding );
 8001f82:	4281      	cmp	r1, r0
      unicode_lookup_table+=4;
 8001f84:	f102 0204 	add.w	r2, r2, #4
    } while( e < encoding );
 8001f88:	d8f3      	bhi.n	8001f72 <u8g2_font_get_glyph_data+0x32>
      e |= u8x8_pgm_read( font + 1 );
 8001f8a:	8818      	ldrh	r0, [r3, #0]
 8001f8c:	ba42      	rev16	r2, r0
 8001f8e:	b292      	uxth	r2, r2
      if ( e == 0 )
 8001f90:	2800      	cmp	r0, #0
 8001f92:	d0e9      	beq.n	8001f68 <u8g2_font_get_glyph_data+0x28>
      if ( e == encoding )
 8001f94:	4291      	cmp	r1, r2
 8001f96:	d008      	beq.n	8001faa <u8g2_font_get_glyph_data+0x6a>
      font += u8x8_pgm_read( font + 2 );
 8001f98:	789a      	ldrb	r2, [r3, #2]
 8001f9a:	4413      	add	r3, r2
      e |= u8x8_pgm_read( font + 1 );
 8001f9c:	8818      	ldrh	r0, [r3, #0]
 8001f9e:	ba42      	rev16	r2, r0
 8001fa0:	b292      	uxth	r2, r2
      if ( e == 0 )
 8001fa2:	2800      	cmp	r0, #0
 8001fa4:	d0e0      	beq.n	8001f68 <u8g2_font_get_glyph_data+0x28>
      if ( e == encoding )
 8001fa6:	4291      	cmp	r1, r2
 8001fa8:	d1f6      	bne.n	8001f98 <u8g2_font_get_glyph_data+0x58>
	return font+3;	/* skip encoding and glyph size */
 8001faa:	1cd8      	adds	r0, r3, #3
}
 8001fac:	bd08      	pop	{r3, pc}
    else if ( encoding >= 'A' )
 8001fae:	2940      	cmp	r1, #64	@ 0x40
 8001fb0:	d9d7      	bls.n	8001f62 <u8g2_font_get_glyph_data+0x22>
      font += u8g2->font_info.start_pos_upper_A;
 8001fb2:	f8b0 2086 	ldrh.w	r2, [r0, #134]	@ 0x86
 8001fb6:	4413      	add	r3, r2
 8001fb8:	e7d3      	b.n	8001f62 <u8g2_font_get_glyph_data+0x22>
	return font+2;	/* skip encoding and glyph size */
 8001fba:	1c98      	adds	r0, r3, #2
}
 8001fbc:	bd08      	pop	{r3, pc}
 8001fbe:	bf00      	nop

08001fc0 <u8g2_draw_string>:
{
 8001fc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fc4:	461e      	mov	r6, r3
 8001fc6:	4604      	mov	r4, r0
 8001fc8:	468a      	mov	sl, r1
 8001fca:	4691      	mov	r9, r2
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8001fcc:	f000 fafa 	bl	80025c4 <u8x8_utf8_init>
  sum = 0;
 8001fd0:	3e01      	subs	r6, #1
 8001fd2:	2700      	movs	r7, #0
    if ( e == 0x0ffff )
 8001fd4:	f64f 78ff 	movw	r8, #65535	@ 0xffff
    if ( e != 0x0fffe )
 8001fd8:	f64f 7bfe 	movw	fp, #65534	@ 0xfffe
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001fdc:	6863      	ldr	r3, [r4, #4]
 8001fde:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001fe2:	4620      	mov	r0, r4
 8001fe4:	4798      	blx	r3
    if ( e == 0x0ffff )
 8001fe6:	4540      	cmp	r0, r8
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001fe8:	4605      	mov	r5, r0
    if ( e == 0x0ffff )
 8001fea:	d051      	beq.n	8002090 <u8g2_draw_string+0xd0>
    if ( e != 0x0fffe )
 8001fec:	4558      	cmp	r0, fp
 8001fee:	d0f5      	beq.n	8001fdc <u8g2_draw_string+0x1c>
  switch(u8g2->font_decode.dir)
 8001ff0:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8001ff4:	2b03      	cmp	r3, #3
 8001ff6:	d84e      	bhi.n	8002096 <u8g2_draw_string+0xd6>
 8001ff8:	e8df f003 	tbb	[pc, r3]
 8001ffc:	02323a42 	.word	0x02323a42
      x += u8g2->font_calc_vref(u8g2);
 8002000:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002002:	4620      	mov	r0, r4
 8002004:	4798      	blx	r3
 8002006:	4450      	add	r0, sl
 8002008:	b280      	uxth	r0, r0
      break;
 800200a:	464b      	mov	r3, r9
  u8g2->font_decode.target_x = x;
 800200c:	f8a4 0064 	strh.w	r0, [r4, #100]	@ 0x64
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8002010:	4629      	mov	r1, r5
  u8g2->font_decode.target_y = y;
 8002012:	f8a4 3066 	strh.w	r3, [r4, #102]	@ 0x66
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8002016:	4620      	mov	r0, r4
 8002018:	f7ff ff92 	bl	8001f40 <u8g2_font_get_glyph_data>
  if ( glyph_data != NULL )
 800201c:	4601      	mov	r1, r0
 800201e:	b128      	cbz	r0, 800202c <u8g2_draw_string+0x6c>
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8002020:	4620      	mov	r0, r4
 8002022:	f7ff fd4f 	bl	8001ac4 <u8g2_font_decode_glyph>
 8002026:	b281      	uxth	r1, r0
      sum += delta;    
 8002028:	440f      	add	r7, r1
 800202a:	b2bf      	uxth	r7, r7
      switch(u8g2->font_decode.dir)
 800202c:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8002030:	2b03      	cmp	r3, #3
 8002032:	d8d3      	bhi.n	8001fdc <u8g2_draw_string+0x1c>
 8002034:	e8df f003 	tbb	[pc, r3]
 8002038:	02070c10 	.word	0x02070c10
	  y -= delta;
 800203c:	eba9 0101 	sub.w	r1, r9, r1
 8002040:	fa1f f981 	uxth.w	r9, r1
	  break;
 8002044:	e7ca      	b.n	8001fdc <u8g2_draw_string+0x1c>
	  x -= delta;
 8002046:	ebaa 0101 	sub.w	r1, sl, r1
 800204a:	fa1f fa81 	uxth.w	sl, r1
	  break;
 800204e:	e7c5      	b.n	8001fdc <u8g2_draw_string+0x1c>
	  y += delta;
 8002050:	4449      	add	r1, r9
 8002052:	fa1f f981 	uxth.w	r9, r1
	  break;
 8002056:	e7c1      	b.n	8001fdc <u8g2_draw_string+0x1c>
	  x += delta;
 8002058:	4451      	add	r1, sl
 800205a:	fa1f fa81 	uxth.w	sl, r1
	  break;
 800205e:	e7bd      	b.n	8001fdc <u8g2_draw_string+0x1c>
      y -= u8g2->font_calc_vref(u8g2);
 8002060:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002062:	4620      	mov	r0, r4
 8002064:	4798      	blx	r3
 8002066:	eba9 0300 	sub.w	r3, r9, r0
 800206a:	b29b      	uxth	r3, r3
      break;
 800206c:	4650      	mov	r0, sl
 800206e:	e7cd      	b.n	800200c <u8g2_draw_string+0x4c>
      x -= u8g2->font_calc_vref(u8g2);
 8002070:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002072:	4620      	mov	r0, r4
 8002074:	4798      	blx	r3
 8002076:	ebaa 0000 	sub.w	r0, sl, r0
 800207a:	b280      	uxth	r0, r0
      break;
 800207c:	464b      	mov	r3, r9
 800207e:	e7c5      	b.n	800200c <u8g2_draw_string+0x4c>
      y += u8g2->font_calc_vref(u8g2);
 8002080:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002082:	4620      	mov	r0, r4
 8002084:	4798      	blx	r3
 8002086:	eb09 0300 	add.w	r3, r9, r0
 800208a:	b29b      	uxth	r3, r3
      break;
 800208c:	4650      	mov	r0, sl
 800208e:	e7bd      	b.n	800200c <u8g2_draw_string+0x4c>
}
 8002090:	4638      	mov	r0, r7
 8002092:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch(u8g2->font_decode.dir)
 8002096:	464b      	mov	r3, r9
 8002098:	4650      	mov	r0, sl
 800209a:	e7b7      	b.n	800200c <u8g2_draw_string+0x4c>

0800209c <u8g2_DrawStr>:
{
 800209c:	b410      	push	{r4}
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 800209e:	4c03      	ldr	r4, [pc, #12]	@ (80020ac <u8g2_DrawStr+0x10>)
 80020a0:	6044      	str	r4, [r0, #4]
}
 80020a2:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8g2_draw_string(u8g2, x, y, str);
 80020a6:	f7ff bf8b 	b.w	8001fc0 <u8g2_draw_string>
 80020aa:	bf00      	nop
 80020ac:	080025b5 	.word	0x080025b5

080020b0 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80020b0:	4b01      	ldr	r3, [pc, #4]	@ (80020b8 <u8g2_SetFontPosBaseline+0x8>)
 80020b2:	65c3      	str	r3, [r0, #92]	@ 0x5c
}
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	08001a69 	.word	0x08001a69

080020bc <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 80020bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020c0:	4603      	mov	r3, r0
  if ( u8g2->font != font )
 80020c2:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 80020c4:	4288      	cmp	r0, r1
 80020c6:	d057      	beq.n	8002178 <u8g2_SetFont+0xbc>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 80020c8:	6599      	str	r1, [r3, #88]	@ 0x58
  return u8x8_pgm_read( font );  
 80020ca:	460a      	mov	r2, r1
 80020cc:	7809      	ldrb	r1, [r1, #0]
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80020ce:	f883 1074 	strb.w	r1, [r3, #116]	@ 0x74
  return u8x8_pgm_read( font );  
 80020d2:	7851      	ldrb	r1, [r2, #1]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80020d4:	f883 1075 	strb.w	r1, [r3, #117]	@ 0x75
  return u8x8_pgm_read( font );  
 80020d8:	7891      	ldrb	r1, [r2, #2]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80020da:	f883 1076 	strb.w	r1, [r3, #118]	@ 0x76
  return u8x8_pgm_read( font );  
 80020de:	78d1      	ldrb	r1, [r2, #3]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80020e0:	f883 1077 	strb.w	r1, [r3, #119]	@ 0x77
  return u8x8_pgm_read( font );  
 80020e4:	7911      	ldrb	r1, [r2, #4]
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80020e6:	f883 1078 	strb.w	r1, [r3, #120]	@ 0x78
  return u8x8_pgm_read( font );  
 80020ea:	7951      	ldrb	r1, [r2, #5]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80020ec:	f883 1079 	strb.w	r1, [r3, #121]	@ 0x79
  return u8x8_pgm_read( font );  
 80020f0:	7991      	ldrb	r1, [r2, #6]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80020f2:	f883 107a 	strb.w	r1, [r3, #122]	@ 0x7a
  return u8x8_pgm_read( font );  
 80020f6:	79d1      	ldrb	r1, [r2, #7]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80020f8:	f883 107b 	strb.w	r1, [r3, #123]	@ 0x7b
  return u8x8_pgm_read( font );  
 80020fc:	7a11      	ldrb	r1, [r2, #8]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80020fe:	f883 107c 	strb.w	r1, [r3, #124]	@ 0x7c
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8002102:	7a51      	ldrb	r1, [r2, #9]
 8002104:	f883 107d 	strb.w	r1, [r3, #125]	@ 0x7d
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8002108:	f992 600a 	ldrsb.w	r6, [r2, #10]
  return u8x8_pgm_read( font );  
 800210c:	f892 900a 	ldrb.w	r9, [r2, #10]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8002110:	f883 607e 	strb.w	r6, [r3, #126]	@ 0x7e
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8002114:	7ad1      	ldrb	r1, [r2, #11]
 8002116:	f883 107f 	strb.w	r1, [r3, #127]	@ 0x7f
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 800211a:	f992 700c 	ldrsb.w	r7, [r2, #12]
  return u8x8_pgm_read( font );  
 800211e:	f892 a00c 	ldrb.w	sl, [r2, #12]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8002122:	f883 7080 	strb.w	r7, [r3, #128]	@ 0x80
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8002126:	f992 500d 	ldrsb.w	r5, [r2, #13]
 800212a:	f883 5081 	strb.w	r5, [r3, #129]	@ 0x81
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 800212e:	f992 400e 	ldrsb.w	r4, [r2, #14]
 8002132:	f883 4082 	strb.w	r4, [r3, #130]	@ 0x82
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8002136:	f992 800f 	ldrsb.w	r8, [r2, #15]
 800213a:	f883 8083 	strb.w	r8, [r3, #131]	@ 0x83
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800213e:	f992 b010 	ldrsb.w	fp, [r2, #16]
 8002142:	f883 b084 	strb.w	fp, [r3, #132]	@ 0x84
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8002146:	2111      	movs	r1, #17
 8002148:	4610      	mov	r0, r2
 800214a:	f7ff fc89 	bl	8001a60 <u8g2_font_get_word>
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800214e:	2113      	movs	r1, #19
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8002150:	f8a3 0086 	strh.w	r0, [r3, #134]	@ 0x86
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8002154:	4610      	mov	r0, r2
 8002156:	f7ff fc83 	bl	8001a60 <u8g2_font_get_word>
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800215a:	2115      	movs	r1, #21
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800215c:	f8a3 0088 	strh.w	r0, [r3, #136]	@ 0x88
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8002160:	4610      	mov	r0, r2
 8002162:	f7ff fc7d 	bl	8001a60 <u8g2_font_get_word>
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8002166:	f893 208d 	ldrb.w	r2, [r3, #141]	@ 0x8d
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800216a:	f8a3 008a 	strh.w	r0, [r3, #138]	@ 0x8a
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 800216e:	f883 508e 	strb.w	r5, [r3, #142]	@ 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8002172:	f883 408f 	strb.w	r4, [r3, #143]	@ 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8002176:	b90a      	cbnz	r2, 800217c <u8g2_SetFont+0xc0>
    u8g2_read_font_info(&(u8g2->font_info), font);
    u8g2_UpdateRefHeight(u8g2);
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8002178:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 800217c:	2a01      	cmp	r2, #1
 800217e:	d00b      	beq.n	8002198 <u8g2_SetFont+0xdc>
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8002180:	443e      	add	r6, r7
 8002182:	42b5      	cmp	r5, r6
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8002184:	bfbc      	itt	lt
 8002186:	44d1      	addlt	r9, sl
 8002188:	f883 908e 	strblt.w	r9, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 800218c:	42a7      	cmp	r7, r4
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 800218e:	bfb8      	it	lt
 8002190:	f883 708f 	strblt.w	r7, [r3, #143]	@ 0x8f
}
 8002194:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8002198:	45a8      	cmp	r8, r5
 800219a:	bfb8      	it	lt
 800219c:	46a8      	movlt	r8, r5
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 800219e:	455c      	cmp	r4, fp
 80021a0:	f883 808e 	strb.w	r8, [r3, #142]	@ 0x8e
 80021a4:	dde8      	ble.n	8002178 <u8g2_SetFont+0xbc>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80021a6:	f883 b08f 	strb.w	fp, [r3, #143]	@ 0x8f
 80021aa:	e7e5      	b.n	8002178 <u8g2_SetFont+0xbc>

080021ac <u8g2_draw_hv_line_2dir>:
 This function first adjusts the y position to the local buffer. Then it
 will clip the line and call u8g2_draw_low_level_hv_line()

 */
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		u8g2_uint_t len, uint8_t dir) {
 80021ac:	b430      	push	{r4, r5}

	/* clipping happens before the display rotation */

	/* transform to pixel buffer coordinates */
	y -= u8g2->pixel_curr_row;
 80021ae:	8fc4      	ldrh	r4, [r0, #62]	@ 0x3e
		u8g2_uint_t len, uint8_t dir) {
 80021b0:	f89d 5008 	ldrb.w	r5, [sp, #8]

	u8g2->ll_hvline(u8g2, x, y, len, dir);
 80021b4:	9502      	str	r5, [sp, #8]
	y -= u8g2->pixel_curr_row;
 80021b6:	1b12      	subs	r2, r2, r4
	u8g2->ll_hvline(u8g2, x, y, len, dir);
 80021b8:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 80021ba:	b292      	uxth	r2, r2
 80021bc:	46a4      	mov	ip, r4
}
 80021be:	bc30      	pop	{r4, r5}
	u8g2->ll_hvline(u8g2, x, y, len, dir);
 80021c0:	4760      	bx	ip
 80021c2:	bf00      	nop

080021c4 <u8g2_DrawHVLine>:
 This function should be called by the user.

 "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
 */
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		u8g2_uint_t len, uint8_t dir) {
 80021c4:	b410      	push	{r4}
	/* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
	/* The callback may rotate the hv line */
	/* after rotation this will call u8g2_draw_hv_line_4dir() */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
	if (u8g2->is_page_clip_window_intersection != 0)
 80021c6:	f890 408c 	ldrb.w	r4, [r0, #140]	@ 0x8c
		u8g2_uint_t len, uint8_t dir) {
 80021ca:	f89d c004 	ldrb.w	ip, [sp, #4]
	if (u8g2->is_page_clip_window_intersection != 0)
 80021ce:	b35c      	cbz	r4, 8002228 <u8g2_DrawHVLine+0x64>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
		if (len != 0) {
 80021d0:	b353      	cbz	r3, 8002228 <u8g2_DrawHVLine+0x64>

			/* convert to two directions */
			if (len > 1) {
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d005      	beq.n	80021e2 <u8g2_DrawHVLine+0x1e>
				if (dir == 2) {
 80021d6:	f1bc 0f02 	cmp.w	ip, #2
 80021da:	d028      	beq.n	800222e <u8g2_DrawHVLine+0x6a>
					x -= len;
					x++;
				} else if (dir == 3) {
 80021dc:	f1bc 0f03 	cmp.w	ip, #3
 80021e0:	d05a      	beq.n	8002298 <u8g2_DrawHVLine+0xd4>
				}
			}
			dir &= 1;

			/* clip against the user window */
			if (dir == 0) {
 80021e2:	f01c 0f01 	tst.w	ip, #1
 80021e6:	d025      	beq.n	8002234 <u8g2_DrawHVLine+0x70>
					return;
				if (u8g2_clip_intersection2(&x, &len, u8g2->user_x0,
						u8g2->user_x1) == 0)
					return;
			} else {
				if (x < u8g2->user_x0)
 80021e8:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
 80021ec:	428c      	cmp	r4, r1
 80021ee:	d81b      	bhi.n	8002228 <u8g2_DrawHVLine+0x64>
					return;
				if (x >= u8g2->user_x1)
 80021f0:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
 80021f4:	428c      	cmp	r4, r1
 80021f6:	d917      	bls.n	8002228 <u8g2_DrawHVLine+0x64>
	b += *len;
 80021f8:	4413      	add	r3, r2
 80021fa:	b29b      	uxth	r3, r3
	if (a > b) {
 80021fc:	4293      	cmp	r3, r2
					return;
				if (u8g2_clip_intersection2(&y, &len, u8g2->user_y0,
 80021fe:	f8b0 404c 	ldrh.w	r4, [r0, #76]	@ 0x4c
 8002202:	f8b0 c04e 	ldrh.w	ip, [r0, #78]	@ 0x4e
	if (a > b) {
 8002206:	d341      	bcc.n	800228c <u8g2_DrawHVLine+0xc8>
	if (a >= d)
 8002208:	4594      	cmp	ip, r2
 800220a:	d90d      	bls.n	8002228 <u8g2_DrawHVLine+0x64>
	if (b <= c)
 800220c:	429c      	cmp	r4, r3
 800220e:	d20b      	bcs.n	8002228 <u8g2_DrawHVLine+0x64>
	if (a < c)
 8002210:	42a2      	cmp	r2, r4
 8002212:	bf38      	it	cc
 8002214:	4622      	movcc	r2, r4
	b -= a;
 8002216:	459c      	cmp	ip, r3
 8002218:	bf94      	ite	ls
 800221a:	ebc2 040c 	rsbls	r4, r2, ip
 800221e:	ebc2 0403 	rsbhi	r4, r2, r3
 8002222:	b2a3      	uxth	r3, r4
 8002224:	2401      	movs	r4, #1
 8002226:	e024      	b.n	8002272 <u8g2_DrawHVLine+0xae>
					return;
			}

			u8g2->cb->draw_l90(u8g2, x, y, len, dir);
		}
}
 8002228:	f85d 4b04 	ldr.w	r4, [sp], #4
 800222c:	4770      	bx	lr
					x++;
 800222e:	3101      	adds	r1, #1
 8002230:	1ac9      	subs	r1, r1, r3
 8002232:	b289      	uxth	r1, r1
				if (y < u8g2->user_y0)
 8002234:	f8b0 404c 	ldrh.w	r4, [r0, #76]	@ 0x4c
 8002238:	4294      	cmp	r4, r2
 800223a:	d8f5      	bhi.n	8002228 <u8g2_DrawHVLine+0x64>
				if (y >= u8g2->user_y1)
 800223c:	f8b0 404e 	ldrh.w	r4, [r0, #78]	@ 0x4e
 8002240:	4294      	cmp	r4, r2
 8002242:	d9f1      	bls.n	8002228 <u8g2_DrawHVLine+0x64>
	b += *len;
 8002244:	440b      	add	r3, r1
 8002246:	b29b      	uxth	r3, r3
	if (a > b) {
 8002248:	428b      	cmp	r3, r1
				if (u8g2_clip_intersection2(&x, &len, u8g2->user_x0,
 800224a:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
 800224e:	f8b0 c04a 	ldrh.w	ip, [r0, #74]	@ 0x4a
	if (a > b) {
 8002252:	d315      	bcc.n	8002280 <u8g2_DrawHVLine+0xbc>
	if (a >= d)
 8002254:	458c      	cmp	ip, r1
 8002256:	d9e7      	bls.n	8002228 <u8g2_DrawHVLine+0x64>
	if (b <= c)
 8002258:	429c      	cmp	r4, r3
 800225a:	d2e5      	bcs.n	8002228 <u8g2_DrawHVLine+0x64>
	if (a < c)
 800225c:	42a1      	cmp	r1, r4
 800225e:	bf38      	it	cc
 8002260:	4621      	movcc	r1, r4
	b -= a;
 8002262:	459c      	cmp	ip, r3
 8002264:	bf94      	ite	ls
 8002266:	ebc1 040c 	rsbls	r4, r1, ip
 800226a:	ebc1 0403 	rsbhi	r4, r1, r3
 800226e:	b2a3      	uxth	r3, r4
 8002270:	2400      	movs	r4, #0
			u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8002272:	9401      	str	r4, [sp, #4]
 8002274:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8002276:	68a4      	ldr	r4, [r4, #8]
 8002278:	46a4      	mov	ip, r4
}
 800227a:	f85d 4b04 	ldr.w	r4, [sp], #4
			u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800227e:	4760      	bx	ip
		if (a < d) {
 8002280:	458c      	cmp	ip, r1
 8002282:	d90d      	bls.n	80022a0 <u8g2_DrawHVLine+0xdc>
			b--;
 8002284:	f10c 33ff 	add.w	r3, ip, #4294967295
 8002288:	b29b      	uxth	r3, r3
	if (a >= d)
 800228a:	e7e5      	b.n	8002258 <u8g2_DrawHVLine+0x94>
		if (a < d) {
 800228c:	4594      	cmp	ip, r2
 800228e:	d909      	bls.n	80022a4 <u8g2_DrawHVLine+0xe0>
			b--;
 8002290:	f10c 33ff 	add.w	r3, ip, #4294967295
 8002294:	b29b      	uxth	r3, r3
	if (a >= d)
 8002296:	e7b9      	b.n	800220c <u8g2_DrawHVLine+0x48>
					y++;
 8002298:	3201      	adds	r2, #1
 800229a:	1ad2      	subs	r2, r2, r3
 800229c:	b292      	uxth	r2, r2
			if (dir == 0) {
 800229e:	e7a3      	b.n	80021e8 <u8g2_DrawHVLine+0x24>
				if (u8g2_clip_intersection2(&x, &len, u8g2->user_x0,
 80022a0:	4621      	mov	r1, r4
 80022a2:	e7d7      	b.n	8002254 <u8g2_DrawHVLine+0x90>
				if (u8g2_clip_intersection2(&y, &len, u8g2->user_y0,
 80022a4:	4622      	mov	r2, r4
 80022a6:	e7af      	b.n	8002208 <u8g2_DrawHVLine+0x44>

080022a8 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80022a8:	b510      	push	{r4, lr}
  if ( v0 < a1 )		// v0 <= a1
 80022aa:	f8b0 404e 	ldrh.w	r4, [r0, #78]	@ 0x4e
{
 80022ae:	f8bd c008 	ldrh.w	ip, [sp, #8]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80022b2:	f8b0 e04c 	ldrh.w	lr, [r0, #76]	@ 0x4c
  if ( v0 < a1 )		// v0 <= a1
 80022b6:	4294      	cmp	r4, r2
 80022b8:	d910      	bls.n	80022dc <u8g2_IsIntersection+0x34>
    if ( v1 > a0 )	// v1 >= a0
 80022ba:	45e6      	cmp	lr, ip
 80022bc:	d301      	bcc.n	80022c2 <u8g2_IsIntersection+0x1a>
      if ( v0 > v1 )	// v0 > v1
 80022be:	4562      	cmp	r2, ip
 80022c0:	d90e      	bls.n	80022e0 <u8g2_IsIntersection+0x38>
  if ( v0 < a1 )		// v0 <= a1
 80022c2:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80022c6:	f8b0 2048 	ldrh.w	r2, [r0, #72]	@ 0x48
  if ( v0 < a1 )		// v0 <= a1
 80022ca:	428c      	cmp	r4, r1
 80022cc:	d90a      	bls.n	80022e4 <u8g2_IsIntersection+0x3c>
    if ( v1 > a0 )	// v1 >= a0
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d30f      	bcc.n	80022f2 <u8g2_IsIntersection+0x4a>
      if ( v0 > v1 )	// v0 > v1
 80022d2:	4299      	cmp	r1, r3
 80022d4:	bf94      	ite	ls
 80022d6:	2000      	movls	r0, #0
 80022d8:	2001      	movhi	r0, #1
}
 80022da:	bd10      	pop	{r4, pc}
    if ( v1 > a0 )	// v1 >= a0
 80022dc:	45e6      	cmp	lr, ip
 80022de:	d3ee      	bcc.n	80022be <u8g2_IsIntersection+0x16>
    return 0; 
 80022e0:	2000      	movs	r0, #0
}
 80022e2:	bd10      	pop	{r4, pc}
    if ( v1 > a0 )	// v1 >= a0
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d2fb      	bcs.n	80022e0 <u8g2_IsIntersection+0x38>
      if ( v0 > v1 )	// v0 > v1
 80022e8:	4299      	cmp	r1, r3
 80022ea:	bf94      	ite	ls
 80022ec:	2000      	movls	r0, #0
 80022ee:	2001      	movhi	r0, #1
 80022f0:	e7f3      	b.n	80022da <u8g2_IsIntersection+0x32>
      return 1;
 80022f2:	2001      	movs	r0, #1
}
 80022f4:	bd10      	pop	{r4, pc}
 80022f6:	bf00      	nop

080022f8 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80022f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022fc:	4615      	mov	r5, r2
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
 80022fe:	f890 4092 	ldrb.w	r4, [r0, #146]	@ 0x92
{
 8002302:	f89d 2018 	ldrb.w	r2, [sp, #24]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8002306:	f005 0c07 	and.w	ip, r5, #7
  mask <<= bit_pos;
 800230a:	f04f 0e01 	mov.w	lr, #1
 800230e:	fa0e fe0c 	lsl.w	lr, lr, ip
  if ( u8g2->draw_color <= 1 )
 8002312:	2c01      	cmp	r4, #1
  mask <<= bit_pos;
 8002314:	fa5f fe8e 	uxtb.w	lr, lr
  if ( u8g2->draw_color <= 1 )
 8002318:	d975      	bls.n	8002406 <u8g2_ll_hvline_vertical_top_lsb+0x10e>
  or_mask = 0;
 800231a:	2400      	movs	r4, #0
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800231c:	6806      	ldr	r6, [r0, #0]
 800231e:	7c36      	ldrb	r6, [r6, #16]
  offset &= ~7;
 8002320:	f025 0507 	bic.w	r5, r5, #7
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002324:	fb05 f606 	mul.w	r6, r5, r6
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
 8002328:	f64f 75f8 	movw	r5, #65528	@ 0xfff8
 800232c:	4035      	ands	r5, r6
  ptr += x;
 800232e:	440d      	add	r5, r1
  ptr = u8g2->tile_buf_ptr;
 8002330:	6b41      	ldr	r1, [r0, #52]	@ 0x34
  ptr += x;
 8002332:	4429      	add	r1, r5
  
  if ( dir == 0 )
 8002334:	2a00      	cmp	r2, #0
 8002336:	d146      	bne.n	80023c6 <u8g2_ll_hvline_vertical_top_lsb+0xce>
 8002338:	1e58      	subs	r0, r3, #1
 800233a:	2802      	cmp	r0, #2
 800233c:	d96e      	bls.n	800241c <u8g2_ll_hvline_vertical_top_lsb+0x124>
 800233e:	4617      	mov	r7, r2
 8002340:	4616      	mov	r6, r2
 8002342:	f364 0707 	bfi	r7, r4, #0, #8
 8002346:	f36e 0607 	bfi	r6, lr, #0, #8
 800234a:	f364 270f 	bfi	r7, r4, #8, #8
 800234e:	f36e 260f 	bfi	r6, lr, #8, #8
 8002352:	1f1d      	subs	r5, r3, #4
 8002354:	f364 4717 	bfi	r7, r4, #16, #8
 8002358:	f36e 4617 	bfi	r6, lr, #16, #8
 800235c:	f3c5 058d 	ubfx	r5, r5, #2, #14
 8002360:	f364 671f 	bfi	r7, r4, #24, #8
 8002364:	f36e 661f 	bfi	r6, lr, #24, #8
 8002368:	3501      	adds	r5, #1
 800236a:	468c      	mov	ip, r1
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 800236c:	f8dc 0000 	ldr.w	r0, [ip]
 8002370:	3201      	adds	r2, #1
 8002372:	4338      	orrs	r0, r7
 8002374:	fa1f f882 	uxth.w	r8, r2
	*ptr ^= xor_mask;
 8002378:	4070      	eors	r0, r6
 800237a:	4545      	cmp	r5, r8
 800237c:	f84c 0b04 	str.w	r0, [ip], #4
	ptr++;
	len--;
      } while( len != 0 );
 8002380:	d8f4      	bhi.n	800236c <u8g2_ll_hvline_vertical_top_lsb+0x74>
 8002382:	00ad      	lsls	r5, r5, #2
 8002384:	b2ad      	uxth	r5, r5
 8002386:	1b5a      	subs	r2, r3, r5
 8002388:	42ab      	cmp	r3, r5
 800238a:	4429      	add	r1, r5
 800238c:	b292      	uxth	r2, r2
 800238e:	d013      	beq.n	80023b8 <u8g2_ll_hvline_vertical_top_lsb+0xc0>
	*ptr |= or_mask;
 8002390:	780b      	ldrb	r3, [r1, #0]
 8002392:	4323      	orrs	r3, r4
	*ptr ^= xor_mask;
 8002394:	ea8e 0303 	eor.w	r3, lr, r3
      } while( len != 0 );
 8002398:	2a01      	cmp	r2, #1
	*ptr ^= xor_mask;
 800239a:	700b      	strb	r3, [r1, #0]
      } while( len != 0 );
 800239c:	d00c      	beq.n	80023b8 <u8g2_ll_hvline_vertical_top_lsb+0xc0>
	*ptr |= or_mask;
 800239e:	784b      	ldrb	r3, [r1, #1]
 80023a0:	4323      	orrs	r3, r4
	*ptr ^= xor_mask;
 80023a2:	ea8e 0303 	eor.w	r3, lr, r3
      } while( len != 0 );
 80023a6:	2a02      	cmp	r2, #2
	*ptr ^= xor_mask;
 80023a8:	704b      	strb	r3, [r1, #1]
      } while( len != 0 );
 80023aa:	d005      	beq.n	80023b8 <u8g2_ll_hvline_vertical_top_lsb+0xc0>
	*ptr |= or_mask;
 80023ac:	788b      	ldrb	r3, [r1, #2]
 80023ae:	ea44 0203 	orr.w	r2, r4, r3
	*ptr ^= xor_mask;
 80023b2:	ea8e 0302 	eor.w	r3, lr, r2
 80023b6:	708b      	strb	r3, [r1, #2]
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80023b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	or_mask <<= 1;
 80023bc:	b2ec      	uxtb	r4, r5
	xor_mask <<= 1;
 80023be:	fa5f fe82 	uxtb.w	lr, r2
    } while( len != 0 );
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f8      	beq.n	80023b8 <u8g2_ll_hvline_vertical_top_lsb+0xc0>
      *ptr |= or_mask;
 80023c6:	780a      	ldrb	r2, [r1, #0]
      bit_pos++;
 80023c8:	f10c 0c01 	add.w	ip, ip, #1
      *ptr |= or_mask;
 80023cc:	4322      	orrs	r2, r4
      *ptr ^= xor_mask;
 80023ce:	ea8e 0202 	eor.w	r2, lr, r2
      len--;
 80023d2:	3b01      	subs	r3, #1
      if ( bit_pos == 0 )
 80023d4:	f01c 0c07 	ands.w	ip, ip, #7
      *ptr ^= xor_mask;
 80023d8:	700a      	strb	r2, [r1, #0]
      len--;
 80023da:	b29b      	uxth	r3, r3
	or_mask <<= 1;
 80023dc:	ea4f 0544 	mov.w	r5, r4, lsl #1
	xor_mask <<= 1;
 80023e0:	ea4f 024e 	mov.w	r2, lr, lsl #1
      if ( bit_pos == 0 )
 80023e4:	d1ea      	bne.n	80023bc <u8g2_ll_hvline_vertical_top_lsb+0xc4>
	if ( u8g2->draw_color <= 1 )
 80023e6:	f890 2092 	ldrb.w	r2, [r0, #146]	@ 0x92
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80023ea:	8f45      	ldrh	r5, [r0, #58]	@ 0x3a
	if ( u8g2->draw_color <= 1 )
 80023ec:	2a01      	cmp	r2, #1
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80023ee:	4429      	add	r1, r5
	if ( u8g2->draw_color <= 1 )
 80023f0:	d904      	bls.n	80023fc <u8g2_ll_hvline_vertical_top_lsb+0x104>
	  xor_mask = 1;
 80023f2:	f04f 0e01 	mov.w	lr, #1
    } while( len != 0 );
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1e5      	bne.n	80023c6 <u8g2_ll_hvline_vertical_top_lsb+0xce>
 80023fa:	e7dd      	b.n	80023b8 <u8g2_ll_hvline_vertical_top_lsb+0xc0>
	if ( u8g2->draw_color != 1 )
 80023fc:	d108      	bne.n	8002410 <u8g2_ll_hvline_vertical_top_lsb+0x118>
	  or_mask  = 1;
 80023fe:	4614      	mov	r4, r2
    } while( len != 0 );
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1e0      	bne.n	80023c6 <u8g2_ll_hvline_vertical_top_lsb+0xce>
 8002404:	e7d8      	b.n	80023b8 <u8g2_ll_hvline_vertical_top_lsb+0xc0>
    or_mask  = mask;
 8002406:	4674      	mov	r4, lr
  if ( u8g2->draw_color != 1 )
 8002408:	d188      	bne.n	800231c <u8g2_ll_hvline_vertical_top_lsb+0x24>
  xor_mask = 0;
 800240a:	f04f 0e00 	mov.w	lr, #0
 800240e:	e785      	b.n	800231c <u8g2_ll_hvline_vertical_top_lsb+0x24>
	  xor_mask = 1;
 8002410:	f04f 0e01 	mov.w	lr, #1
	  or_mask  = 1;
 8002414:	4674      	mov	r4, lr
    } while( len != 0 );
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1d5      	bne.n	80023c6 <u8g2_ll_hvline_vertical_top_lsb+0xce>
 800241a:	e7cd      	b.n	80023b8 <u8g2_ll_hvline_vertical_top_lsb+0xc0>
  if ( dir == 0 )
 800241c:	461a      	mov	r2, r3
 800241e:	e7b7      	b.n	8002390 <u8g2_ll_hvline_vertical_top_lsb+0x98>

08002420 <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002420:	b410      	push	{r4}
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8002422:	f8b0 c046 	ldrh.w	ip, [r0, #70]	@ 0x46
{
 8002426:	f89d 4004 	ldrb.w	r4, [sp, #4]
  yy -= y;
 800242a:	ebac 0202 	sub.w	r2, ip, r2
  
  xx = u8g2->width;
 800242e:	f8b0 c044 	ldrh.w	ip, [r0, #68]	@ 0x44
  xx -= x;
 8002432:	ebac 0101 	sub.w	r1, ip, r1
  yy -= y;
 8002436:	b292      	uxth	r2, r2
  xx -= x;
 8002438:	b289      	uxth	r1, r1
  
  if ( dir == 0 )
 800243a:	b944      	cbnz	r4, 800244e <u8g2_draw_l90_r2+0x2e>
  {
    yy--;
 800243c:	3a01      	subs	r2, #1
    xx -= len;
 800243e:	1ac9      	subs	r1, r1, r3
    yy--;
 8002440:	b292      	uxth	r2, r2
    xx -= len;
 8002442:	b289      	uxth	r1, r1
  {
    xx--;
    yy -= len;
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002444:	9401      	str	r4, [sp, #4]
}
 8002446:	f85d 4b04 	ldr.w	r4, [sp], #4
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 800244a:	f7ff beaf 	b.w	80021ac <u8g2_draw_hv_line_2dir>
  else if ( dir == 1 )
 800244e:	2c01      	cmp	r4, #1
 8002450:	d1f8      	bne.n	8002444 <u8g2_draw_l90_r2+0x24>
    xx--;
 8002452:	3901      	subs	r1, #1
    yy -= len;
 8002454:	1ad2      	subs	r2, r2, r3
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002456:	9401      	str	r4, [sp, #4]
    xx--;
 8002458:	b289      	uxth	r1, r1
}
 800245a:	f85d 4b04 	ldr.w	r4, [sp], #4
    yy -= len;
 800245e:	b292      	uxth	r2, r2
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002460:	f7ff bea4 	b.w	80021ac <u8g2_draw_hv_line_2dir>

08002464 <u8g2_update_page_win_r2>:
  if ( u8g2->height >= u8g2->buf_y1 )
 8002464:	f8b0 3046 	ldrh.w	r3, [r0, #70]	@ 0x46
 8002468:	f8b0 2042 	ldrh.w	r2, [r0, #66]	@ 0x42
{
 800246c:	b510      	push	{r4, lr}
  if ( u8g2->height >= u8g2->buf_y1 )
 800246e:	4293      	cmp	r3, r2
{
 8002470:	4604      	mov	r4, r0
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8002472:	bf28      	it	cs
 8002474:	1a9a      	subcs	r2, r3, r2
  u8g2->user_x0 = 0;
 8002476:	f04f 0100 	mov.w	r1, #0
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 800247a:	f8b0 0044 	ldrh.w	r0, [r0, #68]	@ 0x44
  u8g2->user_y0 = 0;
 800247e:	f8a4 104c 	strh.w	r1, [r4, #76]	@ 0x4c
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8002482:	bf28      	it	cs
 8002484:	f8a4 204c 	strhcs.w	r2, [r4, #76]	@ 0x4c
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8002488:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
  u8g2->user_x0 = 0;
 800248c:	f8a4 1048 	strh.w	r1, [r4, #72]	@ 0x48
{
 8002490:	b082      	sub	sp, #8
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8002492:	1a99      	subs	r1, r3, r2
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 8002494:	f8a4 004a 	strh.w	r0, [r4, #74]	@ 0x4a
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8002498:	f8b4 0056 	ldrh.w	r0, [r4, #86]	@ 0x56
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 800249c:	f8a4 104e 	strh.w	r1, [r4, #78]	@ 0x4e
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80024a0:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 80024a4:	f8b4 2054 	ldrh.w	r2, [r4, #84]	@ 0x54
 80024a8:	9000      	str	r0, [sp, #0]
 80024aa:	f8b4 1050 	ldrh.w	r1, [r4, #80]	@ 0x50
 80024ae:	4620      	mov	r0, r4
 80024b0:	f7ff fefa 	bl	80022a8 <u8g2_IsIntersection>
 80024b4:	b918      	cbnz	r0, 80024be <u8g2_update_page_win_r2+0x5a>
    u8g2->is_page_clip_window_intersection = 0;
 80024b6:	f884 008c 	strb.w	r0, [r4, #140]	@ 0x8c
}
 80024ba:	b002      	add	sp, #8
 80024bc:	bd10      	pop	{r4, pc}
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80024be:	f8b4 3050 	ldrh.w	r3, [r4, #80]	@ 0x50
 80024c2:	f8b4 2048 	ldrh.w	r2, [r4, #72]	@ 0x48
 80024c6:	429a      	cmp	r2, r3
      u8g2->user_x0 = u8g2->clip_x0;
 80024c8:	bf38      	it	cc
 80024ca:	f8a4 3048 	strhcc.w	r3, [r4, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80024ce:	f8b4 204a 	ldrh.w	r2, [r4, #74]	@ 0x4a
 80024d2:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 80024d6:	429a      	cmp	r2, r3
      u8g2->user_x1 = u8g2->clip_x1;
 80024d8:	bf88      	it	hi
 80024da:	f8a4 304a 	strhhi.w	r3, [r4, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80024de:	f8b4 204c 	ldrh.w	r2, [r4, #76]	@ 0x4c
 80024e2:	f8b4 3054 	ldrh.w	r3, [r4, #84]	@ 0x54
 80024e6:	429a      	cmp	r2, r3
      u8g2->user_y0 = u8g2->clip_y0;
 80024e8:	bf38      	it	cc
 80024ea:	f8a4 304c 	strhcc.w	r3, [r4, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80024ee:	f8b4 204e 	ldrh.w	r2, [r4, #78]	@ 0x4e
 80024f2:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
    u8g2->is_page_clip_window_intersection = 1;
 80024f6:	2101      	movs	r1, #1
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80024f8:	429a      	cmp	r2, r3
    u8g2->is_page_clip_window_intersection = 1;
 80024fa:	f884 108c 	strb.w	r1, [r4, #140]	@ 0x8c
      u8g2->user_y1 = u8g2->clip_y1;
 80024fe:	bf88      	it	hi
 8002500:	f8a4 304e 	strhhi.w	r3, [r4, #78]	@ 0x4e
}
 8002504:	b002      	add	sp, #8
 8002506:	bd10      	pop	{r4, pc}

08002508 <u8g2_update_dimension_r2>:
void u8g2_update_dimension_r2(u8g2_t *u8g2)
 8002508:	b510      	push	{r4, lr}
 800250a:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800250e:	6801      	ldr	r1, [r0, #0]
 8002510:	f890 4039 	ldrb.w	r4, [r0, #57]	@ 0x39
 8002514:	00d3      	lsls	r3, r2, #3
 8002516:	8783      	strh	r3, [r0, #60]	@ 0x3c
 8002518:	f891 c010 	ldrb.w	ip, [r1, #16]
 800251c:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
 8002520:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8002524:	f8a0 c03a 	strh.w	ip, [r0, #58]	@ 0x3a
 8002528:	f8a0 e03e 	strh.w	lr, [r0, #62]	@ 0x3e
 800252c:	f891 c011 	ldrb.w	ip, [r1, #17]
 8002530:	4422      	add	r2, r4
 8002532:	4562      	cmp	r2, ip
 8002534:	dd05      	ble.n	8002542 <u8g2_update_dimension_r2+0x3a>
 8002536:	ebac 0c04 	sub.w	ip, ip, r4
 800253a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800253e:	fa1f f38c 	uxth.w	r3, ip
 8002542:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8002546:	8acc      	ldrh	r4, [r1, #22]
 8002548:	2200      	movs	r2, #0
 800254a:	4611      	mov	r1, r2
 800254c:	4473      	add	r3, lr
 800254e:	f36c 010f 	bfi	r1, ip, #0, #16
 8002552:	f36e 020f 	bfi	r2, lr, #0, #16
 8002556:	f363 421f 	bfi	r2, r3, #16, #16
 800255a:	f364 411f 	bfi	r1, r4, #16, #16
 800255e:	e9c0 2110 	strd	r2, r1, [r0, #64]	@ 0x40
 8002562:	bd10      	pop	{r4, pc}

08002564 <u8g2_SetupBuffer>:
{
 8002564:	b538      	push	{r3, r4, r5, lr}
  u8g2->ll_hvline = ll_hvline_cb;
 8002566:	62c3      	str	r3, [r0, #44]	@ 0x2c
  u8g2->is_auto_page_clear = 1;
 8002568:	2301      	movs	r3, #1
  u8g2->font = NULL;
 800256a:	2500      	movs	r5, #0
  u8g2->tile_buf_height = tile_buf_height;
 800256c:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
  u8g2->is_auto_page_clear = 1;
 8002570:	f880 3093 	strb.w	r3, [r0, #147]	@ 0x93
  u8g2->bitmap_transparency = 0;
 8002574:	f44f 7280 	mov.w	r2, #256	@ 0x100
{
 8002578:	9b04      	ldr	r3, [sp, #16]
  u8g2->bitmap_transparency = 0;
 800257a:	f8a0 2091 	strh.w	r2, [r0, #145]	@ 0x91
{
 800257e:	4604      	mov	r4, r0
  u8g2->tile_curr_row = 0;
 8002580:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8002584:	f880 506d 	strb.w	r5, [r0, #109]	@ 0x6d
  u8g2->font_height_mode = 0; /* issue 2046 */
 8002588:	f880 508d 	strb.w	r5, [r0, #141]	@ 0x8d
  u8g2->tile_buf_ptr = buf;
 800258c:	6341      	str	r1, [r0, #52]	@ 0x34
  u8g2->cb = u8g2_cb;
 800258e:	6303      	str	r3, [r0, #48]	@ 0x30
  u8g2->font = NULL;
 8002590:	6585      	str	r5, [r0, #88]	@ 0x58
  u8g2->cb->update_dimension(u8g2);
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4798      	blx	r3
  u8g2->clip_x0 = 0;
 8002596:	4b06      	ldr	r3, [pc, #24]	@ (80025b0 <u8g2_SetupBuffer+0x4c>)
  u8g2->cb->update_page_win(u8g2);
 8002598:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800259a:	4620      	mov	r0, r4
 800259c:	6852      	ldr	r2, [r2, #4]
  u8g2->clip_x0 = 0;
 800259e:	e9c4 3314 	strd	r3, r3, [r4, #80]	@ 0x50
  u8g2->cb->update_page_win(u8g2);
 80025a2:	4790      	blx	r2
  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80025a4:	4620      	mov	r0, r4
 80025a6:	f7ff fd83 	bl	80020b0 <u8g2_SetFontPosBaseline>
  u8g2->font_decode.dir = 0;
 80025aa:	f884 5070 	strb.w	r5, [r4, #112]	@ 0x70
}
 80025ae:	bd38      	pop	{r3, r4, r5, pc}
 80025b0:	ffff0000 	.word	0xffff0000

080025b4 <u8x8_ascii_next>:
}

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
    return 0x0ffff;	/* end of string detected*/
 80025b4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 80025b8:	b119      	cbz	r1, 80025c2 <u8x8_ascii_next+0xe>
  return b;
 80025ba:	290a      	cmp	r1, #10
 80025bc:	bf18      	it	ne
 80025be:	4608      	movne	r0, r1
 80025c0:	4770      	bx	lr
}
 80025c2:	4770      	bx	lr

080025c4 <u8x8_utf8_init>:
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80025c4:	2300      	movs	r3, #0
 80025c6:	f880 3026 	strb.w	r3, [r0, #38]	@ 0x26
}
 80025ca:	4770      	bx	lr

080025cc <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 80025cc:	b410      	push	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 80025ce:	6904      	ldr	r4, [r0, #16]
{
 80025d0:	460a      	mov	r2, r1
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 80025d2:	46a4      	mov	ip, r4
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 80025da:	2120      	movs	r1, #32
 80025dc:	4760      	bx	ip
 80025de:	bf00      	nop

080025e0 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80025e0:	b410      	push	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80025e2:	6904      	ldr	r4, [r0, #16]
{
 80025e4:	4613      	mov	r3, r2
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80025e6:	46a4      	mov	ip, r4
 80025e8:	460a      	mov	r2, r1
}
 80025ea:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80025ee:	2117      	movs	r1, #23
 80025f0:	4760      	bx	ip
 80025f2:	bf00      	nop

080025f4 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 80025f4:	b500      	push	{lr}
 80025f6:	b083      	sub	sp, #12
 80025f8:	460b      	mov	r3, r1
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 80025fa:	f10d 0207 	add.w	r2, sp, #7
 80025fe:	2101      	movs	r1, #1
{
 8002600:	f88d 3007 	strb.w	r3, [sp, #7]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002604:	f7ff ffec 	bl	80025e0 <u8x8_byte_SendBytes>
}
 8002608:	b003      	add	sp, #12
 800260a:	f85d fb04 	ldr.w	pc, [sp], #4
 800260e:	bf00      	nop

08002610 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002610:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002612:	68c4      	ldr	r4, [r0, #12]
{
 8002614:	460a      	mov	r2, r1
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002616:	46a4      	mov	ip, r4
 8002618:	2300      	movs	r3, #0
}
 800261a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800261e:	2115      	movs	r1, #21
 8002620:	4760      	bx	ip
 8002622:	bf00      	nop

08002624 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8002624:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002626:	68c4      	ldr	r4, [r0, #12]
{
 8002628:	460a      	mov	r2, r1
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800262a:	46a4      	mov	ip, r4
 800262c:	2300      	movs	r3, #0
}
 800262e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002632:	2116      	movs	r1, #22
 8002634:	4760      	bx	ip
 8002636:	bf00      	nop

08002638 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002638:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800263a:	68c4      	ldr	r4, [r0, #12]
{
 800263c:	4613      	mov	r3, r2
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800263e:	46a4      	mov	ip, r4
 8002640:	460a      	mov	r2, r1
}
 8002642:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002646:	2117      	movs	r1, #23
 8002648:	4760      	bx	ip
 800264a:	bf00      	nop

0800264c <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 800264c:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 800264e:	68c4      	ldr	r4, [r0, #12]
 8002650:	2300      	movs	r3, #0
 8002652:	46a4      	mov	ip, r4
 8002654:	461a      	mov	r2, r3
}
 8002656:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 800265a:	2118      	movs	r1, #24
 800265c:	4760      	bx	ip
 800265e:	bf00      	nop

08002660 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8002660:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002662:	68c4      	ldr	r4, [r0, #12]
 8002664:	2300      	movs	r3, #0
 8002666:	46a4      	mov	ip, r4
 8002668:	461a      	mov	r2, r3
}
 800266a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 800266e:	2119      	movs	r1, #25
 8002670:	4760      	bx	ip
 8002672:	bf00      	nop

08002674 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8002674:	b570      	push	{r4, r5, r6, lr}
 8002676:	4605      	mov	r5, r0
 8002678:	b082      	sub	sp, #8
 800267a:	460c      	mov	r4, r1
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 800267c:	f894 c000 	ldrb.w	ip, [r4]
    data++;
    switch( cmd )
 8002680:	f1bc 0f19 	cmp.w	ip, #25
 8002684:	d813      	bhi.n	80026ae <u8x8_cad_SendSequence+0x3a>
 8002686:	f1bc 0f17 	cmp.w	ip, #23
 800268a:	d82b      	bhi.n	80026e4 <u8x8_cad_SendSequence+0x70>
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
	  data++;
	  break;
      case U8X8_MSG_CAD_SEND_DATA:
	  v = *data;
	  u8x8_cad_SendData(u8x8, 1, &v);
 800268c:	f10d 0207 	add.w	r2, sp, #7
 8002690:	f04f 0101 	mov.w	r1, #1
 8002694:	4628      	mov	r0, r5
    switch( cmd )
 8002696:	d117      	bne.n	80026c8 <u8x8_cad_SendSequence+0x54>
	  v = *data;
 8002698:	7863      	ldrb	r3, [r4, #1]
 800269a:	f88d 3007 	strb.w	r3, [sp, #7]
	  data++;
 800269e:	3402      	adds	r4, #2
	  u8x8_cad_SendData(u8x8, 1, &v);
 80026a0:	f7ff ffca 	bl	8002638 <u8x8_cad_SendData>
    cmd = *data;
 80026a4:	f894 c000 	ldrb.w	ip, [r4]
    switch( cmd )
 80026a8:	f1bc 0f19 	cmp.w	ip, #25
 80026ac:	d9eb      	bls.n	8002686 <u8x8_cad_SendSequence+0x12>
 80026ae:	f1bc 0ffe 	cmp.w	ip, #254	@ 0xfe
      case U8X8_MSG_CAD_END_TRANSFER:
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
	  break;
      case 0x0fe:
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80026b2:	f04f 0129 	mov.w	r1, #41	@ 0x29
 80026b6:	4628      	mov	r0, r5
    switch( cmd )
 80026b8:	d109      	bne.n	80026ce <u8x8_cad_SendSequence+0x5a>
	  v = *data;
 80026ba:	7862      	ldrb	r2, [r4, #1]
 80026bc:	f88d 2007 	strb.w	r2, [sp, #7]
	  data++;
 80026c0:	3402      	adds	r4, #2
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80026c2:	f000 f941 	bl	8002948 <u8x8_gpio_call>
	  break;
 80026c6:	e7d9      	b.n	800267c <u8x8_cad_SendSequence+0x8>
    switch( cmd )
 80026c8:	f1bc 0f14 	cmp.w	ip, #20
 80026cc:	d801      	bhi.n	80026d2 <u8x8_cad_SendSequence+0x5e>
      default:
	return;
    }
  }
}
 80026ce:	b002      	add	sp, #8
 80026d0:	bd70      	pop	{r4, r5, r6, pc}
	  v = *data;
 80026d2:	7862      	ldrb	r2, [r4, #1]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80026d4:	68ee      	ldr	r6, [r5, #12]
	  v = *data;
 80026d6:	f88d 2007 	strb.w	r2, [sp, #7]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80026da:	2300      	movs	r3, #0
 80026dc:	4661      	mov	r1, ip
	  data++;
 80026de:	3402      	adds	r4, #2
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80026e0:	47b0      	blx	r6
	  break;
 80026e2:	e7cb      	b.n	800267c <u8x8_cad_SendSequence+0x8>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80026e4:	2300      	movs	r3, #0
 80026e6:	68ee      	ldr	r6, [r5, #12]
 80026e8:	461a      	mov	r2, r3
 80026ea:	4661      	mov	r1, ip
 80026ec:	4628      	mov	r0, r5
    data++;
 80026ee:	3401      	adds	r4, #1
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80026f0:	47b0      	blx	r6
	  break;
 80026f2:	e7c3      	b.n	800267c <u8x8_cad_SendSequence+0x8>

080026f4 <u8x8_cad_001>:
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  switch(msg)
 80026f4:	f1a1 0c14 	sub.w	ip, r1, #20
{
 80026f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026fc:	460e      	mov	r6, r1
 80026fe:	4604      	mov	r4, r0
 8002700:	4615      	mov	r5, r2
 8002702:	4698      	mov	r8, r3
  switch(msg)
 8002704:	f1bc 0f05 	cmp.w	ip, #5
 8002708:	d81a      	bhi.n	8002740 <u8x8_cad_001+0x4c>
 800270a:	e8df f00c 	tbb	[pc, ip]
 800270e:	0f06      	.short	0x0f06
 8002710:	0606030f 	.word	0x0606030f
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8002714:	2101      	movs	r1, #1
 8002716:	f7ff ff59 	bl	80025cc <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800271a:	6927      	ldr	r7, [r4, #16]
 800271c:	4643      	mov	r3, r8
 800271e:	462a      	mov	r2, r5
 8002720:	4631      	mov	r1, r6
 8002722:	4620      	mov	r0, r4
 8002724:	46bc      	mov	ip, r7
    default:
      return 0;
  }
  return 1;
}
 8002726:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800272a:	4760      	bx	ip
      u8x8_byte_SetDC(u8x8, 0);
 800272c:	2100      	movs	r1, #0
 800272e:	f7ff ff4d 	bl	80025cc <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002732:	4629      	mov	r1, r5
 8002734:	4620      	mov	r0, r4
 8002736:	f7ff ff5d 	bl	80025f4 <u8x8_byte_SendByte>
  return 1;
 800273a:	2001      	movs	r0, #1
}
 800273c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch(msg)
 8002740:	2000      	movs	r0, #0
 8002742:	e7fb      	b.n	800273c <u8x8_cad_001+0x48>

08002744 <u8x8_d_st7565_64128n>:

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8002744:	290e      	cmp	r1, #14
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_64128n(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800274a:	4605      	mov	r5, r0
 800274c:	4614      	mov	r4, r2
  switch(msg)
 800274e:	d00c      	beq.n	800276a <u8x8_d_st7565_64128n+0x26>
 8002750:	290f      	cmp	r1, #15
 8002752:	d020      	beq.n	8002796 <u8x8_d_st7565_64128n+0x52>
 8002754:	290b      	cmp	r1, #11
 8002756:	d018      	beq.n	800278a <u8x8_d_st7565_64128n+0x46>
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
  {
    /* msg not handled, then try here */
    switch(msg)
 8002758:	290a      	cmp	r1, #10
 800275a:	d05f      	beq.n	800281c <u8x8_d_st7565_64128n+0xd8>
 800275c:	290d      	cmp	r1, #13
 800275e:	d04c      	beq.n	80027fa <u8x8_d_st7565_64128n+0xb6>
 8002760:	2909      	cmp	r1, #9
 8002762:	d053      	beq.n	800280c <u8x8_d_st7565_64128n+0xc8>
 8002764:	2000      	movs	r0, #0
      default:
	return 0;		/* msg unknown */
    }
  }
  return 1;
}
 8002766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      u8x8_cad_StartTransfer(u8x8);
 800276a:	f7ff ff6f 	bl	800264c <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800276e:	2181      	movs	r1, #129	@ 0x81
 8002770:	4628      	mov	r0, r5
 8002772:	f7ff ff4d 	bl	8002610 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
 8002776:	08a1      	lsrs	r1, r4, #2
 8002778:	4628      	mov	r0, r5
 800277a:	f7ff ff53 	bl	8002624 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 800277e:	4628      	mov	r0, r5
 8002780:	f7ff ff6e 	bl	8002660 <u8x8_cad_EndTransfer>
  return 1;
 8002784:	2001      	movs	r0, #1
}
 8002786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ( arg_int == 0 )
 800278a:	2a00      	cmp	r2, #0
 800278c:	d142      	bne.n	8002814 <u8x8_d_st7565_64128n+0xd0>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
 800278e:	492b      	ldr	r1, [pc, #172]	@ (800283c <u8x8_d_st7565_64128n+0xf8>)
 8002790:	f7ff ff70 	bl	8002674 <u8x8_cad_SendSequence>
 8002794:	e7f6      	b.n	8002784 <u8x8_d_st7565_64128n+0x40>
      u8x8_cad_StartTransfer(u8x8);
 8002796:	461e      	mov	r6, r3
 8002798:	f7ff ff58 	bl	800264c <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 800279c:	7973      	ldrb	r3, [r6, #5]
      x += u8x8->x_offset;
 800279e:	f895 1022 	ldrb.w	r1, [r5, #34]	@ 0x22
 80027a2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80027a6:	f001 08ff 	and.w	r8, r1, #255	@ 0xff
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 80027aa:	f3c1 1103 	ubfx	r1, r1, #4, #4
 80027ae:	f041 0110 	orr.w	r1, r1, #16
 80027b2:	4628      	mov	r0, r5
 80027b4:	f7ff ff2c 	bl	8002610 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 80027b8:	f008 010f 	and.w	r1, r8, #15
 80027bc:	4628      	mov	r0, r5
 80027be:	f7ff ff27 	bl	8002610 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 80027c2:	79b1      	ldrb	r1, [r6, #6]
 80027c4:	4628      	mov	r0, r5
 80027c6:	f041 01b0 	orr.w	r1, r1, #176	@ 0xb0
 80027ca:	f7ff ff21 	bl	8002610 <u8x8_cad_SendCmd>
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80027ce:	7933      	ldrb	r3, [r6, #4]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 80027d0:	6837      	ldr	r7, [r6, #0]
      c *= 8;
 80027d2:	00de      	lsls	r6, r3, #3
 80027d4:	b2f6      	uxtb	r6, r6
      if ( c + x > 132u )
 80027d6:	eb06 0308 	add.w	r3, r6, r8
 80027da:	2b84      	cmp	r3, #132	@ 0x84
	c -= x;
 80027dc:	bfc4      	itt	gt
 80027de:	f1c8 0884 	rsbgt	r8, r8, #132	@ 0x84
 80027e2:	fa5f f688 	uxtbgt.w	r6, r8
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 80027e6:	463a      	mov	r2, r7
 80027e8:	4631      	mov	r1, r6
 80027ea:	4628      	mov	r0, r5
 80027ec:	f7ff ff24 	bl	8002638 <u8x8_cad_SendData>
	arg_int--;
 80027f0:	1e63      	subs	r3, r4, #1
      } while( arg_int > 0 );
 80027f2:	f013 04ff 	ands.w	r4, r3, #255	@ 0xff
 80027f6:	d1f6      	bne.n	80027e6 <u8x8_d_st7565_64128n+0xa2>
 80027f8:	e7c1      	b.n	800277e <u8x8_d_st7565_64128n+0x3a>
	if ( arg_int == 0 )
 80027fa:	b9b2      	cbnz	r2, 800282a <u8x8_d_st7565_64128n+0xe6>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
 80027fc:	4910      	ldr	r1, [pc, #64]	@ (8002840 <u8x8_d_st7565_64128n+0xfc>)
 80027fe:	f7ff ff39 	bl	8002674 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002802:	682b      	ldr	r3, [r5, #0]
 8002804:	7c9b      	ldrb	r3, [r3, #18]
 8002806:	f885 3022 	strb.w	r3, [r5, #34]	@ 0x22
 800280a:	e7bb      	b.n	8002784 <u8x8_d_st7565_64128n+0x40>
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_64128n_display_info);
 800280c:	490d      	ldr	r1, [pc, #52]	@ (8002844 <u8x8_d_st7565_64128n+0x100>)
 800280e:	f000 f821 	bl	8002854 <u8x8_d_helper_display_setup_memory>
	break;
 8002812:	e7b7      	b.n	8002784 <u8x8_d_st7565_64128n+0x40>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
 8002814:	490c      	ldr	r1, [pc, #48]	@ (8002848 <u8x8_d_st7565_64128n+0x104>)
 8002816:	f7ff ff2d 	bl	8002674 <u8x8_cad_SendSequence>
 800281a:	e7b3      	b.n	8002784 <u8x8_d_st7565_64128n+0x40>
	u8x8_d_helper_display_init(u8x8);
 800281c:	f000 f820 	bl	8002860 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_64128n_init_seq);
 8002820:	490a      	ldr	r1, [pc, #40]	@ (800284c <u8x8_d_st7565_64128n+0x108>)
 8002822:	4628      	mov	r0, r5
 8002824:	f7ff ff26 	bl	8002674 <u8x8_cad_SendSequence>
	break;
 8002828:	e7ac      	b.n	8002784 <u8x8_d_st7565_64128n+0x40>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
 800282a:	4909      	ldr	r1, [pc, #36]	@ (8002850 <u8x8_d_st7565_64128n+0x10c>)
 800282c:	f7ff ff22 	bl	8002674 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002830:	682b      	ldr	r3, [r5, #0]
 8002832:	7cdb      	ldrb	r3, [r3, #19]
 8002834:	f885 3022 	strb.w	r3, [r5, #34]	@ 0x22
 8002838:	e7a4      	b.n	8002784 <u8x8_d_st7565_64128n+0x40>
 800283a:	bf00      	nop
 800283c:	08009110 	.word	0x08009110
 8002840:	08009100 	.word	0x08009100
 8002844:	080090c0 	.word	0x080090c0
 8002848:	08009108 	.word	0x08009108
 800284c:	080090d8 	.word	0x080090d8
 8002850:	080090f8 	.word	0x080090f8

08002854 <u8x8_d_helper_display_setup_memory>:
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8002854:	6001      	str	r1, [r0, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002856:	7c8b      	ldrb	r3, [r1, #18]
 8002858:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
}
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop

08002860 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8002860:	b538      	push	{r3, r4, r5, lr}
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8002862:	2300      	movs	r3, #0
{
 8002864:	4604      	mov	r4, r0
      u8x8_gpio_Init(u8x8);
 8002866:	461a      	mov	r2, r3
 8002868:	6945      	ldr	r5, [r0, #20]
 800286a:	2128      	movs	r1, #40	@ 0x28
 800286c:	47a8      	blx	r5
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 800286e:	2300      	movs	r3, #0
 8002870:	461a      	mov	r2, r3
 8002872:	68e5      	ldr	r5, [r4, #12]
 8002874:	2114      	movs	r1, #20
 8002876:	4620      	mov	r0, r4
 8002878:	47a8      	blx	r5

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800287a:	4620      	mov	r0, r4
 800287c:	2201      	movs	r2, #1
 800287e:	214b      	movs	r1, #75	@ 0x4b
 8002880:	f000 f862 	bl	8002948 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002884:	6823      	ldr	r3, [r4, #0]
 8002886:	4620      	mov	r0, r4
 8002888:	791a      	ldrb	r2, [r3, #4]
 800288a:	2129      	movs	r1, #41	@ 0x29
 800288c:	f000 f85c 	bl	8002948 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8002890:	4620      	mov	r0, r4
 8002892:	2200      	movs	r2, #0
 8002894:	214b      	movs	r1, #75	@ 0x4b
 8002896:	f000 f857 	bl	8002948 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800289a:	6823      	ldr	r3, [r4, #0]
 800289c:	4620      	mov	r0, r4
 800289e:	791a      	ldrb	r2, [r3, #4]
 80028a0:	2129      	movs	r1, #41	@ 0x29
 80028a2:	f000 f851 	bl	8002948 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80028a6:	4620      	mov	r0, r4
 80028a8:	2201      	movs	r2, #1
 80028aa:	214b      	movs	r1, #75	@ 0x4b
 80028ac:	f000 f84c 	bl	8002948 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80028b0:	6823      	ldr	r3, [r4, #0]
 80028b2:	4620      	mov	r0, r4
 80028b4:	795a      	ldrb	r2, [r3, #5]
 80028b6:	2129      	movs	r1, #41	@ 0x29
}    
 80028b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80028bc:	f000 b844 	b.w	8002948 <u8x8_gpio_call>

080028c0 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80028c0:	b530      	push	{r4, r5, lr}
 80028c2:	b083      	sub	sp, #12
  u8x8_tile_t tile;
  tile.x_pos = x;
  tile.y_pos = y;
  tile.cnt = cnt;
  tile.tile_ptr = tile_ptr;
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80028c4:	6884      	ldr	r4, [r0, #8]
  tile.tile_ptr = tile_ptr;
 80028c6:	9d06      	ldr	r5, [sp, #24]
  tile.x_pos = x;
 80028c8:	f88d 1005 	strb.w	r1, [sp, #5]
  tile.y_pos = y;
 80028cc:	f88d 2006 	strb.w	r2, [sp, #6]
  tile.cnt = cnt;
 80028d0:	f88d 3004 	strb.w	r3, [sp, #4]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80028d4:	2201      	movs	r2, #1
 80028d6:	466b      	mov	r3, sp
 80028d8:	210f      	movs	r1, #15
  tile.tile_ptr = tile_ptr;
 80028da:	9500      	str	r5, [sp, #0]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80028dc:	47a0      	blx	r4
}
 80028de:	b003      	add	sp, #12
 80028e0:	bd30      	pop	{r4, r5, pc}
 80028e2:	bf00      	nop

080028e4 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80028e4:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80028e6:	6884      	ldr	r4, [r0, #8]
 80028e8:	2300      	movs	r3, #0
 80028ea:	46a4      	mov	ip, r4
 80028ec:	461a      	mov	r2, r3
}
 80028ee:	f85d 4b04 	ldr.w	r4, [sp], #4
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80028f2:	2109      	movs	r1, #9
 80028f4:	4760      	bx	ip
 80028f6:	bf00      	nop

080028f8 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80028f8:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 80028fa:	6884      	ldr	r4, [r0, #8]
 80028fc:	2300      	movs	r3, #0
 80028fe:	46a4      	mov	ip, r4
 8002900:	461a      	mov	r2, r3
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 8002902:	f85d 4b04 	ldr.w	r4, [sp], #4
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8002906:	210a      	movs	r1, #10
 8002908:	4760      	bx	ip
 800290a:	bf00      	nop

0800290c <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800290c:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800290e:	6884      	ldr	r4, [r0, #8]
{
 8002910:	460a      	mov	r2, r1
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8002912:	46a4      	mov	ip, r4
 8002914:	2300      	movs	r3, #0
}
 8002916:	f85d 4b04 	ldr.w	r4, [sp], #4
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800291a:	210b      	movs	r1, #11
 800291c:	4760      	bx	ip
 800291e:	bf00      	nop

08002920 <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 8002920:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 8002922:	6884      	ldr	r4, [r0, #8]
{
 8002924:	460a      	mov	r2, r1
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 8002926:	46a4      	mov	ip, r4
 8002928:	2300      	movs	r3, #0
}
 800292a:	f85d 4b04 	ldr.w	r4, [sp], #4
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 800292e:	210e      	movs	r1, #14
 8002930:	4760      	bx	ip
 8002932:	bf00      	nop

08002934 <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8002934:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8002936:	6884      	ldr	r4, [r0, #8]
 8002938:	2300      	movs	r3, #0
 800293a:	46a4      	mov	ip, r4
 800293c:	461a      	mov	r2, r3
}
 800293e:	f85d 4b04 	ldr.w	r4, [sp], #4
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8002942:	2110      	movs	r1, #16
 8002944:	4760      	bx	ip
 8002946:	bf00      	nop

08002948 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8002948:	b410      	push	{r4}
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 800294a:	6944      	ldr	r4, [r0, #20]
 800294c:	2300      	movs	r3, #0
 800294e:	46a4      	mov	ip, r4
}
 8002950:	f85d 4b04 	ldr.w	r4, [sp], #4
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8002954:	4760      	bx	ip
 8002956:	bf00      	nop

08002958 <u8x8_Setup>:
  u8x8_SetupDefaults(u8x8);

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
  u8x8->cad_cb = cad_cb;
  u8x8->byte_cb = byte_cb;
 8002958:	6103      	str	r3, [r0, #16]
    u8x8->display_info = NULL;
 800295a:	2300      	movs	r3, #0
  u8x8->cad_cb = cad_cb;
 800295c:	e9c0 1202 	strd	r1, r2, [r0, #8]
    u8x8->display_info = NULL;
 8002960:	6003      	str	r3, [r0, #0]
    u8x8->is_font_inverse_mode = 0;
 8002962:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8002966:	22ff      	movs	r2, #255	@ 0xff
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8002968:	f880 3026 	strb.w	r3, [r0, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 800296c:	6183      	str	r3, [r0, #24]
{
 800296e:	9b00      	ldr	r3, [sp, #0]
    u8x8->is_font_inverse_mode = 0;
 8002970:	f8a0 1023 	strh.w	r1, [r0, #35]	@ 0x23
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8002974:	f880 2028 	strb.w	r2, [r0, #40]	@ 0x28
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8002978:	6143      	str	r3, [r0, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 800297a:	f7ff bfb3 	b.w	80028e4 <u8x8_SetupMemory>
 800297e:	bf00      	nop

08002980 <Expander_SetPinState>:
 */
HAL_StatusTypeDef Expander_SetPinState(I2C_HandleTypeDef *hi2c,
                                       uint8_t deviceAddress,
                                       uint16_t pin,
                                       uint8_t state)
{
 8002980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_StatusTypeDef status;
    uint8_t regAddress;
    uint8_t currentOutput;

    // Determine which port the pin belongs to.
    if ((pin & 0xFF00) == 0)
 8002984:	2aff      	cmp	r2, #255	@ 0xff
{
 8002986:	b086      	sub	sp, #24
 8002988:	4614      	mov	r4, r2
 800298a:	4606      	mov	r6, r0
 800298c:	461f      	mov	r7, r3
    if ((pin & 0xFF00) == 0)
 800298e:	d92c      	bls.n	80029ea <Expander_SetPinState+0x6a>
                                   &currentOutput,
                                   1,
                                   EXPANDER_I2C_TIMEOUT);
        return status;
    }
    else if ((pin & 0x00FF) == 0)
 8002990:	b2d3      	uxtb	r3, r2
 8002992:	b11b      	cbz	r3, 800299c <Expander_SetPinState+0x1c>
                                   EXPANDER_I2C_TIMEOUT);
        return status;
    }
    else {
        // Invalid pin mask.
        return HAL_ERROR;
 8002994:	2001      	movs	r0, #1
    }
}
 8002996:	b006      	add	sp, #24
 8002998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = HAL_I2C_Mem_Read(hi2c,
 800299c:	2264      	movs	r2, #100	@ 0x64
 800299e:	004d      	lsls	r5, r1, #1
 80029a0:	2301      	movs	r3, #1
 80029a2:	f10d 0817 	add.w	r8, sp, #23
 80029a6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80029aa:	f8cd 8000 	str.w	r8, [sp]
 80029ae:	2203      	movs	r2, #3
 80029b0:	4629      	mov	r1, r5
 80029b2:	f003 fcdf 	bl	8006374 <HAL_I2C_Mem_Read>
        if (status != HAL_OK) {
 80029b6:	2800      	cmp	r0, #0
 80029b8:	d1ed      	bne.n	8002996 <Expander_SetPinState+0x16>
            currentOutput |= pin_mask;
 80029ba:	f89d 3017 	ldrb.w	r3, [sp, #23]
        status = HAL_I2C_Mem_Write(hi2c,
 80029be:	f8cd 8000 	str.w	r8, [sp]
        uint8_t pin_mask = (uint8_t)(pin >> 8);
 80029c2:	0a24      	lsrs	r4, r4, #8
        if (state == HIGH) {
 80029c4:	2f01      	cmp	r7, #1
            currentOutput |= pin_mask;
 80029c6:	bf0c      	ite	eq
 80029c8:	431c      	orreq	r4, r3
            currentOutput &= ~pin_mask;
 80029ca:	ea23 0404 	bicne.w	r4, r3, r4
        status = HAL_I2C_Mem_Write(hi2c,
 80029ce:	2264      	movs	r2, #100	@ 0x64
 80029d0:	2301      	movs	r3, #1
 80029d2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80029d6:	4629      	mov	r1, r5
 80029d8:	2203      	movs	r2, #3
 80029da:	4630      	mov	r0, r6
 80029dc:	f88d 4017 	strb.w	r4, [sp, #23]
 80029e0:	f003 fbd6 	bl	8006190 <HAL_I2C_Mem_Write>
}
 80029e4:	b006      	add	sp, #24
 80029e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = HAL_I2C_Mem_Read(hi2c,
 80029ea:	2264      	movs	r2, #100	@ 0x64
 80029ec:	004d      	lsls	r5, r1, #1
 80029ee:	2301      	movs	r3, #1
 80029f0:	f10d 0817 	add.w	r8, sp, #23
 80029f4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80029f8:	f8cd 8000 	str.w	r8, [sp]
 80029fc:	2202      	movs	r2, #2
 80029fe:	4629      	mov	r1, r5
 8002a00:	f003 fcb8 	bl	8006374 <HAL_I2C_Mem_Read>
        if (status != HAL_OK) {
 8002a04:	2800      	cmp	r0, #0
 8002a06:	d1c6      	bne.n	8002996 <Expander_SetPinState+0x16>
            currentOutput |= (uint8_t)pin;
 8002a08:	f89d 3017 	ldrb.w	r3, [sp, #23]
        status = HAL_I2C_Mem_Write(hi2c,
 8002a0c:	f8cd 8000 	str.w	r8, [sp]
        if (state == HIGH) {
 8002a10:	2f01      	cmp	r7, #1
            currentOutput |= (uint8_t)pin;
 8002a12:	bf0c      	ite	eq
 8002a14:	431c      	orreq	r4, r3
            currentOutput &= ~(uint8_t)pin;
 8002a16:	ea23 0404 	bicne.w	r4, r3, r4
        status = HAL_I2C_Mem_Write(hi2c,
 8002a1a:	f04f 0264 	mov.w	r2, #100	@ 0x64
 8002a1e:	f04f 0301 	mov.w	r3, #1
 8002a22:	e9cd 3201 	strd	r3, r2, [sp, #4]
            currentOutput |= (uint8_t)pin;
 8002a26:	bf08      	it	eq
 8002a28:	b2e4      	uxtbeq	r4, r4
        status = HAL_I2C_Mem_Write(hi2c,
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	4629      	mov	r1, r5
 8002a2e:	4630      	mov	r0, r6
 8002a30:	f88d 4017 	strb.w	r4, [sp, #23]
 8002a34:	f003 fbac 	bl	8006190 <HAL_I2C_Mem_Write>
}
 8002a38:	b006      	add	sp, #24
 8002a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a3e:	bf00      	nop

08002a40 <Expander_InitAllDevices>:
 *
 * @param hi2c Pointer to the I2C handle.
 * @return HAL_StatusTypeDef HAL_OK if all devices are initialized successfully, or an error code.
 */
HAL_StatusTypeDef Expander_InitAllDevices(I2C_HandleTypeDef *hi2c)
{
 8002a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a44:	b087      	sub	sp, #28
    HAL_StatusTypeDef status;

    // List of expander addresses.
    uint8_t addresses[] = {
 8002a46:	4b19      	ldr	r3, [pc, #100]	@ (8002aac <Expander_InitAllDevices+0x6c>)
 8002a48:	9305      	str	r3, [sp, #20]
{
 8002a4a:	4606      	mov	r6, r0
 8002a4c:	ac05      	add	r4, sp, #20
 8002a4e:	f10d 0a18 	add.w	sl, sp, #24
 8002a52:	f10d 0912 	add.w	r9, sp, #18
    port0_config |= (ALERT_PIN_CELL_01_DIR   == PIN_INPUT) ? ALERT_PIN_CELL_01  : 0;
 8002a56:	2501      	movs	r5, #1
    uint8_t port1_config = 0;
 8002a58:	f04f 0800 	mov.w	r8, #0
    status = HAL_I2C_Mem_Write(hi2c,
 8002a5c:	2764      	movs	r7, #100	@ 0x64
    };

    size_t count = sizeof(addresses) / sizeof(addresses[0]);
    for (size_t i = 0; i < count; i++)
    {
        status = Expander_InitPinDirections(hi2c, addresses[i]);
 8002a5e:	f814 bb01 	ldrb.w	fp, [r4], #1
    status = HAL_I2C_Mem_Write(hi2c,
 8002a62:	f8cd 9000 	str.w	r9, [sp]
 8002a66:	2301      	movs	r3, #1
 8002a68:	fa0b fb03 	lsl.w	fp, fp, r3
 8002a6c:	4659      	mov	r1, fp
 8002a6e:	e9cd 5701 	strd	r5, r7, [sp, #4]
 8002a72:	2206      	movs	r2, #6
 8002a74:	4630      	mov	r0, r6
    port0_config |= (ALERT_PIN_CELL_01_DIR   == PIN_INPUT) ? ALERT_PIN_CELL_01  : 0;
 8002a76:	f88d 5012 	strb.w	r5, [sp, #18]
    uint8_t port1_config = 0;
 8002a7a:	f88d 8013 	strb.w	r8, [sp, #19]
    status = HAL_I2C_Mem_Write(hi2c,
 8002a7e:	f003 fb87 	bl	8006190 <HAL_I2C_Mem_Write>
    status = HAL_I2C_Mem_Write(hi2c,
 8002a82:	2301      	movs	r3, #1
 8002a84:	4659      	mov	r1, fp
    if (status != HAL_OK)
 8002a86:	b110      	cbz	r0, 8002a8e <Expander_InitAllDevices+0x4e>
        {
            return status;
        }
    }
    return HAL_OK;
}
 8002a88:	b007      	add	sp, #28
 8002a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    status = HAL_I2C_Mem_Write(hi2c,
 8002a8e:	f10d 0213 	add.w	r2, sp, #19
 8002a92:	e88d 00a4 	stmia.w	sp, {r2, r5, r7}
 8002a96:	4630      	mov	r0, r6
 8002a98:	2207      	movs	r2, #7
 8002a9a:	f003 fb79 	bl	8006190 <HAL_I2C_Mem_Write>
        if (status != HAL_OK)
 8002a9e:	2800      	cmp	r0, #0
 8002aa0:	d1f2      	bne.n	8002a88 <Expander_InitAllDevices+0x48>
    for (size_t i = 0; i < count; i++)
 8002aa2:	4554      	cmp	r4, sl
 8002aa4:	d1db      	bne.n	8002a5e <Expander_InitAllDevices+0x1e>
}
 8002aa6:	b007      	add	sp, #28
 8002aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002aac:	24232221 	.word	0x24232221

08002ab0 <Set_Output_Voltage>:
}

// Function to set the output voltage for a given cell by selecting the appropriate MUX channel.
// Example usage: Set_Output_Voltage(&hi2c2, CELL_1, 2.5f);
void Set_Output_Voltage( CellID cell, float voltage)
{
 8002ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    // Get the correct I2C handle based on cell ID
    I2C_HandleTypeDef *target_i2c;
    if (cell <= 11) {
        target_i2c = &hi2c2;
    } else {
        target_i2c = &hi2c3;
 8002ab4:	4b6c      	ldr	r3, [pc, #432]	@ (8002c68 <Set_Output_Voltage+0x1b8>)
 8002ab6:	4c6d      	ldr	r4, [pc, #436]	@ (8002c6c <Set_Output_Voltage+0x1bc>)
    }

    // Look up the MUX channel for the desired voltage.
    uint8_t mux_channel = 0xFF;
    for (int i = 0; i < 8; i++) {
        if (default_map[i].voltage == voltage) {
 8002ab8:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8002abc:	eeb4 0a67 	vcmp.f32	s0, s15
        target_i2c = &hi2c3;
 8002ac0:	280b      	cmp	r0, #11
 8002ac2:	bf88      	it	hi
 8002ac4:	461c      	movhi	r4, r3
        if (default_map[i].voltage == voltage) {
 8002ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aca:	d03a      	beq.n	8002b42 <Set_Output_Voltage+0x92>
 8002acc:	eef0 7a04 	vmov.f32	s15, #4	@ 0x40200000  2.5
 8002ad0:	eeb4 0a67 	vcmp.f32	s0, s15
 8002ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad8:	f000 80a3 	beq.w	8002c22 <Set_Output_Voltage+0x172>
 8002adc:	eddf 7a64 	vldr	s15, [pc, #400]	@ 8002c70 <Set_Output_Voltage+0x1c0>
 8002ae0:	eeb4 0a67 	vcmp.f32	s0, s15
 8002ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae8:	f000 80b4 	beq.w	8002c54 <Set_Output_Voltage+0x1a4>
 8002aec:	eddf 7a61 	vldr	s15, [pc, #388]	@ 8002c74 <Set_Output_Voltage+0x1c4>
 8002af0:	eeb4 0a67 	vcmp.f32	s0, s15
 8002af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af8:	f000 80ae 	beq.w	8002c58 <Set_Output_Voltage+0x1a8>
 8002afc:	eddf 7a5e 	vldr	s15, [pc, #376]	@ 8002c78 <Set_Output_Voltage+0x1c8>
 8002b00:	eeb4 0a67 	vcmp.f32	s0, s15
 8002b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b08:	f000 80a8 	beq.w	8002c5c <Set_Output_Voltage+0x1ac>
 8002b0c:	eddf 7a5b 	vldr	s15, [pc, #364]	@ 8002c7c <Set_Output_Voltage+0x1cc>
 8002b10:	eeb4 0a67 	vcmp.f32	s0, s15
 8002b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b18:	f000 80a2 	beq.w	8002c60 <Set_Output_Voltage+0x1b0>
 8002b1c:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 8002b20:	eeb4 0a67 	vcmp.f32	s0, s15
 8002b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b28:	f000 809c 	beq.w	8002c64 <Set_Output_Voltage+0x1b4>
 8002b2c:	eddf 7a54 	vldr	s15, [pc, #336]	@ 8002c80 <Set_Output_Voltage+0x1d0>
 8002b30:	eeb4 0a67 	vcmp.f32	s0, s15
 8002b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    for (int i = 0; i < 8; i++) {
 8002b38:	bf08      	it	eq
 8002b3a:	2207      	moveq	r2, #7
        if (default_map[i].voltage == voltage) {
 8002b3c:	d002      	beq.n	8002b44 <Set_Output_Voltage+0x94>

    // Set the multiplexer select lines accordingly.
    Expander_SetPinState(target_i2c, expander_Address, v_set_pin_01, ANG_MUX_PIN_A);
    Expander_SetPinState(target_i2c, expander_Address, v_set_pin_02, ANG_MUX_PIN_B);
    Expander_SetPinState(target_i2c, expander_Address, v_set_pin_03, ANG_MUX_PIN_C);
}
 8002b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (int i = 0; i < 8; i++) {
 8002b42:	2200      	movs	r2, #0
            mux_channel = default_map[i].mux_channel;
 8002b44:	4b4f      	ldr	r3, [pc, #316]	@ (8002c84 <Set_Output_Voltage+0x1d4>)
 8002b46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002b4a:	791a      	ldrb	r2, [r3, #4]
    if (mux_channel == 0xFF) return; // Voltage not found
 8002b4c:	2aff      	cmp	r2, #255	@ 0xff
 8002b4e:	d0f6      	beq.n	8002b3e <Set_Output_Voltage+0x8e>
    switch(cell)
 8002b50:	3801      	subs	r0, #1
    uint8_t ANG_MUX_PIN_A = (mux_channel >> 0) & 0x01;
 8002b52:	f002 0301 	and.w	r3, r2, #1
    uint8_t ANG_MUX_PIN_B = (mux_channel >> 1) & 0x01;
 8002b56:	f3c2 0740 	ubfx	r7, r2, #1, #1
    uint8_t ANG_MUX_PIN_C = (mux_channel >> 2) & 0x01;
 8002b5a:	f3c2 0580 	ubfx	r5, r2, #2, #1
    switch(cell)
 8002b5e:	2816      	cmp	r0, #22
 8002b60:	d871      	bhi.n	8002c46 <Set_Output_Voltage+0x196>
 8002b62:	e8df f000 	tbb	[pc, r0]
 8002b66:	680c      	.short	0x680c
 8002b68:	4139322b 	.word	0x4139322b
 8002b6c:	24574f48 	.word	0x24574f48
 8002b70:	680c7060 	.word	0x680c7060
 8002b74:	4139322b 	.word	0x4139322b
 8002b78:	24574f48 	.word	0x24574f48
 8002b7c:	60          	.byte	0x60
 8002b7d:	00          	.byte	0x00
 8002b7e:	f04f 0820 	mov.w	r8, #32
 8002b82:	f04f 0940 	mov.w	r9, #64	@ 0x40
 8002b86:	2280      	movs	r2, #128	@ 0x80
 8002b88:	2621      	movs	r6, #33	@ 0x21
    Expander_SetPinState(target_i2c, expander_Address, v_set_pin_01, ANG_MUX_PIN_A);
 8002b8a:	4631      	mov	r1, r6
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	f7ff fef7 	bl	8002980 <Expander_SetPinState>
    Expander_SetPinState(target_i2c, expander_Address, v_set_pin_02, ANG_MUX_PIN_B);
 8002b92:	463b      	mov	r3, r7
 8002b94:	464a      	mov	r2, r9
 8002b96:	4631      	mov	r1, r6
 8002b98:	4620      	mov	r0, r4
 8002b9a:	f7ff fef1 	bl	8002980 <Expander_SetPinState>
    Expander_SetPinState(target_i2c, expander_Address, v_set_pin_03, ANG_MUX_PIN_C);
 8002b9e:	462b      	mov	r3, r5
 8002ba0:	4642      	mov	r2, r8
 8002ba2:	4631      	mov	r1, r6
 8002ba4:	4620      	mov	r0, r4
}
 8002ba6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    Expander_SetPinState(target_i2c, expander_Address, v_set_pin_03, ANG_MUX_PIN_C);
 8002baa:	f7ff bee9 	b.w	8002980 <Expander_SetPinState>
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8002bae:	f04f 0820 	mov.w	r8, #32
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8002bb2:	f04f 0940 	mov.w	r9, #64	@ 0x40
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8002bb6:	2280      	movs	r2, #128	@ 0x80
            *expander_Address = GPIO_EXPANDER_ID_04;
 8002bb8:	2624      	movs	r6, #36	@ 0x24
            break;
 8002bba:	e7e6      	b.n	8002b8a <Set_Output_Voltage+0xda>
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8002bbc:	f04f 0808 	mov.w	r8, #8
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8002bc0:	f04f 0904 	mov.w	r9, #4
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8002bc4:	2202      	movs	r2, #2
            *expander_Address = GPIO_EXPANDER_ID_02;
 8002bc6:	2622      	movs	r6, #34	@ 0x22
            break;
 8002bc8:	e7df      	b.n	8002b8a <Set_Output_Voltage+0xda>
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8002bca:	f04f 0820 	mov.w	r8, #32
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8002bce:	f04f 0940 	mov.w	r9, #64	@ 0x40
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8002bd2:	2280      	movs	r2, #128	@ 0x80
            *expander_Address = GPIO_EXPANDER_ID_02;
 8002bd4:	2622      	movs	r6, #34	@ 0x22
            break;
 8002bd6:	e7d8      	b.n	8002b8a <Set_Output_Voltage+0xda>
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8002bd8:	f44f 5880 	mov.w	r8, #4096	@ 0x1000
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8002bdc:	f44f 5900 	mov.w	r9, #8192	@ 0x2000
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8002be0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
            *expander_Address = GPIO_EXPANDER_ID_02;
 8002be4:	2622      	movs	r6, #34	@ 0x22
            break;
 8002be6:	e7d0      	b.n	8002b8a <Set_Output_Voltage+0xda>
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8002be8:	f04f 0808 	mov.w	r8, #8
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8002bec:	f04f 0904 	mov.w	r9, #4
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8002bf0:	2202      	movs	r2, #2
            *expander_Address = GPIO_EXPANDER_ID_03;
 8002bf2:	2623      	movs	r6, #35	@ 0x23
            break;
 8002bf4:	e7c9      	b.n	8002b8a <Set_Output_Voltage+0xda>
            *v_set_pin_03 = CELL_02_VOLTAGE_03;
 8002bf6:	f04f 0820 	mov.w	r8, #32
            *v_set_pin_02 = CELL_02_VOLTAGE_02;
 8002bfa:	f04f 0940 	mov.w	r9, #64	@ 0x40
            *v_set_pin_01 = CELL_02_VOLTAGE_01;
 8002bfe:	2280      	movs	r2, #128	@ 0x80
            *expander_Address = GPIO_EXPANDER_ID_03;
 8002c00:	2623      	movs	r6, #35	@ 0x23
            break;
 8002c02:	e7c2      	b.n	8002b8a <Set_Output_Voltage+0xda>
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8002c04:	f44f 5880 	mov.w	r8, #4096	@ 0x1000
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8002c08:	f44f 5900 	mov.w	r9, #8192	@ 0x2000
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8002c0c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
            *expander_Address = GPIO_EXPANDER_ID_03;
 8002c10:	2623      	movs	r6, #35	@ 0x23
            break;
 8002c12:	e7ba      	b.n	8002b8a <Set_Output_Voltage+0xda>
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8002c14:	f04f 0808 	mov.w	r8, #8
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8002c18:	f04f 0904 	mov.w	r9, #4
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8002c1c:	2202      	movs	r2, #2
            *expander_Address = GPIO_EXPANDER_ID_04;
 8002c1e:	2624      	movs	r6, #36	@ 0x24
            break;
 8002c20:	e7b3      	b.n	8002b8a <Set_Output_Voltage+0xda>
    for (int i = 0; i < 8; i++) {
 8002c22:	2201      	movs	r2, #1
 8002c24:	e78e      	b.n	8002b44 <Set_Output_Voltage+0x94>
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8002c26:	f44f 5880 	mov.w	r8, #4096	@ 0x1000
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8002c2a:	f44f 5900 	mov.w	r9, #8192	@ 0x2000
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8002c2e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
            *expander_Address = GPIO_EXPANDER_ID_04;
 8002c32:	2624      	movs	r6, #36	@ 0x24
 8002c34:	e7a9      	b.n	8002b8a <Set_Output_Voltage+0xda>
            *v_set_pin_03 = CELL_03_VOLTAGE_03;
 8002c36:	f44f 5880 	mov.w	r8, #4096	@ 0x1000
            *v_set_pin_02 = CELL_03_VOLTAGE_02;
 8002c3a:	f44f 5900 	mov.w	r9, #8192	@ 0x2000
            *v_set_pin_01 = CELL_03_VOLTAGE_01;
 8002c3e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
            *expander_Address = GPIO_EXPANDER_ID_01;
 8002c42:	2621      	movs	r6, #33	@ 0x21
 8002c44:	e7a1      	b.n	8002b8a <Set_Output_Voltage+0xda>
            *v_set_pin_03 = CELL_01_VOLTAGE_03;
 8002c46:	f04f 0808 	mov.w	r8, #8
            *v_set_pin_02 = CELL_01_VOLTAGE_02;
 8002c4a:	f04f 0904 	mov.w	r9, #4
            *v_set_pin_01 = CELL_01_VOLTAGE_01;
 8002c4e:	2202      	movs	r2, #2
            *expander_Address = GPIO_EXPANDER_ID_01;
 8002c50:	2621      	movs	r6, #33	@ 0x21
 8002c52:	e79a      	b.n	8002b8a <Set_Output_Voltage+0xda>
    for (int i = 0; i < 8; i++) {
 8002c54:	2202      	movs	r2, #2
 8002c56:	e775      	b.n	8002b44 <Set_Output_Voltage+0x94>
 8002c58:	2203      	movs	r2, #3
 8002c5a:	e773      	b.n	8002b44 <Set_Output_Voltage+0x94>
 8002c5c:	2204      	movs	r2, #4
 8002c5e:	e771      	b.n	8002b44 <Set_Output_Voltage+0x94>
 8002c60:	2205      	movs	r2, #5
 8002c62:	e76f      	b.n	8002b44 <Set_Output_Voltage+0x94>
 8002c64:	2206      	movs	r2, #6
 8002c66:	e76d      	b.n	8002b44 <Set_Output_Voltage+0x94>
 8002c68:	200014a0 	.word	0x200014a0
 8002c6c:	200014f4 	.word	0x200014f4
 8002c70:	40333333 	.word	0x40333333
 8002c74:	40533333 	.word	0x40533333
 8002c78:	4059999a 	.word	0x4059999a
 8002c7c:	40666666 	.word	0x40666666
 8002c80:	40866666 	.word	0x40866666
 8002c84:	08009118 	.word	0x08009118

08002c88 <Set_LED_status>:

void Set_LED_status ( CellID cell, uint8_t LED_state)

{
 8002c88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    // Get the correct I2C handle based on cell ID
    I2C_HandleTypeDef *target_i2c;
    if (cell <= 11) {
        target_i2c = &hi2c2;
    } else {
        target_i2c = &hi2c3;
 8002c8c:	4a4b      	ldr	r2, [pc, #300]	@ (8002dbc <Set_LED_status+0x134>)
 8002c8e:	4c4c      	ldr	r4, [pc, #304]	@ (8002dc0 <Set_LED_status+0x138>)
    switch(cell)
 8002c90:	1e43      	subs	r3, r0, #1
{
 8002c92:	b087      	sub	sp, #28
 8002c94:	460e      	mov	r6, r1
        target_i2c = &hi2c3;
 8002c96:	280b      	cmp	r0, #11
 8002c98:	bf88      	it	hi
 8002c9a:	4614      	movhi	r4, r2
    switch(cell)
 8002c9c:	2b16      	cmp	r3, #22
 8002c9e:	f200 808b 	bhi.w	8002db8 <Set_LED_status+0x130>
 8002ca2:	e8df f003 	tbb	[pc, r3]
 8002ca6:	317d      	.short	0x317d
 8002ca8:	5b835d0c 	.word	0x5b835d0c
 8002cac:	716f6963 	.word	0x716f6963
 8002cb0:	317d8977 	.word	0x317d8977
 8002cb4:	5b835d0c 	.word	0x5b835d0c
 8002cb8:	716f6963 	.word	0x716f6963
 8002cbc:	77          	.byte	0x77
 8002cbd:	00          	.byte	0x00
 8002cbe:	2744      	movs	r7, #68	@ 0x44
        status = HAL_I2C_Mem_Read(hi2c,
 8002cc0:	2264      	movs	r2, #100	@ 0x64
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	f10d 0517 	add.w	r5, sp, #23
 8002cc8:	9202      	str	r2, [sp, #8]
 8002cca:	e9cd 5300 	strd	r5, r3, [sp]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	4639      	mov	r1, r7
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	f003 fb4e 	bl	8006374 <HAL_I2C_Mem_Read>
        if (status != HAL_OK) {
 8002cd8:	b998      	cbnz	r0, 8002d02 <Set_LED_status+0x7a>
            currentOutput |= (uint8_t)pin;
 8002cda:	f89d 3017 	ldrb.w	r3, [sp, #23]
        status = HAL_I2C_Mem_Write(hi2c,
 8002cde:	9500      	str	r5, [sp, #0]
        if (state == HIGH) {
 8002ce0:	2e01      	cmp	r6, #1
            currentOutput |= (uint8_t)pin;
 8002ce2:	bf0c      	ite	eq
 8002ce4:	f043 0610 	orreq.w	r6, r3, #16
            currentOutput &= ~(uint8_t)pin;
 8002ce8:	f003 06ef 	andne.w	r6, r3, #239	@ 0xef
        status = HAL_I2C_Mem_Write(hi2c,
 8002cec:	2264      	movs	r2, #100	@ 0x64
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002cf4:	4639      	mov	r1, r7
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	4620      	mov	r0, r4
 8002cfa:	f88d 6017 	strb.w	r6, [sp, #23]
 8002cfe:	f003 fa47 	bl	8006190 <HAL_I2C_Mem_Write>
    get_cell_control_params(cell, &expander_Address, &v_set_pin_01, &v_set_pin_02, &v_set_pin_03 ,&LED_PIN);

    // Set the multiplexer select lines accordingly.
    Expander_SetPinState(target_i2c, expander_Address, LED_PIN, LED_state);

}
 8002d02:	b007      	add	sp, #28
 8002d04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch(cell)
 8002d08:	f04f 08fb 	mov.w	r8, #251	@ 0xfb
 8002d0c:	f04f 0904 	mov.w	r9, #4
 8002d10:	2742      	movs	r7, #66	@ 0x42
        status = HAL_I2C_Mem_Read(hi2c,
 8002d12:	2264      	movs	r2, #100	@ 0x64
 8002d14:	2301      	movs	r3, #1
 8002d16:	f10d 0517 	add.w	r5, sp, #23
 8002d1a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002d1e:	9500      	str	r5, [sp, #0]
 8002d20:	2203      	movs	r2, #3
 8002d22:	4639      	mov	r1, r7
 8002d24:	4620      	mov	r0, r4
 8002d26:	f003 fb25 	bl	8006374 <HAL_I2C_Mem_Read>
        if (status != HAL_OK) {
 8002d2a:	2800      	cmp	r0, #0
 8002d2c:	d1e9      	bne.n	8002d02 <Set_LED_status+0x7a>
            currentOutput |= pin_mask;
 8002d2e:	f89d 3017 	ldrb.w	r3, [sp, #23]
        status = HAL_I2C_Mem_Write(hi2c,
 8002d32:	9500      	str	r5, [sp, #0]
        if (state == HIGH) {
 8002d34:	2e01      	cmp	r6, #1
            currentOutput |= pin_mask;
 8002d36:	bf0c      	ite	eq
 8002d38:	ea49 0603 	orreq.w	r6, r9, r3
            currentOutput &= ~pin_mask;
 8002d3c:	ea08 0603 	andne.w	r6, r8, r3
        status = HAL_I2C_Mem_Write(hi2c,
 8002d40:	2264      	movs	r2, #100	@ 0x64
 8002d42:	2301      	movs	r3, #1
 8002d44:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002d48:	4639      	mov	r1, r7
 8002d4a:	2203      	movs	r2, #3
 8002d4c:	4620      	mov	r0, r4
 8002d4e:	f88d 6017 	strb.w	r6, [sp, #23]
 8002d52:	f003 fa1d 	bl	8006190 <HAL_I2C_Mem_Write>
}
 8002d56:	b007      	add	sp, #28
 8002d58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch(cell)
 8002d5c:	2746      	movs	r7, #70	@ 0x46
 8002d5e:	e7af      	b.n	8002cc0 <Set_LED_status+0x38>
 8002d60:	f04f 08fd 	mov.w	r8, #253	@ 0xfd
 8002d64:	f04f 0902 	mov.w	r9, #2
 8002d68:	2744      	movs	r7, #68	@ 0x44
 8002d6a:	e7d2      	b.n	8002d12 <Set_LED_status+0x8a>
 8002d6c:	f04f 08fd 	mov.w	r8, #253	@ 0xfd
 8002d70:	f04f 0902 	mov.w	r9, #2
 8002d74:	2746      	movs	r7, #70	@ 0x46
 8002d76:	e7cc      	b.n	8002d12 <Set_LED_status+0x8a>
 8002d78:	f04f 08fb 	mov.w	r8, #251	@ 0xfb
 8002d7c:	f04f 0904 	mov.w	r9, #4
 8002d80:	2746      	movs	r7, #70	@ 0x46
 8002d82:	e7c6      	b.n	8002d12 <Set_LED_status+0x8a>
 8002d84:	2748      	movs	r7, #72	@ 0x48
 8002d86:	e79b      	b.n	8002cc0 <Set_LED_status+0x38>
 8002d88:	f04f 08fd 	mov.w	r8, #253	@ 0xfd
 8002d8c:	f04f 0902 	mov.w	r9, #2
 8002d90:	2748      	movs	r7, #72	@ 0x48
 8002d92:	e7be      	b.n	8002d12 <Set_LED_status+0x8a>
 8002d94:	f04f 08fb 	mov.w	r8, #251	@ 0xfb
 8002d98:	f04f 0904 	mov.w	r9, #4
 8002d9c:	2748      	movs	r7, #72	@ 0x48
 8002d9e:	e7b8      	b.n	8002d12 <Set_LED_status+0x8a>
 8002da0:	f04f 08fd 	mov.w	r8, #253	@ 0xfd
 8002da4:	f04f 0902 	mov.w	r9, #2
 8002da8:	2742      	movs	r7, #66	@ 0x42
 8002daa:	e7b2      	b.n	8002d12 <Set_LED_status+0x8a>
 8002dac:	f04f 08fb 	mov.w	r8, #251	@ 0xfb
 8002db0:	f04f 0904 	mov.w	r9, #4
 8002db4:	2744      	movs	r7, #68	@ 0x44
 8002db6:	e7ac      	b.n	8002d12 <Set_LED_status+0x8a>
 8002db8:	2742      	movs	r7, #66	@ 0x42
 8002dba:	e781      	b.n	8002cc0 <Set_LED_status+0x38>
 8002dbc:	200014a0 	.word	0x200014a0
 8002dc0:	200014f4 	.word	0x200014f4

08002dc4 <INA229_config>:
/*
 *  ======== INA229_config ========
 * Configure device with current settings.
 */
void INA229_config(INA229_Handle sensor)
{
 8002dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dc8:	4604      	mov	r4, r0
 8002dca:	b084      	sub	sp, #16
    //Initialize the bus containing this sensor
    mcu_spiInit(sensor->busId);
 8002dcc:	7f00      	ldrb	r0, [r0, #28]
 8002dce:	f000 f973 	bl	80030b8 <mcu_spiInit>

    //Write sensor Configuration Registers
    INA229_writeReg(sensor, INA229_config_register, sensor->configRegister);
 8002dd2:	f8b4 8000 	ldrh.w	r8, [r4]
    uint8_t rxBuf[3] = {0};
 8002dd6:	4a77      	ldr	r2, [pc, #476]	@ (8002fb4 <INA229_config+0x1f0>)
    txBuf[2] = LSB(value);
 8002dd8:	f88d 800a 	strb.w	r8, [sp, #10]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002ddc:	af03      	add	r7, sp, #12
 8002dde:	9700      	str	r7, [sp, #0]
    txBuf[1] = MSB(value);
 8002de0:	ea4f 2318 	mov.w	r3, r8, lsr #8
    uint8_t rxBuf[3] = {0};
 8002de4:	8816      	ldrh	r6, [r2, #0]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002de6:	7f61      	ldrb	r1, [r4, #29]
    txBuf[1] = MSB(value);
 8002de8:	f88d 3009 	strb.w	r3, [sp, #9]
    uint8_t rxBuf[3] = {0};
 8002dec:	2500      	movs	r5, #0
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002dee:	ab02      	add	r3, sp, #8
 8002df0:	7f20      	ldrb	r0, [r4, #28]
    uint8_t rxBuf[3] = {0};
 8002df2:	f88d 500e 	strb.w	r5, [sp, #14]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002df6:	2203      	movs	r2, #3
        sensor->adcrange = value & INA229_config_register_adcrange_4096mV;
 8002df8:	f008 0810 	and.w	r8, r8, #16
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002dfc:	f88d 5008 	strb.w	r5, [sp, #8]
    uint8_t rxBuf[3] = {0};
 8002e00:	f8ad 600c 	strh.w	r6, [sp, #12]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002e04:	f000 f95a 	bl	80030bc <mcu_spiTransfer>
        sensor->adcrange = value & INA229_config_register_adcrange_4096mV;
 8002e08:	f8a4 8016 	strh.w	r8, [r4, #22]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002e0c:	9700      	str	r7, [sp, #0]
    INA229_writeReg(sensor, INA229_adc_config_register, sensor->adcConfigRegister);
 8002e0e:	8863      	ldrh	r3, [r4, #2]
    txBuf[2] = LSB(value);
 8002e10:	f88d 300a 	strb.w	r3, [sp, #10]
    txBuf[1] = MSB(value);
 8002e14:	0a1b      	lsrs	r3, r3, #8
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002e16:	7f61      	ldrb	r1, [r4, #29]
    txBuf[1] = MSB(value);
 8002e18:	f88d 3009 	strb.w	r3, [sp, #9]
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002e1c:	f04f 0c04 	mov.w	ip, #4
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002e20:	ab02      	add	r3, sp, #8
 8002e22:	7f20      	ldrb	r0, [r4, #28]
    uint8_t rxBuf[3] = {0};
 8002e24:	f88d 500e 	strb.w	r5, [sp, #14]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002e28:	2203      	movs	r2, #3
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002e2a:	f88d c008 	strb.w	ip, [sp, #8]
    uint8_t rxBuf[3] = {0};
 8002e2e:	f8ad 600c 	strh.w	r6, [sp, #12]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002e32:	f000 f943 	bl	80030bc <mcu_spiTransfer>
 8002e36:	9700      	str	r7, [sp, #0]
    INA229_writeReg(sensor, INA229_shunt_cal_register, sensor->shuntCalRegister);
 8002e38:	88a3      	ldrh	r3, [r4, #4]
    txBuf[2] = LSB(value);
 8002e3a:	f88d 300a 	strb.w	r3, [sp, #10]
    txBuf[1] = MSB(value);
 8002e3e:	0a1b      	lsrs	r3, r3, #8
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002e40:	7f61      	ldrb	r1, [r4, #29]
    txBuf[1] = MSB(value);
 8002e42:	f88d 3009 	strb.w	r3, [sp, #9]
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002e46:	f04f 0c08 	mov.w	ip, #8
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002e4a:	ab02      	add	r3, sp, #8
 8002e4c:	7f20      	ldrb	r0, [r4, #28]
    uint8_t rxBuf[3] = {0};
 8002e4e:	f88d 500e 	strb.w	r5, [sp, #14]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002e52:	2203      	movs	r2, #3
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002e54:	f88d c008 	strb.w	ip, [sp, #8]
    uint8_t rxBuf[3] = {0};
 8002e58:	f8ad 600c 	strh.w	r6, [sp, #12]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002e5c:	f000 f92e 	bl	80030bc <mcu_spiTransfer>
 8002e60:	9700      	str	r7, [sp, #0]
    INA229_writeReg(sensor, INA229_shunt_tempco_register, sensor->shuntTempcoRegister);
 8002e62:	88e3      	ldrh	r3, [r4, #6]
    txBuf[2] = LSB(value);
 8002e64:	f88d 300a 	strb.w	r3, [sp, #10]
    txBuf[1] = MSB(value);
 8002e68:	0a1b      	lsrs	r3, r3, #8
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002e6a:	7f61      	ldrb	r1, [r4, #29]
    txBuf[1] = MSB(value);
 8002e6c:	f88d 3009 	strb.w	r3, [sp, #9]
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002e70:	f04f 0c0c 	mov.w	ip, #12
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002e74:	ab02      	add	r3, sp, #8
 8002e76:	7f20      	ldrb	r0, [r4, #28]
    uint8_t rxBuf[3] = {0};
 8002e78:	f88d 500e 	strb.w	r5, [sp, #14]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002e7c:	2203      	movs	r2, #3
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002e7e:	f88d c008 	strb.w	ip, [sp, #8]
    uint8_t rxBuf[3] = {0};
 8002e82:	f8ad 600c 	strh.w	r6, [sp, #12]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002e86:	f000 f919 	bl	80030bc <mcu_spiTransfer>
 8002e8a:	9700      	str	r7, [sp, #0]
    INA229_writeReg(sensor, INA229_diag_alrt_register, sensor->diagAlrtRegister);
 8002e8c:	8923      	ldrh	r3, [r4, #8]
    txBuf[2] = LSB(value);
 8002e8e:	f88d 300a 	strb.w	r3, [sp, #10]
    txBuf[1] = MSB(value);
 8002e92:	0a1b      	lsrs	r3, r3, #8
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002e94:	7f61      	ldrb	r1, [r4, #29]
    txBuf[1] = MSB(value);
 8002e96:	f88d 3009 	strb.w	r3, [sp, #9]
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002e9a:	f04f 0c2c 	mov.w	ip, #44	@ 0x2c
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002e9e:	ab02      	add	r3, sp, #8
 8002ea0:	7f20      	ldrb	r0, [r4, #28]
    uint8_t rxBuf[3] = {0};
 8002ea2:	f88d 500e 	strb.w	r5, [sp, #14]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002ea6:	2203      	movs	r2, #3
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002ea8:	f88d c008 	strb.w	ip, [sp, #8]
    uint8_t rxBuf[3] = {0};
 8002eac:	f8ad 600c 	strh.w	r6, [sp, #12]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002eb0:	f000 f904 	bl	80030bc <mcu_spiTransfer>
 8002eb4:	9700      	str	r7, [sp, #0]
    INA229_writeReg(sensor, INA229_sovl_register, sensor->sovlRegister);
 8002eb6:	8963      	ldrh	r3, [r4, #10]
    txBuf[2] = LSB(value);
 8002eb8:	f88d 300a 	strb.w	r3, [sp, #10]
    txBuf[1] = MSB(value);
 8002ebc:	0a1b      	lsrs	r3, r3, #8
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002ebe:	7f61      	ldrb	r1, [r4, #29]
    txBuf[1] = MSB(value);
 8002ec0:	f88d 3009 	strb.w	r3, [sp, #9]
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002ec4:	f04f 0c30 	mov.w	ip, #48	@ 0x30
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002ec8:	ab02      	add	r3, sp, #8
 8002eca:	7f20      	ldrb	r0, [r4, #28]
    uint8_t rxBuf[3] = {0};
 8002ecc:	f88d 500e 	strb.w	r5, [sp, #14]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002ed0:	2203      	movs	r2, #3
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002ed2:	f88d c008 	strb.w	ip, [sp, #8]
    uint8_t rxBuf[3] = {0};
 8002ed6:	f8ad 600c 	strh.w	r6, [sp, #12]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002eda:	f000 f8ef 	bl	80030bc <mcu_spiTransfer>
 8002ede:	9700      	str	r7, [sp, #0]
    INA229_writeReg(sensor, INA229_suvl_register, sensor->suvlRegister);
 8002ee0:	89a3      	ldrh	r3, [r4, #12]
    txBuf[2] = LSB(value);
 8002ee2:	f88d 300a 	strb.w	r3, [sp, #10]
    txBuf[1] = MSB(value);
 8002ee6:	0a1b      	lsrs	r3, r3, #8
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002ee8:	7f61      	ldrb	r1, [r4, #29]
    txBuf[1] = MSB(value);
 8002eea:	f88d 3009 	strb.w	r3, [sp, #9]
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002eee:	f04f 0c34 	mov.w	ip, #52	@ 0x34
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002ef2:	ab02      	add	r3, sp, #8
 8002ef4:	7f20      	ldrb	r0, [r4, #28]
    uint8_t rxBuf[3] = {0};
 8002ef6:	f88d 500e 	strb.w	r5, [sp, #14]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002efa:	2203      	movs	r2, #3
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002efc:	f88d c008 	strb.w	ip, [sp, #8]
    uint8_t rxBuf[3] = {0};
 8002f00:	f8ad 600c 	strh.w	r6, [sp, #12]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002f04:	f000 f8da 	bl	80030bc <mcu_spiTransfer>
 8002f08:	9700      	str	r7, [sp, #0]
    INA229_writeReg(sensor, INA229_bovl_register, sensor->bovlRegister);
 8002f0a:	89e3      	ldrh	r3, [r4, #14]
    txBuf[2] = LSB(value);
 8002f0c:	f88d 300a 	strb.w	r3, [sp, #10]
    txBuf[1] = MSB(value);
 8002f10:	0a1b      	lsrs	r3, r3, #8
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002f12:	7f61      	ldrb	r1, [r4, #29]
    txBuf[1] = MSB(value);
 8002f14:	f88d 3009 	strb.w	r3, [sp, #9]
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002f18:	f04f 0c38 	mov.w	ip, #56	@ 0x38
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002f1c:	ab02      	add	r3, sp, #8
 8002f1e:	7f20      	ldrb	r0, [r4, #28]
    uint8_t rxBuf[3] = {0};
 8002f20:	f88d 500e 	strb.w	r5, [sp, #14]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002f24:	2203      	movs	r2, #3
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002f26:	f88d c008 	strb.w	ip, [sp, #8]
    uint8_t rxBuf[3] = {0};
 8002f2a:	f8ad 600c 	strh.w	r6, [sp, #12]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002f2e:	f000 f8c5 	bl	80030bc <mcu_spiTransfer>
 8002f32:	9700      	str	r7, [sp, #0]
    INA229_writeReg(sensor, INA229_buvl_register, sensor->buvlRegister);
 8002f34:	8a23      	ldrh	r3, [r4, #16]
    txBuf[2] = LSB(value);
 8002f36:	f88d 300a 	strb.w	r3, [sp, #10]
    txBuf[1] = MSB(value);
 8002f3a:	0a1b      	lsrs	r3, r3, #8
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002f3c:	7f61      	ldrb	r1, [r4, #29]
    txBuf[1] = MSB(value);
 8002f3e:	f88d 3009 	strb.w	r3, [sp, #9]
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002f42:	f04f 0c3c 	mov.w	ip, #60	@ 0x3c
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002f46:	ab02      	add	r3, sp, #8
 8002f48:	7f20      	ldrb	r0, [r4, #28]
    uint8_t rxBuf[3] = {0};
 8002f4a:	f88d 500e 	strb.w	r5, [sp, #14]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002f4e:	2203      	movs	r2, #3
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002f50:	f88d c008 	strb.w	ip, [sp, #8]
    uint8_t rxBuf[3] = {0};
 8002f54:	f8ad 600c 	strh.w	r6, [sp, #12]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002f58:	f000 f8b0 	bl	80030bc <mcu_spiTransfer>
 8002f5c:	9700      	str	r7, [sp, #0]
    INA229_writeReg(sensor, INA229_temp_limit_register, sensor->tempLimitRegister);
 8002f5e:	8a63      	ldrh	r3, [r4, #18]
    txBuf[2] = LSB(value);
 8002f60:	f88d 300a 	strb.w	r3, [sp, #10]
    txBuf[1] = MSB(value);
 8002f64:	0a1b      	lsrs	r3, r3, #8
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002f66:	f04f 0c40 	mov.w	ip, #64	@ 0x40
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002f6a:	7f61      	ldrb	r1, [r4, #29]
    txBuf[1] = MSB(value);
 8002f6c:	f88d 3009 	strb.w	r3, [sp, #9]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002f70:	7f20      	ldrb	r0, [r4, #28]
    uint8_t rxBuf[3] = {0};
 8002f72:	f88d 500e 	strb.w	r5, [sp, #14]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002f76:	ab02      	add	r3, sp, #8
 8002f78:	2203      	movs	r2, #3
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002f7a:	f88d c008 	strb.w	ip, [sp, #8]
    uint8_t rxBuf[3] = {0};
 8002f7e:	f8ad 600c 	strh.w	r6, [sp, #12]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002f82:	f000 f89b 	bl	80030bc <mcu_spiTransfer>
 8002f86:	9700      	str	r7, [sp, #0]
    uint8_t rxBuf[3] = {0};
 8002f88:	f88d 500e 	strb.w	r5, [sp, #14]
    INA229_writeReg(sensor, INA229_pwr_limit_register, sensor->pwrLimitRegister);
 8002f8c:	8aa5      	ldrh	r5, [r4, #20]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002f8e:	7f61      	ldrb	r1, [r4, #29]
    uint8_t rxBuf[3] = {0};
 8002f90:	f8ad 600c 	strh.w	r6, [sp, #12]
    txBuf[0] = regAddr << 2; //Address + write bit (ending in 0)
 8002f94:	2044      	movs	r0, #68	@ 0x44
 8002f96:	f88d 0008 	strb.w	r0, [sp, #8]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002f9a:	ab02      	add	r3, sp, #8
 8002f9c:	7f20      	ldrb	r0, [r4, #28]
    txBuf[2] = LSB(value);
 8002f9e:	f88d 500a 	strb.w	r5, [sp, #10]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002fa2:	2203      	movs	r2, #3
    txBuf[1] = MSB(value);
 8002fa4:	0a2c      	lsrs	r4, r5, #8
 8002fa6:	f88d 4009 	strb.w	r4, [sp, #9]
    mcu_spiTransfer(sensor->busId, sensor->devCS, 3, txBuf, rxBuf);
 8002faa:	f000 f887 	bl	80030bc <mcu_spiTransfer>

}
 8002fae:	b004      	add	sp, #16
 8002fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fb4:	08008424 	.word	0x08008424

08002fb8 <INA229_getVBUS_V>:
/*
 *  ======== INA229_getVBUS_V ========
 *  Get VBUS value (V)
 */
float INA229_getVBUS_V(INA229_Handle sensor)
{
 8002fb8:	b500      	push	{lr}
 8002fba:	b087      	sub	sp, #28
    mcu_spiTransfer(sensor->busId, sensor->devCS, INA229_regSize[regAddr]+1, txBuf, rxBuf);
 8002fbc:	ab04      	add	r3, sp, #16
    uint8_t rxBuf[6] = {0}; //max buffer size
 8002fbe:	2200      	movs	r2, #0
    txBuf[0] = (regAddr << 2 ) | 0x01; //Address + read bit (ending in 1)
 8002fc0:	f04f 0c15 	mov.w	ip, #21
    mcu_spiTransfer(sensor->busId, sensor->devCS, INA229_regSize[regAddr]+1, txBuf, rxBuf);
 8002fc4:	7f41      	ldrb	r1, [r0, #29]
    uint8_t rxBuf[6] = {0}; //max buffer size
 8002fc6:	9204      	str	r2, [sp, #16]
 8002fc8:	f8ad 2014 	strh.w	r2, [sp, #20]
    mcu_spiTransfer(sensor->busId, sensor->devCS, INA229_regSize[regAddr]+1, txBuf, rxBuf);
 8002fcc:	7f00      	ldrb	r0, [r0, #28]
 8002fce:	9300      	str	r3, [sp, #0]
 8002fd0:	2204      	movs	r2, #4
 8002fd2:	ab03      	add	r3, sp, #12
    txBuf[0] = (regAddr << 2 ) | 0x01; //Address + read bit (ending in 1)
 8002fd4:	f88d c00c 	strb.w	ip, [sp, #12]
    mcu_spiTransfer(sensor->busId, sensor->devCS, INA229_regSize[regAddr]+1, txBuf, rxBuf);
 8002fd8:	f000 f870 	bl	80030bc <mcu_spiTransfer>
        value = (value << 8) | rxBuf[i];
 8002fdc:	f8bd 3011 	ldrh.w	r3, [sp, #17]
 8002fe0:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8002fe4:	ba5b      	rev16	r3, r3
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    uint64_t value = INA229_readReg(sensor, INA229_vbus_register);
    float data;

    //Remove reserved bits
    value = value >> 4;
 8002fec:	091a      	lsrs	r2, r3, #4
 8002fee:	ee07 2a90 	vmov	s15, r2

    //Convert for 2's compliment and signed value (though always positive)
    if(value > 0x7FFFF)
 8002ff2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
    {
        data = (float)value - 0x100000; //left for redundancy and error checking, should never get used
 8002ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ffa:	bf24      	itt	cs
 8002ffc:	ed9f 7a10 	vldrcs	s14, [pc, #64]	@ 8003040 <INA229_getVBUS_V+0x88>
 8003000:	ee77 7ac7 	vsubcs.f32	s15, s15, s14
    {
        data = (float)value;
    }

    //Convert to V
    data = (data * 195.3125) / 1000000;
 8003004:	ee17 0a90 	vmov	r0, s15
 8003008:	f7fd fa56 	bl	80004b8 <__aeabi_f2d>
 800300c:	a308      	add	r3, pc, #32	@ (adr r3, 8003030 <INA229_getVBUS_V+0x78>)
 800300e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003012:	f7fd faa9 	bl	8000568 <__aeabi_dmul>
 8003016:	a308      	add	r3, pc, #32	@ (adr r3, 8003038 <INA229_getVBUS_V+0x80>)
 8003018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301c:	f7fd fbce 	bl	80007bc <__aeabi_ddiv>
 8003020:	f7fd fcdc 	bl	80009dc <__aeabi_d2f>

    return data;
}
 8003024:	ee00 0a10 	vmov	s0, r0
 8003028:	b007      	add	sp, #28
 800302a:	f85d fb04 	ldr.w	pc, [sp], #4
 800302e:	bf00      	nop
 8003030:	00000000 	.word	0x00000000
 8003034:	40686a00 	.word	0x40686a00
 8003038:	00000000 	.word	0x00000000
 800303c:	412e8480 	.word	0x412e8480
 8003040:	49800000 	.word	0x49800000

08003044 <INA229_getDIETEMP_C>:
/*
 *  ======== INA229_getDIETEMP_C ========
 *  Get DIETMEP value (C)
 */
float INA229_getDIETEMP_C(INA229_Handle sensor)
{
 8003044:	b500      	push	{lr}
 8003046:	b087      	sub	sp, #28
    mcu_spiTransfer(sensor->busId, sensor->devCS, INA229_regSize[regAddr]+1, txBuf, rxBuf);
 8003048:	ab04      	add	r3, sp, #16
    uint8_t rxBuf[6] = {0}; //max buffer size
 800304a:	2200      	movs	r2, #0
    txBuf[0] = (regAddr << 2 ) | 0x01; //Address + read bit (ending in 1)
 800304c:	f04f 0c19 	mov.w	ip, #25
    mcu_spiTransfer(sensor->busId, sensor->devCS, INA229_regSize[regAddr]+1, txBuf, rxBuf);
 8003050:	7f41      	ldrb	r1, [r0, #29]
    uint8_t rxBuf[6] = {0}; //max buffer size
 8003052:	9204      	str	r2, [sp, #16]
 8003054:	f8ad 2014 	strh.w	r2, [sp, #20]
    mcu_spiTransfer(sensor->busId, sensor->devCS, INA229_regSize[regAddr]+1, txBuf, rxBuf);
 8003058:	7f00      	ldrb	r0, [r0, #28]
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	2203      	movs	r2, #3
 800305e:	ab03      	add	r3, sp, #12
    txBuf[0] = (regAddr << 2 ) | 0x01; //Address + read bit (ending in 1)
 8003060:	f88d c00c 	strb.w	ip, [sp, #12]
    mcu_spiTransfer(sensor->busId, sensor->devCS, INA229_regSize[regAddr]+1, txBuf, rxBuf);
 8003064:	f000 f82a 	bl	80030bc <mcu_spiTransfer>
        value = (value << 8) | rxBuf[i];
 8003068:	f8bd 3011 	ldrh.w	r3, [sp, #17]
 800306c:	ba5b      	rev16	r3, r3
 800306e:	b29a      	uxth	r2, r3
 8003070:	ee07 2a90 	vmov	s15, r2
    uint64_t value = INA229_readReg(sensor, INA229_dietemp_register);
    float data;

    //Convert for 2's compliment and signed value
    if(value > 0x7FFF)
 8003074:	041b      	lsls	r3, r3, #16
    {
        data = (float)value - 0x10000; 
 8003076:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800307a:	bf44      	itt	mi
 800307c:	ed9f 7a0b 	vldrmi	s14, [pc, #44]	@ 80030ac <INA229_getDIETEMP_C+0x68>
 8003080:	ee77 7ac7 	vsubmi.f32	s15, s15, s14
    {
        data = (float)value;
    }

    //Convert to C
    data = (data * 7.8125) / 1000;
 8003084:	ee17 0a90 	vmov	r0, s15
 8003088:	f7fd fa16 	bl	80004b8 <__aeabi_f2d>
 800308c:	4b08      	ldr	r3, [pc, #32]	@ (80030b0 <INA229_getDIETEMP_C+0x6c>)
 800308e:	2200      	movs	r2, #0
 8003090:	f7fd fa6a 	bl	8000568 <__aeabi_dmul>
 8003094:	4b07      	ldr	r3, [pc, #28]	@ (80030b4 <INA229_getDIETEMP_C+0x70>)
 8003096:	2200      	movs	r2, #0
 8003098:	f7fd fb90 	bl	80007bc <__aeabi_ddiv>
 800309c:	f7fd fc9e 	bl	80009dc <__aeabi_d2f>

    return data;
}
 80030a0:	ee00 0a10 	vmov	s0, r0
 80030a4:	b007      	add	sp, #28
 80030a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80030aa:	bf00      	nop
 80030ac:	47800000 	.word	0x47800000
 80030b0:	401f4000 	.word	0x401f4000
 80030b4:	408f4000 	.word	0x408f4000

080030b8 <mcu_spiInit>:
    /* Add MCU specific init necessary for I2C to be used */




}
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop

080030bc <mcu_spiTransfer>:

uint8_t mcu_spiTransfer(uint8_t busId, uint8_t csGPIOId, uint8_t count, uint8_t* txBuf, uint8_t* rxBuf)
{
 80030bc:	4619      	mov	r1, r3
     */

    SPI_HandleTypeDef *hspi = NULL; // Declare local SPI handle variable

    // Select the SPI handle based on the busId value
    if(busId == 0)
 80030be:	b198      	cbz	r0, 80030e8 <mcu_spiTransfer+0x2c>
    {
        hspi = &hspi1;  // Map busId 0 to SPI1
    }
    else if(busId == 1)
 80030c0:	2801      	cmp	r0, #1
 80030c2:	d10f      	bne.n	80030e4 <mcu_spiTransfer+0x28>
    {
        hspi = &hspi2;  // Map busId 1 to SPI2
 80030c4:	4809      	ldr	r0, [pc, #36]	@ (80030ec <mcu_spiTransfer+0x30>)
{
 80030c6:	b500      	push	{lr}
 80030c8:	b083      	sub	sp, #12
        // Invalid bus id, return error
        return 1;
    }
//    HAL_SPI_TransmitReceive(hspi, txBuf, rxBuf, count, HAL_MAX_DELAY);
    // Perform the SPI transfer using the selected SPI handle
    if (HAL_SPI_TransmitReceive(hspi, txBuf, rxBuf, count, HAL_MAX_DELAY) != HAL_OK)
 80030ca:	f04f 33ff 	mov.w	r3, #4294967295
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	4613      	mov	r3, r2
 80030d2:	9a04      	ldr	r2, [sp, #16]
 80030d4:	f004 f886 	bl	80071e4 <HAL_SPI_TransmitReceive>
 80030d8:	3800      	subs	r0, #0
 80030da:	bf18      	it	ne
 80030dc:	2001      	movne	r0, #1
    {
        return 1; // SPI transaction failed
    }
    return 0; // Transaction successful
}
 80030de:	b003      	add	sp, #12
 80030e0:	f85d fb04 	ldr.w	pc, [sp], #4
        return 1;
 80030e4:	2001      	movs	r0, #1
}
 80030e6:	4770      	bx	lr
        hspi = &hspi1;  // Map busId 0 to SPI1
 80030e8:	4801      	ldr	r0, [pc, #4]	@ (80030f0 <mcu_spiTransfer+0x34>)
 80030ea:	e7ec      	b.n	80030c6 <mcu_spiTransfer+0xa>
 80030ec:	200013f0 	.word	0x200013f0
 80030f0:	20001448 	.word	0x20001448

080030f4 <LTC6811_init_reg_limits>:
void LTC6811_init_reg_limits(uint8_t total_ic, //The number of ICs in the system
        cell_asic *ic  //A two dimensional array where data will be written
        )
{
    uint8_t cic;
    for (cic = 0; cic < total_ic; cic++)
 80030f4:	b190      	cbz	r0, 800311c <LTC6811_init_reg_limits+0x28>
{
 80030f6:	b410      	push	{r4}
 80030f8:	eb00 1080 	add.w	r0, r0, r0, lsl #6
    {
        ic[cic].ic_reg.cell_channels = 12;
 80030fc:	4c08      	ldr	r4, [pc, #32]	@ (8003120 <LTC6811_init_reg_limits+0x2c>)
 80030fe:	eb01 0380 	add.w	r3, r1, r0, lsl #2
        ic[cic].ic_reg.stat_channels = 4;
        ic[cic].ic_reg.aux_channels = 6;
        ic[cic].ic_reg.num_cv_reg = 4;
        ic[cic].ic_reg.num_gpio_reg = 2;
 8003102:	f240 3202 	movw	r2, #770	@ 0x302
        ic[cic].ic_reg.cell_channels = 12;
 8003106:	f8c1 40e4 	str.w	r4, [r1, #228]	@ 0xe4
        ic[cic].ic_reg.num_gpio_reg = 2;
 800310a:	f8a1 20e8 	strh.w	r2, [r1, #232]	@ 0xe8
    for (cic = 0; cic < total_ic; cic++)
 800310e:	f501 7182 	add.w	r1, r1, #260	@ 0x104
 8003112:	428b      	cmp	r3, r1
 8003114:	d1f7      	bne.n	8003106 <LTC6811_init_reg_limits+0x12>
        ic[cic].ic_reg.num_stat_reg = 3;
    }
}
 8003116:	f85d 4b04 	ldr.w	r4, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	0406040c 	.word	0x0406040c

08003124 <LTC6811_wrcfg>:
 */
void LTC6811_wrcfg(uint8_t total_ic, //The number of ICs being written to
        cell_asic *ic //A two dimensional array of the configuration data that will be written
        )
{
    LTC681x_wrcfg(total_ic, ic);
 8003124:	f000 b8da 	b.w	80032dc <LTC681x_wrcfg>

08003128 <LTC6811_adcv>:
void LTC6811_adcv(uint8_t MD, //ADC Mode
        uint8_t DCP, //Discharge Permit
        uint8_t CH //Cell Channels to be measured
        )
{
    LTC681x_adcv(MD, DCP, CH);
 8003128:	f000 b942 	b.w	80033b0 <LTC681x_adcv>

0800312c <LTC6811_rdcv>:
        uint8_t total_ic, // The number of ICs in the system
        cell_asic *ic // Array of the parsed cell codes
        )
{
    int8_t pec_error = 0;
    pec_error = LTC681x_rdcv(reg, total_ic, ic);
 800312c:	f000 ba56 	b.w	80035dc <LTC681x_rdcv>

08003130 <LTC6811_pollAdc>:
}

//This function will block operation until the ADC has finished it's conversion */
uint32_t LTC6811_pollAdc()
{
    return (LTC681x_pollAdc());
 8003130:	f000 bb54 	b.w	80037dc <LTC681x_pollAdc>

08003134 <LTC6811_reset_crc_count>:
/* Helper Function to reset PEC counters */
void LTC6811_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that will store the data
        )
{
    LTC681x_reset_crc_count(total_ic, ic);
 8003134:	f000 bb74 	b.w	8003820 <LTC681x_reset_crc_count>

08003138 <LTC6811_init_cfg>:
/* Helper function to initialize CFG variables.*/
void LTC6811_init_cfg(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that will store the data
        )
{
    LTC681x_init_cfg(total_ic, ic);
 8003138:	f000 bb86 	b.w	8003848 <LTC681x_init_cfg>

0800313c <LTC6811_set_cfgr>:
        bool dcc[12], // The DCC bit
        bool dcto[4], // The Dcto bit
        uint16_t uv, // The UV bit
        uint16_t ov // The OV bit
        )
{
 800313c:	b410      	push	{r4}
 800313e:	f8bd 4010 	ldrh.w	r4, [sp, #16]
    LTC681x_set_cfgr(nIC, ic, refon, adcopt, gpio, dcc, dcto, uv, ov);
 8003142:	9404      	str	r4, [sp, #16]
{
 8003144:	f8bd 4014 	ldrh.w	r4, [sp, #20]
    LTC681x_set_cfgr(nIC, ic, refon, adcopt, gpio, dcc, dcto, uv, ov);
 8003148:	9405      	str	r4, [sp, #20]
}
 800314a:	f85d 4b04 	ldr.w	r4, [sp], #4
    LTC681x_set_cfgr(nIC, ic, refon, adcopt, gpio, dcc, dcto, uv, ov);
 800314e:	f000 bc05 	b.w	800395c <LTC681x_set_cfgr>
 8003152:	bf00      	nop

08003154 <wakeup_sleep>:
 */

void wakeup_sleep(uint8_t total_ic) //Number of ICs in the system
{
    int i;
    for (i = 0; i < total_ic; i++)
 8003154:	b180      	cbz	r0, 8003178 <wakeup_sleep+0x24>
{
 8003156:	b538      	push	{r3, r4, r5, lr}
 8003158:	4605      	mov	r5, r0
    for (i = 0; i < total_ic; i++)
 800315a:	2400      	movs	r4, #0
    {
        cs_low();
 800315c:	f000 fca6 	bl	8003aac <cs_low>
        delay_time_us(160);
 8003160:	20a0      	movs	r0, #160	@ 0xa0
 8003162:	f000 fccb 	bl	8003afc <delay_time_us>
    for (i = 0; i < total_ic; i++)
 8003166:	3401      	adds	r4, #1
//       HAL_Delay(2500); // Guarantees the LTC681x will be in standby
        cs_high();
 8003168:	f000 fcb4 	bl	8003ad4 <cs_high>
        delay_time_us(18);
 800316c:	2012      	movs	r0, #18
 800316e:	f000 fcc5 	bl	8003afc <delay_time_us>
    for (i = 0; i < total_ic; i++)
 8003172:	42ac      	cmp	r4, r5
 8003174:	d1f2      	bne.n	800315c <wakeup_sleep+0x8>
//        HAL_Delay(2500);
    }
}
 8003176:	bd38      	pop	{r3, r4, r5, pc}
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop

0800317c <write_68>:
        uint8_t tx_cmd[2], //The command to be transmitted
        uint8_t data[] // Payload Data
        )
{
    const uint8_t BYTES_IN_REG = 6;
    const uint8_t CMD_LEN = 4 + (8 * total_ic);
 800317c:	00c3      	lsls	r3, r0, #3
 800317e:	3304      	adds	r3, #4
{
 8003180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    const uint8_t CMD_LEN = 4 + (8 * total_ic);
 8003184:	b2dc      	uxtb	r4, r3
{
 8003186:	4606      	mov	r6, r0
    uint16_t data_pec;
    uint16_t cmd_pec;
    uint8_t cmd_index;
    uint8_t *cmd;

    cmd = (uint8_t *) malloc(CMD_LEN * sizeof(uint8_t));
 8003188:	4620      	mov	r0, r4
{
 800318a:	4688      	mov	r8, r1
 800318c:	4617      	mov	r7, r2
    cmd = (uint8_t *) malloc(CMD_LEN * sizeof(uint8_t));
 800318e:	f004 fff1 	bl	8008174 <malloc>
    cmd[0] = tx_cmd[0];
 8003192:	f898 3000 	ldrb.w	r3, [r8]
    uint8_t i;

    for (i = 0; i < len; i++) // loops for each byte in data array
    {
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
        remainder = (remainder << 8) ^ crc15Table[addr];
 8003196:	4950      	ldr	r1, [pc, #320]	@ (80032d8 <write_68+0x15c>)
    cmd[1] = tx_cmd[1];
 8003198:	f898 2001 	ldrb.w	r2, [r8, #1]
    cmd = (uint8_t *) malloc(CMD_LEN * sizeof(uint8_t));
 800319c:	4605      	mov	r5, r0
    cmd[0] = tx_cmd[0];
 800319e:	2000      	movs	r0, #0
 80031a0:	f363 0007 	bfi	r0, r3, #0, #8
        remainder = (remainder << 8) ^ crc15Table[addr];
 80031a4:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
 80031a8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
    cmd[0] = tx_cmd[0];
 80031ac:	f362 200f 	bfi	r0, r2, #8, #8
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 80031b0:	ea82 12d3 	eor.w	r2, r2, r3, lsr #7
        remainder = (remainder << 8) ^ crc15Table[addr];
 80031b4:	b2d2      	uxtb	r2, r2
 80031b6:	021b      	lsls	r3, r3, #8
 80031b8:	f831 2022 	ldrh.w	r2, [r1, r2, lsl #2]
 80031bc:	b29b      	uxth	r3, r3
 80031be:	4053      	eors	r3, r2
    }
    return (remainder * 2); //The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 80031c0:	005b      	lsls	r3, r3, #1
    cmd[2] = (uint8_t) (cmd_pec >> 8);
 80031c2:	f3c3 2207 	ubfx	r2, r3, #8, #8
    cmd[0] = tx_cmd[0];
 80031c6:	f362 4017 	bfi	r0, r2, #16, #8
    return (remainder * 2); //The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 80031ca:	b29b      	uxth	r3, r3
    cmd[0] = tx_cmd[0];
 80031cc:	f363 601f 	bfi	r0, r3, #24, #8
 80031d0:	6028      	str	r0, [r5, #0]
    for (current_ic = total_ic; current_ic > 0; current_ic--) // Executes for each LTC681x, this loops starts with the last IC on the stack.
 80031d2:	2e00      	cmp	r6, #0
 80031d4:	d072      	beq.n	80032bc <write_68+0x140>
 80031d6:	1e73      	subs	r3, r6, #1
 80031d8:	1fba      	subs	r2, r7, #6
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	f04f 0e06 	mov.w	lr, #6
 80031e0:	fb1e 2e06 	smlabb	lr, lr, r6, r2
 80031e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80031e8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80031ec:	ebae 0e43 	sub.w	lr, lr, r3, lsl #1
 80031f0:	eb07 0246 	add.w	r2, r7, r6, lsl #1
    cmd_index = 4;
 80031f4:	f04f 0c04 	mov.w	ip, #4
            cmd[cmd_index] = data[((current_ic - 1) * 6) + current_byte];
 80031f8:	4613      	mov	r3, r2
            cmd_index = cmd_index + 1;
 80031fa:	f10c 0a04 	add.w	sl, ip, #4
            cmd[cmd_index] = data[((current_ic - 1) * 6) + current_byte];
 80031fe:	f813 6c02 	ldrb.w	r6, [r3, #-2]
 8003202:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8003206:	f813 9c05 	ldrb.w	r9, [r3, #-5]
 800320a:	f813 8c04 	ldrb.w	r8, [r3, #-4]
 800320e:	f852 7d06 	ldr.w	r7, [r2, #-6]!
 8003212:	f845 700c 	str.w	r7, [r5, ip]
            cmd_index = cmd_index + 1;
 8003216:	f10c 0305 	add.w	r3, ip, #5
            cmd[cmd_index] = data[((current_ic - 1) * 6) + current_byte];
 800321a:	b2db      	uxtb	r3, r3
 800321c:	fa5f fa8a 	uxtb.w	sl, sl
    for (current_ic = total_ic; current_ic > 0; current_ic--) // Executes for each LTC681x, this loops starts with the last IC on the stack.
 8003220:	4572      	cmp	r2, lr
            cmd[cmd_index] = data[((current_ic - 1) * 6) + current_byte];
 8003222:	f805 600a 	strb.w	r6, [r5, sl]
 8003226:	54e8      	strb	r0, [r5, r3]
        remainder = (remainder << 8) ^ crc15Table[addr];
 8003228:	b2fb      	uxtb	r3, r7
 800322a:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
 800322e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 8003232:	ea89 19d3 	eor.w	r9, r9, r3, lsr #7
        remainder = (remainder << 8) ^ crc15Table[addr];
 8003236:	fa5f f989 	uxtb.w	r9, r9
 800323a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800323e:	f831 9029 	ldrh.w	r9, [r1, r9, lsl #2]
 8003242:	b29b      	uxth	r3, r3
 8003244:	ea83 0309 	eor.w	r3, r3, r9
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 8003248:	ea88 18d3 	eor.w	r8, r8, r3, lsr #7
        remainder = (remainder << 8) ^ crc15Table[addr];
 800324c:	fa5f f888 	uxtb.w	r8, r8
 8003250:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003254:	f831 8028 	ldrh.w	r8, [r1, r8, lsl #2]
 8003258:	b29b      	uxth	r3, r3
 800325a:	ea83 0308 	eor.w	r3, r3, r8
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 800325e:	f3c3 18c7 	ubfx	r8, r3, #7, #8
        remainder = (remainder << 8) ^ crc15Table[addr];
 8003262:	ea88 6717 	eor.w	r7, r8, r7, lsr #24
 8003266:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800326a:	f831 7027 	ldrh.w	r7, [r1, r7, lsl #2]
 800326e:	b29b      	uxth	r3, r3
 8003270:	ea83 0307 	eor.w	r3, r3, r7
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 8003274:	ea86 16d3 	eor.w	r6, r6, r3, lsr #7
        remainder = (remainder << 8) ^ crc15Table[addr];
 8003278:	b2f6      	uxtb	r6, r6
 800327a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800327e:	f831 6026 	ldrh.w	r6, [r1, r6, lsl #2]
 8003282:	b29b      	uxth	r3, r3
 8003284:	ea83 0306 	eor.w	r3, r3, r6
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 8003288:	ea80 10d3 	eor.w	r0, r0, r3, lsr #7
        remainder = (remainder << 8) ^ crc15Table[addr];
 800328c:	b2c0      	uxtb	r0, r0
            cmd_index = cmd_index + 1;
 800328e:	f10c 0706 	add.w	r7, ip, #6
        remainder = (remainder << 8) ^ crc15Table[addr];
 8003292:	f831 6020 	ldrh.w	r6, [r1, r0, lsl #2]
 8003296:	ea4f 2303 	mov.w	r3, r3, lsl #8
        cmd[cmd_index] = (uint8_t) (data_pec >> 8);
 800329a:	b2f8      	uxtb	r0, r7
        remainder = (remainder << 8) ^ crc15Table[addr];
 800329c:	b29b      	uxth	r3, r3
 800329e:	ea83 0306 	eor.w	r3, r3, r6
        cmd[cmd_index + 1] = (uint8_t) data_pec;
 80032a2:	eb05 0600 	add.w	r6, r5, r0
    return (remainder * 2); //The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 80032a6:	ea4f 0743 	mov.w	r7, r3, lsl #1
        cmd_index = cmd_index + 2;
 80032aa:	f10c 0c08 	add.w	ip, ip, #8
        cmd[cmd_index] = (uint8_t) (data_pec >> 8);
 80032ae:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 80032b2:	542b      	strb	r3, [r5, r0]
        cmd_index = cmd_index + 2;
 80032b4:	fa5f fc8c 	uxtb.w	ip, ip
        cmd[cmd_index + 1] = (uint8_t) data_pec;
 80032b8:	7077      	strb	r7, [r6, #1]
    for (current_ic = total_ic; current_ic > 0; current_ic--) // Executes for each LTC681x, this loops starts with the last IC on the stack.
 80032ba:	d19d      	bne.n	80031f8 <write_68+0x7c>
    cs_low();
 80032bc:	f000 fbf6 	bl	8003aac <cs_low>
    spi_write_array(CMD_LEN, cmd);
 80032c0:	4629      	mov	r1, r5
 80032c2:	4620      	mov	r0, r4
 80032c4:	f000 fc24 	bl	8003b10 <spi_write_array>
    cs_high();
 80032c8:	f000 fc04 	bl	8003ad4 <cs_high>
    free(cmd);
 80032cc:	4628      	mov	r0, r5
}
 80032ce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    free(cmd);
 80032d2:	f004 bf57 	b.w	8008184 <free>
 80032d6:	bf00      	nop
 80032d8:	080091c0 	.word	0x080091c0

080032dc <LTC681x_wrcfg>:

/* Write the LTC681x CFGRA */
void LTC681x_wrcfg(uint8_t total_ic, //The number of ICs being written to
        cell_asic ic[] // A two dimensional array of the configuration data that will be written
        )
{
 80032dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80032e0:	b0c3      	sub	sp, #268	@ 0x10c
    uint8_t cmd[2] = { 0x00, 0x01 };
 80032e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032e6:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint8_t write_count = 0;
    uint8_t c_ic = 0;
    uint8_t current_ic;
    uint8_t data;

    for (current_ic = 0; current_ic < total_ic; current_ic++)
 80032ea:	aa02      	add	r2, sp, #8
 80032ec:	b378      	cbz	r0, 800334e <LTC681x_wrcfg+0x72>
    {
        if (ic->isospi_reverse == false)
 80032ee:	f891 50c5 	ldrb.w	r5, [r1, #197]	@ 0xc5
 80032f2:	b395      	cbz	r5, 800335a <LTC681x_wrcfg+0x7e>
 80032f4:	f100 3cff 	add.w	ip, r0, #4294967295
 80032f8:	fa5f fc8c 	uxtb.w	ip, ip
    uint8_t write_count = 0;
 80032fc:	2300      	movs	r3, #0
 80032fe:	aa02      	add	r2, sp, #8
            c_ic = total_ic - current_ic - 1;
        }

        for (data = 0; data < 6; data++)
        {
            write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 8003300:	eb0c 178c 	add.w	r7, ip, ip, lsl #6
 8003304:	eb01 0e87 	add.w	lr, r1, r7, lsl #2
            write_count++;
 8003308:	1c9c      	adds	r4, r3, #2
            write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 800330a:	b2e4      	uxtb	r4, r4
 800330c:	f831 8027 	ldrh.w	r8, [r1, r7, lsl #2]
 8003310:	f89e 7002 	ldrb.w	r7, [lr, #2]
 8003314:	f822 8003 	strh.w	r8, [r2, r3]
            write_count++;
 8003318:	1cde      	adds	r6, r3, #3
            write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 800331a:	5517      	strb	r7, [r2, r4]
            write_count++;
 800331c:	1d1d      	adds	r5, r3, #4
 800331e:	1d5c      	adds	r4, r3, #5
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003320:	f10c 3cff 	add.w	ip, ip, #4294967295
            write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 8003324:	b2f6      	uxtb	r6, r6
 8003326:	b2ed      	uxtb	r5, r5
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003328:	fa5f fc8c 	uxtb.w	ip, ip
            write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 800332c:	b2e4      	uxtb	r4, r4
 800332e:	f89e 9003 	ldrb.w	r9, [lr, #3]
 8003332:	f89e 8004 	ldrb.w	r8, [lr, #4]
 8003336:	f89e 7005 	ldrb.w	r7, [lr, #5]
 800333a:	f802 9006 	strb.w	r9, [r2, r6]
            write_count++;
 800333e:	3306      	adds	r3, #6
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003340:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
            write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 8003344:	f802 8005 	strb.w	r8, [r2, r5]
            write_count++;
 8003348:	b2db      	uxtb	r3, r3
            write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 800334a:	5517      	strb	r7, [r2, r4]
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 800334c:	d1d8      	bne.n	8003300 <LTC681x_wrcfg+0x24>
        }
    }
    write_68(total_ic, cmd, write_buffer);
 800334e:	a901      	add	r1, sp, #4
 8003350:	f7ff ff14 	bl	800317c <write_68>
}
 8003354:	b043      	add	sp, #268	@ 0x10c
 8003356:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800335a:	eb00 1780 	add.w	r7, r0, r0, lsl #6
 800335e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8003362:	aa02      	add	r2, sp, #8
            write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 8003364:	880b      	ldrh	r3, [r1, #0]
 8003366:	5353      	strh	r3, [r2, r5]
            write_count++;
 8003368:	1cac      	adds	r4, r5, #2
 800336a:	f105 0e03 	add.w	lr, r5, #3
            write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 800336e:	b2e4      	uxtb	r4, r4
 8003370:	fa5f fe8e 	uxtb.w	lr, lr
 8003374:	78ce      	ldrb	r6, [r1, #3]
 8003376:	f891 8002 	ldrb.w	r8, [r1, #2]
 800337a:	f802 8004 	strb.w	r8, [r2, r4]
            write_count++;
 800337e:	f105 0c04 	add.w	ip, r5, #4
 8003382:	1d6b      	adds	r3, r5, #5
            write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 8003384:	f802 600e 	strb.w	r6, [r2, lr]
 8003388:	794c      	ldrb	r4, [r1, #5]
 800338a:	790e      	ldrb	r6, [r1, #4]
 800338c:	fa5f fc8c 	uxtb.w	ip, ip
 8003390:	b2db      	uxtb	r3, r3
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003392:	f501 7182 	add.w	r1, r1, #260	@ 0x104
            write_count++;
 8003396:	3506      	adds	r5, #6
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003398:	42b9      	cmp	r1, r7
            write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 800339a:	f802 600c 	strb.w	r6, [r2, ip]
            write_count++;
 800339e:	b2ed      	uxtb	r5, r5
            write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 80033a0:	54d4      	strb	r4, [r2, r3]
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 80033a2:	d1df      	bne.n	8003364 <LTC681x_wrcfg+0x88>
    write_68(total_ic, cmd, write_buffer);
 80033a4:	a901      	add	r1, sp, #4
 80033a6:	f7ff fee9 	bl	800317c <write_68>
}
 80033aa:	b043      	add	sp, #268	@ 0x10c
 80033ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080033b0 <LTC681x_adcv>:
        )
{
    uint8_t cmd[2];
    uint8_t md_bits;

    md_bits = (MD & 0x02) >> 1;
 80033b0:	f3c0 0c40 	ubfx	ip, r0, #1, #1
{
 80033b4:	b510      	push	{r4, lr}
    cmd[0] = md_bits + 0x02;
 80033b6:	f10c 0c02 	add.w	ip, ip, #2
        remainder = (remainder << 8) ^ crc15Table[addr];
 80033ba:	4c16      	ldr	r4, [pc, #88]	@ (8003414 <LTC681x_adcv+0x64>)
    md_bits = (MD & 0x01) << 7;
    cmd[1] = md_bits + 0x60 + (DCP << 4) + CH;
 80033bc:	3260      	adds	r2, #96	@ 0x60
 80033be:	eb02 1201 	add.w	r2, r2, r1, lsl #4
        remainder = (remainder << 8) ^ crc15Table[addr];
 80033c2:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
    cmd[1] = md_bits + 0x60 + (DCP << 4) + CH;
 80033c6:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
 80033ca:	b2d2      	uxtb	r2, r2
        remainder = (remainder << 8) ^ crc15Table[addr];
 80033cc:	f481 5180 	eor.w	r1, r1, #4096	@ 0x1000
 80033d0:	020b      	lsls	r3, r1, #8
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 80033d2:	ea82 11d1 	eor.w	r1, r2, r1, lsr #7
        remainder = (remainder << 8) ^ crc15Table[addr];
 80033d6:	b2c9      	uxtb	r1, r1
 80033d8:	b29b      	uxth	r3, r3
 80033da:	f834 1021 	ldrh.w	r1, [r4, r1, lsl #2]
 80033de:	404b      	eors	r3, r1
    cmd[0] = tx_cmd[0];
 80033e0:	2100      	movs	r1, #0
 80033e2:	f36c 0107 	bfi	r1, ip, #0, #8
    return (remainder * 2); //The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 80033e6:	005b      	lsls	r3, r3, #1
    cmd[0] = tx_cmd[0];
 80033e8:	f362 210f 	bfi	r1, r2, #8, #8
    cmd[2] = (uint8_t) (cmd_pec >> 8);
 80033ec:	f3c3 2207 	ubfx	r2, r3, #8, #8
{
 80033f0:	b082      	sub	sp, #8
    return (remainder * 2); //The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 80033f2:	b29b      	uxth	r3, r3
    cmd[0] = tx_cmd[0];
 80033f4:	f362 4117 	bfi	r1, r2, #16, #8
 80033f8:	f363 611f 	bfi	r1, r3, #24, #8
 80033fc:	9101      	str	r1, [sp, #4]
    cs_low();
 80033fe:	f000 fb55 	bl	8003aac <cs_low>
    spi_write_array(4, cmd);
 8003402:	a901      	add	r1, sp, #4
 8003404:	2004      	movs	r0, #4
 8003406:	f000 fb83 	bl	8003b10 <spi_write_array>
    cs_high();
 800340a:	f000 fb63 	bl	8003ad4 <cs_high>

    cmd_68(cmd);
}
 800340e:	b002      	add	sp, #8
 8003410:	bd10      	pop	{r4, pc}
 8003412:	bf00      	nop
 8003414:	080091c0 	.word	0x080091c0

08003418 <LTC681x_rdcv_reg>:
/* Writes the command and reads the raw cell voltage register data */
void LTC681x_rdcv_reg(uint8_t reg, //Determines which cell voltage register is read back
        uint8_t total_ic, //the number of ICs in the
        uint8_t *data //An array of the unparsed cell codes
        )
{
 8003418:	b530      	push	{r4, r5, lr}
 800341a:	1e43      	subs	r3, r0, #1
 800341c:	b083      	sub	sp, #12
 800341e:	460d      	mov	r5, r1
 8003420:	4614      	mov	r4, r2
 8003422:	2b05      	cmp	r3, #5
 8003424:	d83d      	bhi.n	80034a2 <LTC681x_rdcv_reg+0x8a>
 8003426:	e8df f003 	tbb	[pc, r3]
 800342a:	211a      	.short	0x211a
 800342c:	03352f28 	.word	0x03352f28
        cmd[0] = 0x00;
    }
    else if (reg == 6) //4: RDCVF
    {
        cmd[1] = 0x0B;
        cmd[0] = 0x00;
 8003430:	f44f 6330 	mov.w	r3, #2816	@ 0xb00
 8003434:	f8ad 3004 	strh.w	r3, [sp, #4]
 8003438:	2036      	movs	r0, #54	@ 0x36
 800343a:	2348      	movs	r3, #72	@ 0x48
    }

    cmd_pec = pec15_calc(2, cmd);
    cmd[2] = (uint8_t) (cmd_pec >> 8);
 800343c:	f88d 3006 	strb.w	r3, [sp, #6]
    cmd[3] = (uint8_t) (cmd_pec);
 8003440:	f88d 0007 	strb.w	r0, [sp, #7]

    cs_low();
 8003444:	f000 fb32 	bl	8003aac <cs_low>
    spi_write_read(cmd, 4, data, (REG_LEN * total_ic));
 8003448:	2104      	movs	r1, #4
 800344a:	00eb      	lsls	r3, r5, #3
 800344c:	4622      	mov	r2, r4
 800344e:	eb0d 0001 	add.w	r0, sp, r1
 8003452:	f000 fb77 	bl	8003b44 <spi_write_read>
    cs_high();
 8003456:	f000 fb3d 	bl	8003ad4 <cs_high>
}
 800345a:	b003      	add	sp, #12
 800345c:	bd30      	pop	{r4, r5, pc}
        cmd[0] = 0x00;
 800345e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003462:	f8ad 3004 	strh.w	r3, [sp, #4]
 8003466:	20c2      	movs	r0, #194	@ 0xc2
 8003468:	2307      	movs	r3, #7
 800346a:	e7e7      	b.n	800343c <LTC681x_rdcv_reg+0x24>
        cmd[0] = 0x00;
 800346c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003470:	f8ad 3004 	strh.w	r3, [sp, #4]
 8003474:	2094      	movs	r0, #148	@ 0x94
 8003476:	239a      	movs	r3, #154	@ 0x9a
 8003478:	e7e0      	b.n	800343c <LTC681x_rdcv_reg+0x24>
        cmd[0] = 0x00;
 800347a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800347e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8003482:	2052      	movs	r0, #82	@ 0x52
 8003484:	235e      	movs	r3, #94	@ 0x5e
 8003486:	e7d9      	b.n	800343c <LTC681x_rdcv_reg+0x24>
        cmd[0] = 0x00;
 8003488:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800348c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8003490:	23c3      	movs	r3, #195	@ 0xc3
 8003492:	e7d3      	b.n	800343c <LTC681x_rdcv_reg+0x24>
        cmd[0] = 0x00;
 8003494:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8003498:	f8ad 3004 	strh.w	r3, [sp, #4]
 800349c:	2060      	movs	r0, #96	@ 0x60
 800349e:	23d5      	movs	r3, #213	@ 0xd5
 80034a0:	e7cc      	b.n	800343c <LTC681x_rdcv_reg+0x24>
        remainder = (remainder << 8) ^ crc15Table[addr];
 80034a2:	490b      	ldr	r1, [pc, #44]	@ (80034d0 <LTC681x_rdcv_reg+0xb8>)
 80034a4:	f89d 2004 	ldrb.w	r2, [sp, #4]
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 80034a8:	f89d 3005 	ldrb.w	r3, [sp, #5]
        remainder = (remainder << 8) ^ crc15Table[addr];
 80034ac:	f831 2022 	ldrh.w	r2, [r1, r2, lsl #2]
 80034b0:	f482 5280 	eor.w	r2, r2, #4096	@ 0x1000
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 80034b4:	ea83 13d2 	eor.w	r3, r3, r2, lsr #7
        remainder = (remainder << 8) ^ crc15Table[addr];
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80034be:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
    return (remainder * 2); //The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 80034c2:	0058      	lsls	r0, r3, #1
    cmd[3] = (uint8_t) (cmd_pec);
 80034c4:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
    cmd[2] = (uint8_t) (cmd_pec >> 8);
 80034c8:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 80034cc:	e7b6      	b.n	800343c <LTC681x_rdcv_reg+0x24>
 80034ce:	bf00      	nop
 80034d0:	080091c0 	.word	0x080091c0

080034d4 <parse_cells>:
        uint8_t cell_reg,  // Type of register
        uint8_t cell_data[], // Unparsed data
        uint16_t *cell_codes, // Parsed data
        uint8_t *ic_pec // PEC error
        )
{
 80034d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    const uint8_t CELL_IN_REG = 3;
    int8_t pec_error = 0;
    uint16_t parsed_cell;
    uint16_t received_pec;
    uint16_t data_pec;
    uint8_t data_counter = current_ic * NUM_RX_BYT; //data counter
 80034d6:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
 80034da:	fa5f fc8c 	uxtb.w	ip, ip

    for (current_cell = 0; current_cell < CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
    {                      // loops once for each of the 3 codes in the register

        parsed_cell = cell_data[data_counter]
                + (cell_data[data_counter + 1] << 8); //Each code is received as two bytes and is combined to
 80034de:	eb02 040c 	add.w	r4, r2, ip
        parsed_cell = cell_data[data_counter]
 80034e2:	f812 500c 	ldrb.w	r5, [r2, ip]
                + (cell_data[data_counter + 1] << 8); //Each code is received as two bytes and is combined to
 80034e6:	7864      	ldrb	r4, [r4, #1]
                                                      // create the parsed code
        cell_codes[current_cell + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 80034e8:	3901      	subs	r1, #1
        parsed_cell = cell_data[data_counter]
 80034ea:	eb05 2504 	add.w	r5, r5, r4, lsl #8
        cell_codes[current_cell + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 80034ee:	eb01 0441 	add.w	r4, r1, r1, lsl #1
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 80034f2:	f04f 0e01 	mov.w	lr, #1
        cell_codes[current_cell + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 80034f6:	f823 5014 	strh.w	r5, [r3, r4, lsl #1]

        data_counter = data_counter + 2; //Because the codes are two bytes, the data counter
 80034fa:	f10c 0502 	add.w	r5, ip, #2
        parsed_cell = cell_data[data_counter]
 80034fe:	b2ed      	uxtb	r5, r5
                + (cell_data[data_counter + 1] << 8); //Each code is received as two bytes and is combined to
 8003500:	1956      	adds	r6, r2, r5
        parsed_cell = cell_data[data_counter]
 8003502:	5d55      	ldrb	r5, [r2, r5]
                + (cell_data[data_counter + 1] << 8); //Each code is received as two bytes and is combined to
 8003504:	7876      	ldrb	r6, [r6, #1]
        cell_codes[current_cell + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8003506:	3401      	adds	r4, #1
        parsed_cell = cell_data[data_counter]
 8003508:	eb05 2506 	add.w	r5, r5, r6, lsl #8
        cell_codes[current_cell + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 800350c:	f823 5014 	strh.w	r5, [r3, r4, lsl #1]
 8003510:	eb03 0344 	add.w	r3, r3, r4, lsl #1
        data_counter = data_counter + 2; //Because the codes are two bytes, the data counter
 8003514:	f10c 0404 	add.w	r4, ip, #4
        parsed_cell = cell_data[data_counter]
 8003518:	b2e4      	uxtb	r4, r4
                + (cell_data[data_counter + 1] << 8); //Each code is received as two bytes and is combined to
 800351a:	1915      	adds	r5, r2, r4
        parsed_cell = cell_data[data_counter]
 800351c:	5d14      	ldrb	r4, [r2, r4]
                + (cell_data[data_counter + 1] << 8); //Each code is received as two bytes and is combined to
 800351e:	786d      	ldrb	r5, [r5, #1]
        parsed_cell = cell_data[data_counter]
 8003520:	eb04 2405 	add.w	r4, r4, r5, lsl #8
        cell_codes[current_cell + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8003524:	805c      	strh	r4, [r3, #2]
                                         //must increment by two for each parsed code
    }

    received_pec = (cell_data[data_counter] << 8) | cell_data[data_counter + 1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
                                                                                 //after the 6 cell voltage data bytes
    data_pec = pec15_calc(BYT_IN_REG, &cell_data[(current_ic) * NUM_RX_BYT]);
 8003526:	2608      	movs	r6, #8
        remainder = (remainder << 8) ^ crc15Table[addr];
 8003528:	4d2b      	ldr	r5, [pc, #172]	@ (80035d8 <parse_cells+0x104>)
 800352a:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 800352e:	fb16 e400 	smlabb	r4, r6, r0, lr
        remainder = (remainder << 8) ^ crc15Table[addr];
 8003532:	f835 3023 	ldrh.w	r3, [r5, r3, lsl #2]
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 8003536:	5d17      	ldrb	r7, [r2, r4]
        remainder = (remainder << 8) ^ crc15Table[addr];
 8003538:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 800353c:	ea87 17d3 	eor.w	r7, r7, r3, lsr #7
        remainder = (remainder << 8) ^ crc15Table[addr];
 8003540:	b2ff      	uxtb	r7, r7
 8003542:	fa03 f406 	lsl.w	r4, r3, r6
 8003546:	f835 3027 	ldrh.w	r3, [r5, r7, lsl #2]
 800354a:	b2a4      	uxth	r4, r4
 800354c:	4063      	eors	r3, r4
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 800354e:	fb06 2400 	mla	r4, r6, r0, r2
        data_counter = data_counter + 2; //Because the codes are two bytes, the data counter
 8003552:	f10c 0c06 	add.w	ip, ip, #6
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 8003556:	78a7      	ldrb	r7, [r4, #2]
 8003558:	ea87 17d3 	eor.w	r7, r7, r3, lsr #7
        remainder = (remainder << 8) ^ crc15Table[addr];
 800355c:	b2ff      	uxtb	r7, r7
 800355e:	fa03 f406 	lsl.w	r4, r3, r6
 8003562:	f835 3027 	ldrh.w	r3, [r5, r7, lsl #2]
 8003566:	b2a4      	uxth	r4, r4
 8003568:	4063      	eors	r3, r4
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 800356a:	fb06 2400 	mla	r4, r6, r0, r2
    received_pec = (cell_data[data_counter] << 8) | cell_data[data_counter + 1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 800356e:	fa5f fc8c 	uxtb.w	ip, ip
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 8003572:	78e7      	ldrb	r7, [r4, #3]
 8003574:	ea87 17d3 	eor.w	r7, r7, r3, lsr #7
        remainder = (remainder << 8) ^ crc15Table[addr];
 8003578:	b2ff      	uxtb	r7, r7
 800357a:	fa03 f406 	lsl.w	r4, r3, r6
 800357e:	f835 3027 	ldrh.w	r3, [r5, r7, lsl #2]
 8003582:	b2a4      	uxth	r4, r4
 8003584:	4063      	eors	r3, r4
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 8003586:	fb06 2400 	mla	r4, r6, r0, r2
 800358a:	4620      	mov	r0, r4
 800358c:	7924      	ldrb	r4, [r4, #4]
 800358e:	7940      	ldrb	r0, [r0, #5]
 8003590:	ea84 14d3 	eor.w	r4, r4, r3, lsr #7
        remainder = (remainder << 8) ^ crc15Table[addr];
 8003594:	b2e4      	uxtb	r4, r4
 8003596:	40b3      	lsls	r3, r6
 8003598:	f835 4024 	ldrh.w	r4, [r5, r4, lsl #2]
 800359c:	b29b      	uxth	r3, r3
 800359e:	4063      	eors	r3, r4
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 80035a0:	ea80 10d3 	eor.w	r0, r0, r3, lsr #7
        remainder = (remainder << 8) ^ crc15Table[addr];
 80035a4:	b2c0      	uxtb	r0, r0
 80035a6:	40b3      	lsls	r3, r6
 80035a8:	f835 0020 	ldrh.w	r0, [r5, r0, lsl #2]
    received_pec = (cell_data[data_counter] << 8) | cell_data[data_counter + 1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 80035ac:	eb02 040c 	add.w	r4, r2, ip
        remainder = (remainder << 8) ^ crc15Table[addr];
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	4043      	eors	r3, r0
    received_pec = (cell_data[data_counter] << 8) | cell_data[data_counter + 1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 80035b4:	f812 000c 	ldrb.w	r0, [r2, ip]
 80035b8:	7862      	ldrb	r2, [r4, #1]
    return (remainder * 2); //The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 80035ba:	fa03 f30e 	lsl.w	r3, r3, lr

    if (received_pec != data_pec)
 80035be:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	429a      	cmp	r2, r3
    {
        pec_error = 1; //The pec_error variable is simply set negative if any PEC errors
        ic_pec[cell_reg - 1] = 1;
 80035c6:	9b05      	ldr	r3, [sp, #20]
    if (received_pec != data_pec)
 80035c8:	bf08      	it	eq
 80035ca:	f04f 0e00 	moveq.w	lr, #0
        ic_pec[cell_reg - 1] = 1;
 80035ce:	f803 e001 	strb.w	lr, [r3, r1]
        pec_error = 1; //The pec_error variable is simply set negative if any PEC errors
 80035d2:	4670      	mov	r0, lr
        ic_pec[cell_reg - 1] = 0;
    }
    data_counter = data_counter + 2;

    return (pec_error);
}
 80035d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035d6:	bf00      	nop
 80035d8:	080091c0 	.word	0x080091c0

080035dc <LTC681x_rdcv>:
{
 80035dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035e0:	4604      	mov	r4, r0
 80035e2:	b083      	sub	sp, #12
    cell_data = (uint8_t *) malloc((NUM_RX_BYT * total_ic) * sizeof(uint8_t));
 80035e4:	00c8      	lsls	r0, r1, #3
{
 80035e6:	468b      	mov	fp, r1
 80035e8:	4615      	mov	r5, r2
    cell_data = (uint8_t *) malloc((NUM_RX_BYT * total_ic) * sizeof(uint8_t));
 80035ea:	f004 fdc3 	bl	8008174 <malloc>
 80035ee:	4680      	mov	r8, r0
    if (reg == 0)
 80035f0:	2c00      	cmp	r4, #0
 80035f2:	f040 80c1 	bne.w	8003778 <LTC681x_rdcv+0x19c>
        for (cell_reg = 1; cell_reg < ic[0].ic_reg.num_cv_reg + 1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 80035f6:	f895 20e7 	ldrb.w	r2, [r5, #231]	@ 0xe7
 80035fa:	4692      	mov	sl, r2
 80035fc:	2a00      	cmp	r2, #0
 80035fe:	d03a      	beq.n	8003676 <LTC681x_rdcv+0x9a>
                    c_ic = total_ic - current_ic - 1;
 8003600:	f10b 39ff 	add.w	r9, fp, #4294967295
        for (cell_reg = 1; cell_reg < ic[0].ic_reg.num_cv_reg + 1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 8003604:	2701      	movs	r7, #1
                    c_ic = total_ic - current_ic - 1;
 8003606:	46ca      	mov	sl, r9
 8003608:	46b9      	mov	r9, r7
            LTC681x_rdcv_reg(cell_reg, total_ic, cell_data);
 800360a:	4642      	mov	r2, r8
 800360c:	4659      	mov	r1, fp
 800360e:	4648      	mov	r0, r9
 8003610:	f7ff ff02 	bl	8003418 <LTC681x_rdcv_reg>
            for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003614:	f1bb 0f00 	cmp.w	fp, #0
 8003618:	f000 80a3 	beq.w	8003762 <LTC681x_rdcv+0x186>
 800361c:	2700      	movs	r7, #0
                    c_ic = total_ic - current_ic - 1;
 800361e:	b2f8      	uxtb	r0, r7
 8003620:	ebaa 0600 	sub.w	r6, sl, r0
                                                    &ic[c_ic].cells.c_codes[0],
 8003624:	eb07 1387 	add.w	r3, r7, r7, lsl #6
 8003628:	b2f6      	uxtb	r6, r6
                if (ic->isospi_reverse == false)
 800362a:	f895 c0c5 	ldrb.w	ip, [r5, #197]	@ 0xc5
                                                    &ic[c_ic].cells.c_codes[0],
 800362e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003632:	eb06 1686 	add.w	r6, r6, r6, lsl #6
                pec_error = pec_error + parse_cells(current_ic, cell_reg, cell_data,
 8003636:	f103 0e42 	add.w	lr, r3, #66	@ 0x42
 800363a:	4642      	mov	r2, r8
 800363c:	4649      	mov	r1, r9
 800363e:	331e      	adds	r3, #30
                                                    &ic[c_ic].cells.c_codes[0],
 8003640:	eb05 0686 	add.w	r6, r5, r6, lsl #2
                if (ic->isospi_reverse == false)
 8003644:	f1bc 0f00 	cmp.w	ip, #0
 8003648:	d076      	beq.n	8003738 <LTC681x_rdcv+0x15c>
                pec_error = pec_error + parse_cells(current_ic, cell_reg, cell_data,
 800364a:	f106 0342 	add.w	r3, r6, #66	@ 0x42
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	f106 031e 	add.w	r3, r6, #30
 8003654:	f7ff ff3e 	bl	80034d4 <parse_cells>
            for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003658:	3701      	adds	r7, #1
                pec_error = pec_error + parse_cells(current_ic, cell_reg, cell_data,
 800365a:	4420      	add	r0, r4
            for (current_ic = 0; current_ic < total_ic; current_ic++)
 800365c:	45bb      	cmp	fp, r7
                pec_error = pec_error + parse_cells(current_ic, cell_reg, cell_data,
 800365e:	b2c3      	uxtb	r3, r0
 8003660:	b244      	sxtb	r4, r0
            for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003662:	d1dc      	bne.n	800361e <LTC681x_rdcv+0x42>
        for (cell_reg = 1; cell_reg < ic[0].ic_reg.num_cv_reg + 1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 8003664:	f895 20e7 	ldrb.w	r2, [r5, #231]	@ 0xe7
 8003668:	f109 0901 	add.w	r9, r9, #1
 800366c:	fa5f f989 	uxtb.w	r9, r9
 8003670:	454a      	cmp	r2, r9
 8003672:	d2ca      	bcs.n	800360a <LTC681x_rdcv+0x2e>
 8003674:	469a      	mov	sl, r3
                    ic[current_ic].crc_count.cfgr_pec
                            + ic[current_ic].configb.rx_pec_match;
        }
        break;
    case CELL:
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003676:	f1bb 0f00 	cmp.w	fp, #0
 800367a:	d04d      	beq.n	8003718 <LTC681x_rdcv+0x13c>
 800367c:	eb0b 1b8b 	add.w	fp, fp, fp, lsl #6
 8003680:	eb05 008b 	add.w	r0, r5, fp, lsl #2
        {
            for (i = 0; i < ic[0].ic_reg.num_cv_reg; i++)
 8003684:	2a00      	cmp	r2, #0
 8003686:	d04e      	beq.n	8003726 <LTC681x_rdcv+0x14a>
            {
                ic[current_ic].crc_count.pec_count =
                        ic[current_ic].crc_count.pec_count
                                + ic[current_ic].cells.pec_match[i];
 8003688:	f895 3042 	ldrb.w	r3, [r5, #66]	@ 0x42
                ic[current_ic].crc_count.cell_pec[i] =
                        ic[current_ic].crc_count.cell_pec[i]
                                + ic[current_ic].cells.pec_match[i];
 800368c:	f8b5 10ca 	ldrh.w	r1, [r5, #202]	@ 0xca
                                + ic[current_ic].cells.pec_match[i];
 8003690:	f8b5 40c6 	ldrh.w	r4, [r5, #198]	@ 0xc6
                                + ic[current_ic].cells.pec_match[i];
 8003694:	4419      	add	r1, r3
            for (i = 0; i < ic[0].ic_reg.num_cv_reg; i++)
 8003696:	2a01      	cmp	r2, #1
                                + ic[current_ic].cells.pec_match[i];
 8003698:	4423      	add	r3, r4
                ic[current_ic].crc_count.cell_pec[i] =
 800369a:	f8a5 10ca 	strh.w	r1, [r5, #202]	@ 0xca
                                + ic[current_ic].cells.pec_match[i];
 800369e:	b29b      	uxth	r3, r3
            for (i = 0; i < ic[0].ic_reg.num_cv_reg; i++)
 80036a0:	d034      	beq.n	800370c <LTC681x_rdcv+0x130>
                                + ic[current_ic].cells.pec_match[i];
 80036a2:	f895 1043 	ldrb.w	r1, [r5, #67]	@ 0x43
                                + ic[current_ic].cells.pec_match[i];
 80036a6:	f8b5 40cc 	ldrh.w	r4, [r5, #204]	@ 0xcc
                                + ic[current_ic].cells.pec_match[i];
 80036aa:	440b      	add	r3, r1
            for (i = 0; i < ic[0].ic_reg.num_cv_reg; i++)
 80036ac:	2a02      	cmp	r2, #2
                                + ic[current_ic].cells.pec_match[i];
 80036ae:	4421      	add	r1, r4
                ic[current_ic].crc_count.cell_pec[i] =
 80036b0:	f8a5 10cc 	strh.w	r1, [r5, #204]	@ 0xcc
                                + ic[current_ic].cells.pec_match[i];
 80036b4:	b29b      	uxth	r3, r3
            for (i = 0; i < ic[0].ic_reg.num_cv_reg; i++)
 80036b6:	d029      	beq.n	800370c <LTC681x_rdcv+0x130>
                                + ic[current_ic].cells.pec_match[i];
 80036b8:	f895 1044 	ldrb.w	r1, [r5, #68]	@ 0x44
                                + ic[current_ic].cells.pec_match[i];
 80036bc:	f8b5 40ce 	ldrh.w	r4, [r5, #206]	@ 0xce
                                + ic[current_ic].cells.pec_match[i];
 80036c0:	440b      	add	r3, r1
            for (i = 0; i < ic[0].ic_reg.num_cv_reg; i++)
 80036c2:	2a03      	cmp	r2, #3
                                + ic[current_ic].cells.pec_match[i];
 80036c4:	4421      	add	r1, r4
                ic[current_ic].crc_count.cell_pec[i] =
 80036c6:	f8a5 10ce 	strh.w	r1, [r5, #206]	@ 0xce
                                + ic[current_ic].cells.pec_match[i];
 80036ca:	b29b      	uxth	r3, r3
            for (i = 0; i < ic[0].ic_reg.num_cv_reg; i++)
 80036cc:	d01e      	beq.n	800370c <LTC681x_rdcv+0x130>
                                + ic[current_ic].cells.pec_match[i];
 80036ce:	f895 1045 	ldrb.w	r1, [r5, #69]	@ 0x45
                                + ic[current_ic].cells.pec_match[i];
 80036d2:	f8b5 40d0 	ldrh.w	r4, [r5, #208]	@ 0xd0
                                + ic[current_ic].cells.pec_match[i];
 80036d6:	440b      	add	r3, r1
            for (i = 0; i < ic[0].ic_reg.num_cv_reg; i++)
 80036d8:	2a04      	cmp	r2, #4
                                + ic[current_ic].cells.pec_match[i];
 80036da:	4421      	add	r1, r4
                ic[current_ic].crc_count.cell_pec[i] =
 80036dc:	f8a5 10d0 	strh.w	r1, [r5, #208]	@ 0xd0
                                + ic[current_ic].cells.pec_match[i];
 80036e0:	b29b      	uxth	r3, r3
            for (i = 0; i < ic[0].ic_reg.num_cv_reg; i++)
 80036e2:	d013      	beq.n	800370c <LTC681x_rdcv+0x130>
                                + ic[current_ic].cells.pec_match[i];
 80036e4:	f895 1046 	ldrb.w	r1, [r5, #70]	@ 0x46
                                + ic[current_ic].cells.pec_match[i];
 80036e8:	f8b5 40d2 	ldrh.w	r4, [r5, #210]	@ 0xd2
                                + ic[current_ic].cells.pec_match[i];
 80036ec:	440b      	add	r3, r1
            for (i = 0; i < ic[0].ic_reg.num_cv_reg; i++)
 80036ee:	2a05      	cmp	r2, #5
                                + ic[current_ic].cells.pec_match[i];
 80036f0:	4421      	add	r1, r4
                                + ic[current_ic].cells.pec_match[i];
 80036f2:	b29b      	uxth	r3, r3
                ic[current_ic].crc_count.cell_pec[i] =
 80036f4:	f8a5 10d2 	strh.w	r1, [r5, #210]	@ 0xd2
            for (i = 0; i < ic[0].ic_reg.num_cv_reg; i++)
 80036f8:	d008      	beq.n	800370c <LTC681x_rdcv+0x130>
                                + ic[current_ic].cells.pec_match[i];
 80036fa:	f895 1047 	ldrb.w	r1, [r5, #71]	@ 0x47
                                + ic[current_ic].cells.pec_match[i];
 80036fe:	f8b5 40d4 	ldrh.w	r4, [r5, #212]	@ 0xd4
                                + ic[current_ic].cells.pec_match[i];
 8003702:	440b      	add	r3, r1
                                + ic[current_ic].cells.pec_match[i];
 8003704:	4421      	add	r1, r4
                ic[current_ic].crc_count.cell_pec[i] =
 8003706:	f8a5 10d4 	strh.w	r1, [r5, #212]	@ 0xd4
                                + ic[current_ic].cells.pec_match[i];
 800370a:	b29b      	uxth	r3, r3
            for (i = 0; i < ic[0].ic_reg.num_cv_reg; i++)
 800370c:	f8a5 30c6 	strh.w	r3, [r5, #198]	@ 0xc6
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003710:	f505 7582 	add.w	r5, r5, #260	@ 0x104
 8003714:	4285      	cmp	r5, r0
 8003716:	d1b7      	bne.n	8003688 <LTC681x_rdcv+0xac>
    free(cell_data);
 8003718:	4640      	mov	r0, r8
 800371a:	f004 fd33 	bl	8008184 <free>
}
 800371e:	4650      	mov	r0, sl
 8003720:	b003      	add	sp, #12
 8003722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003726:	f505 7582 	add.w	r5, r5, #260	@ 0x104
 800372a:	4285      	cmp	r5, r0
 800372c:	d0f4      	beq.n	8003718 <LTC681x_rdcv+0x13c>
 800372e:	f505 7582 	add.w	r5, r5, #260	@ 0x104
 8003732:	4285      	cmp	r5, r0
 8003734:	d1f7      	bne.n	8003726 <LTC681x_rdcv+0x14a>
 8003736:	e7ef      	b.n	8003718 <LTC681x_rdcv+0x13c>
                pec_error = pec_error + parse_cells(current_ic, cell_reg, cell_data,
 8003738:	f8cd e000 	str.w	lr, [sp]
 800373c:	f7ff feca 	bl	80034d4 <parse_cells>
            for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003740:	3701      	adds	r7, #1
                pec_error = pec_error + parse_cells(current_ic, cell_reg, cell_data,
 8003742:	4420      	add	r0, r4
            for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003744:	45bb      	cmp	fp, r7
                pec_error = pec_error + parse_cells(current_ic, cell_reg, cell_data,
 8003746:	b2c3      	uxtb	r3, r0
 8003748:	b244      	sxtb	r4, r0
            for (current_ic = 0; current_ic < total_ic; current_ic++)
 800374a:	f47f af68 	bne.w	800361e <LTC681x_rdcv+0x42>
        for (cell_reg = 1; cell_reg < ic[0].ic_reg.num_cv_reg + 1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 800374e:	f895 20e7 	ldrb.w	r2, [r5, #231]	@ 0xe7
 8003752:	f109 0901 	add.w	r9, r9, #1
 8003756:	fa5f f989 	uxtb.w	r9, r9
 800375a:	454a      	cmp	r2, r9
 800375c:	f4bf af55 	bcs.w	800360a <LTC681x_rdcv+0x2e>
 8003760:	e788      	b.n	8003674 <LTC681x_rdcv+0x98>
 8003762:	f895 20e7 	ldrb.w	r2, [r5, #231]	@ 0xe7
 8003766:	f109 0901 	add.w	r9, r9, #1
 800376a:	fa5f f989 	uxtb.w	r9, r9
 800376e:	454a      	cmp	r2, r9
    return (pec_error);
 8003770:	b2e3      	uxtb	r3, r4
        for (cell_reg = 1; cell_reg < ic[0].ic_reg.num_cv_reg + 1; cell_reg++) //Executes once for each of the LTC681x cell voltage registers
 8003772:	f4bf af4a 	bcs.w	800360a <LTC681x_rdcv+0x2e>
 8003776:	e77d      	b.n	8003674 <LTC681x_rdcv+0x98>
        LTC681x_rdcv_reg(reg, total_ic, cell_data);
 8003778:	4602      	mov	r2, r0
 800377a:	4659      	mov	r1, fp
 800377c:	4620      	mov	r0, r4
 800377e:	f7ff fe4b 	bl	8003418 <LTC681x_rdcv_reg>
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003782:	f1bb 0f00 	cmp.w	fp, #0
 8003786:	d027      	beq.n	80037d8 <LTC681x_rdcv+0x1fc>
 8003788:	2700      	movs	r7, #0
    int8_t pec_error = 0;
 800378a:	463e      	mov	r6, r7
                c_ic = total_ic - current_ic - 1;
 800378c:	f10b 39ff 	add.w	r9, fp, #4294967295
 8003790:	e014      	b.n	80037bc <LTC681x_rdcv+0x1e0>
                    + parse_cells(current_ic, reg, &cell_data[8 * c_ic],
 8003792:	461a      	mov	r2, r3
                                  &ic[c_ic].cells.c_codes[0],
 8003794:	eb03 1383 	add.w	r3, r3, r3, lsl #6
 8003798:	eb05 0383 	add.w	r3, r5, r3, lsl #2
                    + parse_cells(current_ic, reg, &cell_data[8 * c_ic],
 800379c:	f103 0142 	add.w	r1, r3, #66	@ 0x42
 80037a0:	9100      	str	r1, [sp, #0]
 80037a2:	331e      	adds	r3, #30
 80037a4:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
 80037a8:	4621      	mov	r1, r4
 80037aa:	f7ff fe93 	bl	80034d4 <parse_cells>
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 80037ae:	3701      	adds	r7, #1
                    + parse_cells(current_ic, reg, &cell_data[8 * c_ic],
 80037b0:	4430      	add	r0, r6
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 80037b2:	45bb      	cmp	fp, r7
                    + parse_cells(current_ic, reg, &cell_data[8 * c_ic],
 80037b4:	fa5f fa80 	uxtb.w	sl, r0
            pec_error = pec_error
 80037b8:	b246      	sxtb	r6, r0
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 80037ba:	d00a      	beq.n	80037d2 <LTC681x_rdcv+0x1f6>
                c_ic = total_ic - current_ic - 1;
 80037bc:	b2f8      	uxtb	r0, r7
            if (ic->isospi_reverse == false)
 80037be:	f895 20c5 	ldrb.w	r2, [r5, #197]	@ 0xc5
                c_ic = total_ic - current_ic - 1;
 80037c2:	eba9 0300 	sub.w	r3, r9, r0
 80037c6:	b2db      	uxtb	r3, r3
            if (ic->isospi_reverse == false)
 80037c8:	2a00      	cmp	r2, #0
 80037ca:	d1e2      	bne.n	8003792 <LTC681x_rdcv+0x1b6>
 80037cc:	463a      	mov	r2, r7
                c_ic = current_ic;
 80037ce:	4603      	mov	r3, r0
 80037d0:	e7e0      	b.n	8003794 <LTC681x_rdcv+0x1b8>
 80037d2:	f895 20e7 	ldrb.w	r2, [r5, #231]	@ 0xe7
 80037d6:	e751      	b.n	800367c <LTC681x_rdcv+0xa0>
        for (current_ic = 0; current_ic < total_ic; current_ic++)
 80037d8:	46da      	mov	sl, fp
 80037da:	e79d      	b.n	8003718 <LTC681x_rdcv+0x13c>

080037dc <LTC681x_pollAdc>:
{
 80037dc:	b510      	push	{r4, lr}
 80037de:	b082      	sub	sp, #8
    cmd[0] = 0x07;
 80037e0:	4b0e      	ldr	r3, [pc, #56]	@ (800381c <LTC681x_pollAdc+0x40>)
 80037e2:	9301      	str	r3, [sp, #4]
    cs_low();
 80037e4:	f000 f962 	bl	8003aac <cs_low>
    spi_write_array(4, cmd);
 80037e8:	a901      	add	r1, sp, #4
 80037ea:	2004      	movs	r0, #4
 80037ec:	f000 f990 	bl	8003b10 <spi_write_array>
 80037f0:	f649 4440 	movw	r4, #40000	@ 0x9c40
        current_time = spi_read_byte(0xFF);
 80037f4:	20ff      	movs	r0, #255	@ 0xff
 80037f6:	f000 f9cd 	bl	8003b94 <spi_read_byte>
        if (current_time > 0)
 80037fa:	f010 00ff 	ands.w	r0, r0, #255	@ 0xff
 80037fe:	d005      	beq.n	800380c <LTC681x_pollAdc+0x30>
    return ((uint32_t)current_time);
 8003800:	4604      	mov	r4, r0
    cs_high();
 8003802:	f000 f967 	bl	8003ad4 <cs_high>
}
 8003806:	4620      	mov	r0, r4
 8003808:	b002      	add	sp, #8
 800380a:	bd10      	pop	{r4, pc}
    while ((counter < 400000) && (finished == 0))
 800380c:	3c01      	subs	r4, #1
 800380e:	d1f1      	bne.n	80037f4 <LTC681x_pollAdc+0x18>
    cs_high();
 8003810:	f000 f960 	bl	8003ad4 <cs_high>
}
 8003814:	4620      	mov	r0, r4
 8003816:	b002      	add	sp, #8
 8003818:	bd10      	pop	{r4, pc}
 800381a:	bf00      	nop
 800381c:	6cf31407 	.word	0x6cf31407

08003820 <LTC681x_reset_crc_count>:
void LTC681x_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that stores the data
        )
{
    int i, current_ic;
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003820:	b188      	cbz	r0, 8003846 <LTC681x_reset_crc_count+0x26>
 8003822:	f101 03c6 	add.w	r3, r1, #198	@ 0xc6
 8003826:	eb00 1080 	add.w	r0, r0, r0, lsl #6
 800382a:	eb03 0180 	add.w	r1, r3, r0, lsl #2
    {
        ic[current_ic].crc_count.pec_count = 0;
 800382e:	2200      	movs	r2, #0
 8003830:	609a      	str	r2, [r3, #8]
 8003832:	60da      	str	r2, [r3, #12]
 8003834:	611a      	str	r2, [r3, #16]
 8003836:	615a      	str	r2, [r3, #20]
 8003838:	619a      	str	r2, [r3, #24]
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	605a      	str	r2, [r3, #4]
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 800383e:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8003842:	428b      	cmp	r3, r1
 8003844:	d1f4      	bne.n	8003830 <LTC681x_reset_crc_count+0x10>
        for (i = 0; i < 2; i++)
        {
            ic[current_ic].crc_count.stat_pec[i] = 0;
        }
    }
}
 8003846:	4770      	bx	lr

08003848 <LTC681x_init_cfg>:
void LTC681x_init_cfg(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that stores the data
        )
{
    uint8_t current_ic, j;
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8003848:	b160      	cbz	r0, 8003864 <LTC681x_init_cfg+0x1c>
 800384a:	eb00 1080 	add.w	r0, r0, r0, lsl #6
 800384e:	eb01 0280 	add.w	r2, r1, r0, lsl #2
    {
        for (j = 0; j < 6; j++)
        {
            ic[current_ic].config.tx_data[j] = 0;
 8003852:	2300      	movs	r3, #0
        }
        ic[current_ic].isospi_reverse = 0;
 8003854:	f881 30c5 	strb.w	r3, [r1, #197]	@ 0xc5
            ic[current_ic].config.tx_data[j] = 0;
 8003858:	600b      	str	r3, [r1, #0]
 800385a:	808b      	strh	r3, [r1, #4]
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 800385c:	f501 7182 	add.w	r1, r1, #260	@ 0x104
 8003860:	428a      	cmp	r2, r1
 8003862:	d1f7      	bne.n	8003854 <LTC681x_init_cfg+0xc>
    }
}
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop

08003868 <LTC681x_set_cfgr_dis>:
    for (i = 0; i < 8; i++)
    {
        if (dcc[i])
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4] | (0x01 << i);
        else
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]
 8003868:	eb00 1080 	add.w	r0, r0, r0, lsl #6
 800386c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
        if (dcc[i])
 8003870:	7810      	ldrb	r0, [r2, #0]
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4] | (0x01 << i);
 8003872:	790b      	ldrb	r3, [r1, #4]
        if (dcc[i])
 8003874:	2800      	cmp	r0, #0
 8003876:	d15e      	bne.n	8003936 <LTC681x_set_cfgr_dis+0xce>
                    & (~(0x01 << i));
 8003878:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4] | (0x01 << i);
 800387c:	710b      	strb	r3, [r1, #4]
        if (dcc[i])
 800387e:	7850      	ldrb	r0, [r2, #1]
 8003880:	2800      	cmp	r0, #0
 8003882:	d155      	bne.n	8003930 <LTC681x_set_cfgr_dis+0xc8>
                    & (~(0x01 << i));
 8003884:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4] | (0x01 << i);
 8003888:	710b      	strb	r3, [r1, #4]
        if (dcc[i])
 800388a:	7890      	ldrb	r0, [r2, #2]
 800388c:	2800      	cmp	r0, #0
 800388e:	d14c      	bne.n	800392a <LTC681x_set_cfgr_dis+0xc2>
                    & (~(0x01 << i));
 8003890:	f003 03fb 	and.w	r3, r3, #251	@ 0xfb
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4] | (0x01 << i);
 8003894:	710b      	strb	r3, [r1, #4]
        if (dcc[i])
 8003896:	78d0      	ldrb	r0, [r2, #3]
 8003898:	2800      	cmp	r0, #0
 800389a:	d143      	bne.n	8003924 <LTC681x_set_cfgr_dis+0xbc>
                    & (~(0x01 << i));
 800389c:	f003 03f7 	and.w	r3, r3, #247	@ 0xf7
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4] | (0x01 << i);
 80038a0:	710b      	strb	r3, [r1, #4]
        if (dcc[i])
 80038a2:	7910      	ldrb	r0, [r2, #4]
 80038a4:	2800      	cmp	r0, #0
 80038a6:	d13a      	bne.n	800391e <LTC681x_set_cfgr_dis+0xb6>
                    & (~(0x01 << i));
 80038a8:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4] | (0x01 << i);
 80038ac:	710b      	strb	r3, [r1, #4]
        if (dcc[i])
 80038ae:	7950      	ldrb	r0, [r2, #5]
 80038b0:	bb90      	cbnz	r0, 8003918 <LTC681x_set_cfgr_dis+0xb0>
                    & (~(0x01 << i));
 80038b2:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4] | (0x01 << i);
 80038b6:	710b      	strb	r3, [r1, #4]
        if (dcc[i])
 80038b8:	7990      	ldrb	r0, [r2, #6]
 80038ba:	bb50      	cbnz	r0, 8003912 <LTC681x_set_cfgr_dis+0xaa>
                    & (~(0x01 << i));
 80038bc:	f003 03bf 	and.w	r3, r3, #191	@ 0xbf
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4] | (0x01 << i);
 80038c0:	710b      	strb	r3, [r1, #4]
        if (dcc[i])
 80038c2:	79d0      	ldrb	r0, [r2, #7]
 80038c4:	b1c0      	cbz	r0, 80038f8 <LTC681x_set_cfgr_dis+0x90>
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4] | (0x01 << i);
 80038c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038ca:	710b      	strb	r3, [r1, #4]
    }
    for (i = 0; i < 4; i++)
    {
        if (dcc[i + 8])
 80038cc:	7a10      	ldrb	r0, [r2, #8]
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5] | (0x01 << i);
 80038ce:	794b      	ldrb	r3, [r1, #5]
        if (dcc[i + 8])
 80038d0:	b9c8      	cbnz	r0, 8003906 <LTC681x_set_cfgr_dis+0x9e>
        else
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
                    & (~(0x01 << i));
 80038d2:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5] | (0x01 << i);
 80038d6:	714b      	strb	r3, [r1, #5]
        if (dcc[i + 8])
 80038d8:	7a50      	ldrb	r0, [r2, #9]
 80038da:	bb78      	cbnz	r0, 800393c <LTC681x_set_cfgr_dis+0xd4>
                    & (~(0x01 << i));
 80038dc:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5] | (0x01 << i);
 80038e0:	714b      	strb	r3, [r1, #5]
        if (dcc[i + 8])
 80038e2:	7a90      	ldrb	r0, [r2, #10]
 80038e4:	bb80      	cbnz	r0, 8003948 <LTC681x_set_cfgr_dis+0xe0>
                    & (~(0x01 << i));
 80038e6:	f003 03fb 	and.w	r3, r3, #251	@ 0xfb
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5] | (0x01 << i);
 80038ea:	714b      	strb	r3, [r1, #5]
        if (dcc[i + 8])
 80038ec:	7ad2      	ldrb	r2, [r2, #11]
 80038ee:	b38a      	cbz	r2, 8003954 <LTC681x_set_cfgr_dis+0xec>
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5] | (0x01 << i);
 80038f0:	f043 0308 	orr.w	r3, r3, #8
 80038f4:	714b      	strb	r3, [r1, #5]
    }
}
 80038f6:	4770      	bx	lr
                    & (~(0x01 << i));
 80038f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4] | (0x01 << i);
 80038fc:	710b      	strb	r3, [r1, #4]
        if (dcc[i + 8])
 80038fe:	7a10      	ldrb	r0, [r2, #8]
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5] | (0x01 << i);
 8003900:	794b      	ldrb	r3, [r1, #5]
        if (dcc[i + 8])
 8003902:	2800      	cmp	r0, #0
 8003904:	d0e5      	beq.n	80038d2 <LTC681x_set_cfgr_dis+0x6a>
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5] | (0x01 << i);
 8003906:	f043 0301 	orr.w	r3, r3, #1
 800390a:	714b      	strb	r3, [r1, #5]
        if (dcc[i + 8])
 800390c:	7a50      	ldrb	r0, [r2, #9]
 800390e:	b9a8      	cbnz	r0, 800393c <LTC681x_set_cfgr_dis+0xd4>
 8003910:	e7e4      	b.n	80038dc <LTC681x_set_cfgr_dis+0x74>
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4] | (0x01 << i);
 8003912:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003916:	e7d3      	b.n	80038c0 <LTC681x_set_cfgr_dis+0x58>
 8003918:	f043 0320 	orr.w	r3, r3, #32
 800391c:	e7cb      	b.n	80038b6 <LTC681x_set_cfgr_dis+0x4e>
 800391e:	f043 0310 	orr.w	r3, r3, #16
 8003922:	e7c3      	b.n	80038ac <LTC681x_set_cfgr_dis+0x44>
 8003924:	f043 0308 	orr.w	r3, r3, #8
 8003928:	e7ba      	b.n	80038a0 <LTC681x_set_cfgr_dis+0x38>
 800392a:	f043 0304 	orr.w	r3, r3, #4
 800392e:	e7b1      	b.n	8003894 <LTC681x_set_cfgr_dis+0x2c>
 8003930:	f043 0302 	orr.w	r3, r3, #2
 8003934:	e7a8      	b.n	8003888 <LTC681x_set_cfgr_dis+0x20>
 8003936:	f043 0301 	orr.w	r3, r3, #1
 800393a:	e79f      	b.n	800387c <LTC681x_set_cfgr_dis+0x14>
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5] | (0x01 << i);
 800393c:	f043 0302 	orr.w	r3, r3, #2
 8003940:	714b      	strb	r3, [r1, #5]
        if (dcc[i + 8])
 8003942:	7a90      	ldrb	r0, [r2, #10]
 8003944:	2800      	cmp	r0, #0
 8003946:	d0ce      	beq.n	80038e6 <LTC681x_set_cfgr_dis+0x7e>
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5] | (0x01 << i);
 8003948:	f043 0304 	orr.w	r3, r3, #4
 800394c:	714b      	strb	r3, [r1, #5]
        if (dcc[i + 8])
 800394e:	7ad2      	ldrb	r2, [r2, #11]
 8003950:	2a00      	cmp	r2, #0
 8003952:	d1cd      	bne.n	80038f0 <LTC681x_set_cfgr_dis+0x88>
                    & (~(0x01 << i));
 8003954:	f003 03f7 	and.w	r3, r3, #247	@ 0xf7
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5] | (0x01 << i);
 8003958:	714b      	strb	r3, [r1, #5]
}
 800395a:	4770      	bx	lr

0800395c <LTC681x_set_cfgr>:
{
 800395c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] | 0x04;
 8003960:	eb00 1480 	add.w	r4, r0, r0, lsl #6
 8003964:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8003968:	f811 c024 	ldrb.w	ip, [r1, r4, lsl #2]
{
 800396c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8003970:	9f08      	ldr	r7, [sp, #32]
 8003972:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 8003976:	f8bd 6028 	ldrh.w	r6, [sp, #40]	@ 0x28
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] | 0x04;
 800397a:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    if (refon)
 800397e:	2a00      	cmp	r2, #0
 8003980:	d059      	beq.n	8003a36 <LTC681x_set_cfgr+0xda>
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] | 0x04;
 8003982:	f04c 0c04 	orr.w	ip, ip, #4
    if (adcopt)
 8003986:	2b00      	cmp	r3, #0
 8003988:	d059      	beq.n	8003a3e <LTC681x_set_cfgr+0xe2>
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] | 0x01;
 800398a:	f04c 0301 	orr.w	r3, ip, #1
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] & 0xFE;
 800398e:	f801 300e 	strb.w	r3, [r1, lr]
        if (gpio[i])
 8003992:	f898 2000 	ldrb.w	r2, [r8]
 8003996:	2a00      	cmp	r2, #0
 8003998:	d159      	bne.n	8003a4e <LTC681x_set_cfgr+0xf2>
                    & (~(0x01 << (i + 3)));
 800399a:	f003 03f7 	and.w	r3, r3, #247	@ 0xf7
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 800399e:	f801 300e 	strb.w	r3, [r1, lr]
        if (gpio[i])
 80039a2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80039a6:	2a00      	cmp	r2, #0
 80039a8:	d159      	bne.n	8003a5e <LTC681x_set_cfgr+0x102>
                    & (~(0x01 << (i + 3)));
 80039aa:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 80039ae:	f801 300e 	strb.w	r3, [r1, lr]
        if (gpio[i])
 80039b2:	f898 2002 	ldrb.w	r2, [r8, #2]
 80039b6:	2a00      	cmp	r2, #0
 80039b8:	d159      	bne.n	8003a6e <LTC681x_set_cfgr+0x112>
                    & (~(0x01 << (i + 3)));
 80039ba:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 80039be:	f801 300e 	strb.w	r3, [r1, lr]
        if (gpio[i])
 80039c2:	f898 2003 	ldrb.w	r2, [r8, #3]
 80039c6:	2a00      	cmp	r2, #0
 80039c8:	d159      	bne.n	8003a7e <LTC681x_set_cfgr+0x122>
                    & (~(0x01 << (i + 3)));
 80039ca:	f003 03bf 	and.w	r3, r3, #191	@ 0xbf
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 80039ce:	f801 300e 	strb.w	r3, [r1, lr]
        if (gpio[i])
 80039d2:	f898 2004 	ldrb.w	r2, [r8, #4]
 80039d6:	2a00      	cmp	r2, #0
 80039d8:	d059      	beq.n	8003a8e <LTC681x_set_cfgr+0x132>
                    | (0x01 << (i + 3));
 80039da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 80039de:	f801 300e 	strb.w	r3, [r1, lr]
    LTC681x_set_cfgr_dis(nIC, ic, dcc);
 80039e2:	9a07      	ldr	r2, [sp, #28]
 80039e4:	f7ff ff40 	bl	8003868 <LTC681x_set_cfgr_dis>
void LTC681x_set_cfgr_dcto(uint8_t nIC, cell_asic *ic, bool dcto[4])
{
    int i;
    for (i = 0; i < 4; i++)
    {
        if (dcto[i])
 80039e8:	783a      	ldrb	r2, [r7, #0]
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 80039ea:	7963      	ldrb	r3, [r4, #5]
        if (dcto[i])
 80039ec:	2a00      	cmp	r2, #0
 80039ee:	d15a      	bne.n	8003aa6 <LTC681x_set_cfgr+0x14a>
                    | (0x01 << (i + 4));
        else
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
                    & (~(0x01 << (i + 4)));
 80039f0:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 80039f4:	7163      	strb	r3, [r4, #5]
        if (dcto[i])
 80039f6:	787a      	ldrb	r2, [r7, #1]
 80039f8:	2a00      	cmp	r2, #0
 80039fa:	d151      	bne.n	8003aa0 <LTC681x_set_cfgr+0x144>
                    & (~(0x01 << (i + 4)));
 80039fc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8003a00:	7163      	strb	r3, [r4, #5]
        if (dcto[i])
 8003a02:	78ba      	ldrb	r2, [r7, #2]
 8003a04:	2a00      	cmp	r2, #0
 8003a06:	d148      	bne.n	8003a9a <LTC681x_set_cfgr+0x13e>
                    & (~(0x01 << (i + 4)));
 8003a08:	f003 03bf 	and.w	r3, r3, #191	@ 0xbf
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8003a0c:	7163      	strb	r3, [r4, #5]
        if (dcto[i])
 8003a0e:	78fa      	ldrb	r2, [r7, #3]
 8003a10:	2a00      	cmp	r2, #0
 8003a12:	d03f      	beq.n	8003a94 <LTC681x_set_cfgr+0x138>
                    | (0x01 << (i + 4));
 8003a14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
}

/* Helper Function to set UV value in CFG register */
void LTC681x_set_cfgr_uv(uint8_t nIC, cell_asic *ic, uint16_t uv)
{
    uint16_t tmp = (uv / 16) - 1;
 8003a18:	092d      	lsrs	r5, r5, #4
 8003a1a:	3d01      	subs	r5, #1
 8003a1c:	b2ad      	uxth	r5, r5
{
    uint16_t tmp = (ov / 16);
    ic[nIC].config.tx_data[3] = 0x00FF & (tmp >> 4);
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2] & 0x0F;
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
            | ((0x000F & tmp) << 4);
 8003a1e:	0932      	lsrs	r2, r6, #4
    ic[nIC].config.tx_data[1] = 0x00FF & tmp;
 8003a20:	7065      	strb	r5, [r4, #1]
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2] & 0x0F;
 8003a22:	f3c5 2503 	ubfx	r5, r5, #8, #4
    ic[nIC].config.tx_data[3] = 0x00FF & (tmp >> 4);
 8003a26:	0a36      	lsrs	r6, r6, #8
            | ((0x000F & tmp) << 4);
 8003a28:	ea45 1502 	orr.w	r5, r5, r2, lsl #4
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8003a2c:	7163      	strb	r3, [r4, #5]
    ic[nIC].config.tx_data[3] = 0x00FF & (tmp >> 4);
 8003a2e:	70e6      	strb	r6, [r4, #3]
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 8003a30:	70a5      	strb	r5, [r4, #2]
}
 8003a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] & 0xFB;
 8003a36:	f00c 0cfb 	and.w	ip, ip, #251	@ 0xfb
    if (adcopt)
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1a5      	bne.n	800398a <LTC681x_set_cfgr+0x2e>
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] & 0xFE;
 8003a3e:	f00c 03fe 	and.w	r3, ip, #254	@ 0xfe
 8003a42:	f801 300e 	strb.w	r3, [r1, lr]
        if (gpio[i])
 8003a46:	f898 2000 	ldrb.w	r2, [r8]
 8003a4a:	2a00      	cmp	r2, #0
 8003a4c:	d0a5      	beq.n	800399a <LTC681x_set_cfgr+0x3e>
                    | (0x01 << (i + 3));
 8003a4e:	f043 0308 	orr.w	r3, r3, #8
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 8003a52:	f801 300e 	strb.w	r3, [r1, lr]
        if (gpio[i])
 8003a56:	f898 2001 	ldrb.w	r2, [r8, #1]
 8003a5a:	2a00      	cmp	r2, #0
 8003a5c:	d0a5      	beq.n	80039aa <LTC681x_set_cfgr+0x4e>
                    | (0x01 << (i + 3));
 8003a5e:	f043 0310 	orr.w	r3, r3, #16
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 8003a62:	f801 300e 	strb.w	r3, [r1, lr]
        if (gpio[i])
 8003a66:	f898 2002 	ldrb.w	r2, [r8, #2]
 8003a6a:	2a00      	cmp	r2, #0
 8003a6c:	d0a5      	beq.n	80039ba <LTC681x_set_cfgr+0x5e>
                    | (0x01 << (i + 3));
 8003a6e:	f043 0320 	orr.w	r3, r3, #32
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 8003a72:	f801 300e 	strb.w	r3, [r1, lr]
        if (gpio[i])
 8003a76:	f898 2003 	ldrb.w	r2, [r8, #3]
 8003a7a:	2a00      	cmp	r2, #0
 8003a7c:	d0a5      	beq.n	80039ca <LTC681x_set_cfgr+0x6e>
                    | (0x01 << (i + 3));
 8003a7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 8003a82:	f801 300e 	strb.w	r3, [r1, lr]
        if (gpio[i])
 8003a86:	f898 2004 	ldrb.w	r2, [r8, #4]
 8003a8a:	2a00      	cmp	r2, #0
 8003a8c:	d1a5      	bne.n	80039da <LTC681x_set_cfgr+0x7e>
                    & (~(0x01 << (i + 3)));
 8003a8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a92:	e7a4      	b.n	80039de <LTC681x_set_cfgr+0x82>
                    & (~(0x01 << (i + 4)));
 8003a94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a98:	e7be      	b.n	8003a18 <LTC681x_set_cfgr+0xbc>
                    | (0x01 << (i + 4));
 8003a9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a9e:	e7b5      	b.n	8003a0c <LTC681x_set_cfgr+0xb0>
 8003aa0:	f043 0320 	orr.w	r3, r3, #32
 8003aa4:	e7ac      	b.n	8003a00 <LTC681x_set_cfgr+0xa4>
 8003aa6:	f043 0310 	orr.w	r3, r3, #16
 8003aaa:	e7a3      	b.n	80039f4 <LTC681x_set_cfgr+0x98>

08003aac <cs_low>:
		4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 0, 0, 0, -1, -1, -1, -2, -2, -2, -3,
		-3, -3, -4, -4, -4, -5, -5, -5, -5, -6, -6, -6, -7, -7, -7, -8, -8, -8,
		-9, -9, -9, -10, -10, -10, -10, -11, -11, -11, -12, -12, -12, -13, -13,
		-13, -13, -14, -14, -14, -15, -15, -15, -16, -16, -16, -16, -25 };

void cs_low() {
 8003aac:	b508      	push	{r3, lr}

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8003aae:	4807      	ldr	r0, [pc, #28]	@ (8003acc <cs_low+0x20>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ab6:	f002 f877 	bl	8005ba8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);// Enable Pack, /CS asserted


}
 8003aba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	 HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);// Enable Pack, /CS asserted
 8003abe:	4804      	ldr	r0, [pc, #16]	@ (8003ad0 <cs_low+0x24>)
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003ac6:	f002 b86f 	b.w	8005ba8 <HAL_GPIO_WritePin>
 8003aca:	bf00      	nop
 8003acc:	40020400 	.word	0x40020400
 8003ad0:	40020c00 	.word	0x40020c00

08003ad4 <cs_high>:

void cs_high() {
 8003ad4:	b508      	push	{r3, lr}

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8003ad6:	4807      	ldr	r0, [pc, #28]	@ (8003af4 <cs_high+0x20>)
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ade:	f002 f863 	bl	8005ba8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);// Disable Pack, /CS deasserted


}
 8003ae2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	 HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);// Disable Pack, /CS deasserted
 8003ae6:	4804      	ldr	r0, [pc, #16]	@ (8003af8 <cs_high+0x24>)
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003aee:	f002 b85b 	b.w	8005ba8 <HAL_GPIO_WritePin>
 8003af2:	bf00      	nop
 8003af4:	40020400 	.word	0x40020400
 8003af8:	40020c00 	.word	0x40020c00

08003afc <delay_time_us>:

void delay_time_us(uint32_t time_delay_val) {
	uint32_t time_delay_count;
	uint32_t time_delay_val_temp = time_delay_val * 9;
 8003afc:	eb00 02c0 	add.w	r2, r0, r0, lsl #3
	for (time_delay_count = 0; time_delay_count < time_delay_val_temp;
 8003b00:	b120      	cbz	r0, 8003b0c <delay_time_us+0x10>
 8003b02:	2300      	movs	r3, #0
			time_delay_count++) {
		__NOP();
 8003b04:	bf00      	nop
			time_delay_count++) {
 8003b06:	3301      	adds	r3, #1
	for (time_delay_count = 0; time_delay_count < time_delay_val_temp;
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d8fb      	bhi.n	8003b04 <delay_time_us+0x8>
	}
}
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop

08003b10 <spi_write_array>:

void spi_write_array(uint8_t len, // Option: Number of bytes to be written on the SPI port
		uint8_t data[] //Array of bytes to be written on the SPI port
		) {
	uint8_t len_t;
	for (len_t = 0; len_t < len; len_t++) {
 8003b10:	b1a0      	cbz	r0, 8003b3c <spi_write_array+0x2c>
		) {
 8003b12:	b570      	push	{r4, r5, r6, lr}
		if (HAL_SPI_Transmit(&hspi4, &data[len_t], 1, 20) != HAL_OK) {
 8003b14:	4e0a      	ldr	r6, [pc, #40]	@ (8003b40 <spi_write_array+0x30>)
 8003b16:	460c      	mov	r4, r1
 8003b18:	180d      	adds	r5, r1, r0
 8003b1a:	e001      	b.n	8003b20 <spi_write_array+0x10>
	for (len_t = 0; len_t < len; len_t++) {
 8003b1c:	42ac      	cmp	r4, r5
 8003b1e:	d00c      	beq.n	8003b3a <spi_write_array+0x2a>
		if (HAL_SPI_Transmit(&hspi4, &data[len_t], 1, 20) != HAL_OK) {
 8003b20:	4621      	mov	r1, r4
 8003b22:	2201      	movs	r2, #1
 8003b24:	2314      	movs	r3, #20
 8003b26:	4630      	mov	r0, r6
	for (len_t = 0; len_t < len; len_t++) {
 8003b28:	4414      	add	r4, r2
		if (HAL_SPI_Transmit(&hspi4, &data[len_t], 1, 20) != HAL_OK) {
 8003b2a:	f003 fa55 	bl	8006fd8 <HAL_SPI_Transmit>
 8003b2e:	2800      	cmp	r0, #0
 8003b30:	d0f4      	beq.n	8003b1c <spi_write_array+0xc>
			/* Transfer error in transmission process */
			Error_Handler();
 8003b32:	f001 f83f 	bl	8004bb4 <Error_Handler>
	for (len_t = 0; len_t < len; len_t++) {
 8003b36:	42ac      	cmp	r4, r5
 8003b38:	d1f2      	bne.n	8003b20 <spi_write_array+0x10>
		}
	}

}
 8003b3a:	bd70      	pop	{r4, r5, r6, pc}
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	20001340 	.word	0x20001340

08003b44 <spi_write_read>:

void spi_write_read(uint8_t tx_Data[], //array of data to be written on SPI port
		uint8_t tx_len, //length of the tx data array
		uint8_t *rx_data, //Input: array that will store the data read by the SPI port
		uint8_t rx_len //Option: number of bytes to be read from the SPI port
		) {
 8003b44:	b538      	push	{r3, r4, r5, lr}
 8003b46:	461c      	mov	r4, r3
 8003b48:	4615      	mov	r5, r2
	status_spi_out = HAL_SPI_Transmit(&hspi4, tx_Data, tx_len, 20);
 8003b4a:	2314      	movs	r3, #20
 8003b4c:	460a      	mov	r2, r1
 8003b4e:	4601      	mov	r1, r0
 8003b50:	480c      	ldr	r0, [pc, #48]	@ (8003b84 <spi_write_read+0x40>)
 8003b52:	f003 fa41 	bl	8006fd8 <HAL_SPI_Transmit>
 8003b56:	4a0c      	ldr	r2, [pc, #48]	@ (8003b88 <spi_write_read+0x44>)
	rx_len_local = rx_len;
 8003b58:	4b0c      	ldr	r3, [pc, #48]	@ (8003b8c <spi_write_read+0x48>)
	status_spi_out = HAL_SPI_Transmit(&hspi4, tx_Data, tx_len, 20);
 8003b5a:	7010      	strb	r0, [r2, #0]
	rx_len_local = rx_len;
 8003b5c:	701c      	strb	r4, [r3, #0]
	if (status_spi_out != HAL_OK) {
 8003b5e:	b948      	cbnz	r0, 8003b74 <spi_write_read+0x30>

		Error_Handler();
	}
	status_spi_in = HAL_SPI_Receive(&hspi4, rx_data, rx_len, 20);
 8003b60:	2314      	movs	r3, #20
 8003b62:	4808      	ldr	r0, [pc, #32]	@ (8003b84 <spi_write_read+0x40>)
 8003b64:	4622      	mov	r2, r4
 8003b66:	4629      	mov	r1, r5
 8003b68:	f003 fc6c 	bl	8007444 <HAL_SPI_Receive>
 8003b6c:	4b08      	ldr	r3, [pc, #32]	@ (8003b90 <spi_write_read+0x4c>)
 8003b6e:	7018      	strb	r0, [r3, #0]
	if (status_spi_in != HAL_OK) {
 8003b70:	b918      	cbnz	r0, 8003b7a <spi_write_read+0x36>

		Error_Handler();
	}

}
 8003b72:	bd38      	pop	{r3, r4, r5, pc}
		Error_Handler();
 8003b74:	f001 f81e 	bl	8004bb4 <Error_Handler>
 8003b78:	e7f2      	b.n	8003b60 <spi_write_read+0x1c>
}
 8003b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		Error_Handler();
 8003b7e:	f001 b819 	b.w	8004bb4 <Error_Handler>
 8003b82:	bf00      	nop
 8003b84:	20001340 	.word	0x20001340
 8003b88:	20000fbd 	.word	0x20000fbd
 8003b8c:	20000fbe 	.word	0x20000fbe
 8003b90:	20000fbc 	.word	0x20000fbc

08003b94 <spi_read_byte>:
 * @brief Description  :  Read just 1 byte using the SPI port
 * @param parameters   :  TX data array, TX data length, RX data pointer, number of bytes to be read from the SPI port
 * @return Value       :  return the data RX buffer
 */

uint8_t spi_read_byte(uint8_t tx_dat) {
 8003b94:	b500      	push	{lr}
 8003b96:	b087      	sub	sp, #28
	uint8_t data;
	if (HAL_SPI_TransmitReceive(&hspi4, &tx_dat, &data, 1, 20) != HAL_OK) {
 8003b98:	2314      	movs	r3, #20
uint8_t spi_read_byte(uint8_t tx_dat) {
 8003b9a:	4684      	mov	ip, r0
	if (HAL_SPI_TransmitReceive(&hspi4, &tx_dat, &data, 1, 20) != HAL_OK) {
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	480b      	ldr	r0, [pc, #44]	@ (8003bcc <spi_read_byte+0x38>)
uint8_t spi_read_byte(uint8_t tx_dat) {
 8003ba0:	f88d c00f 	strb.w	ip, [sp, #15]
	if (HAL_SPI_TransmitReceive(&hspi4, &tx_dat, &data, 1, 20) != HAL_OK) {
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	f10d 0217 	add.w	r2, sp, #23
 8003baa:	f10d 010f 	add.w	r1, sp, #15
 8003bae:	f003 fb19 	bl	80071e4 <HAL_SPI_TransmitReceive>
 8003bb2:	b920      	cbnz	r0, 8003bbe <spi_read_byte+0x2a>
		Error_Handler();
	}
	return (data);
}
 8003bb4:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8003bb8:	b007      	add	sp, #28
 8003bba:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8003bbe:	f000 fff9 	bl	8004bb4 <Error_Handler>
}
 8003bc2:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8003bc6:	b007      	add	sp, #28
 8003bc8:	f85d fb04 	ldr.w	pc, [sp], #4
 8003bcc:	20001340 	.word	0x20001340

08003bd0 <cell_voltage_read>:
        temperature_val_tb = TemperatureDataTable[temp_val_tp];
    }
    return temperature_val_tb;
}

int8_t cell_voltage_read(void) {
 8003bd0:	b570      	push	{r4, r5, r6, lr}
	int8_t error = 0;
	wakeup_sleep(TOTAL_IC);
 8003bd2:	2002      	movs	r0, #2
 8003bd4:	f7ff fabe 	bl	8003154 <wakeup_sleep>
	LTC6811_adcv(ADC_CONVERSION_MODE, ADC_DCP, CELL_CH_TO_CONVERT);
 8003bd8:	2200      	movs	r2, #0
 8003bda:	4611      	mov	r1, r2
 8003bdc:	2002      	movs	r0, #2
	 LTC6811_pollAdc();
	wakeup_sleep(TOTAL_IC);
	error = LTC6811_rdcv(SEL_ALL_REG, TOTAL_IC, BMS_IC);
 8003bde:	4d12      	ldr	r5, [pc, #72]	@ (8003c28 <cell_voltage_read+0x58>)
	LTC6811_adcv(ADC_CONVERSION_MODE, ADC_DCP, CELL_CH_TO_CONVERT);
 8003be0:	f7ff faa2 	bl	8003128 <LTC6811_adcv>
	 LTC6811_pollAdc();
 8003be4:	f7ff faa4 	bl	8003130 <LTC6811_pollAdc>
	wakeup_sleep(TOTAL_IC);
 8003be8:	2002      	movs	r0, #2
 8003bea:	f7ff fab3 	bl	8003154 <wakeup_sleep>
	error = LTC6811_rdcv(SEL_ALL_REG, TOTAL_IC, BMS_IC);
 8003bee:	462a      	mov	r2, r5
 8003bf0:	2102      	movs	r1, #2
 8003bf2:	2000      	movs	r0, #0
 8003bf4:	f7ff fa9a 	bl	800312c <LTC6811_rdcv>
 8003bf8:	b244      	sxtb	r4, r0
//	check_error(error);
	uint8_t i_1, current_ic_1;
	if (error == -1) {
 8003bfa:	1c63      	adds	r3, r4, #1
 8003bfc:	d001      	beq.n	8003c02 <cell_voltage_read+0x32>
			}
		}
	}
	//cell_data_print(error, conv_time);
	return error;
}
 8003bfe:	4620      	mov	r0, r4
 8003c00:	bd70      	pop	{r4, r5, r6, pc}
			for (i_1 = 0; i_1 < BMS_IC[0].ic_reg.cell_channels; i_1++) {
 8003c02:	f895 60e4 	ldrb.w	r6, [r5, #228]	@ 0xe4
 8003c06:	2e00      	cmp	r6, #0
 8003c08:	d0f9      	beq.n	8003bfe <cell_voltage_read+0x2e>
				BMS_IC[current_ic_1].cells.c_codes[i_1] = 0;
 8003c0a:	0076      	lsls	r6, r6, #1
 8003c0c:	4632      	mov	r2, r6
 8003c0e:	2100      	movs	r1, #0
 8003c10:	f105 001e 	add.w	r0, r5, #30
 8003c14:	f004 fb6c 	bl	80082f0 <memset>
 8003c18:	4632      	mov	r2, r6
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	f505 7091 	add.w	r0, r5, #290	@ 0x122
 8003c20:	f004 fb66 	bl	80082f0 <memset>
}
 8003c24:	4620      	mov	r0, r4
 8003c26:	bd70      	pop	{r4, r5, r6, pc}
 8003c28:	20000fd0 	.word	0x20000fd0

08003c2c <sendData>:
extern UART_HandleTypeDef huart3;
extern UART_HandleTypeDef huart6;


void sendData (uint8_t *data, int size)
{
 8003c2c:	b570      	push	{r4, r5, r6, lr}



	// we will calculate the CRC in this function itself
	uint16_t crc = crc16(data, size);
 8003c2e:	b28e      	uxth	r6, r1
{
 8003c30:	460d      	mov	r5, r1
	uint16_t crc = crc16(data, size);
 8003c32:	4631      	mov	r1, r6
{
 8003c34:	4604      	mov	r4, r0
	uint16_t crc = crc16(data, size);
 8003c36:	f000 f81d 	bl	8003c74 <crc16>
	data[size] = crc&0xFF;   // CRC LOW
	data[size+1] = (crc>>8)&0xFF;  // CRC HIGH
 8003c3a:	1963      	adds	r3, r4, r5
	data[size] = crc&0xFF;   // CRC LOW
 8003c3c:	5560      	strb	r0, [r4, r5]

	// Pull DE high to enable TX operation
	HAL_GPIO_WritePin(GPIOB, USART1_ENABLE_Pin, GPIO_PIN_SET);
 8003c3e:	4d0b      	ldr	r5, [pc, #44]	@ (8003c6c <sendData+0x40>)
	data[size+1] = (crc>>8)&0xFF;  // CRC HIGH
 8003c40:	0a00      	lsrs	r0, r0, #8
 8003c42:	7058      	strb	r0, [r3, #1]
	HAL_GPIO_WritePin(GPIOB, USART1_ENABLE_Pin, GPIO_PIN_SET);
 8003c44:	2201      	movs	r2, #1
 8003c46:	4628      	mov	r0, r5
 8003c48:	2120      	movs	r1, #32
 8003c4a:	f001 ffad 	bl	8005ba8 <HAL_GPIO_WritePin>

	HAL_UART_Transmit(&huart1, data, size+2, 1000);
 8003c4e:	1cb2      	adds	r2, r6, #2
 8003c50:	4621      	mov	r1, r4
 8003c52:	b292      	uxth	r2, r2
 8003c54:	4806      	ldr	r0, [pc, #24]	@ (8003c70 <sendData+0x44>)
 8003c56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c5a:	f003 ff77 	bl	8007b4c <HAL_UART_Transmit>

	// Pull RE Low to enable RX operation

	HAL_GPIO_WritePin(GPIOB, USART1_ENABLE_Pin, GPIO_PIN_RESET);
 8003c5e:	4628      	mov	r0, r5
 8003c60:	2200      	movs	r2, #0
}
 8003c62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_WritePin(GPIOB, USART1_ENABLE_Pin, GPIO_PIN_RESET);
 8003c66:	2120      	movs	r1, #32
 8003c68:	f001 bf9e 	b.w	8005ba8 <HAL_GPIO_WritePin>
 8003c6c:	40020400 	.word	0x40020400
 8003c70:	200012b0 	.word	0x200012b0

08003c74 <crc16>:
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8003c74:	b1c1      	cbz	r1, 8003ca8 <crc16+0x34>
 8003c76:	f101 3cff 	add.w	ip, r1, #4294967295
 8003c7a:	fa1f fc8c 	uxth.w	ip, ip
{
 8003c7e:	b430      	push	{r4, r5}
 8003c80:	f10c 0c01 	add.w	ip, ip, #1
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8003c84:	22ff      	movs	r2, #255	@ 0xff
 8003c86:	4d0a      	ldr	r5, [pc, #40]	@ (8003cb0 <crc16+0x3c>)
 8003c88:	4c0a      	ldr	r4, [pc, #40]	@ (8003cb4 <crc16+0x40>)
 8003c8a:	4484      	add	ip, r0
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8003c8c:	4611      	mov	r1, r2
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8003c8e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003c92:	4053      	eors	r3, r2
    while (buffer_length--) {
 8003c94:	4560      	cmp	r0, ip
        crc_lo = crc_hi ^ table_crc_hi[i];
 8003c96:	5cea      	ldrb	r2, [r5, r3]
 8003c98:	ea82 0201 	eor.w	r2, r2, r1
        crc_hi = table_crc_lo[i];
 8003c9c:	5ce1      	ldrb	r1, [r4, r3]
    while (buffer_length--) {
 8003c9e:	d1f6      	bne.n	8003c8e <crc16+0x1a>
    }

    return (crc_hi << 8 | crc_lo);
 8003ca0:	ea42 2001 	orr.w	r0, r2, r1, lsl #8
}
 8003ca4:	bc30      	pop	{r4, r5}
 8003ca6:	4770      	bx	lr
    while (buffer_length--) {
 8003ca8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
}
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	080096c0 	.word	0x080096c0
 8003cb4:	080095c0 	.word	0x080095c0

08003cb8 <RTC_Init>:
static int BCD2DEC(uint8_t val) {
    return (int)((val / 16 * 10) + (val % 16));
}

void RTC_Init(void)
{
 8003cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cba:	b087      	sub	sp, #28
    uint8_t ctrl;

    // Step 1: Clear oscillator start bit first
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003cbc:	2401      	movs	r4, #1
 8003cbe:	f04f 36ff 	mov.w	r6, #4294967295
 8003cc2:	f10d 0517 	add.w	r5, sp, #23
 8003cc6:	4623      	mov	r3, r4
 8003cc8:	2200      	movs	r2, #0
 8003cca:	21df      	movs	r1, #223	@ 0xdf
 8003ccc:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8003cd0:	4838      	ldr	r0, [pc, #224]	@ (8003db4 <RTC_Init+0xfc>)
 8003cd2:	9500      	str	r5, [sp, #0]
 8003cd4:	f002 fb4e 	bl	8006374 <HAL_I2C_Mem_Read>
    ctrl &= ~MCP7940N_ST;
 8003cd8:	f89d 2017 	ldrb.w	r2, [sp, #23]
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003cdc:	4835      	ldr	r0, [pc, #212]	@ (8003db4 <RTC_Init+0xfc>)
 8003cde:	9500      	str	r5, [sp, #0]
    ctrl &= ~MCP7940N_ST;
 8003ce0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003ce4:	4623      	mov	r3, r4
 8003ce6:	21df      	movs	r1, #223	@ 0xdf
    ctrl &= ~MCP7940N_ST;
 8003ce8:	f88d 2017 	strb.w	r2, [sp, #23]
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003cec:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f002 fa4d 	bl	8006190 <HAL_I2C_Mem_Write>
    HAL_Delay(10);  // Wait for oscillator to stop
 8003cf6:	200a      	movs	r0, #10
 8003cf8:	f001 fb42 	bl	8005380 <HAL_Delay>

    // Step 2: Enable battery backup
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003cfc:	4623      	mov	r3, r4
 8003cfe:	2203      	movs	r2, #3
 8003d00:	21df      	movs	r1, #223	@ 0xdf
 8003d02:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8003d06:	482b      	ldr	r0, [pc, #172]	@ (8003db4 <RTC_Init+0xfc>)
 8003d08:	9500      	str	r5, [sp, #0]
 8003d0a:	f002 fb33 	bl	8006374 <HAL_I2C_Mem_Read>
    ctrl |= MCP7940N_VBATEN;
 8003d0e:	f89d 2017 	ldrb.w	r2, [sp, #23]
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003d12:	4828      	ldr	r0, [pc, #160]	@ (8003db4 <RTC_Init+0xfc>)
 8003d14:	9500      	str	r5, [sp, #0]
    ctrl |= MCP7940N_VBATEN;
 8003d16:	f042 0208 	orr.w	r2, r2, #8
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003d1a:	4623      	mov	r3, r4
    ctrl |= MCP7940N_VBATEN;
 8003d1c:	f88d 2017 	strb.w	r2, [sp, #23]
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003d20:	21df      	movs	r1, #223	@ 0xdf
 8003d22:	2203      	movs	r2, #3
 8003d24:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8003d28:	f002 fa32 	bl	8006190 <HAL_I2C_Mem_Write>

    // Step 3: Start oscillator
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003d2c:	4623      	mov	r3, r4
 8003d2e:	2200      	movs	r2, #0
 8003d30:	21df      	movs	r1, #223	@ 0xdf
 8003d32:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8003d36:	481f      	ldr	r0, [pc, #124]	@ (8003db4 <RTC_Init+0xfc>)
 8003d38:	9500      	str	r5, [sp, #0]
 8003d3a:	f002 fb1b 	bl	8006374 <HAL_I2C_Mem_Read>
    ctrl |= MCP7940N_ST;
 8003d3e:	f89d 2017 	ldrb.w	r2, [sp, #23]
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003d42:	481c      	ldr	r0, [pc, #112]	@ (8003db4 <RTC_Init+0xfc>)
 8003d44:	9602      	str	r6, [sp, #8]
    ctrl |= MCP7940N_ST;
 8003d46:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003d4a:	f88d 2017 	strb.w	r2, [sp, #23]
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003d4e:	e9cd 5400 	strd	r5, r4, [sp]
 8003d52:	4623      	mov	r3, r4
 8003d54:	2200      	movs	r2, #0
 8003d56:	21df      	movs	r1, #223	@ 0xdf
 8003d58:	f002 fa1a 	bl	8006190 <HAL_I2C_Mem_Write>

    // Step 4: Wait for oscillator to start running
    do {
        HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003d5c:	4f15      	ldr	r7, [pc, #84]	@ (8003db4 <RTC_Init+0xfc>)
 8003d5e:	9500      	str	r5, [sp, #0]
 8003d60:	2301      	movs	r3, #1
 8003d62:	21df      	movs	r1, #223	@ 0xdf
 8003d64:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8003d68:	2203      	movs	r2, #3
 8003d6a:	4638      	mov	r0, r7
 8003d6c:	f002 fb02 	bl	8006374 <HAL_I2C_Mem_Read>
    } while(!(ctrl & MCP7940N_OSCON));
 8003d70:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003d74:	0699      	lsls	r1, r3, #26
 8003d76:	d5f2      	bpl.n	8003d5e <RTC_Init+0xa6>

    // Step 5: Clear power fail flag if set
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003d78:	2301      	movs	r3, #1
 8003d7a:	2203      	movs	r2, #3
 8003d7c:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8003d80:	480c      	ldr	r0, [pc, #48]	@ (8003db4 <RTC_Init+0xfc>)
 8003d82:	9500      	str	r5, [sp, #0]
 8003d84:	21df      	movs	r1, #223	@ 0xdf
 8003d86:	f002 faf5 	bl	8006374 <HAL_I2C_Mem_Read>
    if(ctrl & MCP7940N_PWRFAIL) {
 8003d8a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003d8e:	06da      	lsls	r2, r3, #27
 8003d90:	d401      	bmi.n	8003d96 <RTC_Init+0xde>
        ctrl &= ~MCP7940N_PWRFAIL;
        HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
    }
}
 8003d92:	b007      	add	sp, #28
 8003d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ctrl &= ~MCP7940N_PWRFAIL;
 8003d96:	f023 0710 	bic.w	r7, r3, #16
        HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003d9a:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8003d9e:	9500      	str	r5, [sp, #0]
 8003da0:	2301      	movs	r3, #1
 8003da2:	2203      	movs	r2, #3
 8003da4:	21df      	movs	r1, #223	@ 0xdf
 8003da6:	4803      	ldr	r0, [pc, #12]	@ (8003db4 <RTC_Init+0xfc>)
        ctrl &= ~MCP7940N_PWRFAIL;
 8003da8:	f88d 7017 	strb.w	r7, [sp, #23]
        HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003dac:	f002 f9f0 	bl	8006190 <HAL_I2C_Mem_Write>
}
 8003db0:	b007      	add	sp, #28
 8003db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003db4:	20001548 	.word	0x20001548

08003db8 <init_ina229_devices>:
        // Handle case when RxData_modbus_01[0] != 7
    }
}


void init_ina229_devices(void) {
 8003db8:	b430      	push	{r4, r5}
    ina229_devices[0] = INA229_0;
    ina229_devices[1] = INA229_1;
    ina229_devices[2] = INA229_2;
 8003dba:	4a28      	ldr	r2, [pc, #160]	@ (8003e5c <init_ina229_devices+0xa4>)
    ina229_devices[1] = INA229_1;
 8003dbc:	4c28      	ldr	r4, [pc, #160]	@ (8003e60 <init_ina229_devices+0xa8>)
    ina229_devices[0] = INA229_0;
 8003dbe:	4b29      	ldr	r3, [pc, #164]	@ (8003e64 <init_ina229_devices+0xac>)
    ina229_devices[1] = INA229_1;
 8003dc0:	6824      	ldr	r4, [r4, #0]
    ina229_devices[2] = INA229_2;
 8003dc2:	6812      	ldr	r2, [r2, #0]
    ina229_devices[3] = INA229_3;
 8003dc4:	4828      	ldr	r0, [pc, #160]	@ (8003e68 <init_ina229_devices+0xb0>)
    ina229_devices[4] = INA229_4;
 8003dc6:	4929      	ldr	r1, [pc, #164]	@ (8003e6c <init_ina229_devices+0xb4>)
    ina229_devices[3] = INA229_3;
 8003dc8:	6800      	ldr	r0, [r0, #0]
    ina229_devices[4] = INA229_4;
 8003dca:	6809      	ldr	r1, [r1, #0]
    ina229_devices[0] = INA229_0;
 8003dcc:	4d28      	ldr	r5, [pc, #160]	@ (8003e70 <init_ina229_devices+0xb8>)
    ina229_devices[2] = INA229_2;
 8003dce:	e9c3 4201 	strd	r4, r2, [r3, #4]
    ina229_devices[5] = INA229_5;
 8003dd2:	4a28      	ldr	r2, [pc, #160]	@ (8003e74 <init_ina229_devices+0xbc>)
    ina229_devices[6] = INA229_6;
 8003dd4:	4c28      	ldr	r4, [pc, #160]	@ (8003e78 <init_ina229_devices+0xc0>)
    ina229_devices[5] = INA229_5;
 8003dd6:	6812      	ldr	r2, [r2, #0]
 8003dd8:	615a      	str	r2, [r3, #20]
    ina229_devices[7] = INA229_7;
 8003dda:	4a28      	ldr	r2, [pc, #160]	@ (8003e7c <init_ina229_devices+0xc4>)
    ina229_devices[6] = INA229_6;
 8003ddc:	6824      	ldr	r4, [r4, #0]
    ina229_devices[7] = INA229_7;
 8003dde:	6812      	ldr	r2, [r2, #0]
    ina229_devices[0] = INA229_0;
 8003de0:	682d      	ldr	r5, [r5, #0]
 8003de2:	601d      	str	r5, [r3, #0]
    ina229_devices[7] = INA229_7;
 8003de4:	e9c3 4206 	strd	r4, r2, [r3, #24]
    ina229_devices[8] = INA229_8;
    ina229_devices[9] = INA229_9;
    ina229_devices[10] = INA229_10;
 8003de8:	4a25      	ldr	r2, [pc, #148]	@ (8003e80 <init_ina229_devices+0xc8>)
    ina229_devices[11] = INA229_11;
 8003dea:	4c26      	ldr	r4, [pc, #152]	@ (8003e84 <init_ina229_devices+0xcc>)
    ina229_devices[10] = INA229_10;
 8003dec:	6812      	ldr	r2, [r2, #0]
 8003dee:	629a      	str	r2, [r3, #40]	@ 0x28
    ina229_devices[4] = INA229_4;
 8003df0:	e9c3 0103 	strd	r0, r1, [r3, #12]
    ina229_devices[8] = INA229_8;
 8003df4:	4824      	ldr	r0, [pc, #144]	@ (8003e88 <init_ina229_devices+0xd0>)
    ina229_devices[9] = INA229_9;
 8003df6:	4925      	ldr	r1, [pc, #148]	@ (8003e8c <init_ina229_devices+0xd4>)
    ina229_devices[12] = INA229_12;
 8003df8:	4a25      	ldr	r2, [pc, #148]	@ (8003e90 <init_ina229_devices+0xd8>)
    ina229_devices[8] = INA229_8;
 8003dfa:	6800      	ldr	r0, [r0, #0]
    ina229_devices[9] = INA229_9;
 8003dfc:	6809      	ldr	r1, [r1, #0]
    ina229_devices[11] = INA229_11;
 8003dfe:	6824      	ldr	r4, [r4, #0]
    ina229_devices[12] = INA229_12;
 8003e00:	6812      	ldr	r2, [r2, #0]
    ina229_devices[9] = INA229_9;
 8003e02:	e9c3 0108 	strd	r0, r1, [r3, #32]
    ina229_devices[13] = INA229_13;
 8003e06:	4823      	ldr	r0, [pc, #140]	@ (8003e94 <init_ina229_devices+0xdc>)
    ina229_devices[14] = INA229_14;
 8003e08:	4923      	ldr	r1, [pc, #140]	@ (8003e98 <init_ina229_devices+0xe0>)
    ina229_devices[13] = INA229_13;
 8003e0a:	6800      	ldr	r0, [r0, #0]
    ina229_devices[14] = INA229_14;
 8003e0c:	6809      	ldr	r1, [r1, #0]
    ina229_devices[12] = INA229_12;
 8003e0e:	e9c3 420b 	strd	r4, r2, [r3, #44]	@ 0x2c
    ina229_devices[15] = INA229_15;
 8003e12:	4a22      	ldr	r2, [pc, #136]	@ (8003e9c <init_ina229_devices+0xe4>)
    ina229_devices[16] = INA229_16;
 8003e14:	4c22      	ldr	r4, [pc, #136]	@ (8003ea0 <init_ina229_devices+0xe8>)
    ina229_devices[15] = INA229_15;
 8003e16:	6812      	ldr	r2, [r2, #0]
    ina229_devices[14] = INA229_14;
 8003e18:	e9c3 010d 	strd	r0, r1, [r3, #52]	@ 0x34
    ina229_devices[15] = INA229_15;
 8003e1c:	63da      	str	r2, [r3, #60]	@ 0x3c
    ina229_devices[17] = INA229_17;
 8003e1e:	4a21      	ldr	r2, [pc, #132]	@ (8003ea4 <init_ina229_devices+0xec>)
    ina229_devices[16] = INA229_16;
 8003e20:	6824      	ldr	r4, [r4, #0]
    ina229_devices[17] = INA229_17;
 8003e22:	6812      	ldr	r2, [r2, #0]
    ina229_devices[18] = INA229_18;
 8003e24:	4820      	ldr	r0, [pc, #128]	@ (8003ea8 <init_ina229_devices+0xf0>)
    ina229_devices[19] = INA229_19;
 8003e26:	4921      	ldr	r1, [pc, #132]	@ (8003eac <init_ina229_devices+0xf4>)
    ina229_devices[18] = INA229_18;
 8003e28:	6800      	ldr	r0, [r0, #0]
    ina229_devices[19] = INA229_19;
 8003e2a:	6809      	ldr	r1, [r1, #0]
    ina229_devices[17] = INA229_17;
 8003e2c:	e9c3 4210 	strd	r4, r2, [r3, #64]	@ 0x40
    ina229_devices[20] = INA229_20;
 8003e30:	4a1f      	ldr	r2, [pc, #124]	@ (8003eb0 <init_ina229_devices+0xf8>)
    ina229_devices[21] = INA229_21;
 8003e32:	4c20      	ldr	r4, [pc, #128]	@ (8003eb4 <init_ina229_devices+0xfc>)
    ina229_devices[20] = INA229_20;
 8003e34:	6812      	ldr	r2, [r2, #0]
 8003e36:	651a      	str	r2, [r3, #80]	@ 0x50
    ina229_devices[22] = INA229_22;
 8003e38:	4a1f      	ldr	r2, [pc, #124]	@ (8003eb8 <init_ina229_devices+0x100>)
    ina229_devices[21] = INA229_21;
 8003e3a:	6824      	ldr	r4, [r4, #0]
    ina229_devices[22] = INA229_22;
 8003e3c:	6812      	ldr	r2, [r2, #0]
    ina229_devices[19] = INA229_19;
 8003e3e:	e9c3 0112 	strd	r0, r1, [r3, #72]	@ 0x48
    ina229_devices[22] = INA229_22;
 8003e42:	e9c3 4215 	strd	r4, r2, [r3, #84]	@ 0x54
    ina229_devices[23] = INA229_23;
    ina229_devices[24] = INA229_24;
 8003e46:	491d      	ldr	r1, [pc, #116]	@ (8003ebc <init_ina229_devices+0x104>)
    ina229_devices[25] = INA229_25;
 8003e48:	4a1d      	ldr	r2, [pc, #116]	@ (8003ec0 <init_ina229_devices+0x108>)
    ina229_devices[23] = INA229_23;
 8003e4a:	481e      	ldr	r0, [pc, #120]	@ (8003ec4 <init_ina229_devices+0x10c>)
    ina229_devices[24] = INA229_24;
 8003e4c:	6809      	ldr	r1, [r1, #0]
    ina229_devices[25] = INA229_25;
 8003e4e:	6812      	ldr	r2, [r2, #0]
    ina229_devices[23] = INA229_23;
 8003e50:	6800      	ldr	r0, [r0, #0]
 8003e52:	65d8      	str	r0, [r3, #92]	@ 0x5c
}
 8003e54:	bc30      	pop	{r4, r5}
    ina229_devices[25] = INA229_25;
 8003e56:	e9c3 1218 	strd	r1, r2, [r3, #96]	@ 0x60
}
 8003e5a:	4770      	bx	lr
 8003e5c:	080091b4 	.word	0x080091b4
 8003e60:	080091b8 	.word	0x080091b8
 8003e64:	200015ec 	.word	0x200015ec
 8003e68:	080091b0 	.word	0x080091b0
 8003e6c:	080091ac 	.word	0x080091ac
 8003e70:	080091bc 	.word	0x080091bc
 8003e74:	080091a8 	.word	0x080091a8
 8003e78:	080091a4 	.word	0x080091a4
 8003e7c:	080091a0 	.word	0x080091a0
 8003e80:	08009194 	.word	0x08009194
 8003e84:	08009190 	.word	0x08009190
 8003e88:	0800919c 	.word	0x0800919c
 8003e8c:	08009198 	.word	0x08009198
 8003e90:	0800918c 	.word	0x0800918c
 8003e94:	08009188 	.word	0x08009188
 8003e98:	08009184 	.word	0x08009184
 8003e9c:	08009180 	.word	0x08009180
 8003ea0:	0800917c 	.word	0x0800917c
 8003ea4:	08009178 	.word	0x08009178
 8003ea8:	08009174 	.word	0x08009174
 8003eac:	08009170 	.word	0x08009170
 8003eb0:	0800916c 	.word	0x0800916c
 8003eb4:	08009168 	.word	0x08009168
 8003eb8:	08009164 	.word	0x08009164
 8003ebc:	0800915c 	.word	0x0800915c
 8003ec0:	08009158 	.word	0x08009158
 8003ec4:	08009160 	.word	0x08009160

08003ec8 <Set_voltage_and_measure>:

}

void Set_voltage_and_measure(const Cell_Config* cell, float voltage)

{
 8003ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return INA229_0 + index;  // Assuming INA handles are sequential
 8003eca:	4b2b      	ldr	r3, [pc, #172]	@ (8003f78 <Set_voltage_and_measure+0xb0>)
{
 8003ecc:	4604      	mov	r4, r0
    // Get the actual handles from the configuration
    INA229_Handle ina = get_ina_handle(cell->ina_index);

    // Only set voltage and control LED for cells 0-11 (skip CSU cells 12 and 13) COZ this is for the slave board reading
    if (cell->cell_id != 24 && cell->cell_id != 25)
 8003ece:	7800      	ldrb	r0, [r0, #0]
    return INA229_0 + index;  // Assuming INA handles are sequential
 8003ed0:	681e      	ldr	r6, [r3, #0]
 8003ed2:	7862      	ldrb	r2, [r4, #1]
    if (cell->cell_id != 24 && cell->cell_id != 25)
 8003ed4:	f1a0 0318 	sub.w	r3, r0, #24
 8003ed8:	2b01      	cmp	r3, #1
    return INA229_0 + index;  // Assuming INA handles are sequential
 8003eda:	eb06 1642 	add.w	r6, r6, r2, lsl #5
    if (cell->cell_id != 24 && cell->cell_id != 25)
 8003ede:	d905      	bls.n	8003eec <Set_voltage_and_measure+0x24>

    {

    // Set voltage for the cell
    Set_Output_Voltage(cell->cell_id, voltage);
 8003ee0:	f7fe fde6 	bl	8002ab0 <Set_Output_Voltage>

    // Turn on LED

    Set_LED_status(cell->cell_id, OFF);
 8003ee4:	7820      	ldrb	r0, [r4, #0]
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	f7fe fece 	bl	8002c88 <Set_LED_status>

    }
    HAL_Delay(10);
 8003eec:	200a      	movs	r0, #10
 8003eee:	f001 fa47 	bl	8005380 <HAL_Delay>
    // Read voltage and temperature
    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_RESET);
 8003ef2:	8921      	ldrh	r1, [r4, #8]
 8003ef4:	6860      	ldr	r0, [r4, #4]
    HAL_Delay(1);
    INA229_Readings[cell->ina_index].voltage_V = INA229_getVBUS_V(ina);
 8003ef6:	4d21      	ldr	r5, [pc, #132]	@ (8003f7c <Set_voltage_and_measure+0xb4>)
    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_RESET);
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f001 fe55 	bl	8005ba8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8003efe:	2001      	movs	r0, #1
 8003f00:	f001 fa3e 	bl	8005380 <HAL_Delay>
    INA229_Readings[cell->ina_index].voltage_V = INA229_getVBUS_V(ina);
 8003f04:	4630      	mov	r0, r6
 8003f06:	7867      	ldrb	r7, [r4, #1]
 8003f08:	f7ff f856 	bl	8002fb8 <INA229_getVBUS_V>
 8003f0c:	eb05 1707 	add.w	r7, r5, r7, lsl #4
    HAL_Delay(1);
 8003f10:	2001      	movs	r0, #1
    INA229_Readings[cell->ina_index].voltage_V = INA229_getVBUS_V(ina);
 8003f12:	ed87 0a00 	vstr	s0, [r7]
    HAL_Delay(1);
 8003f16:	f001 fa33 	bl	8005380 <HAL_Delay>
    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_SET);
 8003f1a:	8921      	ldrh	r1, [r4, #8]
 8003f1c:	6860      	ldr	r0, [r4, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f001 fe42 	bl	8005ba8 <HAL_GPIO_WritePin>

    HAL_Delay(10);
 8003f24:	200a      	movs	r0, #10
 8003f26:	f001 fa2b 	bl	8005380 <HAL_Delay>

    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_RESET);
 8003f2a:	8921      	ldrh	r1, [r4, #8]
 8003f2c:	6860      	ldr	r0, [r4, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f001 fe3a 	bl	8005ba8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8003f34:	2001      	movs	r0, #1
 8003f36:	f001 fa23 	bl	8005380 <HAL_Delay>
    INA229_Readings[cell->ina_index].temperature_C = INA229_getDIETEMP_C(ina);
 8003f3a:	4630      	mov	r0, r6
 8003f3c:	7867      	ldrb	r7, [r4, #1]
 8003f3e:	f7ff f881 	bl	8003044 <INA229_getDIETEMP_C>
 8003f42:	eb05 1507 	add.w	r5, r5, r7, lsl #4
    HAL_Delay(1);
 8003f46:	2001      	movs	r0, #1
    INA229_Readings[cell->ina_index].temperature_C = INA229_getDIETEMP_C(ina);
 8003f48:	ed85 0a02 	vstr	s0, [r5, #8]
    HAL_Delay(1);
 8003f4c:	f001 fa18 	bl	8005380 <HAL_Delay>
    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_SET);
 8003f50:	8921      	ldrh	r1, [r4, #8]
 8003f52:	6860      	ldr	r0, [r4, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f001 fe27 	bl	8005ba8 <HAL_GPIO_WritePin>

    // Turn off LED
    HAL_Delay(10);
 8003f5a:	200a      	movs	r0, #10
 8003f5c:	f001 fa10 	bl	8005380 <HAL_Delay>

    // Only turn off LED for cells 0-11 (skip CSU cells 12 and 13)
    if (cell->cell_id != 24 && cell->cell_id != 25)
 8003f60:	7820      	ldrb	r0, [r4, #0]
 8003f62:	f1a0 0318 	sub.w	r3, r0, #24
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d800      	bhi.n	8003f6c <Set_voltage_and_measure+0xa4>
    {

    Set_LED_status(cell->cell_id, ON);

    }
}
 8003f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Set_LED_status(cell->cell_id, ON);
 8003f70:	2100      	movs	r1, #0
 8003f72:	f7fe be89 	b.w	8002c88 <Set_LED_status>
 8003f76:	bf00      	nop
 8003f78:	080091bc 	.word	0x080091bc
 8003f7c:	20000e1c 	.word	0x20000e1c

08003f80 <tester_setup>:
    if(RxData_modbus_01[0] == 0x7)  // Slave ID check
 8003f80:	4b6e      	ldr	r3, [pc, #440]	@ (800413c <tester_setup+0x1bc>)
 8003f82:	781a      	ldrb	r2, [r3, #0]
 8003f84:	2a07      	cmp	r2, #7
 8003f86:	d000      	beq.n	8003f8a <tester_setup+0xa>
 8003f88:	4770      	bx	lr
{
 8003f8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f8e:	ed2d 8b02 	vpush	{d8}
        if(RxData_modbus_01[1] == 0x3)  // SET function (0x3)
 8003f92:	785a      	ldrb	r2, [r3, #1]
    	flag_1 = 0 ;
 8003f94:	496a      	ldr	r1, [pc, #424]	@ (8004140 <tester_setup+0x1c0>)
 8003f96:	2000      	movs	r0, #0
        if(RxData_modbus_01[1] == 0x3)  // SET function (0x3)
 8003f98:	2a03      	cmp	r2, #3
{
 8003f9a:	b089      	sub	sp, #36	@ 0x24
    	flag_1 = 0 ;
 8003f9c:	6008      	str	r0, [r1, #0]
        if(RxData_modbus_01[1] == 0x3)  // SET function (0x3)
 8003f9e:	d05b      	beq.n	8004058 <tester_setup+0xd8>
        else if(RxData_modbus_01[1] == 0x4)  // GET function (0x4)
 8003fa0:	2a04      	cmp	r2, #4
 8003fa2:	d004      	beq.n	8003fae <tester_setup+0x2e>
}
 8003fa4:	b009      	add	sp, #36	@ 0x24
 8003fa6:	ecbd 8b02 	vpop	{d8}
 8003faa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            switch (function_code)
 8003fae:	789a      	ldrb	r2, [r3, #2]
            uint8_t id = RxData_modbus_01[3];
 8003fb0:	f893 8003 	ldrb.w	r8, [r3, #3]
        	flag_1 = 2 ;
 8003fb4:	2002      	movs	r0, #2
            switch (function_code)
 8003fb6:	2a01      	cmp	r2, #1
        	flag_1 = 2 ;
 8003fb8:	6008      	str	r0, [r1, #0]
            switch (function_code)
 8003fba:	d1f3      	bne.n	8003fa4 <tester_setup+0x24>
                    if (id >= 0 && id <= 23)
 8003fbc:	f1b8 0f17 	cmp.w	r8, #23
 8003fc0:	d8f0      	bhi.n	8003fa4 <tester_setup+0x24>
    const float test_voltages[] = {2.0f, 2.5f, 2.8f, 3.3f, 3.4f, 3.6f, 4.0f, 4.2f};
 8003fc2:	4f60      	ldr	r7, [pc, #384]	@ (8004144 <tester_setup+0x1c4>)
 8003fc4:	4d60      	ldr	r5, [pc, #384]	@ (8004148 <tester_setup+0x1c8>)
 8003fc6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003fc8:	466c      	mov	r4, sp
 8003fca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fcc:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8003fd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    for(int v = 0; v < num_voltages; v++) {
 8003fd4:	466e      	mov	r6, sp
 8003fd6:	f10d 0920 	add.w	r9, sp, #32
        	Set_voltage_and_measure(&cell_configs[c], test_voltages[v]);
 8003fda:	ecb6 8a01 	vldmia	r6!, {s16}
 8003fde:	4c5b      	ldr	r4, [pc, #364]	@ (800414c <tester_setup+0x1cc>)
 8003fe0:	eeb0 0a48 	vmov.f32	s0, s16
 8003fe4:	4620      	mov	r0, r4
 8003fe6:	f7ff ff6f 	bl	8003ec8 <Set_voltage_and_measure>
        for(int c = 0; c < num_cells; c++) {
 8003fea:	340c      	adds	r4, #12
        	cell_voltage_read();
 8003fec:	f7ff fdf0 	bl	8003bd0 <cell_voltage_read>
            HAL_Delay(10);  // Delay between cells
 8003ff0:	200a      	movs	r0, #10
 8003ff2:	f001 f9c5 	bl	8005380 <HAL_Delay>
        for(int c = 0; c < num_cells; c++) {
 8003ff6:	42ac      	cmp	r4, r5
 8003ff8:	d1f2      	bne.n	8003fe0 <tester_setup+0x60>
        HAL_Delay(10);  // Delay between voltage levels
 8003ffa:	200a      	movs	r0, #10
 8003ffc:	f001 f9c0 	bl	8005380 <HAL_Delay>
    for(int v = 0; v < num_voltages; v++) {
 8004000:	454e      	cmp	r6, r9
 8004002:	d1ea      	bne.n	8003fda <tester_setup+0x5a>
                    	float get_voltage = INA229_Readings[id].voltage_V;
 8004004:	4b52      	ldr	r3, [pc, #328]	@ (8004150 <tester_setup+0x1d0>)
                    	uint16_t voltage_scaled = (uint16_t)(get_voltage * 10000); // Scale as needed
 8004006:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8004154 <tester_setup+0x1d4>
                    	TxData_modbus_01[0] = 0x05;  // slave address
 800400a:	4c53      	ldr	r4, [pc, #332]	@ (8004158 <tester_setup+0x1d8>)
                    	float get_voltage = INA229_Readings[id].voltage_V;
 800400c:	eb03 1308 	add.w	r3, r3, r8, lsl #4
                    	uint16_t voltage_scaled = (uint16_t)(get_voltage * 10000); // Scale as needed
 8004010:	edd3 7a00 	vldr	s15, [r3]
 8004014:	ee67 7a87 	vmul.f32	s15, s15, s14
                    	TxData_modbus_01[3] = 0;
 8004018:	2200      	movs	r2, #0
                    	uint16_t voltage_scaled = (uint16_t)(get_voltage * 10000); // Scale as needed
 800401a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
                    	uint16_t crc = crc16(TxData_modbus_01, 6);
 800401e:	2106      	movs	r1, #6
                    	uint16_t voltage_scaled = (uint16_t)(get_voltage * 10000); // Scale as needed
 8004020:	ee17 3a90 	vmov	r3, s15
                    	TxData_modbus_01[1] = voltage_scaled >> 8;
 8004024:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8004028:	7060      	strb	r0, [r4, #1]
                    	TxData_modbus_01[0] = 0x05;  // slave address
 800402a:	2505      	movs	r5, #5
                    	uint16_t crc = crc16(TxData_modbus_01, 6);
 800402c:	4620      	mov	r0, r4
                    	TxData_modbus_01[2] = voltage_scaled & 0xFF;
 800402e:	70a3      	strb	r3, [r4, #2]
                    	TxData_modbus_01[3] = 0;
 8004030:	70e2      	strb	r2, [r4, #3]
                    	TxData_modbus_01[4] = 0;  // force data high
 8004032:	7122      	strb	r2, [r4, #4]
                    	TxData_modbus_01[5] = 0;  // force data low
 8004034:	7162      	strb	r2, [r4, #5]
                    	TxData_modbus_01[0] = 0x05;  // slave address
 8004036:	7025      	strb	r5, [r4, #0]
                    	uint16_t crc = crc16(TxData_modbus_01, 6);
 8004038:	f7ff fe1c 	bl	8003c74 <crc16>
                    	sendData(TxData_modbus_01,7);
 800403c:	2107      	movs	r1, #7
                    	uint16_t crc = crc16(TxData_modbus_01, 6);
 800403e:	4603      	mov	r3, r0
                    	TxData_modbus_01[7] = (crc>>8)&0xFF;  // CRC HIGH
 8004040:	f3c0 2207 	ubfx	r2, r0, #8, #8
                    	sendData(TxData_modbus_01,7);
 8004044:	4620      	mov	r0, r4
                    	TxData_modbus_01[6] = crc&0xFF;   // CRC LOW
 8004046:	71a3      	strb	r3, [r4, #6]
                    	TxData_modbus_01[7] = (crc>>8)&0xFF;  // CRC HIGH
 8004048:	71e2      	strb	r2, [r4, #7]
}
 800404a:	b009      	add	sp, #36	@ 0x24
 800404c:	ecbd 8b02 	vpop	{d8}
 8004050:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                    	sendData(TxData_modbus_01,7);
 8004054:	f7ff bdea 	b.w	8003c2c <sendData>
            switch (RxData_modbus_01[2])  // Function code from table
 8004058:	789a      	ldrb	r2, [r3, #2]
            uint8_t commnd = RxData_modbus_01[3];
 800405a:	78d8      	ldrb	r0, [r3, #3]
            uint8_t id_LED = RxData_modbus_01[6];
 800405c:	799c      	ldrb	r4, [r3, #6]
            uint8_t LED_State = RxData_modbus_01[7];
 800405e:	79dd      	ldrb	r5, [r3, #7]
            switch (RxData_modbus_01[2])  // Function code from table
 8004060:	3a01      	subs	r2, #1
 8004062:	2a07      	cmp	r2, #7
 8004064:	d89e      	bhi.n	8003fa4 <tester_setup+0x24>
 8004066:	a101      	add	r1, pc, #4	@ (adr r1, 800406c <tester_setup+0xec>)
 8004068:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800406c:	08004111 	.word	0x08004111
 8004070:	080040f5 	.word	0x080040f5
 8004074:	08003fa5 	.word	0x08003fa5
 8004078:	08003fa5 	.word	0x08003fa5
 800407c:	08003fa5 	.word	0x08003fa5
 8004080:	080040df 	.word	0x080040df
 8004084:	080040cf 	.word	0x080040cf
 8004088:	0800408d 	.word	0x0800408d
    const float test_voltages[] = {2.0f, 2.5f, 2.8f, 3.3f, 3.4f, 3.6f, 4.0f, 4.2f};
 800408c:	4d2d      	ldr	r5, [pc, #180]	@ (8004144 <tester_setup+0x1c4>)
 800408e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004090:	466c      	mov	r4, sp
 8004092:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004094:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004098:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    for(int v = 0; v < num_voltages; v++) {
 800409c:	4d2a      	ldr	r5, [pc, #168]	@ (8004148 <tester_setup+0x1c8>)
 800409e:	466e      	mov	r6, sp
 80040a0:	af08      	add	r7, sp, #32
        	Set_voltage_and_measure(&cell_configs[c], test_voltages[v]);
 80040a2:	ecb6 8a01 	vldmia	r6!, {s16}
 80040a6:	4c29      	ldr	r4, [pc, #164]	@ (800414c <tester_setup+0x1cc>)
 80040a8:	eeb0 0a48 	vmov.f32	s0, s16
 80040ac:	4620      	mov	r0, r4
 80040ae:	f7ff ff0b 	bl	8003ec8 <Set_voltage_and_measure>
        for(int c = 0; c < num_cells; c++) {
 80040b2:	340c      	adds	r4, #12
        	cell_voltage_read();
 80040b4:	f7ff fd8c 	bl	8003bd0 <cell_voltage_read>
            HAL_Delay(10);  // Delay between cells
 80040b8:	200a      	movs	r0, #10
 80040ba:	f001 f961 	bl	8005380 <HAL_Delay>
        for(int c = 0; c < num_cells; c++) {
 80040be:	42ac      	cmp	r4, r5
 80040c0:	d1f2      	bne.n	80040a8 <tester_setup+0x128>
        HAL_Delay(10);  // Delay between voltage levels
 80040c2:	200a      	movs	r0, #10
 80040c4:	f001 f95c 	bl	8005380 <HAL_Delay>
    for(int v = 0; v < num_voltages; v++) {
 80040c8:	42b7      	cmp	r7, r6
 80040ca:	d1ea      	bne.n	80040a2 <tester_setup+0x122>
 80040cc:	e76a      	b.n	8003fa4 <tester_setup+0x24>
                    Set_LED_status(id, led_state);
 80040ce:	7919      	ldrb	r1, [r3, #4]
}
 80040d0:	b009      	add	sp, #36	@ 0x24
 80040d2:	ecbd 8b02 	vpop	{d8}
 80040d6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                    Set_LED_status(id, led_state);
 80040da:	f7fe bdd5 	b.w	8002c88 <Set_LED_status>
                    HAL_Delay(delay_time);
 80040de:	f8b3 0003 	ldrh.w	r0, [r3, #3]
 80040e2:	ba40      	rev16	r0, r0
 80040e4:	b280      	uxth	r0, r0
}
 80040e6:	b009      	add	sp, #36	@ 0x24
 80040e8:	ecbd 8b02 	vpop	{d8}
 80040ec:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                    HAL_Delay(delay_time);
 80040f0:	f001 b946 	b.w	8005380 <HAL_Delay>
                    if (tempCardId >= 1 && tempCardId <= 6)
 80040f4:	1e42      	subs	r2, r0, #1
 80040f6:	2a05      	cmp	r2, #5
                    res = RxData_modbus_01[4];  // Resistance value (0-256)
 80040f8:	7919      	ldrb	r1, [r3, #4]
                    if (tempCardId >= 1 && tempCardId <= 6)
 80040fa:	f63f af53 	bhi.w	8003fa4 <tester_setup+0x24>
                        Set_Resistance(tempCardId, res);
 80040fe:	f7fd fa5d 	bl	80015bc <Set_Resistance>
                        Set_LED_status(id_LED, LED_State);
 8004102:	4620      	mov	r0, r4
 8004104:	4629      	mov	r1, r5
 8004106:	f7fe fdbf 	bl	8002c88 <Set_LED_status>
                        HAL_Delay(1000);
 800410a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800410e:	e7ea      	b.n	80040e6 <tester_setup+0x166>
                    if (id >= 0 && id <= 23)
 8004110:	2817      	cmp	r0, #23
                    uint8_t volt_code = RxData_modbus_01[4];  // Voltage code (1-8)
 8004112:	791b      	ldrb	r3, [r3, #4]
                    if (id >= 0 && id <= 23)
 8004114:	f63f af46 	bhi.w	8003fa4 <tester_setup+0x24>
                        switch (volt_code)
 8004118:	3b01      	subs	r3, #1
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b07      	cmp	r3, #7
 800411e:	bf97      	itett	ls
 8004120:	4a0e      	ldrls	r2, [pc, #56]	@ (800415c <tester_setup+0x1dc>)
                    if (id >= 0 && id <= 23)
 8004122:	ed9f 0a0f 	vldrhi	s0, [pc, #60]	@ 8004160 <tester_setup+0x1e0>
 8004126:	eb02 0383 	addls.w	r3, r2, r3, lsl #2
 800412a:	ed93 0a00 	vldrls	s0, [r3]
}
 800412e:	b009      	add	sp, #36	@ 0x24
 8004130:	ecbd 8b02 	vpop	{d8}
 8004134:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                        Set_Output_Voltage(id, volt);
 8004138:	f7fe bcba 	b.w	8002ab0 <Set_Output_Voltage>
 800413c:	20001964 	.word	0x20001964
 8004140:	20001975 	.word	0x20001975
 8004144:	08008428 	.word	0x08008428
 8004148:	08009918 	.word	0x08009918
 800414c:	080097e0 	.word	0x080097e0
 8004150:	20000e1c 	.word	0x20000e1c
 8004154:	461c4000 	.word	0x461c4000
 8004158:	20001954 	.word	0x20001954
 800415c:	080097c0 	.word	0x080097c0
 8004160:	00000000 	.word	0x00000000

08004164 <Get_INA_Voltage>:


float Get_INA_Voltage(Cell_Config* cell)
{
 8004164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return INA229_0 + index;  // Assuming INA handles are sequential
 8004166:	4a16      	ldr	r2, [pc, #88]	@ (80041c0 <Get_INA_Voltage+0x5c>)
 8004168:	7843      	ldrb	r3, [r0, #1]
 800416a:	6817      	ldr	r7, [r2, #0]

	Set_LED_status(cell->cell_id, OFF);

    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_RESET);
    HAL_Delay(1);
    INA229_Readings[cell->ina_index].temperature_C = INA229_getVBUS_V(ina);
 800416c:	4d15      	ldr	r5, [pc, #84]	@ (80041c4 <Get_INA_Voltage+0x60>)
{
 800416e:	4604      	mov	r4, r0
	Set_LED_status(cell->cell_id, OFF);
 8004170:	2101      	movs	r1, #1
 8004172:	7800      	ldrb	r0, [r0, #0]
    return INA229_0 + index;  // Assuming INA handles are sequential
 8004174:	eb07 1743 	add.w	r7, r7, r3, lsl #5
	Set_LED_status(cell->cell_id, OFF);
 8004178:	f7fe fd86 	bl	8002c88 <Set_LED_status>
    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_RESET);
 800417c:	8921      	ldrh	r1, [r4, #8]
 800417e:	6860      	ldr	r0, [r4, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f001 fd11 	bl	8005ba8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8004186:	2001      	movs	r0, #1
 8004188:	f001 f8fa 	bl	8005380 <HAL_Delay>
    INA229_Readings[cell->ina_index].temperature_C = INA229_getVBUS_V(ina);
 800418c:	4638      	mov	r0, r7
 800418e:	7866      	ldrb	r6, [r4, #1]
 8004190:	f7fe ff12 	bl	8002fb8 <INA229_getVBUS_V>
 8004194:	eb05 1606 	add.w	r6, r5, r6, lsl #4
    HAL_Delay(1);
 8004198:	2001      	movs	r0, #1
    INA229_Readings[cell->ina_index].temperature_C = INA229_getVBUS_V(ina);
 800419a:	ed86 0a02 	vstr	s0, [r6, #8]
    HAL_Delay(1);
 800419e:	f001 f8ef 	bl	8005380 <HAL_Delay>
    HAL_GPIO_WritePin(cell->gpio, cell->cs_pin, GPIO_PIN_SET);
 80041a2:	8921      	ldrh	r1, [r4, #8]
 80041a4:	6860      	ldr	r0, [r4, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f001 fcfe 	bl	8005ba8 <HAL_GPIO_WritePin>

	Set_LED_status(cell->cell_id, ON);
 80041ac:	7820      	ldrb	r0, [r4, #0]
 80041ae:	2100      	movs	r1, #0
 80041b0:	f7fe fd6a 	bl	8002c88 <Set_LED_status>

	return INA229_Readings[cell->ina_index].voltage_V;
 80041b4:	7863      	ldrb	r3, [r4, #1]
 80041b6:	eb05 1503 	add.w	r5, r5, r3, lsl #4
}
 80041ba:	ed95 0a00 	vldr	s0, [r5]
 80041be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041c0:	080091bc 	.word	0x080091bc
 80041c4:	20000e1c 	.word	0x20000e1c

080041c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80041c8:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80041ca:	2300      	movs	r3, #0
{
 80041cc:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80041ce:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
 80041d2:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80041d6:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80041da:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80041de:	4923      	ldr	r1, [pc, #140]	@ (800426c <SystemClock_Config+0xa4>)
 80041e0:	9301      	str	r3, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80041e2:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80041e4:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041e6:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80041e8:	4a21      	ldr	r2, [pc, #132]	@ (8004270 <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80041ea:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 80041ee:	6408      	str	r0, [r1, #64]	@ 0x40
 80041f0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80041f2:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 80041f6:	9101      	str	r1, [sp, #4]
 80041f8:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80041fa:	9302      	str	r3, [sp, #8]
 80041fc:	6811      	ldr	r1, [r2, #0]
 80041fe:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8004202:	6011      	str	r1, [r2, #0]
 8004204:	6812      	ldr	r2, [r2, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004206:	930f      	str	r3, [sp, #60]	@ 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004208:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800420c:	2310      	movs	r3, #16
 800420e:	2101      	movs	r1, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004210:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004212:	e9cd 130b 	strd	r1, r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004216:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLN = 180;
 8004218:	23b4      	movs	r3, #180	@ 0xb4
 800421a:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800421e:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004220:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004222:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004224:	2202      	movs	r2, #2
 8004226:	2305      	movs	r3, #5
  RCC_OscInitStruct.PLL.PLLQ = 5;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004228:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800422a:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800422e:	940e      	str	r4, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004230:	f002 faee 	bl	8006810 <HAL_RCC_OscConfig>
 8004234:	b108      	cbz	r0, 800423a <SystemClock_Config+0x72>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004236:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004238:	e7fe      	b.n	8004238 <SystemClock_Config+0x70>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800423a:	f002 faad 	bl	8006798 <HAL_PWREx_EnableOverDrive>
 800423e:	4603      	mov	r3, r0
 8004240:	b108      	cbz	r0, 8004246 <SystemClock_Config+0x7e>
 8004242:	b672      	cpsid	i
  while (1)
 8004244:	e7fe      	b.n	8004244 <SystemClock_Config+0x7c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004246:	220f      	movs	r2, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004248:	e9cd 2403 	strd	r2, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800424c:	f44f 55a0 	mov.w	r5, #5120	@ 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004250:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004254:	a803      	add	r0, sp, #12
 8004256:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004258:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800425c:	9207      	str	r2, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800425e:	f002 fced 	bl	8006c3c <HAL_RCC_ClockConfig>
 8004262:	b108      	cbz	r0, 8004268 <SystemClock_Config+0xa0>
 8004264:	b672      	cpsid	i
  while (1)
 8004266:	e7fe      	b.n	8004266 <SystemClock_Config+0x9e>
}
 8004268:	b015      	add	sp, #84	@ 0x54
 800426a:	bd30      	pop	{r4, r5, pc}
 800426c:	40023800 	.word	0x40023800
 8004270:	40007000 	.word	0x40007000

08004274 <main>:
{
 8004274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    memset(RxData_modbus_01, 0, sizeof(RxData_modbus_01));
 8004278:	4cbe      	ldr	r4, [pc, #760]	@ (8004574 <main+0x300>)
    memset(TxData_modbus_01, 0, sizeof(TxData_modbus_01));
 800427a:	4dbf      	ldr	r5, [pc, #764]	@ (8004578 <main+0x304>)
{
 800427c:	b097      	sub	sp, #92	@ 0x5c
    memset(RxData_modbus_01, 0, sizeof(RxData_modbus_01));
 800427e:	2600      	movs	r6, #0
 8004280:	e9c4 6600 	strd	r6, r6, [r4]
 8004284:	e9c4 6602 	strd	r6, r6, [r4, #8]
    memset(TxData_modbus_01, 0, sizeof(TxData_modbus_01));
 8004288:	e9c5 6600 	strd	r6, r6, [r5]
 800428c:	e9c5 6602 	strd	r6, r6, [r5, #8]
  HAL_Init();
 8004290:	f001 f84a 	bl	8005328 <HAL_Init>
  SystemClock_Config();
 8004294:	f7ff ff98 	bl	80041c8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004298:	e9cd 6611 	strd	r6, r6, [sp, #68]	@ 0x44
 800429c:	e9cd 6613 	strd	r6, r6, [sp, #76]	@ 0x4c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80042a0:	4bb6      	ldr	r3, [pc, #728]	@ (800457c <main+0x308>)
 80042a2:	9606      	str	r6, [sp, #24]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042a4:	9615      	str	r6, [sp, #84]	@ 0x54
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80042a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOE, CELL12_CS_01_Pin|CELL12_CS_02_Pin|CELL12_CS_03_Pin|CELL12_CS_04_Pin
 80042a8:	48b5      	ldr	r0, [pc, #724]	@ (8004580 <main+0x30c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80042aa:	f042 0210 	orr.w	r2, r2, #16
 80042ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80042b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042b2:	f002 0210 	and.w	r2, r2, #16
 80042b6:	9206      	str	r2, [sp, #24]
 80042b8:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80042ba:	9607      	str	r6, [sp, #28]
 80042bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80042c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042c6:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80042ca:	9207      	str	r2, [sp, #28]
 80042cc:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042ce:	9608      	str	r6, [sp, #32]
 80042d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042d2:	f042 0204 	orr.w	r2, r2, #4
 80042d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80042d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042da:	f002 0204 	and.w	r2, r2, #4
 80042de:	9208      	str	r2, [sp, #32]
 80042e0:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80042e2:	9609      	str	r6, [sp, #36]	@ 0x24
 80042e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042e6:	f042 0220 	orr.w	r2, r2, #32
 80042ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80042ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042ee:	f002 0220 	and.w	r2, r2, #32
 80042f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80042f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80042f6:	960a      	str	r6, [sp, #40]	@ 0x28
 80042f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042fa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80042fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8004300:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004302:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8004306:	920a      	str	r2, [sp, #40]	@ 0x28
 8004308:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800430a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800430c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800430e:	f042 0201 	orr.w	r2, r2, #1
 8004312:	631a      	str	r2, [r3, #48]	@ 0x30
 8004314:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004316:	f002 0201 	and.w	r2, r2, #1
 800431a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800431c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800431e:	960c      	str	r6, [sp, #48]	@ 0x30
 8004320:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004322:	f042 0202 	orr.w	r2, r2, #2
 8004326:	631a      	str	r2, [r3, #48]	@ 0x30
 8004328:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800432a:	f002 0202 	and.w	r2, r2, #2
 800432e:	920c      	str	r2, [sp, #48]	@ 0x30
 8004330:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004332:	960d      	str	r6, [sp, #52]	@ 0x34
 8004334:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004336:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800433a:	631a      	str	r2, [r3, #48]	@ 0x30
 800433c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800433e:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8004342:	920d      	str	r2, [sp, #52]	@ 0x34
 8004344:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004346:	960e      	str	r6, [sp, #56]	@ 0x38
 8004348:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800434a:	f042 0208 	orr.w	r2, r2, #8
 800434e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004352:	f003 0308 	and.w	r3, r3, #8
 8004356:	930e      	str	r3, [sp, #56]	@ 0x38
  HAL_GPIO_WritePin(GPIOE, CELL12_CS_01_Pin|CELL12_CS_02_Pin|CELL12_CS_03_Pin|CELL12_CS_04_Pin
 8004358:	2201      	movs	r2, #1
 800435a:	f240 71fc 	movw	r1, #2044	@ 0x7fc
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800435e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  HAL_GPIO_WritePin(GPIOE, CELL12_CS_01_Pin|CELL12_CS_02_Pin|CELL12_CS_03_Pin|CELL12_CS_04_Pin
 8004360:	f001 fc22 	bl	8005ba8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, CELL12_CS_06_Pin|CELL12_CS_08_Pin, GPIO_PIN_SET);
 8004364:	4887      	ldr	r0, [pc, #540]	@ (8004584 <main+0x310>)
 8004366:	2201      	movs	r2, #1
 8004368:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800436c:	f001 fc1c 	bl	8005ba8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, CELL12_CS_07_Pin|CELL12_TEMP_02_LED_Pin|CELL12_TEMP_01_CS_Pin|SPI3_CS_03_Pin
 8004370:	4885      	ldr	r0, [pc, #532]	@ (8004588 <main+0x314>)
 8004372:	2201      	movs	r2, #1
 8004374:	f242 0133 	movw	r1, #8243	@ 0x2033
 8004378:	f001 fc16 	bl	8005ba8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, CELL12_CS_09_Pin|CELL12_CS_10_Pin|LED_DC_Y_Pin|LED_DC_G_Pin
 800437c:	4632      	mov	r2, r6
 800437e:	4881      	ldr	r0, [pc, #516]	@ (8004584 <main+0x310>)
 8004380:	f44f 614f 	mov.w	r1, #3312	@ 0xcf0
 8004384:	f001 fc10 	bl	8005ba8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, CELL12_CS_11_Pin|CELL12_CS_12_Pin|CSU_12_CELLS_Pin|CELL12_TEMP_03_CS_Pin
 8004388:	4880      	ldr	r0, [pc, #512]	@ (800458c <main+0x318>)
 800438a:	2201      	movs	r2, #1
 800438c:	f64f 5147 	movw	r1, #64839	@ 0xfd47
 8004390:	f001 fc0a 	bl	8005ba8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_02_Pin|GPIO_03_Pin|GPIO_04_Pin|GPIO_05_Pin
 8004394:	4632      	mov	r2, r6
 8004396:	487d      	ldr	r0, [pc, #500]	@ (800458c <main+0x318>)
 8004398:	f44f 712e 	mov.w	r1, #696	@ 0x2b8
 800439c:	f001 fc04 	bl	8005ba8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CELL12_TEMP_01_LED_GPIO_Port, CELL12_TEMP_01_LED_Pin, GPIO_PIN_SET);
 80043a0:	2201      	movs	r2, #1
 80043a2:	4611      	mov	r1, r2
 80043a4:	487a      	ldr	r0, [pc, #488]	@ (8004590 <main+0x31c>)
 80043a6:	f001 fbff 	bl	8005ba8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USART2_ENABLE_GPIO_Port, USART2_ENABLE_Pin, GPIO_PIN_RESET);
 80043aa:	4632      	mov	r2, r6
 80043ac:	4878      	ldr	r0, [pc, #480]	@ (8004590 <main+0x31c>)
 80043ae:	2102      	movs	r1, #2
 80043b0:	f001 fbfa 	bl	8005ba8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOH, GPIO_14_Pin|GPIO_07_Pin|LED_01_Pin|LED_02_Pin, GPIO_PIN_RESET);
 80043b4:	4632      	mov	r2, r6
 80043b6:	4877      	ldr	r0, [pc, #476]	@ (8004594 <main+0x320>)
 80043b8:	f24c 010c 	movw	r1, #49164	@ 0xc00c
 80043bc:	f001 fbf4 	bl	8005ba8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, CELL11_CS_01_Pin|CELL11_CS_02_Pin|CELL11_TEMP_03_CS_Pin|CS_Pin, GPIO_PIN_SET);
 80043c0:	4875      	ldr	r0, [pc, #468]	@ (8004598 <main+0x324>)
 80043c2:	2201      	movs	r2, #1
 80043c4:	f648 0103 	movw	r1, #34819	@ 0x8803
 80043c8:	f001 fbee 	bl	8005ba8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, CELL11_CS_08_Pin|CELL11_CS_09_Pin, GPIO_PIN_SET);
 80043cc:	4873      	ldr	r0, [pc, #460]	@ (800459c <main+0x328>)
 80043ce:	2201      	movs	r2, #1
 80043d0:	2103      	movs	r1, #3
 80043d2:	f001 fbe9 	bl	8005ba8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_09_Pin|GPIO_10_Pin|LED_06_Pin|LED_05_Pin, GPIO_PIN_RESET);
 80043d6:	4632      	mov	r2, r6
 80043d8:	4869      	ldr	r0, [pc, #420]	@ (8004580 <main+0x30c>)
 80043da:	f648 0103 	movw	r1, #34819	@ 0x8803
 80043de:	f001 fbe3 	bl	8005ba8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_11_Pin|GPIO_12_Pin|LED_03_Pin|LED_07_Pin
 80043e2:	4632      	mov	r2, r6
 80043e4:	486c      	ldr	r0, [pc, #432]	@ (8004598 <main+0x324>)
 80043e6:	f244 4138 	movw	r1, #17464	@ 0x4438
 80043ea:	f001 fbdd 	bl	8005ba8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_03_LED_Pin|CELL11_TEMP_02_CS_Pin|CELL11_TEMP_02_LED_Pin|CELL11_TEMP_01_CS_Pin
 80043ee:	4869      	ldr	r0, [pc, #420]	@ (8004594 <main+0x320>)
 80043f0:	2201      	movs	r2, #1
 80043f2:	f44f 51f2 	mov.w	r1, #7744	@ 0x1e40
 80043f6:	f001 fbd7 	bl	8005ba8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 80043fa:	4869      	ldr	r0, [pc, #420]	@ (80045a0 <main+0x32c>)
 80043fc:	2201      	movs	r2, #1
 80043fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004402:	f001 fbd1 	bl	8005ba8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, USART3_ENABLE_Pin|DISPLAY_CS_Pin|SPI5_CS_02_Pin, GPIO_PIN_RESET);
 8004406:	4632      	mov	r2, r6
 8004408:	4865      	ldr	r0, [pc, #404]	@ (80045a0 <main+0x32c>)
 800440a:	f640 010c 	movw	r1, #2060	@ 0x80c
 800440e:	f001 fbcb 	bl	8005ba8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, DISPLAY_IO_1_Pin|DISPLAY_IO_2_Pin|BACKLIGHT_1_Pin|BACKLIGHT_2_Pin
 8004412:	4632      	mov	r2, r6
 8004414:	4861      	ldr	r0, [pc, #388]	@ (800459c <main+0x328>)
 8004416:	f24e 013c 	movw	r1, #57404	@ 0xe03c
 800441a:	f001 fbc5 	bl	8005ba8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USART6_ENABLE_GPIO_Port, USART6_ENABLE_Pin, GPIO_PIN_RESET);
 800441e:	4632      	mov	r2, r6
 8004420:	4859      	ldr	r0, [pc, #356]	@ (8004588 <main+0x314>)
 8004422:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004426:	f001 fbbf 	bl	8005ba8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800442a:	2701      	movs	r7, #1
 800442c:	f648 73ff 	movw	r3, #36863	@ 0x8fff
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004430:	4853      	ldr	r0, [pc, #332]	@ (8004580 <main+0x30c>)
 8004432:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004434:	e9cd 3711 	strd	r3, r7, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004438:	e9cd 6613 	strd	r6, r6, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800443c:	f001 fa7c 	bl	8005938 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CELL12_CS_06_Pin|CELL12_CS_08_Pin|CELL12_CS_09_Pin|CELL12_CS_10_Pin
 8004440:	f44f 637f 	mov.w	r3, #4080	@ 0xff0
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004444:	484f      	ldr	r0, [pc, #316]	@ (8004584 <main+0x310>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004446:	9614      	str	r6, [sp, #80]	@ 0x50
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004448:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800444a:	e9cd 7612 	strd	r7, r6, [sp, #72]	@ 0x48
  GPIO_InitStruct.Pin = CELL12_CS_06_Pin|CELL12_CS_08_Pin|CELL12_CS_09_Pin|CELL12_CS_10_Pin
 800444e:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004450:	f001 fa72 	bl	8005938 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CELL12_CS_07_Pin|SPI3_CS_03_Pin|SPI3_CS_02_Pin|USART6_ENABLE_Pin;
 8004454:	f242 1330 	movw	r3, #8496	@ 0x2130
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004458:	484b      	ldr	r0, [pc, #300]	@ (8004588 <main+0x314>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800445a:	9614      	str	r6, [sp, #80]	@ 0x50
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800445c:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800445e:	e9cd 7612 	strd	r7, r6, [sp, #72]	@ 0x48
  GPIO_InitStruct.Pin = CELL12_CS_07_Pin|SPI3_CS_03_Pin|SPI3_CS_02_Pin|USART6_ENABLE_Pin;
 8004462:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004464:	f001 fa68 	bl	8005938 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CELL12_CS_11_Pin|CELL12_CS_12_Pin|GPIO_02_Pin|GPIO_03_Pin
 8004468:	f64f 23bb 	movw	r3, #64187	@ 0xfabb
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800446c:	4847      	ldr	r0, [pc, #284]	@ (800458c <main+0x318>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800446e:	9614      	str	r6, [sp, #80]	@ 0x50
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004470:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004472:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004476:	e9cd 7612 	strd	r7, r6, [sp, #72]	@ 0x48
  GPIO_InitStruct.Pin = CELL12_CS_11_Pin|CELL12_CS_12_Pin|GPIO_02_Pin|GPIO_03_Pin
 800447a:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800447c:	f001 fa5c 	bl	8005938 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CSU_12_CELLS_Pin;
 8004480:	2304      	movs	r3, #4
  HAL_GPIO_Init(CSU_12_CELLS_GPIO_Port, &GPIO_InitStruct);
 8004482:	4842      	ldr	r0, [pc, #264]	@ (800458c <main+0x318>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004484:	f8cd 9050 	str.w	r9, [sp, #80]	@ 0x50
  HAL_GPIO_Init(CSU_12_CELLS_GPIO_Port, &GPIO_InitStruct);
 8004488:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800448a:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800448e:	e9cd 7612 	strd	r7, r6, [sp, #72]	@ 0x48
  GPIO_InitStruct.Pin = CSU_12_CELLS_Pin;
 8004492:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(CSU_12_CELLS_GPIO_Port, &GPIO_InitStruct);
 8004494:	f001 fa50 	bl	8005938 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CELL12_TEMP_03_CS_Pin|CELL12_TEMP_02_CS_Pin;
 8004498:	f44f 6388 	mov.w	r3, #1088	@ 0x440
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800449c:	483b      	ldr	r0, [pc, #236]	@ (800458c <main+0x318>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800449e:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80044a2:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Pin = CELL12_TEMP_03_CS_Pin|CELL12_TEMP_02_CS_Pin;
 80044a4:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044a6:	e9cd 7712 	strd	r7, r7, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80044aa:	f001 fa45 	bl	8005938 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CELL12_TEMP_03_LED_Pin;
 80044ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
  HAL_GPIO_Init(CELL12_TEMP_03_LED_GPIO_Port, &GPIO_InitStruct);
 80044b2:	4836      	ldr	r0, [pc, #216]	@ (800458c <main+0x318>)
  GPIO_InitStruct.Pin = CELL12_TEMP_03_LED_Pin;
 80044b4:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(CELL12_TEMP_03_LED_GPIO_Port, &GPIO_InitStruct);
 80044b6:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80044b8:	e9cd 7912 	strd	r7, r9, [sp, #72]	@ 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044bc:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
  HAL_GPIO_Init(CELL12_TEMP_03_LED_GPIO_Port, &GPIO_InitStruct);
 80044c0:	f001 fa3a 	bl	8005938 <HAL_GPIO_Init>
  HAL_GPIO_Init(CELL12_TEMP_02_LED_GPIO_Port, &GPIO_InitStruct);
 80044c4:	4830      	ldr	r0, [pc, #192]	@ (8004588 <main+0x314>)
 80044c6:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044c8:	e9cd 9813 	strd	r9, r8, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044cc:	e9cd 7711 	strd	r7, r7, [sp, #68]	@ 0x44
  HAL_GPIO_Init(CELL12_TEMP_02_LED_GPIO_Port, &GPIO_InitStruct);
 80044d0:	f001 fa32 	bl	8005938 <HAL_GPIO_Init>
  HAL_GPIO_Init(CELL12_TEMP_01_CS_GPIO_Port, &GPIO_InitStruct);
 80044d4:	482c      	ldr	r0, [pc, #176]	@ (8004588 <main+0x314>)
 80044d6:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044d8:	e9cd 9711 	strd	r9, r7, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044dc:	e9cd 7813 	strd	r7, r8, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(CELL12_TEMP_01_CS_GPIO_Port, &GPIO_InitStruct);
 80044e0:	f001 fa2a 	bl	8005938 <HAL_GPIO_Init>
  HAL_GPIO_Init(CELL12_TEMP_01_LED_GPIO_Port, &GPIO_InitStruct);
 80044e4:	482a      	ldr	r0, [pc, #168]	@ (8004590 <main+0x31c>)
 80044e6:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044e8:	e9cd 9813 	strd	r9, r8, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044ec:	e9cd 7711 	strd	r7, r7, [sp, #68]	@ 0x44
  HAL_GPIO_Init(CELL12_TEMP_01_LED_GPIO_Port, &GPIO_InitStruct);
 80044f0:	f001 fa22 	bl	8005938 <HAL_GPIO_Init>
  HAL_GPIO_Init(USART2_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80044f4:	4826      	ldr	r0, [pc, #152]	@ (8004590 <main+0x31c>)
 80044f6:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044f8:	e9cd 6913 	strd	r6, r9, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044fc:	e9cd 9711 	strd	r9, r7, [sp, #68]	@ 0x44
  HAL_GPIO_Init(USART2_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8004500:	f001 fa1a 	bl	8005938 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_14_Pin|GPIO_07_Pin|LED_01_Pin|LED_02_Pin;
 8004504:	f24c 030c 	movw	r3, #49164	@ 0xc00c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004508:	4822      	ldr	r0, [pc, #136]	@ (8004594 <main+0x320>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800450a:	9614      	str	r6, [sp, #80]	@ 0x50
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800450c:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800450e:	e9cd 7612 	strd	r7, r6, [sp, #72]	@ 0x48
  GPIO_InitStruct.Pin = GPIO_14_Pin|GPIO_07_Pin|LED_01_Pin|LED_02_Pin;
 8004512:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004514:	f001 fa10 	bl	8005938 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CELL11_CS_01_Pin|CELL11_CS_02_Pin|GPIO_11_Pin|GPIO_12_Pin
 8004518:	f24c 433b 	movw	r3, #50235	@ 0xc43b
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800451c:	481e      	ldr	r0, [pc, #120]	@ (8004598 <main+0x324>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800451e:	9614      	str	r6, [sp, #80]	@ 0x50
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004520:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004522:	e9cd 7612 	strd	r7, r6, [sp, #72]	@ 0x48
  GPIO_InitStruct.Pin = CELL11_CS_01_Pin|CELL11_CS_02_Pin|GPIO_11_Pin|GPIO_12_Pin
 8004526:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004528:	f001 fa06 	bl	8005938 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CELL11_CS_08_Pin|CELL11_CS_09_Pin|DISPLAY_IO_1_Pin|DISPLAY_IO_2_Pin
 800452c:	f24e 033f 	movw	r3, #57407	@ 0xe03f
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004530:	481a      	ldr	r0, [pc, #104]	@ (800459c <main+0x328>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004532:	9614      	str	r6, [sp, #80]	@ 0x50
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004534:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004536:	e9cd 7612 	strd	r7, r6, [sp, #72]	@ 0x48
  GPIO_InitStruct.Pin = CELL11_CS_08_Pin|CELL11_CS_09_Pin|DISPLAY_IO_1_Pin|DISPLAY_IO_2_Pin
 800453a:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800453c:	f001 f9fc 	bl	8005938 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CELL11_TEMP_03_CS_Pin;
 8004540:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  HAL_GPIO_Init(CELL11_TEMP_03_CS_GPIO_Port, &GPIO_InitStruct);
 8004544:	4814      	ldr	r0, [pc, #80]	@ (8004598 <main+0x324>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004546:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
  HAL_GPIO_Init(CELL11_TEMP_03_CS_GPIO_Port, &GPIO_InitStruct);
 800454a:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Pin = CELL11_TEMP_03_CS_Pin;
 800454c:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800454e:	e9cd 7712 	strd	r7, r7, [sp, #72]	@ 0x48
  HAL_GPIO_Init(CELL11_TEMP_03_CS_GPIO_Port, &GPIO_InitStruct);
 8004552:	f001 f9f1 	bl	8005938 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CELL11_TEMP_03_LED_Pin|CELL11_TEMP_02_LED_Pin|CELL11_TEMP_01_LED_Pin;
 8004556:	f44f 53a2 	mov.w	r3, #5184	@ 0x1440
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800455a:	480e      	ldr	r0, [pc, #56]	@ (8004594 <main+0x320>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800455c:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004560:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004562:	e9cd 7912 	strd	r7, r9, [sp, #72]	@ 0x48
  GPIO_InitStruct.Pin = CELL11_TEMP_03_LED_Pin|CELL11_TEMP_02_LED_Pin|CELL11_TEMP_01_LED_Pin;
 8004566:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004568:	f001 f9e6 	bl	8005938 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CELL11_TEMP_02_CS_Pin|CELL11_TEMP_01_CS_Pin;
 800456c:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8004570:	e018      	b.n	80045a4 <main+0x330>
 8004572:	bf00      	nop
 8004574:	20001964 	.word	0x20001964
 8004578:	20001954 	.word	0x20001954
 800457c:	40023800 	.word	0x40023800
 8004580:	40021000 	.word	0x40021000
 8004584:	40022000 	.word	0x40022000
 8004588:	40020800 	.word	0x40020800
 800458c:	40021400 	.word	0x40021400
 8004590:	40020000 	.word	0x40020000
 8004594:	40021c00 	.word	0x40021c00
 8004598:	40020400 	.word	0x40020400
 800459c:	40021800 	.word	0x40021800
 80045a0:	40020c00 	.word	0x40020c00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80045a4:	48ae      	ldr	r0, [pc, #696]	@ (8004860 <main+0x5ec>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045a6:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80045aa:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Pin = CELL11_TEMP_02_CS_Pin|CELL11_TEMP_01_CS_Pin;
 80045ac:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045ae:	e9cd 7712 	strd	r7, r7, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80045b2:	f001 f9c1 	bl	8005938 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CS1_Pin|USART3_ENABLE_Pin|DISPLAY_CS_Pin|SPI5_CS_02_Pin;
 80045b6:	f640 430c 	movw	r3, #3084	@ 0xc0c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045ba:	48aa      	ldr	r0, [pc, #680]	@ (8004864 <main+0x5f0>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045bc:	9614      	str	r6, [sp, #80]	@ 0x50
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045be:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c0:	e9cd 7612 	strd	r7, r6, [sp, #72]	@ 0x48
  GPIO_InitStruct.Pin = CS1_Pin|USART3_ENABLE_Pin|DISPLAY_CS_Pin|SPI5_CS_02_Pin;
 80045c4:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045c6:	f001 f9b7 	bl	8005938 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80045ca:	f44f 4270 	mov.w	r2, #61440	@ 0xf000
 80045ce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045d2:	48a4      	ldr	r0, [pc, #656]	@ (8004864 <main+0x5f0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d4:	9613      	str	r6, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045d6:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80045d8:	e9cd 2311 	strd	r2, r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045dc:	f001 f9ac 	bl	8005938 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CD_Pin;
 80045e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 80045e4:	489e      	ldr	r0, [pc, #632]	@ (8004860 <main+0x5ec>)
  GPIO_InitStruct.Pin = CD_Pin;
 80045e6:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 80045e8:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045ea:	e9cd 6712 	strd	r6, r7, [sp, #72]	@ 0x48
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 80045ee:	f001 f9a3 	bl	8005938 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DIP_SWITCH_01_Pin|DIP_SWITCH_02_Pin|DIP_SWITCH_03_Pin|DIP_SWITCH_04_Pin;
 80045f2:	23f0      	movs	r3, #240	@ 0xf0
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045f4:	489b      	ldr	r0, [pc, #620]	@ (8004864 <main+0x5f0>)
  GPIO_InitStruct.Pin = DIP_SWITCH_01_Pin|DIP_SWITCH_02_Pin|DIP_SWITCH_03_Pin|DIP_SWITCH_04_Pin;
 80045f6:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045f8:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045fa:	e9cd 6612 	strd	r6, r6, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045fe:	f001 f99b 	bl	8005938 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DIP_SWITCH_MODE_01_Pin|DIP_SWITCH_MODE_02_Pin|DIP_SWITCH_MODE_03_Pin|DIP_SWITCH_MODE_04_Pin;
 8004602:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004606:	4898      	ldr	r0, [pc, #608]	@ (8004868 <main+0x5f4>)
  GPIO_InitStruct.Pin = DIP_SWITCH_MODE_01_Pin|DIP_SWITCH_MODE_02_Pin|DIP_SWITCH_MODE_03_Pin|DIP_SWITCH_MODE_04_Pin;
 8004608:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800460a:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800460c:	e9cd 6612 	strd	r6, r6, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004610:	f001 f992 	bl	8005938 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004614:	4632      	mov	r2, r6
 8004616:	4631      	mov	r1, r6
 8004618:	2028      	movs	r0, #40	@ 0x28
 800461a:	f001 f8cd 	bl	80057b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800461e:	2028      	movs	r0, #40	@ 0x28
 8004620:	f001 f906 	bl	8005830 <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 8004624:	4891      	ldr	r0, [pc, #580]	@ (800486c <main+0x5f8>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004626:	4b92      	ldr	r3, [pc, #584]	@ (8004870 <main+0x5fc>)
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004628:	6286      	str	r6, [r0, #40]	@ 0x28
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800462a:	f44f 7982 	mov.w	r9, #260	@ 0x104
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800462e:	e9c0 6602 	strd	r6, r6, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004632:	e9c0 6704 	strd	r6, r7, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004636:	e9c0 6608 	strd	r6, r6, [r0, #32]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800463a:	e9c0 3900 	strd	r3, r9, [r0]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800463e:	f44f 7800 	mov.w	r8, #512	@ 0x200
 8004642:	2328      	movs	r3, #40	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004644:	260a      	movs	r6, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004646:	e9c0 8306 	strd	r8, r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 800464a:	62c6      	str	r6, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800464c:	f002 fc62 	bl	8006f14 <HAL_SPI_Init>
 8004650:	b108      	cbz	r0, 8004656 <main+0x3e2>
 8004652:	b672      	cpsid	i
  while (1)
 8004654:	e7fe      	b.n	8004654 <main+0x3e0>
  hspi2.Instance = SPI2;
 8004656:	4603      	mov	r3, r0
 8004658:	4886      	ldr	r0, [pc, #536]	@ (8004874 <main+0x600>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800465a:	e9c0 9301 	strd	r9, r3, [r0, #4]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800465e:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004662:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCPolynomial = 10;
 8004666:	e9c0 360a 	strd	r3, r6, [r0, #40]	@ 0x28
  hspi2.Instance = SPI2;
 800466a:	4b83      	ldr	r3, [pc, #524]	@ (8004878 <main+0x604>)
 800466c:	6003      	str	r3, [r0, #0]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800466e:	2318      	movs	r3, #24
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004670:	6147      	str	r7, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004672:	f8c0 8018 	str.w	r8, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004676:	61c3      	str	r3, [r0, #28]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004678:	f002 fc4c 	bl	8006f14 <HAL_SPI_Init>
 800467c:	b108      	cbz	r0, 8004682 <main+0x40e>
 800467e:	b672      	cpsid	i
  while (1)
 8004680:	e7fe      	b.n	8004680 <main+0x40c>
  hi2c2.Instance = I2C2;
 8004682:	4f7e      	ldr	r7, [pc, #504]	@ (800487c <main+0x608>)
  hi2c2.Init.ClockSpeed = 400000;
 8004684:	4b7e      	ldr	r3, [pc, #504]	@ (8004880 <main+0x60c>)
 8004686:	f8df b248 	ldr.w	fp, [pc, #584]	@ 80048d0 <main+0x65c>
  hi2c2.Init.OwnAddress1 = 0;
 800468a:	e9c7 0002 	strd	r0, r0, [r7, #8]
  hi2c2.Init.OwnAddress2 = 0;
 800468e:	e9c7 0005 	strd	r0, r0, [r7, #20]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004692:	e9c7 0007 	strd	r0, r0, [r7, #28]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004696:	f44f 4a80 	mov.w	sl, #16384	@ 0x4000
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800469a:	4638      	mov	r0, r7
  hi2c2.Init.ClockSpeed = 400000;
 800469c:	e9c7 3b00 	strd	r3, fp, [r7]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80046a0:	f8c7 a010 	str.w	sl, [r7, #16]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80046a4:	f001 fcac 	bl	8006000 <HAL_I2C_Init>
 80046a8:	b108      	cbz	r0, 80046ae <main+0x43a>
 80046aa:	b672      	cpsid	i
  while (1)
 80046ac:	e7fe      	b.n	80046ac <main+0x438>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80046ae:	4601      	mov	r1, r0
 80046b0:	4638      	mov	r0, r7
 80046b2:	f002 f82d 	bl	8006710 <HAL_I2CEx_ConfigAnalogFilter>
 80046b6:	4601      	mov	r1, r0
 80046b8:	b108      	cbz	r0, 80046be <main+0x44a>
 80046ba:	b672      	cpsid	i
  while (1)
 80046bc:	e7fe      	b.n	80046bc <main+0x448>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80046be:	4638      	mov	r0, r7
 80046c0:	f002 f846 	bl	8006750 <HAL_I2CEx_ConfigDigitalFilter>
 80046c4:	b108      	cbz	r0, 80046ca <main+0x456>
 80046c6:	b672      	cpsid	i
  while (1)
 80046c8:	e7fe      	b.n	80046c8 <main+0x454>
  hi2c3.Instance = I2C3;
 80046ca:	4f6e      	ldr	r7, [pc, #440]	@ (8004884 <main+0x610>)
 80046cc:	4b6e      	ldr	r3, [pc, #440]	@ (8004888 <main+0x614>)
  hi2c3.Init.ClockSpeed = 400000;
 80046ce:	f8c7 b004 	str.w	fp, [r7, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80046d2:	e9c7 0002 	strd	r0, r0, [r7, #8]
  hi2c3.Init.OwnAddress2 = 0;
 80046d6:	e9c7 0005 	strd	r0, r0, [r7, #20]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80046da:	e9c7 0007 	strd	r0, r0, [r7, #28]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80046de:	4638      	mov	r0, r7
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80046e0:	f8c7 a010 	str.w	sl, [r7, #16]
  hi2c3.Instance = I2C3;
 80046e4:	603b      	str	r3, [r7, #0]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80046e6:	f001 fc8b 	bl	8006000 <HAL_I2C_Init>
 80046ea:	4601      	mov	r1, r0
 80046ec:	b108      	cbz	r0, 80046f2 <main+0x47e>
 80046ee:	b672      	cpsid	i
  while (1)
 80046f0:	e7fe      	b.n	80046f0 <main+0x47c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80046f2:	4638      	mov	r0, r7
 80046f4:	f002 f80c 	bl	8006710 <HAL_I2CEx_ConfigAnalogFilter>
 80046f8:	4601      	mov	r1, r0
 80046fa:	b108      	cbz	r0, 8004700 <main+0x48c>
 80046fc:	b672      	cpsid	i
  while (1)
 80046fe:	e7fe      	b.n	80046fe <main+0x48a>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8004700:	4638      	mov	r0, r7
 8004702:	f002 f825 	bl	8006750 <HAL_I2CEx_ConfigDigitalFilter>
 8004706:	4603      	mov	r3, r0
 8004708:	b108      	cbz	r0, 800470e <main+0x49a>
 800470a:	b672      	cpsid	i
  while (1)
 800470c:	e7fe      	b.n	800470c <main+0x498>
  hspi3.Instance = SPI3;
 800470e:	485f      	ldr	r0, [pc, #380]	@ (800488c <main+0x618>)
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004710:	e9c0 9301 	strd	r9, r3, [r0, #4]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004714:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004718:	e9c0 3805 	strd	r3, r8, [r0, #20]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800471c:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi3.Init.CRCPolynomial = 10;
 8004720:	e9c0 360a 	strd	r3, r6, [r0, #40]	@ 0x28
  hspi3.Instance = SPI3;
 8004724:	4b5a      	ldr	r3, [pc, #360]	@ (8004890 <main+0x61c>)
 8004726:	6003      	str	r3, [r0, #0]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004728:	2320      	movs	r3, #32
 800472a:	61c3      	str	r3, [r0, #28]
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800472c:	f002 fbf2 	bl	8006f14 <HAL_SPI_Init>
 8004730:	4603      	mov	r3, r0
 8004732:	b108      	cbz	r0, 8004738 <main+0x4c4>
 8004734:	b672      	cpsid	i
  while (1)
 8004736:	e7fe      	b.n	8004736 <main+0x4c2>
  hspi4.Instance = SPI4;
 8004738:	4856      	ldr	r0, [pc, #344]	@ (8004894 <main+0x620>)
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800473a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800473e:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8004742:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004746:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi4.Instance = SPI4;
 8004748:	4b53      	ldr	r3, [pc, #332]	@ (8004898 <main+0x624>)
 800474a:	6003      	str	r3, [r0, #0]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800474c:	2330      	movs	r3, #48	@ 0x30
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800474e:	f8c0 9004 	str.w	r9, [r0, #4]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8004752:	f8c0 8018 	str.w	r8, [r0, #24]
  hspi4.Init.CRCPolynomial = 10;
 8004756:	62c6      	str	r6, [r0, #44]	@ 0x2c
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004758:	61c3      	str	r3, [r0, #28]
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800475a:	f002 fbdb 	bl	8006f14 <HAL_SPI_Init>
 800475e:	b108      	cbz	r0, 8004764 <main+0x4f0>
 8004760:	b672      	cpsid	i
  while (1)
 8004762:	e7fe      	b.n	8004762 <main+0x4ee>
  hcan1.Instance = CAN1;
 8004764:	484d      	ldr	r0, [pc, #308]	@ (800489c <main+0x628>)
  hcan1.Init.Prescaler = 10;
 8004766:	4f4e      	ldr	r7, [pc, #312]	@ (80048a0 <main+0x62c>)
 8004768:	230a      	movs	r3, #10
 800476a:	e9c0 7300 	strd	r7, r3, [r0]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800476e:	2300      	movs	r3, #0
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8004770:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8004774:	6183      	str	r3, [r0, #24]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8004776:	8383      	strh	r3, [r0, #28]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8004778:	f44f 2c40 	mov.w	ip, #786432	@ 0xc0000
 800477c:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8004780:	e9c0 c304 	strd	ip, r3, [r0, #16]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8004784:	f000 fe0e 	bl	80053a4 <HAL_CAN_Init>
 8004788:	4603      	mov	r3, r0
 800478a:	b108      	cbz	r0, 8004790 <main+0x51c>
 800478c:	b672      	cpsid	i
  while (1)
 800478e:	e7fe      	b.n	800478e <main+0x51a>
  hcan2.Instance = CAN2;
 8004790:	4844      	ldr	r0, [pc, #272]	@ (80048a4 <main+0x630>)
  hcan2.Init.Prescaler = 16;
 8004792:	4e45      	ldr	r6, [pc, #276]	@ (80048a8 <main+0x634>)
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8004794:	6183      	str	r3, [r0, #24]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8004796:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 800479a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800479e:	8383      	strh	r3, [r0, #28]
  hcan2.Init.Prescaler = 16;
 80047a0:	2310      	movs	r3, #16
 80047a2:	e9c0 6300 	strd	r6, r3, [r0]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80047a6:	f000 fdfd 	bl	80053a4 <HAL_CAN_Init>
 80047aa:	b108      	cbz	r0, 80047b0 <main+0x53c>
 80047ac:	b672      	cpsid	i
  while (1)
 80047ae:	e7fe      	b.n	80047ae <main+0x53a>
  hi2c1.Instance = I2C1;
 80047b0:	4e3e      	ldr	r6, [pc, #248]	@ (80048ac <main+0x638>)
  hi2c1.Init.ClockSpeed = 100000;
 80047b2:	493f      	ldr	r1, [pc, #252]	@ (80048b0 <main+0x63c>)
 80047b4:	4b3f      	ldr	r3, [pc, #252]	@ (80048b4 <main+0x640>)
  hi2c1.Init.OwnAddress1 = 0;
 80047b6:	e9c6 0002 	strd	r0, r0, [r6, #8]
  hi2c1.Init.ClockSpeed = 100000;
 80047ba:	e9c6 1300 	strd	r1, r3, [r6]
  hi2c1.Init.OwnAddress2 = 0;
 80047be:	e9c6 0005 	strd	r0, r0, [r6, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80047c2:	e9c6 0007 	strd	r0, r0, [r6, #28]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80047c6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80047ca:	4630      	mov	r0, r6
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80047cc:	6133      	str	r3, [r6, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80047ce:	f001 fc17 	bl	8006000 <HAL_I2C_Init>
 80047d2:	4601      	mov	r1, r0
 80047d4:	b108      	cbz	r0, 80047da <main+0x566>
 80047d6:	b672      	cpsid	i
  while (1)
 80047d8:	e7fe      	b.n	80047d8 <main+0x564>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80047da:	4630      	mov	r0, r6
 80047dc:	f001 ff98 	bl	8006710 <HAL_I2CEx_ConfigAnalogFilter>
 80047e0:	4601      	mov	r1, r0
 80047e2:	b108      	cbz	r0, 80047e8 <main+0x574>
 80047e4:	b672      	cpsid	i
  while (1)
 80047e6:	e7fe      	b.n	80047e6 <main+0x572>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80047e8:	4630      	mov	r0, r6
 80047ea:	f001 ffb1 	bl	8006750 <HAL_I2CEx_ConfigDigitalFilter>
 80047ee:	4603      	mov	r3, r0
 80047f0:	b108      	cbz	r0, 80047f6 <main+0x582>
 80047f2:	b672      	cpsid	i
  while (1)
 80047f4:	e7fe      	b.n	80047f4 <main+0x580>
  huart2.Instance = USART2;
 80047f6:	4830      	ldr	r0, [pc, #192]	@ (80048b8 <main+0x644>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 80047f8:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80047fc:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004800:	6103      	str	r3, [r0, #16]
  huart2.Init.BaudRate = 115200;
 8004802:	4b2e      	ldr	r3, [pc, #184]	@ (80048bc <main+0x648>)
 8004804:	f44f 37e1 	mov.w	r7, #115200	@ 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004808:	260c      	movs	r6, #12
  huart2.Init.BaudRate = 115200;
 800480a:	e9c0 3700 	strd	r3, r7, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800480e:	6146      	str	r6, [r0, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004810:	f003 f90a 	bl	8007a28 <HAL_UART_Init>
 8004814:	4603      	mov	r3, r0
 8004816:	b108      	cbz	r0, 800481c <main+0x5a8>
 8004818:	b672      	cpsid	i
  while (1)
 800481a:	e7fe      	b.n	800481a <main+0x5a6>
  huart3.Instance = USART3;
 800481c:	4828      	ldr	r0, [pc, #160]	@ (80048c0 <main+0x64c>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800481e:	e9c0 7301 	strd	r7, r3, [r0, #4]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004822:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004826:	e9c0 6305 	strd	r6, r3, [r0, #20]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800482a:	61c3      	str	r3, [r0, #28]
  huart3.Instance = USART3;
 800482c:	4b25      	ldr	r3, [pc, #148]	@ (80048c4 <main+0x650>)
 800482e:	6003      	str	r3, [r0, #0]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004830:	f003 f8fa 	bl	8007a28 <HAL_UART_Init>
 8004834:	4603      	mov	r3, r0
 8004836:	b108      	cbz	r0, 800483c <main+0x5c8>
 8004838:	b672      	cpsid	i
  while (1)
 800483a:	e7fe      	b.n	800483a <main+0x5c6>
  huart6.Instance = USART6;
 800483c:	4822      	ldr	r0, [pc, #136]	@ (80048c8 <main+0x654>)
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800483e:	e9c0 7301 	strd	r7, r3, [r0, #4]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004842:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004846:	e9c0 6305 	strd	r6, r3, [r0, #20]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800484a:	61c3      	str	r3, [r0, #28]
  huart6.Instance = USART6;
 800484c:	4b1f      	ldr	r3, [pc, #124]	@ (80048cc <main+0x658>)
 800484e:	6003      	str	r3, [r0, #0]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004850:	f003 f8ea 	bl	8007a28 <HAL_UART_Init>
 8004854:	4680      	mov	r8, r0
 8004856:	2800      	cmp	r0, #0
 8004858:	d03c      	beq.n	80048d4 <main+0x660>
 800485a:	b672      	cpsid	i
  while (1)
 800485c:	e7fe      	b.n	800485c <main+0x5e8>
 800485e:	bf00      	nop
 8004860:	40021c00 	.word	0x40021c00
 8004864:	40020c00 	.word	0x40020c00
 8004868:	40021800 	.word	0x40021800
 800486c:	20001448 	.word	0x20001448
 8004870:	40013000 	.word	0x40013000
 8004874:	200013f0 	.word	0x200013f0
 8004878:	40003800 	.word	0x40003800
 800487c:	200014f4 	.word	0x200014f4
 8004880:	40005800 	.word	0x40005800
 8004884:	200014a0 	.word	0x200014a0
 8004888:	40005c00 	.word	0x40005c00
 800488c:	20001398 	.word	0x20001398
 8004890:	40003c00 	.word	0x40003c00
 8004894:	20001340 	.word	0x20001340
 8004898:	40013400 	.word	0x40013400
 800489c:	200015c4 	.word	0x200015c4
 80048a0:	40006400 	.word	0x40006400
 80048a4:	2000159c 	.word	0x2000159c
 80048a8:	40006800 	.word	0x40006800
 80048ac:	20001548 	.word	0x20001548
 80048b0:	40005400 	.word	0x40005400
 80048b4:	000186a0 	.word	0x000186a0
 80048b8:	20001268 	.word	0x20001268
 80048bc:	40004400 	.word	0x40004400
 80048c0:	20001220 	.word	0x20001220
 80048c4:	40004800 	.word	0x40004800
 80048c8:	200011d8 	.word	0x200011d8
 80048cc:	40011400 	.word	0x40011400
 80048d0:	00061a80 	.word	0x00061a80
  MX_FATFS_Init();
 80048d4:	f003 fc06 	bl	80080e4 <MX_FATFS_Init>
  huart1.Instance = USART1;
 80048d8:	4884      	ldr	r0, [pc, #528]	@ (8004aec <main+0x878>)
 80048da:	4b85      	ldr	r3, [pc, #532]	@ (8004af0 <main+0x87c>)
 80048dc:	6003      	str	r3, [r0, #0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80048de:	e9c0 8802 	strd	r8, r8, [r0, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80048e2:	e9c0 8806 	strd	r8, r8, [r0, #24]
  huart1.Init.BaudRate = 115200;
 80048e6:	6047      	str	r7, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80048e8:	6146      	str	r6, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 80048ea:	f8c0 8010 	str.w	r8, [r0, #16]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80048ee:	f003 f89b 	bl	8007a28 <HAL_UART_Init>
 80048f2:	4603      	mov	r3, r0
 80048f4:	b108      	cbz	r0, 80048fa <main+0x686>
 80048f6:	b672      	cpsid	i
  while (1)
 80048f8:	e7fe      	b.n	80048f8 <main+0x684>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80048fa:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
 80048fe:	e9cd 0013 	strd	r0, r0, [sp, #76]	@ 0x4c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004902:	e9cd 000f 	strd	r0, r0, [sp, #60]	@ 0x3c
  htim1.Instance = TIM1;
 8004906:	487b      	ldr	r0, [pc, #492]	@ (8004af4 <main+0x880>)
  htim1.Init.Prescaler = 9000-1;
 8004908:	4a7b      	ldr	r2, [pc, #492]	@ (8004af8 <main+0x884>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800490a:	6083      	str	r3, [r0, #8]
  htim1.Init.RepetitionCounter = 0;
 800490c:	e9c0 3304 	strd	r3, r3, [r0, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004910:	6183      	str	r3, [r0, #24]
  htim1.Init.Prescaler = 9000-1;
 8004912:	f242 3327 	movw	r3, #8999	@ 0x2327
 8004916:	e9c0 2300 	strd	r2, r3, [r0]
  htim1.Init.Period = 65535;
 800491a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800491e:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004920:	f002 feae 	bl	8007680 <HAL_TIM_Base_Init>
 8004924:	b108      	cbz	r0, 800492a <main+0x6b6>
 8004926:	b672      	cpsid	i
  while (1)
 8004928:	e7fe      	b.n	8004928 <main+0x6b4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800492a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800492e:	4871      	ldr	r0, [pc, #452]	@ (8004af4 <main+0x880>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004930:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004932:	a911      	add	r1, sp, #68	@ 0x44
 8004934:	f002 ff8e 	bl	8007854 <HAL_TIM_ConfigClockSource>
 8004938:	4603      	mov	r3, r0
 800493a:	b108      	cbz	r0, 8004940 <main+0x6cc>
 800493c:	b672      	cpsid	i
  while (1)
 800493e:	e7fe      	b.n	800493e <main+0x6ca>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004940:	486c      	ldr	r0, [pc, #432]	@ (8004af4 <main+0x880>)
 8004942:	a90f      	add	r1, sp, #60	@ 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004944:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004948:	f003 f82e 	bl	80079a8 <HAL_TIMEx_MasterConfigSynchronization>
 800494c:	4606      	mov	r6, r0
 800494e:	b108      	cbz	r0, 8004954 <main+0x6e0>
 8004950:	b672      	cpsid	i
  while (1)
 8004952:	e7fe      	b.n	8004952 <main+0x6de>
  RTC_Init();
 8004954:	f7ff f9b0 	bl	8003cb8 <RTC_Init>
  LED_Init();		/* Reset all LEDs */
 8004958:	f7fc fa08 	bl	8000d6c <LED_Init>
  init_ina229_devices();
 800495c:	f7ff fa2c 	bl	8003db8 <init_ina229_devices>
  for (int i = 0; i < NUM_INA229; i++)
 8004960:	4f66      	ldr	r7, [pc, #408]	@ (8004afc <main+0x888>)
  { INA229_config(ina229_devices[i]); HAL_Delay(10); }
 8004962:	f857 0b04 	ldr.w	r0, [r7], #4
 8004966:	f7fe fa2d 	bl	8002dc4 <INA229_config>
  for (int i = 0; i < NUM_INA229; i++)
 800496a:	3601      	adds	r6, #1
  { INA229_config(ina229_devices[i]); HAL_Delay(10); }
 800496c:	200a      	movs	r0, #10
 800496e:	f000 fd07 	bl	8005380 <HAL_Delay>
  for (int i = 0; i < NUM_INA229; i++)
 8004972:	2e1a      	cmp	r6, #26
 8004974:	d1f5      	bne.n	8004962 <main+0x6ee>
  mcu_spiInit(0);
 8004976:	2000      	movs	r0, #0
 8004978:	f7fe fb9e 	bl	80030b8 <mcu_spiInit>
  HAL_Delay(10);
 800497c:	200a      	movs	r0, #10
 800497e:	f000 fcff 	bl	8005380 <HAL_Delay>
		LTC6811_set_cfgr(main_current_ic, BMS_IC, REF_ON, ADCOPT, GPIOBITS_A,
 8004982:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8004b38 <main+0x8c4>
 8004986:	f8df b1b4 	ldr.w	fp, [pc, #436]	@ 8004b3c <main+0x8c8>
	LTC6811_init_cfg(TOTAL_IC, BMS_IC);
 800498a:	495d      	ldr	r1, [pc, #372]	@ (8004b00 <main+0x88c>)
		LTC6811_set_cfgr(main_current_ic, BMS_IC, REF_ON, ADCOPT, GPIOBITS_A,
 800498c:	4f5d      	ldr	r7, [pc, #372]	@ (8004b04 <main+0x890>)
 800498e:	4e5e      	ldr	r6, [pc, #376]	@ (8004b08 <main+0x894>)
 8004990:	f8df 91ac 	ldr.w	r9, [pc, #428]	@ 8004b40 <main+0x8cc>
 8004994:	f8df a1ac 	ldr.w	sl, [pc, #428]	@ 8004b44 <main+0x8d0>
	LTC6811_init_cfg(TOTAL_IC, BMS_IC);
 8004998:	2002      	movs	r0, #2
 800499a:	f7fe fbcd 	bl	8003138 <LTC6811_init_cfg>
		LTC6811_set_cfgr(main_current_ic, BMS_IC, REF_ON, ADCOPT, GPIOBITS_A,
 800499e:	f8cd b008 	str.w	fp, [sp, #8]
 80049a2:	f8b8 3000 	ldrh.w	r3, [r8]
 80049a6:	9304      	str	r3, [sp, #16]
 80049a8:	883b      	ldrh	r3, [r7, #0]
 80049aa:	9303      	str	r3, [sp, #12]
 80049ac:	4b57      	ldr	r3, [pc, #348]	@ (8004b0c <main+0x898>)
 80049ae:	f8cd a004 	str.w	sl, [sp, #4]
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	7833      	ldrb	r3, [r6, #0]
 80049b6:	f899 2000 	ldrb.w	r2, [r9]
 80049ba:	4951      	ldr	r1, [pc, #324]	@ (8004b00 <main+0x88c>)
 80049bc:	2000      	movs	r0, #0
 80049be:	f7fe fbbd 	bl	800313c <LTC6811_set_cfgr>
 80049c2:	e9cd ab01 	strd	sl, fp, [sp, #4]
 80049c6:	4b51      	ldr	r3, [pc, #324]	@ (8004b0c <main+0x898>)
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	f8b8 3000 	ldrh.w	r3, [r8]
 80049ce:	9304      	str	r3, [sp, #16]
 80049d0:	8839      	ldrh	r1, [r7, #0]
 80049d2:	7833      	ldrb	r3, [r6, #0]
 80049d4:	f899 2000 	ldrb.w	r2, [r9]
 80049d8:	9103      	str	r1, [sp, #12]
 80049da:	2001      	movs	r0, #1
 80049dc:	4948      	ldr	r1, [pc, #288]	@ (8004b00 <main+0x88c>)
 80049de:	f8df 8168 	ldr.w	r8, [pc, #360]	@ 8004b48 <main+0x8d4>
 80049e2:	f8df b168 	ldr.w	fp, [pc, #360]	@ 8004b4c <main+0x8d8>
 80049e6:	f8df a168 	ldr.w	sl, [pc, #360]	@ 8004b50 <main+0x8dc>
 80049ea:	4f49      	ldr	r7, [pc, #292]	@ (8004b10 <main+0x89c>)
		  HAL_TIM_Base_Stop_IT(&htim1);
 80049ec:	f8df 9104 	ldr.w	r9, [pc, #260]	@ 8004af4 <main+0x880>
		LTC6811_set_cfgr(main_current_ic, BMS_IC, REF_ON, ADCOPT, GPIOBITS_A,
 80049f0:	f7fe fba4 	bl	800313c <LTC6811_set_cfgr>
	LTC6811_wrcfg(TOTAL_IC, BMS_IC);
 80049f4:	4942      	ldr	r1, [pc, #264]	@ (8004b00 <main+0x88c>)
 80049f6:	2002      	movs	r0, #2
 80049f8:	f7fe fb94 	bl	8003124 <LTC6811_wrcfg>
	LTC6811_reset_crc_count(TOTAL_IC, BMS_IC);
 80049fc:	4940      	ldr	r1, [pc, #256]	@ (8004b00 <main+0x88c>)
 80049fe:	2002      	movs	r0, #2
 8004a00:	f7fe fb98 	bl	8003134 <LTC6811_reset_crc_count>
	LTC6811_init_reg_limits(TOTAL_IC, BMS_IC);
 8004a04:	493e      	ldr	r1, [pc, #248]	@ (8004b00 <main+0x88c>)
 8004a06:	2002      	movs	r0, #2
 8004a08:	f7fe fb74 	bl	80030f4 <LTC6811_init_reg_limits>
  Display_Init();
 8004a0c:	f7fc fe76 	bl	80016fc <Display_Init>
  Display_MainTitlePage();
 8004a10:	f7fc fe9c 	bl	800174c <Display_MainTitlePage>
  Expander_InitAllDevices(&hi2c2);
 8004a14:	483f      	ldr	r0, [pc, #252]	@ (8004b14 <main+0x8a0>)
 8004a16:	f7fe f813 	bl	8002a40 <Expander_InitAllDevices>
  Expander_InitAllDevices(&hi2c3);
 8004a1a:	483f      	ldr	r0, [pc, #252]	@ (8004b18 <main+0x8a4>)
 8004a1c:	f7fe f810 	bl	8002a40 <Expander_InitAllDevices>
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData_modbus_01, 256);
 8004a20:	493e      	ldr	r1, [pc, #248]	@ (8004b1c <main+0x8a8>)
 8004a22:	4832      	ldr	r0, [pc, #200]	@ (8004aec <main+0x878>)
 8004a24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a28:	f003 f8fe 	bl	8007c28 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, RxData_modbus_02, 256);
 8004a2c:	493c      	ldr	r1, [pc, #240]	@ (8004b20 <main+0x8ac>)
 8004a2e:	483d      	ldr	r0, [pc, #244]	@ (8004b24 <main+0x8b0>)
 8004a30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a34:	f003 f8f8 	bl	8007c28 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart3, RxData_modbus_03, 256);
 8004a38:	493b      	ldr	r1, [pc, #236]	@ (8004b28 <main+0x8b4>)
 8004a3a:	483c      	ldr	r0, [pc, #240]	@ (8004b2c <main+0x8b8>)
 8004a3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a40:	f003 f8f2 	bl	8007c28 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart6, RxData_modbus_04, 256);
 8004a44:	493a      	ldr	r1, [pc, #232]	@ (8004b30 <main+0x8bc>)
 8004a46:	483b      	ldr	r0, [pc, #236]	@ (8004b34 <main+0x8c0>)
 8004a48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a4c:	f003 f8ec 	bl	8007c28 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_TIM_Base_Start_IT(&htim1);
 8004a50:	4828      	ldr	r0, [pc, #160]	@ (8004af4 <main+0x880>)
 8004a52:	f002 fead 	bl	80077b0 <HAL_TIM_Base_Start_IT>
	    	memset(RxData_modbus_01, 0, sizeof(RxData_modbus_01));
 8004a56:	2600      	movs	r6, #0
	  if (modebus_rx_flag == 1 )
 8004a58:	f898 3000 	ldrb.w	r3, [r8]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d114      	bne.n	8004a8a <main+0x816>
		    HAL_Delay(500);
 8004a60:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004a64:	f000 fc8c 	bl	8005380 <HAL_Delay>
	        tester_setup();
 8004a68:	f7ff fa8a 	bl	8003f80 <tester_setup>
		  HAL_TIM_Base_Stop_IT(&htim1);
 8004a6c:	4648      	mov	r0, r9
	    	memset(RxData_modbus_01, 0, sizeof(RxData_modbus_01));
 8004a6e:	e9c4 6600 	strd	r6, r6, [r4]
 8004a72:	e9c4 6602 	strd	r6, r6, [r4, #8]
	    	memset(TxData_modbus_01, 0, sizeof(TxData_modbus_01));
 8004a76:	e9c5 6600 	strd	r6, r6, [r5]
 8004a7a:	e9c5 6602 	strd	r6, r6, [r5, #8]
		  modebus_rx_flag = 0 ;
 8004a7e:	f888 6000 	strb.w	r6, [r8]
		  flag_1 = 0 ;
 8004a82:	f88b 6000 	strb.w	r6, [fp]
		  HAL_TIM_Base_Stop_IT(&htim1);
 8004a86:	f002 fecd 	bl	8007824 <HAL_TIM_Base_Stop_IT>
 flag_2 = Get_INA_Voltage(1);
 8004a8a:	2001      	movs	r0, #1
 8004a8c:	f7ff fb6a 	bl	8004164 <Get_INA_Voltage>
 8004a90:	eef0 7a40 	vmov.f32	s15, s0
 8004a94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		  cell12_Temp_01_Set(resistance[0]);
 8004a98:	ed97 7a00 	vldr	s14, [r7]
 flag_2 = Get_INA_Voltage(1);
 8004a9c:	ee17 3a90 	vmov	r3, s15
		  cell12_Temp_01_Set(resistance[0]);
 8004aa0:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 flag_2 = Get_INA_Voltage(1);
 8004aa4:	f88a 3000 	strb.w	r3, [sl]
		  cell12_Temp_01_Set(resistance[0]);
 8004aa8:	f7fc f9ce 	bl	8000e48 <cell12_Temp_01_Set>
		  cell12_Temp_02_Set(resistance[1]);
 8004aac:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ab0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8004ab4:	f7fc fa62 	bl	8000f7c <cell12_Temp_02_Set>
		  cell12_Temp_03_Set(resistance[2]);
 8004ab8:	edd7 7a02 	vldr	s15, [r7, #8]
 8004abc:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8004ac0:	f7fc fafe 	bl	80010c0 <cell12_Temp_03_Set>
		  cell11_Temp_01_Set(resistance[3]);
 8004ac4:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ac8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8004acc:	f7fc fb90 	bl	80011f0 <cell11_Temp_01_Set>
		  cell11_Temp_02_Set(resistance[4]);
 8004ad0:	edd7 7a04 	vldr	s15, [r7, #16]
 8004ad4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8004ad8:	f7fc fc2c 	bl	8001334 <cell11_Temp_02_Set>
		  cell11_Temp_03_Set(resistance[4]);
 8004adc:	edd7 7a04 	vldr	s15, [r7, #16]
 8004ae0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8004ae4:	f7fc fcc8 	bl	8001478 <cell11_Temp_03_Set>
	  if (modebus_rx_flag == 1 )
 8004ae8:	e7b6      	b.n	8004a58 <main+0x7e4>
 8004aea:	bf00      	nop
 8004aec:	200012b0 	.word	0x200012b0
 8004af0:	40011000 	.word	0x40011000
 8004af4:	200012f8 	.word	0x200012f8
 8004af8:	40010000 	.word	0x40010000
 8004afc:	200015ec 	.word	0x200015ec
 8004b00:	20000fd0 	.word	0x20000fd0
 8004b04:	200008ae 	.word	0x200008ae
 8004b08:	20000fcc 	.word	0x20000fcc
 8004b0c:	200008b0 	.word	0x200008b0
 8004b10:	200008b8 	.word	0x200008b8
 8004b14:	200014f4 	.word	0x200014f4
 8004b18:	200014a0 	.word	0x200014a0
 8004b1c:	20001964 	.word	0x20001964
 8004b20:	20001854 	.word	0x20001854
 8004b24:	20001268 	.word	0x20001268
 8004b28:	20001754 	.word	0x20001754
 8004b2c:	20001220 	.word	0x20001220
 8004b30:	20001654 	.word	0x20001654
 8004b34:	200011d8 	.word	0x200011d8
 8004b38:	200008ac 	.word	0x200008ac
 8004b3c:	200008a8 	.word	0x200008a8
 8004b40:	200008b5 	.word	0x200008b5
 8004b44:	20000fc0 	.word	0x20000fc0
 8004b48:	20001976 	.word	0x20001976
 8004b4c:	20001975 	.word	0x20001975
 8004b50:	20001974 	.word	0x20001974

08004b54 <HAL_GPIO_EXTI_Callback>:
    Push_ButtonHandler(GPIO_Pin);
 8004b54:	f7fc b948 	b.w	8000de8 <Push_ButtonHandler>

08004b58 <HAL_UARTEx_RxEventCallback>:
{
 8004b58:	b508      	push	{r3, lr}
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData_modbus_01, sizeof(RxData_modbus_01));
 8004b5a:	490d      	ldr	r1, [pc, #52]	@ (8004b90 <HAL_UARTEx_RxEventCallback+0x38>)
 8004b5c:	480d      	ldr	r0, [pc, #52]	@ (8004b94 <HAL_UARTEx_RxEventCallback+0x3c>)
 8004b5e:	2210      	movs	r2, #16
 8004b60:	f003 f862 	bl	8007c28 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, RxData_modbus_02, sizeof(RxData_modbus_02));
 8004b64:	490c      	ldr	r1, [pc, #48]	@ (8004b98 <HAL_UARTEx_RxEventCallback+0x40>)
 8004b66:	480d      	ldr	r0, [pc, #52]	@ (8004b9c <HAL_UARTEx_RxEventCallback+0x44>)
 8004b68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b6c:	f003 f85c 	bl	8007c28 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart3, RxData_modbus_03, sizeof(RxData_modbus_03));
 8004b70:	490b      	ldr	r1, [pc, #44]	@ (8004ba0 <HAL_UARTEx_RxEventCallback+0x48>)
 8004b72:	480c      	ldr	r0, [pc, #48]	@ (8004ba4 <HAL_UARTEx_RxEventCallback+0x4c>)
 8004b74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b78:	f003 f856 	bl	8007c28 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart6, RxData_modbus_04, sizeof(RxData_modbus_04));
 8004b7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b80:	4909      	ldr	r1, [pc, #36]	@ (8004ba8 <HAL_UARTEx_RxEventCallback+0x50>)
 8004b82:	480a      	ldr	r0, [pc, #40]	@ (8004bac <HAL_UARTEx_RxEventCallback+0x54>)
 8004b84:	f003 f850 	bl	8007c28 <HAL_UARTEx_ReceiveToIdle_IT>
	modebus_rx_flag = 1 ;
 8004b88:	4b09      	ldr	r3, [pc, #36]	@ (8004bb0 <HAL_UARTEx_RxEventCallback+0x58>)
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	701a      	strb	r2, [r3, #0]
}
 8004b8e:	bd08      	pop	{r3, pc}
 8004b90:	20001964 	.word	0x20001964
 8004b94:	200012b0 	.word	0x200012b0
 8004b98:	20001854 	.word	0x20001854
 8004b9c:	20001268 	.word	0x20001268
 8004ba0:	20001754 	.word	0x20001754
 8004ba4:	20001220 	.word	0x20001220
 8004ba8:	20001654 	.word	0x20001654
 8004bac:	200011d8 	.word	0x200011d8
 8004bb0:	20001976 	.word	0x20001976

08004bb4 <Error_Handler>:
 8004bb4:	b672      	cpsid	i
  while (1)
 8004bb6:	e7fe      	b.n	8004bb6 <Error_Handler+0x2>

08004bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004bb8:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bba:	4b0c      	ldr	r3, [pc, #48]	@ (8004bec <HAL_MspInit+0x34>)
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	9100      	str	r1, [sp, #0]
 8004bc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004bc6:	645a      	str	r2, [r3, #68]	@ 0x44
 8004bc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bca:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8004bce:	9200      	str	r2, [sp, #0]
 8004bd0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004bd2:	9101      	str	r1, [sp, #4]
 8004bd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bd6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004bda:	641a      	str	r2, [r3, #64]	@ 0x40
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004be2:	9301      	str	r3, [sp, #4]
 8004be4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004be6:	b002      	add	sp, #8
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	40023800 	.word	0x40023800

08004bf0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004bf0:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcan->Instance==CAN1)
 8004bf2:	6802      	ldr	r2, [r0, #0]
 8004bf4:	4942      	ldr	r1, [pc, #264]	@ (8004d00 <HAL_CAN_MspInit+0x110>)
{
 8004bf6:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bf8:	2300      	movs	r3, #0
  if(hcan->Instance==CAN1)
 8004bfa:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bfc:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8004c00:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8004c04:	930a      	str	r3, [sp, #40]	@ 0x28
  if(hcan->Instance==CAN1)
 8004c06:	d02f      	beq.n	8004c68 <HAL_CAN_MspInit+0x78>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
  else if(hcan->Instance==CAN2)
 8004c08:	493e      	ldr	r1, [pc, #248]	@ (8004d04 <HAL_CAN_MspInit+0x114>)
 8004c0a:	428a      	cmp	r2, r1
 8004c0c:	d001      	beq.n	8004c12 <HAL_CAN_MspInit+0x22>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8004c0e:	b00d      	add	sp, #52	@ 0x34
 8004c10:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_CAN2_CLK_ENABLE();
 8004c12:	4a3d      	ldr	r2, [pc, #244]	@ (8004d08 <HAL_CAN_MspInit+0x118>)
 8004c14:	9303      	str	r3, [sp, #12]
 8004c16:	6c11      	ldr	r1, [r2, #64]	@ 0x40
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004c18:	483c      	ldr	r0, [pc, #240]	@ (8004d0c <HAL_CAN_MspInit+0x11c>)
    __HAL_RCC_CAN2_CLK_ENABLE();
 8004c1a:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 8004c1e:	6411      	str	r1, [r2, #64]	@ 0x40
 8004c20:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8004c22:	f001 6180 	and.w	r1, r1, #67108864	@ 0x4000000
 8004c26:	9103      	str	r1, [sp, #12]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004c28:	6801      	ldr	r1, [r0, #0]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8004c2a:	9c03      	ldr	r4, [sp, #12]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004c2c:	3101      	adds	r1, #1
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004c2e:	2901      	cmp	r1, #1
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004c30:	6001      	str	r1, [r0, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004c32:	d055      	beq.n	8004ce0 <HAL_CAN_MspInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c34:	4b34      	ldr	r3, [pc, #208]	@ (8004d08 <HAL_CAN_MspInit+0x118>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	9205      	str	r2, [sp, #20]
 8004c3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c3c:	f042 0202 	orr.w	r2, r2, #2
 8004c40:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004c44:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8004cf8 <HAL_CAN_MspInit+0x108>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	9305      	str	r3, [sp, #20]
 8004c4e:	9805      	ldr	r0, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c50:	482f      	ldr	r0, [pc, #188]	@ (8004d10 <HAL_CAN_MspInit+0x120>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c52:	2203      	movs	r2, #3
 8004c54:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c56:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004c58:	ed8d 7b06 	vstr	d7, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c5e:	930a      	str	r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c60:	f000 fe6a 	bl	8005938 <HAL_GPIO_Init>
}
 8004c64:	b00d      	add	sp, #52	@ 0x34
 8004c66:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004c68:	4928      	ldr	r1, [pc, #160]	@ (8004d0c <HAL_CAN_MspInit+0x11c>)
 8004c6a:	680a      	ldr	r2, [r1, #0]
 8004c6c:	3201      	adds	r2, #1
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004c6e:	2a01      	cmp	r2, #1
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004c70:	600a      	str	r2, [r1, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004c72:	d029      	beq.n	8004cc8 <HAL_CAN_MspInit+0xd8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c74:	2400      	movs	r4, #0
 8004c76:	4b24      	ldr	r3, [pc, #144]	@ (8004d08 <HAL_CAN_MspInit+0x118>)
 8004c78:	9402      	str	r4, [sp, #8]
 8004c7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c7c:	4825      	ldr	r0, [pc, #148]	@ (8004d14 <HAL_CAN_MspInit+0x124>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c7e:	f042 0208 	orr.w	r2, r2, #8
 8004c82:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c86:	f003 0308 	and.w	r3, r3, #8
 8004c8a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004c8c:	2203      	movs	r2, #3
 8004c8e:	2302      	movs	r3, #2
 8004c90:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c94:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c96:	2309      	movs	r3, #9
 8004c98:	2203      	movs	r2, #3
 8004c9a:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c9e:	9d02      	ldr	r5, [sp, #8]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ca0:	f000 fe4a 	bl	8005938 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8004ca4:	4622      	mov	r2, r4
 8004ca6:	4621      	mov	r1, r4
 8004ca8:	2014      	movs	r0, #20
 8004caa:	f000 fd85 	bl	80057b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8004cae:	2014      	movs	r0, #20
 8004cb0:	f000 fdbe 	bl	8005830 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8004cb4:	4622      	mov	r2, r4
 8004cb6:	4621      	mov	r1, r4
 8004cb8:	2015      	movs	r0, #21
 8004cba:	f000 fd7d 	bl	80057b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8004cbe:	2015      	movs	r0, #21
 8004cc0:	f000 fdb6 	bl	8005830 <HAL_NVIC_EnableIRQ>
}
 8004cc4:	b00d      	add	sp, #52	@ 0x34
 8004cc6:	bd30      	pop	{r4, r5, pc}
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004cc8:	4a0f      	ldr	r2, [pc, #60]	@ (8004d08 <HAL_CAN_MspInit+0x118>)
 8004cca:	9301      	str	r3, [sp, #4]
 8004ccc:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004cce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004cd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cd4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cda:	9301      	str	r3, [sp, #4]
 8004cdc:	9b01      	ldr	r3, [sp, #4]
 8004cde:	e7c9      	b.n	8004c74 <HAL_CAN_MspInit+0x84>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004ce0:	9304      	str	r3, [sp, #16]
 8004ce2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004ce4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004ce8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cea:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004cec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cf0:	9304      	str	r3, [sp, #16]
 8004cf2:	9b04      	ldr	r3, [sp, #16]
 8004cf4:	e79e      	b.n	8004c34 <HAL_CAN_MspInit+0x44>
 8004cf6:	bf00      	nop
 8004cf8:	00003000 	.word	0x00003000
 8004cfc:	00000002 	.word	0x00000002
 8004d00:	40006400 	.word	0x40006400
 8004d04:	40006800 	.word	0x40006800
 8004d08:	40023800 	.word	0x40023800
 8004d0c:	20001978 	.word	0x20001978
 8004d10:	40020400 	.word	0x40020400
 8004d14:	40020c00 	.word	0x40020c00

08004d18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004d18:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 8004d1a:	6803      	ldr	r3, [r0, #0]
 8004d1c:	4a3e      	ldr	r2, [pc, #248]	@ (8004e18 <HAL_I2C_MspInit+0x100>)
{
 8004d1e:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d20:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C1)
 8004d22:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d24:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8004d28:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8004d2c:	940a      	str	r4, [sp, #40]	@ 0x28
  if(hi2c->Instance==I2C1)
 8004d2e:	d007      	beq.n	8004d40 <HAL_I2C_MspInit+0x28>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 8004d30:	4a3a      	ldr	r2, [pc, #232]	@ (8004e1c <HAL_I2C_MspInit+0x104>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d028      	beq.n	8004d88 <HAL_I2C_MspInit+0x70>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
  else if(hi2c->Instance==I2C3)
 8004d36:	4a3a      	ldr	r2, [pc, #232]	@ (8004e20 <HAL_I2C_MspInit+0x108>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d048      	beq.n	8004dce <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004d3c:	b00d      	add	sp, #52	@ 0x34
 8004d3e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d40:	4d38      	ldr	r5, [pc, #224]	@ (8004e24 <HAL_I2C_MspInit+0x10c>)
 8004d42:	9400      	str	r4, [sp, #0]
 8004d44:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d46:	4838      	ldr	r0, [pc, #224]	@ (8004e28 <HAL_I2C_MspInit+0x110>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d48:	f043 0302 	orr.w	r3, r3, #2
 8004d4c:	632b      	str	r3, [r5, #48]	@ 0x30
 8004d4e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004d56:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8004d5a:	2312      	movs	r3, #18
 8004d5c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d60:	2303      	movs	r3, #3
 8004d62:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d64:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d66:	2304      	movs	r3, #4
 8004d68:	930a      	str	r3, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d6a:	9a00      	ldr	r2, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d6c:	f000 fde4 	bl	8005938 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004d70:	9401      	str	r4, [sp, #4]
 8004d72:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8004d74:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004d78:	642b      	str	r3, [r5, #64]	@ 0x40
 8004d7a:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8004d7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d80:	9301      	str	r3, [sp, #4]
 8004d82:	9b01      	ldr	r3, [sp, #4]
}
 8004d84:	b00d      	add	sp, #52	@ 0x34
 8004d86:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004d88:	4d26      	ldr	r5, [pc, #152]	@ (8004e24 <HAL_I2C_MspInit+0x10c>)
 8004d8a:	9402      	str	r4, [sp, #8]
 8004d8c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004d8e:	4827      	ldr	r0, [pc, #156]	@ (8004e2c <HAL_I2C_MspInit+0x114>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004d90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d94:	632b      	str	r3, [r5, #48]	@ 0x30
 8004d96:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004d98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d9c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004d9e:	2230      	movs	r2, #48	@ 0x30
 8004da0:	2312      	movs	r3, #18
 8004da2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004da6:	2303      	movs	r3, #3
 8004da8:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004daa:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dac:	2304      	movs	r3, #4
 8004dae:	930a      	str	r3, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004db0:	9a02      	ldr	r2, [sp, #8]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004db2:	f000 fdc1 	bl	8005938 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004db6:	9403      	str	r4, [sp, #12]
 8004db8:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8004dba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004dbe:	642b      	str	r3, [r5, #64]	@ 0x40
 8004dc0:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8004dc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dc6:	9303      	str	r3, [sp, #12]
 8004dc8:	9b03      	ldr	r3, [sp, #12]
}
 8004dca:	b00d      	add	sp, #52	@ 0x34
 8004dcc:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004dce:	4d15      	ldr	r5, [pc, #84]	@ (8004e24 <HAL_I2C_MspInit+0x10c>)
 8004dd0:	9404      	str	r4, [sp, #16]
 8004dd2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004dd4:	4815      	ldr	r0, [pc, #84]	@ (8004e2c <HAL_I2C_MspInit+0x114>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004dd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dda:	632b      	str	r3, [r5, #48]	@ 0x30
 8004ddc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004de2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004de4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8004de8:	2312      	movs	r3, #18
 8004dea:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dee:	2303      	movs	r3, #3
 8004df0:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004df2:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004df4:	2304      	movs	r3, #4
 8004df6:	930a      	str	r3, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004df8:	9a04      	ldr	r2, [sp, #16]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004dfa:	f000 fd9d 	bl	8005938 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004dfe:	9405      	str	r4, [sp, #20]
 8004e00:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8004e02:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e06:	642b      	str	r3, [r5, #64]	@ 0x40
 8004e08:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8004e0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e0e:	9305      	str	r3, [sp, #20]
 8004e10:	9b05      	ldr	r3, [sp, #20]
}
 8004e12:	b00d      	add	sp, #52	@ 0x34
 8004e14:	bd30      	pop	{r4, r5, pc}
 8004e16:	bf00      	nop
 8004e18:	40005400 	.word	0x40005400
 8004e1c:	40005800 	.word	0x40005800
 8004e20:	40005c00 	.word	0x40005c00
 8004e24:	40023800 	.word	0x40023800
 8004e28:	40020400 	.word	0x40020400
 8004e2c:	40021c00 	.word	0x40021c00

08004e30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004e30:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI1)
 8004e32:	6802      	ldr	r2, [r0, #0]
 8004e34:	495a      	ldr	r1, [pc, #360]	@ (8004fa0 <HAL_SPI_MspInit+0x170>)
{
 8004e36:	b08f      	sub	sp, #60	@ 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e38:	2300      	movs	r3, #0
  if(hspi->Instance==SPI1)
 8004e3a:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e3c:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8004e40:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 8004e44:	930c      	str	r3, [sp, #48]	@ 0x30
  if(hspi->Instance==SPI1)
 8004e46:	d03a      	beq.n	8004ebe <HAL_SPI_MspInit+0x8e>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI2)
 8004e48:	4956      	ldr	r1, [pc, #344]	@ (8004fa4 <HAL_SPI_MspInit+0x174>)
 8004e4a:	428a      	cmp	r2, r1
 8004e4c:	d05a      	beq.n	8004f04 <HAL_SPI_MspInit+0xd4>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 8004e4e:	4956      	ldr	r1, [pc, #344]	@ (8004fa8 <HAL_SPI_MspInit+0x178>)
 8004e50:	428a      	cmp	r2, r1
 8004e52:	d07a      	beq.n	8004f4a <HAL_SPI_MspInit+0x11a>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
  else if(hspi->Instance==SPI4)
 8004e54:	4955      	ldr	r1, [pc, #340]	@ (8004fac <HAL_SPI_MspInit+0x17c>)
 8004e56:	428a      	cmp	r2, r1
 8004e58:	d001      	beq.n	8004e5e <HAL_SPI_MspInit+0x2e>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8004e5a:	b00f      	add	sp, #60	@ 0x3c
 8004e5c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI4_CLK_ENABLE();
 8004e5e:	4a54      	ldr	r2, [pc, #336]	@ (8004fb0 <HAL_SPI_MspInit+0x180>)
 8004e60:	9306      	str	r3, [sp, #24]
 8004e62:	6c51      	ldr	r1, [r2, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e64:	4853      	ldr	r0, [pc, #332]	@ (8004fb4 <HAL_SPI_MspInit+0x184>)
    __HAL_RCC_SPI4_CLK_ENABLE();
 8004e66:	f441 5100 	orr.w	r1, r1, #8192	@ 0x2000
 8004e6a:	6451      	str	r1, [r2, #68]	@ 0x44
 8004e6c:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004e6e:	f401 5100 	and.w	r1, r1, #8192	@ 0x2000
 8004e72:	9106      	str	r1, [sp, #24]
 8004e74:	9906      	ldr	r1, [sp, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004e76:	9307      	str	r3, [sp, #28]
 8004e78:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004e7a:	f043 0310 	orr.w	r3, r3, #16
 8004e7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e80:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004e82:	f003 0310 	and.w	r3, r3, #16
 8004e86:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e88:	2503      	movs	r5, #3
 8004e8a:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e8c:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8004e8e:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8004e92:	2302      	movs	r3, #2
 8004e94:	e9cd 2308 	strd	r2, r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e98:	e9cd 540b 	strd	r5, r4, [sp, #44]	@ 0x2c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004e9c:	9b07      	ldr	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e9e:	f000 fd4b 	bl	8005938 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004ea2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004eac:	4841      	ldr	r0, [pc, #260]	@ (8004fb4 <HAL_SPI_MspInit+0x184>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8004eae:	940c      	str	r4, [sp, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004eb0:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004eb2:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eb4:	e9cd 350a 	strd	r3, r5, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004eb8:	f000 fd3e 	bl	8005938 <HAL_GPIO_Init>
}
 8004ebc:	e7cd      	b.n	8004e5a <HAL_SPI_MspInit+0x2a>
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004ebe:	4a3c      	ldr	r2, [pc, #240]	@ (8004fb0 <HAL_SPI_MspInit+0x180>)
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	6c50      	ldr	r0, [r2, #68]	@ 0x44
 8004ec4:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000
 8004ec8:	6450      	str	r0, [r2, #68]	@ 0x44
 8004eca:	6c50      	ldr	r0, [r2, #68]	@ 0x44
 8004ecc:	f400 5080 	and.w	r0, r0, #4096	@ 0x1000
 8004ed0:	9000      	str	r0, [sp, #0]
 8004ed2:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ed4:	9301      	str	r3, [sp, #4]
 8004ed6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ed8:	4837      	ldr	r0, [pc, #220]	@ (8004fb8 <HAL_SPI_MspInit+0x188>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004eda:	f043 0301 	orr.w	r3, r3, #1
 8004ede:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ee0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004ee2:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8004f98 <HAL_SPI_MspInit+0x168>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eec:	2203      	movs	r2, #3
 8004eee:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ef0:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004ef2:	ed8d 7b08 	vstr	d7, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ef6:	e9cd 230b 	strd	r2, r3, [sp, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004efa:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004efc:	f000 fd1c 	bl	8005938 <HAL_GPIO_Init>
}
 8004f00:	b00f      	add	sp, #60	@ 0x3c
 8004f02:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004f04:	4a2a      	ldr	r2, [pc, #168]	@ (8004fb0 <HAL_SPI_MspInit+0x180>)
 8004f06:	9302      	str	r3, [sp, #8]
 8004f08:	6c10      	ldr	r0, [r2, #64]	@ 0x40
 8004f0a:	f440 4080 	orr.w	r0, r0, #16384	@ 0x4000
 8004f0e:	6410      	str	r0, [r2, #64]	@ 0x40
 8004f10:	6c10      	ldr	r0, [r2, #64]	@ 0x40
 8004f12:	f400 4080 	and.w	r0, r0, #16384	@ 0x4000
 8004f16:	9002      	str	r0, [sp, #8]
 8004f18:	9802      	ldr	r0, [sp, #8]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004f1a:	9303      	str	r3, [sp, #12]
 8004f1c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004f1e:	4827      	ldr	r0, [pc, #156]	@ (8004fbc <HAL_SPI_MspInit+0x18c>)
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004f20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f26:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f2c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f2e:	2203      	movs	r2, #3
 8004f30:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004f32:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004f34:	240e      	movs	r4, #14
 8004f36:	2502      	movs	r5, #2
 8004f38:	e9cd 4508 	strd	r4, r5, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f3c:	e9cd 230b 	strd	r2, r3, [sp, #44]	@ 0x2c
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004f40:	9c03      	ldr	r4, [sp, #12]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004f42:	f000 fcf9 	bl	8005938 <HAL_GPIO_Init>
}
 8004f46:	b00f      	add	sp, #60	@ 0x3c
 8004f48:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004f4a:	4a19      	ldr	r2, [pc, #100]	@ (8004fb0 <HAL_SPI_MspInit+0x180>)
 8004f4c:	9304      	str	r3, [sp, #16]
 8004f4e:	6c10      	ldr	r0, [r2, #64]	@ 0x40
 8004f50:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8004f54:	6410      	str	r0, [r2, #64]	@ 0x40
 8004f56:	6c10      	ldr	r0, [r2, #64]	@ 0x40
 8004f58:	f400 4000 	and.w	r0, r0, #32768	@ 0x8000
 8004f5c:	9004      	str	r0, [sp, #16]
 8004f5e:	9804      	ldr	r0, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f60:	9305      	str	r3, [sp, #20]
 8004f62:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f64:	4816      	ldr	r0, [pc, #88]	@ (8004fc0 <HAL_SPI_MspInit+0x190>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f66:	f043 0304 	orr.w	r3, r3, #4
 8004f6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f6c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004f6e:	f003 0304 	and.w	r3, r3, #4
 8004f72:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f74:	2203      	movs	r2, #3
 8004f76:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f78:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004f7a:	f44f 54e0 	mov.w	r4, #7168	@ 0x1c00
 8004f7e:	2502      	movs	r5, #2
 8004f80:	e9cd 4508 	strd	r4, r5, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f84:	e9cd 230b 	strd	r2, r3, [sp, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f88:	9c05      	ldr	r4, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f8a:	f000 fcd5 	bl	8005938 <HAL_GPIO_Init>
}
 8004f8e:	b00f      	add	sp, #60	@ 0x3c
 8004f90:	bd30      	pop	{r4, r5, pc}
 8004f92:	bf00      	nop
 8004f94:	f3af 8000 	nop.w
 8004f98:	000000e0 	.word	0x000000e0
 8004f9c:	00000002 	.word	0x00000002
 8004fa0:	40013000 	.word	0x40013000
 8004fa4:	40003800 	.word	0x40003800
 8004fa8:	40003c00 	.word	0x40003c00
 8004fac:	40013400 	.word	0x40013400
 8004fb0:	40023800 	.word	0x40023800
 8004fb4:	40021000 	.word	0x40021000
 8004fb8:	40020000 	.word	0x40020000
 8004fbc:	40022000 	.word	0x40022000
 8004fc0:	40020800 	.word	0x40020800

08004fc4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8004fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8004ff0 <HAL_TIM_Base_MspInit+0x2c>)
 8004fc6:	6802      	ldr	r2, [r0, #0]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d000      	beq.n	8004fce <HAL_TIM_Base_MspInit+0xa>
 8004fcc:	4770      	bx	lr
{
 8004fce:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004fd0:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	9201      	str	r2, [sp, #4]
 8004fd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fda:	f042 0201 	orr.w	r2, r2, #1
 8004fde:	645a      	str	r2, [r3, #68]	@ 0x44
 8004fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	9301      	str	r3, [sp, #4]
 8004fe8:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8004fea:	b002      	add	sp, #8
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	40010000 	.word	0x40010000

08004ff4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004ff4:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 8004ff6:	6803      	ldr	r3, [r0, #0]
 8004ff8:	4a60      	ldr	r2, [pc, #384]	@ (800517c <HAL_UART_MspInit+0x188>)
{
 8004ffa:	b08f      	sub	sp, #60	@ 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ffc:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8004ffe:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005000:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8005004:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
 8005008:	940c      	str	r4, [sp, #48]	@ 0x30
  if(huart->Instance==USART1)
 800500a:	d035      	beq.n	8005078 <HAL_UART_MspInit+0x84>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 800500c:	4a5c      	ldr	r2, [pc, #368]	@ (8005180 <HAL_UART_MspInit+0x18c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d05d      	beq.n	80050ce <HAL_UART_MspInit+0xda>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8005012:	4a5c      	ldr	r2, [pc, #368]	@ (8005184 <HAL_UART_MspInit+0x190>)
 8005014:	4293      	cmp	r3, r2
 8005016:	f000 8085 	beq.w	8005124 <HAL_UART_MspInit+0x130>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 800501a:	4a5b      	ldr	r2, [pc, #364]	@ (8005188 <HAL_UART_MspInit+0x194>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d001      	beq.n	8005024 <HAL_UART_MspInit+0x30>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005020:	b00f      	add	sp, #60	@ 0x3c
 8005022:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART6_CLK_ENABLE();
 8005024:	4b59      	ldr	r3, [pc, #356]	@ (800518c <HAL_UART_MspInit+0x198>)
 8005026:	9406      	str	r4, [sp, #24]
 8005028:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800502a:	4859      	ldr	r0, [pc, #356]	@ (8005190 <HAL_UART_MspInit+0x19c>)
    __HAL_RCC_USART6_CLK_ENABLE();
 800502c:	f042 0220 	orr.w	r2, r2, #32
 8005030:	645a      	str	r2, [r3, #68]	@ 0x44
 8005032:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005034:	f002 0220 	and.w	r2, r2, #32
 8005038:	9206      	str	r2, [sp, #24]
 800503a:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800503c:	9407      	str	r4, [sp, #28]
 800503e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005040:	f042 0204 	orr.w	r2, r2, #4
 8005044:	631a      	str	r2, [r3, #48]	@ 0x30
 8005046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800504e:	22c0      	movs	r2, #192	@ 0xc0
 8005050:	2302      	movs	r3, #2
 8005052:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005056:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005058:	2308      	movs	r3, #8
 800505a:	2203      	movs	r2, #3
 800505c:	e9cd 230b 	strd	r2, r3, [sp, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005060:	9d07      	ldr	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005062:	f000 fc69 	bl	8005938 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8005066:	4622      	mov	r2, r4
 8005068:	4621      	mov	r1, r4
 800506a:	2047      	movs	r0, #71	@ 0x47
 800506c:	f000 fba4 	bl	80057b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8005070:	2047      	movs	r0, #71	@ 0x47
 8005072:	f000 fbdd 	bl	8005830 <HAL_NVIC_EnableIRQ>
}
 8005076:	e7d3      	b.n	8005020 <HAL_UART_MspInit+0x2c>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005078:	4b44      	ldr	r3, [pc, #272]	@ (800518c <HAL_UART_MspInit+0x198>)
 800507a:	9400      	str	r4, [sp, #0]
 800507c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800507e:	4845      	ldr	r0, [pc, #276]	@ (8005194 <HAL_UART_MspInit+0x1a0>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8005080:	f042 0210 	orr.w	r2, r2, #16
 8005084:	645a      	str	r2, [r3, #68]	@ 0x44
 8005086:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005088:	f002 0210 	and.w	r2, r2, #16
 800508c:	9200      	str	r2, [sp, #0]
 800508e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005090:	9401      	str	r4, [sp, #4]
 8005092:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005094:	f042 0202 	orr.w	r2, r2, #2
 8005098:	631a      	str	r2, [r3, #48]	@ 0x30
 800509a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800509c:	f003 0302 	and.w	r3, r3, #2
 80050a0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80050a2:	22c0      	movs	r2, #192	@ 0xc0
 80050a4:	2302      	movs	r3, #2
 80050a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050aa:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050ac:	2307      	movs	r3, #7
 80050ae:	2203      	movs	r2, #3
 80050b0:	e9cd 230b 	strd	r2, r3, [sp, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050b4:	9d01      	ldr	r5, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050b6:	f000 fc3f 	bl	8005938 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80050ba:	4622      	mov	r2, r4
 80050bc:	4621      	mov	r1, r4
 80050be:	2025      	movs	r0, #37	@ 0x25
 80050c0:	f000 fb7a 	bl	80057b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80050c4:	2025      	movs	r0, #37	@ 0x25
 80050c6:	f000 fbb3 	bl	8005830 <HAL_NVIC_EnableIRQ>
}
 80050ca:	b00f      	add	sp, #60	@ 0x3c
 80050cc:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 80050ce:	4b2f      	ldr	r3, [pc, #188]	@ (800518c <HAL_UART_MspInit+0x198>)
 80050d0:	9402      	str	r4, [sp, #8]
 80050d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050d4:	4830      	ldr	r0, [pc, #192]	@ (8005198 <HAL_UART_MspInit+0x1a4>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80050d6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80050da:	641a      	str	r2, [r3, #64]	@ 0x40
 80050dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050de:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80050e2:	9202      	str	r2, [sp, #8]
 80050e4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050e6:	9403      	str	r4, [sp, #12]
 80050e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050ea:	f042 0201 	orr.w	r2, r2, #1
 80050ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80050f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80050f8:	220c      	movs	r2, #12
 80050fa:	2302      	movs	r3, #2
 80050fc:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005100:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005102:	2307      	movs	r3, #7
 8005104:	2203      	movs	r2, #3
 8005106:	e9cd 230b 	strd	r2, r3, [sp, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800510a:	9d03      	ldr	r5, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800510c:	f000 fc14 	bl	8005938 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005110:	4622      	mov	r2, r4
 8005112:	4621      	mov	r1, r4
 8005114:	2026      	movs	r0, #38	@ 0x26
 8005116:	f000 fb4f 	bl	80057b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800511a:	2026      	movs	r0, #38	@ 0x26
 800511c:	f000 fb88 	bl	8005830 <HAL_NVIC_EnableIRQ>
}
 8005120:	b00f      	add	sp, #60	@ 0x3c
 8005122:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 8005124:	4b19      	ldr	r3, [pc, #100]	@ (800518c <HAL_UART_MspInit+0x198>)
 8005126:	9404      	str	r4, [sp, #16]
 8005128:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800512a:	481c      	ldr	r0, [pc, #112]	@ (800519c <HAL_UART_MspInit+0x1a8>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800512c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005130:	641a      	str	r2, [r3, #64]	@ 0x40
 8005132:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005134:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8005138:	9204      	str	r2, [sp, #16]
 800513a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800513c:	9405      	str	r4, [sp, #20]
 800513e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005140:	f042 0208 	orr.w	r2, r2, #8
 8005144:	631a      	str	r2, [r3, #48]	@ 0x30
 8005146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005148:	f003 0308 	and.w	r3, r3, #8
 800514c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800514e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8005152:	2302      	movs	r3, #2
 8005154:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005158:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800515a:	2307      	movs	r3, #7
 800515c:	2203      	movs	r2, #3
 800515e:	e9cd 230b 	strd	r2, r3, [sp, #44]	@ 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005162:	9d05      	ldr	r5, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005164:	f000 fbe8 	bl	8005938 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005168:	4622      	mov	r2, r4
 800516a:	4621      	mov	r1, r4
 800516c:	2027      	movs	r0, #39	@ 0x27
 800516e:	f000 fb23 	bl	80057b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005172:	2027      	movs	r0, #39	@ 0x27
 8005174:	f000 fb5c 	bl	8005830 <HAL_NVIC_EnableIRQ>
}
 8005178:	b00f      	add	sp, #60	@ 0x3c
 800517a:	bd30      	pop	{r4, r5, pc}
 800517c:	40011000 	.word	0x40011000
 8005180:	40004400 	.word	0x40004400
 8005184:	40004800 	.word	0x40004800
 8005188:	40011400 	.word	0x40011400
 800518c:	40023800 	.word	0x40023800
 8005190:	40020800 	.word	0x40020800
 8005194:	40020400 	.word	0x40020400
 8005198:	40020000 	.word	0x40020000
 800519c:	40020c00 	.word	0x40020c00

080051a0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80051a0:	e7fe      	b.n	80051a0 <NMI_Handler>
 80051a2:	bf00      	nop

080051a4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80051a4:	e7fe      	b.n	80051a4 <HardFault_Handler>
 80051a6:	bf00      	nop

080051a8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80051a8:	e7fe      	b.n	80051a8 <MemManage_Handler>
 80051aa:	bf00      	nop

080051ac <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80051ac:	e7fe      	b.n	80051ac <BusFault_Handler>
 80051ae:	bf00      	nop

080051b0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80051b0:	e7fe      	b.n	80051b0 <UsageFault_Handler>
 80051b2:	bf00      	nop

080051b4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop

080051b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop

080051bc <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop

080051c0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80051c0:	f000 b8cc 	b.w	800535c <HAL_IncTick>

080051c4 <CAN1_RX0_IRQHandler>:
void CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80051c4:	4801      	ldr	r0, [pc, #4]	@ (80051cc <CAN1_RX0_IRQHandler+0x8>)
 80051c6:	f000 b987 	b.w	80054d8 <HAL_CAN_IRQHandler>
 80051ca:	bf00      	nop
 80051cc:	200015c4 	.word	0x200015c4

080051d0 <CAN1_RX1_IRQHandler>:
}

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
 80051d0:	4801      	ldr	r0, [pc, #4]	@ (80051d8 <CAN1_RX1_IRQHandler+0x8>)
 80051d2:	f000 b981 	b.w	80054d8 <HAL_CAN_IRQHandler>
 80051d6:	bf00      	nop
 80051d8:	200015c4 	.word	0x200015c4

080051dc <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80051dc:	4801      	ldr	r0, [pc, #4]	@ (80051e4 <USART1_IRQHandler+0x8>)
 80051de:	f002 bdd5 	b.w	8007d8c <HAL_UART_IRQHandler>
 80051e2:	bf00      	nop
 80051e4:	200012b0 	.word	0x200012b0

080051e8 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80051e8:	4801      	ldr	r0, [pc, #4]	@ (80051f0 <USART2_IRQHandler+0x8>)
 80051ea:	f002 bdcf 	b.w	8007d8c <HAL_UART_IRQHandler>
 80051ee:	bf00      	nop
 80051f0:	20001268 	.word	0x20001268

080051f4 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80051f4:	4801      	ldr	r0, [pc, #4]	@ (80051fc <USART3_IRQHandler+0x8>)
 80051f6:	f002 bdc9 	b.w	8007d8c <HAL_UART_IRQHandler>
 80051fa:	bf00      	nop
 80051fc:	20001220 	.word	0x20001220

08005200 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005200:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_01_Pin);
 8005202:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005206:	f000 fcdd 	bl	8005bc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_02_Pin);
 800520a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800520e:	f000 fcd9 	bl	8005bc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_03_Pin);
 8005212:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8005216:	f000 fcd5 	bl	8005bc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_04_Pin);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800521a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_04_Pin);
 800521e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005222:	f000 bccf 	b.w	8005bc4 <HAL_GPIO_EXTI_IRQHandler>
 8005226:	bf00      	nop

08005228 <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005228:	4801      	ldr	r0, [pc, #4]	@ (8005230 <USART6_IRQHandler+0x8>)
 800522a:	f002 bdaf 	b.w	8007d8c <HAL_UART_IRQHandler>
 800522e:	bf00      	nop
 8005230:	200011d8 	.word	0x200011d8

08005234 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005234:	490c      	ldr	r1, [pc, #48]	@ (8005268 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005236:	4a0d      	ldr	r2, [pc, #52]	@ (800526c <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8005238:	680b      	ldr	r3, [r1, #0]
{
 800523a:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800523c:	4c0c      	ldr	r4, [pc, #48]	@ (8005270 <_sbrk+0x3c>)
 800523e:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8005240:	b12b      	cbz	r3, 800524e <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005242:	4418      	add	r0, r3
 8005244:	4290      	cmp	r0, r2
 8005246:	d807      	bhi.n	8005258 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8005248:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 800524a:	4618      	mov	r0, r3
 800524c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800524e:	4b09      	ldr	r3, [pc, #36]	@ (8005274 <_sbrk+0x40>)
 8005250:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8005252:	4418      	add	r0, r3
 8005254:	4290      	cmp	r0, r2
 8005256:	d9f7      	bls.n	8005248 <_sbrk+0x14>
    errno = ENOMEM;
 8005258:	f003 f862 	bl	8008320 <__errno>
 800525c:	230c      	movs	r3, #12
 800525e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8005260:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005264:	4618      	mov	r0, r3
 8005266:	bd10      	pop	{r4, pc}
 8005268:	2000197c 	.word	0x2000197c
 800526c:	20030000 	.word	0x20030000
 8005270:	00000400 	.word	0x00000400
 8005274:	20001ae0 	.word	0x20001ae0

08005278 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005278:	4a03      	ldr	r2, [pc, #12]	@ (8005288 <SystemInit+0x10>)
 800527a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800527e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005282:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005286:	4770      	bx	lr
 8005288:	e000ed00 	.word	0xe000ed00

0800528c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800528c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80052c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005290:	f7ff fff2 	bl	8005278 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005294:	480c      	ldr	r0, [pc, #48]	@ (80052c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005296:	490d      	ldr	r1, [pc, #52]	@ (80052cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005298:	4a0d      	ldr	r2, [pc, #52]	@ (80052d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800529a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800529c:	e002      	b.n	80052a4 <LoopCopyDataInit>

0800529e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800529e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80052a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80052a2:	3304      	adds	r3, #4

080052a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80052a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80052a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80052a8:	d3f9      	bcc.n	800529e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80052aa:	4a0a      	ldr	r2, [pc, #40]	@ (80052d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80052ac:	4c0a      	ldr	r4, [pc, #40]	@ (80052d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80052ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80052b0:	e001      	b.n	80052b6 <LoopFillZerobss>

080052b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80052b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80052b4:	3204      	adds	r2, #4

080052b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80052b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80052b8:	d3fb      	bcc.n	80052b2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80052ba:	f003 f837 	bl	800832c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80052be:	f7fe ffd9 	bl	8004274 <main>
  bx  lr    
 80052c2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80052c4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80052c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80052cc:	20000944 	.word	0x20000944
  ldr r2, =_sidata
 80052d0:	08009940 	.word	0x08009940
  ldr r2, =_sbss
 80052d4:	20000944 	.word	0x20000944
  ldr r4, =_ebss
 80052d8:	20001ae0 	.word	0x20001ae0

080052dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80052dc:	e7fe      	b.n	80052dc <ADC_IRQHandler>
	...

080052e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052e0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80052e2:	4a0e      	ldr	r2, [pc, #56]	@ (800531c <HAL_InitTick+0x3c>)
 80052e4:	4b0e      	ldr	r3, [pc, #56]	@ (8005320 <HAL_InitTick+0x40>)
 80052e6:	7812      	ldrb	r2, [r2, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
{
 80052ea:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80052ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80052f0:	fbb0 f0f2 	udiv	r0, r0, r2
 80052f4:	fbb3 f0f0 	udiv	r0, r3, r0
 80052f8:	f000 faa8 	bl	800584c <HAL_SYSTICK_Config>
 80052fc:	b908      	cbnz	r0, 8005302 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052fe:	2d0f      	cmp	r5, #15
 8005300:	d901      	bls.n	8005306 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8005302:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8005304:	bd38      	pop	{r3, r4, r5, pc}
 8005306:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005308:	4602      	mov	r2, r0
 800530a:	4629      	mov	r1, r5
 800530c:	f04f 30ff 	mov.w	r0, #4294967295
 8005310:	f000 fa52 	bl	80057b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005314:	4b03      	ldr	r3, [pc, #12]	@ (8005324 <HAL_InitTick+0x44>)
 8005316:	4620      	mov	r0, r4
 8005318:	601d      	str	r5, [r3, #0]
}
 800531a:	bd38      	pop	{r3, r4, r5, pc}
 800531c:	200008d4 	.word	0x200008d4
 8005320:	200008d0 	.word	0x200008d0
 8005324:	200008d8 	.word	0x200008d8

08005328 <HAL_Init>:
{
 8005328:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800532a:	4b0b      	ldr	r3, [pc, #44]	@ (8005358 <HAL_Init+0x30>)
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005332:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800533a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005342:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005344:	2003      	movs	r0, #3
 8005346:	f000 fa25 	bl	8005794 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800534a:	200f      	movs	r0, #15
 800534c:	f7ff ffc8 	bl	80052e0 <HAL_InitTick>
  HAL_MspInit();
 8005350:	f7ff fc32 	bl	8004bb8 <HAL_MspInit>
}
 8005354:	2000      	movs	r0, #0
 8005356:	bd08      	pop	{r3, pc}
 8005358:	40023c00 	.word	0x40023c00

0800535c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800535c:	4a03      	ldr	r2, [pc, #12]	@ (800536c <HAL_IncTick+0x10>)
 800535e:	4b04      	ldr	r3, [pc, #16]	@ (8005370 <HAL_IncTick+0x14>)
 8005360:	6811      	ldr	r1, [r2, #0]
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	440b      	add	r3, r1
 8005366:	6013      	str	r3, [r2, #0]
}
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	20001980 	.word	0x20001980
 8005370:	200008d4 	.word	0x200008d4

08005374 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005374:	4b01      	ldr	r3, [pc, #4]	@ (800537c <HAL_GetTick+0x8>)
 8005376:	6818      	ldr	r0, [r3, #0]
}
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	20001980 	.word	0x20001980

08005380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005380:	b538      	push	{r3, r4, r5, lr}
 8005382:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005384:	f7ff fff6 	bl	8005374 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005388:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800538a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800538c:	d002      	beq.n	8005394 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800538e:	4b04      	ldr	r3, [pc, #16]	@ (80053a0 <HAL_Delay+0x20>)
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005394:	f7ff ffee 	bl	8005374 <HAL_GetTick>
 8005398:	1b40      	subs	r0, r0, r5
 800539a:	42a0      	cmp	r0, r4
 800539c:	d3fa      	bcc.n	8005394 <HAL_Delay+0x14>
  {
  }
}
 800539e:	bd38      	pop	{r3, r4, r5, pc}
 80053a0:	200008d4 	.word	0x200008d4

080053a4 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80053a4:	2800      	cmp	r0, #0
 80053a6:	d07b      	beq.n	80054a0 <HAL_CAN_Init+0xfc>
{
 80053a8:	b538      	push	{r3, r4, r5, lr}
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80053aa:	f890 3020 	ldrb.w	r3, [r0, #32]
 80053ae:	4604      	mov	r4, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d072      	beq.n	800549a <HAL_CAN_Init+0xf6>
    HAL_CAN_MspInit(hcan);
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80053b4:	6822      	ldr	r2, [r4, #0]
 80053b6:	6813      	ldr	r3, [r2, #0]
 80053b8:	f043 0301 	orr.w	r3, r3, #1
 80053bc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80053be:	f7ff ffd9 	bl	8005374 <HAL_GetTick>
 80053c2:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80053c4:	e004      	b.n	80053d0 <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80053c6:	f7ff ffd5 	bl	8005374 <HAL_GetTick>
 80053ca:	1b40      	subs	r0, r0, r5
 80053cc:	280a      	cmp	r0, #10
 80053ce:	d85b      	bhi.n	8005488 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80053d0:	6823      	ldr	r3, [r4, #0]
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	07d1      	lsls	r1, r2, #31
 80053d6:	d5f6      	bpl.n	80053c6 <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	f022 0202 	bic.w	r2, r2, #2
 80053de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80053e0:	f7ff ffc8 	bl	8005374 <HAL_GetTick>
 80053e4:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80053e6:	e004      	b.n	80053f2 <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80053e8:	f7ff ffc4 	bl	8005374 <HAL_GetTick>
 80053ec:	1b40      	subs	r0, r0, r5
 80053ee:	280a      	cmp	r0, #10
 80053f0:	d84a      	bhi.n	8005488 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	0792      	lsls	r2, r2, #30
 80053f8:	d4f6      	bmi.n	80053e8 <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80053fa:	7e22      	ldrb	r2, [r4, #24]
 80053fc:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	bf0c      	ite	eq
 8005402:	f042 0280 	orreq.w	r2, r2, #128	@ 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005406:	f022 0280 	bicne.w	r2, r2, #128	@ 0x80
 800540a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800540c:	7e62      	ldrb	r2, [r4, #25]
 800540e:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	bf0c      	ite	eq
 8005414:	f042 0240 	orreq.w	r2, r2, #64	@ 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005418:	f022 0240 	bicne.w	r2, r2, #64	@ 0x40
 800541c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800541e:	7ea2      	ldrb	r2, [r4, #26]
 8005420:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	bf0c      	ite	eq
 8005426:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800542a:	f022 0220 	bicne.w	r2, r2, #32
 800542e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005430:	7ee2      	ldrb	r2, [r4, #27]
 8005432:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	bf0c      	ite	eq
 8005438:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800543c:	f042 0210 	orrne.w	r2, r2, #16
 8005440:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005442:	7f22      	ldrb	r2, [r4, #28]
 8005444:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	bf0c      	ite	eq
 800544a:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800544e:	f022 0208 	bicne.w	r2, r2, #8
 8005452:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005454:	7f62      	ldrb	r2, [r4, #29]
 8005456:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	bf0c      	ite	eq
 800545c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005460:	f022 0204 	bicne.w	r2, r2, #4
 8005464:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005466:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 800546a:	6921      	ldr	r1, [r4, #16]
 800546c:	4302      	orrs	r2, r0
 800546e:	430a      	orrs	r2, r1
 8005470:	6960      	ldr	r0, [r4, #20]
 8005472:	6861      	ldr	r1, [r4, #4]
 8005474:	4302      	orrs	r2, r0
 8005476:	3901      	subs	r1, #1
 8005478:	430a      	orrs	r2, r1
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800547a:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800547c:	2101      	movs	r1, #1
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800547e:	61da      	str	r2, [r3, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005480:	6260      	str	r0, [r4, #36]	@ 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8005482:	f884 1020 	strb.w	r1, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8005486:	bd38      	pop	{r3, r4, r5, pc}
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005488:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800548a:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800548c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005490:	6263      	str	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8005492:	f884 2020 	strb.w	r2, [r4, #32]
    return HAL_ERROR;
 8005496:	2001      	movs	r0, #1
}
 8005498:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 800549a:	f7ff fba9 	bl	8004bf0 <HAL_CAN_MspInit>
 800549e:	e789      	b.n	80053b4 <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 80054a0:	2001      	movs	r0, #1
}
 80054a2:	4770      	bx	lr

080054a4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @brief  Transmission Mailbox 0 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop

080054a8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @brief  Transmission Mailbox 1 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop

080054ac <HAL_CAN_TxMailbox2CompleteCallback>:
  * @brief  Transmission Mailbox 2 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop

080054b0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @brief  Transmission Mailbox 0 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop

080054b4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @brief  Transmission Mailbox 1 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop

080054b8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @brief  Transmission Mailbox 2 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop

080054bc <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @brief  Rx FIFO 0 message pending callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop

080054c0 <HAL_CAN_RxFifo0FullCallback>:
  * @brief  Rx FIFO 0 full callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop

080054c4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @brief  Rx FIFO 1 message pending callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop

080054c8 <HAL_CAN_RxFifo1FullCallback>:
  * @brief  Rx FIFO 1 full callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop

080054cc <HAL_CAN_SleepCallback>:
  * @brief  Sleep callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop

080054d0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @brief  WakeUp from Rx message callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop

080054d4 <HAL_CAN_ErrorCallback>:
  * @brief  Error CAN callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop

080054d8 <HAL_CAN_IRQHandler>:
{
 80054d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80054dc:	6803      	ldr	r3, [r0, #0]
 80054de:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80054e0:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80054e4:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80054e6:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80054ea:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80054ee:	f8d3 9018 	ldr.w	r9, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80054f2:	f014 0601 	ands.w	r6, r4, #1
{
 80054f6:	b083      	sub	sp, #12
 80054f8:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80054fa:	d025      	beq.n	8005548 <HAL_CAN_IRQHandler+0x70>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80054fc:	07fa      	lsls	r2, r7, #31
 80054fe:	f100 80a2 	bmi.w	8005646 <HAL_CAN_IRQHandler+0x16e>
{
 8005502:	f44f 5600 	mov.w	r6, #8192	@ 0x2000
 8005506:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800550a:	2100      	movs	r1, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800550c:	05fb      	lsls	r3, r7, #23
 800550e:	f140 80af 	bpl.w	8005670 <HAL_CAN_IRQHandler+0x198>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005512:	682b      	ldr	r3, [r5, #0]
 8005514:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005518:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800551a:	05ba      	lsls	r2, r7, #22
 800551c:	f100 80a3 	bmi.w	8005666 <HAL_CAN_IRQHandler+0x18e>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005520:	057b      	lsls	r3, r7, #21
 8005522:	d403      	bmi.n	800552c <HAL_CAN_IRQHandler+0x54>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005524:	053e      	lsls	r6, r7, #20
 8005526:	f140 8121 	bpl.w	800576c <HAL_CAN_IRQHandler+0x294>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800552a:	4606      	mov	r6, r0
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800552c:	03f9      	lsls	r1, r7, #15
 800552e:	d50b      	bpl.n	8005548 <HAL_CAN_IRQHandler+0x70>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005530:	682b      	ldr	r3, [r5, #0]
 8005532:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005536:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005538:	03ba      	lsls	r2, r7, #14
 800553a:	f100 80f9 	bmi.w	8005730 <HAL_CAN_IRQHandler+0x258>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800553e:	037b      	lsls	r3, r7, #13
 8005540:	f140 80ea 	bpl.w	8005718 <HAL_CAN_IRQHandler+0x240>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005544:	f446 4600 	orr.w	r6, r6, #32768	@ 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005548:	0721      	lsls	r1, r4, #28
 800554a:	d502      	bpl.n	8005552 <HAL_CAN_IRQHandler+0x7a>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800554c:	f01b 0f10 	tst.w	fp, #16
 8005550:	d173      	bne.n	800563a <HAL_CAN_IRQHandler+0x162>
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005552:	0762      	lsls	r2, r4, #29
 8005554:	d503      	bpl.n	800555e <HAL_CAN_IRQHandler+0x86>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005556:	f01b 0f08 	tst.w	fp, #8
 800555a:	f040 80a8 	bne.w	80056ae <HAL_CAN_IRQHandler+0x1d6>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800555e:	07a3      	lsls	r3, r4, #30
 8005560:	d504      	bpl.n	800556c <HAL_CAN_IRQHandler+0x94>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005562:	682b      	ldr	r3, [r5, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	079f      	lsls	r7, r3, #30
 8005568:	f040 808b 	bne.w	8005682 <HAL_CAN_IRQHandler+0x1aa>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800556c:	0660      	lsls	r0, r4, #25
 800556e:	d502      	bpl.n	8005576 <HAL_CAN_IRQHandler+0x9e>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005570:	f01a 0f10 	tst.w	sl, #16
 8005574:	d15b      	bne.n	800562e <HAL_CAN_IRQHandler+0x156>
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005576:	06a1      	lsls	r1, r4, #26
 8005578:	d502      	bpl.n	8005580 <HAL_CAN_IRQHandler+0xa8>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800557a:	f01a 0f08 	tst.w	sl, #8
 800557e:	d179      	bne.n	8005674 <HAL_CAN_IRQHandler+0x19c>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005580:	06e2      	lsls	r2, r4, #27
 8005582:	d503      	bpl.n	800558c <HAL_CAN_IRQHandler+0xb4>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005584:	682b      	ldr	r3, [r5, #0]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	079b      	lsls	r3, r3, #30
 800558a:	d17e      	bne.n	800568a <HAL_CAN_IRQHandler+0x1b2>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800558c:	03a7      	lsls	r7, r4, #14
 800558e:	d502      	bpl.n	8005596 <HAL_CAN_IRQHandler+0xbe>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005590:	f018 0f10 	tst.w	r8, #16
 8005594:	d17d      	bne.n	8005692 <HAL_CAN_IRQHandler+0x1ba>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005596:	03e0      	lsls	r0, r4, #15
 8005598:	d502      	bpl.n	80055a0 <HAL_CAN_IRQHandler+0xc8>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800559a:	f018 0f08 	tst.w	r8, #8
 800559e:	d17f      	bne.n	80056a0 <HAL_CAN_IRQHandler+0x1c8>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80055a0:	0421      	lsls	r1, r4, #16
 80055a2:	d53f      	bpl.n	8005624 <HAL_CAN_IRQHandler+0x14c>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80055a4:	f018 0f04 	tst.w	r8, #4
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80055a8:	682b      	ldr	r3, [r5, #0]
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80055aa:	d039      	beq.n	8005620 <HAL_CAN_IRQHandler+0x148>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80055ac:	05e2      	lsls	r2, r4, #23
 80055ae:	d504      	bpl.n	80055ba <HAL_CAN_IRQHandler+0xe2>
 80055b0:	f019 0f01 	tst.w	r9, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 80055b4:	bf18      	it	ne
 80055b6:	f046 0601 	orrne.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80055ba:	05a7      	lsls	r7, r4, #22
 80055bc:	d47e      	bmi.n	80056bc <HAL_CAN_IRQHandler+0x1e4>
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80055be:	0561      	lsls	r1, r4, #21
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80055c0:	f404 6200 	and.w	r2, r4, #2048	@ 0x800
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80055c4:	d528      	bpl.n	8005618 <HAL_CAN_IRQHandler+0x140>
 80055c6:	f019 0f04 	tst.w	r9, #4
 80055ca:	d025      	beq.n	8005618 <HAL_CAN_IRQHandler+0x140>
        errorcode |= HAL_CAN_ERROR_BOF;
 80055cc:	f046 0604 	orr.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80055d0:	2a00      	cmp	r2, #0
 80055d2:	f000 8083 	beq.w	80056dc <HAL_CAN_IRQHandler+0x204>
 80055d6:	f019 0970 	ands.w	r9, r9, #112	@ 0x70
 80055da:	d07f      	beq.n	80056dc <HAL_CAN_IRQHandler+0x204>
        switch (esrflags & CAN_ESR_LEC)
 80055dc:	f1b9 0f40 	cmp.w	r9, #64	@ 0x40
 80055e0:	f000 80cf 	beq.w	8005782 <HAL_CAN_IRQHandler+0x2aa>
 80055e4:	d87d      	bhi.n	80056e2 <HAL_CAN_IRQHandler+0x20a>
 80055e6:	f1b9 0f20 	cmp.w	r9, #32
 80055ea:	f000 80b3 	beq.w	8005754 <HAL_CAN_IRQHandler+0x27c>
 80055ee:	f1b9 0f30 	cmp.w	r9, #48	@ 0x30
 80055f2:	f040 8085 	bne.w	8005700 <HAL_CAN_IRQHandler+0x228>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80055f6:	699a      	ldr	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80055f8:	2104      	movs	r1, #4
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80055fa:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80055fe:	619a      	str	r2, [r3, #24]
            errorcode |= HAL_CAN_ERROR_ACK;
 8005600:	f046 0620 	orr.w	r6, r6, #32
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005604:	6059      	str	r1, [r3, #4]
    hcan->ErrorCode |= errorcode;
 8005606:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8005608:	4333      	orrs	r3, r6
    HAL_CAN_ErrorCallback(hcan);
 800560a:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 800560c:	626b      	str	r3, [r5, #36]	@ 0x24
    HAL_CAN_ErrorCallback(hcan);
 800560e:	f7ff ff61 	bl	80054d4 <HAL_CAN_ErrorCallback>
}
 8005612:	b003      	add	sp, #12
 8005614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005618:	b112      	cbz	r2, 8005620 <HAL_CAN_IRQHandler+0x148>
 800561a:	f019 0970 	ands.w	r9, r9, #112	@ 0x70
 800561e:	d1dd      	bne.n	80055dc <HAL_CAN_IRQHandler+0x104>
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005620:	2204      	movs	r2, #4
 8005622:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005624:	2e00      	cmp	r6, #0
 8005626:	d1ee      	bne.n	8005606 <HAL_CAN_IRQHandler+0x12e>
}
 8005628:	b003      	add	sp, #12
 800562a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800562e:	682b      	ldr	r3, [r5, #0]
 8005630:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005632:	f446 6680 	orr.w	r6, r6, #1024	@ 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005636:	611a      	str	r2, [r3, #16]
 8005638:	e79d      	b.n	8005576 <HAL_CAN_IRQHandler+0x9e>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800563a:	682b      	ldr	r3, [r5, #0]
 800563c:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800563e:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005642:	60da      	str	r2, [r3, #12]
 8005644:	e785      	b.n	8005552 <HAL_CAN_IRQHandler+0x7a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005646:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005648:	07be      	lsls	r6, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800564a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800564c:	d443      	bmi.n	80056d6 <HAL_CAN_IRQHandler+0x1fe>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800564e:	0779      	lsls	r1, r7, #29
 8005650:	d467      	bmi.n	8005722 <HAL_CAN_IRQHandler+0x24a>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005652:	073a      	lsls	r2, r7, #28
 8005654:	f140 8087 	bpl.w	8005766 <HAL_CAN_IRQHandler+0x28e>
 8005658:	f44f 5640 	mov.w	r6, #12288	@ 0x3000
 800565c:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005660:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005664:	e752      	b.n	800550c <HAL_CAN_IRQHandler+0x34>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005666:	4628      	mov	r0, r5
 8005668:	9101      	str	r1, [sp, #4]
 800566a:	f7ff ff1d 	bl	80054a8 <HAL_CAN_TxMailbox1CompleteCallback>
 800566e:	9901      	ldr	r1, [sp, #4]
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005670:	460e      	mov	r6, r1
 8005672:	e75b      	b.n	800552c <HAL_CAN_IRQHandler+0x54>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005674:	682b      	ldr	r3, [r5, #0]
 8005676:	2208      	movs	r2, #8
 8005678:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 800567a:	4628      	mov	r0, r5
 800567c:	f7ff ff24 	bl	80054c8 <HAL_CAN_RxFifo1FullCallback>
 8005680:	e77e      	b.n	8005580 <HAL_CAN_IRQHandler+0xa8>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005682:	4628      	mov	r0, r5
 8005684:	f7ff ff1a 	bl	80054bc <HAL_CAN_RxFifo0MsgPendingCallback>
 8005688:	e770      	b.n	800556c <HAL_CAN_IRQHandler+0x94>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800568a:	4628      	mov	r0, r5
 800568c:	f7ff ff1a 	bl	80054c4 <HAL_CAN_RxFifo1MsgPendingCallback>
 8005690:	e77c      	b.n	800558c <HAL_CAN_IRQHandler+0xb4>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005692:	682b      	ldr	r3, [r5, #0]
 8005694:	2210      	movs	r2, #16
 8005696:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8005698:	4628      	mov	r0, r5
 800569a:	f7ff ff17 	bl	80054cc <HAL_CAN_SleepCallback>
 800569e:	e77a      	b.n	8005596 <HAL_CAN_IRQHandler+0xbe>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80056a0:	682b      	ldr	r3, [r5, #0]
 80056a2:	2208      	movs	r2, #8
 80056a4:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80056a6:	4628      	mov	r0, r5
 80056a8:	f7ff ff12 	bl	80054d0 <HAL_CAN_WakeUpFromRxMsgCallback>
 80056ac:	e778      	b.n	80055a0 <HAL_CAN_IRQHandler+0xc8>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80056ae:	682b      	ldr	r3, [r5, #0]
 80056b0:	2208      	movs	r2, #8
 80056b2:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 80056b4:	4628      	mov	r0, r5
 80056b6:	f7ff ff03 	bl	80054c0 <HAL_CAN_RxFifo0FullCallback>
 80056ba:	e750      	b.n	800555e <HAL_CAN_IRQHandler+0x86>
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80056bc:	f019 0f02 	tst.w	r9, #2
 80056c0:	f43f af7d 	beq.w	80055be <HAL_CAN_IRQHandler+0xe6>
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80056c4:	0560      	lsls	r0, r4, #21
        errorcode |= HAL_CAN_ERROR_EPV;
 80056c6:	f046 0602 	orr.w	r6, r6, #2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80056ca:	f404 6200 	and.w	r2, r4, #2048	@ 0x800
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80056ce:	f53f af7a 	bmi.w	80055c6 <HAL_CAN_IRQHandler+0xee>
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80056d2:	b11a      	cbz	r2, 80056dc <HAL_CAN_IRQHandler+0x204>
 80056d4:	e77f      	b.n	80055d6 <HAL_CAN_IRQHandler+0xfe>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80056d6:	f7ff fee5 	bl	80054a4 <HAL_CAN_TxMailbox0CompleteCallback>
 80056da:	e712      	b.n	8005502 <HAL_CAN_IRQHandler+0x2a>
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80056dc:	2204      	movs	r2, #4
 80056de:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 80056e0:	e791      	b.n	8005606 <HAL_CAN_IRQHandler+0x12e>
        switch (esrflags & CAN_ESR_LEC)
 80056e2:	f1b9 0f50 	cmp.w	r9, #80	@ 0x50
 80056e6:	d027      	beq.n	8005738 <HAL_CAN_IRQHandler+0x260>
 80056e8:	f1b9 0f60 	cmp.w	r9, #96	@ 0x60
 80056ec:	d12d      	bne.n	800574a <HAL_CAN_IRQHandler+0x272>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80056ee:	699a      	ldr	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80056f0:	2104      	movs	r1, #4
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80056f2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80056f6:	619a      	str	r2, [r3, #24]
            errorcode |= HAL_CAN_ERROR_CRC;
 80056f8:	f446 7680 	orr.w	r6, r6, #256	@ 0x100
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80056fc:	6059      	str	r1, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 80056fe:	e782      	b.n	8005606 <HAL_CAN_IRQHandler+0x12e>
        switch (esrflags & CAN_ESR_LEC)
 8005700:	f1b9 0f10 	cmp.w	r9, #16
 8005704:	d121      	bne.n	800574a <HAL_CAN_IRQHandler+0x272>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005706:	699a      	ldr	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005708:	2104      	movs	r1, #4
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800570a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800570e:	619a      	str	r2, [r3, #24]
            errorcode |= HAL_CAN_ERROR_STF;
 8005710:	f046 0608 	orr.w	r6, r6, #8
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005714:	6059      	str	r1, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005716:	e776      	b.n	8005606 <HAL_CAN_IRQHandler+0x12e>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005718:	0338      	lsls	r0, r7, #12
 800571a:	d52e      	bpl.n	800577a <HAL_CAN_IRQHandler+0x2a2>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800571c:	f446 3680 	orr.w	r6, r6, #65536	@ 0x10000
 8005720:	e712      	b.n	8005548 <HAL_CAN_IRQHandler+0x70>
 8005722:	f44f 5620 	mov.w	r6, #10240	@ 0x2800
 8005726:	f44f 4090 	mov.w	r0, #18432	@ 0x4800
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800572a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800572e:	e6ed      	b.n	800550c <HAL_CAN_IRQHandler+0x34>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005730:	4628      	mov	r0, r5
 8005732:	f7ff febb 	bl	80054ac <HAL_CAN_TxMailbox2CompleteCallback>
 8005736:	e707      	b.n	8005548 <HAL_CAN_IRQHandler+0x70>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005738:	699a      	ldr	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800573a:	2104      	movs	r1, #4
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800573c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005740:	619a      	str	r2, [r3, #24]
            errorcode |= HAL_CAN_ERROR_BD;
 8005742:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005746:	6059      	str	r1, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005748:	e75d      	b.n	8005606 <HAL_CAN_IRQHandler+0x12e>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800574a:	699a      	ldr	r2, [r3, #24]
 800574c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005750:	619a      	str	r2, [r3, #24]
 8005752:	e765      	b.n	8005620 <HAL_CAN_IRQHandler+0x148>
 8005754:	699a      	ldr	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005756:	2104      	movs	r1, #4
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005758:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800575c:	619a      	str	r2, [r3, #24]
            errorcode |= HAL_CAN_ERROR_FOR;
 800575e:	f046 0610 	orr.w	r6, r6, #16
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005762:	6059      	str	r1, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005764:	e74f      	b.n	8005606 <HAL_CAN_IRQHandler+0x12e>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005766:	f7ff fea3 	bl	80054b0 <HAL_CAN_TxMailbox0AbortCallback>
 800576a:	e6ca      	b.n	8005502 <HAL_CAN_IRQHandler+0x2a>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800576c:	4628      	mov	r0, r5
 800576e:	9101      	str	r1, [sp, #4]
 8005770:	f7ff fea0 	bl	80054b4 <HAL_CAN_TxMailbox1AbortCallback>
 8005774:	9901      	ldr	r1, [sp, #4]
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005776:	460e      	mov	r6, r1
 8005778:	e6d8      	b.n	800552c <HAL_CAN_IRQHandler+0x54>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800577a:	4628      	mov	r0, r5
 800577c:	f7ff fe9c 	bl	80054b8 <HAL_CAN_TxMailbox2AbortCallback>
 8005780:	e6e2      	b.n	8005548 <HAL_CAN_IRQHandler+0x70>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005782:	699a      	ldr	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005784:	2104      	movs	r1, #4
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005786:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800578a:	619a      	str	r2, [r3, #24]
            errorcode |= HAL_CAN_ERROR_BR;
 800578c:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005790:	6059      	str	r1, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005792:	e738      	b.n	8005606 <HAL_CAN_IRQHandler+0x12e>

08005794 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005794:	4907      	ldr	r1, [pc, #28]	@ (80057b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8005796:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005798:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800579a:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800579e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057a2:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80057a4:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80057a6:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80057aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80057ae:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	e000ed00 	.word	0xe000ed00

080057b8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005828 <HAL_NVIC_SetPriority+0x70>)
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80057c0:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057c2:	f1c3 0e07 	rsb	lr, r3, #7
 80057c6:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057ca:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057ce:	bf28      	it	cs
 80057d0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057d4:	f1bc 0f06 	cmp.w	ip, #6
 80057d8:	d91c      	bls.n	8005814 <HAL_NVIC_SetPriority+0x5c>
 80057da:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057de:	f04f 33ff 	mov.w	r3, #4294967295
 80057e2:	fa03 f30c 	lsl.w	r3, r3, ip
 80057e6:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057ea:	f04f 33ff 	mov.w	r3, #4294967295
 80057ee:	fa03 f30e 	lsl.w	r3, r3, lr
 80057f2:	ea21 0303 	bic.w	r3, r1, r3
 80057f6:	fa03 f30c 	lsl.w	r3, r3, ip
 80057fa:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057fc:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 80057fe:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005800:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8005802:	db0a      	blt.n	800581a <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005804:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8005808:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800580c:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005810:	f85d fb04 	ldr.w	pc, [sp], #4
 8005814:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005816:	4694      	mov	ip, r2
 8005818:	e7e7      	b.n	80057ea <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800581a:	4a04      	ldr	r2, [pc, #16]	@ (800582c <HAL_NVIC_SetPriority+0x74>)
 800581c:	f000 000f 	and.w	r0, r0, #15
 8005820:	4402      	add	r2, r0
 8005822:	7613      	strb	r3, [r2, #24]
 8005824:	f85d fb04 	ldr.w	pc, [sp], #4
 8005828:	e000ed00 	.word	0xe000ed00
 800582c:	e000ecfc 	.word	0xe000ecfc

08005830 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005830:	2800      	cmp	r0, #0
 8005832:	db07      	blt.n	8005844 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005834:	4a04      	ldr	r2, [pc, #16]	@ (8005848 <HAL_NVIC_EnableIRQ+0x18>)
 8005836:	0941      	lsrs	r1, r0, #5
 8005838:	2301      	movs	r3, #1
 800583a:	f000 001f 	and.w	r0, r0, #31
 800583e:	4083      	lsls	r3, r0
 8005840:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	e000e100 	.word	0xe000e100

0800584c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800584c:	3801      	subs	r0, #1
 800584e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8005852:	d301      	bcc.n	8005858 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005854:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8005856:	4770      	bx	lr
{
 8005858:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800585a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800585e:	4c07      	ldr	r4, [pc, #28]	@ (800587c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005860:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005862:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8005866:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800586a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800586c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800586e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005870:	619a      	str	r2, [r3, #24]
}
 8005872:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005876:	6119      	str	r1, [r3, #16]
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	e000ed00 	.word	0xe000ed00

08005880 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005880:	b570      	push	{r4, r5, r6, lr}
 8005882:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005884:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8005886:	f7ff fd75 	bl	8005374 <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800588a:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 800588e:	2b02      	cmp	r3, #2
 8005890:	d006      	beq.n	80058a0 <HAL_DMA_Abort+0x20>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005892:	2380      	movs	r3, #128	@ 0x80
 8005894:	6563      	str	r3, [r4, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005896:	2300      	movs	r3, #0
 8005898:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    
    return HAL_ERROR;
 800589c:	2001      	movs	r0, #1
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }
  return HAL_OK;
}
 800589e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058a0:	6823      	ldr	r3, [r4, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	f022 0216 	bic.w	r2, r2, #22
 80058a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80058aa:	695a      	ldr	r2, [r3, #20]
 80058ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80058b0:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058b2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80058b4:	4605      	mov	r5, r0
 80058b6:	b342      	cbz	r2, 800590a <HAL_DMA_Abort+0x8a>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	f022 0208 	bic.w	r2, r2, #8
 80058be:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	f022 0201 	bic.w	r2, r2, #1
 80058c6:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058c8:	e005      	b.n	80058d6 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058ca:	f7ff fd53 	bl	8005374 <HAL_GetTick>
 80058ce:	1b43      	subs	r3, r0, r5
 80058d0:	2b05      	cmp	r3, #5
 80058d2:	d810      	bhi.n	80058f6 <HAL_DMA_Abort+0x76>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058d4:	6823      	ldr	r3, [r4, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f013 0301 	ands.w	r3, r3, #1
 80058dc:	d1f5      	bne.n	80058ca <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058de:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 80058e0:	223f      	movs	r2, #63	@ 0x3f
 80058e2:	408a      	lsls	r2, r1
  return HAL_OK;
 80058e4:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 80058e6:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 80058e8:	2300      	movs	r3, #0
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058ea:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 80058ec:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 80058f0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 80058f4:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058f8:	2220      	movs	r2, #32
 80058fa:	6562      	str	r2, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 80058fc:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80058fe:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8005902:	2300      	movs	r3, #0
 8005904:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8005908:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800590a:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800590c:	2a00      	cmp	r2, #0
 800590e:	d1d3      	bne.n	80058b8 <HAL_DMA_Abort+0x38>
 8005910:	e7d6      	b.n	80058c0 <HAL_DMA_Abort+0x40>
 8005912:	bf00      	nop

08005914 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005914:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8005918:	2b02      	cmp	r3, #2
 800591a:	d003      	beq.n	8005924 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800591c:	2380      	movs	r3, #128	@ 0x80
 800591e:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8005920:	2001      	movs	r0, #1
 8005922:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005924:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8005926:	2305      	movs	r3, #5
 8005928:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 800592c:	6813      	ldr	r3, [r2, #0]
 800592e:	f023 0301 	bic.w	r3, r3, #1
  }

  return HAL_OK;
 8005932:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8005934:	6013      	str	r3, [r2, #0]
}
 8005936:	4770      	bx	lr

08005938 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800593c:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800593e:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005940:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005b88 <HAL_GPIO_Init+0x250>
{
 8005944:	b085      	sub	sp, #20
    ioposition = 0x01U << position;
 8005946:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800594a:	4689      	mov	r9, r1
 800594c:	e003      	b.n	8005956 <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 800594e:	3301      	adds	r3, #1
 8005950:	2b10      	cmp	r3, #16
 8005952:	f000 809c 	beq.w	8005a8e <HAL_GPIO_Init+0x156>
    ioposition = 0x01U << position;
 8005956:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800595a:	ea02 0804 	and.w	r8, r2, r4
    if(iocurrent == ioposition)
 800595e:	43a2      	bics	r2, r4
 8005960:	d1f5      	bne.n	800594e <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005962:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005966:	f001 0203 	and.w	r2, r1, #3
 800596a:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800596e:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005970:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005972:	fa05 f50c 	lsl.w	r5, r5, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005976:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005978:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800597c:	f240 808a 	bls.w	8005a94 <HAL_GPIO_Init+0x15c>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005980:	2a03      	cmp	r2, #3
 8005982:	f040 80c0 	bne.w	8005b06 <HAL_GPIO_Init+0x1ce>
      temp = GPIOx->MODER;
 8005986:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005988:	fa02 f20c 	lsl.w	r2, r2, ip
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800598c:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800598e:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005990:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8005994:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005996:	d0da      	beq.n	800594e <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005998:	2200      	movs	r2, #0
 800599a:	9203      	str	r2, [sp, #12]
 800599c:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 80059a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059a4:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 80059a8:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 80059ac:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80059b0:	9203      	str	r2, [sp, #12]
 80059b2:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80059b4:	f023 0203 	bic.w	r2, r3, #3
 80059b8:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80059bc:	f003 0703 	and.w	r7, r3, #3
 80059c0:	260f      	movs	r6, #15
 80059c2:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 80059c6:	00bf      	lsls	r7, r7, #2
 80059c8:	fa06 fc07 	lsl.w	ip, r6, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80059cc:	4e6b      	ldr	r6, [pc, #428]	@ (8005b7c <HAL_GPIO_Init+0x244>)
        temp = SYSCFG->EXTICR[position >> 2U];
 80059ce:	6895      	ldr	r5, [r2, #8]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80059d0:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80059d2:	ea25 050c 	bic.w	r5, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80059d6:	d031      	beq.n	8005a3c <HAL_GPIO_Init+0x104>
 80059d8:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80059dc:	42b0      	cmp	r0, r6
 80059de:	f000 809d 	beq.w	8005b1c <HAL_GPIO_Init+0x1e4>
 80059e2:	4e67      	ldr	r6, [pc, #412]	@ (8005b80 <HAL_GPIO_Init+0x248>)
 80059e4:	42b0      	cmp	r0, r6
 80059e6:	f000 809f 	beq.w	8005b28 <HAL_GPIO_Init+0x1f0>
 80059ea:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 8005b8c <HAL_GPIO_Init+0x254>
 80059ee:	4560      	cmp	r0, ip
 80059f0:	f000 80a0 	beq.w	8005b34 <HAL_GPIO_Init+0x1fc>
 80059f4:	f8df c198 	ldr.w	ip, [pc, #408]	@ 8005b90 <HAL_GPIO_Init+0x258>
 80059f8:	4560      	cmp	r0, ip
 80059fa:	f000 80a1 	beq.w	8005b40 <HAL_GPIO_Init+0x208>
 80059fe:	f8df c194 	ldr.w	ip, [pc, #404]	@ 8005b94 <HAL_GPIO_Init+0x25c>
 8005a02:	4560      	cmp	r0, ip
 8005a04:	f000 80a8 	beq.w	8005b58 <HAL_GPIO_Init+0x220>
 8005a08:	f8df c18c 	ldr.w	ip, [pc, #396]	@ 8005b98 <HAL_GPIO_Init+0x260>
 8005a0c:	4560      	cmp	r0, ip
 8005a0e:	f000 80a9 	beq.w	8005b64 <HAL_GPIO_Init+0x22c>
 8005a12:	f8df c188 	ldr.w	ip, [pc, #392]	@ 8005b9c <HAL_GPIO_Init+0x264>
 8005a16:	4560      	cmp	r0, ip
 8005a18:	f000 8098 	beq.w	8005b4c <HAL_GPIO_Init+0x214>
 8005a1c:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8005ba0 <HAL_GPIO_Init+0x268>
 8005a20:	4560      	cmp	r0, ip
 8005a22:	f000 80a5 	beq.w	8005b70 <HAL_GPIO_Init+0x238>
 8005a26:	f8df c17c 	ldr.w	ip, [pc, #380]	@ 8005ba4 <HAL_GPIO_Init+0x26c>
 8005a2a:	4560      	cmp	r0, ip
 8005a2c:	bf0c      	ite	eq
 8005a2e:	f04f 0c09 	moveq.w	ip, #9
 8005a32:	f04f 0c0a 	movne.w	ip, #10
 8005a36:	fa0c f707 	lsl.w	r7, ip, r7
 8005a3a:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a3c:	6095      	str	r5, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a3e:	4a51      	ldr	r2, [pc, #324]	@ (8005b84 <HAL_GPIO_Init+0x24c>)
 8005a40:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a42:	02ce      	lsls	r6, r1, #11
        temp &= ~((uint32_t)iocurrent);
 8005a44:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8005a48:	4e4e      	ldr	r6, [pc, #312]	@ (8005b84 <HAL_GPIO_Init+0x24c>)
        temp &= ~((uint32_t)iocurrent);
 8005a4a:	bf54      	ite	pl
 8005a4c:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8005a4e:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR = temp;
 8005a52:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8005a54:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8005a56:	4e4b      	ldr	r6, [pc, #300]	@ (8005b84 <HAL_GPIO_Init+0x24c>)
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a58:	028f      	lsls	r7, r1, #10
        temp &= ~((uint32_t)iocurrent);
 8005a5a:	bf54      	ite	pl
 8005a5c:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8005a5e:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 8005a62:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 8005a64:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a66:	038e      	lsls	r6, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8005a68:	4e46      	ldr	r6, [pc, #280]	@ (8005b84 <HAL_GPIO_Init+0x24c>)
        temp &= ~((uint32_t)iocurrent);
 8005a6a:	bf54      	ite	pl
 8005a6c:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8005a6e:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 8005a72:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a74:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a76:	03c9      	lsls	r1, r1, #15
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a78:	f103 0301 	add.w	r3, r3, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8005a7c:	4941      	ldr	r1, [pc, #260]	@ (8005b84 <HAL_GPIO_Init+0x24c>)
        temp &= ~((uint32_t)iocurrent);
 8005a7e:	bf54      	ite	pl
 8005a80:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8005a82:	ea48 0202 	orrmi.w	r2, r8, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a86:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 8005a88:	600a      	str	r2, [r1, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a8a:	f47f af64 	bne.w	8005956 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8005a8e:	b005      	add	sp, #20
 8005a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8005a94:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005a96:	ea07 0e05 	and.w	lr, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a9a:	f8d9 700c 	ldr.w	r7, [r9, #12]
 8005a9e:	fa07 f70c 	lsl.w	r7, r7, ip
 8005aa2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8005aa6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8005aa8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005aaa:	ea27 0e08 	bic.w	lr, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005aae:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8005ab2:	409f      	lsls	r7, r3
 8005ab4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8005ab8:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8005aba:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005abc:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ac0:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8005ac4:	fa07 f70c 	lsl.w	r7, r7, ip
 8005ac8:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005acc:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8005ace:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ad0:	f47f af59 	bne.w	8005986 <HAL_GPIO_Init+0x4e>
        temp = GPIOx->AFR[position >> 3U];
 8005ad4:	08df      	lsrs	r7, r3, #3
 8005ad6:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8005ada:	9701      	str	r7, [sp, #4]
 8005adc:	6a3e      	ldr	r6, [r7, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ade:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 8005ae2:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005ae4:	f003 0e07 	and.w	lr, r3, #7
 8005ae8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8005aec:	260f      	movs	r6, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005aee:	fa07 f70e 	lsl.w	r7, r7, lr
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005af2:	fa06 fe0e 	lsl.w	lr, r6, lr
 8005af6:	9e00      	ldr	r6, [sp, #0]
 8005af8:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 8005afc:	9e01      	ldr	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005afe:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8005b02:	6237      	str	r7, [r6, #32]
 8005b04:	e73f      	b.n	8005986 <HAL_GPIO_Init+0x4e>
        temp = GPIOx->PUPDR;
 8005b06:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005b08:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b0c:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8005b10:	fa07 f70c 	lsl.w	r7, r7, ip
 8005b14:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8005b18:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b1a:	e734      	b.n	8005986 <HAL_GPIO_Init+0x4e>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005b1c:	f04f 0c01 	mov.w	ip, #1
 8005b20:	fa0c f707 	lsl.w	r7, ip, r7
 8005b24:	433d      	orrs	r5, r7
 8005b26:	e789      	b.n	8005a3c <HAL_GPIO_Init+0x104>
 8005b28:	f04f 0c02 	mov.w	ip, #2
 8005b2c:	fa0c f707 	lsl.w	r7, ip, r7
 8005b30:	433d      	orrs	r5, r7
 8005b32:	e783      	b.n	8005a3c <HAL_GPIO_Init+0x104>
 8005b34:	f04f 0c03 	mov.w	ip, #3
 8005b38:	fa0c f707 	lsl.w	r7, ip, r7
 8005b3c:	433d      	orrs	r5, r7
 8005b3e:	e77d      	b.n	8005a3c <HAL_GPIO_Init+0x104>
 8005b40:	f04f 0c04 	mov.w	ip, #4
 8005b44:	fa0c f707 	lsl.w	r7, ip, r7
 8005b48:	433d      	orrs	r5, r7
 8005b4a:	e777      	b.n	8005a3c <HAL_GPIO_Init+0x104>
 8005b4c:	f04f 0c07 	mov.w	ip, #7
 8005b50:	fa0c f707 	lsl.w	r7, ip, r7
 8005b54:	433d      	orrs	r5, r7
 8005b56:	e771      	b.n	8005a3c <HAL_GPIO_Init+0x104>
 8005b58:	f04f 0c05 	mov.w	ip, #5
 8005b5c:	fa0c f707 	lsl.w	r7, ip, r7
 8005b60:	433d      	orrs	r5, r7
 8005b62:	e76b      	b.n	8005a3c <HAL_GPIO_Init+0x104>
 8005b64:	f04f 0c06 	mov.w	ip, #6
 8005b68:	fa0c f707 	lsl.w	r7, ip, r7
 8005b6c:	433d      	orrs	r5, r7
 8005b6e:	e765      	b.n	8005a3c <HAL_GPIO_Init+0x104>
 8005b70:	f04f 0c08 	mov.w	ip, #8
 8005b74:	fa0c f707 	lsl.w	r7, ip, r7
 8005b78:	433d      	orrs	r5, r7
 8005b7a:	e75f      	b.n	8005a3c <HAL_GPIO_Init+0x104>
 8005b7c:	40020000 	.word	0x40020000
 8005b80:	40020800 	.word	0x40020800
 8005b84:	40013c00 	.word	0x40013c00
 8005b88:	40023800 	.word	0x40023800
 8005b8c:	40020c00 	.word	0x40020c00
 8005b90:	40021000 	.word	0x40021000
 8005b94:	40021400 	.word	0x40021400
 8005b98:	40021800 	.word	0x40021800
 8005b9c:	40021c00 	.word	0x40021c00
 8005ba0:	40022000 	.word	0x40022000
 8005ba4:	40022400 	.word	0x40022400

08005ba8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ba8:	b902      	cbnz	r2, 8005bac <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005baa:	0409      	lsls	r1, r1, #16
 8005bac:	6181      	str	r1, [r0, #24]
  }
}
 8005bae:	4770      	bx	lr

08005bb0 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005bb0:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005bb2:	ea01 0203 	and.w	r2, r1, r3
 8005bb6:	ea21 0103 	bic.w	r1, r1, r3
 8005bba:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005bbe:	6181      	str	r1, [r0, #24]
}
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop

08005bc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005bc4:	4a04      	ldr	r2, [pc, #16]	@ (8005bd8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8005bc6:	6951      	ldr	r1, [r2, #20]
 8005bc8:	4201      	tst	r1, r0
 8005bca:	d100      	bne.n	8005bce <HAL_GPIO_EXTI_IRQHandler+0xa>
 8005bcc:	4770      	bx	lr
{
 8005bce:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005bd0:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005bd2:	f7fe ffbf 	bl	8004b54 <HAL_GPIO_EXTI_Callback>
  }
}
 8005bd6:	bd08      	pop	{r3, pc}
 8005bd8:	40013c00 	.word	0x40013c00

08005bdc <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>:
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8005bdc:	b570      	push	{r4, r5, r6, lr}
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005bde:	6803      	ldr	r3, [r0, #0]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8005be0:	4604      	mov	r4, r0
 8005be2:	1c48      	adds	r0, r1, #1
 8005be4:	d003      	beq.n	8005bee <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x12>
 8005be6:	e01e      	b.n	8005c26 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x4a>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005be8:	695a      	ldr	r2, [r3, #20]
 8005bea:	0551      	lsls	r1, r2, #21
 8005bec:	d404      	bmi.n	8005bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x1c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005bee:	695a      	ldr	r2, [r3, #20]
 8005bf0:	0790      	lsls	r0, r2, #30
 8005bf2:	d5f9      	bpl.n	8005be8 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0xc>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8005bf4:	2000      	movs	r0, #0
}
 8005bf6:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bfe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c00:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c02:	f46f 6080 	mvn.w	r0, #1024	@ 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c06:	2220      	movs	r2, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c08:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c0a:	6321      	str	r1, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c0c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c10:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005c16:	f043 0304 	orr.w	r3, r3, #4
 8005c1a:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8005c22:	2001      	movs	r0, #1
}
 8005c24:	bd70      	pop	{r4, r5, r6, pc}
 8005c26:	460d      	mov	r5, r1
 8005c28:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c2a:	695a      	ldr	r2, [r3, #20]
 8005c2c:	0792      	lsls	r2, r2, #30
 8005c2e:	d4e1      	bmi.n	8005bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x18>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c30:	695a      	ldr	r2, [r3, #20]
 8005c32:	0551      	lsls	r1, r2, #21
 8005c34:	d4e0      	bmi.n	8005bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c36:	f7ff fb9d 	bl	8005374 <HAL_GetTick>
 8005c3a:	1b80      	subs	r0, r0, r6
 8005c3c:	4285      	cmp	r5, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005c3e:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c40:	d301      	bcc.n	8005c46 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x6a>
 8005c42:	2d00      	cmp	r5, #0
 8005c44:	d1f1      	bne.n	8005c2a <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x4e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005c46:	695a      	ldr	r2, [r3, #20]
 8005c48:	0792      	lsls	r2, r2, #30
 8005c4a:	d4ee      	bmi.n	8005c2a <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x4e>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005c4c:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8005c4e:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005c50:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005c52:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c56:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c5a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	6423      	str	r3, [r4, #64]	@ 0x40
          return HAL_ERROR;
 8005c60:	e7dc      	b.n	8005c1c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x40>
 8005c62:	bf00      	nop

08005c64 <I2C_RequestMemoryWrite>:
{
 8005c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c68:	6805      	ldr	r5, [r0, #0]
{
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	469a      	mov	sl, r3
 8005c6e:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c72:	682b      	ldr	r3, [r5, #0]
{
 8005c74:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c7c:	f1b8 3fff 	cmp.w	r8, #4294967295
{
 8005c80:	4606      	mov	r6, r0
 8005c82:	460f      	mov	r7, r1
 8005c84:	4691      	mov	r9, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c86:	602b      	str	r3, [r5, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8005c88:	d114      	bne.n	8005cb4 <I2C_RequestMemoryWrite+0x50>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c8a:	696c      	ldr	r4, [r5, #20]
 8005c8c:	07e2      	lsls	r2, r4, #31
 8005c8e:	d5fc      	bpl.n	8005c8a <I2C_RequestMemoryWrite+0x26>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c90:	f007 07fe 	and.w	r7, r7, #254	@ 0xfe
 8005c94:	612f      	str	r7, [r5, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c96:	465a      	mov	r2, fp
 8005c98:	4641      	mov	r1, r8
 8005c9a:	4630      	mov	r0, r6
 8005c9c:	f7ff ff9e 	bl	8005bdc <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8005ca0:	4604      	mov	r4, r0
 8005ca2:	b1a8      	cbz	r0, 8005cd0 <I2C_RequestMemoryWrite+0x6c>
    return HAL_ERROR;
 8005ca4:	2401      	movs	r4, #1
 8005ca6:	e04d      	b.n	8005d44 <I2C_RequestMemoryWrite+0xe0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ca8:	f1b8 0f00 	cmp.w	r8, #0
 8005cac:	d102      	bne.n	8005cb4 <I2C_RequestMemoryWrite+0x50>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005cae:	696b      	ldr	r3, [r5, #20]
 8005cb0:	07d8      	lsls	r0, r3, #31
 8005cb2:	d536      	bpl.n	8005d22 <I2C_RequestMemoryWrite+0xbe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cb4:	696b      	ldr	r3, [r5, #20]
 8005cb6:	07db      	lsls	r3, r3, #31
 8005cb8:	d4ea      	bmi.n	8005c90 <I2C_RequestMemoryWrite+0x2c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cba:	f7ff fb5b 	bl	8005374 <HAL_GetTick>
 8005cbe:	eba0 000b 	sub.w	r0, r0, fp
 8005cc2:	4580      	cmp	r8, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005cc4:	6835      	ldr	r5, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cc6:	d2ef      	bcs.n	8005ca8 <I2C_RequestMemoryWrite+0x44>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005cc8:	696b      	ldr	r3, [r5, #20]
 8005cca:	07d8      	lsls	r0, r3, #31
 8005ccc:	d4f2      	bmi.n	8005cb4 <I2C_RequestMemoryWrite+0x50>
 8005cce:	e028      	b.n	8005d22 <I2C_RequestMemoryWrite+0xbe>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cd0:	6833      	ldr	r3, [r6, #0]
 8005cd2:	9001      	str	r0, [sp, #4]
 8005cd4:	695a      	ldr	r2, [r3, #20]
 8005cd6:	9201      	str	r2, [sp, #4]
 8005cd8:	699a      	ldr	r2, [r3, #24]
 8005cda:	9201      	str	r2, [sp, #4]
 8005cdc:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005ce0:	9a01      	ldr	r2, [sp, #4]
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ce2:	d14e      	bne.n	8005d82 <I2C_RequestMemoryWrite+0x11e>
 8005ce4:	695a      	ldr	r2, [r3, #20]
 8005ce6:	0610      	lsls	r0, r2, #24
 8005ce8:	d430      	bmi.n	8005d4c <I2C_RequestMemoryWrite+0xe8>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cea:	695a      	ldr	r2, [r3, #20]
 8005cec:	0551      	lsls	r1, r2, #21
 8005cee:	d5f9      	bpl.n	8005ce4 <I2C_RequestMemoryWrite+0x80>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005cf0:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cf2:	f46f 6080 	mvn.w	r0, #1024	@ 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8005cf6:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cf8:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8005cfa:	6332      	str	r2, [r6, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005cfc:	f886 103d 	strb.w	r1, [r6, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d00:	f886 203e 	strb.w	r2, [r6, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d04:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8005d06:	f042 0204 	orr.w	r2, r2, #4
 8005d0a:	6432      	str	r2, [r6, #64]	@ 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d0c:	6c32      	ldr	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8005d0e:	2100      	movs	r1, #0
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d10:	2a04      	cmp	r2, #4
          __HAL_UNLOCK(hi2c);
 8005d12:	f886 103c 	strb.w	r1, [r6, #60]	@ 0x3c
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d16:	d1c5      	bne.n	8005ca4 <I2C_RequestMemoryWrite+0x40>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d1e:	601a      	str	r2, [r3, #0]
 8005d20:	e7c0      	b.n	8005ca4 <I2C_RequestMemoryWrite+0x40>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005d22:	2200      	movs	r2, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8005d24:	2320      	movs	r3, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005d26:	6332      	str	r2, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005d28:	f886 303d 	strb.w	r3, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005d2c:	f886 203e 	strb.w	r2, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005d30:	6c33      	ldr	r3, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8005d32:	f886 203c 	strb.w	r2, [r6, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005d36:	f043 0320 	orr.w	r3, r3, #32
 8005d3a:	6433      	str	r3, [r6, #64]	@ 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d3c:	682b      	ldr	r3, [r5, #0]
 8005d3e:	05d9      	lsls	r1, r3, #23
 8005d40:	d40e      	bmi.n	8005d60 <I2C_RequestMemoryWrite+0xfc>
    return HAL_TIMEOUT;
 8005d42:	2403      	movs	r4, #3
}
 8005d44:	4620      	mov	r0, r4
 8005d46:	b003      	add	sp, #12
 8005d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d4c:	f1ba 0f01 	cmp.w	sl, #1
 8005d50:	d10a      	bne.n	8005d68 <I2C_RequestMemoryWrite+0x104>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d52:	fa5f f289 	uxtb.w	r2, r9
}
 8005d56:	4620      	mov	r0, r4
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d58:	611a      	str	r2, [r3, #16]
}
 8005d5a:	b003      	add	sp, #12
 8005d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005d64:	6433      	str	r3, [r6, #64]	@ 0x40
 8005d66:	e7ec      	b.n	8005d42 <I2C_RequestMemoryWrite+0xde>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d68:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8005d6c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005d70:	611a      	str	r2, [r3, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d72:	d124      	bne.n	8005dbe <I2C_RequestMemoryWrite+0x15a>
 8005d74:	695a      	ldr	r2, [r3, #20]
 8005d76:	0610      	lsls	r0, r2, #24
 8005d78:	d4eb      	bmi.n	8005d52 <I2C_RequestMemoryWrite+0xee>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d7a:	695a      	ldr	r2, [r3, #20]
 8005d7c:	0551      	lsls	r1, r2, #21
 8005d7e:	d5f9      	bpl.n	8005d74 <I2C_RequestMemoryWrite+0x110>
 8005d80:	e7b6      	b.n	8005cf0 <I2C_RequestMemoryWrite+0x8c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d82:	695a      	ldr	r2, [r3, #20]
 8005d84:	0612      	lsls	r2, r2, #24
 8005d86:	d4e1      	bmi.n	8005d4c <I2C_RequestMemoryWrite+0xe8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d88:	695a      	ldr	r2, [r3, #20]
 8005d8a:	0557      	lsls	r7, r2, #21
 8005d8c:	d4b0      	bmi.n	8005cf0 <I2C_RequestMemoryWrite+0x8c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d8e:	f7ff faf1 	bl	8005374 <HAL_GetTick>
 8005d92:	eba0 030b 	sub.w	r3, r0, fp
 8005d96:	4598      	cmp	r8, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005d98:	6833      	ldr	r3, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d9a:	d302      	bcc.n	8005da2 <I2C_RequestMemoryWrite+0x13e>
 8005d9c:	f1b8 0f00 	cmp.w	r8, #0
 8005da0:	d1ef      	bne.n	8005d82 <I2C_RequestMemoryWrite+0x11e>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005da2:	695a      	ldr	r2, [r3, #20]
 8005da4:	0615      	lsls	r5, r2, #24
 8005da6:	d4ec      	bmi.n	8005d82 <I2C_RequestMemoryWrite+0x11e>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005da8:	2200      	movs	r2, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8005daa:	2120      	movs	r1, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005dac:	6332      	str	r2, [r6, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005dae:	f886 103d 	strb.w	r1, [r6, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005db2:	f886 203e 	strb.w	r2, [r6, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005db6:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8005db8:	430a      	orrs	r2, r1
 8005dba:	6432      	str	r2, [r6, #64]	@ 0x40
          return HAL_ERROR;
 8005dbc:	e7a6      	b.n	8005d0c <I2C_RequestMemoryWrite+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005dbe:	695a      	ldr	r2, [r3, #20]
 8005dc0:	0612      	lsls	r2, r2, #24
 8005dc2:	d4c6      	bmi.n	8005d52 <I2C_RequestMemoryWrite+0xee>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005dc4:	695a      	ldr	r2, [r3, #20]
 8005dc6:	0557      	lsls	r7, r2, #21
 8005dc8:	d492      	bmi.n	8005cf0 <I2C_RequestMemoryWrite+0x8c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dca:	f7ff fad3 	bl	8005374 <HAL_GetTick>
 8005dce:	eba0 030b 	sub.w	r3, r0, fp
 8005dd2:	4598      	cmp	r8, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005dd4:	6833      	ldr	r3, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dd6:	d302      	bcc.n	8005dde <I2C_RequestMemoryWrite+0x17a>
 8005dd8:	f1b8 0f00 	cmp.w	r8, #0
 8005ddc:	d1ef      	bne.n	8005dbe <I2C_RequestMemoryWrite+0x15a>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005dde:	695a      	ldr	r2, [r3, #20]
 8005de0:	0615      	lsls	r5, r2, #24
 8005de2:	d4ec      	bmi.n	8005dbe <I2C_RequestMemoryWrite+0x15a>
 8005de4:	e7e0      	b.n	8005da8 <I2C_RequestMemoryWrite+0x144>
 8005de6:	bf00      	nop

08005de8 <I2C_RequestMemoryRead>:
{
 8005de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dec:	6805      	ldr	r5, [r0, #0]
{
 8005dee:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005df0:	682b      	ldr	r3, [r5, #0]
{
 8005df2:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005df4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005df8:	602b      	str	r3, [r5, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dfa:	682b      	ldr	r3, [r5, #0]
{
 8005dfc:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8005dfe:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 8005e02:	4690      	mov	r8, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e08:	1c7a      	adds	r2, r7, #1
{
 8005e0a:	4606      	mov	r6, r0
 8005e0c:	468b      	mov	fp, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e0e:	602b      	str	r3, [r5, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8005e10:	d13d      	bne.n	8005e8e <I2C_RequestMemoryRead+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e12:	696c      	ldr	r4, [r5, #20]
 8005e14:	07e4      	lsls	r4, r4, #31
 8005e16:	d5fc      	bpl.n	8005e12 <I2C_RequestMemoryRead+0x2a>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e18:	f00b 03fe 	and.w	r3, fp, #254	@ 0xfe
 8005e1c:	612b      	str	r3, [r5, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e1e:	4652      	mov	r2, sl
 8005e20:	4639      	mov	r1, r7
 8005e22:	4630      	mov	r0, r6
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e24:	fa5f fb8b 	uxtb.w	fp, fp
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e28:	f7ff fed8 	bl	8005bdc <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8005e2c:	bb38      	cbnz	r0, 8005e7e <I2C_RequestMemoryRead+0x96>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e2e:	9001      	str	r0, [sp, #4]
 8005e30:	6830      	ldr	r0, [r6, #0]
 8005e32:	6943      	ldr	r3, [r0, #20]
 8005e34:	9301      	str	r3, [sp, #4]
 8005e36:	6983      	ldr	r3, [r0, #24]
 8005e38:	9301      	str	r3, [sp, #4]
 8005e3a:	1c79      	adds	r1, r7, #1
 8005e3c:	9b01      	ldr	r3, [sp, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e3e:	f040 8087 	bne.w	8005f50 <I2C_RequestMemoryRead+0x168>
 8005e42:	6943      	ldr	r3, [r0, #20]
 8005e44:	061d      	lsls	r5, r3, #24
 8005e46:	d444      	bmi.n	8005ed2 <I2C_RequestMemoryRead+0xea>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e48:	6943      	ldr	r3, [r0, #20]
 8005e4a:	055c      	lsls	r4, r3, #21
 8005e4c:	d5f9      	bpl.n	8005e42 <I2C_RequestMemoryRead+0x5a>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e4e:	2300      	movs	r3, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e50:	f46f 6180 	mvn.w	r1, #1024	@ 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e54:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e56:	6141      	str	r1, [r0, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e58:	6333      	str	r3, [r6, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e5a:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e5e:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e62:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 8005e64:	f043 0304 	orr.w	r3, r3, #4
 8005e68:	6433      	str	r3, [r6, #64]	@ 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e6a:	6c33      	ldr	r3, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8005e6c:	2200      	movs	r2, #0
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e6e:	2b04      	cmp	r3, #4
          __HAL_UNLOCK(hi2c);
 8005e70:	f886 203c 	strb.w	r2, [r6, #60]	@ 0x3c
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e74:	d103      	bne.n	8005e7e <I2C_RequestMemoryRead+0x96>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e76:	6803      	ldr	r3, [r0, #0]
 8005e78:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005e7c:	6003      	str	r3, [r0, #0]
    return HAL_ERROR;
 8005e7e:	2001      	movs	r0, #1
}
 8005e80:	b003      	add	sp, #12
 8005e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e86:	b917      	cbnz	r7, 8005e8e <I2C_RequestMemoryRead+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005e88:	696b      	ldr	r3, [r5, #20]
 8005e8a:	07db      	lsls	r3, r3, #31
 8005e8c:	d50c      	bpl.n	8005ea8 <I2C_RequestMemoryRead+0xc0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e8e:	696b      	ldr	r3, [r5, #20]
 8005e90:	07d8      	lsls	r0, r3, #31
 8005e92:	d4c1      	bmi.n	8005e18 <I2C_RequestMemoryRead+0x30>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e94:	f7ff fa6e 	bl	8005374 <HAL_GetTick>
 8005e98:	eba0 000a 	sub.w	r0, r0, sl
 8005e9c:	4287      	cmp	r7, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005e9e:	6835      	ldr	r5, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ea0:	d2f1      	bcs.n	8005e86 <I2C_RequestMemoryRead+0x9e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005ea2:	696b      	ldr	r3, [r5, #20]
 8005ea4:	07db      	lsls	r3, r3, #31
 8005ea6:	d4f2      	bmi.n	8005e8e <I2C_RequestMemoryRead+0xa6>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005ea8:	2200      	movs	r2, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8005eaa:	2320      	movs	r3, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005eac:	6332      	str	r2, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005eae:	f886 303d 	strb.w	r3, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005eb2:	f886 203e 	strb.w	r2, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005eb6:	6c33      	ldr	r3, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8005eb8:	f886 203c 	strb.w	r2, [r6, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ebc:	f043 0320 	orr.w	r3, r3, #32
 8005ec0:	6433      	str	r3, [r6, #64]	@ 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ec2:	682b      	ldr	r3, [r5, #0]
 8005ec4:	05dd      	lsls	r5, r3, #23
 8005ec6:	d502      	bpl.n	8005ece <I2C_RequestMemoryRead+0xe6>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ec8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ecc:	6433      	str	r3, [r6, #64]	@ 0x40
    return HAL_TIMEOUT;
 8005ece:	2003      	movs	r0, #3
 8005ed0:	e7d6      	b.n	8005e80 <I2C_RequestMemoryRead+0x98>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ed2:	f1b9 0f01 	cmp.w	r9, #1
 8005ed6:	d10b      	bne.n	8005ef0 <I2C_RequestMemoryRead+0x108>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ed8:	fa5f f388 	uxtb.w	r3, r8
 8005edc:	1c7c      	adds	r4, r7, #1
 8005ede:	6103      	str	r3, [r0, #16]
 8005ee0:	d154      	bne.n	8005f8c <I2C_RequestMemoryRead+0x1a4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ee2:	6943      	ldr	r3, [r0, #20]
 8005ee4:	0619      	lsls	r1, r3, #24
 8005ee6:	d40f      	bmi.n	8005f08 <I2C_RequestMemoryRead+0x120>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ee8:	6943      	ldr	r3, [r0, #20]
 8005eea:	055a      	lsls	r2, r3, #21
 8005eec:	d5f9      	bpl.n	8005ee2 <I2C_RequestMemoryRead+0xfa>
 8005eee:	e7ae      	b.n	8005e4e <I2C_RequestMemoryRead+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ef0:	ea4f 2318 	mov.w	r3, r8, lsr #8
 8005ef4:	1c7a      	adds	r2, r7, #1
 8005ef6:	6103      	str	r3, [r0, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ef8:	d15c      	bne.n	8005fb4 <I2C_RequestMemoryRead+0x1cc>
 8005efa:	6943      	ldr	r3, [r0, #20]
 8005efc:	061c      	lsls	r4, r3, #24
 8005efe:	d4eb      	bmi.n	8005ed8 <I2C_RequestMemoryRead+0xf0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f00:	6943      	ldr	r3, [r0, #20]
 8005f02:	0559      	lsls	r1, r3, #21
 8005f04:	d5f9      	bpl.n	8005efa <I2C_RequestMemoryRead+0x112>
 8005f06:	e7a2      	b.n	8005e4e <I2C_RequestMemoryRead+0x66>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f08:	6803      	ldr	r3, [r0, #0]
 8005f0a:	1c7d      	adds	r5, r7, #1
 8005f0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f10:	6003      	str	r3, [r0, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8005f12:	d112      	bne.n	8005f3a <I2C_RequestMemoryRead+0x152>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f14:	6943      	ldr	r3, [r0, #20]
 8005f16:	07da      	lsls	r2, r3, #31
 8005f18:	d5fc      	bpl.n	8005f14 <I2C_RequestMemoryRead+0x12c>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005f1a:	f04b 0301 	orr.w	r3, fp, #1
 8005f1e:	6103      	str	r3, [r0, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f20:	4652      	mov	r2, sl
 8005f22:	4639      	mov	r1, r7
 8005f24:	4630      	mov	r0, r6
 8005f26:	f7ff fe59 	bl	8005bdc <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8005f2a:	3800      	subs	r0, #0
 8005f2c:	bf18      	it	ne
 8005f2e:	2001      	movne	r0, #1
 8005f30:	e7a6      	b.n	8005e80 <I2C_RequestMemoryRead+0x98>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f32:	b917      	cbnz	r7, 8005f3a <I2C_RequestMemoryRead+0x152>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005f34:	6943      	ldr	r3, [r0, #20]
 8005f36:	07dc      	lsls	r4, r3, #31
 8005f38:	d550      	bpl.n	8005fdc <I2C_RequestMemoryRead+0x1f4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f3a:	6943      	ldr	r3, [r0, #20]
 8005f3c:	07db      	lsls	r3, r3, #31
 8005f3e:	d4ec      	bmi.n	8005f1a <I2C_RequestMemoryRead+0x132>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f40:	f7ff fa18 	bl	8005374 <HAL_GetTick>
 8005f44:	eba0 030a 	sub.w	r3, r0, sl
 8005f48:	429f      	cmp	r7, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005f4a:	6830      	ldr	r0, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f4c:	d2f1      	bcs.n	8005f32 <I2C_RequestMemoryRead+0x14a>
 8005f4e:	e7f1      	b.n	8005f34 <I2C_RequestMemoryRead+0x14c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f50:	6943      	ldr	r3, [r0, #20]
 8005f52:	0619      	lsls	r1, r3, #24
 8005f54:	d4bd      	bmi.n	8005ed2 <I2C_RequestMemoryRead+0xea>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f56:	6943      	ldr	r3, [r0, #20]
 8005f58:	055a      	lsls	r2, r3, #21
 8005f5a:	f53f af78 	bmi.w	8005e4e <I2C_RequestMemoryRead+0x66>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f5e:	f7ff fa09 	bl	8005374 <HAL_GetTick>
 8005f62:	eba0 030a 	sub.w	r3, r0, sl
 8005f66:	429f      	cmp	r7, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005f68:	6830      	ldr	r0, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f6a:	d301      	bcc.n	8005f70 <I2C_RequestMemoryRead+0x188>
 8005f6c:	2f00      	cmp	r7, #0
 8005f6e:	d1ef      	bne.n	8005f50 <I2C_RequestMemoryRead+0x168>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005f70:	6943      	ldr	r3, [r0, #20]
 8005f72:	061b      	lsls	r3, r3, #24
 8005f74:	d4ec      	bmi.n	8005f50 <I2C_RequestMemoryRead+0x168>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005f76:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8005f78:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005f7a:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005f7c:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f80:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f84:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 8005f86:	4313      	orrs	r3, r2
 8005f88:	6433      	str	r3, [r6, #64]	@ 0x40
          return HAL_ERROR;
 8005f8a:	e76e      	b.n	8005e6a <I2C_RequestMemoryRead+0x82>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f8c:	6943      	ldr	r3, [r0, #20]
 8005f8e:	061b      	lsls	r3, r3, #24
 8005f90:	d4ba      	bmi.n	8005f08 <I2C_RequestMemoryRead+0x120>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f92:	6943      	ldr	r3, [r0, #20]
 8005f94:	055b      	lsls	r3, r3, #21
 8005f96:	f53f af5a 	bmi.w	8005e4e <I2C_RequestMemoryRead+0x66>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f9a:	f7ff f9eb 	bl	8005374 <HAL_GetTick>
 8005f9e:	eba0 030a 	sub.w	r3, r0, sl
 8005fa2:	429f      	cmp	r7, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005fa4:	6830      	ldr	r0, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fa6:	d301      	bcc.n	8005fac <I2C_RequestMemoryRead+0x1c4>
 8005fa8:	2f00      	cmp	r7, #0
 8005faa:	d1ef      	bne.n	8005f8c <I2C_RequestMemoryRead+0x1a4>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005fac:	6943      	ldr	r3, [r0, #20]
 8005fae:	061d      	lsls	r5, r3, #24
 8005fb0:	d4ec      	bmi.n	8005f8c <I2C_RequestMemoryRead+0x1a4>
 8005fb2:	e7e0      	b.n	8005f76 <I2C_RequestMemoryRead+0x18e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fb4:	6943      	ldr	r3, [r0, #20]
 8005fb6:	061a      	lsls	r2, r3, #24
 8005fb8:	d48e      	bmi.n	8005ed8 <I2C_RequestMemoryRead+0xf0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fba:	6943      	ldr	r3, [r0, #20]
 8005fbc:	055b      	lsls	r3, r3, #21
 8005fbe:	f53f af46 	bmi.w	8005e4e <I2C_RequestMemoryRead+0x66>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fc2:	f7ff f9d7 	bl	8005374 <HAL_GetTick>
 8005fc6:	eba0 030a 	sub.w	r3, r0, sl
 8005fca:	429f      	cmp	r7, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005fcc:	6830      	ldr	r0, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fce:	d301      	bcc.n	8005fd4 <I2C_RequestMemoryRead+0x1ec>
 8005fd0:	2f00      	cmp	r7, #0
 8005fd2:	d1ef      	bne.n	8005fb4 <I2C_RequestMemoryRead+0x1cc>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005fd4:	6943      	ldr	r3, [r0, #20]
 8005fd6:	061d      	lsls	r5, r3, #24
 8005fd8:	d4ec      	bmi.n	8005fb4 <I2C_RequestMemoryRead+0x1cc>
 8005fda:	e7cc      	b.n	8005f76 <I2C_RequestMemoryRead+0x18e>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005fdc:	2200      	movs	r2, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8005fde:	2320      	movs	r3, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005fe0:	6332      	str	r2, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005fe2:	f886 303d 	strb.w	r3, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005fe6:	f886 203e 	strb.w	r2, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005fea:	6c33      	ldr	r3, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8005fec:	f886 203c 	strb.w	r2, [r6, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ff0:	f043 0320 	orr.w	r3, r3, #32
 8005ff4:	6433      	str	r3, [r6, #64]	@ 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ff6:	6803      	ldr	r3, [r0, #0]
 8005ff8:	05d9      	lsls	r1, r3, #23
 8005ffa:	f53f af65 	bmi.w	8005ec8 <I2C_RequestMemoryRead+0xe0>
 8005ffe:	e766      	b.n	8005ece <I2C_RequestMemoryRead+0xe6>

08006000 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8006000:	2800      	cmp	r0, #0
 8006002:	f000 80b8 	beq.w	8006176 <HAL_I2C_Init+0x176>
{
 8006006:	b570      	push	{r4, r5, r6, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006008:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800600c:	4604      	mov	r4, r0
 800600e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006012:	2b00      	cmp	r3, #0
 8006014:	f000 8098 	beq.w	8006148 <HAL_I2C_Init+0x148>
  __HAL_I2C_DISABLE(hi2c);
 8006018:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800601a:	2224      	movs	r2, #36	@ 0x24
 800601c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	f022 0201 	bic.w	r2, r2, #1
 8006026:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800602e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006036:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006038:	f000 fe9e 	bl	8006d78 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800603c:	6865      	ldr	r5, [r4, #4]
 800603e:	4b4f      	ldr	r3, [pc, #316]	@ (800617c <HAL_I2C_Init+0x17c>)
 8006040:	429d      	cmp	r5, r3
 8006042:	d84f      	bhi.n	80060e4 <HAL_I2C_Init+0xe4>
 8006044:	4b4e      	ldr	r3, [pc, #312]	@ (8006180 <HAL_I2C_Init+0x180>)
 8006046:	4298      	cmp	r0, r3
 8006048:	d97c      	bls.n	8006144 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 800604a:	4b4e      	ldr	r3, [pc, #312]	@ (8006184 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800604c:	006a      	lsls	r2, r5, #1
  freqrange = I2C_FREQRANGE(pclk1);
 800604e:	fba3 3500 	umull	r3, r5, r3, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006052:	1e43      	subs	r3, r0, #1
 8006054:	fbb3 f3f2 	udiv	r3, r3, r2
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006058:	6822      	ldr	r2, [r4, #0]
 800605a:	6851      	ldr	r1, [r2, #4]
 800605c:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8006060:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 8006064:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006066:	6a11      	ldr	r1, [r2, #32]
  freqrange = I2C_FREQRANGE(pclk1);
 8006068:	ea4f 4c95 	mov.w	ip, r5, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800606c:	f10c 0c01 	add.w	ip, ip, #1
 8006070:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8006074:	ea41 010c 	orr.w	r1, r1, ip
 8006078:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800607a:	69d1      	ldr	r1, [r2, #28]
 800607c:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8006080:	3301      	adds	r3, #1
 8006082:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8006086:	4203      	tst	r3, r0
 8006088:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 800608c:	d161      	bne.n	8006152 <HAL_I2C_Init+0x152>
 800608e:	2304      	movs	r3, #4
 8006090:	430b      	orrs	r3, r1
 8006092:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006094:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8006098:	6811      	ldr	r1, [r2, #0]
 800609a:	4303      	orrs	r3, r0
 800609c:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 80060a0:	430b      	orrs	r3, r1
 80060a2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80060a4:	6891      	ldr	r1, [r2, #8]
 80060a6:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80060aa:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 80060ae:	4303      	orrs	r3, r0
 80060b0:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80060b4:	430b      	orrs	r3, r1
 80060b6:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80060b8:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80060bc:	68d1      	ldr	r1, [r2, #12]
 80060be:	4303      	orrs	r3, r0
 80060c0:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80060c4:	430b      	orrs	r3, r1
 80060c6:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80060c8:	6811      	ldr	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060ca:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 80060cc:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 80060d0:	2020      	movs	r0, #32
  __HAL_I2C_ENABLE(hi2c);
 80060d2:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060d4:	6423      	str	r3, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80060d6:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80060da:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060dc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  return HAL_OK;
 80060e0:	4618      	mov	r0, r3
}
 80060e2:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80060e4:	4b28      	ldr	r3, [pc, #160]	@ (8006188 <HAL_I2C_Init+0x188>)
 80060e6:	4298      	cmp	r0, r3
 80060e8:	d92c      	bls.n	8006144 <HAL_I2C_Init+0x144>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80060ea:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80060ec:	4b25      	ldr	r3, [pc, #148]	@ (8006184 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80060ee:	4e27      	ldr	r6, [pc, #156]	@ (800618c <HAL_I2C_Init+0x18c>)
  freqrange = I2C_FREQRANGE(pclk1);
 80060f0:	fba3 3c00 	umull	r3, ip, r3, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80060f4:	1e43      	subs	r3, r0, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80060f6:	6850      	ldr	r0, [r2, #4]
 80060f8:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 80060fc:	ea40 409c 	orr.w	r0, r0, ip, lsr #18
 8006100:	6050      	str	r0, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8006102:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006106:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800610a:	fb00 f101 	mul.w	r1, r0, r1
 800610e:	fba6 6101 	umull	r6, r1, r6, r1
 8006112:	6a10      	ldr	r0, [r2, #32]
 8006114:	0989      	lsrs	r1, r1, #6
 8006116:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 800611a:	3101      	adds	r1, #1
 800611c:	4301      	orrs	r1, r0
 800611e:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006120:	69d1      	ldr	r1, [r2, #28]
 8006122:	68a0      	ldr	r0, [r4, #8]
 8006124:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8006128:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 800612c:	b9a0      	cbnz	r0, 8006158 <HAL_I2C_Init+0x158>
 800612e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006132:	fbb3 f3f5 	udiv	r3, r3, r5
 8006136:	3301      	adds	r3, #1
 8006138:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800613c:	b1cb      	cbz	r3, 8006172 <HAL_I2C_Init+0x172>
 800613e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006142:	e7a5      	b.n	8006090 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8006144:	2001      	movs	r0, #1
}
 8006146:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8006148:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 800614c:	f7fe fde4 	bl	8004d18 <HAL_I2C_MspInit>
 8006150:	e762      	b.n	8006018 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006152:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006156:	e79b      	b.n	8006090 <HAL_I2C_Init+0x90>
 8006158:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800615c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8006160:	fbb3 f3f5 	udiv	r3, r3, r5
 8006164:	3301      	adds	r3, #1
 8006166:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800616a:	b113      	cbz	r3, 8006172 <HAL_I2C_Init+0x172>
 800616c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006170:	e78e      	b.n	8006090 <HAL_I2C_Init+0x90>
 8006172:	2301      	movs	r3, #1
 8006174:	e78c      	b.n	8006090 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8006176:	2001      	movs	r0, #1
}
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	000186a0 	.word	0x000186a0
 8006180:	001e847f 	.word	0x001e847f
 8006184:	431bde83 	.word	0x431bde83
 8006188:	003d08ff 	.word	0x003d08ff
 800618c:	10624dd3 	.word	0x10624dd3

08006190 <HAL_I2C_Mem_Write>:
{
 8006190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006194:	4604      	mov	r4, r0
 8006196:	b082      	sub	sp, #8
 8006198:	4699      	mov	r9, r3
 800619a:	f8bd a02c 	ldrh.w	sl, [sp, #44]	@ 0x2c
 800619e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80061a0:	460f      	mov	r7, r1
 80061a2:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80061a4:	f7ff f8e6 	bl	8005374 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80061a8:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 80061ac:	2b20      	cmp	r3, #32
 80061ae:	d004      	beq.n	80061ba <HAL_I2C_Mem_Write+0x2a>
      return HAL_BUSY;
 80061b0:	2702      	movs	r7, #2
}
 80061b2:	4638      	mov	r0, r7
 80061b4:	b002      	add	sp, #8
 80061b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061ba:	4605      	mov	r5, r0
 80061bc:	6820      	ldr	r0, [r4, #0]
 80061be:	6983      	ldr	r3, [r0, #24]
 80061c0:	079b      	lsls	r3, r3, #30
 80061c2:	d517      	bpl.n	80061f4 <HAL_I2C_Mem_Write+0x64>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061c4:	f7ff f8d6 	bl	8005374 <HAL_GetTick>
 80061c8:	1b40      	subs	r0, r0, r5
 80061ca:	2819      	cmp	r0, #25
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80061cc:	6820      	ldr	r0, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061ce:	d9f6      	bls.n	80061be <HAL_I2C_Mem_Write+0x2e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80061d0:	6983      	ldr	r3, [r0, #24]
 80061d2:	43db      	mvns	r3, r3
 80061d4:	f013 0302 	ands.w	r3, r3, #2
 80061d8:	d1f1      	bne.n	80061be <HAL_I2C_Mem_Write+0x2e>
          hi2c->State             = HAL_I2C_STATE_READY;
 80061da:	2220      	movs	r2, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 80061dc:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80061de:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80061e2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80061e6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80061e8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80061ec:	f042 0220 	orr.w	r2, r2, #32
 80061f0:	6422      	str	r2, [r4, #64]	@ 0x40
          return HAL_ERROR;
 80061f2:	e7dd      	b.n	80061b0 <HAL_I2C_Mem_Write+0x20>
    __HAL_LOCK(hi2c);
 80061f4:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d0d9      	beq.n	80061b0 <HAL_I2C_Mem_Write+0x20>
 80061fc:	2301      	movs	r3, #1
 80061fe:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006202:	6803      	ldr	r3, [r0, #0]
 8006204:	07d9      	lsls	r1, r3, #31
 8006206:	d572      	bpl.n	80062ee <HAL_I2C_Mem_Write+0x15e>
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006208:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800620a:	6807      	ldr	r7, [r0, #0]
 800620c:	f427 6700 	bic.w	r7, r7, #2048	@ 0x800
 8006210:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 8006212:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006214:	6260      	str	r0, [r4, #36]	@ 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006216:	2021      	movs	r0, #33	@ 0x21
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006218:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800621c:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006220:	2040      	movs	r0, #64	@ 0x40
 8006222:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006226:	2000      	movs	r0, #0
 8006228:	6420      	str	r0, [r4, #64]	@ 0x40
    hi2c->XferCount   = Size;
 800622a:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800622e:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 8006230:	8520      	strh	r0, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006232:	484f      	ldr	r0, [pc, #316]	@ (8006370 <HAL_I2C_Mem_Write+0x1e0>)
 8006234:	62e0      	str	r0, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006236:	464b      	mov	r3, r9
 8006238:	4642      	mov	r2, r8
 800623a:	4620      	mov	r0, r4
 800623c:	f7ff fd12 	bl	8005c64 <I2C_RequestMemoryWrite>
 8006240:	4607      	mov	r7, r0
 8006242:	bb18      	cbnz	r0, 800628c <HAL_I2C_Mem_Write+0xfc>
    while (hi2c->XferSize > 0U)
 8006244:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006246:	6823      	ldr	r3, [r4, #0]
    while (hi2c->XferSize > 0U)
 8006248:	2a00      	cmp	r2, #0
 800624a:	d036      	beq.n	80062ba <HAL_I2C_Mem_Write+0x12a>
 800624c:	1c72      	adds	r2, r6, #1
 800624e:	d156      	bne.n	80062fe <HAL_I2C_Mem_Write+0x16e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006250:	695a      	ldr	r2, [r3, #20]
 8006252:	0611      	lsls	r1, r2, #24
 8006254:	d41c      	bmi.n	8006290 <HAL_I2C_Mem_Write+0x100>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006256:	695a      	ldr	r2, [r3, #20]
 8006258:	0552      	lsls	r2, r2, #21
 800625a:	d5f9      	bpl.n	8006250 <HAL_I2C_Mem_Write+0xc0>
    hi2c->PreviousState       = I2C_STATE_NONE;
 800625c:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800625e:	f46f 6080 	mvn.w	r0, #1024	@ 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8006262:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006264:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8006266:	6322      	str	r2, [r4, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006268:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800626c:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006270:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006272:	f042 0204 	orr.w	r2, r2, #4
 8006276:	6422      	str	r2, [r4, #64]	@ 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006278:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800627a:	2100      	movs	r1, #0
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800627c:	2a04      	cmp	r2, #4
          __HAL_UNLOCK(hi2c);
 800627e:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006282:	d103      	bne.n	800628c <HAL_I2C_Mem_Write+0xfc>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800628a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 800628c:	2701      	movs	r7, #1
 800628e:	e790      	b.n	80061b2 <HAL_I2C_Mem_Write+0x22>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006290:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8006294:	f8b4 e028 	ldrh.w	lr, [r4, #40]	@ 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006298:	4661      	mov	r1, ip
      hi2c->XferSize--;
 800629a:	f10e 30ff 	add.w	r0, lr, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800629e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062a2:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 80062a4:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 80062a6:	6261      	str	r1, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80062a8:	3a01      	subs	r2, #1
 80062aa:	b292      	uxth	r2, r2
 80062ac:	8562      	strh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80062ae:	b282      	uxth	r2, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80062b0:	6958      	ldr	r0, [r3, #20]
      hi2c->XferSize--;
 80062b2:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80062b4:	0741      	lsls	r1, r0, #29
 80062b6:	d517      	bpl.n	80062e8 <HAL_I2C_Mem_Write+0x158>
 80062b8:	b942      	cbnz	r2, 80062cc <HAL_I2C_Mem_Write+0x13c>
 80062ba:	1c70      	adds	r0, r6, #1
 80062bc:	d13b      	bne.n	8006336 <HAL_I2C_Mem_Write+0x1a6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80062be:	695a      	ldr	r2, [r3, #20]
 80062c0:	0750      	lsls	r0, r2, #29
 80062c2:	d42b      	bmi.n	800631c <HAL_I2C_Mem_Write+0x18c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80062c4:	695a      	ldr	r2, [r3, #20]
 80062c6:	0551      	lsls	r1, r2, #21
 80062c8:	d5f9      	bpl.n	80062be <HAL_I2C_Mem_Write+0x12e>
 80062ca:	e7c7      	b.n	800625c <HAL_I2C_Mem_Write+0xcc>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062cc:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80062d0:	6119      	str	r1, [r3, #16]
        hi2c->pBuffPtr++;
 80062d2:	f10c 0102 	add.w	r1, ip, #2
 80062d6:	6261      	str	r1, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 80062d8:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 80062da:	f1ae 0202 	sub.w	r2, lr, #2
        hi2c->XferCount--;
 80062de:	3901      	subs	r1, #1
        hi2c->XferSize--;
 80062e0:	b292      	uxth	r2, r2
        hi2c->XferCount--;
 80062e2:	b289      	uxth	r1, r1
        hi2c->XferSize--;
 80062e4:	8522      	strh	r2, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 80062e6:	8561      	strh	r1, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80062e8:	2a00      	cmp	r2, #0
 80062ea:	d1af      	bne.n	800624c <HAL_I2C_Mem_Write+0xbc>
 80062ec:	e7e5      	b.n	80062ba <HAL_I2C_Mem_Write+0x12a>
      __HAL_I2C_ENABLE(hi2c);
 80062ee:	6803      	ldr	r3, [r0, #0]
 80062f0:	f043 0301 	orr.w	r3, r3, #1
 80062f4:	6003      	str	r3, [r0, #0]
 80062f6:	e787      	b.n	8006208 <HAL_I2C_Mem_Write+0x78>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80062f8:	695a      	ldr	r2, [r3, #20]
 80062fa:	0610      	lsls	r0, r2, #24
 80062fc:	d52c      	bpl.n	8006358 <HAL_I2C_Mem_Write+0x1c8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062fe:	695a      	ldr	r2, [r3, #20]
 8006300:	0610      	lsls	r0, r2, #24
 8006302:	d4c5      	bmi.n	8006290 <HAL_I2C_Mem_Write+0x100>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006304:	695a      	ldr	r2, [r3, #20]
 8006306:	0552      	lsls	r2, r2, #21
 8006308:	d4a8      	bmi.n	800625c <HAL_I2C_Mem_Write+0xcc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800630a:	f7ff f833 	bl	8005374 <HAL_GetTick>
 800630e:	1b40      	subs	r0, r0, r5
 8006310:	4286      	cmp	r6, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006312:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006314:	d3f0      	bcc.n	80062f8 <HAL_I2C_Mem_Write+0x168>
 8006316:	2e00      	cmp	r6, #0
 8006318:	d1f1      	bne.n	80062fe <HAL_I2C_Mem_Write+0x16e>
 800631a:	e7ed      	b.n	80062f8 <HAL_I2C_Mem_Write+0x168>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800631c:	681a      	ldr	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800631e:	2100      	movs	r1, #0
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006320:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
    hi2c->State = HAL_I2C_STATE_READY;
 8006324:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006326:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8006328:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 800632c:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006330:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
    return HAL_OK;
 8006334:	e73d      	b.n	80061b2 <HAL_I2C_Mem_Write+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006336:	695a      	ldr	r2, [r3, #20]
 8006338:	0752      	lsls	r2, r2, #29
 800633a:	d4ef      	bmi.n	800631c <HAL_I2C_Mem_Write+0x18c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800633c:	695a      	ldr	r2, [r3, #20]
 800633e:	0551      	lsls	r1, r2, #21
 8006340:	d48c      	bmi.n	800625c <HAL_I2C_Mem_Write+0xcc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006342:	f7ff f817 	bl	8005374 <HAL_GetTick>
 8006346:	1b43      	subs	r3, r0, r5
 8006348:	429e      	cmp	r6, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800634a:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800634c:	d301      	bcc.n	8006352 <HAL_I2C_Mem_Write+0x1c2>
 800634e:	2e00      	cmp	r6, #0
 8006350:	d1f1      	bne.n	8006336 <HAL_I2C_Mem_Write+0x1a6>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006352:	695a      	ldr	r2, [r3, #20]
 8006354:	0752      	lsls	r2, r2, #29
 8006356:	d4ee      	bmi.n	8006336 <HAL_I2C_Mem_Write+0x1a6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006358:	2200      	movs	r2, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 800635a:	2120      	movs	r1, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 800635c:	6322      	str	r2, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800635e:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006362:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006366:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006368:	430a      	orrs	r2, r1
 800636a:	6422      	str	r2, [r4, #64]	@ 0x40
          return HAL_ERROR;
 800636c:	e784      	b.n	8006278 <HAL_I2C_Mem_Write+0xe8>
 800636e:	bf00      	nop
 8006370:	ffff0000 	.word	0xffff0000

08006374 <HAL_I2C_Mem_Read>:
{
 8006374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006378:	4604      	mov	r4, r0
 800637a:	b086      	sub	sp, #24
 800637c:	4699      	mov	r9, r3
 800637e:	f8bd a03c 	ldrh.w	sl, [sp, #60]	@ 0x3c
 8006382:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8006384:	460f      	mov	r7, r1
 8006386:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8006388:	f7fe fff4 	bl	8005374 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800638c:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8006390:	2b20      	cmp	r3, #32
 8006392:	d004      	beq.n	800639e <HAL_I2C_Mem_Read+0x2a>
      return HAL_BUSY;
 8006394:	2702      	movs	r7, #2
}
 8006396:	4638      	mov	r0, r7
 8006398:	b006      	add	sp, #24
 800639a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800639e:	4606      	mov	r6, r0
 80063a0:	6820      	ldr	r0, [r4, #0]
 80063a2:	6983      	ldr	r3, [r0, #24]
 80063a4:	079b      	lsls	r3, r3, #30
 80063a6:	d517      	bpl.n	80063d8 <HAL_I2C_Mem_Read+0x64>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063a8:	f7fe ffe4 	bl	8005374 <HAL_GetTick>
 80063ac:	1b80      	subs	r0, r0, r6
 80063ae:	2819      	cmp	r0, #25
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80063b0:	6820      	ldr	r0, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063b2:	d9f6      	bls.n	80063a2 <HAL_I2C_Mem_Read+0x2e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80063b4:	6983      	ldr	r3, [r0, #24]
 80063b6:	43db      	mvns	r3, r3
 80063b8:	f013 0302 	ands.w	r3, r3, #2
 80063bc:	d1f1      	bne.n	80063a2 <HAL_I2C_Mem_Read+0x2e>
          hi2c->State             = HAL_I2C_STATE_READY;
 80063be:	2220      	movs	r2, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 80063c0:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80063c2:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80063c6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80063ca:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80063cc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80063d0:	f042 0220 	orr.w	r2, r2, #32
 80063d4:	6422      	str	r2, [r4, #64]	@ 0x40
          return HAL_ERROR;
 80063d6:	e7dd      	b.n	8006394 <HAL_I2C_Mem_Read+0x20>
    __HAL_LOCK(hi2c);
 80063d8:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d0d9      	beq.n	8006394 <HAL_I2C_Mem_Read+0x20>
 80063e0:	2301      	movs	r3, #1
 80063e2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063e6:	6803      	ldr	r3, [r0, #0]
 80063e8:	07d9      	lsls	r1, r3, #31
 80063ea:	d561      	bpl.n	80064b0 <HAL_I2C_Mem_Read+0x13c>
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80063ec:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063ee:	6807      	ldr	r7, [r0, #0]
 80063f0:	f427 6700 	bic.w	r7, r7, #2048	@ 0x800
 80063f4:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 80063f6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80063f8:	6260      	str	r0, [r4, #36]	@ 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80063fa:	2022      	movs	r0, #34	@ 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80063fc:	e9cd 5600 	strd	r5, r6, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006400:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006404:	2040      	movs	r0, #64	@ 0x40
 8006406:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800640a:	2000      	movs	r0, #0
 800640c:	6420      	str	r0, [r4, #64]	@ 0x40
    hi2c->XferCount   = Size;
 800640e:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006412:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 8006414:	8520      	strh	r0, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006416:	488b      	ldr	r0, [pc, #556]	@ (8006644 <HAL_I2C_Mem_Read+0x2d0>)
 8006418:	62e0      	str	r0, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800641a:	464b      	mov	r3, r9
 800641c:	4642      	mov	r2, r8
 800641e:	4620      	mov	r0, r4
 8006420:	f7ff fce2 	bl	8005de8 <I2C_RequestMemoryRead>
 8006424:	4607      	mov	r7, r0
 8006426:	2800      	cmp	r0, #0
 8006428:	d13d      	bne.n	80064a6 <HAL_I2C_Mem_Read+0x132>
    if (hi2c->XferSize == 0U)
 800642a:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800642c:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 800642e:	2a00      	cmp	r2, #0
 8006430:	d143      	bne.n	80064ba <HAL_I2C_Mem_Read+0x146>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006432:	9002      	str	r0, [sp, #8]
 8006434:	695a      	ldr	r2, [r3, #20]
 8006436:	9202      	str	r2, [sp, #8]
 8006438:	699a      	ldr	r2, [r3, #24]
 800643a:	9202      	str	r2, [sp, #8]
 800643c:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006444:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006446:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8006448:	2220      	movs	r2, #32
 800644a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 800644e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006452:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 8006456:	e79e      	b.n	8006396 <HAL_I2C_Mem_Read+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006458:	695a      	ldr	r2, [r3, #20]
 800645a:	0652      	lsls	r2, r2, #25
 800645c:	f100 80ca 	bmi.w	80065f4 <HAL_I2C_Mem_Read+0x280>
 8006460:	2d00      	cmp	r5, #0
 8006462:	f000 80c3 	beq.w	80065ec <HAL_I2C_Mem_Read+0x278>
 8006466:	e00d      	b.n	8006484 <HAL_I2C_Mem_Read+0x110>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006468:	f7fe ff84 	bl	8005374 <HAL_GetTick>
 800646c:	1b80      	subs	r0, r0, r6
 800646e:	4285      	cmp	r5, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006470:	6823      	ldr	r3, [r4, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006472:	d203      	bcs.n	800647c <HAL_I2C_Mem_Read+0x108>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006474:	695a      	ldr	r2, [r3, #20]
 8006476:	0651      	lsls	r1, r2, #25
 8006478:	f140 8081 	bpl.w	800657e <HAL_I2C_Mem_Read+0x20a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800647c:	695a      	ldr	r2, [r3, #20]
 800647e:	0652      	lsls	r2, r2, #25
 8006480:	f100 80b8 	bmi.w	80065f4 <HAL_I2C_Mem_Read+0x280>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006484:	695a      	ldr	r2, [r3, #20]
 8006486:	06d0      	lsls	r0, r2, #27
 8006488:	d5ee      	bpl.n	8006468 <HAL_I2C_Mem_Read+0xf4>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800648a:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800648c:	f06f 0010 	mvn.w	r0, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8006490:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006492:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006494:	6322      	str	r2, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006496:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800649a:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800649e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80064a0:	6423      	str	r3, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 80064a2:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 80064a6:	2701      	movs	r7, #1
}
 80064a8:	4638      	mov	r0, r7
 80064aa:	b006      	add	sp, #24
 80064ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_I2C_ENABLE(hi2c);
 80064b0:	6803      	ldr	r3, [r0, #0]
 80064b2:	f043 0301 	orr.w	r3, r3, #1
 80064b6:	6003      	str	r3, [r0, #0]
 80064b8:	e798      	b.n	80063ec <HAL_I2C_Mem_Read+0x78>
    else if (hi2c->XferSize == 1U)
 80064ba:	2a01      	cmp	r2, #1
 80064bc:	f000 8118 	beq.w	80066f0 <HAL_I2C_Mem_Read+0x37c>
    else if (hi2c->XferSize == 2U)
 80064c0:	2a02      	cmp	r2, #2
 80064c2:	d07b      	beq.n	80065bc <HAL_I2C_Mem_Read+0x248>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064c4:	9005      	str	r0, [sp, #20]
 80064c6:	6959      	ldr	r1, [r3, #20]
 80064c8:	9105      	str	r1, [sp, #20]
 80064ca:	6999      	ldr	r1, [r3, #24]
 80064cc:	9105      	str	r1, [sp, #20]
 80064ce:	9905      	ldr	r1, [sp, #20]
      if (hi2c->XferSize <= 3U)
 80064d0:	2a03      	cmp	r2, #3
 80064d2:	d8c1      	bhi.n	8006458 <HAL_I2C_Mem_Read+0xe4>
        if (hi2c->XferSize == 1U)
 80064d4:	2a01      	cmp	r2, #1
 80064d6:	f000 80e0 	beq.w	800669a <HAL_I2C_Mem_Read+0x326>
        else if (hi2c->XferSize == 2U)
 80064da:	2a02      	cmp	r2, #2
 80064dc:	f000 80b4 	beq.w	8006648 <HAL_I2C_Mem_Read+0x2d4>
 80064e0:	1c68      	adds	r0, r5, #1
 80064e2:	d13e      	bne.n	8006562 <HAL_I2C_Mem_Read+0x1ee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064e4:	695a      	ldr	r2, [r3, #20]
 80064e6:	0751      	lsls	r1, r2, #29
 80064e8:	d5fc      	bpl.n	80064e4 <HAL_I2C_Mem_Read+0x170>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064ea:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064ec:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064f2:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80064f8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
          hi2c->pBuffPtr++;
 80064fa:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80064fc:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80064fe:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 8006500:	3a01      	subs	r2, #1
          hi2c->pBuffPtr++;
 8006502:	3101      	adds	r1, #1
          hi2c->XferCount--;
 8006504:	b29b      	uxth	r3, r3
 8006506:	1c68      	adds	r0, r5, #1
          hi2c->XferSize--;
 8006508:	8522      	strh	r2, [r4, #40]	@ 0x28
          hi2c->pBuffPtr++;
 800650a:	6261      	str	r1, [r4, #36]	@ 0x24
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800650c:	6822      	ldr	r2, [r4, #0]
          hi2c->XferCount--;
 800650e:	8563      	strh	r3, [r4, #42]	@ 0x2a
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8006510:	d144      	bne.n	800659c <HAL_I2C_Mem_Read+0x228>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006512:	6953      	ldr	r3, [r2, #20]
 8006514:	0758      	lsls	r0, r3, #29
 8006516:	d5fc      	bpl.n	8006512 <HAL_I2C_Mem_Read+0x19e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006518:	6813      	ldr	r3, [r2, #0]
 800651a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800651e:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006520:	6913      	ldr	r3, [r2, #16]
 8006522:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8006524:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
          hi2c->XferSize--;
 8006526:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
          hi2c->pBuffPtr++;
 8006528:	6a60      	ldr	r0, [r4, #36]	@ 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800652a:	6821      	ldr	r1, [r4, #0]
          hi2c->XferCount--;
 800652c:	3b01      	subs	r3, #1
 800652e:	b29b      	uxth	r3, r3
 8006530:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006532:	6909      	ldr	r1, [r1, #16]
          hi2c->XferSize--;
 8006534:	1e53      	subs	r3, r2, #1
          hi2c->pBuffPtr++;
 8006536:	f100 0c01 	add.w	ip, r0, #1
          hi2c->XferSize--;
 800653a:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->pBuffPtr++;
 800653c:	f8c4 c024 	str.w	ip, [r4, #36]	@ 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006540:	7041      	strb	r1, [r0, #1]
          hi2c->XferSize--;
 8006542:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8006544:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
          hi2c->pBuffPtr++;
 8006546:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8006548:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 800654a:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 800654c:	3101      	adds	r1, #1
          hi2c->XferSize--;
 800654e:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 8006550:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8006552:	6261      	str	r1, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8006554:	8522      	strh	r2, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8006556:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006558:	2a00      	cmp	r2, #0
 800655a:	f43f af74 	beq.w	8006446 <HAL_I2C_Mem_Read+0xd2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800655e:	6823      	ldr	r3, [r4, #0]
 8006560:	e7b6      	b.n	80064d0 <HAL_I2C_Mem_Read+0x15c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006562:	695a      	ldr	r2, [r3, #20]
 8006564:	0752      	lsls	r2, r2, #29
 8006566:	d4c0      	bmi.n	80064ea <HAL_I2C_Mem_Read+0x176>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006568:	f7fe ff04 	bl	8005374 <HAL_GetTick>
 800656c:	1b80      	subs	r0, r0, r6
 800656e:	4285      	cmp	r5, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006570:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006572:	d301      	bcc.n	8006578 <HAL_I2C_Mem_Read+0x204>
 8006574:	2d00      	cmp	r5, #0
 8006576:	d1f4      	bne.n	8006562 <HAL_I2C_Mem_Read+0x1ee>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006578:	695a      	ldr	r2, [r3, #20]
 800657a:	0752      	lsls	r2, r2, #29
 800657c:	d4f1      	bmi.n	8006562 <HAL_I2C_Mem_Read+0x1ee>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800657e:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8006580:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006582:	6322      	str	r2, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006584:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006588:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800658c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800658e:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006592:	f043 0320 	orr.w	r3, r3, #32
 8006596:	6423      	str	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8006598:	2701      	movs	r7, #1
 800659a:	e785      	b.n	80064a8 <HAL_I2C_Mem_Read+0x134>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800659c:	6953      	ldr	r3, [r2, #20]
 800659e:	075b      	lsls	r3, r3, #29
 80065a0:	f100 80a4 	bmi.w	80066ec <HAL_I2C_Mem_Read+0x378>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065a4:	f7fe fee6 	bl	8005374 <HAL_GetTick>
 80065a8:	1b80      	subs	r0, r0, r6
 80065aa:	4285      	cmp	r5, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80065ac:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065ae:	d301      	bcc.n	80065b4 <HAL_I2C_Mem_Read+0x240>
 80065b0:	2d00      	cmp	r5, #0
 80065b2:	d1f3      	bne.n	800659c <HAL_I2C_Mem_Read+0x228>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80065b4:	6953      	ldr	r3, [r2, #20]
 80065b6:	075b      	lsls	r3, r3, #29
 80065b8:	d4f0      	bmi.n	800659c <HAL_I2C_Mem_Read+0x228>
 80065ba:	e7e0      	b.n	800657e <HAL_I2C_Mem_Read+0x20a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065bc:	6819      	ldr	r1, [r3, #0]
 80065be:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 80065c2:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065c4:	6819      	ldr	r1, [r3, #0]
 80065c6:	f441 6100 	orr.w	r1, r1, #2048	@ 0x800
 80065ca:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065cc:	9004      	str	r0, [sp, #16]
 80065ce:	6959      	ldr	r1, [r3, #20]
 80065d0:	9104      	str	r1, [sp, #16]
 80065d2:	6999      	ldr	r1, [r3, #24]
 80065d4:	9104      	str	r1, [sp, #16]
 80065d6:	9904      	ldr	r1, [sp, #16]
 80065d8:	e77a      	b.n	80064d0 <HAL_I2C_Mem_Read+0x15c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065da:	f7fe fecb 	bl	8005374 <HAL_GetTick>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80065de:	6823      	ldr	r3, [r4, #0]
 80065e0:	695a      	ldr	r2, [r3, #20]
 80065e2:	0651      	lsls	r1, r2, #25
 80065e4:	d5cb      	bpl.n	800657e <HAL_I2C_Mem_Read+0x20a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80065e6:	695a      	ldr	r2, [r3, #20]
 80065e8:	0652      	lsls	r2, r2, #25
 80065ea:	d403      	bmi.n	80065f4 <HAL_I2C_Mem_Read+0x280>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80065ec:	695a      	ldr	r2, [r3, #20]
 80065ee:	06d0      	lsls	r0, r2, #27
 80065f0:	d5f3      	bpl.n	80065da <HAL_I2C_Mem_Read+0x266>
 80065f2:	e74a      	b.n	800648a <HAL_I2C_Mem_Read+0x116>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065f4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	7013      	strb	r3, [r2, #0]
        hi2c->XferCount--;
 80065fa:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80065fc:	6821      	ldr	r1, [r4, #0]
        hi2c->XferSize--;
 80065fe:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
        hi2c->pBuffPtr++;
 8006600:	6a60      	ldr	r0, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8006602:	3b01      	subs	r3, #1
 8006604:	b29b      	uxth	r3, r3
 8006606:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006608:	694b      	ldr	r3, [r1, #20]
        hi2c->XferSize--;
 800660a:	3a01      	subs	r2, #1
 800660c:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 800660e:	f100 0c01 	add.w	ip, r0, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006612:	075b      	lsls	r3, r3, #29
        hi2c->XferSize--;
 8006614:	8522      	strh	r2, [r4, #40]	@ 0x28
        hi2c->pBuffPtr++;
 8006616:	f8c4 c024 	str.w	ip, [r4, #36]	@ 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800661a:	d59d      	bpl.n	8006558 <HAL_I2C_Mem_Read+0x1e4>
          if (hi2c->XferSize == 3U)
 800661c:	2a03      	cmp	r2, #3
 800661e:	d103      	bne.n	8006628 <HAL_I2C_Mem_Read+0x2b4>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006620:	680b      	ldr	r3, [r1, #0]
 8006622:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006626:	600b      	str	r3, [r1, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006628:	690b      	ldr	r3, [r1, #16]
 800662a:	7043      	strb	r3, [r0, #1]
          hi2c->pBuffPtr++;
 800662c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800662e:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
          hi2c->pBuffPtr++;
 8006630:	3301      	adds	r3, #1
 8006632:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferCount--;
 8006634:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
          hi2c->XferSize--;
 8006636:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8006638:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 800663a:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 800663c:	b29b      	uxth	r3, r3
          hi2c->XferSize--;
 800663e:	8522      	strh	r2, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8006640:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8006642:	e789      	b.n	8006558 <HAL_I2C_Mem_Read+0x1e4>
 8006644:	ffff0000 	.word	0xffff0000
 8006648:	1c6a      	adds	r2, r5, #1
 800664a:	d117      	bne.n	800667c <HAL_I2C_Mem_Read+0x308>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800664c:	695a      	ldr	r2, [r3, #20]
 800664e:	0750      	lsls	r0, r2, #29
 8006650:	d5fc      	bpl.n	800664c <HAL_I2C_Mem_Read+0x2d8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006658:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800665a:	691a      	ldr	r2, [r3, #16]
 800665c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800665e:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 8006660:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
          hi2c->pBuffPtr++;
 8006662:	6a62      	ldr	r2, [r4, #36]	@ 0x24
          hi2c->XferCount--;
 8006664:	3b01      	subs	r3, #1
 8006666:	b29b      	uxth	r3, r3
 8006668:	8563      	strh	r3, [r4, #42]	@ 0x2a
          hi2c->XferSize--;
 800666a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800666c:	3b01      	subs	r3, #1
 800666e:	8523      	strh	r3, [r4, #40]	@ 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006670:	6823      	ldr	r3, [r4, #0]
          hi2c->pBuffPtr++;
 8006672:	1c51      	adds	r1, r2, #1
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006674:	691b      	ldr	r3, [r3, #16]
          hi2c->pBuffPtr++;
 8006676:	6261      	str	r1, [r4, #36]	@ 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006678:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800667a:	e7d7      	b.n	800662c <HAL_I2C_Mem_Read+0x2b8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800667c:	695a      	ldr	r2, [r3, #20]
 800667e:	0751      	lsls	r1, r2, #29
 8006680:	d4e7      	bmi.n	8006652 <HAL_I2C_Mem_Read+0x2de>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006682:	f7fe fe77 	bl	8005374 <HAL_GetTick>
 8006686:	1b80      	subs	r0, r0, r6
 8006688:	4285      	cmp	r5, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800668a:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800668c:	d301      	bcc.n	8006692 <HAL_I2C_Mem_Read+0x31e>
 800668e:	2d00      	cmp	r5, #0
 8006690:	d1f4      	bne.n	800667c <HAL_I2C_Mem_Read+0x308>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006692:	695a      	ldr	r2, [r3, #20]
 8006694:	0751      	lsls	r1, r2, #29
 8006696:	d4f1      	bmi.n	800667c <HAL_I2C_Mem_Read+0x308>
 8006698:	e771      	b.n	800657e <HAL_I2C_Mem_Read+0x20a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800669a:	695a      	ldr	r2, [r3, #20]
 800669c:	0650      	lsls	r0, r2, #25
 800669e:	d421      	bmi.n	80066e4 <HAL_I2C_Mem_Read+0x370>
 80066a0:	b1e5      	cbz	r5, 80066dc <HAL_I2C_Mem_Read+0x368>
 80066a2:	e00c      	b.n	80066be <HAL_I2C_Mem_Read+0x34a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066a4:	f7fe fe66 	bl	8005374 <HAL_GetTick>
 80066a8:	1b80      	subs	r0, r0, r6
 80066aa:	42a8      	cmp	r0, r5
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80066ac:	6823      	ldr	r3, [r4, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066ae:	d903      	bls.n	80066b8 <HAL_I2C_Mem_Read+0x344>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80066b0:	695a      	ldr	r2, [r3, #20]
 80066b2:	0652      	lsls	r2, r2, #25
 80066b4:	f57f af63 	bpl.w	800657e <HAL_I2C_Mem_Read+0x20a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066b8:	695a      	ldr	r2, [r3, #20]
 80066ba:	0650      	lsls	r0, r2, #25
 80066bc:	d412      	bmi.n	80066e4 <HAL_I2C_Mem_Read+0x370>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80066be:	695a      	ldr	r2, [r3, #20]
 80066c0:	06d1      	lsls	r1, r2, #27
 80066c2:	f53f aee2 	bmi.w	800648a <HAL_I2C_Mem_Read+0x116>
 80066c6:	e7ed      	b.n	80066a4 <HAL_I2C_Mem_Read+0x330>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066c8:	f7fe fe54 	bl	8005374 <HAL_GetTick>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80066cc:	6823      	ldr	r3, [r4, #0]
 80066ce:	695a      	ldr	r2, [r3, #20]
 80066d0:	0652      	lsls	r2, r2, #25
 80066d2:	f57f af54 	bpl.w	800657e <HAL_I2C_Mem_Read+0x20a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066d6:	695a      	ldr	r2, [r3, #20]
 80066d8:	0650      	lsls	r0, r2, #25
 80066da:	d403      	bmi.n	80066e4 <HAL_I2C_Mem_Read+0x370>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80066dc:	695a      	ldr	r2, [r3, #20]
 80066de:	06d1      	lsls	r1, r2, #27
 80066e0:	d5f2      	bpl.n	80066c8 <HAL_I2C_Mem_Read+0x354>
 80066e2:	e6d2      	b.n	800648a <HAL_I2C_Mem_Read+0x116>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066e4:	691a      	ldr	r2, [r3, #16]
 80066e6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80066e8:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80066ea:	e79f      	b.n	800662c <HAL_I2C_Mem_Read+0x2b8>
 80066ec:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80066ee:	e713      	b.n	8006518 <HAL_I2C_Mem_Read+0x1a4>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066f0:	6819      	ldr	r1, [r3, #0]
 80066f2:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 80066f6:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066f8:	9003      	str	r0, [sp, #12]
 80066fa:	6959      	ldr	r1, [r3, #20]
 80066fc:	9103      	str	r1, [sp, #12]
 80066fe:	6999      	ldr	r1, [r3, #24]
 8006700:	9103      	str	r1, [sp, #12]
 8006702:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006704:	6819      	ldr	r1, [r3, #0]
 8006706:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 800670a:	6019      	str	r1, [r3, #0]
 800670c:	e6e0      	b.n	80064d0 <HAL_I2C_Mem_Read+0x15c>
 800670e:	bf00      	nop

08006710 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006710:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
 8006714:	2a20      	cmp	r2, #32
{
 8006716:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006718:	fa5f fc82 	uxtb.w	ip, r2
 800671c:	d001      	beq.n	8006722 <HAL_I2CEx_ConfigAnalogFilter+0x12>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800671e:	2002      	movs	r0, #2
  }
}
 8006720:	4770      	bx	lr
    __HAL_I2C_DISABLE(hi2c);
 8006722:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006724:	2024      	movs	r0, #36	@ 0x24
 8006726:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
    __HAL_I2C_DISABLE(hi2c);
 800672a:	6810      	ldr	r0, [r2, #0]
 800672c:	f020 0001 	bic.w	r0, r0, #1
 8006730:	6010      	str	r0, [r2, #0]
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006732:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 8006734:	f020 0010 	bic.w	r0, r0, #16
 8006738:	6250      	str	r0, [r2, #36]	@ 0x24
    hi2c->Instance->FLTR |= AnalogFilter;
 800673a:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 800673c:	4301      	orrs	r1, r0
 800673e:	6251      	str	r1, [r2, #36]	@ 0x24
    __HAL_I2C_ENABLE(hi2c);
 8006740:	6811      	ldr	r1, [r2, #0]
 8006742:	f041 0101 	orr.w	r1, r1, #1
 8006746:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 8006748:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800674a:	f883 c03d 	strb.w	ip, [r3, #61]	@ 0x3d
    return HAL_OK;
 800674e:	4770      	bx	lr

08006750 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006750:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
 8006754:	2a20      	cmp	r2, #32
 8006756:	d001      	beq.n	800675c <HAL_I2CEx_ConfigDigitalFilter+0xc>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8006758:	2002      	movs	r0, #2
  }
}
 800675a:	4770      	bx	lr
{
 800675c:	b410      	push	{r4}
 800675e:	fa5f fc82 	uxtb.w	ip, r2
    __HAL_I2C_DISABLE(hi2c);
 8006762:	6804      	ldr	r4, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006764:	2224      	movs	r2, #36	@ 0x24
 8006766:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    __HAL_I2C_DISABLE(hi2c);
 800676a:	6822      	ldr	r2, [r4, #0]
 800676c:	f022 0201 	bic.w	r2, r2, #1
 8006770:	6022      	str	r2, [r4, #0]
    tmpreg = hi2c->Instance->FLTR;
 8006772:	4603      	mov	r3, r0
 8006774:	6a60      	ldr	r0, [r4, #36]	@ 0x24
    tmpreg &= ~(I2C_FLTR_DNF);
 8006776:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 800677a:	4002      	ands	r2, r0
    tmpreg |= DigitalFilter;
 800677c:	4311      	orrs	r1, r2
    hi2c->Instance->FLTR = tmpreg;
 800677e:	b289      	uxth	r1, r1
 8006780:	6261      	str	r1, [r4, #36]	@ 0x24
    __HAL_I2C_ENABLE(hi2c);
 8006782:	6822      	ldr	r2, [r4, #0]
 8006784:	f042 0201 	orr.w	r2, r2, #1
 8006788:	6022      	str	r2, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800678a:	f883 c03d 	strb.w	ip, [r3, #61]	@ 0x3d
    return HAL_OK;
 800678e:	2000      	movs	r0, #0
}
 8006790:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop

08006798 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006798:	b530      	push	{r4, r5, lr}
 800679a:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 800679c:	4b19      	ldr	r3, [pc, #100]	@ (8006804 <HAL_PWREx_EnableOverDrive+0x6c>)
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800679e:	491a      	ldr	r1, [pc, #104]	@ (8006808 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80067a0:	4d1a      	ldr	r5, [pc, #104]	@ (800680c <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80067a2:	2200      	movs	r2, #0
 80067a4:	9201      	str	r2, [sp, #4]
 80067a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80067a8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80067ac:	641a      	str	r2, [r3, #64]	@ 0x40
 80067ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067b4:	9301      	str	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80067b6:	2201      	movs	r2, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 80067b8:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80067ba:	640a      	str	r2, [r1, #64]	@ 0x40
  tickstart = HAL_GetTick();
 80067bc:	f7fe fdda 	bl	8005374 <HAL_GetTick>
 80067c0:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80067c2:	e005      	b.n	80067d0 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80067c4:	f7fe fdd6 	bl	8005374 <HAL_GetTick>
 80067c8:	1b00      	subs	r0, r0, r4
 80067ca:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80067ce:	d816      	bhi.n	80067fe <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80067d0:	686b      	ldr	r3, [r5, #4]
 80067d2:	03da      	lsls	r2, r3, #15
 80067d4:	d5f6      	bpl.n	80067c4 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80067d6:	4b0c      	ldr	r3, [pc, #48]	@ (8006808 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80067d8:	4d0c      	ldr	r5, [pc, #48]	@ (800680c <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80067da:	2201      	movs	r2, #1
 80067dc:	645a      	str	r2, [r3, #68]	@ 0x44
  tickstart = HAL_GetTick();
 80067de:	f7fe fdc9 	bl	8005374 <HAL_GetTick>
 80067e2:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80067e4:	e005      	b.n	80067f2 <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80067e6:	f7fe fdc5 	bl	8005374 <HAL_GetTick>
 80067ea:	1b00      	subs	r0, r0, r4
 80067ec:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80067f0:	d805      	bhi.n	80067fe <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80067f2:	686b      	ldr	r3, [r5, #4]
 80067f4:	039b      	lsls	r3, r3, #14
 80067f6:	d5f6      	bpl.n	80067e6 <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80067f8:	2000      	movs	r0, #0
}
 80067fa:	b003      	add	sp, #12
 80067fc:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 80067fe:	2003      	movs	r0, #3
}
 8006800:	b003      	add	sp, #12
 8006802:	bd30      	pop	{r4, r5, pc}
 8006804:	40023800 	.word	0x40023800
 8006808:	420e0000 	.word	0x420e0000
 800680c:	40007000 	.word	0x40007000

08006810 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006810:	2800      	cmp	r0, #0
 8006812:	f000 81d8 	beq.w	8006bc6 <HAL_RCC_OscConfig+0x3b6>
{
 8006816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800681a:	6803      	ldr	r3, [r0, #0]
 800681c:	07dd      	lsls	r5, r3, #31
{
 800681e:	b082      	sub	sp, #8
 8006820:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006822:	d52f      	bpl.n	8006884 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006824:	499d      	ldr	r1, [pc, #628]	@ (8006a9c <HAL_RCC_OscConfig+0x28c>)
 8006826:	688a      	ldr	r2, [r1, #8]
 8006828:	f002 020c 	and.w	r2, r2, #12
 800682c:	2a04      	cmp	r2, #4
 800682e:	f000 80ec 	beq.w	8006a0a <HAL_RCC_OscConfig+0x1fa>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006832:	688a      	ldr	r2, [r1, #8]
 8006834:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006838:	2a08      	cmp	r2, #8
 800683a:	f000 80e2 	beq.w	8006a02 <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800683e:	6863      	ldr	r3, [r4, #4]
 8006840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006844:	f000 80eb 	beq.w	8006a1e <HAL_RCC_OscConfig+0x20e>
 8006848:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800684c:	f000 8173 	beq.w	8006b36 <HAL_RCC_OscConfig+0x326>
 8006850:	4d92      	ldr	r5, [pc, #584]	@ (8006a9c <HAL_RCC_OscConfig+0x28c>)
 8006852:	682a      	ldr	r2, [r5, #0]
 8006854:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006858:	602a      	str	r2, [r5, #0]
 800685a:	682a      	ldr	r2, [r5, #0]
 800685c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006860:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006862:	2b00      	cmp	r3, #0
 8006864:	f040 80e0 	bne.w	8006a28 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006868:	f7fe fd84 	bl	8005374 <HAL_GetTick>
 800686c:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800686e:	e005      	b.n	800687c <HAL_RCC_OscConfig+0x6c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006870:	f7fe fd80 	bl	8005374 <HAL_GetTick>
 8006874:	1b80      	subs	r0, r0, r6
 8006876:	2864      	cmp	r0, #100	@ 0x64
 8006878:	f200 8100 	bhi.w	8006a7c <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800687c:	682b      	ldr	r3, [r5, #0]
 800687e:	039f      	lsls	r7, r3, #14
 8006880:	d4f6      	bmi.n	8006870 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006882:	6823      	ldr	r3, [r4, #0]
 8006884:	079d      	lsls	r5, r3, #30
 8006886:	d528      	bpl.n	80068da <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006888:	4a84      	ldr	r2, [pc, #528]	@ (8006a9c <HAL_RCC_OscConfig+0x28c>)
 800688a:	6891      	ldr	r1, [r2, #8]
 800688c:	f011 0f0c 	tst.w	r1, #12
 8006890:	f000 809b 	beq.w	80069ca <HAL_RCC_OscConfig+0x1ba>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006894:	6891      	ldr	r1, [r2, #8]
 8006896:	f001 010c 	and.w	r1, r1, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800689a:	2908      	cmp	r1, #8
 800689c:	f000 8091 	beq.w	80069c2 <HAL_RCC_OscConfig+0x1b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80068a0:	68e3      	ldr	r3, [r4, #12]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f000 810c 	beq.w	8006ac0 <HAL_RCC_OscConfig+0x2b0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068a8:	4b7d      	ldr	r3, [pc, #500]	@ (8006aa0 <HAL_RCC_OscConfig+0x290>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068aa:	4e7c      	ldr	r6, [pc, #496]	@ (8006a9c <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 80068ac:	2201      	movs	r2, #1
 80068ae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80068b0:	f7fe fd60 	bl	8005374 <HAL_GetTick>
 80068b4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068b6:	e005      	b.n	80068c4 <HAL_RCC_OscConfig+0xb4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068b8:	f7fe fd5c 	bl	8005374 <HAL_GetTick>
 80068bc:	1b40      	subs	r0, r0, r5
 80068be:	2802      	cmp	r0, #2
 80068c0:	f200 80dc 	bhi.w	8006a7c <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068c4:	6833      	ldr	r3, [r6, #0]
 80068c6:	079f      	lsls	r7, r3, #30
 80068c8:	d5f6      	bpl.n	80068b8 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068ca:	6833      	ldr	r3, [r6, #0]
 80068cc:	6922      	ldr	r2, [r4, #16]
 80068ce:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80068d2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80068d6:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068d8:	6823      	ldr	r3, [r4, #0]
 80068da:	071a      	lsls	r2, r3, #28
 80068dc:	d45c      	bmi.n	8006998 <HAL_RCC_OscConfig+0x188>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068de:	075d      	lsls	r5, r3, #29
 80068e0:	d53a      	bpl.n	8006958 <HAL_RCC_OscConfig+0x148>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068e2:	4a6e      	ldr	r2, [pc, #440]	@ (8006a9c <HAL_RCC_OscConfig+0x28c>)
 80068e4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80068e6:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 80068ea:	f040 8088 	bne.w	80069fe <HAL_RCC_OscConfig+0x1ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068ee:	9301      	str	r3, [sp, #4]
 80068f0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80068f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80068f8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80068fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068fe:	9301      	str	r3, [sp, #4]
 8006900:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006902:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006904:	4e67      	ldr	r6, [pc, #412]	@ (8006aa4 <HAL_RCC_OscConfig+0x294>)
 8006906:	6833      	ldr	r3, [r6, #0]
 8006908:	05d8      	lsls	r0, r3, #23
 800690a:	f140 80a7 	bpl.w	8006a5c <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800690e:	68a3      	ldr	r3, [r4, #8]
 8006910:	2b01      	cmp	r3, #1
 8006912:	f000 80b7 	beq.w	8006a84 <HAL_RCC_OscConfig+0x274>
 8006916:	2b05      	cmp	r3, #5
 8006918:	f000 811d 	beq.w	8006b56 <HAL_RCC_OscConfig+0x346>
 800691c:	4e5f      	ldr	r6, [pc, #380]	@ (8006a9c <HAL_RCC_OscConfig+0x28c>)
 800691e:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8006920:	f022 0201 	bic.w	r2, r2, #1
 8006924:	6732      	str	r2, [r6, #112]	@ 0x70
 8006926:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8006928:	f022 0204 	bic.w	r2, r2, #4
 800692c:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800692e:	2b00      	cmp	r3, #0
 8006930:	f040 80ad 	bne.w	8006a8e <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006934:	f7fe fd1e 	bl	8005374 <HAL_GetTick>

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006938:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800693c:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800693e:	e005      	b.n	800694c <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006940:	f7fe fd18 	bl	8005374 <HAL_GetTick>
 8006944:	1bc0      	subs	r0, r0, r7
 8006946:	4540      	cmp	r0, r8
 8006948:	f200 8098 	bhi.w	8006a7c <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800694c:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800694e:	079b      	lsls	r3, r3, #30
 8006950:	d4f6      	bmi.n	8006940 <HAL_RCC_OscConfig+0x130>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006952:	2d00      	cmp	r5, #0
 8006954:	f040 80f9 	bne.w	8006b4a <HAL_RCC_OscConfig+0x33a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006958:	69a3      	ldr	r3, [r4, #24]
 800695a:	b1cb      	cbz	r3, 8006990 <HAL_RCC_OscConfig+0x180>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800695c:	4d4f      	ldr	r5, [pc, #316]	@ (8006a9c <HAL_RCC_OscConfig+0x28c>)
 800695e:	68aa      	ldr	r2, [r5, #8]
 8006960:	f002 020c 	and.w	r2, r2, #12
 8006964:	2a08      	cmp	r2, #8
 8006966:	f000 80bc 	beq.w	8006ae2 <HAL_RCC_OscConfig+0x2d2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800696a:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800696c:	4b4c      	ldr	r3, [pc, #304]	@ (8006aa0 <HAL_RCC_OscConfig+0x290>)
 800696e:	f04f 0200 	mov.w	r2, #0
 8006972:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006974:	f000 80f9 	beq.w	8006b6a <HAL_RCC_OscConfig+0x35a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006978:	f7fe fcfc 	bl	8005374 <HAL_GetTick>
 800697c:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800697e:	e004      	b.n	800698a <HAL_RCC_OscConfig+0x17a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006980:	f7fe fcf8 	bl	8005374 <HAL_GetTick>
 8006984:	1b00      	subs	r0, r0, r4
 8006986:	2802      	cmp	r0, #2
 8006988:	d878      	bhi.n	8006a7c <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800698a:	682b      	ldr	r3, [r5, #0]
 800698c:	019b      	lsls	r3, r3, #6
 800698e:	d4f7      	bmi.n	8006980 <HAL_RCC_OscConfig+0x170>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8006990:	2000      	movs	r0, #0
}
 8006992:	b002      	add	sp, #8
 8006994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006998:	6963      	ldr	r3, [r4, #20]
 800699a:	b1fb      	cbz	r3, 80069dc <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_LSI_ENABLE();
 800699c:	4b40      	ldr	r3, [pc, #256]	@ (8006aa0 <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800699e:	4e3f      	ldr	r6, [pc, #252]	@ (8006a9c <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_ENABLE();
 80069a0:	2201      	movs	r2, #1
 80069a2:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 80069a6:	f7fe fce5 	bl	8005374 <HAL_GetTick>
 80069aa:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069ac:	e004      	b.n	80069b8 <HAL_RCC_OscConfig+0x1a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069ae:	f7fe fce1 	bl	8005374 <HAL_GetTick>
 80069b2:	1b40      	subs	r0, r0, r5
 80069b4:	2802      	cmp	r0, #2
 80069b6:	d861      	bhi.n	8006a7c <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069b8:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80069ba:	079b      	lsls	r3, r3, #30
 80069bc:	d5f7      	bpl.n	80069ae <HAL_RCC_OscConfig+0x19e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069be:	6823      	ldr	r3, [r4, #0]
 80069c0:	e78d      	b.n	80068de <HAL_RCC_OscConfig+0xce>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069c2:	6852      	ldr	r2, [r2, #4]
 80069c4:	0251      	lsls	r1, r2, #9
 80069c6:	f53f af6b 	bmi.w	80068a0 <HAL_RCC_OscConfig+0x90>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069ca:	4a34      	ldr	r2, [pc, #208]	@ (8006a9c <HAL_RCC_OscConfig+0x28c>)
 80069cc:	6812      	ldr	r2, [r2, #0]
 80069ce:	0792      	lsls	r2, r2, #30
 80069d0:	d538      	bpl.n	8006a44 <HAL_RCC_OscConfig+0x234>
 80069d2:	68e2      	ldr	r2, [r4, #12]
 80069d4:	2a01      	cmp	r2, #1
 80069d6:	d035      	beq.n	8006a44 <HAL_RCC_OscConfig+0x234>
    return HAL_ERROR;
 80069d8:	2001      	movs	r0, #1
 80069da:	e7da      	b.n	8006992 <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_DISABLE();
 80069dc:	4a30      	ldr	r2, [pc, #192]	@ (8006aa0 <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069de:	4e2f      	ldr	r6, [pc, #188]	@ (8006a9c <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_DISABLE();
 80069e0:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 80069e4:	f7fe fcc6 	bl	8005374 <HAL_GetTick>
 80069e8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069ea:	e004      	b.n	80069f6 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069ec:	f7fe fcc2 	bl	8005374 <HAL_GetTick>
 80069f0:	1b40      	subs	r0, r0, r5
 80069f2:	2802      	cmp	r0, #2
 80069f4:	d842      	bhi.n	8006a7c <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069f6:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80069f8:	079f      	lsls	r7, r3, #30
 80069fa:	d4f7      	bmi.n	80069ec <HAL_RCC_OscConfig+0x1dc>
 80069fc:	e7df      	b.n	80069be <HAL_RCC_OscConfig+0x1ae>
    FlagStatus       pwrclkchanged = RESET;
 80069fe:	2500      	movs	r5, #0
 8006a00:	e780      	b.n	8006904 <HAL_RCC_OscConfig+0xf4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a02:	684a      	ldr	r2, [r1, #4]
 8006a04:	0251      	lsls	r1, r2, #9
 8006a06:	f57f af1a 	bpl.w	800683e <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a0a:	4a24      	ldr	r2, [pc, #144]	@ (8006a9c <HAL_RCC_OscConfig+0x28c>)
 8006a0c:	6812      	ldr	r2, [r2, #0]
 8006a0e:	0392      	lsls	r2, r2, #14
 8006a10:	f57f af38 	bpl.w	8006884 <HAL_RCC_OscConfig+0x74>
 8006a14:	6862      	ldr	r2, [r4, #4]
 8006a16:	2a00      	cmp	r2, #0
 8006a18:	f47f af34 	bne.w	8006884 <HAL_RCC_OscConfig+0x74>
 8006a1c:	e7dc      	b.n	80069d8 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a1e:	4a1f      	ldr	r2, [pc, #124]	@ (8006a9c <HAL_RCC_OscConfig+0x28c>)
 8006a20:	6813      	ldr	r3, [r2, #0]
 8006a22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a26:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006a28:	f7fe fca4 	bl	8005374 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a2c:	4e1b      	ldr	r6, [pc, #108]	@ (8006a9c <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8006a2e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a30:	e004      	b.n	8006a3c <HAL_RCC_OscConfig+0x22c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a32:	f7fe fc9f 	bl	8005374 <HAL_GetTick>
 8006a36:	1b40      	subs	r0, r0, r5
 8006a38:	2864      	cmp	r0, #100	@ 0x64
 8006a3a:	d81f      	bhi.n	8006a7c <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a3c:	6833      	ldr	r3, [r6, #0]
 8006a3e:	039b      	lsls	r3, r3, #14
 8006a40:	d5f7      	bpl.n	8006a32 <HAL_RCC_OscConfig+0x222>
 8006a42:	e71e      	b.n	8006882 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a44:	4915      	ldr	r1, [pc, #84]	@ (8006a9c <HAL_RCC_OscConfig+0x28c>)
 8006a46:	6920      	ldr	r0, [r4, #16]
 8006a48:	680a      	ldr	r2, [r1, #0]
 8006a4a:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8006a4e:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8006a52:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a54:	071a      	lsls	r2, r3, #28
 8006a56:	f57f af42 	bpl.w	80068de <HAL_RCC_OscConfig+0xce>
 8006a5a:	e79d      	b.n	8006998 <HAL_RCC_OscConfig+0x188>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a5c:	6833      	ldr	r3, [r6, #0]
 8006a5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a62:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006a64:	f7fe fc86 	bl	8005374 <HAL_GetTick>
 8006a68:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a6a:	6833      	ldr	r3, [r6, #0]
 8006a6c:	05d9      	lsls	r1, r3, #23
 8006a6e:	f53f af4e 	bmi.w	800690e <HAL_RCC_OscConfig+0xfe>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a72:	f7fe fc7f 	bl	8005374 <HAL_GetTick>
 8006a76:	1bc0      	subs	r0, r0, r7
 8006a78:	2802      	cmp	r0, #2
 8006a7a:	d9f6      	bls.n	8006a6a <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8006a7c:	2003      	movs	r0, #3
}
 8006a7e:	b002      	add	sp, #8
 8006a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a84:	4a05      	ldr	r2, [pc, #20]	@ (8006a9c <HAL_RCC_OscConfig+0x28c>)
 8006a86:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8006a88:	f043 0301 	orr.w	r3, r3, #1
 8006a8c:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8006a8e:	f7fe fc71 	bl	8005374 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a92:	4f02      	ldr	r7, [pc, #8]	@ (8006a9c <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8006a94:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a96:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a9a:	e00a      	b.n	8006ab2 <HAL_RCC_OscConfig+0x2a2>
 8006a9c:	40023800 	.word	0x40023800
 8006aa0:	42470000 	.word	0x42470000
 8006aa4:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aa8:	f7fe fc64 	bl	8005374 <HAL_GetTick>
 8006aac:	1b80      	subs	r0, r0, r6
 8006aae:	4540      	cmp	r0, r8
 8006ab0:	d8e4      	bhi.n	8006a7c <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ab2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ab4:	079a      	lsls	r2, r3, #30
 8006ab6:	d5f7      	bpl.n	8006aa8 <HAL_RCC_OscConfig+0x298>
    if (pwrclkchanged == SET)
 8006ab8:	2d00      	cmp	r5, #0
 8006aba:	f43f af4d 	beq.w	8006958 <HAL_RCC_OscConfig+0x148>
 8006abe:	e044      	b.n	8006b4a <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_HSI_DISABLE();
 8006ac0:	4a42      	ldr	r2, [pc, #264]	@ (8006bcc <HAL_RCC_OscConfig+0x3bc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ac2:	4e43      	ldr	r6, [pc, #268]	@ (8006bd0 <HAL_RCC_OscConfig+0x3c0>)
        __HAL_RCC_HSI_DISABLE();
 8006ac4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006ac6:	f7fe fc55 	bl	8005374 <HAL_GetTick>
 8006aca:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006acc:	e004      	b.n	8006ad8 <HAL_RCC_OscConfig+0x2c8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ace:	f7fe fc51 	bl	8005374 <HAL_GetTick>
 8006ad2:	1b40      	subs	r0, r0, r5
 8006ad4:	2802      	cmp	r0, #2
 8006ad6:	d8d1      	bhi.n	8006a7c <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ad8:	6833      	ldr	r3, [r6, #0]
 8006ada:	0799      	lsls	r1, r3, #30
 8006adc:	d4f7      	bmi.n	8006ace <HAL_RCC_OscConfig+0x2be>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	e6fb      	b.n	80068da <HAL_RCC_OscConfig+0xca>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	f43f af78 	beq.w	80069d8 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 8006ae8:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006aea:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aec:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006af0:	4291      	cmp	r1, r2
 8006af2:	f47f af71 	bne.w	80069d8 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006af6:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006af8:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006afc:	4291      	cmp	r1, r2
 8006afe:	f47f af6b 	bne.w	80069d8 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b02:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006b04:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8006b08:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b0a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8006b0e:	f47f af63 	bne.w	80069d8 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b12:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8006b14:	0852      	lsrs	r2, r2, #1
 8006b16:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8006b1a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b1c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8006b20:	f47f af5a 	bne.w	80069d8 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b24:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006b26:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b2a:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8006b2e:	bf14      	ite	ne
 8006b30:	2001      	movne	r0, #1
 8006b32:	2000      	moveq	r0, #0
 8006b34:	e72d      	b.n	8006992 <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b36:	4b26      	ldr	r3, [pc, #152]	@ (8006bd0 <HAL_RCC_OscConfig+0x3c0>)
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006b3e:	601a      	str	r2, [r3, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006b46:	601a      	str	r2, [r3, #0]
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b48:	e76e      	b.n	8006a28 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b4a:	4a21      	ldr	r2, [pc, #132]	@ (8006bd0 <HAL_RCC_OscConfig+0x3c0>)
 8006b4c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8006b4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b52:	6413      	str	r3, [r2, #64]	@ 0x40
 8006b54:	e700      	b.n	8006958 <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b56:	4b1e      	ldr	r3, [pc, #120]	@ (8006bd0 <HAL_RCC_OscConfig+0x3c0>)
 8006b58:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006b5a:	f042 0204 	orr.w	r2, r2, #4
 8006b5e:	671a      	str	r2, [r3, #112]	@ 0x70
 8006b60:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006b62:	f042 0201 	orr.w	r2, r2, #1
 8006b66:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b68:	e791      	b.n	8006a8e <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 8006b6a:	f7fe fc03 	bl	8005374 <HAL_GetTick>
 8006b6e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b70:	e005      	b.n	8006b7e <HAL_RCC_OscConfig+0x36e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b72:	f7fe fbff 	bl	8005374 <HAL_GetTick>
 8006b76:	1b80      	subs	r0, r0, r6
 8006b78:	2802      	cmp	r0, #2
 8006b7a:	f63f af7f 	bhi.w	8006a7c <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b7e:	682b      	ldr	r3, [r5, #0]
 8006b80:	0199      	lsls	r1, r3, #6
 8006b82:	d4f6      	bmi.n	8006b72 <HAL_RCC_OscConfig+0x362>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b84:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8006b88:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006b8a:	430b      	orrs	r3, r1
 8006b8c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006b90:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	@ 0x28
 8006b94:	0852      	lsrs	r2, r2, #1
 8006b96:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006b9a:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8006b9c:	490b      	ldr	r1, [pc, #44]	@ (8006bcc <HAL_RCC_OscConfig+0x3bc>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8006ba2:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006ba4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8006ba6:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8006ba8:	f7fe fbe4 	bl	8005374 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bac:	4d08      	ldr	r5, [pc, #32]	@ (8006bd0 <HAL_RCC_OscConfig+0x3c0>)
        tickstart = HAL_GetTick();
 8006bae:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bb0:	e005      	b.n	8006bbe <HAL_RCC_OscConfig+0x3ae>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bb2:	f7fe fbdf 	bl	8005374 <HAL_GetTick>
 8006bb6:	1b00      	subs	r0, r0, r4
 8006bb8:	2802      	cmp	r0, #2
 8006bba:	f63f af5f 	bhi.w	8006a7c <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bbe:	682b      	ldr	r3, [r5, #0]
 8006bc0:	019a      	lsls	r2, r3, #6
 8006bc2:	d5f6      	bpl.n	8006bb2 <HAL_RCC_OscConfig+0x3a2>
 8006bc4:	e6e4      	b.n	8006990 <HAL_RCC_OscConfig+0x180>
    return HAL_ERROR;
 8006bc6:	2001      	movs	r0, #1
}
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	42470000 	.word	0x42470000
 8006bd0:	40023800 	.word	0x40023800

08006bd4 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006bd4:	4916      	ldr	r1, [pc, #88]	@ (8006c30 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8006bd6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006bd8:	688b      	ldr	r3, [r1, #8]
 8006bda:	f003 030c 	and.w	r3, r3, #12
 8006bde:	2b04      	cmp	r3, #4
 8006be0:	d01b      	beq.n	8006c1a <HAL_RCC_GetSysClockFreq+0x46>
 8006be2:	2b08      	cmp	r3, #8
 8006be4:	d117      	bne.n	8006c16 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006be6:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006be8:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bea:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006bec:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006bf0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006bf4:	d113      	bne.n	8006c1e <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bf6:	480f      	ldr	r0, [pc, #60]	@ (8006c34 <HAL_RCC_GetSysClockFreq+0x60>)
 8006bf8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8006bfc:	fba1 0100 	umull	r0, r1, r1, r0
 8006c00:	f7f9 ff3c 	bl	8000a7c <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006c04:	4b0a      	ldr	r3, [pc, #40]	@ (8006c30 <HAL_RCC_GetSysClockFreq+0x5c>)
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8006c10:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8006c14:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8006c16:	4807      	ldr	r0, [pc, #28]	@ (8006c34 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8006c18:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c1a:	4807      	ldr	r0, [pc, #28]	@ (8006c38 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8006c1c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c1e:	4806      	ldr	r0, [pc, #24]	@ (8006c38 <HAL_RCC_GetSysClockFreq+0x64>)
 8006c20:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8006c24:	2300      	movs	r3, #0
 8006c26:	fba1 0100 	umull	r0, r1, r1, r0
 8006c2a:	f7f9 ff27 	bl	8000a7c <__aeabi_uldivmod>
 8006c2e:	e7e9      	b.n	8006c04 <HAL_RCC_GetSysClockFreq+0x30>
 8006c30:	40023800 	.word	0x40023800
 8006c34:	00f42400 	.word	0x00f42400
 8006c38:	017d7840 	.word	0x017d7840

08006c3c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006c3c:	2800      	cmp	r0, #0
 8006c3e:	f000 8087 	beq.w	8006d50 <HAL_RCC_ClockConfig+0x114>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c42:	4a48      	ldr	r2, [pc, #288]	@ (8006d64 <HAL_RCC_ClockConfig+0x128>)
 8006c44:	6813      	ldr	r3, [r2, #0]
 8006c46:	f003 030f 	and.w	r3, r3, #15
 8006c4a:	428b      	cmp	r3, r1
{
 8006c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c50:	460d      	mov	r5, r1
 8006c52:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c54:	d209      	bcs.n	8006c6a <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c56:	b2cb      	uxtb	r3, r1
 8006c58:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c5a:	6813      	ldr	r3, [r2, #0]
 8006c5c:	f003 030f 	and.w	r3, r3, #15
 8006c60:	428b      	cmp	r3, r1
 8006c62:	d002      	beq.n	8006c6a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8006c64:	2001      	movs	r0, #1
}
 8006c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c6a:	6823      	ldr	r3, [r4, #0]
 8006c6c:	0798      	lsls	r0, r3, #30
 8006c6e:	d514      	bpl.n	8006c9a <HAL_RCC_ClockConfig+0x5e>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c70:	0759      	lsls	r1, r3, #29
 8006c72:	d504      	bpl.n	8006c7e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c74:	493c      	ldr	r1, [pc, #240]	@ (8006d68 <HAL_RCC_ClockConfig+0x12c>)
 8006c76:	688a      	ldr	r2, [r1, #8]
 8006c78:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8006c7c:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c7e:	071a      	lsls	r2, r3, #28
 8006c80:	d504      	bpl.n	8006c8c <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c82:	4939      	ldr	r1, [pc, #228]	@ (8006d68 <HAL_RCC_ClockConfig+0x12c>)
 8006c84:	688a      	ldr	r2, [r1, #8]
 8006c86:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 8006c8a:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c8c:	4936      	ldr	r1, [pc, #216]	@ (8006d68 <HAL_RCC_ClockConfig+0x12c>)
 8006c8e:	68a0      	ldr	r0, [r4, #8]
 8006c90:	688a      	ldr	r2, [r1, #8]
 8006c92:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8006c96:	4302      	orrs	r2, r0
 8006c98:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c9a:	07df      	lsls	r7, r3, #31
 8006c9c:	d521      	bpl.n	8006ce2 <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c9e:	6862      	ldr	r2, [r4, #4]
 8006ca0:	2a01      	cmp	r2, #1
 8006ca2:	d057      	beq.n	8006d54 <HAL_RCC_ClockConfig+0x118>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ca4:	1e93      	subs	r3, r2, #2
 8006ca6:	2b01      	cmp	r3, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ca8:	4b2f      	ldr	r3, [pc, #188]	@ (8006d68 <HAL_RCC_ClockConfig+0x12c>)
 8006caa:	681b      	ldr	r3, [r3, #0]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cac:	d94d      	bls.n	8006d4a <HAL_RCC_ClockConfig+0x10e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cae:	0799      	lsls	r1, r3, #30
 8006cb0:	d5d8      	bpl.n	8006c64 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006cb2:	4e2d      	ldr	r6, [pc, #180]	@ (8006d68 <HAL_RCC_ClockConfig+0x12c>)
 8006cb4:	68b3      	ldr	r3, [r6, #8]
 8006cb6:	f023 0303 	bic.w	r3, r3, #3
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8006cbe:	f7fe fb59 	bl	8005374 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cc2:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8006cc6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cc8:	e004      	b.n	8006cd4 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cca:	f7fe fb53 	bl	8005374 <HAL_GetTick>
 8006cce:	1bc0      	subs	r0, r0, r7
 8006cd0:	4540      	cmp	r0, r8
 8006cd2:	d844      	bhi.n	8006d5e <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cd4:	68b3      	ldr	r3, [r6, #8]
 8006cd6:	6862      	ldr	r2, [r4, #4]
 8006cd8:	f003 030c 	and.w	r3, r3, #12
 8006cdc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006ce0:	d1f3      	bne.n	8006cca <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ce2:	4a20      	ldr	r2, [pc, #128]	@ (8006d64 <HAL_RCC_ClockConfig+0x128>)
 8006ce4:	6813      	ldr	r3, [r2, #0]
 8006ce6:	f003 030f 	and.w	r3, r3, #15
 8006cea:	42ab      	cmp	r3, r5
 8006cec:	d906      	bls.n	8006cfc <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cee:	b2eb      	uxtb	r3, r5
 8006cf0:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cf2:	6813      	ldr	r3, [r2, #0]
 8006cf4:	f003 030f 	and.w	r3, r3, #15
 8006cf8:	42ab      	cmp	r3, r5
 8006cfa:	d1b3      	bne.n	8006c64 <HAL_RCC_ClockConfig+0x28>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cfc:	6823      	ldr	r3, [r4, #0]
 8006cfe:	075a      	lsls	r2, r3, #29
 8006d00:	d506      	bpl.n	8006d10 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d02:	4919      	ldr	r1, [pc, #100]	@ (8006d68 <HAL_RCC_ClockConfig+0x12c>)
 8006d04:	68e0      	ldr	r0, [r4, #12]
 8006d06:	688a      	ldr	r2, [r1, #8]
 8006d08:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8006d0c:	4302      	orrs	r2, r0
 8006d0e:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d10:	071b      	lsls	r3, r3, #28
 8006d12:	d507      	bpl.n	8006d24 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d14:	4a14      	ldr	r2, [pc, #80]	@ (8006d68 <HAL_RCC_ClockConfig+0x12c>)
 8006d16:	6921      	ldr	r1, [r4, #16]
 8006d18:	6893      	ldr	r3, [r2, #8]
 8006d1a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8006d1e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006d22:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006d24:	f7ff ff56 	bl	8006bd4 <HAL_RCC_GetSysClockFreq>
 8006d28:	4a0f      	ldr	r2, [pc, #60]	@ (8006d68 <HAL_RCC_ClockConfig+0x12c>)
 8006d2a:	4c10      	ldr	r4, [pc, #64]	@ (8006d6c <HAL_RCC_ClockConfig+0x130>)
 8006d2c:	6892      	ldr	r2, [r2, #8]
 8006d2e:	4910      	ldr	r1, [pc, #64]	@ (8006d70 <HAL_RCC_ClockConfig+0x134>)
 8006d30:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8006d34:	4603      	mov	r3, r0
 8006d36:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick(uwTickPrio);
 8006d38:	480e      	ldr	r0, [pc, #56]	@ (8006d74 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006d3a:	40d3      	lsrs	r3, r2
  HAL_InitTick(uwTickPrio);
 8006d3c:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006d3e:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 8006d40:	f7fe face 	bl	80052e0 <HAL_InitTick>
  return HAL_OK;
 8006d44:	2000      	movs	r0, #0
}
 8006d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d4a:	0198      	lsls	r0, r3, #6
 8006d4c:	d4b1      	bmi.n	8006cb2 <HAL_RCC_ClockConfig+0x76>
 8006d4e:	e789      	b.n	8006c64 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8006d50:	2001      	movs	r0, #1
}
 8006d52:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d54:	4b04      	ldr	r3, [pc, #16]	@ (8006d68 <HAL_RCC_ClockConfig+0x12c>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	039e      	lsls	r6, r3, #14
 8006d5a:	d4aa      	bmi.n	8006cb2 <HAL_RCC_ClockConfig+0x76>
 8006d5c:	e782      	b.n	8006c64 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8006d5e:	2003      	movs	r0, #3
 8006d60:	e781      	b.n	8006c66 <HAL_RCC_ClockConfig+0x2a>
 8006d62:	bf00      	nop
 8006d64:	40023c00 	.word	0x40023c00
 8006d68:	40023800 	.word	0x40023800
 8006d6c:	08009920 	.word	0x08009920
 8006d70:	200008d0 	.word	0x200008d0
 8006d74:	200008d8 	.word	0x200008d8

08006d78 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006d78:	4b04      	ldr	r3, [pc, #16]	@ (8006d8c <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8006d7a:	4905      	ldr	r1, [pc, #20]	@ (8006d90 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	4a05      	ldr	r2, [pc, #20]	@ (8006d94 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006d80:	6808      	ldr	r0, [r1, #0]
 8006d82:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8006d86:	5cd3      	ldrb	r3, [r2, r3]
}
 8006d88:	40d8      	lsrs	r0, r3
 8006d8a:	4770      	bx	lr
 8006d8c:	40023800 	.word	0x40023800
 8006d90:	200008d0 	.word	0x200008d0
 8006d94:	08009918 	.word	0x08009918

08006d98 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006d98:	4b04      	ldr	r3, [pc, #16]	@ (8006dac <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8006d9a:	4905      	ldr	r1, [pc, #20]	@ (8006db0 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	4a05      	ldr	r2, [pc, #20]	@ (8006db4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006da0:	6808      	ldr	r0, [r1, #0]
 8006da2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8006da6:	5cd3      	ldrb	r3, [r2, r3]
}
 8006da8:	40d8      	lsrs	r0, r3
 8006daa:	4770      	bx	lr
 8006dac:	40023800 	.word	0x40023800
 8006db0:	200008d0 	.word	0x200008d0
 8006db4:	08009918 	.word	0x08009918

08006db8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006db8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006dbc:	b083      	sub	sp, #12
 8006dbe:	4698      	mov	r8, r3
 8006dc0:	4615      	mov	r5, r2
 8006dc2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006dc4:	4607      	mov	r7, r0
 8006dc6:	460c      	mov	r4, r1
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006dc8:	f7fe fad4 	bl	8005374 <HAL_GetTick>
 8006dcc:	4446      	add	r6, r8
 8006dce:	1a36      	subs	r6, r6, r0
  tmp_tickstart = HAL_GetTick();
 8006dd0:	f7fe fad0 	bl	8005374 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006dd4:	4b2c      	ldr	r3, [pc, #176]	@ (8006e88 <SPI_WaitFlagStateUntilTimeout+0xd0>)
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	f3c2 32cb 	ubfx	r2, r2, #15, #12
 8006ddc:	fb06 f202 	mul.w	r2, r6, r2
 8006de0:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006de4:	9201      	str	r2, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006de6:	bf18      	it	ne
 8006de8:	4681      	movne	r9, r0
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	d11a      	bne.n	8006e24 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8006dee:	6893      	ldr	r3, [r2, #8]
 8006df0:	ea34 0303 	bics.w	r3, r4, r3
 8006df4:	bf0c      	ite	eq
 8006df6:	2301      	moveq	r3, #1
 8006df8:	2300      	movne	r3, #0
 8006dfa:	429d      	cmp	r5, r3
 8006dfc:	d1f7      	bne.n	8006dee <SPI_WaitFlagStateUntilTimeout+0x36>
      }
      count--;
    }
  }

  return HAL_OK;
 8006dfe:	2000      	movs	r0, #0
}
 8006e00:	b003      	add	sp, #12
 8006e02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e06:	f7fe fab5 	bl	8005374 <HAL_GetTick>
 8006e0a:	eba0 0009 	sub.w	r0, r0, r9
 8006e0e:	42b0      	cmp	r0, r6
 8006e10:	d211      	bcs.n	8006e36 <SPI_WaitFlagStateUntilTimeout+0x7e>
      if (count == 0U)
 8006e12:	9b01      	ldr	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e14:	683a      	ldr	r2, [r7, #0]
        tmp_timeout = 0U;
 8006e16:	2b00      	cmp	r3, #0
      count--;
 8006e18:	9b01      	ldr	r3, [sp, #4]
 8006e1a:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8006e1e:	bf08      	it	eq
 8006e20:	2600      	moveq	r6, #0
      count--;
 8006e22:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e24:	6893      	ldr	r3, [r2, #8]
 8006e26:	ea34 0303 	bics.w	r3, r4, r3
 8006e2a:	bf0c      	ite	eq
 8006e2c:	2301      	moveq	r3, #1
 8006e2e:	2300      	movne	r3, #0
 8006e30:	42ab      	cmp	r3, r5
 8006e32:	d1e8      	bne.n	8006e06 <SPI_WaitFlagStateUntilTimeout+0x4e>
 8006e34:	e7e3      	b.n	8006dfe <SPI_WaitFlagStateUntilTimeout+0x46>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e36:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e3a:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e3c:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e40:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006e44:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e46:	d013      	beq.n	8006e70 <SPI_WaitFlagStateUntilTimeout+0xb8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e4a:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8006e4e:	d107      	bne.n	8006e60 <SPI_WaitFlagStateUntilTimeout+0xa8>
          SPI_RESET_CRC(hspi);
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e56:	601a      	str	r2, [r3, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e5e:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006e60:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8006e62:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8006e64:	f887 2051 	strb.w	r2, [r7, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006e68:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
 8006e6c:	2003      	movs	r0, #3
 8006e6e:	e7c7      	b.n	8006e00 <SPI_WaitFlagStateUntilTimeout+0x48>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8006e76:	d002      	beq.n	8006e7e <SPI_WaitFlagStateUntilTimeout+0xc6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e78:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8006e7c:	d1e4      	bne.n	8006e48 <SPI_WaitFlagStateUntilTimeout+0x90>
          __HAL_SPI_DISABLE(hspi);
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e84:	601a      	str	r2, [r3, #0]
 8006e86:	e7df      	b.n	8006e48 <SPI_WaitFlagStateUntilTimeout+0x90>
 8006e88:	200008d0 	.word	0x200008d0

08006e8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e90:	b084      	sub	sp, #16
 8006e92:	460f      	mov	r7, r1
 8006e94:	4690      	mov	r8, r2
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006e96:	9200      	str	r2, [sp, #0]
 8006e98:	460b      	mov	r3, r1
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	2102      	movs	r1, #2
{
 8006e9e:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006ea0:	f7ff ff8a 	bl	8006db8 <SPI_WaitFlagStateUntilTimeout>
 8006ea4:	bb40      	cbnz	r0, 8006ef8 <SPI_EndRxTxTransaction+0x6c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006ea6:	4b19      	ldr	r3, [pc, #100]	@ (8006f0c <SPI_EndRxTxTransaction+0x80>)
 8006ea8:	681d      	ldr	r5, [r3, #0]
 8006eaa:	4b19      	ldr	r3, [pc, #100]	@ (8006f10 <SPI_EndRxTxTransaction+0x84>)
 8006eac:	fba3 3505 	umull	r3, r5, r3, r5
 8006eb0:	0d6d      	lsrs	r5, r5, #21
 8006eb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006eb6:	fb03 f505 	mul.w	r5, r3, r5
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006eba:	6863      	ldr	r3, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006ebc:	9503      	str	r5, [sp, #12]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ebe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ec2:	4606      	mov	r6, r0
 8006ec4:	d107      	bne.n	8006ed6 <SPI_EndRxTxTransaction+0x4a>
 8006ec6:	e00d      	b.n	8006ee4 <SPI_EndRxTxTransaction+0x58>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 8006ec8:	9b03      	ldr	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006eca:	6821      	ldr	r1, [r4, #0]
      count--;
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006ed0:	688b      	ldr	r3, [r1, #8]
 8006ed2:	061b      	lsls	r3, r3, #24
 8006ed4:	d502      	bpl.n	8006edc <SPI_EndRxTxTransaction+0x50>
      if (count == 0U)
 8006ed6:	9b03      	ldr	r3, [sp, #12]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1f5      	bne.n	8006ec8 <SPI_EndRxTxTransaction+0x3c>
  }

  return HAL_OK;
}
 8006edc:	4630      	mov	r0, r6
 8006ede:	b004      	add	sp, #16
 8006ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	f8cd 8000 	str.w	r8, [sp]
 8006eea:	463b      	mov	r3, r7
 8006eec:	2180      	movs	r1, #128	@ 0x80
 8006eee:	4620      	mov	r0, r4
 8006ef0:	f7ff ff62 	bl	8006db8 <SPI_WaitFlagStateUntilTimeout>
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	d0f1      	beq.n	8006edc <SPI_EndRxTxTransaction+0x50>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ef8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006efa:	2603      	movs	r6, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006efc:	f043 0320 	orr.w	r3, r3, #32
}
 8006f00:	4630      	mov	r0, r6
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f02:	6563      	str	r3, [r4, #84]	@ 0x54
}
 8006f04:	b004      	add	sp, #16
 8006f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f0a:	bf00      	nop
 8006f0c:	200008d0 	.word	0x200008d0
 8006f10:	165e9f81 	.word	0x165e9f81

08006f14 <HAL_SPI_Init>:
  if (hspi == NULL)
 8006f14:	2800      	cmp	r0, #0
 8006f16:	d05c      	beq.n	8006fd2 <HAL_SPI_Init+0xbe>
{
 8006f18:	b570      	push	{r4, r5, r6, lr}
 8006f1a:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f1c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8006f1e:	2800      	cmp	r0, #0
 8006f20:	d047      	beq.n	8006fb2 <HAL_SPI_Init+0x9e>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f22:	2300      	movs	r3, #0
 8006f24:	e9c4 3304 	strd	r3, r3, [r4, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f28:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	62a2      	str	r2, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f30:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d042      	beq.n	8006fbe <HAL_SPI_Init+0xaa>
 8006f38:	4694      	mov	ip, r2
  __HAL_SPI_DISABLE(hspi);
 8006f3a:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f3c:	68a5      	ldr	r5, [r4, #8]
 8006f3e:	69a2      	ldr	r2, [r4, #24]
 8006f40:	6a26      	ldr	r6, [r4, #32]
  hspi->State = HAL_SPI_STATE_BUSY;
 8006f42:	2302      	movs	r3, #2
 8006f44:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8006f48:	680b      	ldr	r3, [r1, #0]
 8006f4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f4e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f50:	6863      	ldr	r3, [r4, #4]
 8006f52:	f405 4504 	and.w	r5, r5, #33792	@ 0x8400
 8006f56:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8006f5a:	432b      	orrs	r3, r5
 8006f5c:	68e5      	ldr	r5, [r4, #12]
 8006f5e:	f405 6500 	and.w	r5, r5, #2048	@ 0x800
 8006f62:	432b      	orrs	r3, r5
 8006f64:	6925      	ldr	r5, [r4, #16]
 8006f66:	f005 0502 	and.w	r5, r5, #2
 8006f6a:	432b      	orrs	r3, r5
 8006f6c:	6965      	ldr	r5, [r4, #20]
 8006f6e:	f005 0501 	and.w	r5, r5, #1
 8006f72:	432b      	orrs	r3, r5
 8006f74:	69e5      	ldr	r5, [r4, #28]
 8006f76:	f006 0e80 	and.w	lr, r6, #128	@ 0x80
 8006f7a:	f402 7600 	and.w	r6, r2, #512	@ 0x200
 8006f7e:	f005 0538 	and.w	r5, r5, #56	@ 0x38
 8006f82:	4333      	orrs	r3, r6
 8006f84:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006f86:	0c12      	lsrs	r2, r2, #16
 8006f88:	f000 0010 	and.w	r0, r0, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f8c:	ea43 030e 	orr.w	r3, r3, lr
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006f90:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f94:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006f98:	4302      	orrs	r2, r0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f9a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006f9c:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f9e:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006fa0:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006fa2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8006fa6:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006fa8:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006faa:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006fac:	f884 2051 	strb.w	r2, [r4, #81]	@ 0x51
}
 8006fb0:	bd70      	pop	{r4, r5, r6, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006fb2:	6863      	ldr	r3, [r4, #4]
 8006fb4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fb8:	d0b6      	beq.n	8006f28 <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006fba:	61e0      	str	r0, [r4, #28]
 8006fbc:	e7b4      	b.n	8006f28 <HAL_SPI_Init+0x14>
    HAL_SPI_MspInit(hspi);
 8006fbe:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8006fc0:	f884 1050 	strb.w	r1, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8006fc4:	f7fd ff34 	bl	8004e30 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006fc8:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	@ 0x24
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006fcc:	f403 5c00 	and.w	ip, r3, #8192	@ 0x2000
 8006fd0:	e7b3      	b.n	8006f3a <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 8006fd2:	2001      	movs	r0, #1
}
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop

08006fd8 <HAL_SPI_Transmit>:
{
 8006fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fdc:	4604      	mov	r4, r0
 8006fde:	b082      	sub	sp, #8
 8006fe0:	461d      	mov	r5, r3
 8006fe2:	460f      	mov	r7, r1
 8006fe4:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8006fe6:	f7fe f9c5 	bl	8005374 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8006fea:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d177      	bne.n	80070e2 <HAL_SPI_Transmit+0x10a>
  if ((pData == NULL) || (Size == 0U))
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	b2d8      	uxtb	r0, r3
 8006ff6:	2f00      	cmp	r7, #0
 8006ff8:	d070      	beq.n	80070dc <HAL_SPI_Transmit+0x104>
 8006ffa:	f1b8 0f00 	cmp.w	r8, #0
 8006ffe:	d06d      	beq.n	80070dc <HAL_SPI_Transmit+0x104>
  __HAL_LOCK(hspi);
 8007000:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8007004:	2b01      	cmp	r3, #1
 8007006:	d06c      	beq.n	80070e2 <HAL_SPI_Transmit+0x10a>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007008:	68a2      	ldr	r2, [r4, #8]
  __HAL_LOCK(hspi);
 800700a:	f884 0050 	strb.w	r0, [r4, #80]	@ 0x50
    __HAL_SPI_DISABLE(hspi);
 800700e:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007010:	6327      	str	r7, [r4, #48]	@ 0x30
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007012:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007014:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007016:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800701a:	f884 1051 	strb.w	r1, [r4, #81]	@ 0x51
  hspi->RxISR       = NULL;
 800701e:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007022:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->TxXferSize  = Size;
 8007024:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007028:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800702c:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800702e:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007030:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    __HAL_SPI_DISABLE(hspi);
 8007032:	4601      	mov	r1, r0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007034:	d107      	bne.n	8007046 <HAL_SPI_Transmit+0x6e>
    __HAL_SPI_DISABLE(hspi);
 8007036:	6803      	ldr	r3, [r0, #0]
 8007038:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800703c:	6003      	str	r3, [r0, #0]
    SPI_1LINE_TX(hspi);
 800703e:	6803      	ldr	r3, [r0, #0]
 8007040:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007044:	6003      	str	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007046:	6803      	ldr	r3, [r0, #0]
 8007048:	065b      	lsls	r3, r3, #25
 800704a:	d54e      	bpl.n	80070ea <HAL_SPI_Transmit+0x112>
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800704c:	68e3      	ldr	r3, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800704e:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007050:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007054:	d052      	beq.n	80070fc <HAL_SPI_Transmit+0x124>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007056:	2a00      	cmp	r2, #0
 8007058:	f040 8095 	bne.w	8007186 <HAL_SPI_Transmit+0x1ae>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800705c:	783b      	ldrb	r3, [r7, #0]
 800705e:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 8007060:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007062:	6b22      	ldr	r2, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8007064:	3b01      	subs	r3, #1
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007066:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 8007068:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800706a:	6322      	str	r2, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 800706c:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 800706e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8007070:	b29b      	uxth	r3, r3
 8007072:	b1c3      	cbz	r3, 80070a6 <HAL_SPI_Transmit+0xce>
 8007074:	1c68      	adds	r0, r5, #1
 8007076:	d175      	bne.n	8007164 <HAL_SPI_Transmit+0x18c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007078:	6823      	ldr	r3, [r4, #0]
 800707a:	689a      	ldr	r2, [r3, #8]
 800707c:	0791      	lsls	r1, r2, #30
 800707e:	f140 8087 	bpl.w	8007190 <HAL_SPI_Transmit+0x1b8>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007082:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8007084:	7812      	ldrb	r2, [r2, #0]
 8007086:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8007088:	f8b4 c036 	ldrh.w	ip, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800708c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 800708e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007092:	fa1f fc8c 	uxth.w	ip, ip
 8007096:	f8a4 c036 	strh.w	ip, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 800709a:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800709c:	3301      	adds	r3, #1
    while (hspi->TxXferCount > 0U)
 800709e:	b289      	uxth	r1, r1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80070a0:	6323      	str	r3, [r4, #48]	@ 0x30
    while (hspi->TxXferCount > 0U)
 80070a2:	2900      	cmp	r1, #0
 80070a4:	d1e8      	bne.n	8007078 <HAL_SPI_Transmit+0xa0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070a6:	4632      	mov	r2, r6
 80070a8:	4629      	mov	r1, r5
 80070aa:	4620      	mov	r0, r4
 80070ac:	f7ff feee 	bl	8006e8c <SPI_EndRxTxTransaction>
 80070b0:	b108      	cbz	r0, 80070b6 <HAL_SPI_Transmit+0xde>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070b2:	2320      	movs	r3, #32
 80070b4:	6563      	str	r3, [r4, #84]	@ 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80070b6:	68a3      	ldr	r3, [r4, #8]
 80070b8:	b933      	cbnz	r3, 80070c8 <HAL_SPI_Transmit+0xf0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070ba:	6822      	ldr	r2, [r4, #0]
 80070bc:	9301      	str	r3, [sp, #4]
 80070be:	68d3      	ldr	r3, [r2, #12]
 80070c0:	9301      	str	r3, [sp, #4]
 80070c2:	6893      	ldr	r3, [r2, #8]
 80070c4:	9301      	str	r3, [sp, #4]
 80070c6:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80070c8:	2301      	movs	r3, #1
 80070ca:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070ce:	6d60      	ldr	r0, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hspi);
 80070d0:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070d2:	1ac0      	subs	r0, r0, r3
  __HAL_UNLOCK(hspi);
 80070d4:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070d8:	bf18      	it	ne
 80070da:	2001      	movne	r0, #1
}
 80070dc:	b002      	add	sp, #8
 80070de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80070e2:	2002      	movs	r0, #2
}
 80070e4:	b002      	add	sp, #8
 80070e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_SPI_ENABLE(hspi);
 80070ea:	6803      	ldr	r3, [r0, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070ec:	6862      	ldr	r2, [r4, #4]
    __HAL_SPI_ENABLE(hspi);
 80070ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070f2:	6003      	str	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80070f4:	68e3      	ldr	r3, [r4, #12]
 80070f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070fa:	d1ac      	bne.n	8007056 <HAL_SPI_Transmit+0x7e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070fc:	2a00      	cmp	r2, #0
 80070fe:	d067      	beq.n	80071d0 <HAL_SPI_Transmit+0x1f8>
 8007100:	f1b8 0f01 	cmp.w	r8, #1
 8007104:	d064      	beq.n	80071d0 <HAL_SPI_Transmit+0x1f8>
    while (hspi->TxXferCount > 0U)
 8007106:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8007108:	b29b      	uxth	r3, r3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d0cb      	beq.n	80070a6 <HAL_SPI_Transmit+0xce>
 800710e:	1c6b      	adds	r3, r5, #1
 8007110:	d155      	bne.n	80071be <HAL_SPI_Transmit+0x1e6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007112:	6883      	ldr	r3, [r0, #8]
 8007114:	079f      	lsls	r7, r3, #30
 8007116:	d50f      	bpl.n	8007138 <HAL_SPI_Transmit+0x160>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007118:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800711a:	f832 3b02 	ldrh.w	r3, [r2], #2
 800711e:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 8007120:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007122:	6322      	str	r2, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8007124:	3b01      	subs	r3, #1
 8007126:	b29b      	uxth	r3, r3
 8007128:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 800712a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800712c:	b29b      	uxth	r3, r3
 800712e:	2b00      	cmp	r3, #0
 8007130:	d0b9      	beq.n	80070a6 <HAL_SPI_Transmit+0xce>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007132:	6883      	ldr	r3, [r0, #8]
 8007134:	079f      	lsls	r7, r3, #30
 8007136:	d4ef      	bmi.n	8007118 <HAL_SPI_Transmit+0x140>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007138:	f7fe f91c 	bl	8005374 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 800713c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800713e:	b29b      	uxth	r3, r3
 8007140:	2b00      	cmp	r3, #0
 8007142:	d0b0      	beq.n	80070a6 <HAL_SPI_Transmit+0xce>
 8007144:	6820      	ldr	r0, [r4, #0]
 8007146:	e7e4      	b.n	8007112 <HAL_SPI_Transmit+0x13a>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007148:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800714a:	7812      	ldrb	r2, [r2, #0]
 800714c:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800714e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007150:	6b22      	ldr	r2, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8007152:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007154:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8007156:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007158:	6322      	str	r2, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 800715a:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 800715c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800715e:	b29b      	uxth	r3, r3
 8007160:	2b00      	cmp	r3, #0
 8007162:	d0a0      	beq.n	80070a6 <HAL_SPI_Transmit+0xce>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007164:	6823      	ldr	r3, [r4, #0]
 8007166:	689a      	ldr	r2, [r3, #8]
 8007168:	0792      	lsls	r2, r2, #30
 800716a:	d4ed      	bmi.n	8007148 <HAL_SPI_Transmit+0x170>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800716c:	f7fe f902 	bl	8005374 <HAL_GetTick>
 8007170:	1b83      	subs	r3, r0, r6
 8007172:	42ab      	cmp	r3, r5
 8007174:	d3f2      	bcc.n	800715c <HAL_SPI_Transmit+0x184>
          hspi->State = HAL_SPI_STATE_READY;
 8007176:	2301      	movs	r3, #1
 8007178:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800717c:	2300      	movs	r3, #0
 800717e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007182:	2003      	movs	r0, #3
 8007184:	e7aa      	b.n	80070dc <HAL_SPI_Transmit+0x104>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007186:	f1b8 0f01 	cmp.w	r8, #1
 800718a:	f47f af70 	bne.w	800706e <HAL_SPI_Transmit+0x96>
 800718e:	e765      	b.n	800705c <HAL_SPI_Transmit+0x84>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007190:	f7fe f8f0 	bl	8005374 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 8007194:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8007196:	b29b      	uxth	r3, r3
 8007198:	2b00      	cmp	r3, #0
 800719a:	f47f af6d 	bne.w	8007078 <HAL_SPI_Transmit+0xa0>
 800719e:	e782      	b.n	80070a6 <HAL_SPI_Transmit+0xce>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80071a0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80071a2:	f832 3b02 	ldrh.w	r3, [r2], #2
 80071a6:	60cb      	str	r3, [r1, #12]
        hspi->TxXferCount--;
 80071a8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071aa:	6322      	str	r2, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80071ac:	3b01      	subs	r3, #1
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 80071b2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	f43f af75 	beq.w	80070a6 <HAL_SPI_Transmit+0xce>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80071bc:	6821      	ldr	r1, [r4, #0]
 80071be:	688b      	ldr	r3, [r1, #8]
 80071c0:	079a      	lsls	r2, r3, #30
 80071c2:	d4ed      	bmi.n	80071a0 <HAL_SPI_Transmit+0x1c8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071c4:	f7fe f8d6 	bl	8005374 <HAL_GetTick>
 80071c8:	1b83      	subs	r3, r0, r6
 80071ca:	42ab      	cmp	r3, r5
 80071cc:	d3f1      	bcc.n	80071b2 <HAL_SPI_Transmit+0x1da>
 80071ce:	e7d2      	b.n	8007176 <HAL_SPI_Transmit+0x19e>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80071d0:	f837 3b02 	ldrh.w	r3, [r7], #2
 80071d4:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 80071d6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80071d8:	6327      	str	r7, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80071da:	3b01      	subs	r3, #1
 80071dc:	b29b      	uxth	r3, r3
 80071de:	86e3      	strh	r3, [r4, #54]	@ 0x36
 80071e0:	e791      	b.n	8007106 <HAL_SPI_Transmit+0x12e>
 80071e2:	bf00      	nop

080071e4 <HAL_SPI_TransmitReceive>:
{
 80071e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80071e8:	4604      	mov	r4, r0
 80071ea:	b083      	sub	sp, #12
 80071ec:	4691      	mov	r9, r2
 80071ee:	461f      	mov	r7, r3
 80071f0:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80071f2:	4688      	mov	r8, r1
  tickstart = HAL_GetTick();
 80071f4:	f7fe f8be 	bl	8005374 <HAL_GetTick>
  tmp_state           = hspi->State;
 80071f8:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tmp_mode            = hspi->Init.Mode;
 80071fc:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80071fe:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8007200:	4605      	mov	r5, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007202:	d008      	beq.n	8007216 <HAL_SPI_TransmitReceive+0x32>
 8007204:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8007208:	d17b      	bne.n	8007302 <HAL_SPI_TransmitReceive+0x11e>
 800720a:	b2d9      	uxtb	r1, r3
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800720c:	68a3      	ldr	r3, [r4, #8]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d177      	bne.n	8007302 <HAL_SPI_TransmitReceive+0x11e>
 8007212:	2904      	cmp	r1, #4
 8007214:	d175      	bne.n	8007302 <HAL_SPI_TransmitReceive+0x11e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007216:	f1b8 0f00 	cmp.w	r8, #0
 800721a:	f000 80dd 	beq.w	80073d8 <HAL_SPI_TransmitReceive+0x1f4>
 800721e:	f1b9 0f00 	cmp.w	r9, #0
 8007222:	f000 80d9 	beq.w	80073d8 <HAL_SPI_TransmitReceive+0x1f4>
 8007226:	2f00      	cmp	r7, #0
 8007228:	f000 80d6 	beq.w	80073d8 <HAL_SPI_TransmitReceive+0x1f4>
  __HAL_LOCK(hspi);
 800722c:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8007230:	2b01      	cmp	r3, #1
 8007232:	d066      	beq.n	8007302 <HAL_SPI_TransmitReceive+0x11e>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007234:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007238:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800723c:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800723e:	bf1c      	itt	ne
 8007240:	2305      	movne	r3, #5
 8007242:	f884 3051 	strbne.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007246:	2300      	movs	r3, #0
 8007248:	6563      	str	r3, [r4, #84]	@ 0x54
  __HAL_LOCK(hspi);
 800724a:	2101      	movs	r1, #1
  hspi->RxISR       = NULL;
 800724c:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007250:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8007252:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  __HAL_LOCK(hspi);
 8007254:	f884 1050 	strb.w	r1, [r4, #80]	@ 0x50
  hspi->TxXferCount = Size;
 8007258:	86e7      	strh	r7, [r4, #54]	@ 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800725a:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 800725c:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800725e:	0648      	lsls	r0, r1, #25
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007260:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007264:	86a7      	strh	r7, [r4, #52]	@ 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007266:	d403      	bmi.n	8007270 <HAL_SPI_TransmitReceive+0x8c>
    __HAL_SPI_ENABLE(hspi);
 8007268:	6819      	ldr	r1, [r3, #0]
 800726a:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 800726e:	6019      	str	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007270:	68e1      	ldr	r1, [r4, #12]
 8007272:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8007276:	d048      	beq.n	800730a <HAL_SPI_TransmitReceive+0x126>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007278:	2a00      	cmp	r2, #0
 800727a:	f000 809d 	beq.w	80073b8 <HAL_SPI_TransmitReceive+0x1d4>
 800727e:	2f01      	cmp	r7, #1
 8007280:	f000 809a 	beq.w	80073b8 <HAL_SPI_TransmitReceive+0x1d4>
        txallowed = 1U;
 8007284:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007286:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8007288:	b29b      	uxth	r3, r3
 800728a:	b91b      	cbnz	r3, 8007294 <HAL_SPI_TransmitReceive+0xb0>
 800728c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800728e:	b29b      	uxth	r3, r3
 8007290:	2b00      	cmp	r3, #0
 8007292:	d077      	beq.n	8007384 <HAL_SPI_TransmitReceive+0x1a0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007294:	6822      	ldr	r2, [r4, #0]
 8007296:	6893      	ldr	r3, [r2, #8]
 8007298:	0799      	lsls	r1, r3, #30
 800729a:	d50f      	bpl.n	80072bc <HAL_SPI_TransmitReceive+0xd8>
 800729c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800729e:	b29b      	uxth	r3, r3
 80072a0:	b163      	cbz	r3, 80072bc <HAL_SPI_TransmitReceive+0xd8>
 80072a2:	b15f      	cbz	r7, 80072bc <HAL_SPI_TransmitReceive+0xd8>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80072a4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 80072aa:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
        hspi->pTxBuffPtr++;
 80072ac:	6b22      	ldr	r2, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80072ae:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 80072b0:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 80072b2:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 80072b4:	6322      	str	r2, [r4, #48]	@ 0x30
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072b6:	6822      	ldr	r2, [r4, #0]
        hspi->TxXferCount--;
 80072b8:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 80072ba:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072bc:	6893      	ldr	r3, [r2, #8]
 80072be:	f013 0301 	ands.w	r3, r3, #1
 80072c2:	d00d      	beq.n	80072e0 <HAL_SPI_TransmitReceive+0xfc>
 80072c4:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 80072c6:	b289      	uxth	r1, r1
 80072c8:	b151      	cbz	r1, 80072e0 <HAL_SPI_TransmitReceive+0xfc>
        txallowed = 1U;
 80072ca:	461f      	mov	r7, r3
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80072cc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80072ce:	68d2      	ldr	r2, [r2, #12]
 80072d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80072d2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80072d4:	3301      	adds	r3, #1
 80072d6:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80072d8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80072da:	3b01      	subs	r3, #1
 80072dc:	b29b      	uxth	r3, r3
 80072de:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80072e0:	f7fe f848 	bl	8005374 <HAL_GetTick>
 80072e4:	1b40      	subs	r0, r0, r5
 80072e6:	42b0      	cmp	r0, r6
 80072e8:	d3cd      	bcc.n	8007286 <HAL_SPI_TransmitReceive+0xa2>
 80072ea:	1c73      	adds	r3, r6, #1
 80072ec:	d0cb      	beq.n	8007286 <HAL_SPI_TransmitReceive+0xa2>
        hspi->State = HAL_SPI_STATE_READY;
 80072ee:	2301      	movs	r3, #1
 80072f0:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        return HAL_TIMEOUT;
 80072f4:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80072f6:	2300      	movs	r3, #0
 80072f8:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 80072fc:	b003      	add	sp, #12
 80072fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8007302:	2002      	movs	r0, #2
}
 8007304:	b003      	add	sp, #12
 8007306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800730a:	2a00      	cmp	r2, #0
 800730c:	d166      	bne.n	80073dc <HAL_SPI_TransmitReceive+0x1f8>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800730e:	4642      	mov	r2, r8
 8007310:	f832 1b02 	ldrh.w	r1, [r2], #2
 8007314:	60d9      	str	r1, [r3, #12]
      hspi->TxXferCount--;
 8007316:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007318:	6322      	str	r2, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 800731a:	3b01      	subs	r3, #1
 800731c:	b29b      	uxth	r3, r3
 800731e:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8007320:	1c73      	adds	r3, r6, #1
        txallowed = 1U;
 8007322:	f04f 0701 	mov.w	r7, #1
 8007326:	d025      	beq.n	8007374 <HAL_SPI_TransmitReceive+0x190>
 8007328:	e05b      	b.n	80073e2 <HAL_SPI_TransmitReceive+0x1fe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800732a:	6822      	ldr	r2, [r4, #0]
 800732c:	6893      	ldr	r3, [r2, #8]
 800732e:	0798      	lsls	r0, r3, #30
 8007330:	d50d      	bpl.n	800734e <HAL_SPI_TransmitReceive+0x16a>
 8007332:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8007334:	b29b      	uxth	r3, r3
 8007336:	b153      	cbz	r3, 800734e <HAL_SPI_TransmitReceive+0x16a>
 8007338:	b147      	cbz	r7, 800734c <HAL_SPI_TransmitReceive+0x168>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800733a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800733c:	f833 1b02 	ldrh.w	r1, [r3], #2
 8007340:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007342:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8007344:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8007346:	3b01      	subs	r3, #1
 8007348:	b29b      	uxth	r3, r3
 800734a:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 800734c:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800734e:	6893      	ldr	r3, [r2, #8]
 8007350:	f013 0301 	ands.w	r3, r3, #1
 8007354:	d00c      	beq.n	8007370 <HAL_SPI_TransmitReceive+0x18c>
 8007356:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 8007358:	b289      	uxth	r1, r1
 800735a:	b149      	cbz	r1, 8007370 <HAL_SPI_TransmitReceive+0x18c>
        txallowed = 1U;
 800735c:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800735e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007360:	68d2      	ldr	r2, [r2, #12]
 8007362:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007366:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8007368:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800736a:	3b01      	subs	r3, #1
 800736c:	b29b      	uxth	r3, r3
 800736e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007370:	f7fe f800 	bl	8005374 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007374:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8007376:	b29b      	uxth	r3, r3
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1d6      	bne.n	800732a <HAL_SPI_TransmitReceive+0x146>
 800737c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800737e:	b29b      	uxth	r3, r3
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1d2      	bne.n	800732a <HAL_SPI_TransmitReceive+0x146>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007384:	462a      	mov	r2, r5
 8007386:	4631      	mov	r1, r6
 8007388:	4620      	mov	r0, r4
 800738a:	f7ff fd7f 	bl	8006e8c <SPI_EndRxTxTransaction>
 800738e:	b9f0      	cbnz	r0, 80073ce <HAL_SPI_TransmitReceive+0x1ea>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007390:	68a3      	ldr	r3, [r4, #8]
 8007392:	b933      	cbnz	r3, 80073a2 <HAL_SPI_TransmitReceive+0x1be>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007394:	6822      	ldr	r2, [r4, #0]
 8007396:	9301      	str	r3, [sp, #4]
 8007398:	68d3      	ldr	r3, [r2, #12]
 800739a:	9301      	str	r3, [sp, #4]
 800739c:	6893      	ldr	r3, [r2, #8]
 800739e:	9301      	str	r3, [sp, #4]
 80073a0:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80073a2:	2301      	movs	r3, #1
 80073a4:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073a8:	6d60      	ldr	r0, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hspi);
 80073aa:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073ac:	1ac0      	subs	r0, r0, r3
  __HAL_UNLOCK(hspi);
 80073ae:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073b2:	bf18      	it	ne
 80073b4:	2001      	movne	r0, #1
 80073b6:	e7a5      	b.n	8007304 <HAL_SPI_TransmitReceive+0x120>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80073b8:	f898 2000 	ldrb.w	r2, [r8]
 80073bc:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 80073be:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80073c0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80073c2:	3b01      	subs	r3, #1
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80073c4:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 80073c6:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80073c8:	6322      	str	r2, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80073ca:	86e3      	strh	r3, [r4, #54]	@ 0x36
 80073cc:	e75a      	b.n	8007284 <HAL_SPI_TransmitReceive+0xa0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073ce:	2220      	movs	r2, #32
    __HAL_UNLOCK(hspi);
 80073d0:	2300      	movs	r3, #0
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073d2:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80073d4:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 80073d8:	2001      	movs	r0, #1
 80073da:	e793      	b.n	8007304 <HAL_SPI_TransmitReceive+0x120>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073dc:	2f01      	cmp	r7, #1
 80073de:	d19f      	bne.n	8007320 <HAL_SPI_TransmitReceive+0x13c>
 80073e0:	e795      	b.n	800730e <HAL_SPI_TransmitReceive+0x12a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073e2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	b91b      	cbnz	r3, 80073f0 <HAL_SPI_TransmitReceive+0x20c>
 80073e8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d0c9      	beq.n	8007384 <HAL_SPI_TransmitReceive+0x1a0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80073f0:	6822      	ldr	r2, [r4, #0]
 80073f2:	6893      	ldr	r3, [r2, #8]
 80073f4:	0799      	lsls	r1, r3, #30
 80073f6:	d50d      	bpl.n	8007414 <HAL_SPI_TransmitReceive+0x230>
 80073f8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	b153      	cbz	r3, 8007414 <HAL_SPI_TransmitReceive+0x230>
 80073fe:	b147      	cbz	r7, 8007412 <HAL_SPI_TransmitReceive+0x22e>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007400:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007402:	f833 1b02 	ldrh.w	r1, [r3], #2
 8007406:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007408:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 800740a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800740c:	3b01      	subs	r3, #1
 800740e:	b29b      	uxth	r3, r3
 8007410:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8007412:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007414:	6893      	ldr	r3, [r2, #8]
 8007416:	f013 0301 	ands.w	r3, r3, #1
 800741a:	d00c      	beq.n	8007436 <HAL_SPI_TransmitReceive+0x252>
 800741c:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 800741e:	b289      	uxth	r1, r1
 8007420:	b149      	cbz	r1, 8007436 <HAL_SPI_TransmitReceive+0x252>
        txallowed = 1U;
 8007422:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007424:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007426:	68d2      	ldr	r2, [r2, #12]
 8007428:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800742c:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 800742e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007430:	3b01      	subs	r3, #1
 8007432:	b29b      	uxth	r3, r3
 8007434:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007436:	f7fd ff9d 	bl	8005374 <HAL_GetTick>
 800743a:	1b40      	subs	r0, r0, r5
 800743c:	42b0      	cmp	r0, r6
 800743e:	d3d0      	bcc.n	80073e2 <HAL_SPI_TransmitReceive+0x1fe>
 8007440:	e755      	b.n	80072ee <HAL_SPI_TransmitReceive+0x10a>
 8007442:	bf00      	nop

08007444 <HAL_SPI_Receive>:
{
 8007444:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007448:	461d      	mov	r5, r3
  if (hspi->State != HAL_SPI_STATE_READY)
 800744a:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
 800744e:	2b01      	cmp	r3, #1
{
 8007450:	b083      	sub	sp, #12
  if (hspi->State != HAL_SPI_STATE_READY)
 8007452:	d176      	bne.n	8007542 <HAL_SPI_Receive+0xfe>
 8007454:	fa5f f883 	uxtb.w	r8, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007458:	6843      	ldr	r3, [r0, #4]
 800745a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800745e:	4604      	mov	r4, r0
 8007460:	4617      	mov	r7, r2
 8007462:	4689      	mov	r9, r1
 8007464:	d103      	bne.n	800746e <HAL_SPI_Receive+0x2a>
 8007466:	6883      	ldr	r3, [r0, #8]
 8007468:	2b00      	cmp	r3, #0
 800746a:	f000 80d1 	beq.w	8007610 <HAL_SPI_Receive+0x1cc>
  tickstart = HAL_GetTick();
 800746e:	f7fd ff81 	bl	8005374 <HAL_GetTick>
 8007472:	4606      	mov	r6, r0
  if ((pData == NULL) || (Size == 0U))
 8007474:	f1b9 0f00 	cmp.w	r9, #0
 8007478:	d05f      	beq.n	800753a <HAL_SPI_Receive+0xf6>
 800747a:	2f00      	cmp	r7, #0
 800747c:	d05d      	beq.n	800753a <HAL_SPI_Receive+0xf6>
  __HAL_LOCK(hspi);
 800747e:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8007482:	2b01      	cmp	r3, #1
 8007484:	d05d      	beq.n	8007542 <HAL_SPI_Receive+0xfe>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007486:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8007488:	6821      	ldr	r1, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800748a:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  __HAL_LOCK(hspi);
 800748e:	2001      	movs	r0, #1
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007490:	2300      	movs	r3, #0
  __HAL_LOCK(hspi);
 8007492:	f884 0050 	strb.w	r0, [r4, #80]	@ 0x50
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007496:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800749a:	f04f 0004 	mov.w	r0, #4
 800749e:	f884 0051 	strb.w	r0, [r4, #81]	@ 0x51
  hspi->RxISR       = NULL;
 80074a2:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074a6:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80074a8:	6323      	str	r3, [r4, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80074aa:	86a3      	strh	r3, [r4, #52]	@ 0x34
  hspi->RxXferCount = Size;
 80074ac:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80074ae:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80074b0:	86e3      	strh	r3, [r4, #54]	@ 0x36
    __HAL_SPI_DISABLE(hspi);
 80074b2:	460b      	mov	r3, r1
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074b4:	d06c      	beq.n	8007590 <HAL_SPI_Receive+0x14c>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074b6:	680a      	ldr	r2, [r1, #0]
 80074b8:	0650      	lsls	r0, r2, #25
 80074ba:	d403      	bmi.n	80074c4 <HAL_SPI_Receive+0x80>
    __HAL_SPI_ENABLE(hspi);
 80074bc:	680a      	ldr	r2, [r1, #0]
 80074be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074c2:	600a      	str	r2, [r1, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80074c4:	68e2      	ldr	r2, [r4, #12]
 80074c6:	2a00      	cmp	r2, #0
 80074c8:	d141      	bne.n	800754e <HAL_SPI_Receive+0x10a>
    while (hspi->RxXferCount > 0U)
 80074ca:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80074cc:	b292      	uxth	r2, r2
 80074ce:	b1ca      	cbz	r2, 8007504 <HAL_SPI_Receive+0xc0>
 80074d0:	1c6f      	adds	r7, r5, #1
 80074d2:	d00e      	beq.n	80074f2 <HAL_SPI_Receive+0xae>
 80074d4:	e074      	b.n	80075c0 <HAL_SPI_Receive+0x17c>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80074d6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80074d8:	7b1b      	ldrb	r3, [r3, #12]
 80074da:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 80074dc:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80074de:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80074e0:	3a01      	subs	r2, #1
 80074e2:	b292      	uxth	r2, r2
 80074e4:	87e2      	strh	r2, [r4, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 80074e6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80074e8:	3101      	adds	r1, #1
    while (hspi->RxXferCount > 0U)
 80074ea:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80074ec:	63a1      	str	r1, [r4, #56]	@ 0x38
    while (hspi->RxXferCount > 0U)
 80074ee:	b14b      	cbz	r3, 8007504 <HAL_SPI_Receive+0xc0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80074f0:	6823      	ldr	r3, [r4, #0]
 80074f2:	689a      	ldr	r2, [r3, #8]
 80074f4:	07d0      	lsls	r0, r2, #31
 80074f6:	d4ee      	bmi.n	80074d6 <HAL_SPI_Receive+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074f8:	f7fd ff3c 	bl	8005374 <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 80074fc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80074fe:	b29b      	uxth	r3, r3
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1f5      	bne.n	80074f0 <HAL_SPI_Receive+0xac>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007504:	6863      	ldr	r3, [r4, #4]
 8007506:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800750a:	f000 808b 	beq.w	8007624 <HAL_SPI_Receive+0x1e0>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800750e:	9600      	str	r6, [sp, #0]
 8007510:	462b      	mov	r3, r5
 8007512:	2200      	movs	r2, #0
 8007514:	2101      	movs	r1, #1
 8007516:	4620      	mov	r0, r4
 8007518:	f7ff fc4e 	bl	8006db8 <SPI_WaitFlagStateUntilTimeout>
 800751c:	2800      	cmp	r0, #0
 800751e:	f040 8092 	bne.w	8007646 <HAL_SPI_Receive+0x202>
  hspi->State = HAL_SPI_STATE_READY;
 8007522:	2301      	movs	r3, #1
 8007524:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007528:	6d60      	ldr	r0, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hspi);
 800752a:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800752c:	ebb0 0803 	subs.w	r8, r0, r3
  __HAL_UNLOCK(hspi);
 8007530:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007534:	bf18      	it	ne
 8007536:	f04f 0801 	movne.w	r8, #1
}
 800753a:	4640      	mov	r0, r8
 800753c:	b003      	add	sp, #12
 800753e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8007542:	f04f 0802 	mov.w	r8, #2
}
 8007546:	4640      	mov	r0, r8
 8007548:	b003      	add	sp, #12
 800754a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (hspi->RxXferCount > 0U)
 800754e:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8007550:	b292      	uxth	r2, r2
 8007552:	2a00      	cmp	r2, #0
 8007554:	d0d6      	beq.n	8007504 <HAL_SPI_Receive+0xc0>
 8007556:	1c6a      	adds	r2, r5, #1
 8007558:	d149      	bne.n	80075ee <HAL_SPI_Receive+0x1aa>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800755a:	688b      	ldr	r3, [r1, #8]
 800755c:	07db      	lsls	r3, r3, #31
 800755e:	d50f      	bpl.n	8007580 <HAL_SPI_Receive+0x13c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007560:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007562:	68ca      	ldr	r2, [r1, #12]
 8007564:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->RxXferCount--;
 8007568:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800756a:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 800756c:	3a01      	subs	r2, #1
 800756e:	b292      	uxth	r2, r2
 8007570:	87e2      	strh	r2, [r4, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 8007572:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007574:	b29b      	uxth	r3, r3
 8007576:	2b00      	cmp	r3, #0
 8007578:	d0c4      	beq.n	8007504 <HAL_SPI_Receive+0xc0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800757a:	688b      	ldr	r3, [r1, #8]
 800757c:	07db      	lsls	r3, r3, #31
 800757e:	d4ef      	bmi.n	8007560 <HAL_SPI_Receive+0x11c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007580:	f7fd fef8 	bl	8005374 <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 8007584:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007586:	b29b      	uxth	r3, r3
 8007588:	2b00      	cmp	r3, #0
 800758a:	d0bb      	beq.n	8007504 <HAL_SPI_Receive+0xc0>
 800758c:	6821      	ldr	r1, [r4, #0]
 800758e:	e7e4      	b.n	800755a <HAL_SPI_Receive+0x116>
    __HAL_SPI_DISABLE(hspi);
 8007590:	680a      	ldr	r2, [r1, #0]
 8007592:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007596:	600a      	str	r2, [r1, #0]
    SPI_1LINE_RX(hspi);
 8007598:	680a      	ldr	r2, [r1, #0]
 800759a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800759e:	600a      	str	r2, [r1, #0]
 80075a0:	e789      	b.n	80074b6 <HAL_SPI_Receive+0x72>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80075a2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80075a4:	7b1b      	ldrb	r3, [r3, #12]
 80075a6:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 80075a8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80075aa:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80075ac:	3b01      	subs	r3, #1
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80075ae:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 80075b0:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80075b2:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80075b4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 80075b6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d0a2      	beq.n	8007504 <HAL_SPI_Receive+0xc0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	689a      	ldr	r2, [r3, #8]
 80075c2:	07d1      	lsls	r1, r2, #31
 80075c4:	d4ed      	bmi.n	80075a2 <HAL_SPI_Receive+0x15e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075c6:	f7fd fed5 	bl	8005374 <HAL_GetTick>
 80075ca:	1b83      	subs	r3, r0, r6
 80075cc:	42ab      	cmp	r3, r5
 80075ce:	d3f2      	bcc.n	80075b6 <HAL_SPI_Receive+0x172>
 80075d0:	e015      	b.n	80075fe <HAL_SPI_Receive+0x1ba>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80075d2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 80075da:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80075dc:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80075de:	3b01      	subs	r3, #1
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 80075e4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d08b      	beq.n	8007504 <HAL_SPI_Receive+0xc0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80075ec:	6823      	ldr	r3, [r4, #0]
 80075ee:	689a      	ldr	r2, [r3, #8]
 80075f0:	07d2      	lsls	r2, r2, #31
 80075f2:	d4ee      	bmi.n	80075d2 <HAL_SPI_Receive+0x18e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075f4:	f7fd febe 	bl	8005374 <HAL_GetTick>
 80075f8:	1b83      	subs	r3, r0, r6
 80075fa:	42ab      	cmp	r3, r5
 80075fc:	d3f2      	bcc.n	80075e4 <HAL_SPI_Receive+0x1a0>
          hspi->State = HAL_SPI_STATE_READY;
 80075fe:	2301      	movs	r3, #1
 8007600:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007604:	2300      	movs	r3, #0
 8007606:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 800760a:	f04f 0803 	mov.w	r8, #3
 800760e:	e794      	b.n	800753a <HAL_SPI_Receive+0xf6>
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007610:	9500      	str	r5, [sp, #0]
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007612:	2504      	movs	r5, #4
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007614:	4613      	mov	r3, r2
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007616:	f880 5051 	strb.w	r5, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800761a:	460a      	mov	r2, r1
 800761c:	f7ff fde2 	bl	80071e4 <HAL_SPI_TransmitReceive>
 8007620:	4680      	mov	r8, r0
 8007622:	e78a      	b.n	800753a <HAL_SPI_Receive+0xf6>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007624:	68a3      	ldr	r3, [r4, #8]
 8007626:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800762a:	d013      	beq.n	8007654 <HAL_SPI_Receive+0x210>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800762c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007630:	d016      	beq.n	8007660 <HAL_SPI_Receive+0x21c>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007632:	9600      	str	r6, [sp, #0]
 8007634:	462b      	mov	r3, r5
 8007636:	2200      	movs	r2, #0
 8007638:	2180      	movs	r1, #128	@ 0x80
 800763a:	4620      	mov	r0, r4
 800763c:	f7ff fbbc 	bl	8006db8 <SPI_WaitFlagStateUntilTimeout>
 8007640:	2800      	cmp	r0, #0
 8007642:	f43f af6e 	beq.w	8007522 <HAL_SPI_Receive+0xde>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007646:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007648:	f043 0320 	orr.w	r3, r3, #32
 800764c:	6563      	str	r3, [r4, #84]	@ 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800764e:	2320      	movs	r3, #32
 8007650:	6563      	str	r3, [r4, #84]	@ 0x54
 8007652:	e766      	b.n	8007522 <HAL_SPI_Receive+0xde>
    __HAL_SPI_DISABLE(hspi);
 8007654:	6822      	ldr	r2, [r4, #0]
 8007656:	6813      	ldr	r3, [r2, #0]
 8007658:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800765c:	6013      	str	r3, [r2, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800765e:	e7e8      	b.n	8007632 <HAL_SPI_Receive+0x1ee>
    __HAL_SPI_DISABLE(hspi);
 8007660:	6821      	ldr	r1, [r4, #0]
 8007662:	680a      	ldr	r2, [r1, #0]
 8007664:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007668:	600a      	str	r2, [r1, #0]
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800766a:	462b      	mov	r3, r5
 800766c:	2200      	movs	r2, #0
 800766e:	9600      	str	r6, [sp, #0]
 8007670:	2101      	movs	r1, #1
 8007672:	4620      	mov	r0, r4
 8007674:	f7ff fba0 	bl	8006db8 <SPI_WaitFlagStateUntilTimeout>
 8007678:	2800      	cmp	r0, #0
 800767a:	f43f af52 	beq.w	8007522 <HAL_SPI_Receive+0xde>
 800767e:	e7e2      	b.n	8007646 <HAL_SPI_Receive+0x202>

08007680 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007680:	2800      	cmp	r0, #0
 8007682:	f000 808f 	beq.w	80077a4 <HAL_TIM_Base_Init+0x124>
{
 8007686:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007688:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800768c:	4604      	mov	r4, r0
 800768e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007692:	2b00      	cmp	r3, #0
 8007694:	f000 8081 	beq.w	800779a <HAL_TIM_Base_Init+0x11a>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007698:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800769a:	4943      	ldr	r1, [pc, #268]	@ (80077a8 <HAL_TIM_Base_Init+0x128>)
  htim->State = HAL_TIM_STATE_BUSY;
 800769c:	2302      	movs	r3, #2
 800769e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076a2:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80076a4:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076a6:	d064      	beq.n	8007772 <HAL_TIM_Base_Init+0xf2>
 80076a8:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80076ac:	d030      	beq.n	8007710 <HAL_TIM_Base_Init+0x90>
 80076ae:	f5a1 417c 	sub.w	r1, r1, #64512	@ 0xfc00
 80076b2:	428a      	cmp	r2, r1
 80076b4:	d02c      	beq.n	8007710 <HAL_TIM_Base_Init+0x90>
 80076b6:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80076ba:	428a      	cmp	r2, r1
 80076bc:	d028      	beq.n	8007710 <HAL_TIM_Base_Init+0x90>
 80076be:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80076c2:	428a      	cmp	r2, r1
 80076c4:	d024      	beq.n	8007710 <HAL_TIM_Base_Init+0x90>
 80076c6:	f501 4178 	add.w	r1, r1, #63488	@ 0xf800
 80076ca:	428a      	cmp	r2, r1
 80076cc:	d051      	beq.n	8007772 <HAL_TIM_Base_Init+0xf2>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076ce:	f501 5170 	add.w	r1, r1, #15360	@ 0x3c00
 80076d2:	428a      	cmp	r2, r1
 80076d4:	d020      	beq.n	8007718 <HAL_TIM_Base_Init+0x98>
 80076d6:	4935      	ldr	r1, [pc, #212]	@ (80077ac <HAL_TIM_Base_Init+0x12c>)
 80076d8:	428a      	cmp	r2, r1
 80076da:	d01d      	beq.n	8007718 <HAL_TIM_Base_Init+0x98>
 80076dc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80076e0:	428a      	cmp	r2, r1
 80076e2:	d019      	beq.n	8007718 <HAL_TIM_Base_Init+0x98>
 80076e4:	f5a1 3198 	sub.w	r1, r1, #77824	@ 0x13000
 80076e8:	428a      	cmp	r2, r1
 80076ea:	d015      	beq.n	8007718 <HAL_TIM_Base_Init+0x98>
 80076ec:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80076f0:	428a      	cmp	r2, r1
 80076f2:	d011      	beq.n	8007718 <HAL_TIM_Base_Init+0x98>
 80076f4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80076f8:	428a      	cmp	r2, r1
 80076fa:	d00d      	beq.n	8007718 <HAL_TIM_Base_Init+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076fc:	69a5      	ldr	r5, [r4, #24]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076fe:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007700:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007702:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007706:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8007708:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800770a:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800770c:	6291      	str	r1, [r2, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800770e:	e010      	b.n	8007732 <HAL_TIM_Base_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 8007710:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8007716:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007718:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800771a:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 800771c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007720:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007722:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007726:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007728:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800772a:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800772c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800772e:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007730:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007732:	2301      	movs	r3, #1
 8007734:	6153      	str	r3, [r2, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007736:	6913      	ldr	r3, [r2, #16]
 8007738:	07db      	lsls	r3, r3, #31
 800773a:	d503      	bpl.n	8007744 <HAL_TIM_Base_Init+0xc4>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800773c:	6913      	ldr	r3, [r2, #16]
 800773e:	f023 0301 	bic.w	r3, r3, #1
 8007742:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007744:	2301      	movs	r3, #1
 8007746:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800774a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800774e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8007752:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8007756:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800775a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800775e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007762:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8007766:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800776a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800776e:	2000      	movs	r0, #0
}
 8007770:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8007772:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007774:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800777a:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800777c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007780:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007782:	69a1      	ldr	r1, [r4, #24]
 8007784:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007788:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800778a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800778c:	68e3      	ldr	r3, [r4, #12]
 800778e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007790:	6863      	ldr	r3, [r4, #4]
 8007792:	6293      	str	r3, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8007794:	6963      	ldr	r3, [r4, #20]
 8007796:	6313      	str	r3, [r2, #48]	@ 0x30
 8007798:	e7cb      	b.n	8007732 <HAL_TIM_Base_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 800779a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800779e:	f7fd fc11 	bl	8004fc4 <HAL_TIM_Base_MspInit>
 80077a2:	e779      	b.n	8007698 <HAL_TIM_Base_Init+0x18>
    return HAL_ERROR;
 80077a4:	2001      	movs	r0, #1
}
 80077a6:	4770      	bx	lr
 80077a8:	40010000 	.word	0x40010000
 80077ac:	40014400 	.word	0x40014400

080077b0 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80077b0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d12f      	bne.n	8007818 <HAL_TIM_Base_Start_IT+0x68>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80077b8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077ba:	4918      	ldr	r1, [pc, #96]	@ (800781c <HAL_TIM_Base_Start_IT+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80077bc:	2202      	movs	r2, #2
 80077be:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80077c2:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077c4:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80077c6:	f042 0201 	orr.w	r2, r2, #1
 80077ca:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077cc:	d019      	beq.n	8007802 <HAL_TIM_Base_Start_IT+0x52>
 80077ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077d2:	d016      	beq.n	8007802 <HAL_TIM_Base_Start_IT+0x52>
 80077d4:	4a12      	ldr	r2, [pc, #72]	@ (8007820 <HAL_TIM_Base_Start_IT+0x70>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d013      	beq.n	8007802 <HAL_TIM_Base_Start_IT+0x52>
 80077da:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80077de:	4293      	cmp	r3, r2
 80077e0:	d00f      	beq.n	8007802 <HAL_TIM_Base_Start_IT+0x52>
 80077e2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d00b      	beq.n	8007802 <HAL_TIM_Base_Start_IT+0x52>
 80077ea:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d007      	beq.n	8007802 <HAL_TIM_Base_Start_IT+0x52>
 80077f2:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d003      	beq.n	8007802 <HAL_TIM_Base_Start_IT+0x52>
 80077fa:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80077fe:	4293      	cmp	r3, r2
 8007800:	d104      	bne.n	800780c <HAL_TIM_Base_Start_IT+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007802:	689a      	ldr	r2, [r3, #8]
 8007804:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007808:	2a06      	cmp	r2, #6
 800780a:	d003      	beq.n	8007814 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	f042 0201 	orr.w	r2, r2, #1
 8007812:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007814:	2000      	movs	r0, #0
 8007816:	4770      	bx	lr
    return HAL_ERROR;
 8007818:	2001      	movs	r0, #1
}
 800781a:	4770      	bx	lr
 800781c:	40010000 	.word	0x40010000
 8007820:	40000400 	.word	0x40000400

08007824 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007824:	6803      	ldr	r3, [r0, #0]
 8007826:	68da      	ldr	r2, [r3, #12]
 8007828:	f022 0201 	bic.w	r2, r2, #1
 800782c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 800782e:	6a1a      	ldr	r2, [r3, #32]
 8007830:	f241 1111 	movw	r1, #4369	@ 0x1111
 8007834:	420a      	tst	r2, r1
 8007836:	d108      	bne.n	800784a <HAL_TIM_Base_Stop_IT+0x26>
 8007838:	6a19      	ldr	r1, [r3, #32]
 800783a:	f240 4244 	movw	r2, #1092	@ 0x444
 800783e:	4211      	tst	r1, r2
 8007840:	d103      	bne.n	800784a <HAL_TIM_Base_Stop_IT+0x26>
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	f022 0201 	bic.w	r2, r2, #1
 8007848:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800784a:	2301      	movs	r3, #1
 800784c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
}
 8007850:	2000      	movs	r0, #0
 8007852:	4770      	bx	lr

08007854 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8007854:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8007858:	2b01      	cmp	r3, #1
 800785a:	d071      	beq.n	8007940 <HAL_TIM_ConfigClockSource+0xec>
 800785c:	4602      	mov	r2, r0
{
 800785e:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8007860:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8007862:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007864:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8007868:	2001      	movs	r0, #1
 800786a:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800786e:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007870:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007874:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8007878:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 800787a:	680b      	ldr	r3, [r1, #0]
 800787c:	2b60      	cmp	r3, #96	@ 0x60
 800787e:	d061      	beq.n	8007944 <HAL_TIM_ConfigClockSource+0xf0>
 8007880:	d824      	bhi.n	80078cc <HAL_TIM_ConfigClockSource+0x78>
 8007882:	2b40      	cmp	r3, #64	@ 0x40
 8007884:	d077      	beq.n	8007976 <HAL_TIM_ConfigClockSource+0x122>
 8007886:	d94a      	bls.n	800791e <HAL_TIM_ConfigClockSource+0xca>
 8007888:	2b50      	cmp	r3, #80	@ 0x50
 800788a:	d117      	bne.n	80078bc <HAL_TIM_ConfigClockSource+0x68>
                               sClockSourceConfig->ClockPolarity,
 800788c:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800788e:	68c8      	ldr	r0, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007890:	6a21      	ldr	r1, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007892:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8007896:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007898:	6a23      	ldr	r3, [r4, #32]
 800789a:	f023 0301 	bic.w	r3, r3, #1
 800789e:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078a0:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078a6:	ea43 1300 	orr.w	r3, r3, r0, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078aa:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80078ac:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078ae:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078b4:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078b8:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80078ba:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80078bc:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80078be:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80078c0:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80078c4:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 80078c8:	bc30      	pop	{r4, r5}
 80078ca:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80078cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078d0:	d0f3      	beq.n	80078ba <HAL_TIM_ConfigClockSource+0x66>
 80078d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078d6:	d110      	bne.n	80078fa <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80078d8:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80078dc:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80078de:	432b      	orrs	r3, r5
 80078e0:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078e2:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80078e6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80078ea:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078ec:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80078ee:	68a3      	ldr	r3, [r4, #8]
 80078f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80078f4:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80078f6:	2000      	movs	r0, #0
 80078f8:	e7e0      	b.n	80078bc <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80078fa:	2b70      	cmp	r3, #112	@ 0x70
 80078fc:	d1de      	bne.n	80078bc <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80078fe:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8007902:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007904:	432b      	orrs	r3, r5
 8007906:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007908:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800790c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8007910:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8007912:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8007914:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007916:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800791a:	60a3      	str	r3, [r4, #8]
      break;
 800791c:	e7cd      	b.n	80078ba <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 800791e:	2b20      	cmp	r3, #32
 8007920:	d002      	beq.n	8007928 <HAL_TIM_ConfigClockSource+0xd4>
 8007922:	d909      	bls.n	8007938 <HAL_TIM_ConfigClockSource+0xe4>
 8007924:	2b30      	cmp	r3, #48	@ 0x30
 8007926:	d1c9      	bne.n	80078bc <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8007928:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800792a:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800792e:	430b      	orrs	r3, r1
 8007930:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8007934:	60a3      	str	r3, [r4, #8]
}
 8007936:	e7c0      	b.n	80078ba <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8007938:	f033 0110 	bics.w	r1, r3, #16
 800793c:	d1be      	bne.n	80078bc <HAL_TIM_ConfigClockSource+0x68>
 800793e:	e7f3      	b.n	8007928 <HAL_TIM_ConfigClockSource+0xd4>
  __HAL_LOCK(htim);
 8007940:	2002      	movs	r0, #2
}
 8007942:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 8007944:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 8007946:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8007948:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800794a:	6a21      	ldr	r1, [r4, #32]
 800794c:	f021 0110 	bic.w	r1, r1, #16
 8007950:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007952:	69a1      	ldr	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007954:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007958:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 800795c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007960:	ea41 3100 	orr.w	r1, r1, r0, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8007964:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8007966:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8007968:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800796a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800796e:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8007972:	60a3      	str	r3, [r4, #8]
}
 8007974:	e7a1      	b.n	80078ba <HAL_TIM_ConfigClockSource+0x66>
                               sClockSourceConfig->ClockPolarity,
 8007976:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8007978:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 800797a:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800797c:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8007980:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007982:	6a23      	ldr	r3, [r4, #32]
 8007984:	f023 0301 	bic.w	r3, r3, #1
 8007988:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800798a:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800798c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007990:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8007994:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8007996:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8007998:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800799a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800799e:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 80079a2:	60a3      	str	r3, [r4, #8]
}
 80079a4:	e789      	b.n	80078ba <HAL_TIM_ConfigClockSource+0x66>
 80079a6:	bf00      	nop

080079a8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079a8:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80079ac:	2a01      	cmp	r2, #1
 80079ae:	d037      	beq.n	8007a20 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 80079b0:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079b2:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80079b4:	2002      	movs	r0, #2
{
 80079b6:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80079b8:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 80079bc:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079be:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 80079c0:	6894      	ldr	r4, [r2, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80079c2:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079c6:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079c8:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079ca:	4816      	ldr	r0, [pc, #88]	@ (8007a24 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 80079cc:	4282      	cmp	r2, r0
 80079ce:	d01a      	beq.n	8007a06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80079d0:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80079d4:	d017      	beq.n	8007a06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80079d6:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 80079da:	4282      	cmp	r2, r0
 80079dc:	d013      	beq.n	8007a06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80079de:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80079e2:	4282      	cmp	r2, r0
 80079e4:	d00f      	beq.n	8007a06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80079e6:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80079ea:	4282      	cmp	r2, r0
 80079ec:	d00b      	beq.n	8007a06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80079ee:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 80079f2:	4282      	cmp	r2, r0
 80079f4:	d007      	beq.n	8007a06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80079f6:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 80079fa:	4282      	cmp	r2, r0
 80079fc:	d003      	beq.n	8007a06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80079fe:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8007a02:	4282      	cmp	r2, r0
 8007a04:	d104      	bne.n	8007a10 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a06:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a08:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a0c:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a0e:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8007a10:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8007a18:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8007a1c:	bc30      	pop	{r4, r5}
 8007a1e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007a20:	2002      	movs	r0, #2
}
 8007a22:	4770      	bx	lr
 8007a24:	40010000 	.word	0x40010000

08007a28 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a28:	2800      	cmp	r0, #0
 8007a2a:	f000 8087 	beq.w	8007b3c <HAL_UART_Init+0x114>
{
 8007a2e:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a30:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8007a34:	4604      	mov	r4, r0
 8007a36:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d079      	beq.n	8007b32 <HAL_UART_Init+0x10a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007a3e:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a40:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8007a42:	2224      	movs	r2, #36	@ 0x24
 8007a44:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8007a48:	68da      	ldr	r2, [r3, #12]
 8007a4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007a4e:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a50:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007a52:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a54:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8007a58:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007a5a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a5c:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007a5e:	4302      	orrs	r2, r0
 8007a60:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8007a62:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007a64:	4302      	orrs	r2, r0
 8007a66:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8007a68:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 8007a6c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007a70:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8007a72:	430a      	orrs	r2, r1
 8007a74:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a76:	695a      	ldr	r2, [r3, #20]
 8007a78:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a7a:	4931      	ldr	r1, [pc, #196]	@ (8007b40 <HAL_UART_Init+0x118>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a7c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007a80:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a82:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a84:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a86:	d036      	beq.n	8007af6 <HAL_UART_Init+0xce>
 8007a88:	4a2e      	ldr	r2, [pc, #184]	@ (8007b44 <HAL_UART_Init+0x11c>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d033      	beq.n	8007af6 <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a8e:	f7ff f973 	bl	8006d78 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a92:	69e2      	ldr	r2, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a94:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a96:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a9a:	e9d4 5300 	ldrd	r5, r3, [r4]
 8007a9e:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007aa2:	d02b      	beq.n	8007afc <HAL_UART_Init+0xd4>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007aa4:	009a      	lsls	r2, r3, #2
 8007aa6:	0f9b      	lsrs	r3, r3, #30
 8007aa8:	f7f8 ffe8 	bl	8000a7c <__aeabi_uldivmod>
 8007aac:	4a26      	ldr	r2, [pc, #152]	@ (8007b48 <HAL_UART_Init+0x120>)
 8007aae:	fba2 1300 	umull	r1, r3, r2, r0
 8007ab2:	095b      	lsrs	r3, r3, #5
 8007ab4:	2164      	movs	r1, #100	@ 0x64
 8007ab6:	fb01 0013 	mls	r0, r1, r3, r0
 8007aba:	0100      	lsls	r0, r0, #4
 8007abc:	3032      	adds	r0, #50	@ 0x32
 8007abe:	fba2 2000 	umull	r2, r0, r2, r0
 8007ac2:	011b      	lsls	r3, r3, #4
 8007ac4:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 8007ac8:	60ab      	str	r3, [r5, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007aca:	692a      	ldr	r2, [r5, #16]
 8007acc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007ad0:	612a      	str	r2, [r5, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ad2:	696a      	ldr	r2, [r5, #20]
 8007ad4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007ad8:	616a      	str	r2, [r5, #20]
  __HAL_UART_ENABLE(huart);
 8007ada:	68ea      	ldr	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007adc:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8007ade:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8007ae0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007ae4:	60ea      	str	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ae6:	6463      	str	r3, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007ae8:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007aec:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  return HAL_OK;
 8007af0:	4618      	mov	r0, r3
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007af2:	6363      	str	r3, [r4, #52]	@ 0x34
}
 8007af4:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8007af6:	f7ff f94f 	bl	8006d98 <HAL_RCC_GetPCLK2Freq>
 8007afa:	e7ca      	b.n	8007a92 <HAL_UART_Init+0x6a>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007afc:	18da      	adds	r2, r3, r3
 8007afe:	f04f 0300 	mov.w	r3, #0
 8007b02:	415b      	adcs	r3, r3
 8007b04:	f7f8 ffba 	bl	8000a7c <__aeabi_uldivmod>
 8007b08:	4a0f      	ldr	r2, [pc, #60]	@ (8007b48 <HAL_UART_Init+0x120>)
 8007b0a:	fba2 3100 	umull	r3, r1, r2, r0
 8007b0e:	0949      	lsrs	r1, r1, #5
 8007b10:	2364      	movs	r3, #100	@ 0x64
 8007b12:	fb03 0311 	mls	r3, r3, r1, r0
 8007b16:	00db      	lsls	r3, r3, #3
 8007b18:	3332      	adds	r3, #50	@ 0x32
 8007b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b1e:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8007b22:	091b      	lsrs	r3, r3, #4
 8007b24:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007b28:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007b2c:	4413      	add	r3, r2
 8007b2e:	60ab      	str	r3, [r5, #8]
 8007b30:	e7cb      	b.n	8007aca <HAL_UART_Init+0xa2>
    huart->Lock = HAL_UNLOCKED;
 8007b32:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8007b36:	f7fd fa5d 	bl	8004ff4 <HAL_UART_MspInit>
 8007b3a:	e780      	b.n	8007a3e <HAL_UART_Init+0x16>
    return HAL_ERROR;
 8007b3c:	2001      	movs	r0, #1
}
 8007b3e:	4770      	bx	lr
 8007b40:	40011000 	.word	0x40011000
 8007b44:	40011400 	.word	0x40011400
 8007b48:	51eb851f 	.word	0x51eb851f

08007b4c <HAL_UART_Transmit>:
{
 8007b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b50:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8007b52:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 8007b56:	2820      	cmp	r0, #32
 8007b58:	d14b      	bne.n	8007bf2 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8007b5a:	4688      	mov	r8, r1
 8007b5c:	b109      	cbz	r1, 8007b62 <HAL_UART_Transmit+0x16>
 8007b5e:	4617      	mov	r7, r2
 8007b60:	b912      	cbnz	r2, 8007b68 <HAL_UART_Transmit+0x1c>
      return  HAL_ERROR;
 8007b62:	2001      	movs	r0, #1
}
 8007b64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b68:	461d      	mov	r5, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b6a:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b6e:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b70:	f8c4 9044 	str.w	r9, [r4, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b74:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8007b78:	f7fd fbfc 	bl	8005374 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b7c:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 8007b7e:	84a7      	strh	r7, [r4, #36]	@ 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 8007b84:	84e7      	strh	r7, [r4, #38]	@ 0x26
    tickstart = HAL_GetTick();
 8007b86:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b88:	d042      	beq.n	8007c10 <HAL_UART_Transmit+0xc4>
    while (huart->TxXferCount > 0U)
 8007b8a:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b8c:	6823      	ldr	r3, [r4, #0]
    while (huart->TxXferCount > 0U)
 8007b8e:	b292      	uxth	r2, r2
 8007b90:	b192      	cbz	r2, 8007bb8 <HAL_UART_Transmit+0x6c>
 8007b92:	1c68      	adds	r0, r5, #1
 8007b94:	d122      	bne.n	8007bdc <HAL_UART_Transmit+0x90>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	0612      	lsls	r2, r2, #24
 8007b9a:	d5fc      	bpl.n	8007b96 <HAL_UART_Transmit+0x4a>
      if (pdata8bits == NULL)
 8007b9c:	f1b8 0f00 	cmp.w	r8, #0
 8007ba0:	d022      	beq.n	8007be8 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ba2:	f818 2b01 	ldrb.w	r2, [r8], #1
 8007ba6:	605a      	str	r2, [r3, #4]
      huart->TxXferCount--;
 8007ba8:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8007baa:	3a01      	subs	r2, #1
 8007bac:	b292      	uxth	r2, r2
 8007bae:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007bb0:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8007bb2:	b292      	uxth	r2, r2
 8007bb4:	2a00      	cmp	r2, #0
 8007bb6:	d1ec      	bne.n	8007b92 <HAL_UART_Transmit+0x46>
 8007bb8:	1c69      	adds	r1, r5, #1
 8007bba:	d125      	bne.n	8007c08 <HAL_UART_Transmit+0xbc>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	0652      	lsls	r2, r2, #25
 8007bc0:	d5fc      	bpl.n	8007bbc <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 8007bc2:	2320      	movs	r3, #32
 8007bc4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8007bc8:	2000      	movs	r0, #0
 8007bca:	e7cb      	b.n	8007b64 <HAL_UART_Transmit+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bcc:	f7fd fbd2 	bl	8005374 <HAL_GetTick>
 8007bd0:	1b80      	subs	r0, r0, r6
 8007bd2:	4285      	cmp	r5, r0
 8007bd4:	d322      	bcc.n	8007c1c <HAL_UART_Transmit+0xd0>
 8007bd6:	b30d      	cbz	r5, 8007c1c <HAL_UART_Transmit+0xd0>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007bd8:	6823      	ldr	r3, [r4, #0]
 8007bda:	68da      	ldr	r2, [r3, #12]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	0617      	lsls	r7, r2, #24
 8007be0:	d5f4      	bpl.n	8007bcc <HAL_UART_Transmit+0x80>
      if (pdata8bits == NULL)
 8007be2:	f1b8 0f00 	cmp.w	r8, #0
 8007be6:	d1dc      	bne.n	8007ba2 <HAL_UART_Transmit+0x56>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007be8:	f839 2b02 	ldrh.w	r2, [r9], #2
 8007bec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bf0:	e7d9      	b.n	8007ba6 <HAL_UART_Transmit+0x5a>
    return HAL_BUSY;
 8007bf2:	2002      	movs	r0, #2
}
 8007bf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bf8:	f7fd fbbc 	bl	8005374 <HAL_GetTick>
 8007bfc:	1b83      	subs	r3, r0, r6
 8007bfe:	429d      	cmp	r5, r3
 8007c00:	d30c      	bcc.n	8007c1c <HAL_UART_Transmit+0xd0>
 8007c02:	b15d      	cbz	r5, 8007c1c <HAL_UART_Transmit+0xd0>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007c04:	6823      	ldr	r3, [r4, #0]
 8007c06:	68da      	ldr	r2, [r3, #12]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	065b      	lsls	r3, r3, #25
 8007c0c:	d5f4      	bpl.n	8007bf8 <HAL_UART_Transmit+0xac>
 8007c0e:	e7d8      	b.n	8007bc2 <HAL_UART_Transmit+0x76>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c10:	6923      	ldr	r3, [r4, #16]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1b9      	bne.n	8007b8a <HAL_UART_Transmit+0x3e>
 8007c16:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 8007c18:	4698      	mov	r8, r3
 8007c1a:	e7b6      	b.n	8007b8a <HAL_UART_Transmit+0x3e>
        huart->gState = HAL_UART_STATE_READY;
 8007c1c:	2320      	movs	r3, #32
 8007c1e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8007c22:	2003      	movs	r0, #3
}
 8007c24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007c28 <HAL_UARTEx_ReceiveToIdle_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c28:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8007c2c:	2b20      	cmp	r3, #32
 8007c2e:	d127      	bne.n	8007c80 <HAL_UARTEx_ReceiveToIdle_IT+0x58>
    if ((pData == NULL) || (Size == 0U))
 8007c30:	b101      	cbz	r1, 8007c34 <HAL_UARTEx_ReceiveToIdle_IT+0xc>
 8007c32:	b90a      	cbnz	r2, 8007c38 <HAL_UARTEx_ReceiveToIdle_IT+0x10>
      return HAL_ERROR;
 8007c34:	2001      	movs	r0, #1
}
 8007c36:	4770      	bx	lr
{
 8007c38:	b410      	push	{r4}
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c3a:	2300      	movs	r3, #0
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007c3c:	2401      	movs	r4, #1
 8007c3e:	6304      	str	r4, [r0, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c40:	6343      	str	r3, [r0, #52]	@ 0x34
  huart->RxXferCount = Size;
 8007c42:	85c2      	strh	r2, [r0, #46]	@ 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c44:	6443      	str	r3, [r0, #68]	@ 0x44
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007c46:	6903      	ldr	r3, [r0, #16]
  huart->pRxBuffPtr = pData;
 8007c48:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c4a:	2122      	movs	r1, #34	@ 0x22
  huart->RxXferSize = Size;
 8007c4c:	8582      	strh	r2, [r0, #44]	@ 0x2c
{
 8007c4e:	b083      	sub	sp, #12
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007c50:	6802      	ldr	r2, [r0, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c52:	f880 1042 	strb.w	r1, [r0, #66]	@ 0x42
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007c56:	b11b      	cbz	r3, 8007c60 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007c58:	68d3      	ldr	r3, [r2, #12]
 8007c5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c5e:	60d3      	str	r3, [r2, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007c60:	6953      	ldr	r3, [r2, #20]
 8007c62:	f043 0301 	orr.w	r3, r3, #1
 8007c66:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007c68:	68d3      	ldr	r3, [r2, #12]
 8007c6a:	f043 0320 	orr.w	r3, r3, #32
 8007c6e:	60d3      	str	r3, [r2, #12]
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c70:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d006      	beq.n	8007c84 <HAL_UARTEx_ReceiveToIdle_IT+0x5c>
      return HAL_ERROR;
 8007c76:	2001      	movs	r0, #1
}
 8007c78:	b003      	add	sp, #12
 8007c7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c7e:	4770      	bx	lr
    return HAL_BUSY;
 8007c80:	2002      	movs	r0, #2
 8007c82:	4770      	bx	lr
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c84:	2300      	movs	r3, #0
 8007c86:	9301      	str	r3, [sp, #4]
 8007c88:	6813      	ldr	r3, [r2, #0]
 8007c8a:	9301      	str	r3, [sp, #4]
 8007c8c:	6853      	ldr	r3, [r2, #4]
 8007c8e:	9301      	str	r3, [sp, #4]
 8007c90:	9b01      	ldr	r3, [sp, #4]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c92:	f102 030c 	add.w	r3, r2, #12
 8007c96:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c9a:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9e:	f102 000c 	add.w	r0, r2, #12
 8007ca2:	e840 3100 	strex	r1, r3, [r0]
 8007ca6:	2900      	cmp	r1, #0
 8007ca8:	d1f3      	bne.n	8007c92 <HAL_UARTEx_ReceiveToIdle_IT+0x6a>
    status =  UART_Start_Receive_IT(huart, pData, Size);
 8007caa:	2000      	movs	r0, #0
 8007cac:	e7e4      	b.n	8007c78 <HAL_UARTEx_ReceiveToIdle_IT+0x50>
 8007cae:	bf00      	nop

08007cb0 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop

08007cb4 <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop

08007cb8 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop

08007cbc <UART_DMAAbortOnError>:
{
 8007cbc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cbe:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007cc4:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 8007cc6:	f7ff fff7 	bl	8007cb8 <HAL_UART_ErrorCallback>
}
 8007cca:	bd08      	pop	{r3, pc}

08007ccc <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ccc:	6883      	ldr	r3, [r0, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007cce:	6801      	ldr	r1, [r0, #0]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007cd0:	6a82      	ldr	r2, [r0, #40]	@ 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cd6:	d042      	beq.n	8007d5e <UART_Receive_IT.part.0.isra.0+0x92>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d039      	beq.n	8007d50 <UART_Receive_IT.part.0.isra.0+0x84>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007cdc:	684b      	ldr	r3, [r1, #4]
 8007cde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007ce2:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8007ce4:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8007ce6:	3201      	adds	r2, #1
    if (--huart->RxXferCount == 0U)
 8007ce8:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
      huart->pRxBuffPtr += 2U;
 8007cea:	6282      	str	r2, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8007cec:	3b01      	subs	r3, #1
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d132      	bne.n	8007d5c <UART_Receive_IT.part.0.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007cf6:	6802      	ldr	r2, [r0, #0]
 8007cf8:	68d1      	ldr	r1, [r2, #12]
 8007cfa:	f021 0120 	bic.w	r1, r1, #32
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8007cfe:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007d00:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007d02:	68d1      	ldr	r1, [r2, #12]
 8007d04:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8007d08:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007d0a:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8007d0c:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007d10:	f021 0101 	bic.w	r1, r1, #1
 8007d14:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8007d16:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d1a:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d1c:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8007d1e:	2901      	cmp	r1, #1
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8007d20:	b083      	sub	sp, #12
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d22:	d125      	bne.n	8007d70 <UART_Receive_IT.part.0.isra.0+0xa4>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d24:	6303      	str	r3, [r0, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d26:	f102 030c 	add.w	r3, r2, #12
 8007d2a:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d2e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d32:	f102 0c0c 	add.w	ip, r2, #12
 8007d36:	e84c 3100 	strex	r1, r3, [ip]
 8007d3a:	2900      	cmp	r1, #0
 8007d3c:	d1f3      	bne.n	8007d26 <UART_Receive_IT.part.0.isra.0+0x5a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007d3e:	6813      	ldr	r3, [r2, #0]
 8007d40:	06db      	lsls	r3, r3, #27
 8007d42:	d41a      	bmi.n	8007d7a <UART_Receive_IT.part.0.isra.0+0xae>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d44:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8007d46:	f7fc ff07 	bl	8004b58 <HAL_UARTEx_RxEventCallback>
}
 8007d4a:	b003      	add	sp, #12
 8007d4c:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007d50:	6903      	ldr	r3, [r0, #16]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1c2      	bne.n	8007cdc <UART_Receive_IT.part.0.isra.0+0x10>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007d56:	684b      	ldr	r3, [r1, #4]
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	e7c2      	b.n	8007ce2 <UART_Receive_IT.part.0.isra.0+0x16>
 8007d5c:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d5e:	6903      	ldr	r3, [r0, #16]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d1f8      	bne.n	8007d56 <UART_Receive_IT.part.0.isra.0+0x8a>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d64:	684b      	ldr	r3, [r1, #4]
 8007d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d6a:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr += 2U;
 8007d6e:	e7bb      	b.n	8007ce8 <UART_Receive_IT.part.0.isra.0+0x1c>
        HAL_UART_RxCpltCallback(huart);
 8007d70:	f7ff ffa0 	bl	8007cb4 <HAL_UART_RxCpltCallback>
}
 8007d74:	b003      	add	sp, #12
 8007d76:	f85d fb04 	ldr.w	pc, [sp], #4
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	9301      	str	r3, [sp, #4]
 8007d7e:	6813      	ldr	r3, [r2, #0]
 8007d80:	9301      	str	r3, [sp, #4]
 8007d82:	6853      	ldr	r3, [r2, #4]
 8007d84:	9301      	str	r3, [sp, #4]
 8007d86:	9b01      	ldr	r3, [sp, #4]
 8007d88:	e7dc      	b.n	8007d44 <UART_Receive_IT.part.0.isra.0+0x78>
 8007d8a:	bf00      	nop

08007d8c <HAL_UART_IRQHandler>:
{
 8007d8c:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007d8e:	6803      	ldr	r3, [r0, #0]
 8007d90:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d92:	68dd      	ldr	r5, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d94:	6959      	ldr	r1, [r3, #20]
  if (errorflags == RESET)
 8007d96:	f012 0f0f 	tst.w	r2, #15
{
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8007d9e:	d170      	bne.n	8007e82 <HAL_UART_IRQHandler+0xf6>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007da0:	0691      	lsls	r1, r2, #26
 8007da2:	d502      	bpl.n	8007daa <HAL_UART_IRQHandler+0x1e>
 8007da4:	06a9      	lsls	r1, r5, #26
 8007da6:	f100 80a1 	bmi.w	8007eec <HAL_UART_IRQHandler+0x160>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007daa:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007dac:	2901      	cmp	r1, #1
 8007dae:	d00b      	beq.n	8007dc8 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007db0:	0610      	lsls	r0, r2, #24
 8007db2:	d502      	bpl.n	8007dba <HAL_UART_IRQHandler+0x2e>
 8007db4:	0629      	lsls	r1, r5, #24
 8007db6:	f100 80a3 	bmi.w	8007f00 <HAL_UART_IRQHandler+0x174>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007dba:	0652      	lsls	r2, r2, #25
 8007dbc:	d502      	bpl.n	8007dc4 <HAL_UART_IRQHandler+0x38>
 8007dbe:	0668      	lsls	r0, r5, #25
 8007dc0:	f100 80bd 	bmi.w	8007f3e <HAL_UART_IRQHandler+0x1b2>
}
 8007dc4:	b003      	add	sp, #12
 8007dc6:	bd30      	pop	{r4, r5, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007dc8:	06d0      	lsls	r0, r2, #27
 8007dca:	d5f1      	bpl.n	8007db0 <HAL_UART_IRQHandler+0x24>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007dcc:	06e9      	lsls	r1, r5, #27
 8007dce:	d5ef      	bpl.n	8007db0 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	9201      	str	r2, [sp, #4]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	9201      	str	r2, [sp, #4]
 8007dd8:	685a      	ldr	r2, [r3, #4]
 8007dda:	9201      	str	r2, [sp, #4]
 8007ddc:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dde:	695a      	ldr	r2, [r3, #20]
 8007de0:	0655      	lsls	r5, r2, #25
 8007de2:	f140 8136 	bpl.w	8008052 <HAL_UART_IRQHandler+0x2c6>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007de6:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8007de8:	6802      	ldr	r2, [r0, #0]
 8007dea:	6852      	ldr	r2, [r2, #4]
 8007dec:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8007dee:	2a00      	cmp	r2, #0
 8007df0:	d0e8      	beq.n	8007dc4 <HAL_UART_IRQHandler+0x38>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007df2:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8007df4:	4291      	cmp	r1, r2
 8007df6:	d9e5      	bls.n	8007dc4 <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 8007df8:	85e2      	strh	r2, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007dfa:	69c2      	ldr	r2, [r0, #28]
 8007dfc:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8007e00:	d036      	beq.n	8007e70 <HAL_UART_IRQHandler+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e02:	f103 020c 	add.w	r2, r3, #12
 8007e06:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e0a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0e:	f103 050c 	add.w	r5, r3, #12
 8007e12:	e845 2100 	strex	r1, r2, [r5]
 8007e16:	2900      	cmp	r1, #0
 8007e18:	d1f3      	bne.n	8007e02 <HAL_UART_IRQHandler+0x76>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1a:	f103 0214 	add.w	r2, r3, #20
 8007e1e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e22:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e26:	f103 0514 	add.w	r5, r3, #20
 8007e2a:	e845 2100 	strex	r1, r2, [r5]
 8007e2e:	2900      	cmp	r1, #0
 8007e30:	d1f3      	bne.n	8007e1a <HAL_UART_IRQHandler+0x8e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e32:	f103 0214 	add.w	r2, r3, #20
 8007e36:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3e:	f103 0514 	add.w	r5, r3, #20
 8007e42:	e845 2100 	strex	r1, r2, [r5]
 8007e46:	2900      	cmp	r1, #0
 8007e48:	d1f3      	bne.n	8007e32 <HAL_UART_IRQHandler+0xa6>
          huart->RxState = HAL_UART_STATE_READY;
 8007e4a:	2220      	movs	r2, #32
 8007e4c:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e50:	6321      	str	r1, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e52:	f103 020c 	add.w	r2, r3, #12
 8007e56:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e5a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5e:	f103 050c 	add.w	r5, r3, #12
 8007e62:	e845 2100 	strex	r1, r2, [r5]
 8007e66:	2900      	cmp	r1, #0
 8007e68:	d1f3      	bne.n	8007e52 <HAL_UART_IRQHandler+0xc6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e6a:	f7fd fd09 	bl	8005880 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e6e:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e70:	2302      	movs	r3, #2
 8007e72:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e74:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8007e76:	1ac9      	subs	r1, r1, r3
 8007e78:	4620      	mov	r0, r4
 8007e7a:	b289      	uxth	r1, r1
 8007e7c:	f7fc fe6c 	bl	8004b58 <HAL_UARTEx_RxEventCallback>
 8007e80:	e7a0      	b.n	8007dc4 <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007e82:	f011 0101 	ands.w	r1, r1, #1
 8007e86:	d178      	bne.n	8007f7a <HAL_UART_IRQHandler+0x1ee>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007e88:	f415 7f90 	tst.w	r5, #288	@ 0x120
 8007e8c:	d08d      	beq.n	8007daa <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e8e:	07d0      	lsls	r0, r2, #31
 8007e90:	d50a      	bpl.n	8007ea8 <HAL_UART_IRQHandler+0x11c>
 8007e92:	05e8      	lsls	r0, r5, #23
 8007e94:	f140 80d9 	bpl.w	800804a <HAL_UART_IRQHandler+0x2be>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e98:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8007e9a:	f040 0001 	orr.w	r0, r0, #1
 8007e9e:	6460      	str	r0, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ea0:	0750      	lsls	r0, r2, #29
 8007ea2:	d55b      	bpl.n	8007f5c <HAL_UART_IRQHandler+0x1d0>
 8007ea4:	2900      	cmp	r1, #0
 8007ea6:	d16c      	bne.n	8007f82 <HAL_UART_IRQHandler+0x1f6>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ea8:	0790      	lsls	r0, r2, #30
 8007eaa:	d570      	bpl.n	8007f8e <HAL_UART_IRQHandler+0x202>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007eac:	0710      	lsls	r0, r2, #28
 8007eae:	f100 80c9 	bmi.w	8008044 <HAL_UART_IRQHandler+0x2b8>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007eb2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007eb4:	2900      	cmp	r1, #0
 8007eb6:	d085      	beq.n	8007dc4 <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007eb8:	0691      	lsls	r1, r2, #26
 8007eba:	d509      	bpl.n	8007ed0 <HAL_UART_IRQHandler+0x144>
 8007ebc:	06aa      	lsls	r2, r5, #26
 8007ebe:	d507      	bpl.n	8007ed0 <HAL_UART_IRQHandler+0x144>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ec0:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 8007ec4:	2a22      	cmp	r2, #34	@ 0x22
 8007ec6:	d103      	bne.n	8007ed0 <HAL_UART_IRQHandler+0x144>
 8007ec8:	4620      	mov	r0, r4
 8007eca:	f7ff feff 	bl	8007ccc <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ece:	6823      	ldr	r3, [r4, #0]
 8007ed0:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007ed2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ed4:	f002 0240 	and.w	r2, r2, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007ed8:	f001 0108 	and.w	r1, r1, #8
 8007edc:	ea52 0501 	orrs.w	r5, r2, r1
 8007ee0:	d15c      	bne.n	8007f9c <HAL_UART_IRQHandler+0x210>
        HAL_UART_ErrorCallback(huart);
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	f7ff fee8 	bl	8007cb8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ee8:	6465      	str	r5, [r4, #68]	@ 0x44
 8007eea:	e76b      	b.n	8007dc4 <HAL_UART_IRQHandler+0x38>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007eec:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8007ef0:	2b22      	cmp	r3, #34	@ 0x22
 8007ef2:	f47f af67 	bne.w	8007dc4 <HAL_UART_IRQHandler+0x38>
}
 8007ef6:	b003      	add	sp, #12
 8007ef8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007efc:	f7ff bee6 	b.w	8007ccc <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f00:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 8007f04:	2a21      	cmp	r2, #33	@ 0x21
 8007f06:	f47f af5d 	bne.w	8007dc4 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f0a:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007f0c:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f0e:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8007f12:	f000 80d9 	beq.w	80080c8 <HAL_UART_IRQHandler+0x33c>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007f16:	1c51      	adds	r1, r2, #1
 8007f18:	6221      	str	r1, [r4, #32]
 8007f1a:	7812      	ldrb	r2, [r2, #0]
 8007f1c:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8007f1e:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8007f20:	3a01      	subs	r2, #1
 8007f22:	b292      	uxth	r2, r2
 8007f24:	84e2      	strh	r2, [r4, #38]	@ 0x26
 8007f26:	2a00      	cmp	r2, #0
 8007f28:	f47f af4c 	bne.w	8007dc4 <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007f2c:	68da      	ldr	r2, [r3, #12]
 8007f2e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007f32:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f34:	68da      	ldr	r2, [r3, #12]
 8007f36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f3a:	60da      	str	r2, [r3, #12]
 8007f3c:	e742      	b.n	8007dc4 <HAL_UART_IRQHandler+0x38>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f3e:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8007f40:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f46:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8007f48:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8007f4a:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8007f4e:	f7ff feaf 	bl	8007cb0 <HAL_UART_TxCpltCallback>
    return;
 8007f52:	e737      	b.n	8007dc4 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007f54:	05e8      	lsls	r0, r5, #23
 8007f56:	d49f      	bmi.n	8007e98 <HAL_UART_IRQHandler+0x10c>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f58:	0750      	lsls	r0, r2, #29
 8007f5a:	d412      	bmi.n	8007f82 <HAL_UART_IRQHandler+0x1f6>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f5c:	0790      	lsls	r0, r2, #30
 8007f5e:	d516      	bpl.n	8007f8e <HAL_UART_IRQHandler+0x202>
 8007f60:	2900      	cmp	r1, #0
 8007f62:	d0a3      	beq.n	8007eac <HAL_UART_IRQHandler+0x120>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f64:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007f66:	f041 0104 	orr.w	r1, r1, #4
 8007f6a:	6461      	str	r1, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007f6c:	0711      	lsls	r1, r2, #28
 8007f6e:	d5a0      	bpl.n	8007eb2 <HAL_UART_IRQHandler+0x126>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f70:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007f72:	f041 0108 	orr.w	r1, r1, #8
 8007f76:	6461      	str	r1, [r4, #68]	@ 0x44
 8007f78:	e79b      	b.n	8007eb2 <HAL_UART_IRQHandler+0x126>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007f7a:	07d0      	lsls	r0, r2, #31
 8007f7c:	d4ea      	bmi.n	8007f54 <HAL_UART_IRQHandler+0x1c8>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f7e:	0750      	lsls	r0, r2, #29
 8007f80:	d55b      	bpl.n	800803a <HAL_UART_IRQHandler+0x2ae>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f82:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8007f84:	f040 0002 	orr.w	r0, r0, #2
 8007f88:	6460      	str	r0, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f8a:	0790      	lsls	r0, r2, #30
 8007f8c:	d4ea      	bmi.n	8007f64 <HAL_UART_IRQHandler+0x1d8>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007f8e:	0710      	lsls	r0, r2, #28
 8007f90:	d58f      	bpl.n	8007eb2 <HAL_UART_IRQHandler+0x126>
 8007f92:	f005 0020 	and.w	r0, r5, #32
 8007f96:	4308      	orrs	r0, r1
 8007f98:	d08b      	beq.n	8007eb2 <HAL_UART_IRQHandler+0x126>
 8007f9a:	e7e9      	b.n	8007f70 <HAL_UART_IRQHandler+0x1e4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9c:	f103 020c 	add.w	r2, r3, #12
 8007fa0:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fa4:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa8:	f103 000c 	add.w	r0, r3, #12
 8007fac:	e840 2100 	strex	r1, r2, [r0]
 8007fb0:	2900      	cmp	r1, #0
 8007fb2:	d1f3      	bne.n	8007f9c <HAL_UART_IRQHandler+0x210>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb4:	f103 0214 	add.w	r2, r3, #20
 8007fb8:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fbc:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc0:	f103 0014 	add.w	r0, r3, #20
 8007fc4:	e840 2100 	strex	r1, r2, [r0]
 8007fc8:	2900      	cmp	r1, #0
 8007fca:	d1f3      	bne.n	8007fb4 <HAL_UART_IRQHandler+0x228>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fcc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8007fce:	2a01      	cmp	r2, #1
 8007fd0:	d022      	beq.n	8008018 <HAL_UART_IRQHandler+0x28c>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fd2:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8007fd4:	2120      	movs	r1, #32
 8007fd6:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fda:	6322      	str	r2, [r4, #48]	@ 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fdc:	695a      	ldr	r2, [r3, #20]
 8007fde:	0655      	lsls	r5, r2, #25
 8007fe0:	d527      	bpl.n	8008032 <HAL_UART_IRQHandler+0x2a6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe2:	f103 0214 	add.w	r2, r3, #20
 8007fe6:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fee:	f103 0014 	add.w	r0, r3, #20
 8007ff2:	e840 2100 	strex	r1, r2, [r0]
 8007ff6:	2900      	cmp	r1, #0
 8007ff8:	d1f3      	bne.n	8007fe2 <HAL_UART_IRQHandler+0x256>
          if (huart->hdmarx != NULL)
 8007ffa:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8007ffc:	b1c8      	cbz	r0, 8008032 <HAL_UART_IRQHandler+0x2a6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ffe:	4b38      	ldr	r3, [pc, #224]	@ (80080e0 <HAL_UART_IRQHandler+0x354>)
 8008000:	6503      	str	r3, [r0, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008002:	f7fd fc87 	bl	8005914 <HAL_DMA_Abort_IT>
 8008006:	2800      	cmp	r0, #0
 8008008:	f43f aedc 	beq.w	8007dc4 <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800800c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800800e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
}
 8008010:	b003      	add	sp, #12
 8008012:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008016:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008018:	f103 020c 	add.w	r2, r3, #12
 800801c:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008020:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008024:	f103 000c 	add.w	r0, r3, #12
 8008028:	e840 2100 	strex	r1, r2, [r0]
 800802c:	2900      	cmp	r1, #0
 800802e:	d1f3      	bne.n	8008018 <HAL_UART_IRQHandler+0x28c>
 8008030:	e7cf      	b.n	8007fd2 <HAL_UART_IRQHandler+0x246>
            HAL_UART_ErrorCallback(huart);
 8008032:	4620      	mov	r0, r4
 8008034:	f7ff fe40 	bl	8007cb8 <HAL_UART_ErrorCallback>
 8008038:	e6c4      	b.n	8007dc4 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800803a:	0791      	lsls	r1, r2, #30
 800803c:	d492      	bmi.n	8007f64 <HAL_UART_IRQHandler+0x1d8>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800803e:	0711      	lsls	r1, r2, #28
 8008040:	d496      	bmi.n	8007f70 <HAL_UART_IRQHandler+0x1e4>
 8008042:	e736      	b.n	8007eb2 <HAL_UART_IRQHandler+0x126>
 8008044:	06a9      	lsls	r1, r5, #26
 8008046:	d493      	bmi.n	8007f70 <HAL_UART_IRQHandler+0x1e4>
 8008048:	e733      	b.n	8007eb2 <HAL_UART_IRQHandler+0x126>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800804a:	0750      	lsls	r0, r2, #29
 800804c:	f53f af2c 	bmi.w	8007ea8 <HAL_UART_IRQHandler+0x11c>
 8008050:	e784      	b.n	8007f5c <HAL_UART_IRQHandler+0x1d0>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008052:	8de1      	ldrh	r1, [r4, #46]	@ 0x2e
      if ((huart->RxXferCount > 0U)
 8008054:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008056:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
      if ((huart->RxXferCount > 0U)
 8008058:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800805a:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800805c:	2a00      	cmp	r2, #0
 800805e:	f43f aeb1 	beq.w	8007dc4 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008062:	1a41      	subs	r1, r0, r1
 8008064:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8008066:	2900      	cmp	r1, #0
 8008068:	f43f aeac 	beq.w	8007dc4 <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806c:	f103 020c 	add.w	r2, r3, #12
 8008070:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008074:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008078:	f103 050c 	add.w	r5, r3, #12
 800807c:	e845 2000 	strex	r0, r2, [r5]
 8008080:	2800      	cmp	r0, #0
 8008082:	d1f3      	bne.n	800806c <HAL_UART_IRQHandler+0x2e0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008084:	f103 0214 	add.w	r2, r3, #20
 8008088:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800808c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008090:	f103 0514 	add.w	r5, r3, #20
 8008094:	e845 2000 	strex	r0, r2, [r5]
 8008098:	2800      	cmp	r0, #0
 800809a:	d1f3      	bne.n	8008084 <HAL_UART_IRQHandler+0x2f8>
        huart->RxState = HAL_UART_STATE_READY;
 800809c:	2220      	movs	r2, #32
 800809e:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080a2:	6320      	str	r0, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a4:	f103 020c 	add.w	r2, r3, #12
 80080a8:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080ac:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b0:	f103 050c 	add.w	r5, r3, #12
 80080b4:	e845 2000 	strex	r0, r2, [r5]
 80080b8:	2800      	cmp	r0, #0
 80080ba:	d1f3      	bne.n	80080a4 <HAL_UART_IRQHandler+0x318>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80080bc:	2302      	movs	r3, #2
 80080be:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80080c0:	4620      	mov	r0, r4
 80080c2:	f7fc fd49 	bl	8004b58 <HAL_UARTEx_RxEventCallback>
 80080c6:	e67d      	b.n	8007dc4 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080c8:	6921      	ldr	r1, [r4, #16]
 80080ca:	2900      	cmp	r1, #0
 80080cc:	f47f af23 	bne.w	8007f16 <HAL_UART_IRQHandler+0x18a>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80080d0:	f832 1b02 	ldrh.w	r1, [r2], #2
 80080d4:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80080d8:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80080da:	6222      	str	r2, [r4, #32]
 80080dc:	e71f      	b.n	8007f1e <HAL_UART_IRQHandler+0x192>
 80080de:	bf00      	nop
 80080e0:	08007cbd 	.word	0x08007cbd

080080e4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80080e4:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80080e6:	4903      	ldr	r1, [pc, #12]	@ (80080f4 <MX_FATFS_Init+0x10>)
 80080e8:	4803      	ldr	r0, [pc, #12]	@ (80080f8 <MX_FATFS_Init+0x14>)
 80080ea:	f000 f81f 	bl	800812c <FATFS_LinkDriver>
 80080ee:	4b03      	ldr	r3, [pc, #12]	@ (80080fc <MX_FATFS_Init+0x18>)
 80080f0:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80080f2:	bd08      	pop	{r3, pc}
 80080f4:	20001984 	.word	0x20001984
 80080f8:	200008dc 	.word	0x200008dc
 80080fc:	20001988 	.word	0x20001988

08008100 <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8008100:	4b02      	ldr	r3, [pc, #8]	@ (800810c <USER_initialize+0xc>)
 8008102:	2201      	movs	r2, #1
 8008104:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008106:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END INIT */
}
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	200008f0 	.word	0x200008f0

08008110 <USER_read>:
)
{
  /* USER CODE BEGIN READ */
    return RES_OK;
  /* USER CODE END READ */
}
 8008110:	2000      	movs	r0, #0
 8008112:	4770      	bx	lr

08008114 <USER_ioctl>:
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 8008114:	2001      	movs	r0, #1
 8008116:	4770      	bx	lr

08008118 <USER_write>:
DRESULT USER_write (
 8008118:	2000      	movs	r0, #0
 800811a:	4770      	bx	lr

0800811c <USER_status>:
DSTATUS USER_status (
 800811c:	4b02      	ldr	r3, [pc, #8]	@ (8008128 <USER_status+0xc>)
 800811e:	2201      	movs	r2, #1
 8008120:	701a      	strb	r2, [r3, #0]
 8008122:	7818      	ldrb	r0, [r3, #0]
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	200008f0 	.word	0x200008f0

0800812c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800812c:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 800812e:	4b10      	ldr	r3, [pc, #64]	@ (8008170 <FATFS_LinkDriver+0x44>)
 8008130:	7a5c      	ldrb	r4, [r3, #9]
 8008132:	b9cc      	cbnz	r4, 8008168 <FATFS_LinkDriver+0x3c>
 8008134:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 8008136:	f004 00ff 	and.w	r0, r4, #255	@ 0xff
 800813a:	7a5c      	ldrb	r4, [r3, #9]
 800813c:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 800813e:	7a5c      	ldrb	r4, [r3, #9]
 8008140:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008144:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 8008146:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 8008148:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 800814a:	441c      	add	r4, r3
 800814c:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 800814e:	1c54      	adds	r4, r2, #1
 8008150:	b2e4      	uxtb	r4, r4
 8008152:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 8008154:	3230      	adds	r2, #48	@ 0x30
    path[1] = ':';
 8008156:	243a      	movs	r4, #58	@ 0x3a
    path[2] = '/';
 8008158:	232f      	movs	r3, #47	@ 0x2f
    path[1] = ':';
 800815a:	704c      	strb	r4, [r1, #1]
    path[0] = DiskNum + '0';
 800815c:	700a      	strb	r2, [r1, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 800815e:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 8008162:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8008164:	70c8      	strb	r0, [r1, #3]
}
 8008166:	4770      	bx	lr
  uint8_t ret = 1;
 8008168:	2001      	movs	r0, #1
}
 800816a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800816e:	4770      	bx	lr
 8008170:	2000198c 	.word	0x2000198c

08008174 <malloc>:
 8008174:	4b02      	ldr	r3, [pc, #8]	@ (8008180 <malloc+0xc>)
 8008176:	4601      	mov	r1, r0
 8008178:	6818      	ldr	r0, [r3, #0]
 800817a:	f000 b82d 	b.w	80081d8 <_malloc_r>
 800817e:	bf00      	nop
 8008180:	200008f4 	.word	0x200008f4

08008184 <free>:
 8008184:	4b02      	ldr	r3, [pc, #8]	@ (8008190 <free+0xc>)
 8008186:	4601      	mov	r1, r0
 8008188:	6818      	ldr	r0, [r3, #0]
 800818a:	f000 b8f5 	b.w	8008378 <_free_r>
 800818e:	bf00      	nop
 8008190:	200008f4 	.word	0x200008f4

08008194 <sbrk_aligned>:
 8008194:	b570      	push	{r4, r5, r6, lr}
 8008196:	4e0f      	ldr	r6, [pc, #60]	@ (80081d4 <sbrk_aligned+0x40>)
 8008198:	460c      	mov	r4, r1
 800819a:	6831      	ldr	r1, [r6, #0]
 800819c:	4605      	mov	r5, r0
 800819e:	b911      	cbnz	r1, 80081a6 <sbrk_aligned+0x12>
 80081a0:	f000 f8ae 	bl	8008300 <_sbrk_r>
 80081a4:	6030      	str	r0, [r6, #0]
 80081a6:	4621      	mov	r1, r4
 80081a8:	4628      	mov	r0, r5
 80081aa:	f000 f8a9 	bl	8008300 <_sbrk_r>
 80081ae:	1c43      	adds	r3, r0, #1
 80081b0:	d103      	bne.n	80081ba <sbrk_aligned+0x26>
 80081b2:	f04f 34ff 	mov.w	r4, #4294967295
 80081b6:	4620      	mov	r0, r4
 80081b8:	bd70      	pop	{r4, r5, r6, pc}
 80081ba:	1cc4      	adds	r4, r0, #3
 80081bc:	f024 0403 	bic.w	r4, r4, #3
 80081c0:	42a0      	cmp	r0, r4
 80081c2:	d0f8      	beq.n	80081b6 <sbrk_aligned+0x22>
 80081c4:	1a21      	subs	r1, r4, r0
 80081c6:	4628      	mov	r0, r5
 80081c8:	f000 f89a 	bl	8008300 <_sbrk_r>
 80081cc:	3001      	adds	r0, #1
 80081ce:	d1f2      	bne.n	80081b6 <sbrk_aligned+0x22>
 80081d0:	e7ef      	b.n	80081b2 <sbrk_aligned+0x1e>
 80081d2:	bf00      	nop
 80081d4:	20001998 	.word	0x20001998

080081d8 <_malloc_r>:
 80081d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081dc:	1ccd      	adds	r5, r1, #3
 80081de:	f025 0503 	bic.w	r5, r5, #3
 80081e2:	3508      	adds	r5, #8
 80081e4:	2d0c      	cmp	r5, #12
 80081e6:	bf38      	it	cc
 80081e8:	250c      	movcc	r5, #12
 80081ea:	2d00      	cmp	r5, #0
 80081ec:	4606      	mov	r6, r0
 80081ee:	db01      	blt.n	80081f4 <_malloc_r+0x1c>
 80081f0:	42a9      	cmp	r1, r5
 80081f2:	d904      	bls.n	80081fe <_malloc_r+0x26>
 80081f4:	230c      	movs	r3, #12
 80081f6:	6033      	str	r3, [r6, #0]
 80081f8:	2000      	movs	r0, #0
 80081fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80082d4 <_malloc_r+0xfc>
 8008202:	f000 f869 	bl	80082d8 <__malloc_lock>
 8008206:	f8d8 3000 	ldr.w	r3, [r8]
 800820a:	461c      	mov	r4, r3
 800820c:	bb44      	cbnz	r4, 8008260 <_malloc_r+0x88>
 800820e:	4629      	mov	r1, r5
 8008210:	4630      	mov	r0, r6
 8008212:	f7ff ffbf 	bl	8008194 <sbrk_aligned>
 8008216:	1c43      	adds	r3, r0, #1
 8008218:	4604      	mov	r4, r0
 800821a:	d158      	bne.n	80082ce <_malloc_r+0xf6>
 800821c:	f8d8 4000 	ldr.w	r4, [r8]
 8008220:	4627      	mov	r7, r4
 8008222:	2f00      	cmp	r7, #0
 8008224:	d143      	bne.n	80082ae <_malloc_r+0xd6>
 8008226:	2c00      	cmp	r4, #0
 8008228:	d04b      	beq.n	80082c2 <_malloc_r+0xea>
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	4639      	mov	r1, r7
 800822e:	4630      	mov	r0, r6
 8008230:	eb04 0903 	add.w	r9, r4, r3
 8008234:	f000 f864 	bl	8008300 <_sbrk_r>
 8008238:	4581      	cmp	r9, r0
 800823a:	d142      	bne.n	80082c2 <_malloc_r+0xea>
 800823c:	6821      	ldr	r1, [r4, #0]
 800823e:	1a6d      	subs	r5, r5, r1
 8008240:	4629      	mov	r1, r5
 8008242:	4630      	mov	r0, r6
 8008244:	f7ff ffa6 	bl	8008194 <sbrk_aligned>
 8008248:	3001      	adds	r0, #1
 800824a:	d03a      	beq.n	80082c2 <_malloc_r+0xea>
 800824c:	6823      	ldr	r3, [r4, #0]
 800824e:	442b      	add	r3, r5
 8008250:	6023      	str	r3, [r4, #0]
 8008252:	f8d8 3000 	ldr.w	r3, [r8]
 8008256:	685a      	ldr	r2, [r3, #4]
 8008258:	bb62      	cbnz	r2, 80082b4 <_malloc_r+0xdc>
 800825a:	f8c8 7000 	str.w	r7, [r8]
 800825e:	e00f      	b.n	8008280 <_malloc_r+0xa8>
 8008260:	6822      	ldr	r2, [r4, #0]
 8008262:	1b52      	subs	r2, r2, r5
 8008264:	d420      	bmi.n	80082a8 <_malloc_r+0xd0>
 8008266:	2a0b      	cmp	r2, #11
 8008268:	d917      	bls.n	800829a <_malloc_r+0xc2>
 800826a:	1961      	adds	r1, r4, r5
 800826c:	42a3      	cmp	r3, r4
 800826e:	6025      	str	r5, [r4, #0]
 8008270:	bf18      	it	ne
 8008272:	6059      	strne	r1, [r3, #4]
 8008274:	6863      	ldr	r3, [r4, #4]
 8008276:	bf08      	it	eq
 8008278:	f8c8 1000 	streq.w	r1, [r8]
 800827c:	5162      	str	r2, [r4, r5]
 800827e:	604b      	str	r3, [r1, #4]
 8008280:	4630      	mov	r0, r6
 8008282:	f000 f82f 	bl	80082e4 <__malloc_unlock>
 8008286:	f104 000b 	add.w	r0, r4, #11
 800828a:	1d23      	adds	r3, r4, #4
 800828c:	f020 0007 	bic.w	r0, r0, #7
 8008290:	1ac2      	subs	r2, r0, r3
 8008292:	bf1c      	itt	ne
 8008294:	1a1b      	subne	r3, r3, r0
 8008296:	50a3      	strne	r3, [r4, r2]
 8008298:	e7af      	b.n	80081fa <_malloc_r+0x22>
 800829a:	6862      	ldr	r2, [r4, #4]
 800829c:	42a3      	cmp	r3, r4
 800829e:	bf0c      	ite	eq
 80082a0:	f8c8 2000 	streq.w	r2, [r8]
 80082a4:	605a      	strne	r2, [r3, #4]
 80082a6:	e7eb      	b.n	8008280 <_malloc_r+0xa8>
 80082a8:	4623      	mov	r3, r4
 80082aa:	6864      	ldr	r4, [r4, #4]
 80082ac:	e7ae      	b.n	800820c <_malloc_r+0x34>
 80082ae:	463c      	mov	r4, r7
 80082b0:	687f      	ldr	r7, [r7, #4]
 80082b2:	e7b6      	b.n	8008222 <_malloc_r+0x4a>
 80082b4:	461a      	mov	r2, r3
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	42a3      	cmp	r3, r4
 80082ba:	d1fb      	bne.n	80082b4 <_malloc_r+0xdc>
 80082bc:	2300      	movs	r3, #0
 80082be:	6053      	str	r3, [r2, #4]
 80082c0:	e7de      	b.n	8008280 <_malloc_r+0xa8>
 80082c2:	230c      	movs	r3, #12
 80082c4:	6033      	str	r3, [r6, #0]
 80082c6:	4630      	mov	r0, r6
 80082c8:	f000 f80c 	bl	80082e4 <__malloc_unlock>
 80082cc:	e794      	b.n	80081f8 <_malloc_r+0x20>
 80082ce:	6005      	str	r5, [r0, #0]
 80082d0:	e7d6      	b.n	8008280 <_malloc_r+0xa8>
 80082d2:	bf00      	nop
 80082d4:	2000199c 	.word	0x2000199c

080082d8 <__malloc_lock>:
 80082d8:	4801      	ldr	r0, [pc, #4]	@ (80082e0 <__malloc_lock+0x8>)
 80082da:	f000 b84b 	b.w	8008374 <__retarget_lock_acquire_recursive>
 80082de:	bf00      	nop
 80082e0:	20001adc 	.word	0x20001adc

080082e4 <__malloc_unlock>:
 80082e4:	4801      	ldr	r0, [pc, #4]	@ (80082ec <__malloc_unlock+0x8>)
 80082e6:	f000 b846 	b.w	8008376 <__retarget_lock_release_recursive>
 80082ea:	bf00      	nop
 80082ec:	20001adc 	.word	0x20001adc

080082f0 <memset>:
 80082f0:	4402      	add	r2, r0
 80082f2:	4603      	mov	r3, r0
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d100      	bne.n	80082fa <memset+0xa>
 80082f8:	4770      	bx	lr
 80082fa:	f803 1b01 	strb.w	r1, [r3], #1
 80082fe:	e7f9      	b.n	80082f4 <memset+0x4>

08008300 <_sbrk_r>:
 8008300:	b538      	push	{r3, r4, r5, lr}
 8008302:	4d06      	ldr	r5, [pc, #24]	@ (800831c <_sbrk_r+0x1c>)
 8008304:	2300      	movs	r3, #0
 8008306:	4604      	mov	r4, r0
 8008308:	4608      	mov	r0, r1
 800830a:	602b      	str	r3, [r5, #0]
 800830c:	f7fc ff92 	bl	8005234 <_sbrk>
 8008310:	1c43      	adds	r3, r0, #1
 8008312:	d102      	bne.n	800831a <_sbrk_r+0x1a>
 8008314:	682b      	ldr	r3, [r5, #0]
 8008316:	b103      	cbz	r3, 800831a <_sbrk_r+0x1a>
 8008318:	6023      	str	r3, [r4, #0]
 800831a:	bd38      	pop	{r3, r4, r5, pc}
 800831c:	20001ad8 	.word	0x20001ad8

08008320 <__errno>:
 8008320:	4b01      	ldr	r3, [pc, #4]	@ (8008328 <__errno+0x8>)
 8008322:	6818      	ldr	r0, [r3, #0]
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop
 8008328:	200008f4 	.word	0x200008f4

0800832c <__libc_init_array>:
 800832c:	b570      	push	{r4, r5, r6, lr}
 800832e:	4d0d      	ldr	r5, [pc, #52]	@ (8008364 <__libc_init_array+0x38>)
 8008330:	4c0d      	ldr	r4, [pc, #52]	@ (8008368 <__libc_init_array+0x3c>)
 8008332:	1b64      	subs	r4, r4, r5
 8008334:	10a4      	asrs	r4, r4, #2
 8008336:	2600      	movs	r6, #0
 8008338:	42a6      	cmp	r6, r4
 800833a:	d109      	bne.n	8008350 <__libc_init_array+0x24>
 800833c:	4d0b      	ldr	r5, [pc, #44]	@ (800836c <__libc_init_array+0x40>)
 800833e:	4c0c      	ldr	r4, [pc, #48]	@ (8008370 <__libc_init_array+0x44>)
 8008340:	f000 f864 	bl	800840c <_init>
 8008344:	1b64      	subs	r4, r4, r5
 8008346:	10a4      	asrs	r4, r4, #2
 8008348:	2600      	movs	r6, #0
 800834a:	42a6      	cmp	r6, r4
 800834c:	d105      	bne.n	800835a <__libc_init_array+0x2e>
 800834e:	bd70      	pop	{r4, r5, r6, pc}
 8008350:	f855 3b04 	ldr.w	r3, [r5], #4
 8008354:	4798      	blx	r3
 8008356:	3601      	adds	r6, #1
 8008358:	e7ee      	b.n	8008338 <__libc_init_array+0xc>
 800835a:	f855 3b04 	ldr.w	r3, [r5], #4
 800835e:	4798      	blx	r3
 8008360:	3601      	adds	r6, #1
 8008362:	e7f2      	b.n	800834a <__libc_init_array+0x1e>
 8008364:	08009938 	.word	0x08009938
 8008368:	08009938 	.word	0x08009938
 800836c:	08009938 	.word	0x08009938
 8008370:	0800993c 	.word	0x0800993c

08008374 <__retarget_lock_acquire_recursive>:
 8008374:	4770      	bx	lr

08008376 <__retarget_lock_release_recursive>:
 8008376:	4770      	bx	lr

08008378 <_free_r>:
 8008378:	b538      	push	{r3, r4, r5, lr}
 800837a:	4605      	mov	r5, r0
 800837c:	2900      	cmp	r1, #0
 800837e:	d041      	beq.n	8008404 <_free_r+0x8c>
 8008380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008384:	1f0c      	subs	r4, r1, #4
 8008386:	2b00      	cmp	r3, #0
 8008388:	bfb8      	it	lt
 800838a:	18e4      	addlt	r4, r4, r3
 800838c:	f7ff ffa4 	bl	80082d8 <__malloc_lock>
 8008390:	4a1d      	ldr	r2, [pc, #116]	@ (8008408 <_free_r+0x90>)
 8008392:	6813      	ldr	r3, [r2, #0]
 8008394:	b933      	cbnz	r3, 80083a4 <_free_r+0x2c>
 8008396:	6063      	str	r3, [r4, #4]
 8008398:	6014      	str	r4, [r2, #0]
 800839a:	4628      	mov	r0, r5
 800839c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083a0:	f7ff bfa0 	b.w	80082e4 <__malloc_unlock>
 80083a4:	42a3      	cmp	r3, r4
 80083a6:	d908      	bls.n	80083ba <_free_r+0x42>
 80083a8:	6820      	ldr	r0, [r4, #0]
 80083aa:	1821      	adds	r1, r4, r0
 80083ac:	428b      	cmp	r3, r1
 80083ae:	bf01      	itttt	eq
 80083b0:	6819      	ldreq	r1, [r3, #0]
 80083b2:	685b      	ldreq	r3, [r3, #4]
 80083b4:	1809      	addeq	r1, r1, r0
 80083b6:	6021      	streq	r1, [r4, #0]
 80083b8:	e7ed      	b.n	8008396 <_free_r+0x1e>
 80083ba:	461a      	mov	r2, r3
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	b10b      	cbz	r3, 80083c4 <_free_r+0x4c>
 80083c0:	42a3      	cmp	r3, r4
 80083c2:	d9fa      	bls.n	80083ba <_free_r+0x42>
 80083c4:	6811      	ldr	r1, [r2, #0]
 80083c6:	1850      	adds	r0, r2, r1
 80083c8:	42a0      	cmp	r0, r4
 80083ca:	d10b      	bne.n	80083e4 <_free_r+0x6c>
 80083cc:	6820      	ldr	r0, [r4, #0]
 80083ce:	4401      	add	r1, r0
 80083d0:	1850      	adds	r0, r2, r1
 80083d2:	4283      	cmp	r3, r0
 80083d4:	6011      	str	r1, [r2, #0]
 80083d6:	d1e0      	bne.n	800839a <_free_r+0x22>
 80083d8:	6818      	ldr	r0, [r3, #0]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	6053      	str	r3, [r2, #4]
 80083de:	4408      	add	r0, r1
 80083e0:	6010      	str	r0, [r2, #0]
 80083e2:	e7da      	b.n	800839a <_free_r+0x22>
 80083e4:	d902      	bls.n	80083ec <_free_r+0x74>
 80083e6:	230c      	movs	r3, #12
 80083e8:	602b      	str	r3, [r5, #0]
 80083ea:	e7d6      	b.n	800839a <_free_r+0x22>
 80083ec:	6820      	ldr	r0, [r4, #0]
 80083ee:	1821      	adds	r1, r4, r0
 80083f0:	428b      	cmp	r3, r1
 80083f2:	bf04      	itt	eq
 80083f4:	6819      	ldreq	r1, [r3, #0]
 80083f6:	685b      	ldreq	r3, [r3, #4]
 80083f8:	6063      	str	r3, [r4, #4]
 80083fa:	bf04      	itt	eq
 80083fc:	1809      	addeq	r1, r1, r0
 80083fe:	6021      	streq	r1, [r4, #0]
 8008400:	6054      	str	r4, [r2, #4]
 8008402:	e7ca      	b.n	800839a <_free_r+0x22>
 8008404:	bd38      	pop	{r3, r4, r5, pc}
 8008406:	bf00      	nop
 8008408:	2000199c 	.word	0x2000199c

0800840c <_init>:
 800840c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800840e:	bf00      	nop
 8008410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008412:	bc08      	pop	{r3}
 8008414:	469e      	mov	lr, r3
 8008416:	4770      	bx	lr

08008418 <_fini>:
 8008418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800841a:	bf00      	nop
 800841c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800841e:	bc08      	pop	{r3}
 8008420:	469e      	mov	lr, r3
 8008422:	4770      	bx	lr
