
BMS Tester - Cell Emulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006230  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e54  080063e0  080063e0  000073e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007234  08007234  00009468  2**0
                  CONTENTS
  4 .ARM          00000008  08007234  08007234  00008234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800723c  0800723c  00009468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800723c  0800723c  0000823c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007240  08007240  00008240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000468  20000000  08007244  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009468  2**0
                  CONTENTS
 10 .bss          00000708  20000468  20000468  00009468  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b70  20000b70  00009468  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009468  2**0
                  CONTENTS, READONLY
 13 .debug_info   00048748  00000000  00000000  00009498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a3c  00000000  00000000  00051be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003338  00000000  00000000  00055620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000267a  00000000  00000000  00058958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002399c  00000000  00000000  0005afd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ebbf  00000000  00000000  0007e96e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee476  00000000  00000000  0009d52d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0018b9a3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000e898  00000000  00000000  0018b9e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0019a280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000468 	.word	0x20000468
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080063c8 	.word	0x080063c8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000046c 	.word	0x2000046c
 80001ec:	080063c8 	.word	0x080063c8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af02      	add	r7, sp, #8
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	4608      	mov	r0, r1
 800058a:	4611      	mov	r1, r2
 800058c:	461a      	mov	r2, r3
 800058e:	4603      	mov	r3, r0
 8000590:	817b      	strh	r3, [r7, #10]
 8000592:	460b      	mov	r3, r1
 8000594:	813b      	strh	r3, [r7, #8]
 8000596:	4613      	mov	r3, r2
 8000598:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 80005a0:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 80005a2:	7dbb      	ldrb	r3, [r7, #22]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	bf0c      	ite	eq
 80005a8:	2301      	moveq	r3, #1
 80005aa:	2300      	movne	r3, #0
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 80005b0:	897a      	ldrh	r2, [r7, #10]
 80005b2:	88fb      	ldrh	r3, [r7, #6]
 80005b4:	4413      	add	r3, r2
 80005b6:	b298      	uxth	r0, r3
 80005b8:	893b      	ldrh	r3, [r7, #8]
 80005ba:	3301      	adds	r3, #1
 80005bc:	b29b      	uxth	r3, r3
 80005be:	893a      	ldrh	r2, [r7, #8]
 80005c0:	8979      	ldrh	r1, [r7, #10]
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	4603      	mov	r3, r0
 80005c6:	68f8      	ldr	r0, [r7, #12]
 80005c8:	f001 f883 	bl	80016d2 <u8g2_IsIntersection>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d040      	beq.n	8000654 <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 80005d2:	2301      	movs	r3, #1
 80005d4:	75fb      	strb	r3, [r7, #23]
  while(len > 0) {
 80005d6:	e035      	b.n	8000644 <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 80005d8:	6a3b      	ldr	r3, [r7, #32]
 80005da:	781a      	ldrb	r2, [r3, #0]
 80005dc:	7dfb      	ldrb	r3, [r7, #23]
 80005de:	4013      	ands	r3, r2
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d00c      	beq.n	8000600 <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	7dba      	ldrb	r2, [r7, #22]
 80005ea:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80005ee:	893a      	ldrh	r2, [r7, #8]
 80005f0:	8979      	ldrh	r1, [r7, #10]
 80005f2:	2300      	movs	r3, #0
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	2301      	movs	r3, #1
 80005f8:	68f8      	ldr	r0, [r7, #12]
 80005fa:	f000 ffac 	bl	8001556 <u8g2_DrawHVLine>
 80005fe:	e010      	b.n	8000622 <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8000606:	2b00      	cmp	r3, #0
 8000608:	d10b      	bne.n	8000622 <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	7d7a      	ldrb	r2, [r7, #21]
 800060e:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8000612:	893a      	ldrh	r2, [r7, #8]
 8000614:	8979      	ldrh	r1, [r7, #10]
 8000616:	2300      	movs	r3, #0
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2301      	movs	r3, #1
 800061c:	68f8      	ldr	r0, [r7, #12]
 800061e:	f000 ff9a 	bl	8001556 <u8g2_DrawHVLine>
    }
    x++;
 8000622:	897b      	ldrh	r3, [r7, #10]
 8000624:	3301      	adds	r3, #1
 8000626:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 8000628:	7dfb      	ldrb	r3, [r7, #23]
 800062a:	005b      	lsls	r3, r3, #1
 800062c:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 800062e:	7dfb      	ldrb	r3, [r7, #23]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d104      	bne.n	800063e <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 8000634:	2301      	movs	r3, #1
 8000636:	75fb      	strb	r3, [r7, #23]
      b++;
 8000638:	6a3b      	ldr	r3, [r7, #32]
 800063a:	3301      	adds	r3, #1
 800063c:	623b      	str	r3, [r7, #32]
    }
    len--;
 800063e:	88fb      	ldrh	r3, [r7, #6]
 8000640:	3b01      	subs	r3, #1
 8000642:	80fb      	strh	r3, [r7, #6]
  while(len > 0) {
 8000644:	88fb      	ldrh	r3, [r7, #6]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d1c6      	bne.n	80005d8 <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	7dba      	ldrb	r2, [r7, #22]
 800064e:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
 8000652:	e000      	b.n	8000656 <u8g2_DrawHXBM+0xd6>
    return;
 8000654:	bf00      	nop
}
 8000656:	3718      	adds	r7, #24
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af02      	add	r7, sp, #8
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	4608      	mov	r0, r1
 8000666:	4611      	mov	r1, r2
 8000668:	461a      	mov	r2, r3
 800066a:	4603      	mov	r3, r0
 800066c:	817b      	strh	r3, [r7, #10]
 800066e:	460b      	mov	r3, r1
 8000670:	813b      	strh	r3, [r7, #8]
 8000672:	4613      	mov	r3, r2
 8000674:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 8000676:	88fb      	ldrh	r3, [r7, #6]
 8000678:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 800067a:	8afb      	ldrh	r3, [r7, #22]
 800067c:	3307      	adds	r3, #7
 800067e:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 8000680:	8afb      	ldrh	r3, [r7, #22]
 8000682:	08db      	lsrs	r3, r3, #3
 8000684:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8000686:	897a      	ldrh	r2, [r7, #10]
 8000688:	88fb      	ldrh	r3, [r7, #6]
 800068a:	4413      	add	r3, r2
 800068c:	b298      	uxth	r0, r3
 800068e:	893a      	ldrh	r2, [r7, #8]
 8000690:	8c3b      	ldrh	r3, [r7, #32]
 8000692:	4413      	add	r3, r2
 8000694:	b29b      	uxth	r3, r3
 8000696:	893a      	ldrh	r2, [r7, #8]
 8000698:	8979      	ldrh	r1, [r7, #10]
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	4603      	mov	r3, r0
 800069e:	68f8      	ldr	r0, [r7, #12]
 80006a0:	f001 f817 	bl	80016d2 <u8g2_IsIntersection>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d017      	beq.n	80006da <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 80006aa:	e012      	b.n	80006d2 <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 80006ac:	88f8      	ldrh	r0, [r7, #6]
 80006ae:	893a      	ldrh	r2, [r7, #8]
 80006b0:	8979      	ldrh	r1, [r7, #10]
 80006b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	4603      	mov	r3, r0
 80006b8:	68f8      	ldr	r0, [r7, #12]
 80006ba:	f7ff ff61 	bl	8000580 <u8g2_DrawHXBM>
    bitmap += blen;
 80006be:	8afb      	ldrh	r3, [r7, #22]
 80006c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006c2:	4413      	add	r3, r2
 80006c4:	627b      	str	r3, [r7, #36]	@ 0x24
    y++;
 80006c6:	893b      	ldrh	r3, [r7, #8]
 80006c8:	3301      	adds	r3, #1
 80006ca:	813b      	strh	r3, [r7, #8]
    h--;
 80006cc:	8c3b      	ldrh	r3, [r7, #32]
 80006ce:	3b01      	subs	r3, #1
 80006d0:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 80006d2:	8c3b      	ldrh	r3, [r7, #32]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d1e9      	bne.n	80006ac <u8g2_DrawXBM+0x50>
 80006d8:	e000      	b.n	80006dc <u8g2_DrawXBM+0x80>
    return;
 80006da:	bf00      	nop
  }
}
 80006dc:	3718      	adds	r7, #24
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b084      	sub	sp, #16
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	7c1b      	ldrb	r3, [r3, #16]
 80006f0:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80006f8:	461a      	mov	r2, r3
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	fb02 f303 	mul.w	r3, r2, r3
 8000700:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	00db      	lsls	r3, r3, #3
 8000706:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800070c:	68fa      	ldr	r2, [r7, #12]
 800070e:	2100      	movs	r1, #0
 8000710:	4618      	mov	r0, r3
 8000712:	f004 fe8a 	bl	800542a <memset>
}
 8000716:	bf00      	nop
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	b086      	sub	sp, #24
 8000722:	af02      	add	r7, sp, #8
 8000724:	6078      	str	r0, [r7, #4]
 8000726:	460b      	mov	r3, r1
 8000728:	70fb      	strb	r3, [r7, #3]
 800072a:	4613      	mov	r3, r2
 800072c:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	7c1b      	ldrb	r3, [r3, #16]
 8000734:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8000736:	78fb      	ldrb	r3, [r7, #3]
 8000738:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800073e:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8000740:	7bfb      	ldrb	r3, [r7, #15]
 8000742:	b29b      	uxth	r3, r3
 8000744:	89ba      	ldrh	r2, [r7, #12]
 8000746:	fb12 f303 	smulbb	r3, r2, r3
 800074a:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 800074c:	89bb      	ldrh	r3, [r7, #12]
 800074e:	00db      	lsls	r3, r3, #3
 8000750:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8000752:	89bb      	ldrh	r3, [r7, #12]
 8000754:	68ba      	ldr	r2, [r7, #8]
 8000756:	4413      	add	r3, r2
 8000758:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800075a:	7bf9      	ldrb	r1, [r7, #15]
 800075c:	78ba      	ldrb	r2, [r7, #2]
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	460b      	mov	r3, r1
 8000764:	2100      	movs	r1, #0
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f001 fc99 	bl	800209e <u8x8_DrawTile>
}
 800076c:	bf00      	nop
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000786:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800078e:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	7c5b      	ldrb	r3, [r3, #17]
 8000796:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8000798:	7bba      	ldrb	r2, [r7, #14]
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	4619      	mov	r1, r3
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f7ff ffbd 	bl	800071e <u8g2_send_tile_row>
    src_row++;
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
 80007a6:	3301      	adds	r3, #1
 80007a8:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 80007aa:	7bbb      	ldrb	r3, [r7, #14]
 80007ac:	3301      	adds	r3, #1
 80007ae:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 80007b0:	7bfa      	ldrb	r2, [r7, #15]
 80007b2:	7b7b      	ldrb	r3, [r7, #13]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d203      	bcs.n	80007c0 <u8g2_send_buffer+0x4c>
 80007b8:	7bba      	ldrb	r2, [r7, #14]
 80007ba:	7b3b      	ldrb	r3, [r7, #12]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d3eb      	bcc.n	8000798 <u8g2_send_buffer+0x24>
}
 80007c0:	bf00      	nop
 80007c2:	3710      	adds	r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f7ff ffcf 	bl	8000774 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f001 fcc3 	bl	8002162 <u8x8_RefreshDisplay>
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	460b      	mov	r3, r1
 80007ee:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	78fa      	ldrb	r2, [r7, #3]
 80007f4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  u8g2->cb->update_dimension(u8g2);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	4798      	blx	r3
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8000822:	2b00      	cmp	r3, #0
 8000824:	d002      	beq.n	800082c <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f7ff ff5b 	bl	80006e2 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 800082c:	2100      	movs	r1, #0
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f7ff ffd8 	bl	80007e4 <u8g2_SetBufferCurrTileRow>
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f7ff ff95 	bl	8000774 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8000850:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8000858:	7bfb      	ldrb	r3, [r7, #15]
 800085a:	4413      	add	r3, r2
 800085c:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	7c5b      	ldrb	r3, [r3, #17]
 8000864:	7bfa      	ldrb	r2, [r7, #15]
 8000866:	429a      	cmp	r2, r3
 8000868:	d304      	bcc.n	8000874 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f001 fc79 	bl	8002162 <u8x8_RefreshDisplay>
    return 0;
 8000870:	2300      	movs	r3, #0
 8000872:	e00d      	b.n	8000890 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800087a:	2b00      	cmp	r3, #0
 800087c:	d002      	beq.n	8000884 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f7ff ff2f 	bl	80006e2 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8000884:	7bfb      	ldrb	r3, [r7, #15]
 8000886:	4619      	mov	r1, r3
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f7ff ffab 	bl	80007e4 <u8g2_SetBufferCurrTileRow>
  return 1;
 800088e:	2301      	movs	r3, #1
}
 8000890:	4618      	mov	r0, r3
 8000892:	3710      	adds	r7, #16
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f7ff ffb7 	bl	8000814 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f7ff ffc8 	bl	800083c <u8g2_NextPage>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d1f9      	bne.n	80008a6 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 80008b2:	2100      	movs	r1, #0
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f7ff ff95 	bl	80007e4 <u8g2_SetBufferCurrTileRow>
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2208      	movs	r2, #8
 80008d0:	701a      	strb	r2, [r3, #0]
  return buf;
 80008d2:	4b03      	ldr	r3, [pc, #12]	@ (80008e0 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	20000484 	.word	0x20000484

080008e4 <u8g2_Setup_st7565_64128n_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_lm6063, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_64128n_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b088      	sub	sp, #32
 80008e8:	af02      	add	r7, sp, #8
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
 80008f0:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_64128n, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a0b      	ldr	r2, [pc, #44]	@ (8000928 <u8g2_Setup_st7565_64128n_f+0x44>)
 80008fa:	490c      	ldr	r1, [pc, #48]	@ (800092c <u8g2_Setup_st7565_64128n_f+0x48>)
 80008fc:	68f8      	ldr	r0, [r7, #12]
 80008fe:	f001 fc91 	bl	8002224 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8000902:	f107 0313 	add.w	r3, r7, #19
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff ffdc 	bl	80008c4 <u8g2_m_16_8_f>
 800090c:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800090e:	7cfa      	ldrb	r2, [r7, #19]
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	9300      	str	r3, [sp, #0]
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <u8g2_Setup_st7565_64128n_f+0x4c>)
 8000916:	6979      	ldr	r1, [r7, #20]
 8000918:	68f8      	ldr	r0, [r7, #12]
 800091a:	f000 ffc4 	bl	80018a6 <u8g2_SetupBuffer>
}
 800091e:	bf00      	nop
 8000920:	3718      	adds	r7, #24
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	08001db9 	.word	0x08001db9
 800092c:	08001f59 	.word	0x08001f59
 8000930:	08001729 	.word	0x08001729

08000934 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	460b      	mov	r3, r1
 800093e:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8000940:	78fb      	ldrb	r3, [r7, #3]
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	4413      	add	r3, r2
 8000946:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	781b      	ldrb	r3, [r3, #0]
}
 800094c:	4618      	mov	r0, r3
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	460b      	mov	r3, r1
 8000962:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8000964:	78fb      	ldrb	r3, [r7, #3]
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	81fb      	strh	r3, [r7, #14]
    font++;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	3301      	adds	r3, #1
 8000976:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8000978:	89fb      	ldrh	r3, [r7, #14]
 800097a:	021b      	lsls	r3, r3, #8
 800097c:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	461a      	mov	r2, r3
 8000984:	89fb      	ldrh	r3, [r7, #14]
 8000986:	4413      	add	r3, r2
 8000988:	81fb      	strh	r3, [r7, #14]
    return pos;
 800098a:	89fb      	ldrh	r3, [r7, #14]
}
 800098c:	4618      	mov	r0, r3
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80009a2:	2100      	movs	r1, #0
 80009a4:	6838      	ldr	r0, [r7, #0]
 80009a6:	f7ff ffc5 	bl	8000934 <u8g2_font_get_byte>
 80009aa:	4603      	mov	r3, r0
 80009ac:	461a      	mov	r2, r3
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80009b2:	2101      	movs	r1, #1
 80009b4:	6838      	ldr	r0, [r7, #0]
 80009b6:	f7ff ffbd 	bl	8000934 <u8g2_font_get_byte>
 80009ba:	4603      	mov	r3, r0
 80009bc:	461a      	mov	r2, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80009c2:	2102      	movs	r1, #2
 80009c4:	6838      	ldr	r0, [r7, #0]
 80009c6:	f7ff ffb5 	bl	8000934 <u8g2_font_get_byte>
 80009ca:	4603      	mov	r3, r0
 80009cc:	461a      	mov	r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80009d2:	2103      	movs	r1, #3
 80009d4:	6838      	ldr	r0, [r7, #0]
 80009d6:	f7ff ffad 	bl	8000934 <u8g2_font_get_byte>
 80009da:	4603      	mov	r3, r0
 80009dc:	461a      	mov	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80009e2:	2104      	movs	r1, #4
 80009e4:	6838      	ldr	r0, [r7, #0]
 80009e6:	f7ff ffa5 	bl	8000934 <u8g2_font_get_byte>
 80009ea:	4603      	mov	r3, r0
 80009ec:	461a      	mov	r2, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80009f2:	2105      	movs	r1, #5
 80009f4:	6838      	ldr	r0, [r7, #0]
 80009f6:	f7ff ff9d 	bl	8000934 <u8g2_font_get_byte>
 80009fa:	4603      	mov	r3, r0
 80009fc:	461a      	mov	r2, r3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8000a02:	2106      	movs	r1, #6
 8000a04:	6838      	ldr	r0, [r7, #0]
 8000a06:	f7ff ff95 	bl	8000934 <u8g2_font_get_byte>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8000a12:	2107      	movs	r1, #7
 8000a14:	6838      	ldr	r0, [r7, #0]
 8000a16:	f7ff ff8d 	bl	8000934 <u8g2_font_get_byte>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8000a22:	2108      	movs	r1, #8
 8000a24:	6838      	ldr	r0, [r7, #0]
 8000a26:	f7ff ff85 	bl	8000934 <u8g2_font_get_byte>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8000a32:	2109      	movs	r1, #9
 8000a34:	6838      	ldr	r0, [r7, #0]
 8000a36:	f7ff ff7d 	bl	8000934 <u8g2_font_get_byte>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	b25a      	sxtb	r2, r3
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8000a42:	210a      	movs	r1, #10
 8000a44:	6838      	ldr	r0, [r7, #0]
 8000a46:	f7ff ff75 	bl	8000934 <u8g2_font_get_byte>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	b25a      	sxtb	r2, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8000a52:	210b      	movs	r1, #11
 8000a54:	6838      	ldr	r0, [r7, #0]
 8000a56:	f7ff ff6d 	bl	8000934 <u8g2_font_get_byte>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	b25a      	sxtb	r2, r3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8000a62:	210c      	movs	r1, #12
 8000a64:	6838      	ldr	r0, [r7, #0]
 8000a66:	f7ff ff65 	bl	8000934 <u8g2_font_get_byte>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	b25a      	sxtb	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8000a72:	210d      	movs	r1, #13
 8000a74:	6838      	ldr	r0, [r7, #0]
 8000a76:	f7ff ff5d 	bl	8000934 <u8g2_font_get_byte>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	b25a      	sxtb	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8000a82:	210e      	movs	r1, #14
 8000a84:	6838      	ldr	r0, [r7, #0]
 8000a86:	f7ff ff55 	bl	8000934 <u8g2_font_get_byte>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	b25a      	sxtb	r2, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8000a92:	210f      	movs	r1, #15
 8000a94:	6838      	ldr	r0, [r7, #0]
 8000a96:	f7ff ff4d 	bl	8000934 <u8g2_font_get_byte>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	b25a      	sxtb	r2, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8000aa2:	2110      	movs	r1, #16
 8000aa4:	6838      	ldr	r0, [r7, #0]
 8000aa6:	f7ff ff45 	bl	8000934 <u8g2_font_get_byte>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	b25a      	sxtb	r2, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8000ab2:	2111      	movs	r1, #17
 8000ab4:	6838      	ldr	r0, [r7, #0]
 8000ab6:	f7ff ff4f 	bl	8000958 <u8g2_font_get_word>
 8000aba:	4603      	mov	r3, r0
 8000abc:	461a      	mov	r2, r3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8000ac2:	2113      	movs	r1, #19
 8000ac4:	6838      	ldr	r0, [r7, #0]
 8000ac6:	f7ff ff47 	bl	8000958 <u8g2_font_get_word>
 8000aca:	4603      	mov	r3, r0
 8000acc:	461a      	mov	r2, r3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8000ad2:	2115      	movs	r1, #21
 8000ad4:	6838      	ldr	r0, [r7, #0]
 8000ad6:	f7ff ff3f 	bl	8000958 <u8g2_font_get_word>
 8000ada:	4603      	mov	r3, r0
 8000adc:	461a      	mov	r2, r3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	82da      	strh	r2, [r3, #22]
#endif
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8000aea:	b480      	push	{r7}
 8000aec:	b085      	sub	sp, #20
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
 8000af2:	460b      	mov	r3, r1
 8000af4:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	7b1b      	ldrb	r3, [r3, #12]
 8000afa:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8000b04:	7bfa      	ldrb	r2, [r7, #15]
 8000b06:	7b7b      	ldrb	r3, [r7, #13]
 8000b08:	fa42 f303 	asr.w	r3, r2, r3
 8000b0c:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8000b0e:	7b7b      	ldrb	r3, [r7, #13]
 8000b10:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8000b12:	7bba      	ldrb	r2, [r7, #14]
 8000b14:	78fb      	ldrb	r3, [r7, #3]
 8000b16:	4413      	add	r3, r2
 8000b18:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8000b1a:	7bbb      	ldrb	r3, [r7, #14]
 8000b1c:	2b07      	cmp	r3, #7
 8000b1e:	d91a      	bls.n	8000b56 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8000b20:	2308      	movs	r3, #8
 8000b22:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8000b24:	7b3a      	ldrb	r2, [r7, #12]
 8000b26:	7b7b      	ldrb	r3, [r7, #13]
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	1c5a      	adds	r2, r3, #1
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	7b3b      	ldrb	r3, [r7, #12]
 8000b40:	fa02 f303 	lsl.w	r3, r2, r3
 8000b44:	b25a      	sxtb	r2, r3
 8000b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	b25b      	sxtb	r3, r3
 8000b4e:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8000b50:	7bbb      	ldrb	r3, [r7, #14]
 8000b52:	3b08      	subs	r3, #8
 8000b54:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8000b56:	78fb      	ldrb	r3, [r7, #3]
 8000b58:	f04f 32ff 	mov.w	r2, #4294967295
 8000b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	43db      	mvns	r3, r3
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	7bba      	ldrb	r2, [r7, #14]
 8000b70:	731a      	strb	r2, [r3, #12]
  return val;
 8000b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8000b8c:	78fb      	ldrb	r3, [r7, #3]
 8000b8e:	4619      	mov	r1, r3
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff ffaa 	bl	8000aea <u8g2_font_decode_get_unsigned_bits>
 8000b96:	4603      	mov	r3, r0
 8000b98:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8000b9e:	78fb      	ldrb	r3, [r7, #3]
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8000ba4:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8000ba8:	78fb      	ldrb	r3, [r7, #3]
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8000bb0:	7bfa      	ldrb	r2, [r7, #15]
 8000bb2:	7bbb      	ldrb	r3, [r7, #14]
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	73fb      	strb	r3, [r7, #15]
  return v;
 8000bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8000bc6:	b490      	push	{r4, r7}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4604      	mov	r4, r0
 8000bce:	4608      	mov	r0, r1
 8000bd0:	4611      	mov	r1, r2
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	4623      	mov	r3, r4
 8000bd6:	80fb      	strh	r3, [r7, #6]
 8000bd8:	4603      	mov	r3, r0
 8000bda:	717b      	strb	r3, [r7, #5]
 8000bdc:	460b      	mov	r3, r1
 8000bde:	713b      	strb	r3, [r7, #4]
 8000be0:	4613      	mov	r3, r2
 8000be2:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8000be4:	78fb      	ldrb	r3, [r7, #3]
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d014      	beq.n	8000c14 <u8g2_add_vector_y+0x4e>
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	dc19      	bgt.n	8000c22 <u8g2_add_vector_y+0x5c>
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d002      	beq.n	8000bf8 <u8g2_add_vector_y+0x32>
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d007      	beq.n	8000c06 <u8g2_add_vector_y+0x40>
 8000bf6:	e014      	b.n	8000c22 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8000bf8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000bfc:	b29a      	uxth	r2, r3
 8000bfe:	88fb      	ldrh	r3, [r7, #6]
 8000c00:	4413      	add	r3, r2
 8000c02:	80fb      	strh	r3, [r7, #6]
      break;
 8000c04:	e014      	b.n	8000c30 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 8000c06:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	88fb      	ldrh	r3, [r7, #6]
 8000c0e:	4413      	add	r3, r2
 8000c10:	80fb      	strh	r3, [r7, #6]
      break;
 8000c12:	e00d      	b.n	8000c30 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8000c14:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	88fa      	ldrh	r2, [r7, #6]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	80fb      	strh	r3, [r7, #6]
      break;
 8000c20:	e006      	b.n	8000c30 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 8000c22:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	88fa      	ldrh	r2, [r7, #6]
 8000c2a:	1ad3      	subs	r3, r2, r3
 8000c2c:	80fb      	strh	r3, [r7, #6]
      break;      
 8000c2e:	bf00      	nop
  }
  return dy;
 8000c30:	88fb      	ldrh	r3, [r7, #6]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc90      	pop	{r4, r7}
 8000c3a:	4770      	bx	lr

08000c3c <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8000c3c:	b490      	push	{r4, r7}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4604      	mov	r4, r0
 8000c44:	4608      	mov	r0, r1
 8000c46:	4611      	mov	r1, r2
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4623      	mov	r3, r4
 8000c4c:	80fb      	strh	r3, [r7, #6]
 8000c4e:	4603      	mov	r3, r0
 8000c50:	717b      	strb	r3, [r7, #5]
 8000c52:	460b      	mov	r3, r1
 8000c54:	713b      	strb	r3, [r7, #4]
 8000c56:	4613      	mov	r3, r2
 8000c58:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8000c5a:	78fb      	ldrb	r3, [r7, #3]
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d014      	beq.n	8000c8a <u8g2_add_vector_x+0x4e>
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	dc19      	bgt.n	8000c98 <u8g2_add_vector_x+0x5c>
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d002      	beq.n	8000c6e <u8g2_add_vector_x+0x32>
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d007      	beq.n	8000c7c <u8g2_add_vector_x+0x40>
 8000c6c:	e014      	b.n	8000c98 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 8000c6e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000c72:	b29a      	uxth	r2, r3
 8000c74:	88fb      	ldrh	r3, [r7, #6]
 8000c76:	4413      	add	r3, r2
 8000c78:	80fb      	strh	r3, [r7, #6]
      break;
 8000c7a:	e014      	b.n	8000ca6 <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8000c7c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	88fa      	ldrh	r2, [r7, #6]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	80fb      	strh	r3, [r7, #6]
      break;
 8000c88:	e00d      	b.n	8000ca6 <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 8000c8a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	88fa      	ldrh	r2, [r7, #6]
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	80fb      	strh	r3, [r7, #6]
      break;
 8000c96:	e006      	b.n	8000ca6 <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8000c98:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	88fb      	ldrh	r3, [r7, #6]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	80fb      	strh	r3, [r7, #6]
      break;      
 8000ca4:	bf00      	nop
  }
  return dx;
 8000ca6:	88fb      	ldrh	r3, [r7, #6]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc90      	pop	{r4, r7}
 8000cb0:	4770      	bx	lr

08000cb2 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b088      	sub	sp, #32
 8000cb6:	af02      	add	r7, sp, #8
 8000cb8:	6078      	str	r0, [r7, #4]
 8000cba:	460b      	mov	r3, r1
 8000cbc:	70fb      	strb	r3, [r7, #3]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3360      	adds	r3, #96	@ 0x60
 8000cc6:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8000cc8:	78fb      	ldrb	r3, [r7, #3]
 8000cca:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000cd2:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8000cda:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000ce2:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8000ce4:	7bfa      	ldrb	r2, [r7, #15]
 8000ce6:	7d7b      	ldrb	r3, [r7, #21]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8000cf0:	7dfa      	ldrb	r2, [r7, #23]
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d201      	bcs.n	8000cfc <u8g2_font_decode_len+0x4a>
      current = cnt;
 8000cf8:	7dfb      	ldrb	r3, [r7, #23]
 8000cfa:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	889b      	ldrh	r3, [r3, #4]
 8000d00:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	88db      	ldrh	r3, [r3, #6]
 8000d06:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8000d08:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8000d0c:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	7c1b      	ldrb	r3, [r3, #16]
 8000d14:	89b8      	ldrh	r0, [r7, #12]
 8000d16:	f7ff ff91 	bl	8000c3c <u8g2_add_vector_x>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8000d1e:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8000d22:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	7c1b      	ldrb	r3, [r3, #16]
 8000d2a:	8978      	ldrh	r0, [r7, #10]
 8000d2c:	f7ff ff4b 	bl	8000bc6 <u8g2_add_vector_y>
 8000d30:	4603      	mov	r3, r0
 8000d32:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8000d34:	78bb      	ldrb	r3, [r7, #2]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d010      	beq.n	8000d5c <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	7b9a      	ldrb	r2, [r3, #14]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 8000d44:	7dbb      	ldrb	r3, [r7, #22]
 8000d46:	b298      	uxth	r0, r3
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	7c1b      	ldrb	r3, [r3, #16]
 8000d4c:	897a      	ldrh	r2, [r7, #10]
 8000d4e:	89b9      	ldrh	r1, [r7, #12]
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	4603      	mov	r3, r0
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f000 fbfe 	bl	8001556 <u8g2_DrawHVLine>
 8000d5a:	e013      	b.n	8000d84 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	7b5b      	ldrb	r3, [r3, #13]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d10f      	bne.n	8000d84 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	7bda      	ldrb	r2, [r3, #15]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 8000d6e:	7dbb      	ldrb	r3, [r7, #22]
 8000d70:	b298      	uxth	r0, r3
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	7c1b      	ldrb	r3, [r3, #16]
 8000d76:	897a      	ldrh	r2, [r7, #10]
 8000d78:	89b9      	ldrh	r1, [r7, #12]
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f000 fbe9 	bl	8001556 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8000d84:	7dfa      	ldrb	r2, [r7, #23]
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d309      	bcc.n	8000da0 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8000d8c:	7dfa      	ldrb	r2, [r7, #23]
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	757b      	strb	r3, [r7, #21]
    ly++;
 8000d98:	7d3b      	ldrb	r3, [r7, #20]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8000d9e:	e79d      	b.n	8000cdc <u8g2_font_decode_len+0x2a>
      break;
 8000da0:	bf00      	nop
  }
  lx += cnt;
 8000da2:	7d7a      	ldrb	r2, [r7, #21]
 8000da4:	7dfb      	ldrb	r3, [r7, #23]
 8000da6:	4413      	add	r3, r2
 8000da8:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8000daa:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 8000db2:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	725a      	strb	r2, [r3, #9]
}
 8000dba:	bf00      	nop
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b084      	sub	sp, #16
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3360      	adds	r3, #96	@ 0x60
 8000dd0:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	683a      	ldr	r2, [r7, #0]
 8000dd6:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8000de4:	4619      	mov	r1, r3
 8000de6:	68f8      	ldr	r0, [r7, #12]
 8000de8:	f7ff fe7f 	bl	8000aea <u8g2_font_decode_get_unsigned_bits>
 8000dec:	4603      	mov	r3, r0
 8000dee:	b25a      	sxtb	r2, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	68f8      	ldr	r0, [r7, #12]
 8000dfe:	f7ff fe74 	bl	8000aea <u8g2_font_decode_get_unsigned_bits>
 8000e02:	4603      	mov	r3, r0
 8000e04:	b25a      	sxtb	r2, r3
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	7b9b      	ldrb	r3, [r3, #14]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	bf0c      	ite	eq
 8000e1c:	2301      	moveq	r3, #1
 8000e1e:	2300      	movne	r3, #0
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	461a      	mov	r2, r3
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	73da      	strb	r2, [r3, #15]
}
 8000e28:	bf00      	nop
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	@ 0x28
 8000e34:	af02      	add	r7, sp, #8
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3360      	adds	r3, #96	@ 0x60
 8000e3e:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8000e40:	6839      	ldr	r1, [r7, #0]
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff ffbd 	bl	8000dc2 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 8000e4e:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8000e56:	4619      	mov	r1, r3
 8000e58:	6978      	ldr	r0, [r7, #20]
 8000e5a:	f7ff fe91 	bl	8000b80 <u8g2_font_decode_get_signed_bits>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8000e68:	4619      	mov	r1, r3
 8000e6a:	6978      	ldr	r0, [r7, #20]
 8000e6c:	f7ff fe88 	bl	8000b80 <u8g2_font_decode_get_signed_bits>
 8000e70:	4603      	mov	r3, r0
 8000e72:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	6978      	ldr	r0, [r7, #20]
 8000e7e:	f7ff fe7f 	bl	8000b80 <u8g2_font_decode_get_signed_bits>
 8000e82:	4603      	mov	r3, r0
 8000e84:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	f340 80d7 	ble.w	8001040 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	8898      	ldrh	r0, [r3, #4]
 8000e96:	7cfa      	ldrb	r2, [r7, #19]
 8000e98:	7c7b      	ldrb	r3, [r7, #17]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	425b      	negs	r3, r3
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	b25a      	sxtb	r2, r3
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	7c1b      	ldrb	r3, [r3, #16]
 8000ea8:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8000eac:	f7ff fec6 	bl	8000c3c <u8g2_add_vector_x>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	88d8      	ldrh	r0, [r3, #6]
 8000ebc:	7cfa      	ldrb	r2, [r7, #19]
 8000ebe:	7c7b      	ldrb	r3, [r7, #17]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	425b      	negs	r3, r3
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	b25a      	sxtb	r2, r3
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	7c1b      	ldrb	r3, [r3, #16]
 8000ece:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8000ed2:	f7ff fe78 	bl	8000bc6 <u8g2_add_vector_y>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	461a      	mov	r2, r3
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	889b      	ldrh	r3, [r3, #4]
 8000ee2:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	88db      	ldrh	r3, [r3, #6]
 8000ee8:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8000eea:	8bfb      	ldrh	r3, [r7, #30]
 8000eec:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 8000eee:	8b7b      	ldrh	r3, [r7, #26]
 8000ef0:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	7c1b      	ldrb	r3, [r3, #16]
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d85a      	bhi.n	8000fb0 <u8g2_font_decode_glyph+0x180>
 8000efa:	a201      	add	r2, pc, #4	@ (adr r2, 8000f00 <u8g2_font_decode_glyph+0xd0>)
 8000efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f00:	08000f11 	.word	0x08000f11
 8000f04:	08000f2d 	.word	0x08000f2d
 8000f08:	08000f55 	.word	0x08000f55
 8000f0c:	08000f89 	.word	0x08000f89
      {
	case 0:
	    x1 += decode->glyph_width;
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	8bbb      	ldrh	r3, [r7, #28]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8000f1e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	8b3b      	ldrh	r3, [r7, #24]
 8000f26:	4413      	add	r3, r2
 8000f28:	833b      	strh	r3, [r7, #24]
	    break;
 8000f2a:	e041      	b.n	8000fb0 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8000f2c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	8bfa      	ldrh	r2, [r7, #30]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8000f38:	8bfb      	ldrh	r3, [r7, #30]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8000f3e:	8bbb      	ldrh	r3, [r7, #28]
 8000f40:	3301      	adds	r3, #1
 8000f42:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	8b3b      	ldrh	r3, [r7, #24]
 8000f4e:	4413      	add	r3, r2
 8000f50:	833b      	strh	r3, [r7, #24]
	    break;
 8000f52:	e02d      	b.n	8000fb0 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	8bfa      	ldrh	r2, [r7, #30]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8000f62:	8bfb      	ldrh	r3, [r7, #30]
 8000f64:	3301      	adds	r3, #1
 8000f66:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8000f68:	8bbb      	ldrh	r3, [r7, #28]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8000f6e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	8b7a      	ldrh	r2, [r7, #26]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8000f7a:	8b7b      	ldrh	r3, [r7, #26]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	837b      	strh	r3, [r7, #26]
	    y1++;
 8000f80:	8b3b      	ldrh	r3, [r7, #24]
 8000f82:	3301      	adds	r3, #1
 8000f84:	833b      	strh	r3, [r7, #24]
	    break;	  
 8000f86:	e013      	b.n	8000fb0 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8000f88:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	8bbb      	ldrh	r3, [r7, #28]
 8000f90:	4413      	add	r3, r2
 8000f92:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	8b7a      	ldrh	r2, [r7, #26]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8000fa2:	8b7b      	ldrh	r3, [r7, #26]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	837b      	strh	r3, [r7, #26]
	    y1++;
 8000fa8:	8b3b      	ldrh	r3, [r7, #24]
 8000faa:	3301      	adds	r3, #1
 8000fac:	833b      	strh	r3, [r7, #24]
	    break;	  
 8000fae:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8000fb0:	8bb8      	ldrh	r0, [r7, #28]
 8000fb2:	8b7a      	ldrh	r2, [r7, #26]
 8000fb4:	8bf9      	ldrh	r1, [r7, #30]
 8000fb6:	8b3b      	ldrh	r3, [r7, #24]
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	4603      	mov	r3, r0
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f000 fb88 	bl	80016d2 <u8g2_IsIntersection>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d102      	bne.n	8000fce <u8g2_font_decode_glyph+0x19e>
	return d;
 8000fc8:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8000fcc:	e03a      	b.n	8001044 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	6978      	ldr	r0, [r7, #20]
 8000fe4:	f7ff fd81 	bl	8000aea <u8g2_font_decode_get_unsigned_bits>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	6978      	ldr	r0, [r7, #20]
 8000ff6:	f7ff fd78 	bl	8000aea <u8g2_font_decode_get_unsigned_bits>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	2200      	movs	r2, #0
 8001002:	4619      	mov	r1, r3
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff fe54 	bl	8000cb2 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 800100a:	7bbb      	ldrb	r3, [r7, #14]
 800100c:	2201      	movs	r2, #1
 800100e:	4619      	mov	r1, r3
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff fe4e 	bl	8000cb2 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001016:	2101      	movs	r1, #1
 8001018:	6978      	ldr	r0, [r7, #20]
 800101a:	f7ff fd66 	bl	8000aea <u8g2_font_decode_get_unsigned_bits>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d1ec      	bne.n	8000ffe <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800102a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800102e:	429a      	cmp	r2, r3
 8001030:	dd00      	ble.n	8001034 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001032:	e7d2      	b.n	8000fda <u8g2_font_decode_glyph+0x1aa>
	break;
 8001034:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	7b9a      	ldrb	r2, [r3, #14]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  }
  return d;
 8001040:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3720      	adds	r7, #32
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800105c:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	3317      	adds	r3, #23
 8001062:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8001064:	887b      	ldrh	r3, [r7, #2]
 8001066:	2bff      	cmp	r3, #255	@ 0xff
 8001068:	d82a      	bhi.n	80010c0 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 800106a:	887b      	ldrh	r3, [r7, #2]
 800106c:	2b60      	cmp	r3, #96	@ 0x60
 800106e:	d907      	bls.n	8001080 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8001076:	461a      	mov	r2, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	4413      	add	r3, r2
 800107c:	617b      	str	r3, [r7, #20]
 800107e:	e009      	b.n	8001094 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8001080:	887b      	ldrh	r3, [r7, #2]
 8001082:	2b40      	cmp	r3, #64	@ 0x40
 8001084:	d906      	bls.n	8001094 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800108c:	461a      	mov	r2, r3
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	4413      	add	r3, r2
 8001092:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	3301      	adds	r3, #1
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d04e      	beq.n	800113c <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	461a      	mov	r2, r3
 80010a4:	887b      	ldrh	r3, [r7, #2]
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d102      	bne.n	80010b0 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	3302      	adds	r3, #2
 80010ae:	e049      	b.n	8001144 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	3301      	adds	r3, #1
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	4413      	add	r3, r2
 80010bc:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80010be:	e7e9      	b.n	8001094 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 80010c6:	461a      	mov	r2, r3
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	4413      	add	r3, r2
 80010cc:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 80010d2:	2100      	movs	r1, #0
 80010d4:	6938      	ldr	r0, [r7, #16]
 80010d6:	f7ff fc3f 	bl	8000958 <u8g2_font_get_word>
 80010da:	4603      	mov	r3, r0
 80010dc:	461a      	mov	r2, r3
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	4413      	add	r3, r2
 80010e2:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80010e4:	2102      	movs	r1, #2
 80010e6:	6938      	ldr	r0, [r7, #16]
 80010e8:	f7ff fc36 	bl	8000958 <u8g2_font_get_word>
 80010ec:	4603      	mov	r3, r0
 80010ee:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	3304      	adds	r3, #4
 80010f4:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 80010f6:	89fa      	ldrh	r2, [r7, #14]
 80010f8:	887b      	ldrh	r3, [r7, #2]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d3e9      	bcc.n	80010d2 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8001104:	89fb      	ldrh	r3, [r7, #14]
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	3301      	adds	r3, #1
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	89fb      	ldrh	r3, [r7, #14]
 8001114:	4313      	orrs	r3, r2
 8001116:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8001118:	89fb      	ldrh	r3, [r7, #14]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d010      	beq.n	8001140 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 800111e:	89fa      	ldrh	r2, [r7, #14]
 8001120:	887b      	ldrh	r3, [r7, #2]
 8001122:	429a      	cmp	r2, r3
 8001124:	d102      	bne.n	800112c <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	3303      	adds	r3, #3
 800112a:	e00b      	b.n	8001144 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	3302      	adds	r3, #2
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	461a      	mov	r2, r3
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	4413      	add	r3, r2
 8001138:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 800113a:	e7e0      	b.n	80010fe <u8g2_font_get_glyph_data+0xb2>
	break;
 800113c:	bf00      	nop
 800113e:	e000      	b.n	8001142 <u8g2_font_get_glyph_data+0xf6>
	break;
 8001140:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	4608      	mov	r0, r1
 8001156:	4611      	mov	r1, r2
 8001158:	461a      	mov	r2, r3
 800115a:	4603      	mov	r3, r0
 800115c:	817b      	strh	r3, [r7, #10]
 800115e:	460b      	mov	r3, r1
 8001160:	813b      	strh	r3, [r7, #8]
 8001162:	4613      	mov	r3, r2
 8001164:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	897a      	ldrh	r2, [r7, #10]
 800116e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  u8g2->font_decode.target_y = y;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	893a      	ldrh	r2, [r7, #8]
 8001176:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 800117a:	88fb      	ldrh	r3, [r7, #6]
 800117c:	4619      	mov	r1, r3
 800117e:	68f8      	ldr	r0, [r7, #12]
 8001180:	f7ff ff64 	bl	800104c <u8g2_font_get_glyph_data>
 8001184:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d005      	beq.n	8001198 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 800118c:	6939      	ldr	r1, [r7, #16]
 800118e:	68f8      	ldr	r0, [r7, #12]
 8001190:	f7ff fe4e 	bl	8000e30 <u8g2_font_decode_glyph>
 8001194:	4603      	mov	r3, r0
 8001196:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8001198:	8afb      	ldrh	r3, [r7, #22]
}
 800119a:	4618      	mov	r0, r3
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	4608      	mov	r0, r1
 80011ae:	4611      	mov	r1, r2
 80011b0:	461a      	mov	r2, r3
 80011b2:	4603      	mov	r3, r0
 80011b4:	817b      	strh	r3, [r7, #10]
 80011b6:	460b      	mov	r3, r1
 80011b8:	813b      	strh	r3, [r7, #8]
 80011ba:	4613      	mov	r3, r2
 80011bc:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80011c4:	2b03      	cmp	r3, #3
 80011c6:	d833      	bhi.n	8001230 <u8g2_DrawGlyph+0x8c>
 80011c8:	a201      	add	r2, pc, #4	@ (adr r2, 80011d0 <u8g2_DrawGlyph+0x2c>)
 80011ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ce:	bf00      	nop
 80011d0:	080011e1 	.word	0x080011e1
 80011d4:	080011f5 	.word	0x080011f5
 80011d8:	08001209 	.word	0x08001209
 80011dc:	0800121d 	.word	0x0800121d
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011e4:	68f8      	ldr	r0, [r7, #12]
 80011e6:	4798      	blx	r3
 80011e8:	4603      	mov	r3, r0
 80011ea:	461a      	mov	r2, r3
 80011ec:	893b      	ldrh	r3, [r7, #8]
 80011ee:	4413      	add	r3, r2
 80011f0:	813b      	strh	r3, [r7, #8]
      break;
 80011f2:	e01d      	b.n	8001230 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011f8:	68f8      	ldr	r0, [r7, #12]
 80011fa:	4798      	blx	r3
 80011fc:	4603      	mov	r3, r0
 80011fe:	461a      	mov	r2, r3
 8001200:	897b      	ldrh	r3, [r7, #10]
 8001202:	1a9b      	subs	r3, r3, r2
 8001204:	817b      	strh	r3, [r7, #10]
      break;
 8001206:	e013      	b.n	8001230 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800120c:	68f8      	ldr	r0, [r7, #12]
 800120e:	4798      	blx	r3
 8001210:	4603      	mov	r3, r0
 8001212:	461a      	mov	r2, r3
 8001214:	893b      	ldrh	r3, [r7, #8]
 8001216:	1a9b      	subs	r3, r3, r2
 8001218:	813b      	strh	r3, [r7, #8]
      break;
 800121a:	e009      	b.n	8001230 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001220:	68f8      	ldr	r0, [r7, #12]
 8001222:	4798      	blx	r3
 8001224:	4603      	mov	r3, r0
 8001226:	461a      	mov	r2, r3
 8001228:	897b      	ldrh	r3, [r7, #10]
 800122a:	4413      	add	r3, r2
 800122c:	817b      	strh	r3, [r7, #10]
      break;
 800122e:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8001230:	88fb      	ldrh	r3, [r7, #6]
 8001232:	893a      	ldrh	r2, [r7, #8]
 8001234:	8979      	ldrh	r1, [r7, #10]
 8001236:	68f8      	ldr	r0, [r7, #12]
 8001238:	f7ff ff88 	bl	800114c <u8g2_font_draw_glyph>
 800123c:	4603      	mov	r3, r0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop

08001248 <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	460b      	mov	r3, r1
 8001254:	817b      	strh	r3, [r7, #10]
 8001256:	4613      	mov	r3, r2
 8001258:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800125a:	68f8      	ldr	r0, [r7, #12]
 800125c:	f000 fca7 	bl	8001bae <u8x8_utf8_init>
  sum = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	7812      	ldrb	r2, [r2, #0]
 800126c:	4611      	mov	r1, r2
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	4798      	blx	r3
 8001272:	4603      	mov	r3, r0
 8001274:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8001276:	8abb      	ldrh	r3, [r7, #20]
 8001278:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800127c:	4293      	cmp	r3, r2
 800127e:	d038      	beq.n	80012f2 <u8g2_draw_string+0xaa>
      break;
    str++;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3301      	adds	r3, #1
 8001284:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8001286:	8abb      	ldrh	r3, [r7, #20]
 8001288:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800128c:	4293      	cmp	r3, r2
 800128e:	d0e9      	beq.n	8001264 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8001290:	8abb      	ldrh	r3, [r7, #20]
 8001292:	893a      	ldrh	r2, [r7, #8]
 8001294:	8979      	ldrh	r1, [r7, #10]
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f7ff ff84 	bl	80011a4 <u8g2_DrawGlyph>
 800129c:	4603      	mov	r3, r0
 800129e:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80012a6:	2b03      	cmp	r3, #3
 80012a8:	d81e      	bhi.n	80012e8 <u8g2_draw_string+0xa0>
 80012aa:	a201      	add	r2, pc, #4	@ (adr r2, 80012b0 <u8g2_draw_string+0x68>)
 80012ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b0:	080012c1 	.word	0x080012c1
 80012b4:	080012cb 	.word	0x080012cb
 80012b8:	080012d5 	.word	0x080012d5
 80012bc:	080012df 	.word	0x080012df
      {
	case 0:
	  x += delta;
 80012c0:	897a      	ldrh	r2, [r7, #10]
 80012c2:	8a7b      	ldrh	r3, [r7, #18]
 80012c4:	4413      	add	r3, r2
 80012c6:	817b      	strh	r3, [r7, #10]
	  break;
 80012c8:	e00e      	b.n	80012e8 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 80012ca:	893a      	ldrh	r2, [r7, #8]
 80012cc:	8a7b      	ldrh	r3, [r7, #18]
 80012ce:	4413      	add	r3, r2
 80012d0:	813b      	strh	r3, [r7, #8]
	  break;
 80012d2:	e009      	b.n	80012e8 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 80012d4:	897a      	ldrh	r2, [r7, #10]
 80012d6:	8a7b      	ldrh	r3, [r7, #18]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	817b      	strh	r3, [r7, #10]
	  break;
 80012dc:	e004      	b.n	80012e8 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 80012de:	893a      	ldrh	r2, [r7, #8]
 80012e0:	8a7b      	ldrh	r3, [r7, #18]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	813b      	strh	r3, [r7, #8]
	  break;
 80012e6:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 80012e8:	8afa      	ldrh	r2, [r7, #22]
 80012ea:	8a7b      	ldrh	r3, [r7, #18]
 80012ec:	4413      	add	r3, r2
 80012ee:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80012f0:	e7b8      	b.n	8001264 <u8g2_draw_string+0x1c>
      break;
 80012f2:	bf00      	nop
    }
  }
  return sum;
 80012f4:	8afb      	ldrh	r3, [r7, #22]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop

08001300 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	460b      	mov	r3, r1
 800130c:	817b      	strh	r3, [r7, #10]
 800130e:	4613      	mov	r3, r2
 8001310:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	4a06      	ldr	r2, [pc, #24]	@ (8001330 <u8g2_DrawStr+0x30>)
 8001316:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8001318:	893a      	ldrh	r2, [r7, #8]
 800131a:	8979      	ldrh	r1, [r7, #10]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	68f8      	ldr	r0, [r7, #12]
 8001320:	f7ff ff92 	bl	8001248 <u8g2_draw_string>
 8001324:	4603      	mov	r3, r0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	08001bcb 	.word	0x08001bcb

08001334 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001340:	2b00      	cmp	r3, #0
 8001342:	d05d      	beq.n	8001400 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f993 2081 	ldrsb.w	r2, [r3, #129]	@ 0x81
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f993 2082 	ldrsb.w	r2, [r3, #130]	@ 0x82
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8001362:	2b00      	cmp	r3, #0
 8001364:	d04d      	beq.n	8001402 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 800136c:	2b01      	cmp	r3, #1
 800136e:	d11c      	bne.n	80013aa <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f993 208e 	ldrsb.w	r2, [r3, #142]	@ 0x8e
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f993 3083 	ldrsb.w	r3, [r3, #131]	@ 0x83
 800137c:	429a      	cmp	r2, r3
 800137e:	da05      	bge.n	800138c <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f993 2083 	ldrsb.w	r2, [r3, #131]	@ 0x83
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f993 3084 	ldrsb.w	r3, [r3, #132]	@ 0x84
 8001398:	429a      	cmp	r2, r3
 800139a:	dd32      	ble.n	8001402 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f993 2084 	ldrsb.w	r2, [r3, #132]	@ 0x84
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 80013a8:	e02b      	b.n	8001402 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f993 308e 	ldrsb.w	r3, [r3, #142]	@ 0x8e
 80013b0:	461a      	mov	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 80013b8:	4619      	mov	r1, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 80013c0:	440b      	add	r3, r1
 80013c2:	429a      	cmp	r2, r3
 80013c4:	da0d      	bge.n	80013e2 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	4413      	add	r3, r2
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	b25a      	sxtb	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 80013ee:	429a      	cmp	r2, r3
 80013f0:	dd07      	ble.n	8001402 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f993 2080 	ldrsb.w	r2, [r3, #128]	@ 0x80
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 80013fe:	e000      	b.n	8001402 <u8g2_UpdateRefHeight+0xce>
    return;
 8001400:	bf00      	nop
  }  
}
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  return 0;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a04      	ldr	r2, [pc, #16]	@ (8001440 <u8g2_SetFontPosBaseline+0x1c>)
 8001430:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	0800140d 	.word	0x0800140d

08001444 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	429a      	cmp	r2, r3
 8001456:	d00b      	beq.n	8001470 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	659a      	str	r2, [r3, #88]	@ 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3374      	adds	r3, #116	@ 0x74
 8001462:	6839      	ldr	r1, [r7, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fa97 	bl	8000998 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ff62 	bl	8001334 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <u8g2_clip_intersection2>:
 will return 0 if there is no intersection and if a > b

 */

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len,
		u8g2_uint_t c, u8g2_uint_t d) {
 8001478:	b480      	push	{r7}
 800147a:	b087      	sub	sp, #28
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	4611      	mov	r1, r2
 8001484:	461a      	mov	r2, r3
 8001486:	460b      	mov	r3, r1
 8001488:	80fb      	strh	r3, [r7, #6]
 800148a:	4613      	mov	r3, r2
 800148c:	80bb      	strh	r3, [r7, #4]
	u8g2_uint_t a = *ap;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	82fb      	strh	r3, [r7, #22]
	u8g2_uint_t b;
	b = a;
 8001494:	8afb      	ldrh	r3, [r7, #22]
 8001496:	82bb      	strh	r3, [r7, #20]
	b += *len;
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	881a      	ldrh	r2, [r3, #0]
 800149c:	8abb      	ldrh	r3, [r7, #20]
 800149e:	4413      	add	r3, r2
 80014a0:	82bb      	strh	r3, [r7, #20]
	/* be removed completly (be aware about memory curruption for wrong */
	/* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
	/* arguments) */

	/* removing the following if clause completly may lead to memory corruption of a>b */
	if (a > b) {
 80014a2:	8afa      	ldrh	r2, [r7, #22]
 80014a4:	8abb      	ldrh	r3, [r7, #20]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d90b      	bls.n	80014c2 <u8g2_clip_intersection2+0x4a>
		/* replacing this if with a simple "return 0;" will not handle the case with negative a */
		if (a < d) {
 80014aa:	8afa      	ldrh	r2, [r7, #22]
 80014ac:	88bb      	ldrh	r3, [r7, #4]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d205      	bcs.n	80014be <u8g2_clip_intersection2+0x46>
			b = d;
 80014b2:	88bb      	ldrh	r3, [r7, #4]
 80014b4:	82bb      	strh	r3, [r7, #20]
			b--;
 80014b6:	8abb      	ldrh	r3, [r7, #20]
 80014b8:	3b01      	subs	r3, #1
 80014ba:	82bb      	strh	r3, [r7, #20]
 80014bc:	e001      	b.n	80014c2 <u8g2_clip_intersection2+0x4a>
		} else {
			a = c;
 80014be:	88fb      	ldrh	r3, [r7, #6]
 80014c0:	82fb      	strh	r3, [r7, #22]
		}
	}

	/* from now on, the asumption a <= b is ok */

	if (a >= d)
 80014c2:	8afa      	ldrh	r2, [r7, #22]
 80014c4:	88bb      	ldrh	r3, [r7, #4]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d301      	bcc.n	80014ce <u8g2_clip_intersection2+0x56>
		return 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	e01c      	b.n	8001508 <u8g2_clip_intersection2+0x90>
	if (b <= c)
 80014ce:	8aba      	ldrh	r2, [r7, #20]
 80014d0:	88fb      	ldrh	r3, [r7, #6]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d801      	bhi.n	80014da <u8g2_clip_intersection2+0x62>
		return 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	e016      	b.n	8001508 <u8g2_clip_intersection2+0x90>
	if (a < c)
 80014da:	8afa      	ldrh	r2, [r7, #22]
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d201      	bcs.n	80014e6 <u8g2_clip_intersection2+0x6e>
		a = c;
 80014e2:	88fb      	ldrh	r3, [r7, #6]
 80014e4:	82fb      	strh	r3, [r7, #22]
	if (b > d)
 80014e6:	8aba      	ldrh	r2, [r7, #20]
 80014e8:	88bb      	ldrh	r3, [r7, #4]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d901      	bls.n	80014f2 <u8g2_clip_intersection2+0x7a>
		b = d;
 80014ee:	88bb      	ldrh	r3, [r7, #4]
 80014f0:	82bb      	strh	r3, [r7, #20]

	*ap = a;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	8afa      	ldrh	r2, [r7, #22]
 80014f6:	801a      	strh	r2, [r3, #0]
	b -= a;
 80014f8:	8aba      	ldrh	r2, [r7, #20]
 80014fa:	8afb      	ldrh	r3, [r7, #22]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	82bb      	strh	r3, [r7, #20]
	*len = b;
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	8aba      	ldrh	r2, [r7, #20]
 8001504:	801a      	strh	r2, [r3, #0]
	return 1;
 8001506:	2301      	movs	r3, #1
}
 8001508:	4618      	mov	r0, r3
 800150a:	371c      	adds	r7, #28
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <u8g2_draw_hv_line_2dir>:
 This function first adjusts the y position to the local buffer. Then it
 will clip the line and call u8g2_draw_low_level_hv_line()

 */
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		u8g2_uint_t len, uint8_t dir) {
 8001514:	b590      	push	{r4, r7, lr}
 8001516:	b087      	sub	sp, #28
 8001518:	af02      	add	r7, sp, #8
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	4608      	mov	r0, r1
 800151e:	4611      	mov	r1, r2
 8001520:	461a      	mov	r2, r3
 8001522:	4603      	mov	r3, r0
 8001524:	817b      	strh	r3, [r7, #10]
 8001526:	460b      	mov	r3, r1
 8001528:	813b      	strh	r3, [r7, #8]
 800152a:	4613      	mov	r3, r2
 800152c:	80fb      	strh	r3, [r7, #6]

	/* clipping happens before the display rotation */

	/* transform to pixel buffer coordinates */
	y -= u8g2->pixel_curr_row;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001532:	893a      	ldrh	r2, [r7, #8]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	813b      	strh	r3, [r7, #8]

	u8g2->ll_hvline(u8g2, x, y, len, dir);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 800153c:	88f8      	ldrh	r0, [r7, #6]
 800153e:	893a      	ldrh	r2, [r7, #8]
 8001540:	8979      	ldrh	r1, [r7, #10]
 8001542:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	4603      	mov	r3, r0
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	47a0      	blx	r4
}
 800154e:	bf00      	nop
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	bd90      	pop	{r4, r7, pc}

08001556 <u8g2_DrawHVLine>:
 This function should be called by the user.

 "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
 */
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		u8g2_uint_t len, uint8_t dir) {
 8001556:	b590      	push	{r4, r7, lr}
 8001558:	b087      	sub	sp, #28
 800155a:	af02      	add	r7, sp, #8
 800155c:	60f8      	str	r0, [r7, #12]
 800155e:	4608      	mov	r0, r1
 8001560:	4611      	mov	r1, r2
 8001562:	461a      	mov	r2, r3
 8001564:	4603      	mov	r3, r0
 8001566:	817b      	strh	r3, [r7, #10]
 8001568:	460b      	mov	r3, r1
 800156a:	813b      	strh	r3, [r7, #8]
 800156c:	4613      	mov	r3, r2
 800156e:	80fb      	strh	r3, [r7, #6]
	/* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
	/* The callback may rotate the hv line */
	/* after rotation this will call u8g2_draw_hv_line_4dir() */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
	if (u8g2->is_page_clip_window_intersection != 0)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8001576:	2b00      	cmp	r3, #0
 8001578:	d075      	beq.n	8001666 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
		if (len != 0) {
 800157a:	88fb      	ldrh	r3, [r7, #6]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d072      	beq.n	8001666 <u8g2_DrawHVLine+0x110>

			/* convert to two directions */
			if (len > 1) {
 8001580:	88fb      	ldrh	r3, [r7, #6]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d91a      	bls.n	80015bc <u8g2_DrawHVLine+0x66>
				if (dir == 2) {
 8001586:	f897 3020 	ldrb.w	r3, [r7, #32]
 800158a:	2b02      	cmp	r3, #2
 800158c:	d109      	bne.n	80015a2 <u8g2_DrawHVLine+0x4c>
					x -= len;
 800158e:	897a      	ldrh	r2, [r7, #10]
 8001590:	88fb      	ldrh	r3, [r7, #6]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	b29b      	uxth	r3, r3
 8001596:	817b      	strh	r3, [r7, #10]
					x++;
 8001598:	897b      	ldrh	r3, [r7, #10]
 800159a:	3301      	adds	r3, #1
 800159c:	b29b      	uxth	r3, r3
 800159e:	817b      	strh	r3, [r7, #10]
 80015a0:	e00c      	b.n	80015bc <u8g2_DrawHVLine+0x66>
				} else if (dir == 3) {
 80015a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d108      	bne.n	80015bc <u8g2_DrawHVLine+0x66>
					y -= len;
 80015aa:	893a      	ldrh	r2, [r7, #8]
 80015ac:	88fb      	ldrh	r3, [r7, #6]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	813b      	strh	r3, [r7, #8]
					y++;
 80015b4:	893b      	ldrh	r3, [r7, #8]
 80015b6:	3301      	adds	r3, #1
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	813b      	strh	r3, [r7, #8]
				}
			}
			dir &= 1;
 80015bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	f887 3020 	strb.w	r3, [r7, #32]

			/* clip against the user window */
			if (dir == 0) {
 80015c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d11a      	bne.n	8001606 <u8g2_DrawHVLine+0xb0>
				if (y < u8g2->user_y0)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 80015d6:	893b      	ldrh	r3, [r7, #8]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d83b      	bhi.n	8001654 <u8g2_DrawHVLine+0xfe>
					return;
				if (y >= u8g2->user_y1)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 80015e2:	893b      	ldrh	r3, [r7, #8]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d937      	bls.n	8001658 <u8g2_DrawHVLine+0x102>
					return;
				if (u8g2_clip_intersection2(&x, &len, u8g2->user_x0,
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80015f4:	1db9      	adds	r1, r7, #6
 80015f6:	f107 000a 	add.w	r0, r7, #10
 80015fa:	f7ff ff3d 	bl	8001478 <u8g2_clip_intersection2>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d11a      	bne.n	800163a <u8g2_DrawHVLine+0xe4>
						u8g2->user_x1) == 0)
					return;
 8001604:	e02f      	b.n	8001666 <u8g2_DrawHVLine+0x110>
			} else {
				if (x < u8g2->user_x0)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800160c:	897b      	ldrh	r3, [r7, #10]
 800160e:	429a      	cmp	r2, r3
 8001610:	d824      	bhi.n	800165c <u8g2_DrawHVLine+0x106>
					return;
				if (x >= u8g2->user_x1)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8001618:	897b      	ldrh	r3, [r7, #10]
 800161a:	429a      	cmp	r2, r3
 800161c:	d920      	bls.n	8001660 <u8g2_DrawHVLine+0x10a>
					return;
				if (u8g2_clip_intersection2(&y, &len, u8g2->user_y0,
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 800162a:	1db9      	adds	r1, r7, #6
 800162c:	f107 0008 	add.w	r0, r7, #8
 8001630:	f7ff ff22 	bl	8001478 <u8g2_clip_intersection2>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d014      	beq.n	8001664 <u8g2_DrawHVLine+0x10e>
						u8g2->user_y1) == 0)
					return;
			}

			u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	689c      	ldr	r4, [r3, #8]
 8001640:	8979      	ldrh	r1, [r7, #10]
 8001642:	893a      	ldrh	r2, [r7, #8]
 8001644:	88f8      	ldrh	r0, [r7, #6]
 8001646:	f897 3020 	ldrb.w	r3, [r7, #32]
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	4603      	mov	r3, r0
 800164e:	68f8      	ldr	r0, [r7, #12]
 8001650:	47a0      	blx	r4
 8001652:	e008      	b.n	8001666 <u8g2_DrawHVLine+0x110>
					return;
 8001654:	bf00      	nop
 8001656:	e006      	b.n	8001666 <u8g2_DrawHVLine+0x110>
					return;
 8001658:	bf00      	nop
 800165a:	e004      	b.n	8001666 <u8g2_DrawHVLine+0x110>
					return;
 800165c:	bf00      	nop
 800165e:	e002      	b.n	8001666 <u8g2_DrawHVLine+0x110>
					return;
 8001660:	bf00      	nop
 8001662:	e000      	b.n	8001666 <u8g2_DrawHVLine+0x110>
					return;
 8001664:	bf00      	nop
		}
}
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	bd90      	pop	{r4, r7, pc}

0800166c <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 800166c:	b490      	push	{r4, r7}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	4604      	mov	r4, r0
 8001674:	4608      	mov	r0, r1
 8001676:	4611      	mov	r1, r2
 8001678:	461a      	mov	r2, r3
 800167a:	4623      	mov	r3, r4
 800167c:	80fb      	strh	r3, [r7, #6]
 800167e:	4603      	mov	r3, r0
 8001680:	80bb      	strh	r3, [r7, #4]
 8001682:	460b      	mov	r3, r1
 8001684:	807b      	strh	r3, [r7, #2]
 8001686:	4613      	mov	r3, r2
 8001688:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 800168a:	887a      	ldrh	r2, [r7, #2]
 800168c:	88bb      	ldrh	r3, [r7, #4]
 800168e:	429a      	cmp	r2, r3
 8001690:	d20d      	bcs.n	80016ae <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8001692:	883a      	ldrh	r2, [r7, #0]
 8001694:	88fb      	ldrh	r3, [r7, #6]
 8001696:	429a      	cmp	r2, r3
 8001698:	d901      	bls.n	800169e <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 800169a:	2301      	movs	r3, #1
 800169c:	e014      	b.n	80016c8 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800169e:	887a      	ldrh	r2, [r7, #2]
 80016a0:	883b      	ldrh	r3, [r7, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d901      	bls.n	80016aa <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e00e      	b.n	80016c8 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e00c      	b.n	80016c8 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 80016ae:	883a      	ldrh	r2, [r7, #0]
 80016b0:	88fb      	ldrh	r3, [r7, #6]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d907      	bls.n	80016c6 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 80016b6:	887a      	ldrh	r2, [r7, #2]
 80016b8:	883b      	ldrh	r3, [r7, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d901      	bls.n	80016c2 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 80016be:	2301      	movs	r3, #1
 80016c0:	e002      	b.n	80016c8 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	e000      	b.n	80016c8 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 80016c6:	2300      	movs	r3, #0
    }
  }
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc90      	pop	{r4, r7}
 80016d0:	4770      	bx	lr

080016d2 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b084      	sub	sp, #16
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	60f8      	str	r0, [r7, #12]
 80016da:	4608      	mov	r0, r1
 80016dc:	4611      	mov	r1, r2
 80016de:	461a      	mov	r2, r3
 80016e0:	4603      	mov	r3, r0
 80016e2:	817b      	strh	r3, [r7, #10]
 80016e4:	460b      	mov	r3, r1
 80016e6:	813b      	strh	r3, [r7, #8]
 80016e8:	4613      	mov	r3, r2
 80016ea:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f8b3 104e 	ldrh.w	r1, [r3, #78]	@ 0x4e
 80016f8:	8b3b      	ldrh	r3, [r7, #24]
 80016fa:	893a      	ldrh	r2, [r7, #8]
 80016fc:	f7ff ffb6 	bl	800166c <u8g2_is_intersection_decision_tree>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <u8g2_IsIntersection+0x38>
    return 0; 
 8001706:	2300      	movs	r3, #0
 8001708:	e00a      	b.n	8001720 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	897a      	ldrh	r2, [r7, #10]
 800171a:	f7ff ffa7 	bl	800166c <u8g2_is_intersection_decision_tree>
 800171e:	4603      	mov	r3, r0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001728:	b480      	push	{r7}
 800172a:	b089      	sub	sp, #36	@ 0x24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	4608      	mov	r0, r1
 8001732:	4611      	mov	r1, r2
 8001734:	461a      	mov	r2, r3
 8001736:	4603      	mov	r3, r0
 8001738:	817b      	strh	r3, [r7, #10]
 800173a:	460b      	mov	r3, r1
 800173c:	813b      	strh	r3, [r7, #8]
 800173e:	4613      	mov	r3, r2
 8001740:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8001742:	893b      	ldrh	r3, [r7, #8]
 8001744:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8001746:	7efb      	ldrb	r3, [r7, #27]
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 800174e:	2301      	movs	r3, #1
 8001750:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8001752:	7e3a      	ldrb	r2, [r7, #24]
 8001754:	7efb      	ldrb	r3, [r7, #27]
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 800176a:	2b01      	cmp	r3, #1
 800176c:	d801      	bhi.n	8001772 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 800176e:	7e3b      	ldrb	r3, [r7, #24]
 8001770:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001778:	2b01      	cmp	r3, #1
 800177a:	d001      	beq.n	8001780 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 800177c:	7e3b      	ldrb	r3, [r7, #24]
 800177e:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8001780:	893b      	ldrh	r3, [r7, #8]
 8001782:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8001784:	8afb      	ldrh	r3, [r7, #22]
 8001786:	f023 0307 	bic.w	r3, r3, #7
 800178a:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	7c1b      	ldrb	r3, [r3, #16]
 8001792:	461a      	mov	r2, r3
 8001794:	8afb      	ldrh	r3, [r7, #22]
 8001796:	fb13 f302 	smulbb	r3, r3, r2
 800179a:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017a0:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 80017a2:	8afb      	ldrh	r3, [r7, #22]
 80017a4:	69fa      	ldr	r2, [r7, #28]
 80017a6:	4413      	add	r3, r2
 80017a8:	61fb      	str	r3, [r7, #28]
  ptr += x;
 80017aa:	897b      	ldrh	r3, [r7, #10]
 80017ac:	69fa      	ldr	r2, [r7, #28]
 80017ae:	4413      	add	r3, r2
 80017b0:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 80017b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d117      	bne.n	80017ea <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	781a      	ldrb	r2, [r3, #0]
 80017be:	7ebb      	ldrb	r3, [r7, #26]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	781a      	ldrb	r2, [r3, #0]
 80017cc:	7e7b      	ldrb	r3, [r7, #25]
 80017ce:	4053      	eors	r3, r2
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	701a      	strb	r2, [r3, #0]
	ptr++;
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3301      	adds	r3, #1
 80017da:	61fb      	str	r3, [r7, #28]
	len--;
 80017dc:	88fb      	ldrh	r3, [r7, #6]
 80017de:	3b01      	subs	r3, #1
 80017e0:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 80017e2:	88fb      	ldrh	r3, [r7, #6]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1e8      	bne.n	80017ba <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80017e8:	e038      	b.n	800185c <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	781a      	ldrb	r2, [r3, #0]
 80017ee:	7ebb      	ldrb	r3, [r7, #26]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	781a      	ldrb	r2, [r3, #0]
 80017fc:	7e7b      	ldrb	r3, [r7, #25]
 80017fe:	4053      	eors	r3, r2
 8001800:	b2da      	uxtb	r2, r3
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8001806:	7efb      	ldrb	r3, [r7, #27]
 8001808:	3301      	adds	r3, #1
 800180a:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 800180c:	7efb      	ldrb	r3, [r7, #27]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	76fb      	strb	r3, [r7, #27]
      len--;
 8001814:	88fb      	ldrh	r3, [r7, #6]
 8001816:	3b01      	subs	r3, #1
 8001818:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 800181a:	7efb      	ldrb	r3, [r7, #27]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d114      	bne.n	800184a <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8001824:	461a      	mov	r2, r3
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	4413      	add	r3, r2
 800182a:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001832:	2b01      	cmp	r3, #1
 8001834:	d801      	bhi.n	800183a <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8001836:	2301      	movs	r3, #1
 8001838:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001840:	2b01      	cmp	r3, #1
 8001842:	d008      	beq.n	8001856 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8001844:	2301      	movs	r3, #1
 8001846:	767b      	strb	r3, [r7, #25]
 8001848:	e005      	b.n	8001856 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 800184a:	7ebb      	ldrb	r3, [r7, #26]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8001850:	7e7b      	ldrb	r3, [r7, #25]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8001856:	88fb      	ldrh	r3, [r7, #6]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1c6      	bne.n	80017ea <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 800185c:	bf00      	nop
 800185e:	3724      	adds	r7, #36	@ 0x24
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  u8g2->clip_y0 = 0;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001886:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001890:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	4798      	blx	r3
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b084      	sub	sp, #16
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	60f8      	str	r0, [r7, #12]
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	603b      	str	r3, [r7, #0]
 80018b2:	4613      	mov	r3, r2
 80018b4:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2200      	movs	r2, #0
 80018ba:	659a      	str	r2, [r3, #88]	@ 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	68ba      	ldr	r2, [r7, #8]
 80018c6:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	79fa      	ldrb	r2, [r7, #7]
 80018cc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
  u8g2->bitmap_transparency = 0;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
  u8g2->draw_color = 1;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  u8g2->is_auto_page_clear = 1;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
  
  u8g2->cb = u8g2_cb;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update_dimension(u8g2);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8001910:	68f8      	ldr	r0, [r7, #12]
 8001912:	f7ff ffa9 	bl	8001868 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f7ff fd84 	bl	8001424 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
#endif
}
 8001924:	bf00      	nop
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001940:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8001942:	89fb      	ldrh	r3, [r7, #14]
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	89fa      	ldrh	r2, [r7, #14]
 800194c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  
  t = display_info->tile_width;
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	7c1b      	ldrb	r3, [r3, #16]
 8001952:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8001954:	89fb      	ldrh	r3, [r7, #14]
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	89fa      	ldrh	r2, [r7, #14]
 800195e:	875a      	strh	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001966:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8001968:	89fb      	ldrh	r3, [r7, #14]
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	89fa      	ldrh	r2, [r7, #14]
 8001972:	87da      	strh	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_buf_height;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800197a:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 800197c:	89fb      	ldrh	r3, [r7, #14]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8001984:	4413      	add	r3, r2
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	7c52      	ldrb	r2, [r2, #17]
 800198a:	4293      	cmp	r3, r2
 800198c:	dd07      	ble.n	800199e <u8g2_update_dimension_common+0x72>
    t = display_info->tile_height - u8g2->tile_curr_row;
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	7c5b      	ldrb	r3, [r3, #17]
 8001992:	461a      	mov	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800199e:	89fb      	ldrh	r3, [r7, #14]
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  u8g2->buf_y1 += t;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 80019c0:	89fb      	ldrh	r3, [r7, #14]
 80019c2:	4413      	add	r3, r2
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	8a9a      	ldrh	r2, [r3, #20]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  u8g2->height = display_info->pixel_height;
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	8ada      	ldrh	r2, [r3, #22]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 80019e0:	bf00      	nop
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af02      	add	r7, sp, #8
 80019f2:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f8b3 0052 	ldrh.w	r0, [r3, #82]	@ 0x52
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	4603      	mov	r3, r0
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff fe5e 	bl	80016d2 <u8g2_IsIntersection>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d104      	bne.n	8001a26 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8001a24:	e03b      	b.n	8001a9e <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d205      	bcs.n	8001a4a <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d905      	bls.n	8001a66 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d205      	bcs.n	8001a82 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d905      	bls.n	8001a9e <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff ff3c 	bl	800192c <u8g2_update_dimension_common>
}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  if ( u8g2->height >= u8g2->buf_y1 )
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d30a      	bcc.n	8001b06 <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff ff65 	bl	80019ec <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b088      	sub	sp, #32
 8001b2e:	af02      	add	r7, sp, #8
 8001b30:	60f8      	str	r0, [r7, #12]
 8001b32:	4608      	mov	r0, r1
 8001b34:	4611      	mov	r1, r2
 8001b36:	461a      	mov	r2, r3
 8001b38:	4603      	mov	r3, r0
 8001b3a:	817b      	strh	r3, [r7, #10]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	813b      	strh	r3, [r7, #8]
 8001b40:	4613      	mov	r3, r2
 8001b42:	80fb      	strh	r3, [r7, #6]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001b4a:	82bb      	strh	r3, [r7, #20]
  yy -= y;
 8001b4c:	8aba      	ldrh	r2, [r7, #20]
 8001b4e:	893b      	ldrh	r3, [r7, #8]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	82bb      	strh	r3, [r7, #20]
  
  xx = u8g2->width;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b5a:	82fb      	strh	r3, [r7, #22]
  xx -= x;
 8001b5c:	8afa      	ldrh	r2, [r7, #22]
 8001b5e:	897b      	ldrh	r3, [r7, #10]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	82fb      	strh	r3, [r7, #22]
  
  if ( dir == 0 )
 8001b64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d107      	bne.n	8001b7c <u8g2_draw_l90_r2+0x52>
  {
    yy--;
 8001b6c:	8abb      	ldrh	r3, [r7, #20]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	82bb      	strh	r3, [r7, #20]
    xx -= len;
 8001b72:	8afa      	ldrh	r2, [r7, #22]
 8001b74:	88fb      	ldrh	r3, [r7, #6]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	82fb      	strh	r3, [r7, #22]
 8001b7a:	e00a      	b.n	8001b92 <u8g2_draw_l90_r2+0x68>
  }
  else if ( dir == 1 )
 8001b7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d106      	bne.n	8001b92 <u8g2_draw_l90_r2+0x68>
  {
    xx--;
 8001b84:	8afb      	ldrh	r3, [r7, #22]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	82fb      	strh	r3, [r7, #22]
    yy -= len;
 8001b8a:	8aba      	ldrh	r2, [r7, #20]
 8001b8c:	88fb      	ldrh	r3, [r7, #6]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	82bb      	strh	r3, [r7, #20]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8001b92:	88f8      	ldrh	r0, [r7, #6]
 8001b94:	8aba      	ldrh	r2, [r7, #20]
 8001b96:	8af9      	ldrh	r1, [r7, #22]
 8001b98:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	68f8      	ldr	r0, [r7, #12]
 8001ba2:	f7ff fcb7 	bl	8001514 <u8g2_draw_hv_line_2dir>
}
 8001ba6:	bf00      	nop
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8001bd6:	78fb      	ldrb	r3, [r7, #3]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d002      	beq.n	8001be2 <u8x8_ascii_next+0x18>
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	2b0a      	cmp	r3, #10
 8001be0:	d102      	bne.n	8001be8 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8001be2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001be6:	e001      	b.n	8001bec <u8x8_ascii_next+0x22>
  return b;
 8001be8:	78fb      	ldrb	r3, [r7, #3]
 8001bea:	b29b      	uxth	r3, r3
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8001bf8:	b590      	push	{r4, r7, lr}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691c      	ldr	r4, [r3, #16]
 8001c08:	78fa      	ldrb	r2, [r7, #3]
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	2120      	movs	r1, #32
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	47a0      	blx	r4
 8001c12:	4603      	mov	r3, r0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd90      	pop	{r4, r7, pc}

08001c1c <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8001c1c:	b590      	push	{r4, r7, lr}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	460b      	mov	r3, r1
 8001c26:	607a      	str	r2, [r7, #4]
 8001c28:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	691c      	ldr	r4, [r3, #16]
 8001c2e:	7afa      	ldrb	r2, [r7, #11]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2117      	movs	r1, #23
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	47a0      	blx	r4
 8001c38:	4603      	mov	r3, r0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd90      	pop	{r4, r7, pc}

08001c42 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8001c4e:	1cfb      	adds	r3, r7, #3
 8001c50:	461a      	mov	r2, r3
 8001c52:	2101      	movs	r1, #1
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff ffe1 	bl	8001c1c <u8x8_byte_SendBytes>
 8001c5a:	4603      	mov	r3, r0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8001c64:	b590      	push	{r4, r7, lr}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68dc      	ldr	r4, [r3, #12]
 8001c74:	78fa      	ldrb	r2, [r7, #3]
 8001c76:	2300      	movs	r3, #0
 8001c78:	2115      	movs	r1, #21
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	47a0      	blx	r4
 8001c7e:	4603      	mov	r3, r0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd90      	pop	{r4, r7, pc}

08001c88 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8001c88:	b590      	push	{r4, r7, lr}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68dc      	ldr	r4, [r3, #12]
 8001c98:	78fa      	ldrb	r2, [r7, #3]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	2116      	movs	r1, #22
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	47a0      	blx	r4
 8001ca2:	4603      	mov	r3, r0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd90      	pop	{r4, r7, pc}

08001cac <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8001cac:	b590      	push	{r4, r7, lr}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	607a      	str	r2, [r7, #4]
 8001cb8:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	68dc      	ldr	r4, [r3, #12]
 8001cbe:	7afa      	ldrb	r2, [r7, #11]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2117      	movs	r1, #23
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	47a0      	blx	r4
 8001cc8:	4603      	mov	r3, r0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd90      	pop	{r4, r7, pc}

08001cd2 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8001cd2:	b590      	push	{r4, r7, lr}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68dc      	ldr	r4, [r3, #12]
 8001cde:	2300      	movs	r3, #0
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2118      	movs	r1, #24
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	47a0      	blx	r4
 8001ce8:	4603      	mov	r3, r0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd90      	pop	{r4, r7, pc}

08001cf2 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8001cf2:	b590      	push	{r4, r7, lr}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68dc      	ldr	r4, [r3, #12]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	2200      	movs	r2, #0
 8001d02:	2119      	movs	r1, #25
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	47a0      	blx	r4
 8001d08:	4603      	mov	r3, r0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd90      	pop	{r4, r7, pc}

08001d12 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8001d12:	b590      	push	{r4, r7, lr}
 8001d14:	b085      	sub	sp, #20
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	73fb      	strb	r3, [r7, #15]
    data++;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	3301      	adds	r3, #1
 8001d26:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
 8001d2a:	2bfe      	cmp	r3, #254	@ 0xfe
 8001d2c:	d031      	beq.n	8001d92 <u8x8_cad_SendSequence+0x80>
 8001d2e:	2bfe      	cmp	r3, #254	@ 0xfe
 8001d30:	dc3d      	bgt.n	8001dae <u8x8_cad_SendSequence+0x9c>
 8001d32:	2b19      	cmp	r3, #25
 8001d34:	dc3b      	bgt.n	8001dae <u8x8_cad_SendSequence+0x9c>
 8001d36:	2b18      	cmp	r3, #24
 8001d38:	da23      	bge.n	8001d82 <u8x8_cad_SendSequence+0x70>
 8001d3a:	2b16      	cmp	r3, #22
 8001d3c:	dc02      	bgt.n	8001d44 <u8x8_cad_SendSequence+0x32>
 8001d3e:	2b15      	cmp	r3, #21
 8001d40:	da03      	bge.n	8001d4a <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8001d42:	e034      	b.n	8001dae <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8001d44:	2b17      	cmp	r3, #23
 8001d46:	d00e      	beq.n	8001d66 <u8x8_cad_SendSequence+0x54>
	return;
 8001d48:	e031      	b.n	8001dae <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68dc      	ldr	r4, [r3, #12]
 8001d54:	7bba      	ldrb	r2, [r7, #14]
 8001d56:	7bf9      	ldrb	r1, [r7, #15]
 8001d58:	2300      	movs	r3, #0
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	47a0      	blx	r4
	  data++;
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	3301      	adds	r3, #1
 8001d62:	603b      	str	r3, [r7, #0]
	  break;
 8001d64:	e022      	b.n	8001dac <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8001d6c:	f107 030e 	add.w	r3, r7, #14
 8001d70:	461a      	mov	r2, r3
 8001d72:	2101      	movs	r1, #1
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff ff99 	bl	8001cac <u8x8_cad_SendData>
	  data++;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	603b      	str	r3, [r7, #0]
	  break;
 8001d80:	e014      	b.n	8001dac <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68dc      	ldr	r4, [r3, #12]
 8001d86:	7bf9      	ldrb	r1, [r7, #15]
 8001d88:	2300      	movs	r3, #0
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	47a0      	blx	r4
	  break;
 8001d90:	e00c      	b.n	8001dac <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8001d98:	7bbb      	ldrb	r3, [r7, #14]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	2129      	movs	r1, #41	@ 0x29
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f9ee 	bl	8002180 <u8x8_gpio_call>
	  data++;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	3301      	adds	r3, #1
 8001da8:	603b      	str	r3, [r7, #0]
	  break;
 8001daa:	bf00      	nop
    cmd = *data;
 8001dac:	e7b6      	b.n	8001d1c <u8x8_cad_SendSequence+0xa>
	return;
 8001dae:	bf00      	nop
    }
  }
}
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd90      	pop	{r4, r7, pc}
	...

08001db8 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001db8:	b590      	push	{r4, r7, lr}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	607b      	str	r3, [r7, #4]
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	72fb      	strb	r3, [r7, #11]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8001dca:	7afb      	ldrb	r3, [r7, #11]
 8001dcc:	3b14      	subs	r3, #20
 8001dce:	2b05      	cmp	r3, #5
 8001dd0:	d82f      	bhi.n	8001e32 <u8x8_cad_001+0x7a>
 8001dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8001dd8 <u8x8_cad_001+0x20>)
 8001dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd8:	08001e21 	.word	0x08001e21
 8001ddc:	08001df1 	.word	0x08001df1
 8001de0:	08001e05 	.word	0x08001e05
 8001de4:	08001e19 	.word	0x08001e19
 8001de8:	08001e21 	.word	0x08001e21
 8001dec:	08001e21 	.word	0x08001e21
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8001df0:	2100      	movs	r1, #0
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f7ff ff00 	bl	8001bf8 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8001df8:	7abb      	ldrb	r3, [r7, #10]
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f7ff ff20 	bl	8001c42 <u8x8_byte_SendByte>
      break;
 8001e02:	e018      	b.n	8001e36 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8001e04:	2100      	movs	r1, #0
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f7ff fef6 	bl	8001bf8 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8001e0c:	7abb      	ldrb	r3, [r7, #10]
 8001e0e:	4619      	mov	r1, r3
 8001e10:	68f8      	ldr	r0, [r7, #12]
 8001e12:	f7ff ff16 	bl	8001c42 <u8x8_byte_SendByte>
      break;
 8001e16:	e00e      	b.n	8001e36 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8001e18:	2101      	movs	r1, #1
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f7ff feec 	bl	8001bf8 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	691c      	ldr	r4, [r3, #16]
 8001e24:	7aba      	ldrb	r2, [r7, #10]
 8001e26:	7af9      	ldrb	r1, [r7, #11]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	47a0      	blx	r4
 8001e2e:	4603      	mov	r3, r0
 8001e30:	e002      	b.n	8001e38 <u8x8_cad_001+0x80>
    default:
      return 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	e000      	b.n	8001e38 <u8x8_cad_001+0x80>
  }
  return 1;
 8001e36:	2301      	movs	r3, #1
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd90      	pop	{r4, r7, pc}

08001e40 <u8x8_d_st7565_common>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	607b      	str	r3, [r7, #4]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	72fb      	strb	r3, [r7, #11]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8001e52:	7afb      	ldrb	r3, [r7, #11]
 8001e54:	2b0f      	cmp	r3, #15
 8001e56:	d006      	beq.n	8001e66 <u8x8_d_st7565_common+0x26>
 8001e58:	2b0f      	cmp	r3, #15
 8001e5a:	dc71      	bgt.n	8001f40 <u8x8_d_st7565_common+0x100>
 8001e5c:	2b0b      	cmp	r3, #11
 8001e5e:	d050      	beq.n	8001f02 <u8x8_d_st7565_common+0xc2>
 8001e60:	2b0e      	cmp	r3, #14
 8001e62:	d05b      	beq.n	8001f1c <u8x8_d_st7565_common+0xdc>
 8001e64:	e06c      	b.n	8001f40 <u8x8_d_st7565_common+0x100>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f7ff ff33 	bl	8001cd2 <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	795b      	ldrb	r3, [r3, #5]
 8001e70:	75bb      	strb	r3, [r7, #22]
      x *= 8;
 8001e72:	7dbb      	ldrb	r3, [r7, #22]
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	75bb      	strb	r3, [r7, #22]
      x += u8x8->x_offset;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8001e7e:	7dbb      	ldrb	r3, [r7, #22]
 8001e80:	4413      	add	r3, r2
 8001e82:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8001e84:	7dbb      	ldrb	r3, [r7, #22]
 8001e86:	091b      	lsrs	r3, r3, #4
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	f043 0310 	orr.w	r3, r3, #16
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	4619      	mov	r1, r3
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f7ff fee6 	bl	8001c64 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8001e98:	7dbb      	ldrb	r3, [r7, #22]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f7ff fede 	bl	8001c64 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	799b      	ldrb	r3, [r3, #6]
 8001eac:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f7ff fed5 	bl	8001c64 <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	791b      	ldrb	r3, [r3, #4]
 8001ebe:	75fb      	strb	r3, [r7, #23]
      c *= 8;
 8001ec0:	7dfb      	ldrb	r3, [r7, #23]
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	613b      	str	r3, [r7, #16]
      /* 
	The following if condition checks the hardware limits of the st7565 
	controller: It is not allowed to write beyond the display limits.
	This is in fact an issue within flip mode.
      */
      if ( c + x > 132u )
 8001ecc:	7dfa      	ldrb	r2, [r7, #23]
 8001ece:	7dbb      	ldrb	r3, [r7, #22]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	2b84      	cmp	r3, #132	@ 0x84
 8001ed4:	d905      	bls.n	8001ee2 <u8x8_d_st7565_common+0xa2>
      {
	c = 132u;
 8001ed6:	2384      	movs	r3, #132	@ 0x84
 8001ed8:	75fb      	strb	r3, [r7, #23]
	c -= x;
 8001eda:	7dfa      	ldrb	r2, [r7, #23]
 8001edc:	7dbb      	ldrb	r3, [r7, #22]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	75fb      	strb	r3, [r7, #23]
      }
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 8001ee2:	7dfb      	ldrb	r3, [r7, #23]
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f7ff fedf 	bl	8001cac <u8x8_cad_SendData>
	arg_int--;
 8001eee:	7abb      	ldrb	r3, [r7, #10]
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8001ef4:	7abb      	ldrb	r3, [r7, #10]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f3      	bne.n	8001ee2 <u8x8_d_st7565_common+0xa2>
      
      u8x8_cad_EndTransfer(u8x8);
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f7ff fef9 	bl	8001cf2 <u8x8_cad_EndTransfer>
      break;
 8001f00:	e020      	b.n	8001f44 <u8x8_d_st7565_common+0x104>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8001f02:	7abb      	ldrb	r3, [r7, #10]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d104      	bne.n	8001f12 <u8x8_d_st7565_common+0xd2>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
 8001f08:	4911      	ldr	r1, [pc, #68]	@ (8001f50 <u8x8_d_st7565_common+0x110>)
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f7ff ff01 	bl	8001d12 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
      break;
 8001f10:	e018      	b.n	8001f44 <u8x8_d_st7565_common+0x104>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
 8001f12:	4910      	ldr	r1, [pc, #64]	@ (8001f54 <u8x8_d_st7565_common+0x114>)
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f7ff fefc 	bl	8001d12 <u8x8_cad_SendSequence>
      break;
 8001f1a:	e013      	b.n	8001f44 <u8x8_d_st7565_common+0x104>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f7ff fed8 	bl	8001cd2 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8001f22:	2181      	movs	r1, #129	@ 0x81
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f7ff fe9d 	bl	8001c64 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
 8001f2a:	7abb      	ldrb	r3, [r7, #10]
 8001f2c:	089b      	lsrs	r3, r3, #2
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	4619      	mov	r1, r3
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f7ff fea8 	bl	8001c88 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f7ff feda 	bl	8001cf2 <u8x8_cad_EndTransfer>
      break;
 8001f3e:	e001      	b.n	8001f44 <u8x8_d_st7565_common+0x104>
#endif
    default:
      return 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	e000      	b.n	8001f46 <u8x8_d_st7565_common+0x106>
  }
  return 1;
 8001f44:	2301      	movs	r3, #1
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	0800718c 	.word	0x0800718c
 8001f54:	08007194 	.word	0x08007194

08001f58 <u8x8_d_st7565_64128n>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_64128n(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	607b      	str	r3, [r7, #4]
 8001f62:	460b      	mov	r3, r1
 8001f64:	72fb      	strb	r3, [r7, #11]
 8001f66:	4613      	mov	r3, r2
 8001f68:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 8001f6a:	7aba      	ldrb	r2, [r7, #10]
 8001f6c:	7af9      	ldrb	r1, [r7, #11]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f7ff ff65 	bl	8001e40 <u8x8_d_st7565_common>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d131      	bne.n	8001fe0 <u8x8_d_st7565_64128n+0x88>
  {
    /* msg not handled, then try here */
    switch(msg)
 8001f7c:	7afb      	ldrb	r3, [r7, #11]
 8001f7e:	2b0d      	cmp	r3, #13
 8001f80:	d013      	beq.n	8001faa <u8x8_d_st7565_64128n+0x52>
 8001f82:	2b0d      	cmp	r3, #13
 8001f84:	dc2a      	bgt.n	8001fdc <u8x8_d_st7565_64128n+0x84>
 8001f86:	2b09      	cmp	r3, #9
 8001f88:	d002      	beq.n	8001f90 <u8x8_d_st7565_64128n+0x38>
 8001f8a:	2b0a      	cmp	r3, #10
 8001f8c:	d005      	beq.n	8001f9a <u8x8_d_st7565_64128n+0x42>
 8001f8e:	e025      	b.n	8001fdc <u8x8_d_st7565_64128n+0x84>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_64128n_display_info);
 8001f90:	4916      	ldr	r1, [pc, #88]	@ (8001fec <u8x8_d_st7565_64128n+0x94>)
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 f832 	bl	8001ffc <u8x8_d_helper_display_setup_memory>
	break;
 8001f98:	e022      	b.n	8001fe0 <u8x8_d_st7565_64128n+0x88>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f000 f842 	bl	8002024 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_64128n_init_seq);
 8001fa0:	4913      	ldr	r1, [pc, #76]	@ (8001ff0 <u8x8_d_st7565_64128n+0x98>)
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f7ff feb5 	bl	8001d12 <u8x8_cad_SendSequence>
	break;
 8001fa8:	e01a      	b.n	8001fe0 <u8x8_d_st7565_64128n+0x88>
      case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
	if ( arg_int == 0 )
 8001faa:	7abb      	ldrb	r3, [r7, #10]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10a      	bne.n	8001fc6 <u8x8_d_st7565_64128n+0x6e>
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
 8001fb0:	4910      	ldr	r1, [pc, #64]	@ (8001ff4 <u8x8_d_st7565_64128n+0x9c>)
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f7ff fead 	bl	8001d12 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	7c9a      	ldrb	r2, [r3, #18]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	else
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
	}	
	break;
 8001fc4:	e00c      	b.n	8001fe0 <u8x8_d_st7565_64128n+0x88>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
 8001fc6:	490c      	ldr	r1, [pc, #48]	@ (8001ff8 <u8x8_d_st7565_64128n+0xa0>)
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f7ff fea2 	bl	8001d12 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	7cda      	ldrb	r2, [r3, #19]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	break;
 8001fda:	e001      	b.n	8001fe0 <u8x8_d_st7565_64128n+0x88>
      default:
	return 0;		/* msg unknown */
 8001fdc:	2300      	movs	r3, #0
 8001fde:	e000      	b.n	8001fe2 <u8x8_d_st7565_64128n+0x8a>
    }
  }
  return 1;
 8001fe0:	2301      	movs	r3, #1
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	080071cc 	.word	0x080071cc
 8001ff0:	080071ac 	.word	0x080071ac
 8001ff4:	0800719c 	.word	0x0800719c
 8001ff8:	080071a4 	.word	0x080071a4

08001ffc <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	7c9a      	ldrb	r2, [r3, #18]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8002024:	b590      	push	{r4, r7, lr}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	695c      	ldr	r4, [r3, #20]
 8002030:	2300      	movs	r3, #0
 8002032:	2200      	movs	r2, #0
 8002034:	2128      	movs	r1, #40	@ 0x28
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68dc      	ldr	r4, [r3, #12]
 800203e:	2300      	movs	r3, #0
 8002040:	2200      	movs	r2, #0
 8002042:	2114      	movs	r1, #20
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8002048:	2201      	movs	r2, #1
 800204a:	214b      	movs	r1, #75	@ 0x4b
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 f897 	bl	8002180 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	791b      	ldrb	r3, [r3, #4]
 8002058:	461a      	mov	r2, r3
 800205a:	2129      	movs	r1, #41	@ 0x29
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f88f 	bl	8002180 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8002062:	2200      	movs	r2, #0
 8002064:	214b      	movs	r1, #75	@ 0x4b
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f88a 	bl	8002180 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	791b      	ldrb	r3, [r3, #4]
 8002072:	461a      	mov	r2, r3
 8002074:	2129      	movs	r1, #41	@ 0x29
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f882 	bl	8002180 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800207c:	2201      	movs	r2, #1
 800207e:	214b      	movs	r1, #75	@ 0x4b
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 f87d 	bl	8002180 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	795b      	ldrb	r3, [r3, #5]
 800208c:	461a      	mov	r2, r3
 800208e:	2129      	movs	r1, #41	@ 0x29
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 f875 	bl	8002180 <u8x8_gpio_call>
}    
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	bd90      	pop	{r4, r7, pc}

0800209e <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 800209e:	b590      	push	{r4, r7, lr}
 80020a0:	b085      	sub	sp, #20
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	4608      	mov	r0, r1
 80020a8:	4611      	mov	r1, r2
 80020aa:	461a      	mov	r2, r3
 80020ac:	4603      	mov	r3, r0
 80020ae:	70fb      	strb	r3, [r7, #3]
 80020b0:	460b      	mov	r3, r1
 80020b2:	70bb      	strb	r3, [r7, #2]
 80020b4:	4613      	mov	r3, r2
 80020b6:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80020b8:	78fb      	ldrb	r3, [r7, #3]
 80020ba:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80020bc:	78bb      	ldrb	r3, [r7, #2]
 80020be:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80020c0:	787b      	ldrb	r3, [r7, #1]
 80020c2:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80020c4:	6a3b      	ldr	r3, [r7, #32]
 80020c6:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689c      	ldr	r4, [r3, #8]
 80020cc:	f107 0308 	add.w	r3, r7, #8
 80020d0:	2201      	movs	r2, #1
 80020d2:	210f      	movs	r1, #15
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	47a0      	blx	r4
 80020d8:	4603      	mov	r3, r0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd90      	pop	{r4, r7, pc}

080020e2 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80020e2:	b590      	push	{r4, r7, lr}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689c      	ldr	r4, [r3, #8]
 80020ee:	2300      	movs	r3, #0
 80020f0:	2200      	movs	r2, #0
 80020f2:	2109      	movs	r1, #9
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	47a0      	blx	r4
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd90      	pop	{r4, r7, pc}

08002100 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8002100:	b590      	push	{r4, r7, lr}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689c      	ldr	r4, [r3, #8]
 800210c:	2300      	movs	r3, #0
 800210e:	2200      	movs	r2, #0
 8002110:	210a      	movs	r1, #10
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	bd90      	pop	{r4, r7, pc}

0800211e <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800211e:	b590      	push	{r4, r7, lr}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
 8002126:	460b      	mov	r3, r1
 8002128:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689c      	ldr	r4, [r3, #8]
 800212e:	78fa      	ldrb	r2, [r7, #3]
 8002130:	2300      	movs	r3, #0
 8002132:	210b      	movs	r1, #11
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	47a0      	blx	r4
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	bd90      	pop	{r4, r7, pc}

08002140 <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 8002140:	b590      	push	{r4, r7, lr}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689c      	ldr	r4, [r3, #8]
 8002150:	78fa      	ldrb	r2, [r7, #3]
 8002152:	2300      	movs	r3, #0
 8002154:	210e      	movs	r1, #14
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	47a0      	blx	r4
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	bd90      	pop	{r4, r7, pc}

08002162 <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8002162:	b590      	push	{r4, r7, lr}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689c      	ldr	r4, [r3, #8]
 800216e:	2300      	movs	r3, #0
 8002170:	2200      	movs	r2, #0
 8002172:	2110      	movs	r1, #16
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	47a0      	blx	r4
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	bd90      	pop	{r4, r7, pc}

08002180 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8002180:	b590      	push	{r4, r7, lr}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	70fb      	strb	r3, [r7, #3]
 800218c:	4613      	mov	r3, r2
 800218e:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	695c      	ldr	r4, [r3, #20]
 8002194:	78ba      	ldrb	r2, [r7, #2]
 8002196:	78f9      	ldrb	r1, [r7, #3]
 8002198:	2300      	movs	r3, #0
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	47a0      	blx	r4
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd90      	pop	{r4, r7, pc}

080021a6 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b085      	sub	sp, #20
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	60f8      	str	r0, [r7, #12]
 80021ae:	607b      	str	r3, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	72fb      	strb	r3, [r7, #11]
 80021b4:	4613      	mov	r3, r2
 80021b6:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
	...

080021c8 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a11      	ldr	r2, [pc, #68]	@ (8002220 <u8x8_SetupDefaults+0x58>)
 80021da:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a10      	ldr	r2, [pc, #64]	@ (8002220 <u8x8_SetupDefaults+0x58>)
 80021e0:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002220 <u8x8_SetupDefaults+0x58>)
 80021e6:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a0d      	ldr	r2, [pc, #52]	@ (8002220 <u8x8_SetupDefaults+0x58>)
 80021ec:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	22ff      	movs	r2, #255	@ 0xff
 8002208:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	22ff      	movs	r2, #255	@ 0xff
 8002210:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	080021a7 	.word	0x080021a7

08002224 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f7ff ffc8 	bl	80021c8 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f7ff ff46 	bl	80020e2 <u8x8_SetupMemory>
}
 8002256:	bf00      	nop
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <u8x8_stm32_gpio_and_delay>:
 */
static uint8_t u8x8_stm32_gpio_and_delay(u8x8_t * const u8x8,
                                           uint8_t msg,
                                           uint8_t arg_int,
                                           void * const arg_ptr)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	607b      	str	r3, [r7, #4]
 800226a:	460b      	mov	r3, r1
 800226c:	72fb      	strb	r3, [r7, #11]
 800226e:	4613      	mov	r3, r2
 8002270:	72bb      	strb	r3, [r7, #10]
    /* Suppress unused parameter warnings */
    (void)u8x8;
    (void)arg_ptr;

    switch (msg)
 8002272:	7afb      	ldrb	r3, [r7, #11]
 8002274:	2b4b      	cmp	r3, #75	@ 0x4b
 8002276:	d01a      	beq.n	80022ae <u8x8_stm32_gpio_and_delay+0x4e>
 8002278:	2b4b      	cmp	r3, #75	@ 0x4b
 800227a:	dc1f      	bgt.n	80022bc <u8x8_stm32_gpio_and_delay+0x5c>
 800227c:	2b4a      	cmp	r3, #74	@ 0x4a
 800227e:	d00f      	beq.n	80022a0 <u8x8_stm32_gpio_and_delay+0x40>
 8002280:	2b4a      	cmp	r3, #74	@ 0x4a
 8002282:	dc1b      	bgt.n	80022bc <u8x8_stm32_gpio_and_delay+0x5c>
 8002284:	2b28      	cmp	r3, #40	@ 0x28
 8002286:	d002      	beq.n	800228e <u8x8_stm32_gpio_and_delay+0x2e>
 8002288:	2b29      	cmp	r3, #41	@ 0x29
 800228a:	d004      	beq.n	8002296 <u8x8_stm32_gpio_and_delay+0x36>
        case U8X8_MSG_GPIO_RESET:
            HAL_GPIO_WritePin(DISPLAY_IO_1_GPIO_Port, DISPLAY_IO_1_Pin, (GPIO_PinState)arg_int);
            break;
        default:
            /* No action */
            break;
 800228c:	e016      	b.n	80022bc <u8x8_stm32_gpio_and_delay+0x5c>
            HAL_Delay(DISPLAY_UPDATE_DELAY_U32);
 800228e:	2002      	movs	r0, #2
 8002290:	f000 ff80 	bl	8003194 <HAL_Delay>
            break;
 8002294:	e013      	b.n	80022be <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_Delay(arg_int);
 8002296:	7abb      	ldrb	r3, [r7, #10]
 8002298:	4618      	mov	r0, r3
 800229a:	f000 ff7b 	bl	8003194 <HAL_Delay>
            break;
 800229e:	e00e      	b.n	80022be <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_GPIO_WritePin(DISPLAY_IO_2_GPIO_Port, DISPLAY_IO_2_Pin, (GPIO_PinState)arg_int);
 80022a0:	7abb      	ldrb	r3, [r7, #10]
 80022a2:	461a      	mov	r2, r3
 80022a4:	2108      	movs	r1, #8
 80022a6:	4808      	ldr	r0, [pc, #32]	@ (80022c8 <u8x8_stm32_gpio_and_delay+0x68>)
 80022a8:	f001 fa2a 	bl	8003700 <HAL_GPIO_WritePin>
            break;
 80022ac:	e007      	b.n	80022be <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_GPIO_WritePin(DISPLAY_IO_1_GPIO_Port, DISPLAY_IO_1_Pin, (GPIO_PinState)arg_int);
 80022ae:	7abb      	ldrb	r3, [r7, #10]
 80022b0:	461a      	mov	r2, r3
 80022b2:	2104      	movs	r1, #4
 80022b4:	4804      	ldr	r0, [pc, #16]	@ (80022c8 <u8x8_stm32_gpio_and_delay+0x68>)
 80022b6:	f001 fa23 	bl	8003700 <HAL_GPIO_WritePin>
            break;
 80022ba:	e000      	b.n	80022be <u8x8_stm32_gpio_and_delay+0x5e>
            break;
 80022bc:	bf00      	nop
    }
    return 1U;
 80022be:	2301      	movs	r3, #1
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40021800 	.word	0x40021800

080022cc <u8x8_byte_4wire_hw_spi>:
 */
static uint8_t u8x8_byte_4wire_hw_spi(u8x8_t * const u8x8,
                                      uint8_t msg,
                                      uint8_t arg_int,
                                      void * const arg_ptr)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	607b      	str	r3, [r7, #4]
 80022d6:	460b      	mov	r3, r1
 80022d8:	72fb      	strb	r3, [r7, #11]
 80022da:	4613      	mov	r3, r2
 80022dc:	72bb      	strb	r3, [r7, #10]
    uint8_t retVal = 1U;
 80022de:	2301      	movs	r3, #1
 80022e0:	75fb      	strb	r3, [r7, #23]

    switch (msg)
 80022e2:	7afb      	ldrb	r3, [r7, #11]
 80022e4:	3b14      	subs	r3, #20
 80022e6:	2b0c      	cmp	r3, #12
 80022e8:	d83e      	bhi.n	8002368 <u8x8_byte_4wire_hw_spi+0x9c>
 80022ea:	a201      	add	r2, pc, #4	@ (adr r2, 80022f0 <u8x8_byte_4wire_hw_spi+0x24>)
 80022ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f0:	0800236f 	.word	0x0800236f
 80022f4:	08002369 	.word	0x08002369
 80022f8:	08002369 	.word	0x08002369
 80022fc:	08002325 	.word	0x08002325
 8002300:	08002345 	.word	0x08002345
 8002304:	08002357 	.word	0x08002357
 8002308:	08002369 	.word	0x08002369
 800230c:	08002369 	.word	0x08002369
 8002310:	08002369 	.word	0x08002369
 8002314:	08002369 	.word	0x08002369
 8002318:	08002369 	.word	0x08002369
 800231c:	08002369 	.word	0x08002369
 8002320:	08002337 	.word	0x08002337
    {
        case U8X8_MSG_BYTE_SEND:
            (void)HAL_SPI_Transmit(&hspi3, (uint8_t *)arg_ptr, arg_int, SPI_TIMEOUT_U32);
 8002324:	7abb      	ldrb	r3, [r7, #10]
 8002326:	b29a      	uxth	r2, r3
 8002328:	f242 7310 	movw	r3, #10000	@ 0x2710
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	4813      	ldr	r0, [pc, #76]	@ (800237c <u8x8_byte_4wire_hw_spi+0xb0>)
 8002330:	f002 fd23 	bl	8004d7a <HAL_SPI_Transmit>
            break;
 8002334:	e01c      	b.n	8002370 <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_INIT:
            break;
        case U8X8_MSG_BYTE_SET_DC:
            HAL_GPIO_WritePin(DISPLAY_IO_2_GPIO_Port, DISPLAY_IO_2_Pin, (GPIO_PinState)arg_int);
 8002336:	7abb      	ldrb	r3, [r7, #10]
 8002338:	461a      	mov	r2, r3
 800233a:	2108      	movs	r1, #8
 800233c:	4810      	ldr	r0, [pc, #64]	@ (8002380 <u8x8_byte_4wire_hw_spi+0xb4>)
 800233e:	f001 f9df 	bl	8003700 <HAL_GPIO_WritePin>
            break;
 8002342:	e015      	b.n	8002370 <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_START_TRANSFER:
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, u8x8->display_info->chip_enable_level);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	461a      	mov	r2, r3
 800234c:	2104      	movs	r1, #4
 800234e:	480d      	ldr	r0, [pc, #52]	@ (8002384 <u8x8_byte_4wire_hw_spi+0xb8>)
 8002350:	f001 f9d6 	bl	8003700 <HAL_GPIO_WritePin>
            break;
 8002354:	e00c      	b.n	8002370 <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_END_TRANSFER:
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, u8x8->display_info->chip_disable_level);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	785b      	ldrb	r3, [r3, #1]
 800235c:	461a      	mov	r2, r3
 800235e:	2104      	movs	r1, #4
 8002360:	4808      	ldr	r0, [pc, #32]	@ (8002384 <u8x8_byte_4wire_hw_spi+0xb8>)
 8002362:	f001 f9cd 	bl	8003700 <HAL_GPIO_WritePin>
            break;
 8002366:	e003      	b.n	8002370 <u8x8_byte_4wire_hw_spi+0xa4>
        default:
            retVal = 0U;
 8002368:	2300      	movs	r3, #0
 800236a:	75fb      	strb	r3, [r7, #23]
            break;
 800236c:	e000      	b.n	8002370 <u8x8_byte_4wire_hw_spi+0xa4>
            break;
 800236e:	bf00      	nop
    }
    return retVal;
 8002370:	7dfb      	ldrb	r3, [r7, #23]
}
 8002372:	4618      	mov	r0, r3
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	200009c4 	.word	0x200009c4
 8002380:	40021800 	.word	0x40021800
 8002384:	40020c00 	.word	0x40020c00

08002388 <Display_Init>:

/**
 * @brief Initializes the display hardware and u8g2 library.
 */
void Display_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
    /* Turn on the backlight */
    HAL_GPIO_WritePin(BACKLIGHT_1_GPIO_Port, BACKLIGHT_1_Pin, GPIO_PIN_SET);
 800238c:	2201      	movs	r2, #1
 800238e:	2110      	movs	r1, #16
 8002390:	480c      	ldr	r0, [pc, #48]	@ (80023c4 <Display_Init+0x3c>)
 8002392:	f001 f9b5 	bl	8003700 <HAL_GPIO_WritePin>

    /* Setup u8g2 for the ST7565 display.
       Adjust the setup function if your display type differs. */
    u8g2_Setup_st7565_64128n_f(&u8g2, U8G2_R2, u8x8_byte_4wire_hw_spi, u8x8_stm32_gpio_and_delay);
 8002396:	4b0c      	ldr	r3, [pc, #48]	@ (80023c8 <Display_Init+0x40>)
 8002398:	4a0c      	ldr	r2, [pc, #48]	@ (80023cc <Display_Init+0x44>)
 800239a:	490d      	ldr	r1, [pc, #52]	@ (80023d0 <Display_Init+0x48>)
 800239c:	480d      	ldr	r0, [pc, #52]	@ (80023d4 <Display_Init+0x4c>)
 800239e:	f7fe faa1 	bl	80008e4 <u8g2_Setup_st7565_64128n_f>
    u8g2_InitDisplay(&u8g2);
 80023a2:	480c      	ldr	r0, [pc, #48]	@ (80023d4 <Display_Init+0x4c>)
 80023a4:	f7ff feac 	bl	8002100 <u8x8_InitDisplay>
    u8g2_SetPowerSave(&u8g2, 0);
 80023a8:	2100      	movs	r1, #0
 80023aa:	480a      	ldr	r0, [pc, #40]	@ (80023d4 <Display_Init+0x4c>)
 80023ac:	f7ff feb7 	bl	800211e <u8x8_SetPowerSave>
    u8g2_ClearDisplay(&u8g2);
 80023b0:	4808      	ldr	r0, [pc, #32]	@ (80023d4 <Display_Init+0x4c>)
 80023b2:	f7fe fa71 	bl	8000898 <u8g2_ClearDisplay>
    u8g2_SetContrast(&u8g2, CONTRAST_VALUE_U8);
 80023b6:	2178      	movs	r1, #120	@ 0x78
 80023b8:	4806      	ldr	r0, [pc, #24]	@ (80023d4 <Display_Init+0x4c>)
 80023ba:	f7ff fec1 	bl	8002140 <u8x8_SetContrast>
}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40021800 	.word	0x40021800
 80023c8:	08002261 	.word	0x08002261
 80023cc:	080022cd 	.word	0x080022cd
 80023d0:	08007180 	.word	0x08007180
 80023d4:	20000884 	.word	0x20000884

080023d8 <Display_MainTitlePage>:
 * @brief Displays the main title page.
 *
 * This function draws the main title page with a logo and text.
 */
void Display_MainTitlePage(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af02      	add	r7, sp, #8
    do
    {
        /* Begin a new page */
        u8g2_FirstPage(&u8g2);
 80023de:	481f      	ldr	r0, [pc, #124]	@ (800245c <Display_MainTitlePage+0x84>)
 80023e0:	f7fe fa18 	bl	8000814 <u8g2_FirstPage>
        do
        {
            /* Draw the logo image */
            u8g2_DrawXBM(&u8g2, 0, 0, 128, 64, logo);
 80023e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002460 <Display_MainTitlePage+0x88>)
 80023e6:	9301      	str	r3, [sp, #4]
 80023e8:	2340      	movs	r3, #64	@ 0x40
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	2380      	movs	r3, #128	@ 0x80
 80023ee:	2200      	movs	r2, #0
 80023f0:	2100      	movs	r1, #0
 80023f2:	481a      	ldr	r0, [pc, #104]	@ (800245c <Display_MainTitlePage+0x84>)
 80023f4:	f7fe f932 	bl	800065c <u8g2_DrawXBM>
        }
        while (u8g2_NextPage(&u8g2) != 0U);
 80023f8:	4818      	ldr	r0, [pc, #96]	@ (800245c <Display_MainTitlePage+0x84>)
 80023fa:	f7fe fa1f 	bl	800083c <u8g2_NextPage>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1ef      	bne.n	80023e4 <Display_MainTitlePage+0xc>

        HAL_Delay(PAGE_DELAY_U32);
 8002404:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002408:	f000 fec4 	bl	8003194 <HAL_Delay>

        /* Clear the buffer and draw title text */
        u8g2_ClearBuffer(&u8g2);
 800240c:	4813      	ldr	r0, [pc, #76]	@ (800245c <Display_MainTitlePage+0x84>)
 800240e:	f7fe f968 	bl	80006e2 <u8g2_ClearBuffer>
        u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 8002412:	4914      	ldr	r1, [pc, #80]	@ (8002464 <Display_MainTitlePage+0x8c>)
 8002414:	4811      	ldr	r0, [pc, #68]	@ (800245c <Display_MainTitlePage+0x84>)
 8002416:	f7ff f815 	bl	8001444 <u8g2_SetFont>
        u8g2_DrawStr(&u8g2, 42, 16, "VEGA");
 800241a:	4b13      	ldr	r3, [pc, #76]	@ (8002468 <Display_MainTitlePage+0x90>)
 800241c:	2210      	movs	r2, #16
 800241e:	212a      	movs	r1, #42	@ 0x2a
 8002420:	480e      	ldr	r0, [pc, #56]	@ (800245c <Display_MainTitlePage+0x84>)
 8002422:	f7fe ff6d 	bl	8001300 <u8g2_DrawStr>
        u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 8002426:	490f      	ldr	r1, [pc, #60]	@ (8002464 <Display_MainTitlePage+0x8c>)
 8002428:	480c      	ldr	r0, [pc, #48]	@ (800245c <Display_MainTitlePage+0x84>)
 800242a:	f7ff f80b 	bl	8001444 <u8g2_SetFont>
        u8g2_DrawStr(&u8g2, 6, 33, "INNOVATIONS");
 800242e:	4b0f      	ldr	r3, [pc, #60]	@ (800246c <Display_MainTitlePage+0x94>)
 8002430:	2221      	movs	r2, #33	@ 0x21
 8002432:	2106      	movs	r1, #6
 8002434:	4809      	ldr	r0, [pc, #36]	@ (800245c <Display_MainTitlePage+0x84>)
 8002436:	f7fe ff63 	bl	8001300 <u8g2_DrawStr>
        HAL_Delay(TEXT_DELAY_U32);
 800243a:	200a      	movs	r0, #10
 800243c:	f000 feaa 	bl	8003194 <HAL_Delay>
    }
    while (u8g2_NextPage(&u8g2) != 0U);
 8002440:	4806      	ldr	r0, [pc, #24]	@ (800245c <Display_MainTitlePage+0x84>)
 8002442:	f7fe f9fb 	bl	800083c <u8g2_NextPage>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1c8      	bne.n	80023de <Display_MainTitlePage+0x6>

    HAL_Delay(FINAL_PAGE_DELAY_U32);
 800244c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002450:	f000 fea0 	bl	8003194 <HAL_Delay>
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20000884 	.word	0x20000884
 8002460:	20000000 	.word	0x20000000
 8002464:	08006528 	.word	0x08006528
 8002468:	080063e0 	.word	0x080063e0
 800246c:	080063e8 	.word	0x080063e8

08002470 <Display_Address>:
/**
 * @brief  Displays an I2C address on the display.
 * @param  address: The 7-bit I2C device address to display.
 */
void Display_Address(uint8_t address)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	71fb      	strb	r3, [r7, #7]
    char addressBuffer[16];

    /* Format the address into a string.
       The format "0x%02X" displays the address in hexadecimal with two digits. */
    (void)sprintf(addressBuffer, "I2C Addr: 0x%02X", address);
 800247a:	79fa      	ldrb	r2, [r7, #7]
 800247c:	f107 0308 	add.w	r3, r7, #8
 8002480:	490c      	ldr	r1, [pc, #48]	@ (80024b4 <Display_Address+0x44>)
 8002482:	4618      	mov	r0, r3
 8002484:	f002 ff6e 	bl	8005364 <siprintf>

    /* Clear the display buffer */
    u8g2_ClearBuffer(&u8g2);
 8002488:	480b      	ldr	r0, [pc, #44]	@ (80024b8 <Display_Address+0x48>)
 800248a:	f7fe f92a 	bl	80006e2 <u8g2_ClearBuffer>

    /* Set an appropriate font */
    u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 800248e:	490b      	ldr	r1, [pc, #44]	@ (80024bc <Display_Address+0x4c>)
 8002490:	4809      	ldr	r0, [pc, #36]	@ (80024b8 <Display_Address+0x48>)
 8002492:	f7fe ffd7 	bl	8001444 <u8g2_SetFont>

    /* Draw the formatted string at desired coordinates (adjust as needed) */
    u8g2_DrawStr(&u8g2, 0, 20, addressBuffer);
 8002496:	f107 0308 	add.w	r3, r7, #8
 800249a:	2214      	movs	r2, #20
 800249c:	2100      	movs	r1, #0
 800249e:	4806      	ldr	r0, [pc, #24]	@ (80024b8 <Display_Address+0x48>)
 80024a0:	f7fe ff2e 	bl	8001300 <u8g2_DrawStr>

    /* Send the buffer to the display */
    u8g2_SendBuffer(&u8g2);
 80024a4:	4804      	ldr	r0, [pc, #16]	@ (80024b8 <Display_Address+0x48>)
 80024a6:	f7fe f98f 	bl	80007c8 <u8g2_SendBuffer>
}
 80024aa:	bf00      	nop
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	08006408 	.word	0x08006408
 80024b8:	20000884 	.word	0x20000884
 80024bc:	08006528 	.word	0x08006528

080024c0 <Expander_InitDevice>:
static HAL_StatusTypeDef Expander_SetConfigOutputs(I2C_HandleTypeDef *hi2c, uint8_t deviceAddress);
static HAL_StatusTypeDef Expander_SetOutputs(I2C_HandleTypeDef *hi2c, uint8_t deviceAddress, uint8_t out0, uint8_t out1);

/* Initializes a single expander by configuring all its 16 I/Os as outputs */
HAL_StatusTypeDef Expander_InitDevice(I2C_HandleTypeDef *hi2c, uint8_t deviceAddress)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef status;
    status = Expander_SetConfigOutputs(hi2c, deviceAddress);
 80024cc:	78fb      	ldrb	r3, [r7, #3]
 80024ce:	4619      	mov	r1, r3
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 f865 	bl	80025a0 <Expander_SetConfigOutputs>
 80024d6:	4603      	mov	r3, r0
 80024d8:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 80024da:	7bfb      	ldrb	r3, [r7, #15]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d007      	beq.n	80024f0 <Expander_InitDevice+0x30>
    {
        printf("Expander 0x%02X: Config failed (status: %d)\n", deviceAddress, status);
 80024e0:	78fb      	ldrb	r3, [r7, #3]
 80024e2:	7bfa      	ldrb	r2, [r7, #15]
 80024e4:	4619      	mov	r1, r3
 80024e6:	4807      	ldr	r0, [pc, #28]	@ (8002504 <Expander_InitDevice+0x44>)
 80024e8:	f002 ff2a 	bl	8005340 <iprintf>
        return status;
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
 80024ee:	e005      	b.n	80024fc <Expander_InitDevice+0x3c>
    }
    else
    {
        printf("Expander 0x%02X: Configured as outputs\n", deviceAddress);
 80024f0:	78fb      	ldrb	r3, [r7, #3]
 80024f2:	4619      	mov	r1, r3
 80024f4:	4804      	ldr	r0, [pc, #16]	@ (8002508 <Expander_InitDevice+0x48>)
 80024f6:	f002 ff23 	bl	8005340 <iprintf>
    }
    return status;
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	08006438 	.word	0x08006438
 8002508:	08006468 	.word	0x08006468

0800250c <Expander_InitAllDevices>:

/* Initializes all known expanders on the given I2C bus */
HAL_StatusTypeDef Expander_InitAllDevices(I2C_HandleTypeDef *hi2c)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 8002514:	2300      	movs	r3, #0
 8002516:	72fb      	strb	r3, [r7, #11]
    size_t i;
    for (i = 0; i < expanderCount; i++)
 8002518:	2300      	movs	r3, #0
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	e013      	b.n	8002546 <Expander_InitAllDevices+0x3a>
    {
        uint8_t addr = expanderAddresses[i];
 800251e:	4a0e      	ldr	r2, [pc, #56]	@ (8002558 <Expander_InitAllDevices+0x4c>)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4413      	add	r3, r2
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	72bb      	strb	r3, [r7, #10]
        status = Expander_InitDevice(hi2c, addr);
 8002528:	7abb      	ldrb	r3, [r7, #10]
 800252a:	4619      	mov	r1, r3
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7ff ffc7 	bl	80024c0 <Expander_InitDevice>
 8002532:	4603      	mov	r3, r0
 8002534:	72fb      	strb	r3, [r7, #11]
        if (status != HAL_OK)
 8002536:	7afb      	ldrb	r3, [r7, #11]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <Expander_InitAllDevices+0x34>
        {
            return status;
 800253c:	7afb      	ldrb	r3, [r7, #11]
 800253e:	e007      	b.n	8002550 <Expander_InitAllDevices+0x44>
    for (i = 0; i < expanderCount; i++)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	3301      	adds	r3, #1
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	2204      	movs	r2, #4
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4293      	cmp	r3, r2
 800254c:	d3e7      	bcc.n	800251e <Expander_InitAllDevices+0x12>
        }
    }
    return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	080071e4 	.word	0x080071e4

0800255c <Expander_SetAllOutputsHigh>:

/* Sets all outputs to HIGH for the specified expander */
HAL_StatusTypeDef Expander_SetAllOutputsHigh(I2C_HandleTypeDef *hi2c, uint8_t deviceAddress)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	70fb      	strb	r3, [r7, #3]
    return Expander_SetOutputs(hi2c, deviceAddress, 0xFF, 0xFF);
 8002568:	78f9      	ldrb	r1, [r7, #3]
 800256a:	23ff      	movs	r3, #255	@ 0xff
 800256c:	22ff      	movs	r2, #255	@ 0xff
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f84c 	bl	800260c <Expander_SetOutputs>
 8002574:	4603      	mov	r3, r0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <Expander_SetAllOutputsLow>:

/* Sets all outputs to LOW for the specified expander */
HAL_StatusTypeDef Expander_SetAllOutputsLow(I2C_HandleTypeDef *hi2c, uint8_t deviceAddress)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	460b      	mov	r3, r1
 8002588:	70fb      	strb	r3, [r7, #3]
    return Expander_SetOutputs(hi2c, deviceAddress, 0x00, 0x00);
 800258a:	78f9      	ldrb	r1, [r7, #3]
 800258c:	2300      	movs	r3, #0
 800258e:	2200      	movs	r2, #0
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 f83b 	bl	800260c <Expander_SetOutputs>
 8002596:	4603      	mov	r3, r0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <Expander_SetConfigOutputs>:
 * Local helper functions
 *--------------------------------------------------------------------------*/

/* Configures both configuration registers to set all 16 I/Os as outputs */
static HAL_StatusTypeDef Expander_SetConfigOutputs(I2C_HandleTypeDef *hi2c, uint8_t deviceAddress)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b088      	sub	sp, #32
 80025a4:	af04      	add	r7, sp, #16
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	70fb      	strb	r3, [r7, #3]
    uint8_t configValue = 0x00;  // 0 => output mode
 80025ac:	2300      	movs	r3, #0
 80025ae:	73bb      	strb	r3, [r7, #14]
    HAL_StatusTypeDef status;

    /* Configure Port 0 */
    status = HAL_I2C_Mem_Write(hi2c,
 80025b0:	78fb      	ldrb	r3, [r7, #3]
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	b299      	uxth	r1, r3
 80025b8:	2364      	movs	r3, #100	@ 0x64
 80025ba:	9302      	str	r3, [sp, #8]
 80025bc:	2301      	movs	r3, #1
 80025be:	9301      	str	r3, [sp, #4]
 80025c0:	f107 030e 	add.w	r3, r7, #14
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	2301      	movs	r3, #1
 80025c8:	2206      	movs	r2, #6
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f001 f9f6 	bl	80039bc <HAL_I2C_Mem_Write>
 80025d0:	4603      	mov	r3, r0
 80025d2:	73fb      	strb	r3, [r7, #15]
                               PCA9535_REG_CONFIG_PORT0,
                               I2C_MEMADD_SIZE_8BIT,
                               &configValue,
                               1,
                               100);
    if (status != HAL_OK)
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <Expander_SetConfigOutputs+0x3e>
    {
        return status;
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	e012      	b.n	8002604 <Expander_SetConfigOutputs+0x64>
    }

    /* Configure Port 1 */
    status = HAL_I2C_Mem_Write(hi2c,
 80025de:	78fb      	ldrb	r3, [r7, #3]
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	b299      	uxth	r1, r3
 80025e6:	2364      	movs	r3, #100	@ 0x64
 80025e8:	9302      	str	r3, [sp, #8]
 80025ea:	2301      	movs	r3, #1
 80025ec:	9301      	str	r3, [sp, #4]
 80025ee:	f107 030e 	add.w	r3, r7, #14
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	2301      	movs	r3, #1
 80025f6:	2207      	movs	r2, #7
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f001 f9df 	bl	80039bc <HAL_I2C_Mem_Write>
 80025fe:	4603      	mov	r3, r0
 8002600:	73fb      	strb	r3, [r7, #15]
                               PCA9535_REG_CONFIG_PORT1,
                               I2C_MEMADD_SIZE_8BIT,
                               &configValue,
                               1,
                               100);
    return status;
 8002602:	7bfb      	ldrb	r3, [r7, #15]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <Expander_SetOutputs>:

/* Writes output values to registers 0x02 and 0x03 for the specified expander */
static HAL_StatusTypeDef Expander_SetOutputs(I2C_HandleTypeDef *hi2c, uint8_t deviceAddress, uint8_t out0, uint8_t out1)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b088      	sub	sp, #32
 8002610:	af04      	add	r7, sp, #16
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	4608      	mov	r0, r1
 8002616:	4611      	mov	r1, r2
 8002618:	461a      	mov	r2, r3
 800261a:	4603      	mov	r3, r0
 800261c:	70fb      	strb	r3, [r7, #3]
 800261e:	460b      	mov	r3, r1
 8002620:	70bb      	strb	r3, [r7, #2]
 8002622:	4613      	mov	r3, r2
 8002624:	707b      	strb	r3, [r7, #1]
    HAL_StatusTypeDef status;
    /* Write to Output Port 0 */
    status = HAL_I2C_Mem_Write(hi2c,
 8002626:	78fb      	ldrb	r3, [r7, #3]
 8002628:	b29b      	uxth	r3, r3
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	b299      	uxth	r1, r3
 800262e:	2364      	movs	r3, #100	@ 0x64
 8002630:	9302      	str	r3, [sp, #8]
 8002632:	2301      	movs	r3, #1
 8002634:	9301      	str	r3, [sp, #4]
 8002636:	1cbb      	adds	r3, r7, #2
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	2301      	movs	r3, #1
 800263c:	2202      	movs	r2, #2
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f001 f9bc 	bl	80039bc <HAL_I2C_Mem_Write>
 8002644:	4603      	mov	r3, r0
 8002646:	73fb      	strb	r3, [r7, #15]
                               PCA9535_REG_OUTPUT_PORT0,
                               I2C_MEMADD_SIZE_8BIT,
                               &out0,
                               1,
                               100);
    if (status != HAL_OK)
 8002648:	7bfb      	ldrb	r3, [r7, #15]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d007      	beq.n	800265e <Expander_SetOutputs+0x52>
    {
        printf("Expander 0x%02X: Failed to set Port 0 (status: %d)\n", deviceAddress, status);
 800264e:	78fb      	ldrb	r3, [r7, #3]
 8002650:	7bfa      	ldrb	r2, [r7, #15]
 8002652:	4619      	mov	r1, r3
 8002654:	4815      	ldr	r0, [pc, #84]	@ (80026ac <Expander_SetOutputs+0xa0>)
 8002656:	f002 fe73 	bl	8005340 <iprintf>
        return status;
 800265a:	7bfb      	ldrb	r3, [r7, #15]
 800265c:	e022      	b.n	80026a4 <Expander_SetOutputs+0x98>
    }
    /* Write to Output Port 1 */
    status = HAL_I2C_Mem_Write(hi2c,
 800265e:	78fb      	ldrb	r3, [r7, #3]
 8002660:	b29b      	uxth	r3, r3
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	b299      	uxth	r1, r3
 8002666:	2364      	movs	r3, #100	@ 0x64
 8002668:	9302      	str	r3, [sp, #8]
 800266a:	2301      	movs	r3, #1
 800266c:	9301      	str	r3, [sp, #4]
 800266e:	1c7b      	adds	r3, r7, #1
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	2301      	movs	r3, #1
 8002674:	2203      	movs	r2, #3
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f001 f9a0 	bl	80039bc <HAL_I2C_Mem_Write>
 800267c:	4603      	mov	r3, r0
 800267e:	73fb      	strb	r3, [r7, #15]
                               PCA9535_REG_OUTPUT_PORT1,
                               I2C_MEMADD_SIZE_8BIT,
                               &out1,
                               1,
                               100);
    if (status == HAL_OK)
 8002680:	7bfb      	ldrb	r3, [r7, #15]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d107      	bne.n	8002696 <Expander_SetOutputs+0x8a>
    {
        printf("Expander 0x%02X: Outputs set to 0x%02X, 0x%02X\n", deviceAddress, out0, out1);
 8002686:	78f9      	ldrb	r1, [r7, #3]
 8002688:	78bb      	ldrb	r3, [r7, #2]
 800268a:	461a      	mov	r2, r3
 800268c:	787b      	ldrb	r3, [r7, #1]
 800268e:	4808      	ldr	r0, [pc, #32]	@ (80026b0 <Expander_SetOutputs+0xa4>)
 8002690:	f002 fe56 	bl	8005340 <iprintf>
 8002694:	e005      	b.n	80026a2 <Expander_SetOutputs+0x96>
    }
    else
    {
        printf("Expander 0x%02X: Failed to set Port 1 (status: %d)\n", deviceAddress, status);
 8002696:	78fb      	ldrb	r3, [r7, #3]
 8002698:	7bfa      	ldrb	r2, [r7, #15]
 800269a:	4619      	mov	r1, r3
 800269c:	4805      	ldr	r0, [pc, #20]	@ (80026b4 <Expander_SetOutputs+0xa8>)
 800269e:	f002 fe4f 	bl	8005340 <iprintf>
    }
    return status;
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	08006490 	.word	0x08006490
 80026b0:	080064c4 	.word	0x080064c4
 80026b4:	080064f4 	.word	0x080064f4

080026b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026bc:	f000 fcf8 	bl	80030b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026c0:	f000 f8a8 	bl	8002814 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026c4:	f000 f9bc 	bl	8002a40 <MX_GPIO_Init>
  MX_SPI3_Init();
 80026c8:	f000 f984 	bl	80029d4 <MX_SPI3_Init>
  MX_I2C2_Init();
 80026cc:	f000 f902 	bl	80028d4 <MX_I2C2_Init>
  MX_I2C3_Init();
 80026d0:	f000 f940 	bl	8002954 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize the display module */
  Display_Init();
 80026d4:	f7ff fe58 	bl	8002388 <Display_Init>

  /* Display the main title page */
  Display_MainTitlePage();
 80026d8:	f7ff fe7e 	bl	80023d8 <Display_MainTitlePage>

  /* Initialize the expander at address 0x20 by configuring all its pins as outputs */
  Expander_InitAllDevices(&hi2c2);
 80026dc:	4846      	ldr	r0, [pc, #280]	@ (80027f8 <main+0x140>)
 80026de:	f7ff ff15 	bl	800250c <Expander_InitAllDevices>
  Expander_InitAllDevices(&hi2c3);
 80026e2:	4846      	ldr	r0, [pc, #280]	@ (80027fc <main+0x144>)
 80026e4:	f7ff ff12 	bl	800250c <Expander_InitAllDevices>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  Scan_I2C_Bus();
 80026e8:	f000 faae 	bl	8002c48 <Scan_I2C_Bus>

		////////////////////////////////////////////////

		  HAL_GPIO_WritePin(GPIOH, LED_01_Pin|LED_02_Pin, GPIO_PIN_RESET);
 80026ec:	2200      	movs	r2, #0
 80026ee:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80026f2:	4843      	ldr	r0, [pc, #268]	@ (8002800 <main+0x148>)
 80026f4:	f001 f804 	bl	8003700 <HAL_GPIO_WritePin>

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(GPIOG, LED_09_Pin|LED_04_Pin|LED_08_Pin, GPIO_PIN_RESET);
 80026f8:	2200      	movs	r2, #0
 80026fa:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80026fe:	4841      	ldr	r0, [pc, #260]	@ (8002804 <main+0x14c>)
 8002700:	f000 fffe 	bl	8003700 <HAL_GPIO_WritePin>

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(GPIOB, LED_03_Pin|LED_07_Pin, GPIO_PIN_RESET);
 8002704:	2200      	movs	r2, #0
 8002706:	2118      	movs	r1, #24
 8002708:	483f      	ldr	r0, [pc, #252]	@ (8002808 <main+0x150>)
 800270a:	f000 fff9 	bl	8003700 <HAL_GPIO_WritePin>

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(GPIOE, LED_06_Pin|LED_05_Pin, GPIO_PIN_RESET);
 800270e:	2200      	movs	r2, #0
 8002710:	2103      	movs	r1, #3
 8002712:	483e      	ldr	r0, [pc, #248]	@ (800280c <main+0x154>)
 8002714:	f000 fff4 	bl	8003700 <HAL_GPIO_WritePin>

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(GPIOI, LED_DC_Y_Pin|LED_DC_G_Pin|LED_PC_Y_Pin|LED_PC_G_Pin, GPIO_PIN_RESET);
 8002718:	2200      	movs	r2, #0
 800271a:	21f0      	movs	r1, #240	@ 0xf0
 800271c:	483c      	ldr	r0, [pc, #240]	@ (8002810 <main+0x158>)
 800271e:	f000 ffef 	bl	8003700 <HAL_GPIO_WritePin>



		  HAL_Delay(500);
 8002722:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002726:	f000 fd35 	bl	8003194 <HAL_Delay>

		  Display_MainTitlePage();
 800272a:	f7ff fe55 	bl	80023d8 <Display_MainTitlePage>

	        Expander_SetAllOutputsHigh(&hi2c2, 0x20);
 800272e:	2120      	movs	r1, #32
 8002730:	4831      	ldr	r0, [pc, #196]	@ (80027f8 <main+0x140>)
 8002732:	f7ff ff13 	bl	800255c <Expander_SetAllOutputsHigh>
	        Expander_SetAllOutputsHigh(&hi2c2, 0x21);
 8002736:	2121      	movs	r1, #33	@ 0x21
 8002738:	482f      	ldr	r0, [pc, #188]	@ (80027f8 <main+0x140>)
 800273a:	f7ff ff0f 	bl	800255c <Expander_SetAllOutputsHigh>
	        Expander_SetAllOutputsHigh(&hi2c2, 0x24);
 800273e:	2124      	movs	r1, #36	@ 0x24
 8002740:	482d      	ldr	r0, [pc, #180]	@ (80027f8 <main+0x140>)
 8002742:	f7ff ff0b 	bl	800255c <Expander_SetAllOutputsHigh>
	        Expander_SetAllOutputsHigh(&hi2c2, 0x25);
 8002746:	2125      	movs	r1, #37	@ 0x25
 8002748:	482b      	ldr	r0, [pc, #172]	@ (80027f8 <main+0x140>)
 800274a:	f7ff ff07 	bl	800255c <Expander_SetAllOutputsHigh>
	        Expander_SetAllOutputsHigh(&hi2c3, 0x20);
 800274e:	2120      	movs	r1, #32
 8002750:	482a      	ldr	r0, [pc, #168]	@ (80027fc <main+0x144>)
 8002752:	f7ff ff03 	bl	800255c <Expander_SetAllOutputsHigh>
	        Expander_SetAllOutputsHigh(&hi2c3, 0x21);
 8002756:	2121      	movs	r1, #33	@ 0x21
 8002758:	4828      	ldr	r0, [pc, #160]	@ (80027fc <main+0x144>)
 800275a:	f7ff feff 	bl	800255c <Expander_SetAllOutputsHigh>
	        Expander_SetAllOutputsHigh(&hi2c3, 0x24);
 800275e:	2124      	movs	r1, #36	@ 0x24
 8002760:	4826      	ldr	r0, [pc, #152]	@ (80027fc <main+0x144>)
 8002762:	f7ff fefb 	bl	800255c <Expander_SetAllOutputsHigh>
	        Expander_SetAllOutputsHigh(&hi2c3, 0x25);
 8002766:	2125      	movs	r1, #37	@ 0x25
 8002768:	4824      	ldr	r0, [pc, #144]	@ (80027fc <main+0x144>)
 800276a:	f7ff fef7 	bl	800255c <Expander_SetAllOutputsHigh>
	        HAL_Delay(1000);
 800276e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002772:	f000 fd0f 	bl	8003194 <HAL_Delay>


	        Expander_SetAllOutputsLow(&hi2c2, 0x20);
 8002776:	2120      	movs	r1, #32
 8002778:	481f      	ldr	r0, [pc, #124]	@ (80027f8 <main+0x140>)
 800277a:	f7ff ff00 	bl	800257e <Expander_SetAllOutputsLow>
	        Expander_SetAllOutputsLow(&hi2c2, 0x21);
 800277e:	2121      	movs	r1, #33	@ 0x21
 8002780:	481d      	ldr	r0, [pc, #116]	@ (80027f8 <main+0x140>)
 8002782:	f7ff fefc 	bl	800257e <Expander_SetAllOutputsLow>
	        Expander_SetAllOutputsLow(&hi2c2, 0x24);
 8002786:	2124      	movs	r1, #36	@ 0x24
 8002788:	481b      	ldr	r0, [pc, #108]	@ (80027f8 <main+0x140>)
 800278a:	f7ff fef8 	bl	800257e <Expander_SetAllOutputsLow>
	        Expander_SetAllOutputsLow(&hi2c2, 0x25);
 800278e:	2125      	movs	r1, #37	@ 0x25
 8002790:	4819      	ldr	r0, [pc, #100]	@ (80027f8 <main+0x140>)
 8002792:	f7ff fef4 	bl	800257e <Expander_SetAllOutputsLow>
	        Expander_SetAllOutputsLow(&hi2c3, 0x20);
 8002796:	2120      	movs	r1, #32
 8002798:	4818      	ldr	r0, [pc, #96]	@ (80027fc <main+0x144>)
 800279a:	f7ff fef0 	bl	800257e <Expander_SetAllOutputsLow>
	        Expander_SetAllOutputsLow(&hi2c3, 0x21);
 800279e:	2121      	movs	r1, #33	@ 0x21
 80027a0:	4816      	ldr	r0, [pc, #88]	@ (80027fc <main+0x144>)
 80027a2:	f7ff feec 	bl	800257e <Expander_SetAllOutputsLow>
	        Expander_SetAllOutputsLow(&hi2c3, 0x24);
 80027a6:	2124      	movs	r1, #36	@ 0x24
 80027a8:	4814      	ldr	r0, [pc, #80]	@ (80027fc <main+0x144>)
 80027aa:	f7ff fee8 	bl	800257e <Expander_SetAllOutputsLow>
	        Expander_SetAllOutputsLow(&hi2c3, 0x25);
 80027ae:	2125      	movs	r1, #37	@ 0x25
 80027b0:	4812      	ldr	r0, [pc, #72]	@ (80027fc <main+0x144>)
 80027b2:	f7ff fee4 	bl	800257e <Expander_SetAllOutputsLow>



		  HAL_GPIO_WritePin(GPIOH, LED_01_Pin|LED_02_Pin, GPIO_PIN_SET);
 80027b6:	2201      	movs	r2, #1
 80027b8:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80027bc:	4810      	ldr	r0, [pc, #64]	@ (8002800 <main+0x148>)
 80027be:	f000 ff9f 	bl	8003700 <HAL_GPIO_WritePin>

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(GPIOG, LED_09_Pin|LED_04_Pin|LED_08_Pin, GPIO_PIN_SET);
 80027c2:	2201      	movs	r2, #1
 80027c4:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80027c8:	480e      	ldr	r0, [pc, #56]	@ (8002804 <main+0x14c>)
 80027ca:	f000 ff99 	bl	8003700 <HAL_GPIO_WritePin>

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(GPIOB, LED_03_Pin|LED_07_Pin, GPIO_PIN_SET);
 80027ce:	2201      	movs	r2, #1
 80027d0:	2118      	movs	r1, #24
 80027d2:	480d      	ldr	r0, [pc, #52]	@ (8002808 <main+0x150>)
 80027d4:	f000 ff94 	bl	8003700 <HAL_GPIO_WritePin>

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(GPIOE, LED_06_Pin|LED_05_Pin, GPIO_PIN_SET);
 80027d8:	2201      	movs	r2, #1
 80027da:	2103      	movs	r1, #3
 80027dc:	480b      	ldr	r0, [pc, #44]	@ (800280c <main+0x154>)
 80027de:	f000 ff8f 	bl	8003700 <HAL_GPIO_WritePin>

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(GPIOI, LED_DC_Y_Pin|LED_DC_G_Pin|LED_PC_Y_Pin|LED_PC_G_Pin, GPIO_PIN_SET);
 80027e2:	2201      	movs	r2, #1
 80027e4:	21f0      	movs	r1, #240	@ 0xf0
 80027e6:	480a      	ldr	r0, [pc, #40]	@ (8002810 <main+0x158>)
 80027e8:	f000 ff8a 	bl	8003700 <HAL_GPIO_WritePin>

		  HAL_Delay(500);
 80027ec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80027f0:	f000 fcd0 	bl	8003194 <HAL_Delay>
	  Scan_I2C_Bus();
 80027f4:	bf00      	nop
 80027f6:	e777      	b.n	80026e8 <main+0x30>
 80027f8:	2000091c 	.word	0x2000091c
 80027fc:	20000970 	.word	0x20000970
 8002800:	40021c00 	.word	0x40021c00
 8002804:	40021800 	.word	0x40021800
 8002808:	40020400 	.word	0x40020400
 800280c:	40021000 	.word	0x40021000
 8002810:	40022000 	.word	0x40022000

08002814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b094      	sub	sp, #80	@ 0x50
 8002818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800281a:	f107 0320 	add.w	r3, r7, #32
 800281e:	2230      	movs	r2, #48	@ 0x30
 8002820:	2100      	movs	r1, #0
 8002822:	4618      	mov	r0, r3
 8002824:	f002 fe01 	bl	800542a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002828:	f107 030c 	add.w	r3, r7, #12
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	60da      	str	r2, [r3, #12]
 8002836:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002838:	2300      	movs	r3, #0
 800283a:	60bb      	str	r3, [r7, #8]
 800283c:	4b23      	ldr	r3, [pc, #140]	@ (80028cc <SystemClock_Config+0xb8>)
 800283e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002840:	4a22      	ldr	r2, [pc, #136]	@ (80028cc <SystemClock_Config+0xb8>)
 8002842:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002846:	6413      	str	r3, [r2, #64]	@ 0x40
 8002848:	4b20      	ldr	r3, [pc, #128]	@ (80028cc <SystemClock_Config+0xb8>)
 800284a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002854:	2300      	movs	r3, #0
 8002856:	607b      	str	r3, [r7, #4]
 8002858:	4b1d      	ldr	r3, [pc, #116]	@ (80028d0 <SystemClock_Config+0xbc>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002860:	4a1b      	ldr	r2, [pc, #108]	@ (80028d0 <SystemClock_Config+0xbc>)
 8002862:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002866:	6013      	str	r3, [r2, #0]
 8002868:	4b19      	ldr	r3, [pc, #100]	@ (80028d0 <SystemClock_Config+0xbc>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002870:	607b      	str	r3, [r7, #4]
 8002872:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002874:	2302      	movs	r3, #2
 8002876:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002878:	2301      	movs	r3, #1
 800287a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800287c:	2310      	movs	r3, #16
 800287e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002880:	2300      	movs	r3, #0
 8002882:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002884:	f107 0320 	add.w	r3, r7, #32
 8002888:	4618      	mov	r0, r3
 800288a:	f001 fda9 	bl	80043e0 <HAL_RCC_OscConfig>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002894:	f000 fa0c 	bl	8002cb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002898:	230f      	movs	r3, #15
 800289a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800289c:	2300      	movs	r3, #0
 800289e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028a4:	2300      	movs	r3, #0
 80028a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028a8:	2300      	movs	r3, #0
 80028aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80028ac:	f107 030c 	add.w	r3, r7, #12
 80028b0:	2100      	movs	r1, #0
 80028b2:	4618      	mov	r0, r3
 80028b4:	f002 f80c 	bl	80048d0 <HAL_RCC_ClockConfig>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80028be:	f000 f9f7 	bl	8002cb0 <Error_Handler>
  }
}
 80028c2:	bf00      	nop
 80028c4:	3750      	adds	r7, #80	@ 0x50
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40007000 	.word	0x40007000

080028d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80028d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002948 <MX_I2C2_Init+0x74>)
 80028da:	4a1c      	ldr	r2, [pc, #112]	@ (800294c <MX_I2C2_Init+0x78>)
 80028dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80028de:	4b1a      	ldr	r3, [pc, #104]	@ (8002948 <MX_I2C2_Init+0x74>)
 80028e0:	4a1b      	ldr	r2, [pc, #108]	@ (8002950 <MX_I2C2_Init+0x7c>)
 80028e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80028e4:	4b18      	ldr	r3, [pc, #96]	@ (8002948 <MX_I2C2_Init+0x74>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80028ea:	4b17      	ldr	r3, [pc, #92]	@ (8002948 <MX_I2C2_Init+0x74>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028f0:	4b15      	ldr	r3, [pc, #84]	@ (8002948 <MX_I2C2_Init+0x74>)
 80028f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80028f6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028f8:	4b13      	ldr	r3, [pc, #76]	@ (8002948 <MX_I2C2_Init+0x74>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80028fe:	4b12      	ldr	r3, [pc, #72]	@ (8002948 <MX_I2C2_Init+0x74>)
 8002900:	2200      	movs	r2, #0
 8002902:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002904:	4b10      	ldr	r3, [pc, #64]	@ (8002948 <MX_I2C2_Init+0x74>)
 8002906:	2200      	movs	r2, #0
 8002908:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800290a:	4b0f      	ldr	r3, [pc, #60]	@ (8002948 <MX_I2C2_Init+0x74>)
 800290c:	2200      	movs	r2, #0
 800290e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002910:	480d      	ldr	r0, [pc, #52]	@ (8002948 <MX_I2C2_Init+0x74>)
 8002912:	f000 ff0f 	bl	8003734 <HAL_I2C_Init>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800291c:	f000 f9c8 	bl	8002cb0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002920:	2100      	movs	r1, #0
 8002922:	4809      	ldr	r0, [pc, #36]	@ (8002948 <MX_I2C2_Init+0x74>)
 8002924:	f001 fce1 	bl	80042ea <HAL_I2CEx_ConfigAnalogFilter>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800292e:	f000 f9bf 	bl	8002cb0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002932:	2100      	movs	r1, #0
 8002934:	4804      	ldr	r0, [pc, #16]	@ (8002948 <MX_I2C2_Init+0x74>)
 8002936:	f001 fd14 	bl	8004362 <HAL_I2CEx_ConfigDigitalFilter>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8002940:	f000 f9b6 	bl	8002cb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002944:	bf00      	nop
 8002946:	bd80      	pop	{r7, pc}
 8002948:	2000091c 	.word	0x2000091c
 800294c:	40005800 	.word	0x40005800
 8002950:	00061a80 	.word	0x00061a80

08002954 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002958:	4b1b      	ldr	r3, [pc, #108]	@ (80029c8 <MX_I2C3_Init+0x74>)
 800295a:	4a1c      	ldr	r2, [pc, #112]	@ (80029cc <MX_I2C3_Init+0x78>)
 800295c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800295e:	4b1a      	ldr	r3, [pc, #104]	@ (80029c8 <MX_I2C3_Init+0x74>)
 8002960:	4a1b      	ldr	r2, [pc, #108]	@ (80029d0 <MX_I2C3_Init+0x7c>)
 8002962:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002964:	4b18      	ldr	r3, [pc, #96]	@ (80029c8 <MX_I2C3_Init+0x74>)
 8002966:	2200      	movs	r2, #0
 8002968:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800296a:	4b17      	ldr	r3, [pc, #92]	@ (80029c8 <MX_I2C3_Init+0x74>)
 800296c:	2200      	movs	r2, #0
 800296e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002970:	4b15      	ldr	r3, [pc, #84]	@ (80029c8 <MX_I2C3_Init+0x74>)
 8002972:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002976:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002978:	4b13      	ldr	r3, [pc, #76]	@ (80029c8 <MX_I2C3_Init+0x74>)
 800297a:	2200      	movs	r2, #0
 800297c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800297e:	4b12      	ldr	r3, [pc, #72]	@ (80029c8 <MX_I2C3_Init+0x74>)
 8002980:	2200      	movs	r2, #0
 8002982:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002984:	4b10      	ldr	r3, [pc, #64]	@ (80029c8 <MX_I2C3_Init+0x74>)
 8002986:	2200      	movs	r2, #0
 8002988:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800298a:	4b0f      	ldr	r3, [pc, #60]	@ (80029c8 <MX_I2C3_Init+0x74>)
 800298c:	2200      	movs	r2, #0
 800298e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002990:	480d      	ldr	r0, [pc, #52]	@ (80029c8 <MX_I2C3_Init+0x74>)
 8002992:	f000 fecf 	bl	8003734 <HAL_I2C_Init>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800299c:	f000 f988 	bl	8002cb0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029a0:	2100      	movs	r1, #0
 80029a2:	4809      	ldr	r0, [pc, #36]	@ (80029c8 <MX_I2C3_Init+0x74>)
 80029a4:	f001 fca1 	bl	80042ea <HAL_I2CEx_ConfigAnalogFilter>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80029ae:	f000 f97f 	bl	8002cb0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80029b2:	2100      	movs	r1, #0
 80029b4:	4804      	ldr	r0, [pc, #16]	@ (80029c8 <MX_I2C3_Init+0x74>)
 80029b6:	f001 fcd4 	bl	8004362 <HAL_I2CEx_ConfigDigitalFilter>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80029c0:	f000 f976 	bl	8002cb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80029c4:	bf00      	nop
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20000970 	.word	0x20000970
 80029cc:	40005c00 	.word	0x40005c00
 80029d0:	00061a80 	.word	0x00061a80

080029d4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80029d8:	4b17      	ldr	r3, [pc, #92]	@ (8002a38 <MX_SPI3_Init+0x64>)
 80029da:	4a18      	ldr	r2, [pc, #96]	@ (8002a3c <MX_SPI3_Init+0x68>)
 80029dc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80029de:	4b16      	ldr	r3, [pc, #88]	@ (8002a38 <MX_SPI3_Init+0x64>)
 80029e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80029e4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80029e6:	4b14      	ldr	r3, [pc, #80]	@ (8002a38 <MX_SPI3_Init+0x64>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80029ec:	4b12      	ldr	r3, [pc, #72]	@ (8002a38 <MX_SPI3_Init+0x64>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029f2:	4b11      	ldr	r3, [pc, #68]	@ (8002a38 <MX_SPI3_Init+0x64>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002a38 <MX_SPI3_Init+0x64>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80029fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002a38 <MX_SPI3_Init+0x64>)
 8002a00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a04:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002a06:	4b0c      	ldr	r3, [pc, #48]	@ (8002a38 <MX_SPI3_Init+0x64>)
 8002a08:	2218      	movs	r2, #24
 8002a0a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a38 <MX_SPI3_Init+0x64>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a12:	4b09      	ldr	r3, [pc, #36]	@ (8002a38 <MX_SPI3_Init+0x64>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a18:	4b07      	ldr	r3, [pc, #28]	@ (8002a38 <MX_SPI3_Init+0x64>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002a1e:	4b06      	ldr	r3, [pc, #24]	@ (8002a38 <MX_SPI3_Init+0x64>)
 8002a20:	220a      	movs	r2, #10
 8002a22:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002a24:	4804      	ldr	r0, [pc, #16]	@ (8002a38 <MX_SPI3_Init+0x64>)
 8002a26:	f002 f91f 	bl	8004c68 <HAL_SPI_Init>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002a30:	f000 f93e 	bl	8002cb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002a34:	bf00      	nop
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	200009c4 	.word	0x200009c4
 8002a3c:	40003c00 	.word	0x40003c00

08002a40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08e      	sub	sp, #56	@ 0x38
 8002a44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	605a      	str	r2, [r3, #4]
 8002a50:	609a      	str	r2, [r3, #8]
 8002a52:	60da      	str	r2, [r3, #12]
 8002a54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	623b      	str	r3, [r7, #32]
 8002a5a:	4b74      	ldr	r3, [pc, #464]	@ (8002c2c <MX_GPIO_Init+0x1ec>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5e:	4a73      	ldr	r2, [pc, #460]	@ (8002c2c <MX_GPIO_Init+0x1ec>)
 8002a60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a66:	4b71      	ldr	r3, [pc, #452]	@ (8002c2c <MX_GPIO_Init+0x1ec>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a6e:	623b      	str	r3, [r7, #32]
 8002a70:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	61fb      	str	r3, [r7, #28]
 8002a76:	4b6d      	ldr	r3, [pc, #436]	@ (8002c2c <MX_GPIO_Init+0x1ec>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7a:	4a6c      	ldr	r2, [pc, #432]	@ (8002c2c <MX_GPIO_Init+0x1ec>)
 8002a7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a82:	4b6a      	ldr	r3, [pc, #424]	@ (8002c2c <MX_GPIO_Init+0x1ec>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a8a:	61fb      	str	r3, [r7, #28]
 8002a8c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61bb      	str	r3, [r7, #24]
 8002a92:	4b66      	ldr	r3, [pc, #408]	@ (8002c2c <MX_GPIO_Init+0x1ec>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a96:	4a65      	ldr	r2, [pc, #404]	@ (8002c2c <MX_GPIO_Init+0x1ec>)
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a9e:	4b63      	ldr	r3, [pc, #396]	@ (8002c2c <MX_GPIO_Init+0x1ec>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	61bb      	str	r3, [r7, #24]
 8002aa8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	4b5f      	ldr	r3, [pc, #380]	@ (8002c2c <MX_GPIO_Init+0x1ec>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab2:	4a5e      	ldr	r2, [pc, #376]	@ (8002c2c <MX_GPIO_Init+0x1ec>)
 8002ab4:	f043 0304 	orr.w	r3, r3, #4
 8002ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aba:	4b5c      	ldr	r3, [pc, #368]	@ (8002c2c <MX_GPIO_Init+0x1ec>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	4b58      	ldr	r3, [pc, #352]	@ (8002c2c <MX_GPIO_Init+0x1ec>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ace:	4a57      	ldr	r2, [pc, #348]	@ (8002c2c <MX_GPIO_Init+0x1ec>)
 8002ad0:	f043 0308 	orr.w	r3, r3, #8
 8002ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ad6:	4b55      	ldr	r3, [pc, #340]	@ (8002c2c <MX_GPIO_Init+0x1ec>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	613b      	str	r3, [r7, #16]
 8002ae0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	4b51      	ldr	r3, [pc, #324]	@ (8002c2c <MX_GPIO_Init+0x1ec>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aea:	4a50      	ldr	r2, [pc, #320]	@ (8002c2c <MX_GPIO_Init+0x1ec>)
 8002aec:	f043 0302 	orr.w	r3, r3, #2
 8002af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002af2:	4b4e      	ldr	r3, [pc, #312]	@ (8002c2c <MX_GPIO_Init+0x1ec>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	60bb      	str	r3, [r7, #8]
 8002b02:	4b4a      	ldr	r3, [pc, #296]	@ (8002c2c <MX_GPIO_Init+0x1ec>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b06:	4a49      	ldr	r2, [pc, #292]	@ (8002c2c <MX_GPIO_Init+0x1ec>)
 8002b08:	f043 0310 	orr.w	r3, r3, #16
 8002b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b0e:	4b47      	ldr	r3, [pc, #284]	@ (8002c2c <MX_GPIO_Init+0x1ec>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b12:	f003 0310 	and.w	r3, r3, #16
 8002b16:	60bb      	str	r3, [r7, #8]
 8002b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	607b      	str	r3, [r7, #4]
 8002b1e:	4b43      	ldr	r3, [pc, #268]	@ (8002c2c <MX_GPIO_Init+0x1ec>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b22:	4a42      	ldr	r2, [pc, #264]	@ (8002c2c <MX_GPIO_Init+0x1ec>)
 8002b24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b2a:	4b40      	ldr	r3, [pc, #256]	@ (8002c2c <MX_GPIO_Init+0x1ec>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b32:	607b      	str	r3, [r7, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, DISPLAY_IO_1_Pin|DISPLAY_IO_2_Pin|BACKLIGHT_1_Pin|BACKLIGHT_2_Pin
 8002b36:	2200      	movs	r2, #0
 8002b38:	f24e 013c 	movw	r1, #57404	@ 0xe03c
 8002b3c:	483c      	ldr	r0, [pc, #240]	@ (8002c30 <MX_GPIO_Init+0x1f0>)
 8002b3e:	f000 fddf 	bl	8003700 <HAL_GPIO_WritePin>
                          |LED_09_Pin|LED_04_Pin|LED_08_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_01_Pin|LED_02_Pin, GPIO_PIN_RESET);
 8002b42:	2200      	movs	r2, #0
 8002b44:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8002b48:	483a      	ldr	r0, [pc, #232]	@ (8002c34 <MX_GPIO_Init+0x1f4>)
 8002b4a:	f000 fdd9 	bl	8003700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DISPLAY_CS_Pin|SD_CS_Pin, GPIO_PIN_RESET);
 8002b4e:	2200      	movs	r2, #0
 8002b50:	210c      	movs	r1, #12
 8002b52:	4839      	ldr	r0, [pc, #228]	@ (8002c38 <MX_GPIO_Init+0x1f8>)
 8002b54:	f000 fdd4 	bl	8003700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_03_Pin|LED_07_Pin, GPIO_PIN_RESET);
 8002b58:	2200      	movs	r2, #0
 8002b5a:	2118      	movs	r1, #24
 8002b5c:	4837      	ldr	r0, [pc, #220]	@ (8002c3c <MX_GPIO_Init+0x1fc>)
 8002b5e:	f000 fdcf 	bl	8003700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_06_Pin|LED_05_Pin, GPIO_PIN_RESET);
 8002b62:	2200      	movs	r2, #0
 8002b64:	2103      	movs	r1, #3
 8002b66:	4836      	ldr	r0, [pc, #216]	@ (8002c40 <MX_GPIO_Init+0x200>)
 8002b68:	f000 fdca 	bl	8003700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED_DC_Y_Pin|LED_DC_G_Pin|LED_PC_Y_Pin|LED_PC_G_Pin, GPIO_PIN_RESET);
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	21f0      	movs	r1, #240	@ 0xf0
 8002b70:	4834      	ldr	r0, [pc, #208]	@ (8002c44 <MX_GPIO_Init+0x204>)
 8002b72:	f000 fdc5 	bl	8003700 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DISPLAY_IO_1_Pin DISPLAY_IO_2_Pin BACKLIGHT_1_Pin BACKLIGHT_2_Pin
                           LED_09_Pin LED_04_Pin LED_08_Pin */
  GPIO_InitStruct.Pin = DISPLAY_IO_1_Pin|DISPLAY_IO_2_Pin|BACKLIGHT_1_Pin|BACKLIGHT_2_Pin
 8002b76:	f24e 033c 	movw	r3, #57404	@ 0xe03c
 8002b7a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LED_09_Pin|LED_04_Pin|LED_08_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b84:	2300      	movs	r3, #0
 8002b86:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4828      	ldr	r0, [pc, #160]	@ (8002c30 <MX_GPIO_Init+0x1f0>)
 8002b90:	f000 fc0a 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_01_Pin LED_02_Pin */
  GPIO_InitStruct.Pin = LED_01_Pin|LED_02_Pin;
 8002b94:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002b98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002ba6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002baa:	4619      	mov	r1, r3
 8002bac:	4821      	ldr	r0, [pc, #132]	@ (8002c34 <MX_GPIO_Init+0x1f4>)
 8002bae:	f000 fbfb 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPLAY_CS_Pin SD_CS_Pin */
  GPIO_InitStruct.Pin = DISPLAY_CS_Pin|SD_CS_Pin;
 8002bb2:	230c      	movs	r3, #12
 8002bb4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	481b      	ldr	r0, [pc, #108]	@ (8002c38 <MX_GPIO_Init+0x1f8>)
 8002bca:	f000 fbed 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_03_Pin LED_07_Pin */
  GPIO_InitStruct.Pin = LED_03_Pin|LED_07_Pin;
 8002bce:	2318      	movs	r3, #24
 8002bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002be2:	4619      	mov	r1, r3
 8002be4:	4815      	ldr	r0, [pc, #84]	@ (8002c3c <MX_GPIO_Init+0x1fc>)
 8002be6:	f000 fbdf 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_06_Pin LED_05_Pin */
  GPIO_InitStruct.Pin = LED_06_Pin|LED_05_Pin;
 8002bea:	2303      	movs	r3, #3
 8002bec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bfe:	4619      	mov	r1, r3
 8002c00:	480f      	ldr	r0, [pc, #60]	@ (8002c40 <MX_GPIO_Init+0x200>)
 8002c02:	f000 fbd1 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_DC_Y_Pin LED_DC_G_Pin LED_PC_Y_Pin LED_PC_G_Pin */
  GPIO_InitStruct.Pin = LED_DC_Y_Pin|LED_DC_G_Pin|LED_PC_Y_Pin|LED_PC_G_Pin;
 8002c06:	23f0      	movs	r3, #240	@ 0xf0
 8002c08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c12:	2300      	movs	r3, #0
 8002c14:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002c16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4809      	ldr	r0, [pc, #36]	@ (8002c44 <MX_GPIO_Init+0x204>)
 8002c1e:	f000 fbc3 	bl	80033a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c22:	bf00      	nop
 8002c24:	3738      	adds	r7, #56	@ 0x38
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	40021800 	.word	0x40021800
 8002c34:	40021c00 	.word	0x40021c00
 8002c38:	40020c00 	.word	0x40020c00
 8002c3c:	40020400 	.word	0x40020400
 8002c40:	40021000 	.word	0x40021000
 8002c44:	40022000 	.word	0x40022000

08002c48 <Scan_I2C_Bus>:

/* USER CODE BEGIN 4 */

void Scan_I2C_Bus(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0

      /* Declare the address variable */

    /* Iterate over the possible 7-bit I²C addresses (1 to 127) */
    for (address = 1U; address < 128U; address++)
 8002c4c:	4b15      	ldr	r3, [pc, #84]	@ (8002ca4 <Scan_I2C_Bus+0x5c>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	701a      	strb	r2, [r3, #0]
 8002c52:	e01f      	b.n	8002c94 <Scan_I2C_Bus+0x4c>
    {
        /* Check if a device is ready at this address
         * The address is left-shifted by 1 as HAL_I2C_IsDeviceReady expects the 7-bit address in the upper bits.
         */
        result = HAL_I2C_IsDeviceReady(&hi2c3, (address << 1), 1U, 10U);
 8002c54:	4b13      	ldr	r3, [pc, #76]	@ (8002ca4 <Scan_I2C_Bus+0x5c>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	b299      	uxth	r1, r3
 8002c5c:	230a      	movs	r3, #10
 8002c5e:	2201      	movs	r2, #1
 8002c60:	4811      	ldr	r0, [pc, #68]	@ (8002ca8 <Scan_I2C_Bus+0x60>)
 8002c62:	f000 ffa5 	bl	8003bb0 <HAL_I2C_IsDeviceReady>
 8002c66:	4603      	mov	r3, r0
 8002c68:	461a      	mov	r2, r3
 8002c6a:	4b10      	ldr	r3, [pc, #64]	@ (8002cac <Scan_I2C_Bus+0x64>)
 8002c6c:	701a      	strb	r2, [r3, #0]

        if (result == HAL_OK)
 8002c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8002cac <Scan_I2C_Bus+0x64>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d108      	bne.n	8002c88 <Scan_I2C_Bus+0x40>
        {
            /* Display the detected address (your Display_Address function should handle this)
             * For example, this could light up LEDs or update an LCD.
             */
            Display_Address(address);
 8002c76:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca4 <Scan_I2C_Bus+0x5c>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff fbf8 	bl	8002470 <Display_Address>
            HAL_Delay(1000U);  /* Display the address for 1 second */
 8002c80:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c84:	f000 fa86 	bl	8003194 <HAL_Delay>
    for (address = 1U; address < 128U; address++)
 8002c88:	4b06      	ldr	r3, [pc, #24]	@ (8002ca4 <Scan_I2C_Bus+0x5c>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	4b04      	ldr	r3, [pc, #16]	@ (8002ca4 <Scan_I2C_Bus+0x5c>)
 8002c92:	701a      	strb	r2, [r3, #0]
 8002c94:	4b03      	ldr	r3, [pc, #12]	@ (8002ca4 <Scan_I2C_Bus+0x5c>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	b25b      	sxtb	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	dada      	bge.n	8002c54 <Scan_I2C_Bus+0xc>
        }
    }
}
 8002c9e:	bf00      	nop
 8002ca0:	bf00      	nop
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20000918 	.word	0x20000918
 8002ca8:	20000970 	.word	0x20000970
 8002cac:	20000919 	.word	0x20000919

08002cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cb4:	b672      	cpsid	i
}
 8002cb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cb8:	bf00      	nop
 8002cba:	e7fd      	b.n	8002cb8 <Error_Handler+0x8>

08002cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	607b      	str	r3, [r7, #4]
 8002cc6:	4b10      	ldr	r3, [pc, #64]	@ (8002d08 <HAL_MspInit+0x4c>)
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cca:	4a0f      	ldr	r2, [pc, #60]	@ (8002d08 <HAL_MspInit+0x4c>)
 8002ccc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8002d08 <HAL_MspInit+0x4c>)
 8002cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cda:	607b      	str	r3, [r7, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	603b      	str	r3, [r7, #0]
 8002ce2:	4b09      	ldr	r3, [pc, #36]	@ (8002d08 <HAL_MspInit+0x4c>)
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce6:	4a08      	ldr	r2, [pc, #32]	@ (8002d08 <HAL_MspInit+0x4c>)
 8002ce8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cec:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cee:	4b06      	ldr	r3, [pc, #24]	@ (8002d08 <HAL_MspInit+0x4c>)
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cf6:	603b      	str	r3, [r7, #0]
 8002cf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	40023800 	.word	0x40023800

08002d0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b08c      	sub	sp, #48	@ 0x30
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d14:	f107 031c 	add.w	r3, r7, #28
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	605a      	str	r2, [r3, #4]
 8002d1e:	609a      	str	r2, [r3, #8]
 8002d20:	60da      	str	r2, [r3, #12]
 8002d22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a32      	ldr	r2, [pc, #200]	@ (8002df4 <HAL_I2C_MspInit+0xe8>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d12c      	bne.n	8002d88 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61bb      	str	r3, [r7, #24]
 8002d32:	4b31      	ldr	r3, [pc, #196]	@ (8002df8 <HAL_I2C_MspInit+0xec>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d36:	4a30      	ldr	r2, [pc, #192]	@ (8002df8 <HAL_I2C_MspInit+0xec>)
 8002d38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d3e:	4b2e      	ldr	r3, [pc, #184]	@ (8002df8 <HAL_I2C_MspInit+0xec>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d46:	61bb      	str	r3, [r7, #24]
 8002d48:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002d4a:	2330      	movs	r3, #48	@ 0x30
 8002d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d4e:	2312      	movs	r3, #18
 8002d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d56:	2303      	movs	r3, #3
 8002d58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002d5a:	2304      	movs	r3, #4
 8002d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002d5e:	f107 031c 	add.w	r3, r7, #28
 8002d62:	4619      	mov	r1, r3
 8002d64:	4825      	ldr	r0, [pc, #148]	@ (8002dfc <HAL_I2C_MspInit+0xf0>)
 8002d66:	f000 fb1f 	bl	80033a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	4b22      	ldr	r3, [pc, #136]	@ (8002df8 <HAL_I2C_MspInit+0xec>)
 8002d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d72:	4a21      	ldr	r2, [pc, #132]	@ (8002df8 <HAL_I2C_MspInit+0xec>)
 8002d74:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d78:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8002df8 <HAL_I2C_MspInit+0xec>)
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002d86:	e031      	b.n	8002dec <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C3)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a1c      	ldr	r2, [pc, #112]	@ (8002e00 <HAL_I2C_MspInit+0xf4>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d12c      	bne.n	8002dec <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	613b      	str	r3, [r7, #16]
 8002d96:	4b18      	ldr	r3, [pc, #96]	@ (8002df8 <HAL_I2C_MspInit+0xec>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9a:	4a17      	ldr	r2, [pc, #92]	@ (8002df8 <HAL_I2C_MspInit+0xec>)
 8002d9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002da2:	4b15      	ldr	r3, [pc, #84]	@ (8002df8 <HAL_I2C_MspInit+0xec>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002daa:	613b      	str	r3, [r7, #16]
 8002dac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002dae:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002db4:	2312      	movs	r3, #18
 8002db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002dc0:	2304      	movs	r3, #4
 8002dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002dc4:	f107 031c 	add.w	r3, r7, #28
 8002dc8:	4619      	mov	r1, r3
 8002dca:	480c      	ldr	r0, [pc, #48]	@ (8002dfc <HAL_I2C_MspInit+0xf0>)
 8002dcc:	f000 faec 	bl	80033a8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	4b08      	ldr	r3, [pc, #32]	@ (8002df8 <HAL_I2C_MspInit+0xec>)
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd8:	4a07      	ldr	r2, [pc, #28]	@ (8002df8 <HAL_I2C_MspInit+0xec>)
 8002dda:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002dde:	6413      	str	r3, [r2, #64]	@ 0x40
 8002de0:	4b05      	ldr	r3, [pc, #20]	@ (8002df8 <HAL_I2C_MspInit+0xec>)
 8002de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	68fb      	ldr	r3, [r7, #12]
}
 8002dec:	bf00      	nop
 8002dee:	3730      	adds	r7, #48	@ 0x30
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40005800 	.word	0x40005800
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	40021c00 	.word	0x40021c00
 8002e00:	40005c00 	.word	0x40005c00

08002e04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08a      	sub	sp, #40	@ 0x28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e0c:	f107 0314 	add.w	r3, r7, #20
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	605a      	str	r2, [r3, #4]
 8002e16:	609a      	str	r2, [r3, #8]
 8002e18:	60da      	str	r2, [r3, #12]
 8002e1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a19      	ldr	r2, [pc, #100]	@ (8002e88 <HAL_SPI_MspInit+0x84>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d12c      	bne.n	8002e80 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	4b18      	ldr	r3, [pc, #96]	@ (8002e8c <HAL_SPI_MspInit+0x88>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2e:	4a17      	ldr	r2, [pc, #92]	@ (8002e8c <HAL_SPI_MspInit+0x88>)
 8002e30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e34:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e36:	4b15      	ldr	r3, [pc, #84]	@ (8002e8c <HAL_SPI_MspInit+0x88>)
 8002e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e42:	2300      	movs	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	4b11      	ldr	r3, [pc, #68]	@ (8002e8c <HAL_SPI_MspInit+0x88>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4a:	4a10      	ldr	r2, [pc, #64]	@ (8002e8c <HAL_SPI_MspInit+0x88>)
 8002e4c:	f043 0304 	orr.w	r3, r3, #4
 8002e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e52:	4b0e      	ldr	r3, [pc, #56]	@ (8002e8c <HAL_SPI_MspInit+0x88>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e56:	f003 0304 	and.w	r3, r3, #4
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002e5e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e64:	2302      	movs	r3, #2
 8002e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002e70:	2306      	movs	r3, #6
 8002e72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e74:	f107 0314 	add.w	r3, r7, #20
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4805      	ldr	r0, [pc, #20]	@ (8002e90 <HAL_SPI_MspInit+0x8c>)
 8002e7c:	f000 fa94 	bl	80033a8 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8002e80:	bf00      	nop
 8002e82:	3728      	adds	r7, #40	@ 0x28
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40003c00 	.word	0x40003c00
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	40020800 	.word	0x40020800

08002e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e98:	bf00      	nop
 8002e9a:	e7fd      	b.n	8002e98 <NMI_Handler+0x4>

08002e9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ea0:	bf00      	nop
 8002ea2:	e7fd      	b.n	8002ea0 <HardFault_Handler+0x4>

08002ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ea8:	bf00      	nop
 8002eaa:	e7fd      	b.n	8002ea8 <MemManage_Handler+0x4>

08002eac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002eb0:	bf00      	nop
 8002eb2:	e7fd      	b.n	8002eb0 <BusFault_Handler+0x4>

08002eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002eb8:	bf00      	nop
 8002eba:	e7fd      	b.n	8002eb8 <UsageFault_Handler+0x4>

08002ebc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ec0:	bf00      	nop
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ece:	bf00      	nop
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002edc:	bf00      	nop
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002eea:	f000 f933 	bl	8003154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002eee:	bf00      	nop
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b086      	sub	sp, #24
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	60f8      	str	r0, [r7, #12]
 8002efa:	60b9      	str	r1, [r7, #8]
 8002efc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]
 8002f02:	e00a      	b.n	8002f1a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f04:	f3af 8000 	nop.w
 8002f08:	4601      	mov	r1, r0
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	1c5a      	adds	r2, r3, #1
 8002f0e:	60ba      	str	r2, [r7, #8]
 8002f10:	b2ca      	uxtb	r2, r1
 8002f12:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	3301      	adds	r3, #1
 8002f18:	617b      	str	r3, [r7, #20]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	dbf0      	blt.n	8002f04 <_read+0x12>
  }

  return len;
 8002f22:	687b      	ldr	r3, [r7, #4]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3718      	adds	r7, #24
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f38:	2300      	movs	r3, #0
 8002f3a:	617b      	str	r3, [r7, #20]
 8002f3c:	e009      	b.n	8002f52 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	1c5a      	adds	r2, r3, #1
 8002f42:	60ba      	str	r2, [r7, #8]
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	617b      	str	r3, [r7, #20]
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	dbf1      	blt.n	8002f3e <_write+0x12>
  }
  return len;
 8002f5a:	687b      	ldr	r3, [r7, #4]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <_close>:

int _close(int file)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f8c:	605a      	str	r2, [r3, #4]
  return 0;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <_isatty>:

int _isatty(int file)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002fa4:	2301      	movs	r3, #1
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b085      	sub	sp, #20
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	60f8      	str	r0, [r7, #12]
 8002fba:	60b9      	str	r1, [r7, #8]
 8002fbc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fd4:	4a14      	ldr	r2, [pc, #80]	@ (8003028 <_sbrk+0x5c>)
 8002fd6:	4b15      	ldr	r3, [pc, #84]	@ (800302c <_sbrk+0x60>)
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fe0:	4b13      	ldr	r3, [pc, #76]	@ (8003030 <_sbrk+0x64>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d102      	bne.n	8002fee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fe8:	4b11      	ldr	r3, [pc, #68]	@ (8003030 <_sbrk+0x64>)
 8002fea:	4a12      	ldr	r2, [pc, #72]	@ (8003034 <_sbrk+0x68>)
 8002fec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fee:	4b10      	ldr	r3, [pc, #64]	@ (8003030 <_sbrk+0x64>)
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d207      	bcs.n	800300c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ffc:	f002 fa64 	bl	80054c8 <__errno>
 8003000:	4603      	mov	r3, r0
 8003002:	220c      	movs	r2, #12
 8003004:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003006:	f04f 33ff 	mov.w	r3, #4294967295
 800300a:	e009      	b.n	8003020 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800300c:	4b08      	ldr	r3, [pc, #32]	@ (8003030 <_sbrk+0x64>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003012:	4b07      	ldr	r3, [pc, #28]	@ (8003030 <_sbrk+0x64>)
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4413      	add	r3, r2
 800301a:	4a05      	ldr	r2, [pc, #20]	@ (8003030 <_sbrk+0x64>)
 800301c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800301e:	68fb      	ldr	r3, [r7, #12]
}
 8003020:	4618      	mov	r0, r3
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	20030000 	.word	0x20030000
 800302c:	00000400 	.word	0x00000400
 8003030:	20000a1c 	.word	0x20000a1c
 8003034:	20000b70 	.word	0x20000b70

08003038 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800303c:	4b06      	ldr	r3, [pc, #24]	@ (8003058 <SystemInit+0x20>)
 800303e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003042:	4a05      	ldr	r2, [pc, #20]	@ (8003058 <SystemInit+0x20>)
 8003044:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003048:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800304c:	bf00      	nop
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	e000ed00 	.word	0xe000ed00

0800305c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800305c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003094 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003060:	f7ff ffea 	bl	8003038 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003064:	480c      	ldr	r0, [pc, #48]	@ (8003098 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003066:	490d      	ldr	r1, [pc, #52]	@ (800309c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003068:	4a0d      	ldr	r2, [pc, #52]	@ (80030a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800306a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800306c:	e002      	b.n	8003074 <LoopCopyDataInit>

0800306e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800306e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003072:	3304      	adds	r3, #4

08003074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003078:	d3f9      	bcc.n	800306e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800307a:	4a0a      	ldr	r2, [pc, #40]	@ (80030a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800307c:	4c0a      	ldr	r4, [pc, #40]	@ (80030a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800307e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003080:	e001      	b.n	8003086 <LoopFillZerobss>

08003082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003084:	3204      	adds	r2, #4

08003086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003088:	d3fb      	bcc.n	8003082 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800308a:	f002 fa23 	bl	80054d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800308e:	f7ff fb13 	bl	80026b8 <main>
  bx  lr    
 8003092:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003094:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003098:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800309c:	20000468 	.word	0x20000468
  ldr r2, =_sidata
 80030a0:	08007244 	.word	0x08007244
  ldr r2, =_sbss
 80030a4:	20000468 	.word	0x20000468
  ldr r4, =_ebss
 80030a8:	20000b70 	.word	0x20000b70

080030ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030ac:	e7fe      	b.n	80030ac <ADC_IRQHandler>
	...

080030b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030b4:	4b0e      	ldr	r3, [pc, #56]	@ (80030f0 <HAL_Init+0x40>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a0d      	ldr	r2, [pc, #52]	@ (80030f0 <HAL_Init+0x40>)
 80030ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030c0:	4b0b      	ldr	r3, [pc, #44]	@ (80030f0 <HAL_Init+0x40>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a0a      	ldr	r2, [pc, #40]	@ (80030f0 <HAL_Init+0x40>)
 80030c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030cc:	4b08      	ldr	r3, [pc, #32]	@ (80030f0 <HAL_Init+0x40>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a07      	ldr	r2, [pc, #28]	@ (80030f0 <HAL_Init+0x40>)
 80030d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030d8:	2003      	movs	r0, #3
 80030da:	f000 f931 	bl	8003340 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030de:	200f      	movs	r0, #15
 80030e0:	f000 f808 	bl	80030f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030e4:	f7ff fdea 	bl	8002cbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40023c00 	.word	0x40023c00

080030f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030fc:	4b12      	ldr	r3, [pc, #72]	@ (8003148 <HAL_InitTick+0x54>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	4b12      	ldr	r3, [pc, #72]	@ (800314c <HAL_InitTick+0x58>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	4619      	mov	r1, r3
 8003106:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800310a:	fbb3 f3f1 	udiv	r3, r3, r1
 800310e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003112:	4618      	mov	r0, r3
 8003114:	f000 f93b 	bl	800338e <HAL_SYSTICK_Config>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e00e      	b.n	8003140 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b0f      	cmp	r3, #15
 8003126:	d80a      	bhi.n	800313e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003128:	2200      	movs	r2, #0
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	f04f 30ff 	mov.w	r0, #4294967295
 8003130:	f000 f911 	bl	8003356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003134:	4a06      	ldr	r2, [pc, #24]	@ (8003150 <HAL_InitTick+0x5c>)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800313a:	2300      	movs	r3, #0
 800313c:	e000      	b.n	8003140 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
}
 8003140:	4618      	mov	r0, r3
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	20000400 	.word	0x20000400
 800314c:	20000408 	.word	0x20000408
 8003150:	20000404 	.word	0x20000404

08003154 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003158:	4b06      	ldr	r3, [pc, #24]	@ (8003174 <HAL_IncTick+0x20>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	461a      	mov	r2, r3
 800315e:	4b06      	ldr	r3, [pc, #24]	@ (8003178 <HAL_IncTick+0x24>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4413      	add	r3, r2
 8003164:	4a04      	ldr	r2, [pc, #16]	@ (8003178 <HAL_IncTick+0x24>)
 8003166:	6013      	str	r3, [r2, #0]
}
 8003168:	bf00      	nop
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	20000408 	.word	0x20000408
 8003178:	20000a20 	.word	0x20000a20

0800317c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  return uwTick;
 8003180:	4b03      	ldr	r3, [pc, #12]	@ (8003190 <HAL_GetTick+0x14>)
 8003182:	681b      	ldr	r3, [r3, #0]
}
 8003184:	4618      	mov	r0, r3
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	20000a20 	.word	0x20000a20

08003194 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800319c:	f7ff ffee 	bl	800317c <HAL_GetTick>
 80031a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ac:	d005      	beq.n	80031ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031ae:	4b0a      	ldr	r3, [pc, #40]	@ (80031d8 <HAL_Delay+0x44>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	461a      	mov	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4413      	add	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031ba:	bf00      	nop
 80031bc:	f7ff ffde 	bl	800317c <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d8f7      	bhi.n	80031bc <HAL_Delay+0x28>
  {
  }
}
 80031cc:	bf00      	nop
 80031ce:	bf00      	nop
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	20000408 	.word	0x20000408

080031dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003220 <__NVIC_SetPriorityGrouping+0x44>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031f8:	4013      	ands	r3, r2
 80031fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003204:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003208:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800320c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800320e:	4a04      	ldr	r2, [pc, #16]	@ (8003220 <__NVIC_SetPriorityGrouping+0x44>)
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	60d3      	str	r3, [r2, #12]
}
 8003214:	bf00      	nop
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	e000ed00 	.word	0xe000ed00

08003224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003228:	4b04      	ldr	r3, [pc, #16]	@ (800323c <__NVIC_GetPriorityGrouping+0x18>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	0a1b      	lsrs	r3, r3, #8
 800322e:	f003 0307 	and.w	r3, r3, #7
}
 8003232:	4618      	mov	r0, r3
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	e000ed00 	.word	0xe000ed00

08003240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	6039      	str	r1, [r7, #0]
 800324a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800324c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003250:	2b00      	cmp	r3, #0
 8003252:	db0a      	blt.n	800326a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	b2da      	uxtb	r2, r3
 8003258:	490c      	ldr	r1, [pc, #48]	@ (800328c <__NVIC_SetPriority+0x4c>)
 800325a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325e:	0112      	lsls	r2, r2, #4
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	440b      	add	r3, r1
 8003264:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003268:	e00a      	b.n	8003280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	b2da      	uxtb	r2, r3
 800326e:	4908      	ldr	r1, [pc, #32]	@ (8003290 <__NVIC_SetPriority+0x50>)
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	3b04      	subs	r3, #4
 8003278:	0112      	lsls	r2, r2, #4
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	440b      	add	r3, r1
 800327e:	761a      	strb	r2, [r3, #24]
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	e000e100 	.word	0xe000e100
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003294:	b480      	push	{r7}
 8003296:	b089      	sub	sp, #36	@ 0x24
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	f1c3 0307 	rsb	r3, r3, #7
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	bf28      	it	cs
 80032b2:	2304      	movcs	r3, #4
 80032b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	3304      	adds	r3, #4
 80032ba:	2b06      	cmp	r3, #6
 80032bc:	d902      	bls.n	80032c4 <NVIC_EncodePriority+0x30>
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	3b03      	subs	r3, #3
 80032c2:	e000      	b.n	80032c6 <NVIC_EncodePriority+0x32>
 80032c4:	2300      	movs	r3, #0
 80032c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c8:	f04f 32ff 	mov.w	r2, #4294967295
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	43da      	mvns	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	401a      	ands	r2, r3
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032dc:	f04f 31ff 	mov.w	r1, #4294967295
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	fa01 f303 	lsl.w	r3, r1, r3
 80032e6:	43d9      	mvns	r1, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032ec:	4313      	orrs	r3, r2
         );
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3724      	adds	r7, #36	@ 0x24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
	...

080032fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3b01      	subs	r3, #1
 8003308:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800330c:	d301      	bcc.n	8003312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800330e:	2301      	movs	r3, #1
 8003310:	e00f      	b.n	8003332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003312:	4a0a      	ldr	r2, [pc, #40]	@ (800333c <SysTick_Config+0x40>)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3b01      	subs	r3, #1
 8003318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800331a:	210f      	movs	r1, #15
 800331c:	f04f 30ff 	mov.w	r0, #4294967295
 8003320:	f7ff ff8e 	bl	8003240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003324:	4b05      	ldr	r3, [pc, #20]	@ (800333c <SysTick_Config+0x40>)
 8003326:	2200      	movs	r2, #0
 8003328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800332a:	4b04      	ldr	r3, [pc, #16]	@ (800333c <SysTick_Config+0x40>)
 800332c:	2207      	movs	r2, #7
 800332e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	e000e010 	.word	0xe000e010

08003340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7ff ff47 	bl	80031dc <__NVIC_SetPriorityGrouping>
}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003356:	b580      	push	{r7, lr}
 8003358:	b086      	sub	sp, #24
 800335a:	af00      	add	r7, sp, #0
 800335c:	4603      	mov	r3, r0
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	607a      	str	r2, [r7, #4]
 8003362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003368:	f7ff ff5c 	bl	8003224 <__NVIC_GetPriorityGrouping>
 800336c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	68b9      	ldr	r1, [r7, #8]
 8003372:	6978      	ldr	r0, [r7, #20]
 8003374:	f7ff ff8e 	bl	8003294 <NVIC_EncodePriority>
 8003378:	4602      	mov	r2, r0
 800337a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800337e:	4611      	mov	r1, r2
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff ff5d 	bl	8003240 <__NVIC_SetPriority>
}
 8003386:	bf00      	nop
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b082      	sub	sp, #8
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7ff ffb0 	bl	80032fc <SysTick_Config>
 800339c:	4603      	mov	r3, r0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
	...

080033a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b089      	sub	sp, #36	@ 0x24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033ba:	2300      	movs	r3, #0
 80033bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033be:	2300      	movs	r3, #0
 80033c0:	61fb      	str	r3, [r7, #28]
 80033c2:	e177      	b.n	80036b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033c4:	2201      	movs	r2, #1
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	4013      	ands	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	429a      	cmp	r2, r3
 80033de:	f040 8166 	bne.w	80036ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d005      	beq.n	80033fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d130      	bne.n	800345c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	2203      	movs	r2, #3
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	43db      	mvns	r3, r3
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	4013      	ands	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4313      	orrs	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003430:	2201      	movs	r2, #1
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	43db      	mvns	r3, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4013      	ands	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	091b      	lsrs	r3, r3, #4
 8003446:	f003 0201 	and.w	r2, r3, #1
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4313      	orrs	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 0303 	and.w	r3, r3, #3
 8003464:	2b03      	cmp	r3, #3
 8003466:	d017      	beq.n	8003498 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	2203      	movs	r2, #3
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	43db      	mvns	r3, r3
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	4013      	ands	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4313      	orrs	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f003 0303 	and.w	r3, r3, #3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d123      	bne.n	80034ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	08da      	lsrs	r2, r3, #3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3208      	adds	r2, #8
 80034ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	220f      	movs	r2, #15
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	43db      	mvns	r3, r3
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4013      	ands	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	691a      	ldr	r2, [r3, #16]
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	4313      	orrs	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	08da      	lsrs	r2, r3, #3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3208      	adds	r2, #8
 80034e6:	69b9      	ldr	r1, [r7, #24]
 80034e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	2203      	movs	r2, #3
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	43db      	mvns	r3, r3
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	4013      	ands	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 0203 	and.w	r2, r3, #3
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	4313      	orrs	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 80c0 	beq.w	80036ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800352e:	2300      	movs	r3, #0
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	4b66      	ldr	r3, [pc, #408]	@ (80036cc <HAL_GPIO_Init+0x324>)
 8003534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003536:	4a65      	ldr	r2, [pc, #404]	@ (80036cc <HAL_GPIO_Init+0x324>)
 8003538:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800353c:	6453      	str	r3, [r2, #68]	@ 0x44
 800353e:	4b63      	ldr	r3, [pc, #396]	@ (80036cc <HAL_GPIO_Init+0x324>)
 8003540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003542:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800354a:	4a61      	ldr	r2, [pc, #388]	@ (80036d0 <HAL_GPIO_Init+0x328>)
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	089b      	lsrs	r3, r3, #2
 8003550:	3302      	adds	r3, #2
 8003552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003556:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	f003 0303 	and.w	r3, r3, #3
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	220f      	movs	r2, #15
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	43db      	mvns	r3, r3
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	4013      	ands	r3, r2
 800356c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a58      	ldr	r2, [pc, #352]	@ (80036d4 <HAL_GPIO_Init+0x32c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d037      	beq.n	80035e6 <HAL_GPIO_Init+0x23e>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a57      	ldr	r2, [pc, #348]	@ (80036d8 <HAL_GPIO_Init+0x330>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d031      	beq.n	80035e2 <HAL_GPIO_Init+0x23a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a56      	ldr	r2, [pc, #344]	@ (80036dc <HAL_GPIO_Init+0x334>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d02b      	beq.n	80035de <HAL_GPIO_Init+0x236>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a55      	ldr	r2, [pc, #340]	@ (80036e0 <HAL_GPIO_Init+0x338>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d025      	beq.n	80035da <HAL_GPIO_Init+0x232>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a54      	ldr	r2, [pc, #336]	@ (80036e4 <HAL_GPIO_Init+0x33c>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d01f      	beq.n	80035d6 <HAL_GPIO_Init+0x22e>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a53      	ldr	r2, [pc, #332]	@ (80036e8 <HAL_GPIO_Init+0x340>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d019      	beq.n	80035d2 <HAL_GPIO_Init+0x22a>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a52      	ldr	r2, [pc, #328]	@ (80036ec <HAL_GPIO_Init+0x344>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d013      	beq.n	80035ce <HAL_GPIO_Init+0x226>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a51      	ldr	r2, [pc, #324]	@ (80036f0 <HAL_GPIO_Init+0x348>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d00d      	beq.n	80035ca <HAL_GPIO_Init+0x222>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a50      	ldr	r2, [pc, #320]	@ (80036f4 <HAL_GPIO_Init+0x34c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d007      	beq.n	80035c6 <HAL_GPIO_Init+0x21e>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a4f      	ldr	r2, [pc, #316]	@ (80036f8 <HAL_GPIO_Init+0x350>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d101      	bne.n	80035c2 <HAL_GPIO_Init+0x21a>
 80035be:	2309      	movs	r3, #9
 80035c0:	e012      	b.n	80035e8 <HAL_GPIO_Init+0x240>
 80035c2:	230a      	movs	r3, #10
 80035c4:	e010      	b.n	80035e8 <HAL_GPIO_Init+0x240>
 80035c6:	2308      	movs	r3, #8
 80035c8:	e00e      	b.n	80035e8 <HAL_GPIO_Init+0x240>
 80035ca:	2307      	movs	r3, #7
 80035cc:	e00c      	b.n	80035e8 <HAL_GPIO_Init+0x240>
 80035ce:	2306      	movs	r3, #6
 80035d0:	e00a      	b.n	80035e8 <HAL_GPIO_Init+0x240>
 80035d2:	2305      	movs	r3, #5
 80035d4:	e008      	b.n	80035e8 <HAL_GPIO_Init+0x240>
 80035d6:	2304      	movs	r3, #4
 80035d8:	e006      	b.n	80035e8 <HAL_GPIO_Init+0x240>
 80035da:	2303      	movs	r3, #3
 80035dc:	e004      	b.n	80035e8 <HAL_GPIO_Init+0x240>
 80035de:	2302      	movs	r3, #2
 80035e0:	e002      	b.n	80035e8 <HAL_GPIO_Init+0x240>
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <HAL_GPIO_Init+0x240>
 80035e6:	2300      	movs	r3, #0
 80035e8:	69fa      	ldr	r2, [r7, #28]
 80035ea:	f002 0203 	and.w	r2, r2, #3
 80035ee:	0092      	lsls	r2, r2, #2
 80035f0:	4093      	lsls	r3, r2
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035f8:	4935      	ldr	r1, [pc, #212]	@ (80036d0 <HAL_GPIO_Init+0x328>)
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	089b      	lsrs	r3, r3, #2
 80035fe:	3302      	adds	r3, #2
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003606:	4b3d      	ldr	r3, [pc, #244]	@ (80036fc <HAL_GPIO_Init+0x354>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	43db      	mvns	r3, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4013      	ands	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	4313      	orrs	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800362a:	4a34      	ldr	r2, [pc, #208]	@ (80036fc <HAL_GPIO_Init+0x354>)
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003630:	4b32      	ldr	r3, [pc, #200]	@ (80036fc <HAL_GPIO_Init+0x354>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	43db      	mvns	r3, r3
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4013      	ands	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	4313      	orrs	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003654:	4a29      	ldr	r2, [pc, #164]	@ (80036fc <HAL_GPIO_Init+0x354>)
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800365a:	4b28      	ldr	r3, [pc, #160]	@ (80036fc <HAL_GPIO_Init+0x354>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	43db      	mvns	r3, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4013      	ands	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	4313      	orrs	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800367e:	4a1f      	ldr	r2, [pc, #124]	@ (80036fc <HAL_GPIO_Init+0x354>)
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003684:	4b1d      	ldr	r3, [pc, #116]	@ (80036fc <HAL_GPIO_Init+0x354>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	43db      	mvns	r3, r3
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	4013      	ands	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036a8:	4a14      	ldr	r2, [pc, #80]	@ (80036fc <HAL_GPIO_Init+0x354>)
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	3301      	adds	r3, #1
 80036b2:	61fb      	str	r3, [r7, #28]
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	2b0f      	cmp	r3, #15
 80036b8:	f67f ae84 	bls.w	80033c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036bc:	bf00      	nop
 80036be:	bf00      	nop
 80036c0:	3724      	adds	r7, #36	@ 0x24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	40023800 	.word	0x40023800
 80036d0:	40013800 	.word	0x40013800
 80036d4:	40020000 	.word	0x40020000
 80036d8:	40020400 	.word	0x40020400
 80036dc:	40020800 	.word	0x40020800
 80036e0:	40020c00 	.word	0x40020c00
 80036e4:	40021000 	.word	0x40021000
 80036e8:	40021400 	.word	0x40021400
 80036ec:	40021800 	.word	0x40021800
 80036f0:	40021c00 	.word	0x40021c00
 80036f4:	40022000 	.word	0x40022000
 80036f8:	40022400 	.word	0x40022400
 80036fc:	40013c00 	.word	0x40013c00

08003700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	460b      	mov	r3, r1
 800370a:	807b      	strh	r3, [r7, #2]
 800370c:	4613      	mov	r3, r2
 800370e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003710:	787b      	ldrb	r3, [r7, #1]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003716:	887a      	ldrh	r2, [r7, #2]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800371c:	e003      	b.n	8003726 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800371e:	887b      	ldrh	r3, [r7, #2]
 8003720:	041a      	lsls	r2, r3, #16
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	619a      	str	r2, [r3, #24]
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
	...

08003734 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e12b      	b.n	800399e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d106      	bne.n	8003760 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7ff fad6 	bl	8002d0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2224      	movs	r2, #36	@ 0x24
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0201 	bic.w	r2, r2, #1
 8003776:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003786:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003796:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003798:	f001 fa52 	bl	8004c40 <HAL_RCC_GetPCLK1Freq>
 800379c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	4a81      	ldr	r2, [pc, #516]	@ (80039a8 <HAL_I2C_Init+0x274>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d807      	bhi.n	80037b8 <HAL_I2C_Init+0x84>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4a80      	ldr	r2, [pc, #512]	@ (80039ac <HAL_I2C_Init+0x278>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	bf94      	ite	ls
 80037b0:	2301      	movls	r3, #1
 80037b2:	2300      	movhi	r3, #0
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	e006      	b.n	80037c6 <HAL_I2C_Init+0x92>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4a7d      	ldr	r2, [pc, #500]	@ (80039b0 <HAL_I2C_Init+0x27c>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	bf94      	ite	ls
 80037c0:	2301      	movls	r3, #1
 80037c2:	2300      	movhi	r3, #0
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e0e7      	b.n	800399e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4a78      	ldr	r2, [pc, #480]	@ (80039b4 <HAL_I2C_Init+0x280>)
 80037d2:	fba2 2303 	umull	r2, r3, r2, r3
 80037d6:	0c9b      	lsrs	r3, r3, #18
 80037d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	4a6a      	ldr	r2, [pc, #424]	@ (80039a8 <HAL_I2C_Init+0x274>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d802      	bhi.n	8003808 <HAL_I2C_Init+0xd4>
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	3301      	adds	r3, #1
 8003806:	e009      	b.n	800381c <HAL_I2C_Init+0xe8>
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800380e:	fb02 f303 	mul.w	r3, r2, r3
 8003812:	4a69      	ldr	r2, [pc, #420]	@ (80039b8 <HAL_I2C_Init+0x284>)
 8003814:	fba2 2303 	umull	r2, r3, r2, r3
 8003818:	099b      	lsrs	r3, r3, #6
 800381a:	3301      	adds	r3, #1
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6812      	ldr	r2, [r2, #0]
 8003820:	430b      	orrs	r3, r1
 8003822:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800382e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	495c      	ldr	r1, [pc, #368]	@ (80039a8 <HAL_I2C_Init+0x274>)
 8003838:	428b      	cmp	r3, r1
 800383a:	d819      	bhi.n	8003870 <HAL_I2C_Init+0x13c>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	1e59      	subs	r1, r3, #1
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	fbb1 f3f3 	udiv	r3, r1, r3
 800384a:	1c59      	adds	r1, r3, #1
 800384c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003850:	400b      	ands	r3, r1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00a      	beq.n	800386c <HAL_I2C_Init+0x138>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	1e59      	subs	r1, r3, #1
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	fbb1 f3f3 	udiv	r3, r1, r3
 8003864:	3301      	adds	r3, #1
 8003866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800386a:	e051      	b.n	8003910 <HAL_I2C_Init+0x1dc>
 800386c:	2304      	movs	r3, #4
 800386e:	e04f      	b.n	8003910 <HAL_I2C_Init+0x1dc>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d111      	bne.n	800389c <HAL_I2C_Init+0x168>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	1e58      	subs	r0, r3, #1
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6859      	ldr	r1, [r3, #4]
 8003880:	460b      	mov	r3, r1
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	440b      	add	r3, r1
 8003886:	fbb0 f3f3 	udiv	r3, r0, r3
 800388a:	3301      	adds	r3, #1
 800388c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003890:	2b00      	cmp	r3, #0
 8003892:	bf0c      	ite	eq
 8003894:	2301      	moveq	r3, #1
 8003896:	2300      	movne	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	e012      	b.n	80038c2 <HAL_I2C_Init+0x18e>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	1e58      	subs	r0, r3, #1
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6859      	ldr	r1, [r3, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	0099      	lsls	r1, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80038b2:	3301      	adds	r3, #1
 80038b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	bf0c      	ite	eq
 80038bc:	2301      	moveq	r3, #1
 80038be:	2300      	movne	r3, #0
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_I2C_Init+0x196>
 80038c6:	2301      	movs	r3, #1
 80038c8:	e022      	b.n	8003910 <HAL_I2C_Init+0x1dc>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10e      	bne.n	80038f0 <HAL_I2C_Init+0x1bc>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	1e58      	subs	r0, r3, #1
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6859      	ldr	r1, [r3, #4]
 80038da:	460b      	mov	r3, r1
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	440b      	add	r3, r1
 80038e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80038e4:	3301      	adds	r3, #1
 80038e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038ee:	e00f      	b.n	8003910 <HAL_I2C_Init+0x1dc>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	1e58      	subs	r0, r3, #1
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6859      	ldr	r1, [r3, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	0099      	lsls	r1, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	fbb0 f3f3 	udiv	r3, r0, r3
 8003906:	3301      	adds	r3, #1
 8003908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800390c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003910:	6879      	ldr	r1, [r7, #4]
 8003912:	6809      	ldr	r1, [r1, #0]
 8003914:	4313      	orrs	r3, r2
 8003916:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69da      	ldr	r2, [r3, #28]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800393e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6911      	ldr	r1, [r2, #16]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	68d2      	ldr	r2, [r2, #12]
 800394a:	4311      	orrs	r1, r2
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6812      	ldr	r2, [r2, #0]
 8003950:	430b      	orrs	r3, r1
 8003952:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	695a      	ldr	r2, [r3, #20]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0201 	orr.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2220      	movs	r2, #32
 800398a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	000186a0 	.word	0x000186a0
 80039ac:	001e847f 	.word	0x001e847f
 80039b0:	003d08ff 	.word	0x003d08ff
 80039b4:	431bde83 	.word	0x431bde83
 80039b8:	10624dd3 	.word	0x10624dd3

080039bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b088      	sub	sp, #32
 80039c0:	af02      	add	r7, sp, #8
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	4608      	mov	r0, r1
 80039c6:	4611      	mov	r1, r2
 80039c8:	461a      	mov	r2, r3
 80039ca:	4603      	mov	r3, r0
 80039cc:	817b      	strh	r3, [r7, #10]
 80039ce:	460b      	mov	r3, r1
 80039d0:	813b      	strh	r3, [r7, #8]
 80039d2:	4613      	mov	r3, r2
 80039d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039d6:	f7ff fbd1 	bl	800317c <HAL_GetTick>
 80039da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b20      	cmp	r3, #32
 80039e6:	f040 80d9 	bne.w	8003b9c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	2319      	movs	r3, #25
 80039f0:	2201      	movs	r2, #1
 80039f2:	496d      	ldr	r1, [pc, #436]	@ (8003ba8 <HAL_I2C_Mem_Write+0x1ec>)
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 fa9f 	bl	8003f38 <I2C_WaitOnFlagUntilTimeout>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a00:	2302      	movs	r3, #2
 8003a02:	e0cc      	b.n	8003b9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d101      	bne.n	8003a12 <HAL_I2C_Mem_Write+0x56>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e0c5      	b.n	8003b9e <HAL_I2C_Mem_Write+0x1e2>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d007      	beq.n	8003a38 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0201 	orr.w	r2, r2, #1
 8003a36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2221      	movs	r2, #33	@ 0x21
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2240      	movs	r2, #64	@ 0x40
 8003a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a3a      	ldr	r2, [r7, #32]
 8003a62:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003a68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4a4d      	ldr	r2, [pc, #308]	@ (8003bac <HAL_I2C_Mem_Write+0x1f0>)
 8003a78:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a7a:	88f8      	ldrh	r0, [r7, #6]
 8003a7c:	893a      	ldrh	r2, [r7, #8]
 8003a7e:	8979      	ldrh	r1, [r7, #10]
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	9301      	str	r3, [sp, #4]
 8003a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	4603      	mov	r3, r0
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 f9be 	bl	8003e0c <I2C_RequestMemoryWrite>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d052      	beq.n	8003b3c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e081      	b.n	8003b9e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 fb64 	bl	800416c <I2C_WaitOnTXEFlagUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00d      	beq.n	8003ac6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d107      	bne.n	8003ac2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ac0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e06b      	b.n	8003b9e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aca:	781a      	ldrb	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad6:	1c5a      	adds	r2, r3, #1
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b04      	cmp	r3, #4
 8003b02:	d11b      	bne.n	8003b3c <HAL_I2C_Mem_Write+0x180>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d017      	beq.n	8003b3c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b10:	781a      	ldrb	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1aa      	bne.n	8003a9a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 fb57 	bl	80041fc <I2C_WaitOnBTFFlagUntilTimeout>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00d      	beq.n	8003b70 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b58:	2b04      	cmp	r3, #4
 8003b5a:	d107      	bne.n	8003b6c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b6a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e016      	b.n	8003b9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2220      	movs	r2, #32
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	e000      	b.n	8003b9e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003b9c:	2302      	movs	r3, #2
  }
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	00100002 	.word	0x00100002
 8003bac:	ffff0000 	.word	0xffff0000

08003bb0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b08a      	sub	sp, #40	@ 0x28
 8003bb4:	af02      	add	r7, sp, #8
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	607a      	str	r2, [r7, #4]
 8003bba:	603b      	str	r3, [r7, #0]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003bc0:	f7ff fadc 	bl	800317c <HAL_GetTick>
 8003bc4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b20      	cmp	r3, #32
 8003bd4:	f040 8111 	bne.w	8003dfa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	2319      	movs	r3, #25
 8003bde:	2201      	movs	r2, #1
 8003be0:	4988      	ldr	r1, [pc, #544]	@ (8003e04 <HAL_I2C_IsDeviceReady+0x254>)
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 f9a8 	bl	8003f38 <I2C_WaitOnFlagUntilTimeout>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e104      	b.n	8003dfc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d101      	bne.n	8003c00 <HAL_I2C_IsDeviceReady+0x50>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e0fd      	b.n	8003dfc <HAL_I2C_IsDeviceReady+0x24c>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d007      	beq.n	8003c26 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f042 0201 	orr.w	r2, r2, #1
 8003c24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2224      	movs	r2, #36	@ 0x24
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	4a70      	ldr	r2, [pc, #448]	@ (8003e08 <HAL_I2C_IsDeviceReady+0x258>)
 8003c48:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c58:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 f966 	bl	8003f38 <I2C_WaitOnFlagUntilTimeout>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00d      	beq.n	8003c8e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c80:	d103      	bne.n	8003c8a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c88:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e0b6      	b.n	8003dfc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c8e:	897b      	ldrh	r3, [r7, #10]
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	461a      	mov	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c9c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003c9e:	f7ff fa6d 	bl	800317c <HAL_GetTick>
 8003ca2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	bf0c      	ite	eq
 8003cb2:	2301      	moveq	r3, #1
 8003cb4:	2300      	movne	r3, #0
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cc8:	bf0c      	ite	eq
 8003cca:	2301      	moveq	r3, #1
 8003ccc:	2300      	movne	r3, #0
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003cd2:	e025      	b.n	8003d20 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003cd4:	f7ff fa52 	bl	800317c <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d302      	bcc.n	8003cea <HAL_I2C_IsDeviceReady+0x13a>
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d103      	bne.n	8003cf2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	22a0      	movs	r2, #160	@ 0xa0
 8003cee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	bf0c      	ite	eq
 8003d00:	2301      	moveq	r3, #1
 8003d02:	2300      	movne	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d16:	bf0c      	ite	eq
 8003d18:	2301      	moveq	r3, #1
 8003d1a:	2300      	movne	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2ba0      	cmp	r3, #160	@ 0xa0
 8003d2a:	d005      	beq.n	8003d38 <HAL_I2C_IsDeviceReady+0x188>
 8003d2c:	7dfb      	ldrb	r3, [r7, #23]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d102      	bne.n	8003d38 <HAL_I2C_IsDeviceReady+0x188>
 8003d32:	7dbb      	ldrb	r3, [r7, #22]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0cd      	beq.n	8003cd4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d129      	bne.n	8003da2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d5c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d5e:	2300      	movs	r3, #0
 8003d60:	613b      	str	r3, [r7, #16]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	613b      	str	r3, [r7, #16]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	613b      	str	r3, [r7, #16]
 8003d72:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	2319      	movs	r3, #25
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	4921      	ldr	r1, [pc, #132]	@ (8003e04 <HAL_I2C_IsDeviceReady+0x254>)
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 f8da 	bl	8003f38 <I2C_WaitOnFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e036      	b.n	8003dfc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2220      	movs	r2, #32
 8003d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	e02c      	b.n	8003dfc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003db0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003dba:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	2319      	movs	r3, #25
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	490f      	ldr	r1, [pc, #60]	@ (8003e04 <HAL_I2C_IsDeviceReady+0x254>)
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f000 f8b6 	bl	8003f38 <I2C_WaitOnFlagUntilTimeout>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e012      	b.n	8003dfc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	f4ff af32 	bcc.w	8003c4a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003dfa:	2302      	movs	r3, #2
  }
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3720      	adds	r7, #32
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	00100002 	.word	0x00100002
 8003e08:	ffff0000 	.word	0xffff0000

08003e0c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b088      	sub	sp, #32
 8003e10:	af02      	add	r7, sp, #8
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	4608      	mov	r0, r1
 8003e16:	4611      	mov	r1, r2
 8003e18:	461a      	mov	r2, r3
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	817b      	strh	r3, [r7, #10]
 8003e1e:	460b      	mov	r3, r1
 8003e20:	813b      	strh	r3, [r7, #8]
 8003e22:	4613      	mov	r3, r2
 8003e24:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	6a3b      	ldr	r3, [r7, #32]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f000 f878 	bl	8003f38 <I2C_WaitOnFlagUntilTimeout>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00d      	beq.n	8003e6a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e5c:	d103      	bne.n	8003e66 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e64:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e05f      	b.n	8003f2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e6a:	897b      	ldrh	r3, [r7, #10]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	461a      	mov	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7c:	6a3a      	ldr	r2, [r7, #32]
 8003e7e:	492d      	ldr	r1, [pc, #180]	@ (8003f34 <I2C_RequestMemoryWrite+0x128>)
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 f8d3 	bl	800402c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e04c      	b.n	8003f2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e90:	2300      	movs	r3, #0
 8003e92:	617b      	str	r3, [r7, #20]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ea8:	6a39      	ldr	r1, [r7, #32]
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 f95e 	bl	800416c <I2C_WaitOnTXEFlagUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00d      	beq.n	8003ed2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	d107      	bne.n	8003ece <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ecc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e02b      	b.n	8003f2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ed2:	88fb      	ldrh	r3, [r7, #6]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d105      	bne.n	8003ee4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ed8:	893b      	ldrh	r3, [r7, #8]
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	611a      	str	r2, [r3, #16]
 8003ee2:	e021      	b.n	8003f28 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ee4:	893b      	ldrh	r3, [r7, #8]
 8003ee6:	0a1b      	lsrs	r3, r3, #8
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ef4:	6a39      	ldr	r1, [r7, #32]
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 f938 	bl	800416c <I2C_WaitOnTXEFlagUntilTimeout>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00d      	beq.n	8003f1e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d107      	bne.n	8003f1a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e005      	b.n	8003f2a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f1e:	893b      	ldrh	r3, [r7, #8]
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3718      	adds	r7, #24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	00010002 	.word	0x00010002

08003f38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	603b      	str	r3, [r7, #0]
 8003f44:	4613      	mov	r3, r2
 8003f46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f48:	e048      	b.n	8003fdc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f50:	d044      	beq.n	8003fdc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f52:	f7ff f913 	bl	800317c <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d302      	bcc.n	8003f68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d139      	bne.n	8003fdc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	0c1b      	lsrs	r3, r3, #16
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d10d      	bne.n	8003f8e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	43da      	mvns	r2, r3
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	bf0c      	ite	eq
 8003f84:	2301      	moveq	r3, #1
 8003f86:	2300      	movne	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	e00c      	b.n	8003fa8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	43da      	mvns	r2, r3
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	bf0c      	ite	eq
 8003fa0:	2301      	moveq	r3, #1
 8003fa2:	2300      	movne	r3, #0
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	79fb      	ldrb	r3, [r7, #7]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d116      	bne.n	8003fdc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc8:	f043 0220 	orr.w	r2, r3, #32
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e023      	b.n	8004024 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	0c1b      	lsrs	r3, r3, #16
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d10d      	bne.n	8004002 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	43da      	mvns	r2, r3
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	bf0c      	ite	eq
 8003ff8:	2301      	moveq	r3, #1
 8003ffa:	2300      	movne	r3, #0
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	461a      	mov	r2, r3
 8004000:	e00c      	b.n	800401c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	43da      	mvns	r2, r3
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	4013      	ands	r3, r2
 800400e:	b29b      	uxth	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	bf0c      	ite	eq
 8004014:	2301      	moveq	r3, #1
 8004016:	2300      	movne	r3, #0
 8004018:	b2db      	uxtb	r3, r3
 800401a:	461a      	mov	r2, r3
 800401c:	79fb      	ldrb	r3, [r7, #7]
 800401e:	429a      	cmp	r2, r3
 8004020:	d093      	beq.n	8003f4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
 8004038:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800403a:	e071      	b.n	8004120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004046:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800404a:	d123      	bne.n	8004094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800405a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004064:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2220      	movs	r2, #32
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004080:	f043 0204 	orr.w	r2, r3, #4
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e067      	b.n	8004164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409a:	d041      	beq.n	8004120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800409c:	f7ff f86e 	bl	800317c <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d302      	bcc.n	80040b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d136      	bne.n	8004120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	0c1b      	lsrs	r3, r3, #16
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d10c      	bne.n	80040d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	43da      	mvns	r2, r3
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	4013      	ands	r3, r2
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	bf14      	ite	ne
 80040ce:	2301      	movne	r3, #1
 80040d0:	2300      	moveq	r3, #0
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	e00b      	b.n	80040ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	43da      	mvns	r2, r3
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	4013      	ands	r3, r2
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	bf14      	ite	ne
 80040e8:	2301      	movne	r3, #1
 80040ea:	2300      	moveq	r3, #0
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d016      	beq.n	8004120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2220      	movs	r2, #32
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410c:	f043 0220 	orr.w	r2, r3, #32
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e021      	b.n	8004164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	0c1b      	lsrs	r3, r3, #16
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b01      	cmp	r3, #1
 8004128:	d10c      	bne.n	8004144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	43da      	mvns	r2, r3
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	4013      	ands	r3, r2
 8004136:	b29b      	uxth	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	bf14      	ite	ne
 800413c:	2301      	movne	r3, #1
 800413e:	2300      	moveq	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	e00b      	b.n	800415c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	43da      	mvns	r2, r3
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4013      	ands	r3, r2
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	bf14      	ite	ne
 8004156:	2301      	movne	r3, #1
 8004158:	2300      	moveq	r3, #0
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	f47f af6d 	bne.w	800403c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004178:	e034      	b.n	80041e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 f886 	bl	800428c <I2C_IsAcknowledgeFailed>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e034      	b.n	80041f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004190:	d028      	beq.n	80041e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004192:	f7fe fff3 	bl	800317c <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d302      	bcc.n	80041a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d11d      	bne.n	80041e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041b2:	2b80      	cmp	r3, #128	@ 0x80
 80041b4:	d016      	beq.n	80041e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2220      	movs	r2, #32
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d0:	f043 0220 	orr.w	r2, r3, #32
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e007      	b.n	80041f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ee:	2b80      	cmp	r3, #128	@ 0x80
 80041f0:	d1c3      	bne.n	800417a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004208:	e034      	b.n	8004274 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 f83e 	bl	800428c <I2C_IsAcknowledgeFailed>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e034      	b.n	8004284 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004220:	d028      	beq.n	8004274 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004222:	f7fe ffab 	bl	800317c <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	429a      	cmp	r2, r3
 8004230:	d302      	bcc.n	8004238 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d11d      	bne.n	8004274 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	2b04      	cmp	r3, #4
 8004244:	d016      	beq.n	8004274 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2220      	movs	r2, #32
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004260:	f043 0220 	orr.w	r2, r3, #32
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e007      	b.n	8004284 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	f003 0304 	and.w	r3, r3, #4
 800427e:	2b04      	cmp	r3, #4
 8004280:	d1c3      	bne.n	800420a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800429e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042a2:	d11b      	bne.n	80042dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80042ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c8:	f043 0204 	orr.w	r2, r3, #4
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e000      	b.n	80042de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr

080042ea <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b083      	sub	sp, #12
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
 80042f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b20      	cmp	r3, #32
 80042fe:	d129      	bne.n	8004354 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2224      	movs	r2, #36	@ 0x24
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0201 	bic.w	r2, r2, #1
 8004316:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0210 	bic.w	r2, r2, #16
 8004326:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2220      	movs	r2, #32
 800434c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004350:	2300      	movs	r3, #0
 8004352:	e000      	b.n	8004356 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004354:	2302      	movs	r3, #2
  }
}
 8004356:	4618      	mov	r0, r3
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004362:	b480      	push	{r7}
 8004364:	b085      	sub	sp, #20
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800436c:	2300      	movs	r3, #0
 800436e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b20      	cmp	r3, #32
 800437a:	d12a      	bne.n	80043d2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2224      	movs	r2, #36	@ 0x24
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 0201 	bic.w	r2, r2, #1
 8004392:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800439c:	89fb      	ldrh	r3, [r7, #14]
 800439e:	f023 030f 	bic.w	r3, r3, #15
 80043a2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	89fb      	ldrh	r3, [r7, #14]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	89fa      	ldrh	r2, [r7, #14]
 80043b4:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f042 0201 	orr.w	r2, r2, #1
 80043c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	e000      	b.n	80043d4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80043d2:	2302      	movs	r3, #2
  }
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e267      	b.n	80048c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d075      	beq.n	80044ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80043fe:	4b88      	ldr	r3, [pc, #544]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 030c 	and.w	r3, r3, #12
 8004406:	2b04      	cmp	r3, #4
 8004408:	d00c      	beq.n	8004424 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800440a:	4b85      	ldr	r3, [pc, #532]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004412:	2b08      	cmp	r3, #8
 8004414:	d112      	bne.n	800443c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004416:	4b82      	ldr	r3, [pc, #520]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800441e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004422:	d10b      	bne.n	800443c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004424:	4b7e      	ldr	r3, [pc, #504]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d05b      	beq.n	80044e8 <HAL_RCC_OscConfig+0x108>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d157      	bne.n	80044e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e242      	b.n	80048c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004444:	d106      	bne.n	8004454 <HAL_RCC_OscConfig+0x74>
 8004446:	4b76      	ldr	r3, [pc, #472]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a75      	ldr	r2, [pc, #468]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 800444c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004450:	6013      	str	r3, [r2, #0]
 8004452:	e01d      	b.n	8004490 <HAL_RCC_OscConfig+0xb0>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800445c:	d10c      	bne.n	8004478 <HAL_RCC_OscConfig+0x98>
 800445e:	4b70      	ldr	r3, [pc, #448]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a6f      	ldr	r2, [pc, #444]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 8004464:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004468:	6013      	str	r3, [r2, #0]
 800446a:	4b6d      	ldr	r3, [pc, #436]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a6c      	ldr	r2, [pc, #432]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 8004470:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	e00b      	b.n	8004490 <HAL_RCC_OscConfig+0xb0>
 8004478:	4b69      	ldr	r3, [pc, #420]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a68      	ldr	r2, [pc, #416]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 800447e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004482:	6013      	str	r3, [r2, #0]
 8004484:	4b66      	ldr	r3, [pc, #408]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a65      	ldr	r2, [pc, #404]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 800448a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800448e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d013      	beq.n	80044c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004498:	f7fe fe70 	bl	800317c <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044a0:	f7fe fe6c 	bl	800317c <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b64      	cmp	r3, #100	@ 0x64
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e207      	b.n	80048c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044b2:	4b5b      	ldr	r3, [pc, #364]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0f0      	beq.n	80044a0 <HAL_RCC_OscConfig+0xc0>
 80044be:	e014      	b.n	80044ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c0:	f7fe fe5c 	bl	800317c <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044c8:	f7fe fe58 	bl	800317c <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b64      	cmp	r3, #100	@ 0x64
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e1f3      	b.n	80048c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044da:	4b51      	ldr	r3, [pc, #324]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f0      	bne.n	80044c8 <HAL_RCC_OscConfig+0xe8>
 80044e6:	e000      	b.n	80044ea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d063      	beq.n	80045be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80044f6:	4b4a      	ldr	r3, [pc, #296]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f003 030c 	and.w	r3, r3, #12
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00b      	beq.n	800451a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004502:	4b47      	ldr	r3, [pc, #284]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800450a:	2b08      	cmp	r3, #8
 800450c:	d11c      	bne.n	8004548 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800450e:	4b44      	ldr	r3, [pc, #272]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d116      	bne.n	8004548 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800451a:	4b41      	ldr	r3, [pc, #260]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d005      	beq.n	8004532 <HAL_RCC_OscConfig+0x152>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d001      	beq.n	8004532 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e1c7      	b.n	80048c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004532:	4b3b      	ldr	r3, [pc, #236]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	4937      	ldr	r1, [pc, #220]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 8004542:	4313      	orrs	r3, r2
 8004544:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004546:	e03a      	b.n	80045be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d020      	beq.n	8004592 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004550:	4b34      	ldr	r3, [pc, #208]	@ (8004624 <HAL_RCC_OscConfig+0x244>)
 8004552:	2201      	movs	r2, #1
 8004554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004556:	f7fe fe11 	bl	800317c <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800455c:	e008      	b.n	8004570 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800455e:	f7fe fe0d 	bl	800317c <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e1a8      	b.n	80048c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004570:	4b2b      	ldr	r3, [pc, #172]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0f0      	beq.n	800455e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457c:	4b28      	ldr	r3, [pc, #160]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	4925      	ldr	r1, [pc, #148]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 800458c:	4313      	orrs	r3, r2
 800458e:	600b      	str	r3, [r1, #0]
 8004590:	e015      	b.n	80045be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004592:	4b24      	ldr	r3, [pc, #144]	@ (8004624 <HAL_RCC_OscConfig+0x244>)
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004598:	f7fe fdf0 	bl	800317c <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045a0:	f7fe fdec 	bl	800317c <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e187      	b.n	80048c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f0      	bne.n	80045a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0308 	and.w	r3, r3, #8
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d036      	beq.n	8004638 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d016      	beq.n	8004600 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045d2:	4b15      	ldr	r3, [pc, #84]	@ (8004628 <HAL_RCC_OscConfig+0x248>)
 80045d4:	2201      	movs	r2, #1
 80045d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d8:	f7fe fdd0 	bl	800317c <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045e0:	f7fe fdcc 	bl	800317c <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e167      	b.n	80048c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004620 <HAL_RCC_OscConfig+0x240>)
 80045f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0f0      	beq.n	80045e0 <HAL_RCC_OscConfig+0x200>
 80045fe:	e01b      	b.n	8004638 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004600:	4b09      	ldr	r3, [pc, #36]	@ (8004628 <HAL_RCC_OscConfig+0x248>)
 8004602:	2200      	movs	r2, #0
 8004604:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004606:	f7fe fdb9 	bl	800317c <HAL_GetTick>
 800460a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800460c:	e00e      	b.n	800462c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800460e:	f7fe fdb5 	bl	800317c <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d907      	bls.n	800462c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e150      	b.n	80048c2 <HAL_RCC_OscConfig+0x4e2>
 8004620:	40023800 	.word	0x40023800
 8004624:	42470000 	.word	0x42470000
 8004628:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800462c:	4b88      	ldr	r3, [pc, #544]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 800462e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1ea      	bne.n	800460e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 8097 	beq.w	8004774 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004646:	2300      	movs	r3, #0
 8004648:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800464a:	4b81      	ldr	r3, [pc, #516]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 800464c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10f      	bne.n	8004676 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004656:	2300      	movs	r3, #0
 8004658:	60bb      	str	r3, [r7, #8]
 800465a:	4b7d      	ldr	r3, [pc, #500]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 800465c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465e:	4a7c      	ldr	r2, [pc, #496]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 8004660:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004664:	6413      	str	r3, [r2, #64]	@ 0x40
 8004666:	4b7a      	ldr	r3, [pc, #488]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 8004668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800466e:	60bb      	str	r3, [r7, #8]
 8004670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004672:	2301      	movs	r3, #1
 8004674:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004676:	4b77      	ldr	r3, [pc, #476]	@ (8004854 <HAL_RCC_OscConfig+0x474>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800467e:	2b00      	cmp	r3, #0
 8004680:	d118      	bne.n	80046b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004682:	4b74      	ldr	r3, [pc, #464]	@ (8004854 <HAL_RCC_OscConfig+0x474>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a73      	ldr	r2, [pc, #460]	@ (8004854 <HAL_RCC_OscConfig+0x474>)
 8004688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800468c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800468e:	f7fe fd75 	bl	800317c <HAL_GetTick>
 8004692:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004694:	e008      	b.n	80046a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004696:	f7fe fd71 	bl	800317c <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e10c      	b.n	80048c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a8:	4b6a      	ldr	r3, [pc, #424]	@ (8004854 <HAL_RCC_OscConfig+0x474>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0f0      	beq.n	8004696 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d106      	bne.n	80046ca <HAL_RCC_OscConfig+0x2ea>
 80046bc:	4b64      	ldr	r3, [pc, #400]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 80046be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046c0:	4a63      	ldr	r2, [pc, #396]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 80046c2:	f043 0301 	orr.w	r3, r3, #1
 80046c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80046c8:	e01c      	b.n	8004704 <HAL_RCC_OscConfig+0x324>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	2b05      	cmp	r3, #5
 80046d0:	d10c      	bne.n	80046ec <HAL_RCC_OscConfig+0x30c>
 80046d2:	4b5f      	ldr	r3, [pc, #380]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 80046d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046d6:	4a5e      	ldr	r2, [pc, #376]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 80046d8:	f043 0304 	orr.w	r3, r3, #4
 80046dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80046de:	4b5c      	ldr	r3, [pc, #368]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 80046e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046e2:	4a5b      	ldr	r2, [pc, #364]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 80046e4:	f043 0301 	orr.w	r3, r3, #1
 80046e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80046ea:	e00b      	b.n	8004704 <HAL_RCC_OscConfig+0x324>
 80046ec:	4b58      	ldr	r3, [pc, #352]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 80046ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f0:	4a57      	ldr	r2, [pc, #348]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 80046f2:	f023 0301 	bic.w	r3, r3, #1
 80046f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80046f8:	4b55      	ldr	r3, [pc, #340]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 80046fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046fc:	4a54      	ldr	r2, [pc, #336]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 80046fe:	f023 0304 	bic.w	r3, r3, #4
 8004702:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d015      	beq.n	8004738 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800470c:	f7fe fd36 	bl	800317c <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004712:	e00a      	b.n	800472a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004714:	f7fe fd32 	bl	800317c <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004722:	4293      	cmp	r3, r2
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e0cb      	b.n	80048c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800472a:	4b49      	ldr	r3, [pc, #292]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 800472c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0ee      	beq.n	8004714 <HAL_RCC_OscConfig+0x334>
 8004736:	e014      	b.n	8004762 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004738:	f7fe fd20 	bl	800317c <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800473e:	e00a      	b.n	8004756 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004740:	f7fe fd1c 	bl	800317c <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800474e:	4293      	cmp	r3, r2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e0b5      	b.n	80048c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004756:	4b3e      	ldr	r3, [pc, #248]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 8004758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1ee      	bne.n	8004740 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004762:	7dfb      	ldrb	r3, [r7, #23]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d105      	bne.n	8004774 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004768:	4b39      	ldr	r3, [pc, #228]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 800476a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476c:	4a38      	ldr	r2, [pc, #224]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 800476e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004772:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 80a1 	beq.w	80048c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800477e:	4b34      	ldr	r3, [pc, #208]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f003 030c 	and.w	r3, r3, #12
 8004786:	2b08      	cmp	r3, #8
 8004788:	d05c      	beq.n	8004844 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	2b02      	cmp	r3, #2
 8004790:	d141      	bne.n	8004816 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004792:	4b31      	ldr	r3, [pc, #196]	@ (8004858 <HAL_RCC_OscConfig+0x478>)
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004798:	f7fe fcf0 	bl	800317c <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a0:	f7fe fcec 	bl	800317c <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e087      	b.n	80048c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b2:	4b27      	ldr	r3, [pc, #156]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1f0      	bne.n	80047a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	69da      	ldr	r2, [r3, #28]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047cc:	019b      	lsls	r3, r3, #6
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d4:	085b      	lsrs	r3, r3, #1
 80047d6:	3b01      	subs	r3, #1
 80047d8:	041b      	lsls	r3, r3, #16
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e0:	061b      	lsls	r3, r3, #24
 80047e2:	491b      	ldr	r1, [pc, #108]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004858 <HAL_RCC_OscConfig+0x478>)
 80047ea:	2201      	movs	r2, #1
 80047ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ee:	f7fe fcc5 	bl	800317c <HAL_GetTick>
 80047f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047f4:	e008      	b.n	8004808 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047f6:	f7fe fcc1 	bl	800317c <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d901      	bls.n	8004808 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e05c      	b.n	80048c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004808:	4b11      	ldr	r3, [pc, #68]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0f0      	beq.n	80047f6 <HAL_RCC_OscConfig+0x416>
 8004814:	e054      	b.n	80048c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004816:	4b10      	ldr	r3, [pc, #64]	@ (8004858 <HAL_RCC_OscConfig+0x478>)
 8004818:	2200      	movs	r2, #0
 800481a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800481c:	f7fe fcae 	bl	800317c <HAL_GetTick>
 8004820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004822:	e008      	b.n	8004836 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004824:	f7fe fcaa 	bl	800317c <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e045      	b.n	80048c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004836:	4b06      	ldr	r3, [pc, #24]	@ (8004850 <HAL_RCC_OscConfig+0x470>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1f0      	bne.n	8004824 <HAL_RCC_OscConfig+0x444>
 8004842:	e03d      	b.n	80048c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d107      	bne.n	800485c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e038      	b.n	80048c2 <HAL_RCC_OscConfig+0x4e2>
 8004850:	40023800 	.word	0x40023800
 8004854:	40007000 	.word	0x40007000
 8004858:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800485c:	4b1b      	ldr	r3, [pc, #108]	@ (80048cc <HAL_RCC_OscConfig+0x4ec>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d028      	beq.n	80048bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004874:	429a      	cmp	r2, r3
 8004876:	d121      	bne.n	80048bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004882:	429a      	cmp	r2, r3
 8004884:	d11a      	bne.n	80048bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800488c:	4013      	ands	r3, r2
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004892:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004894:	4293      	cmp	r3, r2
 8004896:	d111      	bne.n	80048bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a2:	085b      	lsrs	r3, r3, #1
 80048a4:	3b01      	subs	r3, #1
 80048a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d107      	bne.n	80048bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d001      	beq.n	80048c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e000      	b.n	80048c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3718      	adds	r7, #24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	40023800 	.word	0x40023800

080048d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e0cc      	b.n	8004a7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048e4:	4b68      	ldr	r3, [pc, #416]	@ (8004a88 <HAL_RCC_ClockConfig+0x1b8>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 030f 	and.w	r3, r3, #15
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d90c      	bls.n	800490c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048f2:	4b65      	ldr	r3, [pc, #404]	@ (8004a88 <HAL_RCC_ClockConfig+0x1b8>)
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	b2d2      	uxtb	r2, r2
 80048f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048fa:	4b63      	ldr	r3, [pc, #396]	@ (8004a88 <HAL_RCC_ClockConfig+0x1b8>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	683a      	ldr	r2, [r7, #0]
 8004904:	429a      	cmp	r2, r3
 8004906:	d001      	beq.n	800490c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e0b8      	b.n	8004a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d020      	beq.n	800495a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0304 	and.w	r3, r3, #4
 8004920:	2b00      	cmp	r3, #0
 8004922:	d005      	beq.n	8004930 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004924:	4b59      	ldr	r3, [pc, #356]	@ (8004a8c <HAL_RCC_ClockConfig+0x1bc>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	4a58      	ldr	r2, [pc, #352]	@ (8004a8c <HAL_RCC_ClockConfig+0x1bc>)
 800492a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800492e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0308 	and.w	r3, r3, #8
 8004938:	2b00      	cmp	r3, #0
 800493a:	d005      	beq.n	8004948 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800493c:	4b53      	ldr	r3, [pc, #332]	@ (8004a8c <HAL_RCC_ClockConfig+0x1bc>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	4a52      	ldr	r2, [pc, #328]	@ (8004a8c <HAL_RCC_ClockConfig+0x1bc>)
 8004942:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004946:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004948:	4b50      	ldr	r3, [pc, #320]	@ (8004a8c <HAL_RCC_ClockConfig+0x1bc>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	494d      	ldr	r1, [pc, #308]	@ (8004a8c <HAL_RCC_ClockConfig+0x1bc>)
 8004956:	4313      	orrs	r3, r2
 8004958:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d044      	beq.n	80049f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d107      	bne.n	800497e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800496e:	4b47      	ldr	r3, [pc, #284]	@ (8004a8c <HAL_RCC_ClockConfig+0x1bc>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d119      	bne.n	80049ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e07f      	b.n	8004a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2b02      	cmp	r3, #2
 8004984:	d003      	beq.n	800498e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800498a:	2b03      	cmp	r3, #3
 800498c:	d107      	bne.n	800499e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800498e:	4b3f      	ldr	r3, [pc, #252]	@ (8004a8c <HAL_RCC_ClockConfig+0x1bc>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d109      	bne.n	80049ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e06f      	b.n	8004a7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800499e:	4b3b      	ldr	r3, [pc, #236]	@ (8004a8c <HAL_RCC_ClockConfig+0x1bc>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e067      	b.n	8004a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049ae:	4b37      	ldr	r3, [pc, #220]	@ (8004a8c <HAL_RCC_ClockConfig+0x1bc>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f023 0203 	bic.w	r2, r3, #3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	4934      	ldr	r1, [pc, #208]	@ (8004a8c <HAL_RCC_ClockConfig+0x1bc>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049c0:	f7fe fbdc 	bl	800317c <HAL_GetTick>
 80049c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049c6:	e00a      	b.n	80049de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049c8:	f7fe fbd8 	bl	800317c <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e04f      	b.n	8004a7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049de:	4b2b      	ldr	r3, [pc, #172]	@ (8004a8c <HAL_RCC_ClockConfig+0x1bc>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 020c 	and.w	r2, r3, #12
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d1eb      	bne.n	80049c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049f0:	4b25      	ldr	r3, [pc, #148]	@ (8004a88 <HAL_RCC_ClockConfig+0x1b8>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 030f 	and.w	r3, r3, #15
 80049f8:	683a      	ldr	r2, [r7, #0]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d20c      	bcs.n	8004a18 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049fe:	4b22      	ldr	r3, [pc, #136]	@ (8004a88 <HAL_RCC_ClockConfig+0x1b8>)
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	b2d2      	uxtb	r2, r2
 8004a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a06:	4b20      	ldr	r3, [pc, #128]	@ (8004a88 <HAL_RCC_ClockConfig+0x1b8>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 030f 	and.w	r3, r3, #15
 8004a0e:	683a      	ldr	r2, [r7, #0]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d001      	beq.n	8004a18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e032      	b.n	8004a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0304 	and.w	r3, r3, #4
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d008      	beq.n	8004a36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a24:	4b19      	ldr	r3, [pc, #100]	@ (8004a8c <HAL_RCC_ClockConfig+0x1bc>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	4916      	ldr	r1, [pc, #88]	@ (8004a8c <HAL_RCC_ClockConfig+0x1bc>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0308 	and.w	r3, r3, #8
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d009      	beq.n	8004a56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a42:	4b12      	ldr	r3, [pc, #72]	@ (8004a8c <HAL_RCC_ClockConfig+0x1bc>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	00db      	lsls	r3, r3, #3
 8004a50:	490e      	ldr	r1, [pc, #56]	@ (8004a8c <HAL_RCC_ClockConfig+0x1bc>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a56:	f000 f821 	bl	8004a9c <HAL_RCC_GetSysClockFreq>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a8c <HAL_RCC_ClockConfig+0x1bc>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	091b      	lsrs	r3, r3, #4
 8004a62:	f003 030f 	and.w	r3, r3, #15
 8004a66:	490a      	ldr	r1, [pc, #40]	@ (8004a90 <HAL_RCC_ClockConfig+0x1c0>)
 8004a68:	5ccb      	ldrb	r3, [r1, r3]
 8004a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a6e:	4a09      	ldr	r2, [pc, #36]	@ (8004a94 <HAL_RCC_ClockConfig+0x1c4>)
 8004a70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004a72:	4b09      	ldr	r3, [pc, #36]	@ (8004a98 <HAL_RCC_ClockConfig+0x1c8>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fe fb3c 	bl	80030f4 <HAL_InitTick>

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	40023c00 	.word	0x40023c00
 8004a8c:	40023800 	.word	0x40023800
 8004a90:	080071e8 	.word	0x080071e8
 8004a94:	20000400 	.word	0x20000400
 8004a98:	20000404 	.word	0x20000404

08004a9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004aa0:	b090      	sub	sp, #64	@ 0x40
 8004aa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ab4:	4b59      	ldr	r3, [pc, #356]	@ (8004c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f003 030c 	and.w	r3, r3, #12
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d00d      	beq.n	8004adc <HAL_RCC_GetSysClockFreq+0x40>
 8004ac0:	2b08      	cmp	r3, #8
 8004ac2:	f200 80a1 	bhi.w	8004c08 <HAL_RCC_GetSysClockFreq+0x16c>
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d002      	beq.n	8004ad0 <HAL_RCC_GetSysClockFreq+0x34>
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d003      	beq.n	8004ad6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004ace:	e09b      	b.n	8004c08 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ad0:	4b53      	ldr	r3, [pc, #332]	@ (8004c20 <HAL_RCC_GetSysClockFreq+0x184>)
 8004ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004ad4:	e09b      	b.n	8004c0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ad6:	4b53      	ldr	r3, [pc, #332]	@ (8004c24 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004ada:	e098      	b.n	8004c0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004adc:	4b4f      	ldr	r3, [pc, #316]	@ (8004c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ae4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ae6:	4b4d      	ldr	r3, [pc, #308]	@ (8004c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d028      	beq.n	8004b44 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004af2:	4b4a      	ldr	r3, [pc, #296]	@ (8004c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	099b      	lsrs	r3, r3, #6
 8004af8:	2200      	movs	r2, #0
 8004afa:	623b      	str	r3, [r7, #32]
 8004afc:	627a      	str	r2, [r7, #36]	@ 0x24
 8004afe:	6a3b      	ldr	r3, [r7, #32]
 8004b00:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004b04:	2100      	movs	r1, #0
 8004b06:	4b47      	ldr	r3, [pc, #284]	@ (8004c24 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b08:	fb03 f201 	mul.w	r2, r3, r1
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	fb00 f303 	mul.w	r3, r0, r3
 8004b12:	4413      	add	r3, r2
 8004b14:	4a43      	ldr	r2, [pc, #268]	@ (8004c24 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b16:	fba0 1202 	umull	r1, r2, r0, r2
 8004b1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b1c:	460a      	mov	r2, r1
 8004b1e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004b20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b22:	4413      	add	r3, r2
 8004b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b28:	2200      	movs	r2, #0
 8004b2a:	61bb      	str	r3, [r7, #24]
 8004b2c:	61fa      	str	r2, [r7, #28]
 8004b2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004b36:	f7fb fbab 	bl	8000290 <__aeabi_uldivmod>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	4613      	mov	r3, r2
 8004b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b42:	e053      	b.n	8004bec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b44:	4b35      	ldr	r3, [pc, #212]	@ (8004c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	099b      	lsrs	r3, r3, #6
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	613b      	str	r3, [r7, #16]
 8004b4e:	617a      	str	r2, [r7, #20]
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004b56:	f04f 0b00 	mov.w	fp, #0
 8004b5a:	4652      	mov	r2, sl
 8004b5c:	465b      	mov	r3, fp
 8004b5e:	f04f 0000 	mov.w	r0, #0
 8004b62:	f04f 0100 	mov.w	r1, #0
 8004b66:	0159      	lsls	r1, r3, #5
 8004b68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b6c:	0150      	lsls	r0, r2, #5
 8004b6e:	4602      	mov	r2, r0
 8004b70:	460b      	mov	r3, r1
 8004b72:	ebb2 080a 	subs.w	r8, r2, sl
 8004b76:	eb63 090b 	sbc.w	r9, r3, fp
 8004b7a:	f04f 0200 	mov.w	r2, #0
 8004b7e:	f04f 0300 	mov.w	r3, #0
 8004b82:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004b86:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004b8a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004b8e:	ebb2 0408 	subs.w	r4, r2, r8
 8004b92:	eb63 0509 	sbc.w	r5, r3, r9
 8004b96:	f04f 0200 	mov.w	r2, #0
 8004b9a:	f04f 0300 	mov.w	r3, #0
 8004b9e:	00eb      	lsls	r3, r5, #3
 8004ba0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ba4:	00e2      	lsls	r2, r4, #3
 8004ba6:	4614      	mov	r4, r2
 8004ba8:	461d      	mov	r5, r3
 8004baa:	eb14 030a 	adds.w	r3, r4, sl
 8004bae:	603b      	str	r3, [r7, #0]
 8004bb0:	eb45 030b 	adc.w	r3, r5, fp
 8004bb4:	607b      	str	r3, [r7, #4]
 8004bb6:	f04f 0200 	mov.w	r2, #0
 8004bba:	f04f 0300 	mov.w	r3, #0
 8004bbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bc2:	4629      	mov	r1, r5
 8004bc4:	028b      	lsls	r3, r1, #10
 8004bc6:	4621      	mov	r1, r4
 8004bc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bcc:	4621      	mov	r1, r4
 8004bce:	028a      	lsls	r2, r1, #10
 8004bd0:	4610      	mov	r0, r2
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	60bb      	str	r3, [r7, #8]
 8004bda:	60fa      	str	r2, [r7, #12]
 8004bdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004be0:	f7fb fb56 	bl	8000290 <__aeabi_uldivmod>
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	4613      	mov	r3, r2
 8004bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004bec:	4b0b      	ldr	r3, [pc, #44]	@ (8004c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	0c1b      	lsrs	r3, r3, #16
 8004bf2:	f003 0303 	and.w	r3, r3, #3
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004bfc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c04:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c06:	e002      	b.n	8004c0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c08:	4b05      	ldr	r3, [pc, #20]	@ (8004c20 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3740      	adds	r7, #64	@ 0x40
 8004c14:	46bd      	mov	sp, r7
 8004c16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c1a:	bf00      	nop
 8004c1c:	40023800 	.word	0x40023800
 8004c20:	00f42400 	.word	0x00f42400
 8004c24:	017d7840 	.word	0x017d7840

08004c28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c2c:	4b03      	ldr	r3, [pc, #12]	@ (8004c3c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	20000400 	.word	0x20000400

08004c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c44:	f7ff fff0 	bl	8004c28 <HAL_RCC_GetHCLKFreq>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	4b05      	ldr	r3, [pc, #20]	@ (8004c60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	0a9b      	lsrs	r3, r3, #10
 8004c50:	f003 0307 	and.w	r3, r3, #7
 8004c54:	4903      	ldr	r1, [pc, #12]	@ (8004c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c56:	5ccb      	ldrb	r3, [r1, r3]
 8004c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	40023800 	.word	0x40023800
 8004c64:	080071f8 	.word	0x080071f8

08004c68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e07b      	b.n	8004d72 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d108      	bne.n	8004c94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c8a:	d009      	beq.n	8004ca0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	61da      	str	r2, [r3, #28]
 8004c92:	e005      	b.n	8004ca0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d106      	bne.n	8004cc0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7fe f8a2 	bl	8002e04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cd6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	431a      	orrs	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d10:	431a      	orrs	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d24:	ea42 0103 	orr.w	r1, r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d2c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	430a      	orrs	r2, r1
 8004d36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	0c1b      	lsrs	r3, r3, #16
 8004d3e:	f003 0104 	and.w	r1, r3, #4
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d46:	f003 0210 	and.w	r2, r3, #16
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	69da      	ldr	r2, [r3, #28]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b088      	sub	sp, #32
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	60f8      	str	r0, [r7, #12]
 8004d82:	60b9      	str	r1, [r7, #8]
 8004d84:	603b      	str	r3, [r7, #0]
 8004d86:	4613      	mov	r3, r2
 8004d88:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d8a:	f7fe f9f7 	bl	800317c <HAL_GetTick>
 8004d8e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004d90:	88fb      	ldrh	r3, [r7, #6]
 8004d92:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d001      	beq.n	8004da4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004da0:	2302      	movs	r3, #2
 8004da2:	e12a      	b.n	8004ffa <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d002      	beq.n	8004db0 <HAL_SPI_Transmit+0x36>
 8004daa:	88fb      	ldrh	r3, [r7, #6]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e122      	b.n	8004ffa <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d101      	bne.n	8004dc2 <HAL_SPI_Transmit+0x48>
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	e11b      	b.n	8004ffa <HAL_SPI_Transmit+0x280>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2203      	movs	r2, #3
 8004dce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	88fa      	ldrh	r2, [r7, #6]
 8004de2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	88fa      	ldrh	r2, [r7, #6]
 8004de8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e10:	d10f      	bne.n	8004e32 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e20:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e30:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e3c:	2b40      	cmp	r3, #64	@ 0x40
 8004e3e:	d007      	beq.n	8004e50 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e58:	d152      	bne.n	8004f00 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d002      	beq.n	8004e68 <HAL_SPI_Transmit+0xee>
 8004e62:	8b7b      	ldrh	r3, [r7, #26]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d145      	bne.n	8004ef4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e6c:	881a      	ldrh	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e78:	1c9a      	adds	r2, r3, #2
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	3b01      	subs	r3, #1
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e8c:	e032      	b.n	8004ef4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f003 0302 	and.w	r3, r3, #2
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d112      	bne.n	8004ec2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea0:	881a      	ldrh	r2, [r3, #0]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eac:	1c9a      	adds	r2, r3, #2
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004ec0:	e018      	b.n	8004ef4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ec2:	f7fe f95b 	bl	800317c <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d803      	bhi.n	8004eda <HAL_SPI_Transmit+0x160>
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed8:	d102      	bne.n	8004ee0 <HAL_SPI_Transmit+0x166>
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d109      	bne.n	8004ef4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e082      	b.n	8004ffa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1c7      	bne.n	8004e8e <HAL_SPI_Transmit+0x114>
 8004efe:	e053      	b.n	8004fa8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d002      	beq.n	8004f0e <HAL_SPI_Transmit+0x194>
 8004f08:	8b7b      	ldrh	r3, [r7, #26]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d147      	bne.n	8004f9e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	330c      	adds	r3, #12
 8004f18:	7812      	ldrb	r2, [r2, #0]
 8004f1a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f20:	1c5a      	adds	r2, r3, #1
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004f34:	e033      	b.n	8004f9e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d113      	bne.n	8004f6c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	330c      	adds	r3, #12
 8004f4e:	7812      	ldrb	r2, [r2, #0]
 8004f50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	3b01      	subs	r3, #1
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004f6a:	e018      	b.n	8004f9e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f6c:	f7fe f906 	bl	800317c <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	683a      	ldr	r2, [r7, #0]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d803      	bhi.n	8004f84 <HAL_SPI_Transmit+0x20a>
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f82:	d102      	bne.n	8004f8a <HAL_SPI_Transmit+0x210>
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d109      	bne.n	8004f9e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e02d      	b.n	8004ffa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1c6      	bne.n	8004f36 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fa8:	69fa      	ldr	r2, [r7, #28]
 8004faa:	6839      	ldr	r1, [r7, #0]
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 f8b1 	bl	8005114 <SPI_EndRxTxTransaction>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d002      	beq.n	8004fbe <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10a      	bne.n	8004fdc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	617b      	str	r3, [r7, #20]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	617b      	str	r3, [r7, #20]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	617b      	str	r3, [r7, #20]
 8004fda:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e000      	b.n	8004ffa <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
  }
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3720      	adds	r7, #32
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
	...

08005004 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b088      	sub	sp, #32
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	603b      	str	r3, [r7, #0]
 8005010:	4613      	mov	r3, r2
 8005012:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005014:	f7fe f8b2 	bl	800317c <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800501c:	1a9b      	subs	r3, r3, r2
 800501e:	683a      	ldr	r2, [r7, #0]
 8005020:	4413      	add	r3, r2
 8005022:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005024:	f7fe f8aa 	bl	800317c <HAL_GetTick>
 8005028:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800502a:	4b39      	ldr	r3, [pc, #228]	@ (8005110 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	015b      	lsls	r3, r3, #5
 8005030:	0d1b      	lsrs	r3, r3, #20
 8005032:	69fa      	ldr	r2, [r7, #28]
 8005034:	fb02 f303 	mul.w	r3, r2, r3
 8005038:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800503a:	e054      	b.n	80050e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005042:	d050      	beq.n	80050e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005044:	f7fe f89a 	bl	800317c <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	69fa      	ldr	r2, [r7, #28]
 8005050:	429a      	cmp	r2, r3
 8005052:	d902      	bls.n	800505a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d13d      	bne.n	80050d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005068:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005072:	d111      	bne.n	8005098 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800507c:	d004      	beq.n	8005088 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005086:	d107      	bne.n	8005098 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005096:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800509c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050a0:	d10f      	bne.n	80050c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e017      	b.n	8005106 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d101      	bne.n	80050e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80050dc:	2300      	movs	r3, #0
 80050de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	3b01      	subs	r3, #1
 80050e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	689a      	ldr	r2, [r3, #8]
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	4013      	ands	r3, r2
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	bf0c      	ite	eq
 80050f6:	2301      	moveq	r3, #1
 80050f8:	2300      	movne	r3, #0
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	461a      	mov	r2, r3
 80050fe:	79fb      	ldrb	r3, [r7, #7]
 8005100:	429a      	cmp	r2, r3
 8005102:	d19b      	bne.n	800503c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3720      	adds	r7, #32
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	20000400 	.word	0x20000400

08005114 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b088      	sub	sp, #32
 8005118:	af02      	add	r7, sp, #8
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	9300      	str	r3, [sp, #0]
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	2201      	movs	r2, #1
 8005128:	2102      	movs	r1, #2
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f7ff ff6a 	bl	8005004 <SPI_WaitFlagStateUntilTimeout>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d007      	beq.n	8005146 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800513a:	f043 0220 	orr.w	r2, r3, #32
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e032      	b.n	80051ac <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005146:	4b1b      	ldr	r3, [pc, #108]	@ (80051b4 <SPI_EndRxTxTransaction+0xa0>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a1b      	ldr	r2, [pc, #108]	@ (80051b8 <SPI_EndRxTxTransaction+0xa4>)
 800514c:	fba2 2303 	umull	r2, r3, r2, r3
 8005150:	0d5b      	lsrs	r3, r3, #21
 8005152:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005156:	fb02 f303 	mul.w	r3, r2, r3
 800515a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005164:	d112      	bne.n	800518c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	2200      	movs	r2, #0
 800516e:	2180      	movs	r1, #128	@ 0x80
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f7ff ff47 	bl	8005004 <SPI_WaitFlagStateUntilTimeout>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d016      	beq.n	80051aa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005180:	f043 0220 	orr.w	r2, r3, #32
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e00f      	b.n	80051ac <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00a      	beq.n	80051a8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	3b01      	subs	r3, #1
 8005196:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051a2:	2b80      	cmp	r3, #128	@ 0x80
 80051a4:	d0f2      	beq.n	800518c <SPI_EndRxTxTransaction+0x78>
 80051a6:	e000      	b.n	80051aa <SPI_EndRxTxTransaction+0x96>
        break;
 80051a8:	bf00      	nop
  }

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3718      	adds	r7, #24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	20000400 	.word	0x20000400
 80051b8:	165e9f81 	.word	0x165e9f81

080051bc <std>:
 80051bc:	2300      	movs	r3, #0
 80051be:	b510      	push	{r4, lr}
 80051c0:	4604      	mov	r4, r0
 80051c2:	e9c0 3300 	strd	r3, r3, [r0]
 80051c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051ca:	6083      	str	r3, [r0, #8]
 80051cc:	8181      	strh	r1, [r0, #12]
 80051ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80051d0:	81c2      	strh	r2, [r0, #14]
 80051d2:	6183      	str	r3, [r0, #24]
 80051d4:	4619      	mov	r1, r3
 80051d6:	2208      	movs	r2, #8
 80051d8:	305c      	adds	r0, #92	@ 0x5c
 80051da:	f000 f926 	bl	800542a <memset>
 80051de:	4b0d      	ldr	r3, [pc, #52]	@ (8005214 <std+0x58>)
 80051e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80051e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005218 <std+0x5c>)
 80051e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80051e6:	4b0d      	ldr	r3, [pc, #52]	@ (800521c <std+0x60>)
 80051e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80051ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005220 <std+0x64>)
 80051ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80051ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005224 <std+0x68>)
 80051f0:	6224      	str	r4, [r4, #32]
 80051f2:	429c      	cmp	r4, r3
 80051f4:	d006      	beq.n	8005204 <std+0x48>
 80051f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80051fa:	4294      	cmp	r4, r2
 80051fc:	d002      	beq.n	8005204 <std+0x48>
 80051fe:	33d0      	adds	r3, #208	@ 0xd0
 8005200:	429c      	cmp	r4, r3
 8005202:	d105      	bne.n	8005210 <std+0x54>
 8005204:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800520c:	f000 b986 	b.w	800551c <__retarget_lock_init_recursive>
 8005210:	bd10      	pop	{r4, pc}
 8005212:	bf00      	nop
 8005214:	080053a5 	.word	0x080053a5
 8005218:	080053c7 	.word	0x080053c7
 800521c:	080053ff 	.word	0x080053ff
 8005220:	08005423 	.word	0x08005423
 8005224:	20000a24 	.word	0x20000a24

08005228 <stdio_exit_handler>:
 8005228:	4a02      	ldr	r2, [pc, #8]	@ (8005234 <stdio_exit_handler+0xc>)
 800522a:	4903      	ldr	r1, [pc, #12]	@ (8005238 <stdio_exit_handler+0x10>)
 800522c:	4803      	ldr	r0, [pc, #12]	@ (800523c <stdio_exit_handler+0x14>)
 800522e:	f000 b869 	b.w	8005304 <_fwalk_sglue>
 8005232:	bf00      	nop
 8005234:	2000040c 	.word	0x2000040c
 8005238:	0800606d 	.word	0x0800606d
 800523c:	2000041c 	.word	0x2000041c

08005240 <cleanup_stdio>:
 8005240:	6841      	ldr	r1, [r0, #4]
 8005242:	4b0c      	ldr	r3, [pc, #48]	@ (8005274 <cleanup_stdio+0x34>)
 8005244:	4299      	cmp	r1, r3
 8005246:	b510      	push	{r4, lr}
 8005248:	4604      	mov	r4, r0
 800524a:	d001      	beq.n	8005250 <cleanup_stdio+0x10>
 800524c:	f000 ff0e 	bl	800606c <_fflush_r>
 8005250:	68a1      	ldr	r1, [r4, #8]
 8005252:	4b09      	ldr	r3, [pc, #36]	@ (8005278 <cleanup_stdio+0x38>)
 8005254:	4299      	cmp	r1, r3
 8005256:	d002      	beq.n	800525e <cleanup_stdio+0x1e>
 8005258:	4620      	mov	r0, r4
 800525a:	f000 ff07 	bl	800606c <_fflush_r>
 800525e:	68e1      	ldr	r1, [r4, #12]
 8005260:	4b06      	ldr	r3, [pc, #24]	@ (800527c <cleanup_stdio+0x3c>)
 8005262:	4299      	cmp	r1, r3
 8005264:	d004      	beq.n	8005270 <cleanup_stdio+0x30>
 8005266:	4620      	mov	r0, r4
 8005268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800526c:	f000 befe 	b.w	800606c <_fflush_r>
 8005270:	bd10      	pop	{r4, pc}
 8005272:	bf00      	nop
 8005274:	20000a24 	.word	0x20000a24
 8005278:	20000a8c 	.word	0x20000a8c
 800527c:	20000af4 	.word	0x20000af4

08005280 <global_stdio_init.part.0>:
 8005280:	b510      	push	{r4, lr}
 8005282:	4b0b      	ldr	r3, [pc, #44]	@ (80052b0 <global_stdio_init.part.0+0x30>)
 8005284:	4c0b      	ldr	r4, [pc, #44]	@ (80052b4 <global_stdio_init.part.0+0x34>)
 8005286:	4a0c      	ldr	r2, [pc, #48]	@ (80052b8 <global_stdio_init.part.0+0x38>)
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	4620      	mov	r0, r4
 800528c:	2200      	movs	r2, #0
 800528e:	2104      	movs	r1, #4
 8005290:	f7ff ff94 	bl	80051bc <std>
 8005294:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005298:	2201      	movs	r2, #1
 800529a:	2109      	movs	r1, #9
 800529c:	f7ff ff8e 	bl	80051bc <std>
 80052a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80052a4:	2202      	movs	r2, #2
 80052a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052aa:	2112      	movs	r1, #18
 80052ac:	f7ff bf86 	b.w	80051bc <std>
 80052b0:	20000b5c 	.word	0x20000b5c
 80052b4:	20000a24 	.word	0x20000a24
 80052b8:	08005229 	.word	0x08005229

080052bc <__sfp_lock_acquire>:
 80052bc:	4801      	ldr	r0, [pc, #4]	@ (80052c4 <__sfp_lock_acquire+0x8>)
 80052be:	f000 b92e 	b.w	800551e <__retarget_lock_acquire_recursive>
 80052c2:	bf00      	nop
 80052c4:	20000b65 	.word	0x20000b65

080052c8 <__sfp_lock_release>:
 80052c8:	4801      	ldr	r0, [pc, #4]	@ (80052d0 <__sfp_lock_release+0x8>)
 80052ca:	f000 b929 	b.w	8005520 <__retarget_lock_release_recursive>
 80052ce:	bf00      	nop
 80052d0:	20000b65 	.word	0x20000b65

080052d4 <__sinit>:
 80052d4:	b510      	push	{r4, lr}
 80052d6:	4604      	mov	r4, r0
 80052d8:	f7ff fff0 	bl	80052bc <__sfp_lock_acquire>
 80052dc:	6a23      	ldr	r3, [r4, #32]
 80052de:	b11b      	cbz	r3, 80052e8 <__sinit+0x14>
 80052e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052e4:	f7ff bff0 	b.w	80052c8 <__sfp_lock_release>
 80052e8:	4b04      	ldr	r3, [pc, #16]	@ (80052fc <__sinit+0x28>)
 80052ea:	6223      	str	r3, [r4, #32]
 80052ec:	4b04      	ldr	r3, [pc, #16]	@ (8005300 <__sinit+0x2c>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1f5      	bne.n	80052e0 <__sinit+0xc>
 80052f4:	f7ff ffc4 	bl	8005280 <global_stdio_init.part.0>
 80052f8:	e7f2      	b.n	80052e0 <__sinit+0xc>
 80052fa:	bf00      	nop
 80052fc:	08005241 	.word	0x08005241
 8005300:	20000b5c 	.word	0x20000b5c

08005304 <_fwalk_sglue>:
 8005304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005308:	4607      	mov	r7, r0
 800530a:	4688      	mov	r8, r1
 800530c:	4614      	mov	r4, r2
 800530e:	2600      	movs	r6, #0
 8005310:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005314:	f1b9 0901 	subs.w	r9, r9, #1
 8005318:	d505      	bpl.n	8005326 <_fwalk_sglue+0x22>
 800531a:	6824      	ldr	r4, [r4, #0]
 800531c:	2c00      	cmp	r4, #0
 800531e:	d1f7      	bne.n	8005310 <_fwalk_sglue+0xc>
 8005320:	4630      	mov	r0, r6
 8005322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005326:	89ab      	ldrh	r3, [r5, #12]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d907      	bls.n	800533c <_fwalk_sglue+0x38>
 800532c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005330:	3301      	adds	r3, #1
 8005332:	d003      	beq.n	800533c <_fwalk_sglue+0x38>
 8005334:	4629      	mov	r1, r5
 8005336:	4638      	mov	r0, r7
 8005338:	47c0      	blx	r8
 800533a:	4306      	orrs	r6, r0
 800533c:	3568      	adds	r5, #104	@ 0x68
 800533e:	e7e9      	b.n	8005314 <_fwalk_sglue+0x10>

08005340 <iprintf>:
 8005340:	b40f      	push	{r0, r1, r2, r3}
 8005342:	b507      	push	{r0, r1, r2, lr}
 8005344:	4906      	ldr	r1, [pc, #24]	@ (8005360 <iprintf+0x20>)
 8005346:	ab04      	add	r3, sp, #16
 8005348:	6808      	ldr	r0, [r1, #0]
 800534a:	f853 2b04 	ldr.w	r2, [r3], #4
 800534e:	6881      	ldr	r1, [r0, #8]
 8005350:	9301      	str	r3, [sp, #4]
 8005352:	f000 fb61 	bl	8005a18 <_vfiprintf_r>
 8005356:	b003      	add	sp, #12
 8005358:	f85d eb04 	ldr.w	lr, [sp], #4
 800535c:	b004      	add	sp, #16
 800535e:	4770      	bx	lr
 8005360:	20000418 	.word	0x20000418

08005364 <siprintf>:
 8005364:	b40e      	push	{r1, r2, r3}
 8005366:	b500      	push	{lr}
 8005368:	b09c      	sub	sp, #112	@ 0x70
 800536a:	ab1d      	add	r3, sp, #116	@ 0x74
 800536c:	9002      	str	r0, [sp, #8]
 800536e:	9006      	str	r0, [sp, #24]
 8005370:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005374:	4809      	ldr	r0, [pc, #36]	@ (800539c <siprintf+0x38>)
 8005376:	9107      	str	r1, [sp, #28]
 8005378:	9104      	str	r1, [sp, #16]
 800537a:	4909      	ldr	r1, [pc, #36]	@ (80053a0 <siprintf+0x3c>)
 800537c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005380:	9105      	str	r1, [sp, #20]
 8005382:	6800      	ldr	r0, [r0, #0]
 8005384:	9301      	str	r3, [sp, #4]
 8005386:	a902      	add	r1, sp, #8
 8005388:	f000 fa20 	bl	80057cc <_svfiprintf_r>
 800538c:	9b02      	ldr	r3, [sp, #8]
 800538e:	2200      	movs	r2, #0
 8005390:	701a      	strb	r2, [r3, #0]
 8005392:	b01c      	add	sp, #112	@ 0x70
 8005394:	f85d eb04 	ldr.w	lr, [sp], #4
 8005398:	b003      	add	sp, #12
 800539a:	4770      	bx	lr
 800539c:	20000418 	.word	0x20000418
 80053a0:	ffff0208 	.word	0xffff0208

080053a4 <__sread>:
 80053a4:	b510      	push	{r4, lr}
 80053a6:	460c      	mov	r4, r1
 80053a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053ac:	f000 f868 	bl	8005480 <_read_r>
 80053b0:	2800      	cmp	r0, #0
 80053b2:	bfab      	itete	ge
 80053b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80053b6:	89a3      	ldrhlt	r3, [r4, #12]
 80053b8:	181b      	addge	r3, r3, r0
 80053ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80053be:	bfac      	ite	ge
 80053c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80053c2:	81a3      	strhlt	r3, [r4, #12]
 80053c4:	bd10      	pop	{r4, pc}

080053c6 <__swrite>:
 80053c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053ca:	461f      	mov	r7, r3
 80053cc:	898b      	ldrh	r3, [r1, #12]
 80053ce:	05db      	lsls	r3, r3, #23
 80053d0:	4605      	mov	r5, r0
 80053d2:	460c      	mov	r4, r1
 80053d4:	4616      	mov	r6, r2
 80053d6:	d505      	bpl.n	80053e4 <__swrite+0x1e>
 80053d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053dc:	2302      	movs	r3, #2
 80053de:	2200      	movs	r2, #0
 80053e0:	f000 f83c 	bl	800545c <_lseek_r>
 80053e4:	89a3      	ldrh	r3, [r4, #12]
 80053e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80053ee:	81a3      	strh	r3, [r4, #12]
 80053f0:	4632      	mov	r2, r6
 80053f2:	463b      	mov	r3, r7
 80053f4:	4628      	mov	r0, r5
 80053f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053fa:	f000 b853 	b.w	80054a4 <_write_r>

080053fe <__sseek>:
 80053fe:	b510      	push	{r4, lr}
 8005400:	460c      	mov	r4, r1
 8005402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005406:	f000 f829 	bl	800545c <_lseek_r>
 800540a:	1c43      	adds	r3, r0, #1
 800540c:	89a3      	ldrh	r3, [r4, #12]
 800540e:	bf15      	itete	ne
 8005410:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005412:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005416:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800541a:	81a3      	strheq	r3, [r4, #12]
 800541c:	bf18      	it	ne
 800541e:	81a3      	strhne	r3, [r4, #12]
 8005420:	bd10      	pop	{r4, pc}

08005422 <__sclose>:
 8005422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005426:	f000 b809 	b.w	800543c <_close_r>

0800542a <memset>:
 800542a:	4402      	add	r2, r0
 800542c:	4603      	mov	r3, r0
 800542e:	4293      	cmp	r3, r2
 8005430:	d100      	bne.n	8005434 <memset+0xa>
 8005432:	4770      	bx	lr
 8005434:	f803 1b01 	strb.w	r1, [r3], #1
 8005438:	e7f9      	b.n	800542e <memset+0x4>
	...

0800543c <_close_r>:
 800543c:	b538      	push	{r3, r4, r5, lr}
 800543e:	4d06      	ldr	r5, [pc, #24]	@ (8005458 <_close_r+0x1c>)
 8005440:	2300      	movs	r3, #0
 8005442:	4604      	mov	r4, r0
 8005444:	4608      	mov	r0, r1
 8005446:	602b      	str	r3, [r5, #0]
 8005448:	f7fd fd8c 	bl	8002f64 <_close>
 800544c:	1c43      	adds	r3, r0, #1
 800544e:	d102      	bne.n	8005456 <_close_r+0x1a>
 8005450:	682b      	ldr	r3, [r5, #0]
 8005452:	b103      	cbz	r3, 8005456 <_close_r+0x1a>
 8005454:	6023      	str	r3, [r4, #0]
 8005456:	bd38      	pop	{r3, r4, r5, pc}
 8005458:	20000b60 	.word	0x20000b60

0800545c <_lseek_r>:
 800545c:	b538      	push	{r3, r4, r5, lr}
 800545e:	4d07      	ldr	r5, [pc, #28]	@ (800547c <_lseek_r+0x20>)
 8005460:	4604      	mov	r4, r0
 8005462:	4608      	mov	r0, r1
 8005464:	4611      	mov	r1, r2
 8005466:	2200      	movs	r2, #0
 8005468:	602a      	str	r2, [r5, #0]
 800546a:	461a      	mov	r2, r3
 800546c:	f7fd fda1 	bl	8002fb2 <_lseek>
 8005470:	1c43      	adds	r3, r0, #1
 8005472:	d102      	bne.n	800547a <_lseek_r+0x1e>
 8005474:	682b      	ldr	r3, [r5, #0]
 8005476:	b103      	cbz	r3, 800547a <_lseek_r+0x1e>
 8005478:	6023      	str	r3, [r4, #0]
 800547a:	bd38      	pop	{r3, r4, r5, pc}
 800547c:	20000b60 	.word	0x20000b60

08005480 <_read_r>:
 8005480:	b538      	push	{r3, r4, r5, lr}
 8005482:	4d07      	ldr	r5, [pc, #28]	@ (80054a0 <_read_r+0x20>)
 8005484:	4604      	mov	r4, r0
 8005486:	4608      	mov	r0, r1
 8005488:	4611      	mov	r1, r2
 800548a:	2200      	movs	r2, #0
 800548c:	602a      	str	r2, [r5, #0]
 800548e:	461a      	mov	r2, r3
 8005490:	f7fd fd2f 	bl	8002ef2 <_read>
 8005494:	1c43      	adds	r3, r0, #1
 8005496:	d102      	bne.n	800549e <_read_r+0x1e>
 8005498:	682b      	ldr	r3, [r5, #0]
 800549a:	b103      	cbz	r3, 800549e <_read_r+0x1e>
 800549c:	6023      	str	r3, [r4, #0]
 800549e:	bd38      	pop	{r3, r4, r5, pc}
 80054a0:	20000b60 	.word	0x20000b60

080054a4 <_write_r>:
 80054a4:	b538      	push	{r3, r4, r5, lr}
 80054a6:	4d07      	ldr	r5, [pc, #28]	@ (80054c4 <_write_r+0x20>)
 80054a8:	4604      	mov	r4, r0
 80054aa:	4608      	mov	r0, r1
 80054ac:	4611      	mov	r1, r2
 80054ae:	2200      	movs	r2, #0
 80054b0:	602a      	str	r2, [r5, #0]
 80054b2:	461a      	mov	r2, r3
 80054b4:	f7fd fd3a 	bl	8002f2c <_write>
 80054b8:	1c43      	adds	r3, r0, #1
 80054ba:	d102      	bne.n	80054c2 <_write_r+0x1e>
 80054bc:	682b      	ldr	r3, [r5, #0]
 80054be:	b103      	cbz	r3, 80054c2 <_write_r+0x1e>
 80054c0:	6023      	str	r3, [r4, #0]
 80054c2:	bd38      	pop	{r3, r4, r5, pc}
 80054c4:	20000b60 	.word	0x20000b60

080054c8 <__errno>:
 80054c8:	4b01      	ldr	r3, [pc, #4]	@ (80054d0 <__errno+0x8>)
 80054ca:	6818      	ldr	r0, [r3, #0]
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	20000418 	.word	0x20000418

080054d4 <__libc_init_array>:
 80054d4:	b570      	push	{r4, r5, r6, lr}
 80054d6:	4d0d      	ldr	r5, [pc, #52]	@ (800550c <__libc_init_array+0x38>)
 80054d8:	4c0d      	ldr	r4, [pc, #52]	@ (8005510 <__libc_init_array+0x3c>)
 80054da:	1b64      	subs	r4, r4, r5
 80054dc:	10a4      	asrs	r4, r4, #2
 80054de:	2600      	movs	r6, #0
 80054e0:	42a6      	cmp	r6, r4
 80054e2:	d109      	bne.n	80054f8 <__libc_init_array+0x24>
 80054e4:	4d0b      	ldr	r5, [pc, #44]	@ (8005514 <__libc_init_array+0x40>)
 80054e6:	4c0c      	ldr	r4, [pc, #48]	@ (8005518 <__libc_init_array+0x44>)
 80054e8:	f000 ff6e 	bl	80063c8 <_init>
 80054ec:	1b64      	subs	r4, r4, r5
 80054ee:	10a4      	asrs	r4, r4, #2
 80054f0:	2600      	movs	r6, #0
 80054f2:	42a6      	cmp	r6, r4
 80054f4:	d105      	bne.n	8005502 <__libc_init_array+0x2e>
 80054f6:	bd70      	pop	{r4, r5, r6, pc}
 80054f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80054fc:	4798      	blx	r3
 80054fe:	3601      	adds	r6, #1
 8005500:	e7ee      	b.n	80054e0 <__libc_init_array+0xc>
 8005502:	f855 3b04 	ldr.w	r3, [r5], #4
 8005506:	4798      	blx	r3
 8005508:	3601      	adds	r6, #1
 800550a:	e7f2      	b.n	80054f2 <__libc_init_array+0x1e>
 800550c:	0800723c 	.word	0x0800723c
 8005510:	0800723c 	.word	0x0800723c
 8005514:	0800723c 	.word	0x0800723c
 8005518:	08007240 	.word	0x08007240

0800551c <__retarget_lock_init_recursive>:
 800551c:	4770      	bx	lr

0800551e <__retarget_lock_acquire_recursive>:
 800551e:	4770      	bx	lr

08005520 <__retarget_lock_release_recursive>:
 8005520:	4770      	bx	lr
	...

08005524 <_free_r>:
 8005524:	b538      	push	{r3, r4, r5, lr}
 8005526:	4605      	mov	r5, r0
 8005528:	2900      	cmp	r1, #0
 800552a:	d041      	beq.n	80055b0 <_free_r+0x8c>
 800552c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005530:	1f0c      	subs	r4, r1, #4
 8005532:	2b00      	cmp	r3, #0
 8005534:	bfb8      	it	lt
 8005536:	18e4      	addlt	r4, r4, r3
 8005538:	f000 f8e0 	bl	80056fc <__malloc_lock>
 800553c:	4a1d      	ldr	r2, [pc, #116]	@ (80055b4 <_free_r+0x90>)
 800553e:	6813      	ldr	r3, [r2, #0]
 8005540:	b933      	cbnz	r3, 8005550 <_free_r+0x2c>
 8005542:	6063      	str	r3, [r4, #4]
 8005544:	6014      	str	r4, [r2, #0]
 8005546:	4628      	mov	r0, r5
 8005548:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800554c:	f000 b8dc 	b.w	8005708 <__malloc_unlock>
 8005550:	42a3      	cmp	r3, r4
 8005552:	d908      	bls.n	8005566 <_free_r+0x42>
 8005554:	6820      	ldr	r0, [r4, #0]
 8005556:	1821      	adds	r1, r4, r0
 8005558:	428b      	cmp	r3, r1
 800555a:	bf01      	itttt	eq
 800555c:	6819      	ldreq	r1, [r3, #0]
 800555e:	685b      	ldreq	r3, [r3, #4]
 8005560:	1809      	addeq	r1, r1, r0
 8005562:	6021      	streq	r1, [r4, #0]
 8005564:	e7ed      	b.n	8005542 <_free_r+0x1e>
 8005566:	461a      	mov	r2, r3
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	b10b      	cbz	r3, 8005570 <_free_r+0x4c>
 800556c:	42a3      	cmp	r3, r4
 800556e:	d9fa      	bls.n	8005566 <_free_r+0x42>
 8005570:	6811      	ldr	r1, [r2, #0]
 8005572:	1850      	adds	r0, r2, r1
 8005574:	42a0      	cmp	r0, r4
 8005576:	d10b      	bne.n	8005590 <_free_r+0x6c>
 8005578:	6820      	ldr	r0, [r4, #0]
 800557a:	4401      	add	r1, r0
 800557c:	1850      	adds	r0, r2, r1
 800557e:	4283      	cmp	r3, r0
 8005580:	6011      	str	r1, [r2, #0]
 8005582:	d1e0      	bne.n	8005546 <_free_r+0x22>
 8005584:	6818      	ldr	r0, [r3, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	6053      	str	r3, [r2, #4]
 800558a:	4408      	add	r0, r1
 800558c:	6010      	str	r0, [r2, #0]
 800558e:	e7da      	b.n	8005546 <_free_r+0x22>
 8005590:	d902      	bls.n	8005598 <_free_r+0x74>
 8005592:	230c      	movs	r3, #12
 8005594:	602b      	str	r3, [r5, #0]
 8005596:	e7d6      	b.n	8005546 <_free_r+0x22>
 8005598:	6820      	ldr	r0, [r4, #0]
 800559a:	1821      	adds	r1, r4, r0
 800559c:	428b      	cmp	r3, r1
 800559e:	bf04      	itt	eq
 80055a0:	6819      	ldreq	r1, [r3, #0]
 80055a2:	685b      	ldreq	r3, [r3, #4]
 80055a4:	6063      	str	r3, [r4, #4]
 80055a6:	bf04      	itt	eq
 80055a8:	1809      	addeq	r1, r1, r0
 80055aa:	6021      	streq	r1, [r4, #0]
 80055ac:	6054      	str	r4, [r2, #4]
 80055ae:	e7ca      	b.n	8005546 <_free_r+0x22>
 80055b0:	bd38      	pop	{r3, r4, r5, pc}
 80055b2:	bf00      	nop
 80055b4:	20000b6c 	.word	0x20000b6c

080055b8 <sbrk_aligned>:
 80055b8:	b570      	push	{r4, r5, r6, lr}
 80055ba:	4e0f      	ldr	r6, [pc, #60]	@ (80055f8 <sbrk_aligned+0x40>)
 80055bc:	460c      	mov	r4, r1
 80055be:	6831      	ldr	r1, [r6, #0]
 80055c0:	4605      	mov	r5, r0
 80055c2:	b911      	cbnz	r1, 80055ca <sbrk_aligned+0x12>
 80055c4:	f000 fe28 	bl	8006218 <_sbrk_r>
 80055c8:	6030      	str	r0, [r6, #0]
 80055ca:	4621      	mov	r1, r4
 80055cc:	4628      	mov	r0, r5
 80055ce:	f000 fe23 	bl	8006218 <_sbrk_r>
 80055d2:	1c43      	adds	r3, r0, #1
 80055d4:	d103      	bne.n	80055de <sbrk_aligned+0x26>
 80055d6:	f04f 34ff 	mov.w	r4, #4294967295
 80055da:	4620      	mov	r0, r4
 80055dc:	bd70      	pop	{r4, r5, r6, pc}
 80055de:	1cc4      	adds	r4, r0, #3
 80055e0:	f024 0403 	bic.w	r4, r4, #3
 80055e4:	42a0      	cmp	r0, r4
 80055e6:	d0f8      	beq.n	80055da <sbrk_aligned+0x22>
 80055e8:	1a21      	subs	r1, r4, r0
 80055ea:	4628      	mov	r0, r5
 80055ec:	f000 fe14 	bl	8006218 <_sbrk_r>
 80055f0:	3001      	adds	r0, #1
 80055f2:	d1f2      	bne.n	80055da <sbrk_aligned+0x22>
 80055f4:	e7ef      	b.n	80055d6 <sbrk_aligned+0x1e>
 80055f6:	bf00      	nop
 80055f8:	20000b68 	.word	0x20000b68

080055fc <_malloc_r>:
 80055fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005600:	1ccd      	adds	r5, r1, #3
 8005602:	f025 0503 	bic.w	r5, r5, #3
 8005606:	3508      	adds	r5, #8
 8005608:	2d0c      	cmp	r5, #12
 800560a:	bf38      	it	cc
 800560c:	250c      	movcc	r5, #12
 800560e:	2d00      	cmp	r5, #0
 8005610:	4606      	mov	r6, r0
 8005612:	db01      	blt.n	8005618 <_malloc_r+0x1c>
 8005614:	42a9      	cmp	r1, r5
 8005616:	d904      	bls.n	8005622 <_malloc_r+0x26>
 8005618:	230c      	movs	r3, #12
 800561a:	6033      	str	r3, [r6, #0]
 800561c:	2000      	movs	r0, #0
 800561e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005622:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80056f8 <_malloc_r+0xfc>
 8005626:	f000 f869 	bl	80056fc <__malloc_lock>
 800562a:	f8d8 3000 	ldr.w	r3, [r8]
 800562e:	461c      	mov	r4, r3
 8005630:	bb44      	cbnz	r4, 8005684 <_malloc_r+0x88>
 8005632:	4629      	mov	r1, r5
 8005634:	4630      	mov	r0, r6
 8005636:	f7ff ffbf 	bl	80055b8 <sbrk_aligned>
 800563a:	1c43      	adds	r3, r0, #1
 800563c:	4604      	mov	r4, r0
 800563e:	d158      	bne.n	80056f2 <_malloc_r+0xf6>
 8005640:	f8d8 4000 	ldr.w	r4, [r8]
 8005644:	4627      	mov	r7, r4
 8005646:	2f00      	cmp	r7, #0
 8005648:	d143      	bne.n	80056d2 <_malloc_r+0xd6>
 800564a:	2c00      	cmp	r4, #0
 800564c:	d04b      	beq.n	80056e6 <_malloc_r+0xea>
 800564e:	6823      	ldr	r3, [r4, #0]
 8005650:	4639      	mov	r1, r7
 8005652:	4630      	mov	r0, r6
 8005654:	eb04 0903 	add.w	r9, r4, r3
 8005658:	f000 fdde 	bl	8006218 <_sbrk_r>
 800565c:	4581      	cmp	r9, r0
 800565e:	d142      	bne.n	80056e6 <_malloc_r+0xea>
 8005660:	6821      	ldr	r1, [r4, #0]
 8005662:	1a6d      	subs	r5, r5, r1
 8005664:	4629      	mov	r1, r5
 8005666:	4630      	mov	r0, r6
 8005668:	f7ff ffa6 	bl	80055b8 <sbrk_aligned>
 800566c:	3001      	adds	r0, #1
 800566e:	d03a      	beq.n	80056e6 <_malloc_r+0xea>
 8005670:	6823      	ldr	r3, [r4, #0]
 8005672:	442b      	add	r3, r5
 8005674:	6023      	str	r3, [r4, #0]
 8005676:	f8d8 3000 	ldr.w	r3, [r8]
 800567a:	685a      	ldr	r2, [r3, #4]
 800567c:	bb62      	cbnz	r2, 80056d8 <_malloc_r+0xdc>
 800567e:	f8c8 7000 	str.w	r7, [r8]
 8005682:	e00f      	b.n	80056a4 <_malloc_r+0xa8>
 8005684:	6822      	ldr	r2, [r4, #0]
 8005686:	1b52      	subs	r2, r2, r5
 8005688:	d420      	bmi.n	80056cc <_malloc_r+0xd0>
 800568a:	2a0b      	cmp	r2, #11
 800568c:	d917      	bls.n	80056be <_malloc_r+0xc2>
 800568e:	1961      	adds	r1, r4, r5
 8005690:	42a3      	cmp	r3, r4
 8005692:	6025      	str	r5, [r4, #0]
 8005694:	bf18      	it	ne
 8005696:	6059      	strne	r1, [r3, #4]
 8005698:	6863      	ldr	r3, [r4, #4]
 800569a:	bf08      	it	eq
 800569c:	f8c8 1000 	streq.w	r1, [r8]
 80056a0:	5162      	str	r2, [r4, r5]
 80056a2:	604b      	str	r3, [r1, #4]
 80056a4:	4630      	mov	r0, r6
 80056a6:	f000 f82f 	bl	8005708 <__malloc_unlock>
 80056aa:	f104 000b 	add.w	r0, r4, #11
 80056ae:	1d23      	adds	r3, r4, #4
 80056b0:	f020 0007 	bic.w	r0, r0, #7
 80056b4:	1ac2      	subs	r2, r0, r3
 80056b6:	bf1c      	itt	ne
 80056b8:	1a1b      	subne	r3, r3, r0
 80056ba:	50a3      	strne	r3, [r4, r2]
 80056bc:	e7af      	b.n	800561e <_malloc_r+0x22>
 80056be:	6862      	ldr	r2, [r4, #4]
 80056c0:	42a3      	cmp	r3, r4
 80056c2:	bf0c      	ite	eq
 80056c4:	f8c8 2000 	streq.w	r2, [r8]
 80056c8:	605a      	strne	r2, [r3, #4]
 80056ca:	e7eb      	b.n	80056a4 <_malloc_r+0xa8>
 80056cc:	4623      	mov	r3, r4
 80056ce:	6864      	ldr	r4, [r4, #4]
 80056d0:	e7ae      	b.n	8005630 <_malloc_r+0x34>
 80056d2:	463c      	mov	r4, r7
 80056d4:	687f      	ldr	r7, [r7, #4]
 80056d6:	e7b6      	b.n	8005646 <_malloc_r+0x4a>
 80056d8:	461a      	mov	r2, r3
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	42a3      	cmp	r3, r4
 80056de:	d1fb      	bne.n	80056d8 <_malloc_r+0xdc>
 80056e0:	2300      	movs	r3, #0
 80056e2:	6053      	str	r3, [r2, #4]
 80056e4:	e7de      	b.n	80056a4 <_malloc_r+0xa8>
 80056e6:	230c      	movs	r3, #12
 80056e8:	6033      	str	r3, [r6, #0]
 80056ea:	4630      	mov	r0, r6
 80056ec:	f000 f80c 	bl	8005708 <__malloc_unlock>
 80056f0:	e794      	b.n	800561c <_malloc_r+0x20>
 80056f2:	6005      	str	r5, [r0, #0]
 80056f4:	e7d6      	b.n	80056a4 <_malloc_r+0xa8>
 80056f6:	bf00      	nop
 80056f8:	20000b6c 	.word	0x20000b6c

080056fc <__malloc_lock>:
 80056fc:	4801      	ldr	r0, [pc, #4]	@ (8005704 <__malloc_lock+0x8>)
 80056fe:	f7ff bf0e 	b.w	800551e <__retarget_lock_acquire_recursive>
 8005702:	bf00      	nop
 8005704:	20000b64 	.word	0x20000b64

08005708 <__malloc_unlock>:
 8005708:	4801      	ldr	r0, [pc, #4]	@ (8005710 <__malloc_unlock+0x8>)
 800570a:	f7ff bf09 	b.w	8005520 <__retarget_lock_release_recursive>
 800570e:	bf00      	nop
 8005710:	20000b64 	.word	0x20000b64

08005714 <__ssputs_r>:
 8005714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005718:	688e      	ldr	r6, [r1, #8]
 800571a:	461f      	mov	r7, r3
 800571c:	42be      	cmp	r6, r7
 800571e:	680b      	ldr	r3, [r1, #0]
 8005720:	4682      	mov	sl, r0
 8005722:	460c      	mov	r4, r1
 8005724:	4690      	mov	r8, r2
 8005726:	d82d      	bhi.n	8005784 <__ssputs_r+0x70>
 8005728:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800572c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005730:	d026      	beq.n	8005780 <__ssputs_r+0x6c>
 8005732:	6965      	ldr	r5, [r4, #20]
 8005734:	6909      	ldr	r1, [r1, #16]
 8005736:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800573a:	eba3 0901 	sub.w	r9, r3, r1
 800573e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005742:	1c7b      	adds	r3, r7, #1
 8005744:	444b      	add	r3, r9
 8005746:	106d      	asrs	r5, r5, #1
 8005748:	429d      	cmp	r5, r3
 800574a:	bf38      	it	cc
 800574c:	461d      	movcc	r5, r3
 800574e:	0553      	lsls	r3, r2, #21
 8005750:	d527      	bpl.n	80057a2 <__ssputs_r+0x8e>
 8005752:	4629      	mov	r1, r5
 8005754:	f7ff ff52 	bl	80055fc <_malloc_r>
 8005758:	4606      	mov	r6, r0
 800575a:	b360      	cbz	r0, 80057b6 <__ssputs_r+0xa2>
 800575c:	6921      	ldr	r1, [r4, #16]
 800575e:	464a      	mov	r2, r9
 8005760:	f000 fd6a 	bl	8006238 <memcpy>
 8005764:	89a3      	ldrh	r3, [r4, #12]
 8005766:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800576a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800576e:	81a3      	strh	r3, [r4, #12]
 8005770:	6126      	str	r6, [r4, #16]
 8005772:	6165      	str	r5, [r4, #20]
 8005774:	444e      	add	r6, r9
 8005776:	eba5 0509 	sub.w	r5, r5, r9
 800577a:	6026      	str	r6, [r4, #0]
 800577c:	60a5      	str	r5, [r4, #8]
 800577e:	463e      	mov	r6, r7
 8005780:	42be      	cmp	r6, r7
 8005782:	d900      	bls.n	8005786 <__ssputs_r+0x72>
 8005784:	463e      	mov	r6, r7
 8005786:	6820      	ldr	r0, [r4, #0]
 8005788:	4632      	mov	r2, r6
 800578a:	4641      	mov	r1, r8
 800578c:	f000 fd2a 	bl	80061e4 <memmove>
 8005790:	68a3      	ldr	r3, [r4, #8]
 8005792:	1b9b      	subs	r3, r3, r6
 8005794:	60a3      	str	r3, [r4, #8]
 8005796:	6823      	ldr	r3, [r4, #0]
 8005798:	4433      	add	r3, r6
 800579a:	6023      	str	r3, [r4, #0]
 800579c:	2000      	movs	r0, #0
 800579e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057a2:	462a      	mov	r2, r5
 80057a4:	f000 fd56 	bl	8006254 <_realloc_r>
 80057a8:	4606      	mov	r6, r0
 80057aa:	2800      	cmp	r0, #0
 80057ac:	d1e0      	bne.n	8005770 <__ssputs_r+0x5c>
 80057ae:	6921      	ldr	r1, [r4, #16]
 80057b0:	4650      	mov	r0, sl
 80057b2:	f7ff feb7 	bl	8005524 <_free_r>
 80057b6:	230c      	movs	r3, #12
 80057b8:	f8ca 3000 	str.w	r3, [sl]
 80057bc:	89a3      	ldrh	r3, [r4, #12]
 80057be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057c2:	81a3      	strh	r3, [r4, #12]
 80057c4:	f04f 30ff 	mov.w	r0, #4294967295
 80057c8:	e7e9      	b.n	800579e <__ssputs_r+0x8a>
	...

080057cc <_svfiprintf_r>:
 80057cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057d0:	4698      	mov	r8, r3
 80057d2:	898b      	ldrh	r3, [r1, #12]
 80057d4:	061b      	lsls	r3, r3, #24
 80057d6:	b09d      	sub	sp, #116	@ 0x74
 80057d8:	4607      	mov	r7, r0
 80057da:	460d      	mov	r5, r1
 80057dc:	4614      	mov	r4, r2
 80057de:	d510      	bpl.n	8005802 <_svfiprintf_r+0x36>
 80057e0:	690b      	ldr	r3, [r1, #16]
 80057e2:	b973      	cbnz	r3, 8005802 <_svfiprintf_r+0x36>
 80057e4:	2140      	movs	r1, #64	@ 0x40
 80057e6:	f7ff ff09 	bl	80055fc <_malloc_r>
 80057ea:	6028      	str	r0, [r5, #0]
 80057ec:	6128      	str	r0, [r5, #16]
 80057ee:	b930      	cbnz	r0, 80057fe <_svfiprintf_r+0x32>
 80057f0:	230c      	movs	r3, #12
 80057f2:	603b      	str	r3, [r7, #0]
 80057f4:	f04f 30ff 	mov.w	r0, #4294967295
 80057f8:	b01d      	add	sp, #116	@ 0x74
 80057fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057fe:	2340      	movs	r3, #64	@ 0x40
 8005800:	616b      	str	r3, [r5, #20]
 8005802:	2300      	movs	r3, #0
 8005804:	9309      	str	r3, [sp, #36]	@ 0x24
 8005806:	2320      	movs	r3, #32
 8005808:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800580c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005810:	2330      	movs	r3, #48	@ 0x30
 8005812:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80059b0 <_svfiprintf_r+0x1e4>
 8005816:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800581a:	f04f 0901 	mov.w	r9, #1
 800581e:	4623      	mov	r3, r4
 8005820:	469a      	mov	sl, r3
 8005822:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005826:	b10a      	cbz	r2, 800582c <_svfiprintf_r+0x60>
 8005828:	2a25      	cmp	r2, #37	@ 0x25
 800582a:	d1f9      	bne.n	8005820 <_svfiprintf_r+0x54>
 800582c:	ebba 0b04 	subs.w	fp, sl, r4
 8005830:	d00b      	beq.n	800584a <_svfiprintf_r+0x7e>
 8005832:	465b      	mov	r3, fp
 8005834:	4622      	mov	r2, r4
 8005836:	4629      	mov	r1, r5
 8005838:	4638      	mov	r0, r7
 800583a:	f7ff ff6b 	bl	8005714 <__ssputs_r>
 800583e:	3001      	adds	r0, #1
 8005840:	f000 80a7 	beq.w	8005992 <_svfiprintf_r+0x1c6>
 8005844:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005846:	445a      	add	r2, fp
 8005848:	9209      	str	r2, [sp, #36]	@ 0x24
 800584a:	f89a 3000 	ldrb.w	r3, [sl]
 800584e:	2b00      	cmp	r3, #0
 8005850:	f000 809f 	beq.w	8005992 <_svfiprintf_r+0x1c6>
 8005854:	2300      	movs	r3, #0
 8005856:	f04f 32ff 	mov.w	r2, #4294967295
 800585a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800585e:	f10a 0a01 	add.w	sl, sl, #1
 8005862:	9304      	str	r3, [sp, #16]
 8005864:	9307      	str	r3, [sp, #28]
 8005866:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800586a:	931a      	str	r3, [sp, #104]	@ 0x68
 800586c:	4654      	mov	r4, sl
 800586e:	2205      	movs	r2, #5
 8005870:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005874:	484e      	ldr	r0, [pc, #312]	@ (80059b0 <_svfiprintf_r+0x1e4>)
 8005876:	f7fa fcbb 	bl	80001f0 <memchr>
 800587a:	9a04      	ldr	r2, [sp, #16]
 800587c:	b9d8      	cbnz	r0, 80058b6 <_svfiprintf_r+0xea>
 800587e:	06d0      	lsls	r0, r2, #27
 8005880:	bf44      	itt	mi
 8005882:	2320      	movmi	r3, #32
 8005884:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005888:	0711      	lsls	r1, r2, #28
 800588a:	bf44      	itt	mi
 800588c:	232b      	movmi	r3, #43	@ 0x2b
 800588e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005892:	f89a 3000 	ldrb.w	r3, [sl]
 8005896:	2b2a      	cmp	r3, #42	@ 0x2a
 8005898:	d015      	beq.n	80058c6 <_svfiprintf_r+0xfa>
 800589a:	9a07      	ldr	r2, [sp, #28]
 800589c:	4654      	mov	r4, sl
 800589e:	2000      	movs	r0, #0
 80058a0:	f04f 0c0a 	mov.w	ip, #10
 80058a4:	4621      	mov	r1, r4
 80058a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058aa:	3b30      	subs	r3, #48	@ 0x30
 80058ac:	2b09      	cmp	r3, #9
 80058ae:	d94b      	bls.n	8005948 <_svfiprintf_r+0x17c>
 80058b0:	b1b0      	cbz	r0, 80058e0 <_svfiprintf_r+0x114>
 80058b2:	9207      	str	r2, [sp, #28]
 80058b4:	e014      	b.n	80058e0 <_svfiprintf_r+0x114>
 80058b6:	eba0 0308 	sub.w	r3, r0, r8
 80058ba:	fa09 f303 	lsl.w	r3, r9, r3
 80058be:	4313      	orrs	r3, r2
 80058c0:	9304      	str	r3, [sp, #16]
 80058c2:	46a2      	mov	sl, r4
 80058c4:	e7d2      	b.n	800586c <_svfiprintf_r+0xa0>
 80058c6:	9b03      	ldr	r3, [sp, #12]
 80058c8:	1d19      	adds	r1, r3, #4
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	9103      	str	r1, [sp, #12]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	bfbb      	ittet	lt
 80058d2:	425b      	neglt	r3, r3
 80058d4:	f042 0202 	orrlt.w	r2, r2, #2
 80058d8:	9307      	strge	r3, [sp, #28]
 80058da:	9307      	strlt	r3, [sp, #28]
 80058dc:	bfb8      	it	lt
 80058de:	9204      	strlt	r2, [sp, #16]
 80058e0:	7823      	ldrb	r3, [r4, #0]
 80058e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80058e4:	d10a      	bne.n	80058fc <_svfiprintf_r+0x130>
 80058e6:	7863      	ldrb	r3, [r4, #1]
 80058e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80058ea:	d132      	bne.n	8005952 <_svfiprintf_r+0x186>
 80058ec:	9b03      	ldr	r3, [sp, #12]
 80058ee:	1d1a      	adds	r2, r3, #4
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	9203      	str	r2, [sp, #12]
 80058f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80058f8:	3402      	adds	r4, #2
 80058fa:	9305      	str	r3, [sp, #20]
 80058fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80059c0 <_svfiprintf_r+0x1f4>
 8005900:	7821      	ldrb	r1, [r4, #0]
 8005902:	2203      	movs	r2, #3
 8005904:	4650      	mov	r0, sl
 8005906:	f7fa fc73 	bl	80001f0 <memchr>
 800590a:	b138      	cbz	r0, 800591c <_svfiprintf_r+0x150>
 800590c:	9b04      	ldr	r3, [sp, #16]
 800590e:	eba0 000a 	sub.w	r0, r0, sl
 8005912:	2240      	movs	r2, #64	@ 0x40
 8005914:	4082      	lsls	r2, r0
 8005916:	4313      	orrs	r3, r2
 8005918:	3401      	adds	r4, #1
 800591a:	9304      	str	r3, [sp, #16]
 800591c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005920:	4824      	ldr	r0, [pc, #144]	@ (80059b4 <_svfiprintf_r+0x1e8>)
 8005922:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005926:	2206      	movs	r2, #6
 8005928:	f7fa fc62 	bl	80001f0 <memchr>
 800592c:	2800      	cmp	r0, #0
 800592e:	d036      	beq.n	800599e <_svfiprintf_r+0x1d2>
 8005930:	4b21      	ldr	r3, [pc, #132]	@ (80059b8 <_svfiprintf_r+0x1ec>)
 8005932:	bb1b      	cbnz	r3, 800597c <_svfiprintf_r+0x1b0>
 8005934:	9b03      	ldr	r3, [sp, #12]
 8005936:	3307      	adds	r3, #7
 8005938:	f023 0307 	bic.w	r3, r3, #7
 800593c:	3308      	adds	r3, #8
 800593e:	9303      	str	r3, [sp, #12]
 8005940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005942:	4433      	add	r3, r6
 8005944:	9309      	str	r3, [sp, #36]	@ 0x24
 8005946:	e76a      	b.n	800581e <_svfiprintf_r+0x52>
 8005948:	fb0c 3202 	mla	r2, ip, r2, r3
 800594c:	460c      	mov	r4, r1
 800594e:	2001      	movs	r0, #1
 8005950:	e7a8      	b.n	80058a4 <_svfiprintf_r+0xd8>
 8005952:	2300      	movs	r3, #0
 8005954:	3401      	adds	r4, #1
 8005956:	9305      	str	r3, [sp, #20]
 8005958:	4619      	mov	r1, r3
 800595a:	f04f 0c0a 	mov.w	ip, #10
 800595e:	4620      	mov	r0, r4
 8005960:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005964:	3a30      	subs	r2, #48	@ 0x30
 8005966:	2a09      	cmp	r2, #9
 8005968:	d903      	bls.n	8005972 <_svfiprintf_r+0x1a6>
 800596a:	2b00      	cmp	r3, #0
 800596c:	d0c6      	beq.n	80058fc <_svfiprintf_r+0x130>
 800596e:	9105      	str	r1, [sp, #20]
 8005970:	e7c4      	b.n	80058fc <_svfiprintf_r+0x130>
 8005972:	fb0c 2101 	mla	r1, ip, r1, r2
 8005976:	4604      	mov	r4, r0
 8005978:	2301      	movs	r3, #1
 800597a:	e7f0      	b.n	800595e <_svfiprintf_r+0x192>
 800597c:	ab03      	add	r3, sp, #12
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	462a      	mov	r2, r5
 8005982:	4b0e      	ldr	r3, [pc, #56]	@ (80059bc <_svfiprintf_r+0x1f0>)
 8005984:	a904      	add	r1, sp, #16
 8005986:	4638      	mov	r0, r7
 8005988:	f3af 8000 	nop.w
 800598c:	1c42      	adds	r2, r0, #1
 800598e:	4606      	mov	r6, r0
 8005990:	d1d6      	bne.n	8005940 <_svfiprintf_r+0x174>
 8005992:	89ab      	ldrh	r3, [r5, #12]
 8005994:	065b      	lsls	r3, r3, #25
 8005996:	f53f af2d 	bmi.w	80057f4 <_svfiprintf_r+0x28>
 800599a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800599c:	e72c      	b.n	80057f8 <_svfiprintf_r+0x2c>
 800599e:	ab03      	add	r3, sp, #12
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	462a      	mov	r2, r5
 80059a4:	4b05      	ldr	r3, [pc, #20]	@ (80059bc <_svfiprintf_r+0x1f0>)
 80059a6:	a904      	add	r1, sp, #16
 80059a8:	4638      	mov	r0, r7
 80059aa:	f000 f9bb 	bl	8005d24 <_printf_i>
 80059ae:	e7ed      	b.n	800598c <_svfiprintf_r+0x1c0>
 80059b0:	08007200 	.word	0x08007200
 80059b4:	0800720a 	.word	0x0800720a
 80059b8:	00000000 	.word	0x00000000
 80059bc:	08005715 	.word	0x08005715
 80059c0:	08007206 	.word	0x08007206

080059c4 <__sfputc_r>:
 80059c4:	6893      	ldr	r3, [r2, #8]
 80059c6:	3b01      	subs	r3, #1
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	b410      	push	{r4}
 80059cc:	6093      	str	r3, [r2, #8]
 80059ce:	da08      	bge.n	80059e2 <__sfputc_r+0x1e>
 80059d0:	6994      	ldr	r4, [r2, #24]
 80059d2:	42a3      	cmp	r3, r4
 80059d4:	db01      	blt.n	80059da <__sfputc_r+0x16>
 80059d6:	290a      	cmp	r1, #10
 80059d8:	d103      	bne.n	80059e2 <__sfputc_r+0x1e>
 80059da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059de:	f000 bb6d 	b.w	80060bc <__swbuf_r>
 80059e2:	6813      	ldr	r3, [r2, #0]
 80059e4:	1c58      	adds	r0, r3, #1
 80059e6:	6010      	str	r0, [r2, #0]
 80059e8:	7019      	strb	r1, [r3, #0]
 80059ea:	4608      	mov	r0, r1
 80059ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059f0:	4770      	bx	lr

080059f2 <__sfputs_r>:
 80059f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059f4:	4606      	mov	r6, r0
 80059f6:	460f      	mov	r7, r1
 80059f8:	4614      	mov	r4, r2
 80059fa:	18d5      	adds	r5, r2, r3
 80059fc:	42ac      	cmp	r4, r5
 80059fe:	d101      	bne.n	8005a04 <__sfputs_r+0x12>
 8005a00:	2000      	movs	r0, #0
 8005a02:	e007      	b.n	8005a14 <__sfputs_r+0x22>
 8005a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a08:	463a      	mov	r2, r7
 8005a0a:	4630      	mov	r0, r6
 8005a0c:	f7ff ffda 	bl	80059c4 <__sfputc_r>
 8005a10:	1c43      	adds	r3, r0, #1
 8005a12:	d1f3      	bne.n	80059fc <__sfputs_r+0xa>
 8005a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a18 <_vfiprintf_r>:
 8005a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a1c:	460d      	mov	r5, r1
 8005a1e:	b09d      	sub	sp, #116	@ 0x74
 8005a20:	4614      	mov	r4, r2
 8005a22:	4698      	mov	r8, r3
 8005a24:	4606      	mov	r6, r0
 8005a26:	b118      	cbz	r0, 8005a30 <_vfiprintf_r+0x18>
 8005a28:	6a03      	ldr	r3, [r0, #32]
 8005a2a:	b90b      	cbnz	r3, 8005a30 <_vfiprintf_r+0x18>
 8005a2c:	f7ff fc52 	bl	80052d4 <__sinit>
 8005a30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a32:	07d9      	lsls	r1, r3, #31
 8005a34:	d405      	bmi.n	8005a42 <_vfiprintf_r+0x2a>
 8005a36:	89ab      	ldrh	r3, [r5, #12]
 8005a38:	059a      	lsls	r2, r3, #22
 8005a3a:	d402      	bmi.n	8005a42 <_vfiprintf_r+0x2a>
 8005a3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a3e:	f7ff fd6e 	bl	800551e <__retarget_lock_acquire_recursive>
 8005a42:	89ab      	ldrh	r3, [r5, #12]
 8005a44:	071b      	lsls	r3, r3, #28
 8005a46:	d501      	bpl.n	8005a4c <_vfiprintf_r+0x34>
 8005a48:	692b      	ldr	r3, [r5, #16]
 8005a4a:	b99b      	cbnz	r3, 8005a74 <_vfiprintf_r+0x5c>
 8005a4c:	4629      	mov	r1, r5
 8005a4e:	4630      	mov	r0, r6
 8005a50:	f000 fb72 	bl	8006138 <__swsetup_r>
 8005a54:	b170      	cbz	r0, 8005a74 <_vfiprintf_r+0x5c>
 8005a56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a58:	07dc      	lsls	r4, r3, #31
 8005a5a:	d504      	bpl.n	8005a66 <_vfiprintf_r+0x4e>
 8005a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a60:	b01d      	add	sp, #116	@ 0x74
 8005a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a66:	89ab      	ldrh	r3, [r5, #12]
 8005a68:	0598      	lsls	r0, r3, #22
 8005a6a:	d4f7      	bmi.n	8005a5c <_vfiprintf_r+0x44>
 8005a6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a6e:	f7ff fd57 	bl	8005520 <__retarget_lock_release_recursive>
 8005a72:	e7f3      	b.n	8005a5c <_vfiprintf_r+0x44>
 8005a74:	2300      	movs	r3, #0
 8005a76:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a78:	2320      	movs	r3, #32
 8005a7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005a7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a82:	2330      	movs	r3, #48	@ 0x30
 8005a84:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005c34 <_vfiprintf_r+0x21c>
 8005a88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a8c:	f04f 0901 	mov.w	r9, #1
 8005a90:	4623      	mov	r3, r4
 8005a92:	469a      	mov	sl, r3
 8005a94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a98:	b10a      	cbz	r2, 8005a9e <_vfiprintf_r+0x86>
 8005a9a:	2a25      	cmp	r2, #37	@ 0x25
 8005a9c:	d1f9      	bne.n	8005a92 <_vfiprintf_r+0x7a>
 8005a9e:	ebba 0b04 	subs.w	fp, sl, r4
 8005aa2:	d00b      	beq.n	8005abc <_vfiprintf_r+0xa4>
 8005aa4:	465b      	mov	r3, fp
 8005aa6:	4622      	mov	r2, r4
 8005aa8:	4629      	mov	r1, r5
 8005aaa:	4630      	mov	r0, r6
 8005aac:	f7ff ffa1 	bl	80059f2 <__sfputs_r>
 8005ab0:	3001      	adds	r0, #1
 8005ab2:	f000 80a7 	beq.w	8005c04 <_vfiprintf_r+0x1ec>
 8005ab6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ab8:	445a      	add	r2, fp
 8005aba:	9209      	str	r2, [sp, #36]	@ 0x24
 8005abc:	f89a 3000 	ldrb.w	r3, [sl]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 809f 	beq.w	8005c04 <_vfiprintf_r+0x1ec>
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8005acc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ad0:	f10a 0a01 	add.w	sl, sl, #1
 8005ad4:	9304      	str	r3, [sp, #16]
 8005ad6:	9307      	str	r3, [sp, #28]
 8005ad8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005adc:	931a      	str	r3, [sp, #104]	@ 0x68
 8005ade:	4654      	mov	r4, sl
 8005ae0:	2205      	movs	r2, #5
 8005ae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ae6:	4853      	ldr	r0, [pc, #332]	@ (8005c34 <_vfiprintf_r+0x21c>)
 8005ae8:	f7fa fb82 	bl	80001f0 <memchr>
 8005aec:	9a04      	ldr	r2, [sp, #16]
 8005aee:	b9d8      	cbnz	r0, 8005b28 <_vfiprintf_r+0x110>
 8005af0:	06d1      	lsls	r1, r2, #27
 8005af2:	bf44      	itt	mi
 8005af4:	2320      	movmi	r3, #32
 8005af6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005afa:	0713      	lsls	r3, r2, #28
 8005afc:	bf44      	itt	mi
 8005afe:	232b      	movmi	r3, #43	@ 0x2b
 8005b00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b04:	f89a 3000 	ldrb.w	r3, [sl]
 8005b08:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b0a:	d015      	beq.n	8005b38 <_vfiprintf_r+0x120>
 8005b0c:	9a07      	ldr	r2, [sp, #28]
 8005b0e:	4654      	mov	r4, sl
 8005b10:	2000      	movs	r0, #0
 8005b12:	f04f 0c0a 	mov.w	ip, #10
 8005b16:	4621      	mov	r1, r4
 8005b18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b1c:	3b30      	subs	r3, #48	@ 0x30
 8005b1e:	2b09      	cmp	r3, #9
 8005b20:	d94b      	bls.n	8005bba <_vfiprintf_r+0x1a2>
 8005b22:	b1b0      	cbz	r0, 8005b52 <_vfiprintf_r+0x13a>
 8005b24:	9207      	str	r2, [sp, #28]
 8005b26:	e014      	b.n	8005b52 <_vfiprintf_r+0x13a>
 8005b28:	eba0 0308 	sub.w	r3, r0, r8
 8005b2c:	fa09 f303 	lsl.w	r3, r9, r3
 8005b30:	4313      	orrs	r3, r2
 8005b32:	9304      	str	r3, [sp, #16]
 8005b34:	46a2      	mov	sl, r4
 8005b36:	e7d2      	b.n	8005ade <_vfiprintf_r+0xc6>
 8005b38:	9b03      	ldr	r3, [sp, #12]
 8005b3a:	1d19      	adds	r1, r3, #4
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	9103      	str	r1, [sp, #12]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	bfbb      	ittet	lt
 8005b44:	425b      	neglt	r3, r3
 8005b46:	f042 0202 	orrlt.w	r2, r2, #2
 8005b4a:	9307      	strge	r3, [sp, #28]
 8005b4c:	9307      	strlt	r3, [sp, #28]
 8005b4e:	bfb8      	it	lt
 8005b50:	9204      	strlt	r2, [sp, #16]
 8005b52:	7823      	ldrb	r3, [r4, #0]
 8005b54:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b56:	d10a      	bne.n	8005b6e <_vfiprintf_r+0x156>
 8005b58:	7863      	ldrb	r3, [r4, #1]
 8005b5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b5c:	d132      	bne.n	8005bc4 <_vfiprintf_r+0x1ac>
 8005b5e:	9b03      	ldr	r3, [sp, #12]
 8005b60:	1d1a      	adds	r2, r3, #4
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	9203      	str	r2, [sp, #12]
 8005b66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b6a:	3402      	adds	r4, #2
 8005b6c:	9305      	str	r3, [sp, #20]
 8005b6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005c44 <_vfiprintf_r+0x22c>
 8005b72:	7821      	ldrb	r1, [r4, #0]
 8005b74:	2203      	movs	r2, #3
 8005b76:	4650      	mov	r0, sl
 8005b78:	f7fa fb3a 	bl	80001f0 <memchr>
 8005b7c:	b138      	cbz	r0, 8005b8e <_vfiprintf_r+0x176>
 8005b7e:	9b04      	ldr	r3, [sp, #16]
 8005b80:	eba0 000a 	sub.w	r0, r0, sl
 8005b84:	2240      	movs	r2, #64	@ 0x40
 8005b86:	4082      	lsls	r2, r0
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	3401      	adds	r4, #1
 8005b8c:	9304      	str	r3, [sp, #16]
 8005b8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b92:	4829      	ldr	r0, [pc, #164]	@ (8005c38 <_vfiprintf_r+0x220>)
 8005b94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b98:	2206      	movs	r2, #6
 8005b9a:	f7fa fb29 	bl	80001f0 <memchr>
 8005b9e:	2800      	cmp	r0, #0
 8005ba0:	d03f      	beq.n	8005c22 <_vfiprintf_r+0x20a>
 8005ba2:	4b26      	ldr	r3, [pc, #152]	@ (8005c3c <_vfiprintf_r+0x224>)
 8005ba4:	bb1b      	cbnz	r3, 8005bee <_vfiprintf_r+0x1d6>
 8005ba6:	9b03      	ldr	r3, [sp, #12]
 8005ba8:	3307      	adds	r3, #7
 8005baa:	f023 0307 	bic.w	r3, r3, #7
 8005bae:	3308      	adds	r3, #8
 8005bb0:	9303      	str	r3, [sp, #12]
 8005bb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bb4:	443b      	add	r3, r7
 8005bb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bb8:	e76a      	b.n	8005a90 <_vfiprintf_r+0x78>
 8005bba:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bbe:	460c      	mov	r4, r1
 8005bc0:	2001      	movs	r0, #1
 8005bc2:	e7a8      	b.n	8005b16 <_vfiprintf_r+0xfe>
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	3401      	adds	r4, #1
 8005bc8:	9305      	str	r3, [sp, #20]
 8005bca:	4619      	mov	r1, r3
 8005bcc:	f04f 0c0a 	mov.w	ip, #10
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bd6:	3a30      	subs	r2, #48	@ 0x30
 8005bd8:	2a09      	cmp	r2, #9
 8005bda:	d903      	bls.n	8005be4 <_vfiprintf_r+0x1cc>
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d0c6      	beq.n	8005b6e <_vfiprintf_r+0x156>
 8005be0:	9105      	str	r1, [sp, #20]
 8005be2:	e7c4      	b.n	8005b6e <_vfiprintf_r+0x156>
 8005be4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005be8:	4604      	mov	r4, r0
 8005bea:	2301      	movs	r3, #1
 8005bec:	e7f0      	b.n	8005bd0 <_vfiprintf_r+0x1b8>
 8005bee:	ab03      	add	r3, sp, #12
 8005bf0:	9300      	str	r3, [sp, #0]
 8005bf2:	462a      	mov	r2, r5
 8005bf4:	4b12      	ldr	r3, [pc, #72]	@ (8005c40 <_vfiprintf_r+0x228>)
 8005bf6:	a904      	add	r1, sp, #16
 8005bf8:	4630      	mov	r0, r6
 8005bfa:	f3af 8000 	nop.w
 8005bfe:	4607      	mov	r7, r0
 8005c00:	1c78      	adds	r0, r7, #1
 8005c02:	d1d6      	bne.n	8005bb2 <_vfiprintf_r+0x19a>
 8005c04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c06:	07d9      	lsls	r1, r3, #31
 8005c08:	d405      	bmi.n	8005c16 <_vfiprintf_r+0x1fe>
 8005c0a:	89ab      	ldrh	r3, [r5, #12]
 8005c0c:	059a      	lsls	r2, r3, #22
 8005c0e:	d402      	bmi.n	8005c16 <_vfiprintf_r+0x1fe>
 8005c10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c12:	f7ff fc85 	bl	8005520 <__retarget_lock_release_recursive>
 8005c16:	89ab      	ldrh	r3, [r5, #12]
 8005c18:	065b      	lsls	r3, r3, #25
 8005c1a:	f53f af1f 	bmi.w	8005a5c <_vfiprintf_r+0x44>
 8005c1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c20:	e71e      	b.n	8005a60 <_vfiprintf_r+0x48>
 8005c22:	ab03      	add	r3, sp, #12
 8005c24:	9300      	str	r3, [sp, #0]
 8005c26:	462a      	mov	r2, r5
 8005c28:	4b05      	ldr	r3, [pc, #20]	@ (8005c40 <_vfiprintf_r+0x228>)
 8005c2a:	a904      	add	r1, sp, #16
 8005c2c:	4630      	mov	r0, r6
 8005c2e:	f000 f879 	bl	8005d24 <_printf_i>
 8005c32:	e7e4      	b.n	8005bfe <_vfiprintf_r+0x1e6>
 8005c34:	08007200 	.word	0x08007200
 8005c38:	0800720a 	.word	0x0800720a
 8005c3c:	00000000 	.word	0x00000000
 8005c40:	080059f3 	.word	0x080059f3
 8005c44:	08007206 	.word	0x08007206

08005c48 <_printf_common>:
 8005c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c4c:	4616      	mov	r6, r2
 8005c4e:	4698      	mov	r8, r3
 8005c50:	688a      	ldr	r2, [r1, #8]
 8005c52:	690b      	ldr	r3, [r1, #16]
 8005c54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	bfb8      	it	lt
 8005c5c:	4613      	movlt	r3, r2
 8005c5e:	6033      	str	r3, [r6, #0]
 8005c60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c64:	4607      	mov	r7, r0
 8005c66:	460c      	mov	r4, r1
 8005c68:	b10a      	cbz	r2, 8005c6e <_printf_common+0x26>
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	6033      	str	r3, [r6, #0]
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	0699      	lsls	r1, r3, #26
 8005c72:	bf42      	ittt	mi
 8005c74:	6833      	ldrmi	r3, [r6, #0]
 8005c76:	3302      	addmi	r3, #2
 8005c78:	6033      	strmi	r3, [r6, #0]
 8005c7a:	6825      	ldr	r5, [r4, #0]
 8005c7c:	f015 0506 	ands.w	r5, r5, #6
 8005c80:	d106      	bne.n	8005c90 <_printf_common+0x48>
 8005c82:	f104 0a19 	add.w	sl, r4, #25
 8005c86:	68e3      	ldr	r3, [r4, #12]
 8005c88:	6832      	ldr	r2, [r6, #0]
 8005c8a:	1a9b      	subs	r3, r3, r2
 8005c8c:	42ab      	cmp	r3, r5
 8005c8e:	dc26      	bgt.n	8005cde <_printf_common+0x96>
 8005c90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005c94:	6822      	ldr	r2, [r4, #0]
 8005c96:	3b00      	subs	r3, #0
 8005c98:	bf18      	it	ne
 8005c9a:	2301      	movne	r3, #1
 8005c9c:	0692      	lsls	r2, r2, #26
 8005c9e:	d42b      	bmi.n	8005cf8 <_printf_common+0xb0>
 8005ca0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ca4:	4641      	mov	r1, r8
 8005ca6:	4638      	mov	r0, r7
 8005ca8:	47c8      	blx	r9
 8005caa:	3001      	adds	r0, #1
 8005cac:	d01e      	beq.n	8005cec <_printf_common+0xa4>
 8005cae:	6823      	ldr	r3, [r4, #0]
 8005cb0:	6922      	ldr	r2, [r4, #16]
 8005cb2:	f003 0306 	and.w	r3, r3, #6
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	bf02      	ittt	eq
 8005cba:	68e5      	ldreq	r5, [r4, #12]
 8005cbc:	6833      	ldreq	r3, [r6, #0]
 8005cbe:	1aed      	subeq	r5, r5, r3
 8005cc0:	68a3      	ldr	r3, [r4, #8]
 8005cc2:	bf0c      	ite	eq
 8005cc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cc8:	2500      	movne	r5, #0
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	bfc4      	itt	gt
 8005cce:	1a9b      	subgt	r3, r3, r2
 8005cd0:	18ed      	addgt	r5, r5, r3
 8005cd2:	2600      	movs	r6, #0
 8005cd4:	341a      	adds	r4, #26
 8005cd6:	42b5      	cmp	r5, r6
 8005cd8:	d11a      	bne.n	8005d10 <_printf_common+0xc8>
 8005cda:	2000      	movs	r0, #0
 8005cdc:	e008      	b.n	8005cf0 <_printf_common+0xa8>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	4652      	mov	r2, sl
 8005ce2:	4641      	mov	r1, r8
 8005ce4:	4638      	mov	r0, r7
 8005ce6:	47c8      	blx	r9
 8005ce8:	3001      	adds	r0, #1
 8005cea:	d103      	bne.n	8005cf4 <_printf_common+0xac>
 8005cec:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cf4:	3501      	adds	r5, #1
 8005cf6:	e7c6      	b.n	8005c86 <_printf_common+0x3e>
 8005cf8:	18e1      	adds	r1, r4, r3
 8005cfa:	1c5a      	adds	r2, r3, #1
 8005cfc:	2030      	movs	r0, #48	@ 0x30
 8005cfe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d02:	4422      	add	r2, r4
 8005d04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d0c:	3302      	adds	r3, #2
 8005d0e:	e7c7      	b.n	8005ca0 <_printf_common+0x58>
 8005d10:	2301      	movs	r3, #1
 8005d12:	4622      	mov	r2, r4
 8005d14:	4641      	mov	r1, r8
 8005d16:	4638      	mov	r0, r7
 8005d18:	47c8      	blx	r9
 8005d1a:	3001      	adds	r0, #1
 8005d1c:	d0e6      	beq.n	8005cec <_printf_common+0xa4>
 8005d1e:	3601      	adds	r6, #1
 8005d20:	e7d9      	b.n	8005cd6 <_printf_common+0x8e>
	...

08005d24 <_printf_i>:
 8005d24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d28:	7e0f      	ldrb	r7, [r1, #24]
 8005d2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d2c:	2f78      	cmp	r7, #120	@ 0x78
 8005d2e:	4691      	mov	r9, r2
 8005d30:	4680      	mov	r8, r0
 8005d32:	460c      	mov	r4, r1
 8005d34:	469a      	mov	sl, r3
 8005d36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d3a:	d807      	bhi.n	8005d4c <_printf_i+0x28>
 8005d3c:	2f62      	cmp	r7, #98	@ 0x62
 8005d3e:	d80a      	bhi.n	8005d56 <_printf_i+0x32>
 8005d40:	2f00      	cmp	r7, #0
 8005d42:	f000 80d2 	beq.w	8005eea <_printf_i+0x1c6>
 8005d46:	2f58      	cmp	r7, #88	@ 0x58
 8005d48:	f000 80b9 	beq.w	8005ebe <_printf_i+0x19a>
 8005d4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d54:	e03a      	b.n	8005dcc <_printf_i+0xa8>
 8005d56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d5a:	2b15      	cmp	r3, #21
 8005d5c:	d8f6      	bhi.n	8005d4c <_printf_i+0x28>
 8005d5e:	a101      	add	r1, pc, #4	@ (adr r1, 8005d64 <_printf_i+0x40>)
 8005d60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d64:	08005dbd 	.word	0x08005dbd
 8005d68:	08005dd1 	.word	0x08005dd1
 8005d6c:	08005d4d 	.word	0x08005d4d
 8005d70:	08005d4d 	.word	0x08005d4d
 8005d74:	08005d4d 	.word	0x08005d4d
 8005d78:	08005d4d 	.word	0x08005d4d
 8005d7c:	08005dd1 	.word	0x08005dd1
 8005d80:	08005d4d 	.word	0x08005d4d
 8005d84:	08005d4d 	.word	0x08005d4d
 8005d88:	08005d4d 	.word	0x08005d4d
 8005d8c:	08005d4d 	.word	0x08005d4d
 8005d90:	08005ed1 	.word	0x08005ed1
 8005d94:	08005dfb 	.word	0x08005dfb
 8005d98:	08005e8b 	.word	0x08005e8b
 8005d9c:	08005d4d 	.word	0x08005d4d
 8005da0:	08005d4d 	.word	0x08005d4d
 8005da4:	08005ef3 	.word	0x08005ef3
 8005da8:	08005d4d 	.word	0x08005d4d
 8005dac:	08005dfb 	.word	0x08005dfb
 8005db0:	08005d4d 	.word	0x08005d4d
 8005db4:	08005d4d 	.word	0x08005d4d
 8005db8:	08005e93 	.word	0x08005e93
 8005dbc:	6833      	ldr	r3, [r6, #0]
 8005dbe:	1d1a      	adds	r2, r3, #4
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6032      	str	r2, [r6, #0]
 8005dc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005dc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e09d      	b.n	8005f0c <_printf_i+0x1e8>
 8005dd0:	6833      	ldr	r3, [r6, #0]
 8005dd2:	6820      	ldr	r0, [r4, #0]
 8005dd4:	1d19      	adds	r1, r3, #4
 8005dd6:	6031      	str	r1, [r6, #0]
 8005dd8:	0606      	lsls	r6, r0, #24
 8005dda:	d501      	bpl.n	8005de0 <_printf_i+0xbc>
 8005ddc:	681d      	ldr	r5, [r3, #0]
 8005dde:	e003      	b.n	8005de8 <_printf_i+0xc4>
 8005de0:	0645      	lsls	r5, r0, #25
 8005de2:	d5fb      	bpl.n	8005ddc <_printf_i+0xb8>
 8005de4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005de8:	2d00      	cmp	r5, #0
 8005dea:	da03      	bge.n	8005df4 <_printf_i+0xd0>
 8005dec:	232d      	movs	r3, #45	@ 0x2d
 8005dee:	426d      	negs	r5, r5
 8005df0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005df4:	4859      	ldr	r0, [pc, #356]	@ (8005f5c <_printf_i+0x238>)
 8005df6:	230a      	movs	r3, #10
 8005df8:	e011      	b.n	8005e1e <_printf_i+0xfa>
 8005dfa:	6821      	ldr	r1, [r4, #0]
 8005dfc:	6833      	ldr	r3, [r6, #0]
 8005dfe:	0608      	lsls	r0, r1, #24
 8005e00:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e04:	d402      	bmi.n	8005e0c <_printf_i+0xe8>
 8005e06:	0649      	lsls	r1, r1, #25
 8005e08:	bf48      	it	mi
 8005e0a:	b2ad      	uxthmi	r5, r5
 8005e0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e0e:	4853      	ldr	r0, [pc, #332]	@ (8005f5c <_printf_i+0x238>)
 8005e10:	6033      	str	r3, [r6, #0]
 8005e12:	bf14      	ite	ne
 8005e14:	230a      	movne	r3, #10
 8005e16:	2308      	moveq	r3, #8
 8005e18:	2100      	movs	r1, #0
 8005e1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e1e:	6866      	ldr	r6, [r4, #4]
 8005e20:	60a6      	str	r6, [r4, #8]
 8005e22:	2e00      	cmp	r6, #0
 8005e24:	bfa2      	ittt	ge
 8005e26:	6821      	ldrge	r1, [r4, #0]
 8005e28:	f021 0104 	bicge.w	r1, r1, #4
 8005e2c:	6021      	strge	r1, [r4, #0]
 8005e2e:	b90d      	cbnz	r5, 8005e34 <_printf_i+0x110>
 8005e30:	2e00      	cmp	r6, #0
 8005e32:	d04b      	beq.n	8005ecc <_printf_i+0x1a8>
 8005e34:	4616      	mov	r6, r2
 8005e36:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e3a:	fb03 5711 	mls	r7, r3, r1, r5
 8005e3e:	5dc7      	ldrb	r7, [r0, r7]
 8005e40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e44:	462f      	mov	r7, r5
 8005e46:	42bb      	cmp	r3, r7
 8005e48:	460d      	mov	r5, r1
 8005e4a:	d9f4      	bls.n	8005e36 <_printf_i+0x112>
 8005e4c:	2b08      	cmp	r3, #8
 8005e4e:	d10b      	bne.n	8005e68 <_printf_i+0x144>
 8005e50:	6823      	ldr	r3, [r4, #0]
 8005e52:	07df      	lsls	r7, r3, #31
 8005e54:	d508      	bpl.n	8005e68 <_printf_i+0x144>
 8005e56:	6923      	ldr	r3, [r4, #16]
 8005e58:	6861      	ldr	r1, [r4, #4]
 8005e5a:	4299      	cmp	r1, r3
 8005e5c:	bfde      	ittt	le
 8005e5e:	2330      	movle	r3, #48	@ 0x30
 8005e60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e64:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e68:	1b92      	subs	r2, r2, r6
 8005e6a:	6122      	str	r2, [r4, #16]
 8005e6c:	f8cd a000 	str.w	sl, [sp]
 8005e70:	464b      	mov	r3, r9
 8005e72:	aa03      	add	r2, sp, #12
 8005e74:	4621      	mov	r1, r4
 8005e76:	4640      	mov	r0, r8
 8005e78:	f7ff fee6 	bl	8005c48 <_printf_common>
 8005e7c:	3001      	adds	r0, #1
 8005e7e:	d14a      	bne.n	8005f16 <_printf_i+0x1f2>
 8005e80:	f04f 30ff 	mov.w	r0, #4294967295
 8005e84:	b004      	add	sp, #16
 8005e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e8a:	6823      	ldr	r3, [r4, #0]
 8005e8c:	f043 0320 	orr.w	r3, r3, #32
 8005e90:	6023      	str	r3, [r4, #0]
 8005e92:	4833      	ldr	r0, [pc, #204]	@ (8005f60 <_printf_i+0x23c>)
 8005e94:	2778      	movs	r7, #120	@ 0x78
 8005e96:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005e9a:	6823      	ldr	r3, [r4, #0]
 8005e9c:	6831      	ldr	r1, [r6, #0]
 8005e9e:	061f      	lsls	r7, r3, #24
 8005ea0:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ea4:	d402      	bmi.n	8005eac <_printf_i+0x188>
 8005ea6:	065f      	lsls	r7, r3, #25
 8005ea8:	bf48      	it	mi
 8005eaa:	b2ad      	uxthmi	r5, r5
 8005eac:	6031      	str	r1, [r6, #0]
 8005eae:	07d9      	lsls	r1, r3, #31
 8005eb0:	bf44      	itt	mi
 8005eb2:	f043 0320 	orrmi.w	r3, r3, #32
 8005eb6:	6023      	strmi	r3, [r4, #0]
 8005eb8:	b11d      	cbz	r5, 8005ec2 <_printf_i+0x19e>
 8005eba:	2310      	movs	r3, #16
 8005ebc:	e7ac      	b.n	8005e18 <_printf_i+0xf4>
 8005ebe:	4827      	ldr	r0, [pc, #156]	@ (8005f5c <_printf_i+0x238>)
 8005ec0:	e7e9      	b.n	8005e96 <_printf_i+0x172>
 8005ec2:	6823      	ldr	r3, [r4, #0]
 8005ec4:	f023 0320 	bic.w	r3, r3, #32
 8005ec8:	6023      	str	r3, [r4, #0]
 8005eca:	e7f6      	b.n	8005eba <_printf_i+0x196>
 8005ecc:	4616      	mov	r6, r2
 8005ece:	e7bd      	b.n	8005e4c <_printf_i+0x128>
 8005ed0:	6833      	ldr	r3, [r6, #0]
 8005ed2:	6825      	ldr	r5, [r4, #0]
 8005ed4:	6961      	ldr	r1, [r4, #20]
 8005ed6:	1d18      	adds	r0, r3, #4
 8005ed8:	6030      	str	r0, [r6, #0]
 8005eda:	062e      	lsls	r6, r5, #24
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	d501      	bpl.n	8005ee4 <_printf_i+0x1c0>
 8005ee0:	6019      	str	r1, [r3, #0]
 8005ee2:	e002      	b.n	8005eea <_printf_i+0x1c6>
 8005ee4:	0668      	lsls	r0, r5, #25
 8005ee6:	d5fb      	bpl.n	8005ee0 <_printf_i+0x1bc>
 8005ee8:	8019      	strh	r1, [r3, #0]
 8005eea:	2300      	movs	r3, #0
 8005eec:	6123      	str	r3, [r4, #16]
 8005eee:	4616      	mov	r6, r2
 8005ef0:	e7bc      	b.n	8005e6c <_printf_i+0x148>
 8005ef2:	6833      	ldr	r3, [r6, #0]
 8005ef4:	1d1a      	adds	r2, r3, #4
 8005ef6:	6032      	str	r2, [r6, #0]
 8005ef8:	681e      	ldr	r6, [r3, #0]
 8005efa:	6862      	ldr	r2, [r4, #4]
 8005efc:	2100      	movs	r1, #0
 8005efe:	4630      	mov	r0, r6
 8005f00:	f7fa f976 	bl	80001f0 <memchr>
 8005f04:	b108      	cbz	r0, 8005f0a <_printf_i+0x1e6>
 8005f06:	1b80      	subs	r0, r0, r6
 8005f08:	6060      	str	r0, [r4, #4]
 8005f0a:	6863      	ldr	r3, [r4, #4]
 8005f0c:	6123      	str	r3, [r4, #16]
 8005f0e:	2300      	movs	r3, #0
 8005f10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f14:	e7aa      	b.n	8005e6c <_printf_i+0x148>
 8005f16:	6923      	ldr	r3, [r4, #16]
 8005f18:	4632      	mov	r2, r6
 8005f1a:	4649      	mov	r1, r9
 8005f1c:	4640      	mov	r0, r8
 8005f1e:	47d0      	blx	sl
 8005f20:	3001      	adds	r0, #1
 8005f22:	d0ad      	beq.n	8005e80 <_printf_i+0x15c>
 8005f24:	6823      	ldr	r3, [r4, #0]
 8005f26:	079b      	lsls	r3, r3, #30
 8005f28:	d413      	bmi.n	8005f52 <_printf_i+0x22e>
 8005f2a:	68e0      	ldr	r0, [r4, #12]
 8005f2c:	9b03      	ldr	r3, [sp, #12]
 8005f2e:	4298      	cmp	r0, r3
 8005f30:	bfb8      	it	lt
 8005f32:	4618      	movlt	r0, r3
 8005f34:	e7a6      	b.n	8005e84 <_printf_i+0x160>
 8005f36:	2301      	movs	r3, #1
 8005f38:	4632      	mov	r2, r6
 8005f3a:	4649      	mov	r1, r9
 8005f3c:	4640      	mov	r0, r8
 8005f3e:	47d0      	blx	sl
 8005f40:	3001      	adds	r0, #1
 8005f42:	d09d      	beq.n	8005e80 <_printf_i+0x15c>
 8005f44:	3501      	adds	r5, #1
 8005f46:	68e3      	ldr	r3, [r4, #12]
 8005f48:	9903      	ldr	r1, [sp, #12]
 8005f4a:	1a5b      	subs	r3, r3, r1
 8005f4c:	42ab      	cmp	r3, r5
 8005f4e:	dcf2      	bgt.n	8005f36 <_printf_i+0x212>
 8005f50:	e7eb      	b.n	8005f2a <_printf_i+0x206>
 8005f52:	2500      	movs	r5, #0
 8005f54:	f104 0619 	add.w	r6, r4, #25
 8005f58:	e7f5      	b.n	8005f46 <_printf_i+0x222>
 8005f5a:	bf00      	nop
 8005f5c:	08007211 	.word	0x08007211
 8005f60:	08007222 	.word	0x08007222

08005f64 <__sflush_r>:
 8005f64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f6c:	0716      	lsls	r6, r2, #28
 8005f6e:	4605      	mov	r5, r0
 8005f70:	460c      	mov	r4, r1
 8005f72:	d454      	bmi.n	800601e <__sflush_r+0xba>
 8005f74:	684b      	ldr	r3, [r1, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	dc02      	bgt.n	8005f80 <__sflush_r+0x1c>
 8005f7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	dd48      	ble.n	8006012 <__sflush_r+0xae>
 8005f80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f82:	2e00      	cmp	r6, #0
 8005f84:	d045      	beq.n	8006012 <__sflush_r+0xae>
 8005f86:	2300      	movs	r3, #0
 8005f88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005f8c:	682f      	ldr	r7, [r5, #0]
 8005f8e:	6a21      	ldr	r1, [r4, #32]
 8005f90:	602b      	str	r3, [r5, #0]
 8005f92:	d030      	beq.n	8005ff6 <__sflush_r+0x92>
 8005f94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005f96:	89a3      	ldrh	r3, [r4, #12]
 8005f98:	0759      	lsls	r1, r3, #29
 8005f9a:	d505      	bpl.n	8005fa8 <__sflush_r+0x44>
 8005f9c:	6863      	ldr	r3, [r4, #4]
 8005f9e:	1ad2      	subs	r2, r2, r3
 8005fa0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005fa2:	b10b      	cbz	r3, 8005fa8 <__sflush_r+0x44>
 8005fa4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005fa6:	1ad2      	subs	r2, r2, r3
 8005fa8:	2300      	movs	r3, #0
 8005faa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005fac:	6a21      	ldr	r1, [r4, #32]
 8005fae:	4628      	mov	r0, r5
 8005fb0:	47b0      	blx	r6
 8005fb2:	1c43      	adds	r3, r0, #1
 8005fb4:	89a3      	ldrh	r3, [r4, #12]
 8005fb6:	d106      	bne.n	8005fc6 <__sflush_r+0x62>
 8005fb8:	6829      	ldr	r1, [r5, #0]
 8005fba:	291d      	cmp	r1, #29
 8005fbc:	d82b      	bhi.n	8006016 <__sflush_r+0xb2>
 8005fbe:	4a2a      	ldr	r2, [pc, #168]	@ (8006068 <__sflush_r+0x104>)
 8005fc0:	410a      	asrs	r2, r1
 8005fc2:	07d6      	lsls	r6, r2, #31
 8005fc4:	d427      	bmi.n	8006016 <__sflush_r+0xb2>
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	6062      	str	r2, [r4, #4]
 8005fca:	04d9      	lsls	r1, r3, #19
 8005fcc:	6922      	ldr	r2, [r4, #16]
 8005fce:	6022      	str	r2, [r4, #0]
 8005fd0:	d504      	bpl.n	8005fdc <__sflush_r+0x78>
 8005fd2:	1c42      	adds	r2, r0, #1
 8005fd4:	d101      	bne.n	8005fda <__sflush_r+0x76>
 8005fd6:	682b      	ldr	r3, [r5, #0]
 8005fd8:	b903      	cbnz	r3, 8005fdc <__sflush_r+0x78>
 8005fda:	6560      	str	r0, [r4, #84]	@ 0x54
 8005fdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005fde:	602f      	str	r7, [r5, #0]
 8005fe0:	b1b9      	cbz	r1, 8006012 <__sflush_r+0xae>
 8005fe2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005fe6:	4299      	cmp	r1, r3
 8005fe8:	d002      	beq.n	8005ff0 <__sflush_r+0x8c>
 8005fea:	4628      	mov	r0, r5
 8005fec:	f7ff fa9a 	bl	8005524 <_free_r>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	6363      	str	r3, [r4, #52]	@ 0x34
 8005ff4:	e00d      	b.n	8006012 <__sflush_r+0xae>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	4628      	mov	r0, r5
 8005ffa:	47b0      	blx	r6
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	1c50      	adds	r0, r2, #1
 8006000:	d1c9      	bne.n	8005f96 <__sflush_r+0x32>
 8006002:	682b      	ldr	r3, [r5, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d0c6      	beq.n	8005f96 <__sflush_r+0x32>
 8006008:	2b1d      	cmp	r3, #29
 800600a:	d001      	beq.n	8006010 <__sflush_r+0xac>
 800600c:	2b16      	cmp	r3, #22
 800600e:	d11e      	bne.n	800604e <__sflush_r+0xea>
 8006010:	602f      	str	r7, [r5, #0]
 8006012:	2000      	movs	r0, #0
 8006014:	e022      	b.n	800605c <__sflush_r+0xf8>
 8006016:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800601a:	b21b      	sxth	r3, r3
 800601c:	e01b      	b.n	8006056 <__sflush_r+0xf2>
 800601e:	690f      	ldr	r7, [r1, #16]
 8006020:	2f00      	cmp	r7, #0
 8006022:	d0f6      	beq.n	8006012 <__sflush_r+0xae>
 8006024:	0793      	lsls	r3, r2, #30
 8006026:	680e      	ldr	r6, [r1, #0]
 8006028:	bf08      	it	eq
 800602a:	694b      	ldreq	r3, [r1, #20]
 800602c:	600f      	str	r7, [r1, #0]
 800602e:	bf18      	it	ne
 8006030:	2300      	movne	r3, #0
 8006032:	eba6 0807 	sub.w	r8, r6, r7
 8006036:	608b      	str	r3, [r1, #8]
 8006038:	f1b8 0f00 	cmp.w	r8, #0
 800603c:	dde9      	ble.n	8006012 <__sflush_r+0xae>
 800603e:	6a21      	ldr	r1, [r4, #32]
 8006040:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006042:	4643      	mov	r3, r8
 8006044:	463a      	mov	r2, r7
 8006046:	4628      	mov	r0, r5
 8006048:	47b0      	blx	r6
 800604a:	2800      	cmp	r0, #0
 800604c:	dc08      	bgt.n	8006060 <__sflush_r+0xfc>
 800604e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006052:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006056:	81a3      	strh	r3, [r4, #12]
 8006058:	f04f 30ff 	mov.w	r0, #4294967295
 800605c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006060:	4407      	add	r7, r0
 8006062:	eba8 0800 	sub.w	r8, r8, r0
 8006066:	e7e7      	b.n	8006038 <__sflush_r+0xd4>
 8006068:	dfbffffe 	.word	0xdfbffffe

0800606c <_fflush_r>:
 800606c:	b538      	push	{r3, r4, r5, lr}
 800606e:	690b      	ldr	r3, [r1, #16]
 8006070:	4605      	mov	r5, r0
 8006072:	460c      	mov	r4, r1
 8006074:	b913      	cbnz	r3, 800607c <_fflush_r+0x10>
 8006076:	2500      	movs	r5, #0
 8006078:	4628      	mov	r0, r5
 800607a:	bd38      	pop	{r3, r4, r5, pc}
 800607c:	b118      	cbz	r0, 8006086 <_fflush_r+0x1a>
 800607e:	6a03      	ldr	r3, [r0, #32]
 8006080:	b90b      	cbnz	r3, 8006086 <_fflush_r+0x1a>
 8006082:	f7ff f927 	bl	80052d4 <__sinit>
 8006086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d0f3      	beq.n	8006076 <_fflush_r+0xa>
 800608e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006090:	07d0      	lsls	r0, r2, #31
 8006092:	d404      	bmi.n	800609e <_fflush_r+0x32>
 8006094:	0599      	lsls	r1, r3, #22
 8006096:	d402      	bmi.n	800609e <_fflush_r+0x32>
 8006098:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800609a:	f7ff fa40 	bl	800551e <__retarget_lock_acquire_recursive>
 800609e:	4628      	mov	r0, r5
 80060a0:	4621      	mov	r1, r4
 80060a2:	f7ff ff5f 	bl	8005f64 <__sflush_r>
 80060a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80060a8:	07da      	lsls	r2, r3, #31
 80060aa:	4605      	mov	r5, r0
 80060ac:	d4e4      	bmi.n	8006078 <_fflush_r+0xc>
 80060ae:	89a3      	ldrh	r3, [r4, #12]
 80060b0:	059b      	lsls	r3, r3, #22
 80060b2:	d4e1      	bmi.n	8006078 <_fflush_r+0xc>
 80060b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060b6:	f7ff fa33 	bl	8005520 <__retarget_lock_release_recursive>
 80060ba:	e7dd      	b.n	8006078 <_fflush_r+0xc>

080060bc <__swbuf_r>:
 80060bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060be:	460e      	mov	r6, r1
 80060c0:	4614      	mov	r4, r2
 80060c2:	4605      	mov	r5, r0
 80060c4:	b118      	cbz	r0, 80060ce <__swbuf_r+0x12>
 80060c6:	6a03      	ldr	r3, [r0, #32]
 80060c8:	b90b      	cbnz	r3, 80060ce <__swbuf_r+0x12>
 80060ca:	f7ff f903 	bl	80052d4 <__sinit>
 80060ce:	69a3      	ldr	r3, [r4, #24]
 80060d0:	60a3      	str	r3, [r4, #8]
 80060d2:	89a3      	ldrh	r3, [r4, #12]
 80060d4:	071a      	lsls	r2, r3, #28
 80060d6:	d501      	bpl.n	80060dc <__swbuf_r+0x20>
 80060d8:	6923      	ldr	r3, [r4, #16]
 80060da:	b943      	cbnz	r3, 80060ee <__swbuf_r+0x32>
 80060dc:	4621      	mov	r1, r4
 80060de:	4628      	mov	r0, r5
 80060e0:	f000 f82a 	bl	8006138 <__swsetup_r>
 80060e4:	b118      	cbz	r0, 80060ee <__swbuf_r+0x32>
 80060e6:	f04f 37ff 	mov.w	r7, #4294967295
 80060ea:	4638      	mov	r0, r7
 80060ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	6922      	ldr	r2, [r4, #16]
 80060f2:	1a98      	subs	r0, r3, r2
 80060f4:	6963      	ldr	r3, [r4, #20]
 80060f6:	b2f6      	uxtb	r6, r6
 80060f8:	4283      	cmp	r3, r0
 80060fa:	4637      	mov	r7, r6
 80060fc:	dc05      	bgt.n	800610a <__swbuf_r+0x4e>
 80060fe:	4621      	mov	r1, r4
 8006100:	4628      	mov	r0, r5
 8006102:	f7ff ffb3 	bl	800606c <_fflush_r>
 8006106:	2800      	cmp	r0, #0
 8006108:	d1ed      	bne.n	80060e6 <__swbuf_r+0x2a>
 800610a:	68a3      	ldr	r3, [r4, #8]
 800610c:	3b01      	subs	r3, #1
 800610e:	60a3      	str	r3, [r4, #8]
 8006110:	6823      	ldr	r3, [r4, #0]
 8006112:	1c5a      	adds	r2, r3, #1
 8006114:	6022      	str	r2, [r4, #0]
 8006116:	701e      	strb	r6, [r3, #0]
 8006118:	6962      	ldr	r2, [r4, #20]
 800611a:	1c43      	adds	r3, r0, #1
 800611c:	429a      	cmp	r2, r3
 800611e:	d004      	beq.n	800612a <__swbuf_r+0x6e>
 8006120:	89a3      	ldrh	r3, [r4, #12]
 8006122:	07db      	lsls	r3, r3, #31
 8006124:	d5e1      	bpl.n	80060ea <__swbuf_r+0x2e>
 8006126:	2e0a      	cmp	r6, #10
 8006128:	d1df      	bne.n	80060ea <__swbuf_r+0x2e>
 800612a:	4621      	mov	r1, r4
 800612c:	4628      	mov	r0, r5
 800612e:	f7ff ff9d 	bl	800606c <_fflush_r>
 8006132:	2800      	cmp	r0, #0
 8006134:	d0d9      	beq.n	80060ea <__swbuf_r+0x2e>
 8006136:	e7d6      	b.n	80060e6 <__swbuf_r+0x2a>

08006138 <__swsetup_r>:
 8006138:	b538      	push	{r3, r4, r5, lr}
 800613a:	4b29      	ldr	r3, [pc, #164]	@ (80061e0 <__swsetup_r+0xa8>)
 800613c:	4605      	mov	r5, r0
 800613e:	6818      	ldr	r0, [r3, #0]
 8006140:	460c      	mov	r4, r1
 8006142:	b118      	cbz	r0, 800614c <__swsetup_r+0x14>
 8006144:	6a03      	ldr	r3, [r0, #32]
 8006146:	b90b      	cbnz	r3, 800614c <__swsetup_r+0x14>
 8006148:	f7ff f8c4 	bl	80052d4 <__sinit>
 800614c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006150:	0719      	lsls	r1, r3, #28
 8006152:	d422      	bmi.n	800619a <__swsetup_r+0x62>
 8006154:	06da      	lsls	r2, r3, #27
 8006156:	d407      	bmi.n	8006168 <__swsetup_r+0x30>
 8006158:	2209      	movs	r2, #9
 800615a:	602a      	str	r2, [r5, #0]
 800615c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006160:	81a3      	strh	r3, [r4, #12]
 8006162:	f04f 30ff 	mov.w	r0, #4294967295
 8006166:	e033      	b.n	80061d0 <__swsetup_r+0x98>
 8006168:	0758      	lsls	r0, r3, #29
 800616a:	d512      	bpl.n	8006192 <__swsetup_r+0x5a>
 800616c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800616e:	b141      	cbz	r1, 8006182 <__swsetup_r+0x4a>
 8006170:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006174:	4299      	cmp	r1, r3
 8006176:	d002      	beq.n	800617e <__swsetup_r+0x46>
 8006178:	4628      	mov	r0, r5
 800617a:	f7ff f9d3 	bl	8005524 <_free_r>
 800617e:	2300      	movs	r3, #0
 8006180:	6363      	str	r3, [r4, #52]	@ 0x34
 8006182:	89a3      	ldrh	r3, [r4, #12]
 8006184:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006188:	81a3      	strh	r3, [r4, #12]
 800618a:	2300      	movs	r3, #0
 800618c:	6063      	str	r3, [r4, #4]
 800618e:	6923      	ldr	r3, [r4, #16]
 8006190:	6023      	str	r3, [r4, #0]
 8006192:	89a3      	ldrh	r3, [r4, #12]
 8006194:	f043 0308 	orr.w	r3, r3, #8
 8006198:	81a3      	strh	r3, [r4, #12]
 800619a:	6923      	ldr	r3, [r4, #16]
 800619c:	b94b      	cbnz	r3, 80061b2 <__swsetup_r+0x7a>
 800619e:	89a3      	ldrh	r3, [r4, #12]
 80061a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80061a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061a8:	d003      	beq.n	80061b2 <__swsetup_r+0x7a>
 80061aa:	4621      	mov	r1, r4
 80061ac:	4628      	mov	r0, r5
 80061ae:	f000 f8a5 	bl	80062fc <__smakebuf_r>
 80061b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061b6:	f013 0201 	ands.w	r2, r3, #1
 80061ba:	d00a      	beq.n	80061d2 <__swsetup_r+0x9a>
 80061bc:	2200      	movs	r2, #0
 80061be:	60a2      	str	r2, [r4, #8]
 80061c0:	6962      	ldr	r2, [r4, #20]
 80061c2:	4252      	negs	r2, r2
 80061c4:	61a2      	str	r2, [r4, #24]
 80061c6:	6922      	ldr	r2, [r4, #16]
 80061c8:	b942      	cbnz	r2, 80061dc <__swsetup_r+0xa4>
 80061ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80061ce:	d1c5      	bne.n	800615c <__swsetup_r+0x24>
 80061d0:	bd38      	pop	{r3, r4, r5, pc}
 80061d2:	0799      	lsls	r1, r3, #30
 80061d4:	bf58      	it	pl
 80061d6:	6962      	ldrpl	r2, [r4, #20]
 80061d8:	60a2      	str	r2, [r4, #8]
 80061da:	e7f4      	b.n	80061c6 <__swsetup_r+0x8e>
 80061dc:	2000      	movs	r0, #0
 80061de:	e7f7      	b.n	80061d0 <__swsetup_r+0x98>
 80061e0:	20000418 	.word	0x20000418

080061e4 <memmove>:
 80061e4:	4288      	cmp	r0, r1
 80061e6:	b510      	push	{r4, lr}
 80061e8:	eb01 0402 	add.w	r4, r1, r2
 80061ec:	d902      	bls.n	80061f4 <memmove+0x10>
 80061ee:	4284      	cmp	r4, r0
 80061f0:	4623      	mov	r3, r4
 80061f2:	d807      	bhi.n	8006204 <memmove+0x20>
 80061f4:	1e43      	subs	r3, r0, #1
 80061f6:	42a1      	cmp	r1, r4
 80061f8:	d008      	beq.n	800620c <memmove+0x28>
 80061fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006202:	e7f8      	b.n	80061f6 <memmove+0x12>
 8006204:	4402      	add	r2, r0
 8006206:	4601      	mov	r1, r0
 8006208:	428a      	cmp	r2, r1
 800620a:	d100      	bne.n	800620e <memmove+0x2a>
 800620c:	bd10      	pop	{r4, pc}
 800620e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006212:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006216:	e7f7      	b.n	8006208 <memmove+0x24>

08006218 <_sbrk_r>:
 8006218:	b538      	push	{r3, r4, r5, lr}
 800621a:	4d06      	ldr	r5, [pc, #24]	@ (8006234 <_sbrk_r+0x1c>)
 800621c:	2300      	movs	r3, #0
 800621e:	4604      	mov	r4, r0
 8006220:	4608      	mov	r0, r1
 8006222:	602b      	str	r3, [r5, #0]
 8006224:	f7fc fed2 	bl	8002fcc <_sbrk>
 8006228:	1c43      	adds	r3, r0, #1
 800622a:	d102      	bne.n	8006232 <_sbrk_r+0x1a>
 800622c:	682b      	ldr	r3, [r5, #0]
 800622e:	b103      	cbz	r3, 8006232 <_sbrk_r+0x1a>
 8006230:	6023      	str	r3, [r4, #0]
 8006232:	bd38      	pop	{r3, r4, r5, pc}
 8006234:	20000b60 	.word	0x20000b60

08006238 <memcpy>:
 8006238:	440a      	add	r2, r1
 800623a:	4291      	cmp	r1, r2
 800623c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006240:	d100      	bne.n	8006244 <memcpy+0xc>
 8006242:	4770      	bx	lr
 8006244:	b510      	push	{r4, lr}
 8006246:	f811 4b01 	ldrb.w	r4, [r1], #1
 800624a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800624e:	4291      	cmp	r1, r2
 8006250:	d1f9      	bne.n	8006246 <memcpy+0xe>
 8006252:	bd10      	pop	{r4, pc}

08006254 <_realloc_r>:
 8006254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006258:	4680      	mov	r8, r0
 800625a:	4615      	mov	r5, r2
 800625c:	460c      	mov	r4, r1
 800625e:	b921      	cbnz	r1, 800626a <_realloc_r+0x16>
 8006260:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006264:	4611      	mov	r1, r2
 8006266:	f7ff b9c9 	b.w	80055fc <_malloc_r>
 800626a:	b92a      	cbnz	r2, 8006278 <_realloc_r+0x24>
 800626c:	f7ff f95a 	bl	8005524 <_free_r>
 8006270:	2400      	movs	r4, #0
 8006272:	4620      	mov	r0, r4
 8006274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006278:	f000 f89e 	bl	80063b8 <_malloc_usable_size_r>
 800627c:	4285      	cmp	r5, r0
 800627e:	4606      	mov	r6, r0
 8006280:	d802      	bhi.n	8006288 <_realloc_r+0x34>
 8006282:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006286:	d8f4      	bhi.n	8006272 <_realloc_r+0x1e>
 8006288:	4629      	mov	r1, r5
 800628a:	4640      	mov	r0, r8
 800628c:	f7ff f9b6 	bl	80055fc <_malloc_r>
 8006290:	4607      	mov	r7, r0
 8006292:	2800      	cmp	r0, #0
 8006294:	d0ec      	beq.n	8006270 <_realloc_r+0x1c>
 8006296:	42b5      	cmp	r5, r6
 8006298:	462a      	mov	r2, r5
 800629a:	4621      	mov	r1, r4
 800629c:	bf28      	it	cs
 800629e:	4632      	movcs	r2, r6
 80062a0:	f7ff ffca 	bl	8006238 <memcpy>
 80062a4:	4621      	mov	r1, r4
 80062a6:	4640      	mov	r0, r8
 80062a8:	f7ff f93c 	bl	8005524 <_free_r>
 80062ac:	463c      	mov	r4, r7
 80062ae:	e7e0      	b.n	8006272 <_realloc_r+0x1e>

080062b0 <__swhatbuf_r>:
 80062b0:	b570      	push	{r4, r5, r6, lr}
 80062b2:	460c      	mov	r4, r1
 80062b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062b8:	2900      	cmp	r1, #0
 80062ba:	b096      	sub	sp, #88	@ 0x58
 80062bc:	4615      	mov	r5, r2
 80062be:	461e      	mov	r6, r3
 80062c0:	da0d      	bge.n	80062de <__swhatbuf_r+0x2e>
 80062c2:	89a3      	ldrh	r3, [r4, #12]
 80062c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80062c8:	f04f 0100 	mov.w	r1, #0
 80062cc:	bf14      	ite	ne
 80062ce:	2340      	movne	r3, #64	@ 0x40
 80062d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80062d4:	2000      	movs	r0, #0
 80062d6:	6031      	str	r1, [r6, #0]
 80062d8:	602b      	str	r3, [r5, #0]
 80062da:	b016      	add	sp, #88	@ 0x58
 80062dc:	bd70      	pop	{r4, r5, r6, pc}
 80062de:	466a      	mov	r2, sp
 80062e0:	f000 f848 	bl	8006374 <_fstat_r>
 80062e4:	2800      	cmp	r0, #0
 80062e6:	dbec      	blt.n	80062c2 <__swhatbuf_r+0x12>
 80062e8:	9901      	ldr	r1, [sp, #4]
 80062ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80062ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80062f2:	4259      	negs	r1, r3
 80062f4:	4159      	adcs	r1, r3
 80062f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80062fa:	e7eb      	b.n	80062d4 <__swhatbuf_r+0x24>

080062fc <__smakebuf_r>:
 80062fc:	898b      	ldrh	r3, [r1, #12]
 80062fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006300:	079d      	lsls	r5, r3, #30
 8006302:	4606      	mov	r6, r0
 8006304:	460c      	mov	r4, r1
 8006306:	d507      	bpl.n	8006318 <__smakebuf_r+0x1c>
 8006308:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800630c:	6023      	str	r3, [r4, #0]
 800630e:	6123      	str	r3, [r4, #16]
 8006310:	2301      	movs	r3, #1
 8006312:	6163      	str	r3, [r4, #20]
 8006314:	b003      	add	sp, #12
 8006316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006318:	ab01      	add	r3, sp, #4
 800631a:	466a      	mov	r2, sp
 800631c:	f7ff ffc8 	bl	80062b0 <__swhatbuf_r>
 8006320:	9f00      	ldr	r7, [sp, #0]
 8006322:	4605      	mov	r5, r0
 8006324:	4639      	mov	r1, r7
 8006326:	4630      	mov	r0, r6
 8006328:	f7ff f968 	bl	80055fc <_malloc_r>
 800632c:	b948      	cbnz	r0, 8006342 <__smakebuf_r+0x46>
 800632e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006332:	059a      	lsls	r2, r3, #22
 8006334:	d4ee      	bmi.n	8006314 <__smakebuf_r+0x18>
 8006336:	f023 0303 	bic.w	r3, r3, #3
 800633a:	f043 0302 	orr.w	r3, r3, #2
 800633e:	81a3      	strh	r3, [r4, #12]
 8006340:	e7e2      	b.n	8006308 <__smakebuf_r+0xc>
 8006342:	89a3      	ldrh	r3, [r4, #12]
 8006344:	6020      	str	r0, [r4, #0]
 8006346:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800634a:	81a3      	strh	r3, [r4, #12]
 800634c:	9b01      	ldr	r3, [sp, #4]
 800634e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006352:	b15b      	cbz	r3, 800636c <__smakebuf_r+0x70>
 8006354:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006358:	4630      	mov	r0, r6
 800635a:	f000 f81d 	bl	8006398 <_isatty_r>
 800635e:	b128      	cbz	r0, 800636c <__smakebuf_r+0x70>
 8006360:	89a3      	ldrh	r3, [r4, #12]
 8006362:	f023 0303 	bic.w	r3, r3, #3
 8006366:	f043 0301 	orr.w	r3, r3, #1
 800636a:	81a3      	strh	r3, [r4, #12]
 800636c:	89a3      	ldrh	r3, [r4, #12]
 800636e:	431d      	orrs	r5, r3
 8006370:	81a5      	strh	r5, [r4, #12]
 8006372:	e7cf      	b.n	8006314 <__smakebuf_r+0x18>

08006374 <_fstat_r>:
 8006374:	b538      	push	{r3, r4, r5, lr}
 8006376:	4d07      	ldr	r5, [pc, #28]	@ (8006394 <_fstat_r+0x20>)
 8006378:	2300      	movs	r3, #0
 800637a:	4604      	mov	r4, r0
 800637c:	4608      	mov	r0, r1
 800637e:	4611      	mov	r1, r2
 8006380:	602b      	str	r3, [r5, #0]
 8006382:	f7fc fdfb 	bl	8002f7c <_fstat>
 8006386:	1c43      	adds	r3, r0, #1
 8006388:	d102      	bne.n	8006390 <_fstat_r+0x1c>
 800638a:	682b      	ldr	r3, [r5, #0]
 800638c:	b103      	cbz	r3, 8006390 <_fstat_r+0x1c>
 800638e:	6023      	str	r3, [r4, #0]
 8006390:	bd38      	pop	{r3, r4, r5, pc}
 8006392:	bf00      	nop
 8006394:	20000b60 	.word	0x20000b60

08006398 <_isatty_r>:
 8006398:	b538      	push	{r3, r4, r5, lr}
 800639a:	4d06      	ldr	r5, [pc, #24]	@ (80063b4 <_isatty_r+0x1c>)
 800639c:	2300      	movs	r3, #0
 800639e:	4604      	mov	r4, r0
 80063a0:	4608      	mov	r0, r1
 80063a2:	602b      	str	r3, [r5, #0]
 80063a4:	f7fc fdfa 	bl	8002f9c <_isatty>
 80063a8:	1c43      	adds	r3, r0, #1
 80063aa:	d102      	bne.n	80063b2 <_isatty_r+0x1a>
 80063ac:	682b      	ldr	r3, [r5, #0]
 80063ae:	b103      	cbz	r3, 80063b2 <_isatty_r+0x1a>
 80063b0:	6023      	str	r3, [r4, #0]
 80063b2:	bd38      	pop	{r3, r4, r5, pc}
 80063b4:	20000b60 	.word	0x20000b60

080063b8 <_malloc_usable_size_r>:
 80063b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063bc:	1f18      	subs	r0, r3, #4
 80063be:	2b00      	cmp	r3, #0
 80063c0:	bfbc      	itt	lt
 80063c2:	580b      	ldrlt	r3, [r1, r0]
 80063c4:	18c0      	addlt	r0, r0, r3
 80063c6:	4770      	bx	lr

080063c8 <_init>:
 80063c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ca:	bf00      	nop
 80063cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ce:	bc08      	pop	{r3}
 80063d0:	469e      	mov	lr, r3
 80063d2:	4770      	bx	lr

080063d4 <_fini>:
 80063d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d6:	bf00      	nop
 80063d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063da:	bc08      	pop	{r3}
 80063dc:	469e      	mov	lr, r3
 80063de:	4770      	bx	lr
