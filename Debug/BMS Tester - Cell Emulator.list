
BMS Tester - Cell Emulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089c0  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000112c  08008b6c  08008b6c  00009b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c98  08009c98  0000b5e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009c98  08009c98  0000ac98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ca0  08009ca0  0000b5e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ca0  08009ca0  0000aca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009ca4  08009ca4  0000aca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000005e4  20000000  08009ca8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b5e4  2**0
                  CONTENTS
 10 .bss          00000c14  200005e4  200005e4  0000b5e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200011f8  200011f8  0000b5e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b5e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00056185  00000000  00000000  0000b614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000054ba  00000000  00000000  00061799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003d40  00000000  00000000  00066c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002e59  00000000  00000000  0006a998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027fbe  00000000  00000000  0006d7f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002bd0d  00000000  00000000  000957af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7bf1  00000000  00000000  000c14bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001b90ad  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00010d70  00000000  00000000  001b90f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  001c9e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200005e4 	.word	0x200005e4
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08008b54 	.word	0x08008b54

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200005e8 	.word	0x200005e8
 80001e8:	08008b54 	.word	0x08008b54

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <LED_Init>:
};

GPIO_PinState cell_led_states[NUM_CELL_LEDS];

// Initialize all LEDs (set to OFF)
void LED_Init(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0

    for (uint8_t i = 0; i < NUM_LEDS; i++) {
 80004e2:	2300      	movs	r3, #0
 80004e4:	73fb      	strb	r3, [r7, #15]
 80004e6:	e00f      	b.n	8000508 <LED_Init+0x2c>
        HAL_GPIO_WritePin(leds[i].port, leds[i].pin, GPIO_PIN_RESET);
 80004e8:	7bfb      	ldrb	r3, [r7, #15]
 80004ea:	4a33      	ldr	r2, [pc, #204]	@ (80005b8 <LED_Init+0xdc>)
 80004ec:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80004f0:	7bfb      	ldrb	r3, [r7, #15]
 80004f2:	4a31      	ldr	r2, [pc, #196]	@ (80005b8 <LED_Init+0xdc>)
 80004f4:	00db      	lsls	r3, r3, #3
 80004f6:	4413      	add	r3, r2
 80004f8:	889b      	ldrh	r3, [r3, #4]
 80004fa:	2200      	movs	r2, #0
 80004fc:	4619      	mov	r1, r3
 80004fe:	f005 fa3d 	bl	800597c <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < NUM_LEDS; i++) {
 8000502:	7bfb      	ldrb	r3, [r7, #15]
 8000504:	3301      	adds	r3, #1
 8000506:	73fb      	strb	r3, [r7, #15]
 8000508:	7bfb      	ldrb	r3, [r7, #15]
 800050a:	2b09      	cmp	r3, #9
 800050c:	d9ec      	bls.n	80004e8 <LED_Init+0xc>
    }

    for (uint8_t i = 0; i < NUM_COMM_LEDS; i++) {
 800050e:	2300      	movs	r3, #0
 8000510:	73bb      	strb	r3, [r7, #14]
 8000512:	e00f      	b.n	8000534 <LED_Init+0x58>
        HAL_GPIO_WritePin(comm_leds[i].port, comm_leds[i].pin, GPIO_PIN_RESET);
 8000514:	7bbb      	ldrb	r3, [r7, #14]
 8000516:	4a29      	ldr	r2, [pc, #164]	@ (80005bc <LED_Init+0xe0>)
 8000518:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800051c:	7bbb      	ldrb	r3, [r7, #14]
 800051e:	4a27      	ldr	r2, [pc, #156]	@ (80005bc <LED_Init+0xe0>)
 8000520:	00db      	lsls	r3, r3, #3
 8000522:	4413      	add	r3, r2
 8000524:	889b      	ldrh	r3, [r3, #4]
 8000526:	2200      	movs	r2, #0
 8000528:	4619      	mov	r1, r3
 800052a:	f005 fa27 	bl	800597c <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < NUM_COMM_LEDS; i++) {
 800052e:	7bbb      	ldrb	r3, [r7, #14]
 8000530:	3301      	adds	r3, #1
 8000532:	73bb      	strb	r3, [r7, #14]
 8000534:	7bbb      	ldrb	r3, [r7, #14]
 8000536:	2b03      	cmp	r3, #3
 8000538:	d9ec      	bls.n	8000514 <LED_Init+0x38>
    }

    for (uint8_t i = 0; i < NUM_TEMP_LEDS; i++) {
 800053a:	2300      	movs	r3, #0
 800053c:	737b      	strb	r3, [r7, #13]
 800053e:	e00f      	b.n	8000560 <LED_Init+0x84>
        HAL_GPIO_WritePin(temp_leds[i].port, temp_leds[i].pin, GPIO_PIN_SET); // Active low
 8000540:	7b7b      	ldrb	r3, [r7, #13]
 8000542:	4a1f      	ldr	r2, [pc, #124]	@ (80005c0 <LED_Init+0xe4>)
 8000544:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000548:	7b7b      	ldrb	r3, [r7, #13]
 800054a:	4a1d      	ldr	r2, [pc, #116]	@ (80005c0 <LED_Init+0xe4>)
 800054c:	00db      	lsls	r3, r3, #3
 800054e:	4413      	add	r3, r2
 8000550:	889b      	ldrh	r3, [r3, #4]
 8000552:	2201      	movs	r2, #1
 8000554:	4619      	mov	r1, r3
 8000556:	f005 fa11 	bl	800597c <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < NUM_TEMP_LEDS; i++) {
 800055a:	7b7b      	ldrb	r3, [r7, #13]
 800055c:	3301      	adds	r3, #1
 800055e:	737b      	strb	r3, [r7, #13]
 8000560:	7b7b      	ldrb	r3, [r7, #13]
 8000562:	2b05      	cmp	r3, #5
 8000564:	d9ec      	bls.n	8000540 <LED_Init+0x64>
    }

    // Initialize cell LED states and set hardware LEDs to OFF
    for (uint8_t i = 0; i < NUM_CELL_LEDS; i++) {
 8000566:	2300      	movs	r3, #0
 8000568:	733b      	strb	r3, [r7, #12]
 800056a:	e01d      	b.n	80005a8 <LED_Init+0xcc>
        cell_led_states[i] = GPIO_PIN_SET; // Assume LEDs are off (active-low logic)
 800056c:	7b3b      	ldrb	r3, [r7, #12]
 800056e:	4a15      	ldr	r2, [pc, #84]	@ (80005c4 <LED_Init+0xe8>)
 8000570:	2101      	movs	r1, #1
 8000572:	54d1      	strb	r1, [r2, r3]
        I2C_HandleTypeDef *i2c_handle = cell_leds[i].i2c_handle;
 8000574:	7b3b      	ldrb	r3, [r7, #12]
 8000576:	4a14      	ldr	r2, [pc, #80]	@ (80005c8 <LED_Init+0xec>)
 8000578:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800057c:	60bb      	str	r3, [r7, #8]
        uint8_t expander_id = cell_leds[i].expander_id;
 800057e:	7b3b      	ldrb	r3, [r7, #12]
 8000580:	4a11      	ldr	r2, [pc, #68]	@ (80005c8 <LED_Init+0xec>)
 8000582:	00db      	lsls	r3, r3, #3
 8000584:	4413      	add	r3, r2
 8000586:	791b      	ldrb	r3, [r3, #4]
 8000588:	71fb      	strb	r3, [r7, #7]
        uint16_t pin = cell_leds[i].pin;
 800058a:	7b3b      	ldrb	r3, [r7, #12]
 800058c:	4a0e      	ldr	r2, [pc, #56]	@ (80005c8 <LED_Init+0xec>)
 800058e:	00db      	lsls	r3, r3, #3
 8000590:	4413      	add	r3, r2
 8000592:	88db      	ldrh	r3, [r3, #6]
 8000594:	80bb      	strh	r3, [r7, #4]

        // Ensure LEDs are turned off at initialization
        Expander_SetPinState(i2c_handle, expander_id, pin, GPIO_PIN_SET); // Active low
 8000596:	88ba      	ldrh	r2, [r7, #4]
 8000598:	79f9      	ldrb	r1, [r7, #7]
 800059a:	2301      	movs	r3, #1
 800059c:	68b8      	ldr	r0, [r7, #8]
 800059e:	f002 f975 	bl	800288c <Expander_SetPinState>
    for (uint8_t i = 0; i < NUM_CELL_LEDS; i++) {
 80005a2:	7b3b      	ldrb	r3, [r7, #12]
 80005a4:	3301      	adds	r3, #1
 80005a6:	733b      	strb	r3, [r7, #12]
 80005a8:	7b3b      	ldrb	r3, [r7, #12]
 80005aa:	2b17      	cmp	r3, #23
 80005ac:	d9de      	bls.n	800056c <LED_Init+0x90>
    }

}
 80005ae:	bf00      	nop
 80005b0:	bf00      	nop
 80005b2:	3710      	adds	r7, #16
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000000 	.word	0x20000000
 80005bc:	20000050 	.word	0x20000050
 80005c0:	20000070 	.word	0x20000070
 80005c4:	20000600 	.word	0x20000600
 80005c8:	200000a0 	.word	0x200000a0

080005cc <LED_Set>:

// Set a specific LED
void LED_Set(LED_ID led, LED_Set_State state) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	460a      	mov	r2, r1
 80005d6:	71fb      	strb	r3, [r7, #7]
 80005d8:	4613      	mov	r3, r2
 80005da:	71bb      	strb	r3, [r7, #6]
    if (led <= NUM_LEDS) {
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	2b0a      	cmp	r3, #10
 80005e0:	d813      	bhi.n	800060a <LED_Set+0x3e>
        HAL_GPIO_WritePin(leds[led - 1].port, leds[led - 1].pin, (state == High) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	3b01      	subs	r3, #1
 80005e6:	4a0b      	ldr	r2, [pc, #44]	@ (8000614 <LED_Set+0x48>)
 80005e8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	3b01      	subs	r3, #1
 80005f0:	4a08      	ldr	r2, [pc, #32]	@ (8000614 <LED_Set+0x48>)
 80005f2:	00db      	lsls	r3, r3, #3
 80005f4:	4413      	add	r3, r2
 80005f6:	8899      	ldrh	r1, [r3, #4]
 80005f8:	79bb      	ldrb	r3, [r7, #6]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	bf0c      	ite	eq
 80005fe:	2301      	moveq	r3, #1
 8000600:	2300      	movne	r3, #0
 8000602:	b2db      	uxtb	r3, r3
 8000604:	461a      	mov	r2, r3
 8000606:	f005 f9b9 	bl	800597c <HAL_GPIO_WritePin>
    }
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000000 	.word	0x20000000

08000618 <LED_RS485>:
    if (led <= NUM_LEDS) {
        HAL_GPIO_TogglePin(leds[led - 1].port, leds[led - 1].pin);
    }
}

void LED_RS485(CommLED_ID led, LED_Set_State state) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	460a      	mov	r2, r1
 8000622:	71fb      	strb	r3, [r7, #7]
 8000624:	4613      	mov	r3, r2
 8000626:	71bb      	strb	r3, [r7, #6]
    if (led < NUM_COMM_LEDS) {
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	2b03      	cmp	r3, #3
 800062c:	d811      	bhi.n	8000652 <LED_RS485+0x3a>
        HAL_GPIO_WritePin(comm_leds[led].port, comm_leds[led].pin, (state == High) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	4a0a      	ldr	r2, [pc, #40]	@ (800065c <LED_RS485+0x44>)
 8000632:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	4a08      	ldr	r2, [pc, #32]	@ (800065c <LED_RS485+0x44>)
 800063a:	00db      	lsls	r3, r3, #3
 800063c:	4413      	add	r3, r2
 800063e:	8899      	ldrh	r1, [r3, #4]
 8000640:	79bb      	ldrb	r3, [r7, #6]
 8000642:	2b01      	cmp	r3, #1
 8000644:	bf0c      	ite	eq
 8000646:	2301      	moveq	r3, #1
 8000648:	2300      	movne	r3, #0
 800064a:	b2db      	uxtb	r3, r3
 800064c:	461a      	mov	r2, r3
 800064e:	f005 f995 	bl	800597c <HAL_GPIO_WritePin>
    }
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000050 	.word	0x20000050

08000660 <LED_Temp>:
    if (led < NUM_COMM_LEDS) {
        HAL_GPIO_TogglePin(comm_leds[led].port, comm_leds[led].pin);
    }
}

void LED_Temp(TempLED_ID led, LED_Set_State state) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	460a      	mov	r2, r1
 800066a:	71fb      	strb	r3, [r7, #7]
 800066c:	4613      	mov	r3, r2
 800066e:	71bb      	strb	r3, [r7, #6]
    if (led < NUM_TEMP_LEDS) {
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	2b05      	cmp	r3, #5
 8000674:	d811      	bhi.n	800069a <LED_Temp+0x3a>
        HAL_GPIO_WritePin(temp_leds[led].port, temp_leds[led].pin, (state == High) ? GPIO_PIN_RESET : GPIO_PIN_SET); // Active low logic
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	4a0a      	ldr	r2, [pc, #40]	@ (80006a4 <LED_Temp+0x44>)
 800067a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	4a08      	ldr	r2, [pc, #32]	@ (80006a4 <LED_Temp+0x44>)
 8000682:	00db      	lsls	r3, r3, #3
 8000684:	4413      	add	r3, r2
 8000686:	8899      	ldrh	r1, [r3, #4]
 8000688:	79bb      	ldrb	r3, [r7, #6]
 800068a:	2b01      	cmp	r3, #1
 800068c:	bf14      	ite	ne
 800068e:	2301      	movne	r3, #1
 8000690:	2300      	moveq	r3, #0
 8000692:	b2db      	uxtb	r3, r3
 8000694:	461a      	mov	r2, r3
 8000696:	f005 f971 	bl	800597c <HAL_GPIO_WritePin>
    }
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000070 	.word	0x20000070

080006a8 <LED_Cell>:
    if (led < NUM_TEMP_LEDS) {
        HAL_GPIO_TogglePin(temp_leds[led].port, temp_leds[led].pin);
    }
}

void LED_Cell(CellLED_ID cell, LED_Set_State state) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	460a      	mov	r2, r1
 80006b2:	71fb      	strb	r3, [r7, #7]
 80006b4:	4613      	mov	r3, r2
 80006b6:	71bb      	strb	r3, [r7, #6]
    if (cell < NUM_CELL_LEDS) {
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	2b17      	cmp	r3, #23
 80006bc:	d825      	bhi.n	800070a <LED_Cell+0x62>
        I2C_HandleTypeDef *i2c_handle = cell_leds[cell].i2c_handle;
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	4a14      	ldr	r2, [pc, #80]	@ (8000714 <LED_Cell+0x6c>)
 80006c2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80006c6:	60fb      	str	r3, [r7, #12]
        uint8_t expander_id = cell_leds[cell].expander_id;
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	4a12      	ldr	r2, [pc, #72]	@ (8000714 <LED_Cell+0x6c>)
 80006cc:	00db      	lsls	r3, r3, #3
 80006ce:	4413      	add	r3, r2
 80006d0:	791b      	ldrb	r3, [r3, #4]
 80006d2:	72fb      	strb	r3, [r7, #11]
        uint16_t pin = cell_leds[cell].pin;
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	4a0f      	ldr	r2, [pc, #60]	@ (8000714 <LED_Cell+0x6c>)
 80006d8:	00db      	lsls	r3, r3, #3
 80006da:	4413      	add	r3, r2
 80006dc:	88db      	ldrh	r3, [r3, #6]
 80006de:	813b      	strh	r3, [r7, #8]

        // Send command to the appropriate GPIO expander
        Expander_SetPinState(i2c_handle, expander_id, pin,
 80006e0:	79bb      	ldrb	r3, [r7, #6]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	bf14      	ite	ne
 80006e6:	2301      	movne	r3, #1
 80006e8:	2300      	moveq	r3, #0
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	893a      	ldrh	r2, [r7, #8]
 80006ee:	7af9      	ldrb	r1, [r7, #11]
 80006f0:	68f8      	ldr	r0, [r7, #12]
 80006f2:	f002 f8cb 	bl	800288c <Expander_SetPinState>
                             (state == High) ? GPIO_PIN_RESET : GPIO_PIN_SET);

        cell_led_states[cell] = (state == High) ? GPIO_PIN_RESET : GPIO_PIN_SET;
 80006f6:	79bb      	ldrb	r3, [r7, #6]
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	bf14      	ite	ne
 80006fc:	2301      	movne	r3, #1
 80006fe:	2300      	moveq	r3, #0
 8000700:	b2da      	uxtb	r2, r3
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	4611      	mov	r1, r2
 8000706:	4a04      	ldr	r2, [pc, #16]	@ (8000718 <LED_Cell+0x70>)
 8000708:	54d1      	strb	r1, [r2, r3]
    }
}
 800070a:	bf00      	nop
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	200000a0 	.word	0x200000a0
 8000718:	20000600 	.word	0x20000600

0800071c <LED_SetAll>:
        Expander_SetPinState(i2c_handle, expander_id, pin, cell_led_states[cell]);
    }
}

// Set all LEDs to a specific state
void LED_SetAll(LED_Set_State state) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < NUM_LEDS; i++) {
 8000726:	2300      	movs	r3, #0
 8000728:	73fb      	strb	r3, [r7, #15]
 800072a:	e014      	b.n	8000756 <LED_SetAll+0x3a>
        HAL_GPIO_WritePin(leds[i].port, leds[i].pin, state == High ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	4a29      	ldr	r2, [pc, #164]	@ (80007d4 <LED_SetAll+0xb8>)
 8000730:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	4a27      	ldr	r2, [pc, #156]	@ (80007d4 <LED_SetAll+0xb8>)
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	4413      	add	r3, r2
 800073c:	8899      	ldrh	r1, [r3, #4]
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	2b01      	cmp	r3, #1
 8000742:	bf0c      	ite	eq
 8000744:	2301      	moveq	r3, #1
 8000746:	2300      	movne	r3, #0
 8000748:	b2db      	uxtb	r3, r3
 800074a:	461a      	mov	r2, r3
 800074c:	f005 f916 	bl	800597c <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < NUM_LEDS; i++) {
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	3301      	adds	r3, #1
 8000754:	73fb      	strb	r3, [r7, #15]
 8000756:	7bfb      	ldrb	r3, [r7, #15]
 8000758:	2b09      	cmp	r3, #9
 800075a:	d9e7      	bls.n	800072c <LED_SetAll+0x10>
    }
    for (uint8_t i = 0; i < NUM_COMM_LEDS; i++) {
 800075c:	2300      	movs	r3, #0
 800075e:	73bb      	strb	r3, [r7, #14]
 8000760:	e014      	b.n	800078c <LED_SetAll+0x70>
        HAL_GPIO_WritePin(comm_leds[i].port, comm_leds[i].pin, state == High ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000762:	7bbb      	ldrb	r3, [r7, #14]
 8000764:	4a1c      	ldr	r2, [pc, #112]	@ (80007d8 <LED_SetAll+0xbc>)
 8000766:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800076a:	7bbb      	ldrb	r3, [r7, #14]
 800076c:	4a1a      	ldr	r2, [pc, #104]	@ (80007d8 <LED_SetAll+0xbc>)
 800076e:	00db      	lsls	r3, r3, #3
 8000770:	4413      	add	r3, r2
 8000772:	8899      	ldrh	r1, [r3, #4]
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	2b01      	cmp	r3, #1
 8000778:	bf0c      	ite	eq
 800077a:	2301      	moveq	r3, #1
 800077c:	2300      	movne	r3, #0
 800077e:	b2db      	uxtb	r3, r3
 8000780:	461a      	mov	r2, r3
 8000782:	f005 f8fb 	bl	800597c <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < NUM_COMM_LEDS; i++) {
 8000786:	7bbb      	ldrb	r3, [r7, #14]
 8000788:	3301      	adds	r3, #1
 800078a:	73bb      	strb	r3, [r7, #14]
 800078c:	7bbb      	ldrb	r3, [r7, #14]
 800078e:	2b03      	cmp	r3, #3
 8000790:	d9e7      	bls.n	8000762 <LED_SetAll+0x46>
    }
    for (uint8_t i = 0; i < NUM_TEMP_LEDS; i++) {
 8000792:	2300      	movs	r3, #0
 8000794:	737b      	strb	r3, [r7, #13]
 8000796:	e014      	b.n	80007c2 <LED_SetAll+0xa6>
        HAL_GPIO_WritePin(temp_leds[i].port, temp_leds[i].pin, state == High ? GPIO_PIN_RESET : GPIO_PIN_SET); // Active low
 8000798:	7b7b      	ldrb	r3, [r7, #13]
 800079a:	4a10      	ldr	r2, [pc, #64]	@ (80007dc <LED_SetAll+0xc0>)
 800079c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80007a0:	7b7b      	ldrb	r3, [r7, #13]
 80007a2:	4a0e      	ldr	r2, [pc, #56]	@ (80007dc <LED_SetAll+0xc0>)
 80007a4:	00db      	lsls	r3, r3, #3
 80007a6:	4413      	add	r3, r2
 80007a8:	8899      	ldrh	r1, [r3, #4]
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	bf14      	ite	ne
 80007b0:	2301      	movne	r3, #1
 80007b2:	2300      	moveq	r3, #0
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	461a      	mov	r2, r3
 80007b8:	f005 f8e0 	bl	800597c <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < NUM_TEMP_LEDS; i++) {
 80007bc:	7b7b      	ldrb	r3, [r7, #13]
 80007be:	3301      	adds	r3, #1
 80007c0:	737b      	strb	r3, [r7, #13]
 80007c2:	7b7b      	ldrb	r3, [r7, #13]
 80007c4:	2b05      	cmp	r3, #5
 80007c6:	d9e7      	bls.n	8000798 <LED_SetAll+0x7c>
    }
}
 80007c8:	bf00      	nop
 80007ca:	bf00      	nop
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000000 	.word	0x20000000
 80007d8:	20000050 	.word	0x20000050
 80007dc:	20000070 	.word	0x20000070

080007e0 <LED_Test_All>:
    for (uint8_t i = 0; i < NUM_LEDS; i++) {
        HAL_GPIO_TogglePin(leds[i].port, leds[i].pin);
    }
}

void LED_Test_All(void) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
    // Turn ON Standard LEDs in sequence
    for (LED_ID led = LED_1; led <= NUM_LEDS; led++) {
 80007e6:	2301      	movs	r3, #1
 80007e8:	73fb      	strb	r3, [r7, #15]
 80007ea:	e00f      	b.n	800080c <LED_Test_All+0x2c>
        LED_Set(led, High);
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	2101      	movs	r1, #1
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff feeb 	bl	80005cc <LED_Set>
        HAL_Delay(100);
 80007f6:	2064      	movs	r0, #100	@ 0x64
 80007f8:	f004 fa18 	bl	8004c2c <HAL_Delay>
        LED_Set(led, Low);
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
 80007fe:	2100      	movs	r1, #0
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff fee3 	bl	80005cc <LED_Set>
    for (LED_ID led = LED_1; led <= NUM_LEDS; led++) {
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	3301      	adds	r3, #1
 800080a:	73fb      	strb	r3, [r7, #15]
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	2b0a      	cmp	r3, #10
 8000810:	d9ec      	bls.n	80007ec <LED_Test_All+0xc>
    }

    // Blink Communication LEDs twice
    for (int i = 0; i < 2; i++) {
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	e024      	b.n	8000862 <LED_Test_All+0x82>
        for (CommLED_ID comm_led = PC_G; comm_led < NUM_COMM_LEDS; comm_led++) {
 8000818:	2300      	movs	r3, #0
 800081a:	71fb      	strb	r3, [r7, #7]
 800081c:	e007      	b.n	800082e <LED_Test_All+0x4e>
            LED_RS485(comm_led, High);
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	2101      	movs	r1, #1
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff fef8 	bl	8000618 <LED_RS485>
        for (CommLED_ID comm_led = PC_G; comm_led < NUM_COMM_LEDS; comm_led++) {
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	3301      	adds	r3, #1
 800082c:	71fb      	strb	r3, [r7, #7]
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	2b03      	cmp	r3, #3
 8000832:	d9f4      	bls.n	800081e <LED_Test_All+0x3e>
        }
        HAL_Delay(200);
 8000834:	20c8      	movs	r0, #200	@ 0xc8
 8000836:	f004 f9f9 	bl	8004c2c <HAL_Delay>
        for (CommLED_ID comm_led = PC_G; comm_led < NUM_COMM_LEDS; comm_led++) {
 800083a:	2300      	movs	r3, #0
 800083c:	71bb      	strb	r3, [r7, #6]
 800083e:	e007      	b.n	8000850 <LED_Test_All+0x70>
            LED_RS485(comm_led, Low);
 8000840:	79bb      	ldrb	r3, [r7, #6]
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff fee7 	bl	8000618 <LED_RS485>
        for (CommLED_ID comm_led = PC_G; comm_led < NUM_COMM_LEDS; comm_led++) {
 800084a:	79bb      	ldrb	r3, [r7, #6]
 800084c:	3301      	adds	r3, #1
 800084e:	71bb      	strb	r3, [r7, #6]
 8000850:	79bb      	ldrb	r3, [r7, #6]
 8000852:	2b03      	cmp	r3, #3
 8000854:	d9f4      	bls.n	8000840 <LED_Test_All+0x60>
        }
        HAL_Delay(200);
 8000856:	20c8      	movs	r0, #200	@ 0xc8
 8000858:	f004 f9e8 	bl	8004c2c <HAL_Delay>
    for (int i = 0; i < 2; i++) {
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	3301      	adds	r3, #1
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	2b01      	cmp	r3, #1
 8000866:	ddd7      	ble.n	8000818 <LED_Test_All+0x38>
    }

    // Activate all Temperature LEDs momentarily
    for (TempLED_ID temp_led = CELL12_TEMP_01; temp_led < NUM_TEMP_LEDS; temp_led++) {
 8000868:	2300      	movs	r3, #0
 800086a:	717b      	strb	r3, [r7, #5]
 800086c:	e007      	b.n	800087e <LED_Test_All+0x9e>
        LED_Temp(temp_led, High);
 800086e:	797b      	ldrb	r3, [r7, #5]
 8000870:	2101      	movs	r1, #1
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fef4 	bl	8000660 <LED_Temp>
    for (TempLED_ID temp_led = CELL12_TEMP_01; temp_led < NUM_TEMP_LEDS; temp_led++) {
 8000878:	797b      	ldrb	r3, [r7, #5]
 800087a:	3301      	adds	r3, #1
 800087c:	717b      	strb	r3, [r7, #5]
 800087e:	797b      	ldrb	r3, [r7, #5]
 8000880:	2b05      	cmp	r3, #5
 8000882:	d9f4      	bls.n	800086e <LED_Test_All+0x8e>
    }
    HAL_Delay(500); // Hold for 500ms
 8000884:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000888:	f004 f9d0 	bl	8004c2c <HAL_Delay>
    for (TempLED_ID temp_led = CELL12_TEMP_01; temp_led < NUM_TEMP_LEDS; temp_led++) {
 800088c:	2300      	movs	r3, #0
 800088e:	713b      	strb	r3, [r7, #4]
 8000890:	e007      	b.n	80008a2 <LED_Test_All+0xc2>
        LED_Temp(temp_led, Low);
 8000892:	793b      	ldrb	r3, [r7, #4]
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff fee2 	bl	8000660 <LED_Temp>
    for (TempLED_ID temp_led = CELL12_TEMP_01; temp_led < NUM_TEMP_LEDS; temp_led++) {
 800089c:	793b      	ldrb	r3, [r7, #4]
 800089e:	3301      	adds	r3, #1
 80008a0:	713b      	strb	r3, [r7, #4]
 80008a2:	793b      	ldrb	r3, [r7, #4]
 80008a4:	2b05      	cmp	r3, #5
 80008a6:	d9f4      	bls.n	8000892 <LED_Test_All+0xb2>
    }

    // Sequentially turn ON and OFF Cell LEDs
    for (CellLED_ID cell_led = CELL12_CELL1; cell_led < NUM_CELL_LEDS; cell_led++) {
 80008a8:	2300      	movs	r3, #0
 80008aa:	70fb      	strb	r3, [r7, #3]
 80008ac:	e00f      	b.n	80008ce <LED_Test_All+0xee>
        LED_Cell(cell_led, High);
 80008ae:	78fb      	ldrb	r3, [r7, #3]
 80008b0:	2101      	movs	r1, #1
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff fef8 	bl	80006a8 <LED_Cell>
        HAL_Delay(100); // Delay between LEDs for visibility
 80008b8:	2064      	movs	r0, #100	@ 0x64
 80008ba:	f004 f9b7 	bl	8004c2c <HAL_Delay>
        LED_Cell(cell_led, Low);
 80008be:	78fb      	ldrb	r3, [r7, #3]
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fef0 	bl	80006a8 <LED_Cell>
    for (CellLED_ID cell_led = CELL12_CELL1; cell_led < NUM_CELL_LEDS; cell_led++) {
 80008c8:	78fb      	ldrb	r3, [r7, #3]
 80008ca:	3301      	adds	r3, #1
 80008cc:	70fb      	strb	r3, [r7, #3]
 80008ce:	78fb      	ldrb	r3, [r7, #3]
 80008d0:	2b17      	cmp	r3, #23
 80008d2:	d9ec      	bls.n	80008ae <LED_Test_All+0xce>
    }
}
 80008d4:	bf00      	nop
 80008d6:	bf00      	nop
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <u8x8_stm32_gpio_and_delay>:
 */
static uint8_t u8x8_stm32_gpio_and_delay(u8x8_t * const u8x8,
                                           uint8_t msg,
                                           uint8_t arg_int,
                                           void * const arg_ptr)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	460b      	mov	r3, r1
 80008ec:	72fb      	strb	r3, [r7, #11]
 80008ee:	4613      	mov	r3, r2
 80008f0:	72bb      	strb	r3, [r7, #10]
    /* Suppress unused parameter warnings */
    (void)u8x8;
    (void)arg_ptr;

    switch (msg)
 80008f2:	7afb      	ldrb	r3, [r7, #11]
 80008f4:	2b4b      	cmp	r3, #75	@ 0x4b
 80008f6:	d01a      	beq.n	800092e <u8x8_stm32_gpio_and_delay+0x4e>
 80008f8:	2b4b      	cmp	r3, #75	@ 0x4b
 80008fa:	dc1f      	bgt.n	800093c <u8x8_stm32_gpio_and_delay+0x5c>
 80008fc:	2b4a      	cmp	r3, #74	@ 0x4a
 80008fe:	d00f      	beq.n	8000920 <u8x8_stm32_gpio_and_delay+0x40>
 8000900:	2b4a      	cmp	r3, #74	@ 0x4a
 8000902:	dc1b      	bgt.n	800093c <u8x8_stm32_gpio_and_delay+0x5c>
 8000904:	2b28      	cmp	r3, #40	@ 0x28
 8000906:	d002      	beq.n	800090e <u8x8_stm32_gpio_and_delay+0x2e>
 8000908:	2b29      	cmp	r3, #41	@ 0x29
 800090a:	d004      	beq.n	8000916 <u8x8_stm32_gpio_and_delay+0x36>
        case U8X8_MSG_GPIO_RESET:
            HAL_GPIO_WritePin(DISPLAY_IO_1_GPIO_Port, DISPLAY_IO_1_Pin, (GPIO_PinState)arg_int);
            break;
        default:
            /* No action */
            break;
 800090c:	e016      	b.n	800093c <u8x8_stm32_gpio_and_delay+0x5c>
            HAL_Delay(DISPLAY_UPDATE_DELAY_U32);
 800090e:	2002      	movs	r0, #2
 8000910:	f004 f98c 	bl	8004c2c <HAL_Delay>
            break;
 8000914:	e013      	b.n	800093e <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_Delay(arg_int);
 8000916:	7abb      	ldrb	r3, [r7, #10]
 8000918:	4618      	mov	r0, r3
 800091a:	f004 f987 	bl	8004c2c <HAL_Delay>
            break;
 800091e:	e00e      	b.n	800093e <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_GPIO_WritePin(DISPLAY_IO_2_GPIO_Port, DISPLAY_IO_2_Pin, (GPIO_PinState)arg_int);
 8000920:	7abb      	ldrb	r3, [r7, #10]
 8000922:	461a      	mov	r2, r3
 8000924:	2108      	movs	r1, #8
 8000926:	4808      	ldr	r0, [pc, #32]	@ (8000948 <u8x8_stm32_gpio_and_delay+0x68>)
 8000928:	f005 f828 	bl	800597c <HAL_GPIO_WritePin>
            break;
 800092c:	e007      	b.n	800093e <u8x8_stm32_gpio_and_delay+0x5e>
            HAL_GPIO_WritePin(DISPLAY_IO_1_GPIO_Port, DISPLAY_IO_1_Pin, (GPIO_PinState)arg_int);
 800092e:	7abb      	ldrb	r3, [r7, #10]
 8000930:	461a      	mov	r2, r3
 8000932:	2104      	movs	r1, #4
 8000934:	4804      	ldr	r0, [pc, #16]	@ (8000948 <u8x8_stm32_gpio_and_delay+0x68>)
 8000936:	f005 f821 	bl	800597c <HAL_GPIO_WritePin>
            break;
 800093a:	e000      	b.n	800093e <u8x8_stm32_gpio_and_delay+0x5e>
            break;
 800093c:	bf00      	nop
    }
    return 1U;
 800093e:	2301      	movs	r3, #1
}
 8000940:	4618      	mov	r0, r3
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40021800 	.word	0x40021800

0800094c <u8x8_byte_4wire_hw_spi>:
 */
static uint8_t u8x8_byte_4wire_hw_spi(u8x8_t * const u8x8,
                                      uint8_t msg,
                                      uint8_t arg_int,
                                      void * const arg_ptr)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	460b      	mov	r3, r1
 8000958:	72fb      	strb	r3, [r7, #11]
 800095a:	4613      	mov	r3, r2
 800095c:	72bb      	strb	r3, [r7, #10]
    uint8_t retVal = 1U;
 800095e:	2301      	movs	r3, #1
 8000960:	75fb      	strb	r3, [r7, #23]

    switch (msg)
 8000962:	7afb      	ldrb	r3, [r7, #11]
 8000964:	3b14      	subs	r3, #20
 8000966:	2b0c      	cmp	r3, #12
 8000968:	d83e      	bhi.n	80009e8 <u8x8_byte_4wire_hw_spi+0x9c>
 800096a:	a201      	add	r2, pc, #4	@ (adr r2, 8000970 <u8x8_byte_4wire_hw_spi+0x24>)
 800096c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000970:	080009ef 	.word	0x080009ef
 8000974:	080009e9 	.word	0x080009e9
 8000978:	080009e9 	.word	0x080009e9
 800097c:	080009a5 	.word	0x080009a5
 8000980:	080009c5 	.word	0x080009c5
 8000984:	080009d7 	.word	0x080009d7
 8000988:	080009e9 	.word	0x080009e9
 800098c:	080009e9 	.word	0x080009e9
 8000990:	080009e9 	.word	0x080009e9
 8000994:	080009e9 	.word	0x080009e9
 8000998:	080009e9 	.word	0x080009e9
 800099c:	080009e9 	.word	0x080009e9
 80009a0:	080009b7 	.word	0x080009b7
    {
        case U8X8_MSG_BYTE_SEND:
            (void)HAL_SPI_Transmit(&hspi3, (uint8_t *)arg_ptr, arg_int, SPI_TIMEOUT_U32);
 80009a4:	7abb      	ldrb	r3, [r7, #10]
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80009ac:	6879      	ldr	r1, [r7, #4]
 80009ae:	4813      	ldr	r0, [pc, #76]	@ (80009fc <u8x8_byte_4wire_hw_spi+0xb0>)
 80009b0:	f006 fd7f 	bl	80074b2 <HAL_SPI_Transmit>
            break;
 80009b4:	e01c      	b.n	80009f0 <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_INIT:
            break;
        case U8X8_MSG_BYTE_SET_DC:
            HAL_GPIO_WritePin(DISPLAY_IO_2_GPIO_Port, DISPLAY_IO_2_Pin, (GPIO_PinState)arg_int);
 80009b6:	7abb      	ldrb	r3, [r7, #10]
 80009b8:	461a      	mov	r2, r3
 80009ba:	2108      	movs	r1, #8
 80009bc:	4810      	ldr	r0, [pc, #64]	@ (8000a00 <u8x8_byte_4wire_hw_spi+0xb4>)
 80009be:	f004 ffdd 	bl	800597c <HAL_GPIO_WritePin>
            break;
 80009c2:	e015      	b.n	80009f0 <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_START_TRANSFER:
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, u8x8->display_info->chip_enable_level);
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	461a      	mov	r2, r3
 80009cc:	2104      	movs	r1, #4
 80009ce:	480d      	ldr	r0, [pc, #52]	@ (8000a04 <u8x8_byte_4wire_hw_spi+0xb8>)
 80009d0:	f004 ffd4 	bl	800597c <HAL_GPIO_WritePin>
            break;
 80009d4:	e00c      	b.n	80009f0 <u8x8_byte_4wire_hw_spi+0xa4>
        case U8X8_MSG_BYTE_END_TRANSFER:
            HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, u8x8->display_info->chip_disable_level);
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	785b      	ldrb	r3, [r3, #1]
 80009dc:	461a      	mov	r2, r3
 80009de:	2104      	movs	r1, #4
 80009e0:	4808      	ldr	r0, [pc, #32]	@ (8000a04 <u8x8_byte_4wire_hw_spi+0xb8>)
 80009e2:	f004 ffcb 	bl	800597c <HAL_GPIO_WritePin>
            break;
 80009e6:	e003      	b.n	80009f0 <u8x8_byte_4wire_hw_spi+0xa4>
        default:
            retVal = 0U;
 80009e8:	2300      	movs	r3, #0
 80009ea:	75fb      	strb	r3, [r7, #23]
            break;
 80009ec:	e000      	b.n	80009f0 <u8x8_byte_4wire_hw_spi+0xa4>
            break;
 80009ee:	bf00      	nop
    }
    return retVal;
 80009f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000ca8 	.word	0x20000ca8
 8000a00:	40021800 	.word	0x40021800
 8000a04:	40020c00 	.word	0x40020c00

08000a08 <Display_Init>:

/**
 * @brief Initializes the display hardware and u8g2 library.
 */
void Display_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
    /* Turn on the backlight */
    HAL_GPIO_WritePin(BACKLIGHT_1_GPIO_Port, BACKLIGHT_1_Pin, GPIO_PIN_SET);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2110      	movs	r1, #16
 8000a10:	480c      	ldr	r0, [pc, #48]	@ (8000a44 <Display_Init+0x3c>)
 8000a12:	f004 ffb3 	bl	800597c <HAL_GPIO_WritePin>

    /* Setup u8g2 for the ST7565 display.
       Adjust the setup function if your display type differs. */
    u8g2_Setup_st7565_64128n_f(&u8g2, U8G2_R2, u8x8_byte_4wire_hw_spi, u8x8_stm32_gpio_and_delay);
 8000a16:	4b0c      	ldr	r3, [pc, #48]	@ (8000a48 <Display_Init+0x40>)
 8000a18:	4a0c      	ldr	r2, [pc, #48]	@ (8000a4c <Display_Init+0x44>)
 8000a1a:	490d      	ldr	r1, [pc, #52]	@ (8000a50 <Display_Init+0x48>)
 8000a1c:	480d      	ldr	r0, [pc, #52]	@ (8000a54 <Display_Init+0x4c>)
 8000a1e:	f000 fa17 	bl	8000e50 <u8g2_Setup_st7565_64128n_f>
    u8g2_InitDisplay(&u8g2);
 8000a22:	480c      	ldr	r0, [pc, #48]	@ (8000a54 <Display_Init+0x4c>)
 8000a24:	f001 fe22 	bl	800266c <u8x8_InitDisplay>
    u8g2_SetPowerSave(&u8g2, 0);
 8000a28:	2100      	movs	r1, #0
 8000a2a:	480a      	ldr	r0, [pc, #40]	@ (8000a54 <Display_Init+0x4c>)
 8000a2c:	f001 fe2d 	bl	800268a <u8x8_SetPowerSave>
    u8g2_ClearDisplay(&u8g2);
 8000a30:	4808      	ldr	r0, [pc, #32]	@ (8000a54 <Display_Init+0x4c>)
 8000a32:	f000 f9e7 	bl	8000e04 <u8g2_ClearDisplay>
    u8g2_SetContrast(&u8g2, CONTRAST_VALUE_U8);
 8000a36:	2178      	movs	r1, #120	@ 0x78
 8000a38:	4806      	ldr	r0, [pc, #24]	@ (8000a54 <Display_Init+0x4c>)
 8000a3a:	f001 fe37 	bl	80026ac <u8x8_SetContrast>
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40021800 	.word	0x40021800
 8000a48:	080008e1 	.word	0x080008e1
 8000a4c:	0800094d 	.word	0x0800094d
 8000a50:	0800981c 	.word	0x0800981c
 8000a54:	20000618 	.word	0x20000618

08000a58 <Display_MainTitlePage>:
 * @brief Displays the main title page.
 *
 * This function draws the main title page with a logo and text.
 */
void Display_MainTitlePage(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af02      	add	r7, sp, #8
    do
    {
        /* Begin a new page */
        u8g2_FirstPage(&u8g2);
 8000a5e:	4824      	ldr	r0, [pc, #144]	@ (8000af0 <Display_MainTitlePage+0x98>)
 8000a60:	f000 f98e 	bl	8000d80 <u8g2_FirstPage>
        do
        {
            /* Draw the logo image */
            u8g2_DrawXBM(&u8g2, 0, 0, 128, 64, logo);
 8000a64:	4b23      	ldr	r3, [pc, #140]	@ (8000af4 <Display_MainTitlePage+0x9c>)
 8000a66:	9301      	str	r3, [sp, #4]
 8000a68:	2340      	movs	r3, #64	@ 0x40
 8000a6a:	9300      	str	r3, [sp, #0]
 8000a6c:	2380      	movs	r3, #128	@ 0x80
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2100      	movs	r1, #0
 8000a72:	481f      	ldr	r0, [pc, #124]	@ (8000af0 <Display_MainTitlePage+0x98>)
 8000a74:	f000 f8b6 	bl	8000be4 <u8g2_DrawXBM>
        }
        while (u8g2_NextPage(&u8g2) != 0U);
 8000a78:	481d      	ldr	r0, [pc, #116]	@ (8000af0 <Display_MainTitlePage+0x98>)
 8000a7a:	f000 f995 	bl	8000da8 <u8g2_NextPage>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d1ef      	bne.n	8000a64 <Display_MainTitlePage+0xc>

        HAL_Delay(PAGE_DELAY_U32);
 8000a84:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a88:	f004 f8d0 	bl	8004c2c <HAL_Delay>

        /* Clear the buffer and draw title text */
        u8g2_ClearBuffer(&u8g2);
 8000a8c:	4818      	ldr	r0, [pc, #96]	@ (8000af0 <Display_MainTitlePage+0x98>)
 8000a8e:	f000 f8ec 	bl	8000c6a <u8g2_ClearBuffer>
        u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 8000a92:	4919      	ldr	r1, [pc, #100]	@ (8000af8 <Display_MainTitlePage+0xa0>)
 8000a94:	4816      	ldr	r0, [pc, #88]	@ (8000af0 <Display_MainTitlePage+0x98>)
 8000a96:	f000 ff8b 	bl	80019b0 <u8g2_SetFont>
        u8g2_DrawStr(&u8g2, 42, 16, "VEGA");
 8000a9a:	4b18      	ldr	r3, [pc, #96]	@ (8000afc <Display_MainTitlePage+0xa4>)
 8000a9c:	2210      	movs	r2, #16
 8000a9e:	212a      	movs	r1, #42	@ 0x2a
 8000aa0:	4813      	ldr	r0, [pc, #76]	@ (8000af0 <Display_MainTitlePage+0x98>)
 8000aa2:	f000 fee3 	bl	800186c <u8g2_DrawStr>
        u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 8000aa6:	4914      	ldr	r1, [pc, #80]	@ (8000af8 <Display_MainTitlePage+0xa0>)
 8000aa8:	4811      	ldr	r0, [pc, #68]	@ (8000af0 <Display_MainTitlePage+0x98>)
 8000aaa:	f000 ff81 	bl	80019b0 <u8g2_SetFont>
        u8g2_DrawStr(&u8g2, 6, 33, "INNOVATIONS");
 8000aae:	4b14      	ldr	r3, [pc, #80]	@ (8000b00 <Display_MainTitlePage+0xa8>)
 8000ab0:	2221      	movs	r2, #33	@ 0x21
 8000ab2:	2106      	movs	r1, #6
 8000ab4:	480e      	ldr	r0, [pc, #56]	@ (8000af0 <Display_MainTitlePage+0x98>)
 8000ab6:	f000 fed9 	bl	800186c <u8g2_DrawStr>
        HAL_Delay(TEXT_DELAY_U32);
 8000aba:	200a      	movs	r0, #10
 8000abc:	f004 f8b6 	bl	8004c2c <HAL_Delay>
        u8g2_ClearBuffer(&u8g2);
 8000ac0:	480b      	ldr	r0, [pc, #44]	@ (8000af0 <Display_MainTitlePage+0x98>)
 8000ac2:	f000 f8d2 	bl	8000c6a <u8g2_ClearBuffer>
    }
    while (u8g2_NextPage(&u8g2) != 0U);
 8000ac6:	480a      	ldr	r0, [pc, #40]	@ (8000af0 <Display_MainTitlePage+0x98>)
 8000ac8:	f000 f96e 	bl	8000da8 <u8g2_NextPage>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d1c5      	bne.n	8000a5e <Display_MainTitlePage+0x6>

    HAL_Delay(FINAL_PAGE_DELAY_U32);
 8000ad2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ad6:	f004 f8a9 	bl	8004c2c <HAL_Delay>

    u8g2_ClearBuffer(&u8g2);
 8000ada:	4805      	ldr	r0, [pc, #20]	@ (8000af0 <Display_MainTitlePage+0x98>)
 8000adc:	f000 f8c5 	bl	8000c6a <u8g2_ClearBuffer>

    HAL_GPIO_WritePin(BACKLIGHT_1_GPIO_Port, BACKLIGHT_1_Pin, GPIO_PIN_RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2110      	movs	r1, #16
 8000ae4:	4807      	ldr	r0, [pc, #28]	@ (8000b04 <Display_MainTitlePage+0xac>)
 8000ae6:	f004 ff49 	bl	800597c <HAL_GPIO_WritePin>
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000618 	.word	0x20000618
 8000af4:	20000160 	.word	0x20000160
 8000af8:	08008bc4 	.word	0x08008bc4
 8000afc:	08008b6c 	.word	0x08008b6c
 8000b00:	08008b74 	.word	0x08008b74
 8000b04:	40021800 	.word	0x40021800

08000b08 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b088      	sub	sp, #32
 8000b0c:	af02      	add	r7, sp, #8
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	4608      	mov	r0, r1
 8000b12:	4611      	mov	r1, r2
 8000b14:	461a      	mov	r2, r3
 8000b16:	4603      	mov	r3, r0
 8000b18:	817b      	strh	r3, [r7, #10]
 8000b1a:	460b      	mov	r3, r1
 8000b1c:	813b      	strh	r3, [r7, #8]
 8000b1e:	4613      	mov	r3, r2
 8000b20:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8000b28:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8000b2a:	7dbb      	ldrb	r3, [r7, #22]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	bf0c      	ite	eq
 8000b30:	2301      	moveq	r3, #1
 8000b32:	2300      	movne	r3, #0
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8000b38:	897a      	ldrh	r2, [r7, #10]
 8000b3a:	88fb      	ldrh	r3, [r7, #6]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	b298      	uxth	r0, r3
 8000b40:	893b      	ldrh	r3, [r7, #8]
 8000b42:	3301      	adds	r3, #1
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	893a      	ldrh	r2, [r7, #8]
 8000b48:	8979      	ldrh	r1, [r7, #10]
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	68f8      	ldr	r0, [r7, #12]
 8000b50:	f001 f875 	bl	8001c3e <u8g2_IsIntersection>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d040      	beq.n	8000bdc <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	75fb      	strb	r3, [r7, #23]
  while(len > 0) {
 8000b5e:	e035      	b.n	8000bcc <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 8000b60:	6a3b      	ldr	r3, [r7, #32]
 8000b62:	781a      	ldrb	r2, [r3, #0]
 8000b64:	7dfb      	ldrb	r3, [r7, #23]
 8000b66:	4013      	ands	r3, r2
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d00c      	beq.n	8000b88 <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	7dba      	ldrb	r2, [r7, #22]
 8000b72:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8000b76:	893a      	ldrh	r2, [r7, #8]
 8000b78:	8979      	ldrh	r1, [r7, #10]
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	2301      	movs	r3, #1
 8000b80:	68f8      	ldr	r0, [r7, #12]
 8000b82:	f000 ff9e 	bl	8001ac2 <u8g2_DrawHVLine>
 8000b86:	e010      	b.n	8000baa <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d10b      	bne.n	8000baa <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	7d7a      	ldrb	r2, [r7, #21]
 8000b96:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8000b9a:	893a      	ldrh	r2, [r7, #8]
 8000b9c:	8979      	ldrh	r1, [r7, #10]
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	68f8      	ldr	r0, [r7, #12]
 8000ba6:	f000 ff8c 	bl	8001ac2 <u8g2_DrawHVLine>
    }
    x++;
 8000baa:	897b      	ldrh	r3, [r7, #10]
 8000bac:	3301      	adds	r3, #1
 8000bae:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 8000bb0:	7dfb      	ldrb	r3, [r7, #23]
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 8000bb6:	7dfb      	ldrb	r3, [r7, #23]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d104      	bne.n	8000bc6 <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	75fb      	strb	r3, [r7, #23]
      b++;
 8000bc0:	6a3b      	ldr	r3, [r7, #32]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	623b      	str	r3, [r7, #32]
    }
    len--;
 8000bc6:	88fb      	ldrh	r3, [r7, #6]
 8000bc8:	3b01      	subs	r3, #1
 8000bca:	80fb      	strh	r3, [r7, #6]
  while(len > 0) {
 8000bcc:	88fb      	ldrh	r3, [r7, #6]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d1c6      	bne.n	8000b60 <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	7dba      	ldrb	r2, [r7, #22]
 8000bd6:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
 8000bda:	e000      	b.n	8000bde <u8g2_DrawHXBM+0xd6>
    return;
 8000bdc:	bf00      	nop
}
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af02      	add	r7, sp, #8
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	4608      	mov	r0, r1
 8000bee:	4611      	mov	r1, r2
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	817b      	strh	r3, [r7, #10]
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	813b      	strh	r3, [r7, #8]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 8000bfe:	88fb      	ldrh	r3, [r7, #6]
 8000c00:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 8000c02:	8afb      	ldrh	r3, [r7, #22]
 8000c04:	3307      	adds	r3, #7
 8000c06:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 8000c08:	8afb      	ldrh	r3, [r7, #22]
 8000c0a:	08db      	lsrs	r3, r3, #3
 8000c0c:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8000c0e:	897a      	ldrh	r2, [r7, #10]
 8000c10:	88fb      	ldrh	r3, [r7, #6]
 8000c12:	4413      	add	r3, r2
 8000c14:	b298      	uxth	r0, r3
 8000c16:	893a      	ldrh	r2, [r7, #8]
 8000c18:	8c3b      	ldrh	r3, [r7, #32]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	893a      	ldrh	r2, [r7, #8]
 8000c20:	8979      	ldrh	r1, [r7, #10]
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	4603      	mov	r3, r0
 8000c26:	68f8      	ldr	r0, [r7, #12]
 8000c28:	f001 f809 	bl	8001c3e <u8g2_IsIntersection>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d017      	beq.n	8000c62 <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8000c32:	e012      	b.n	8000c5a <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8000c34:	88f8      	ldrh	r0, [r7, #6]
 8000c36:	893a      	ldrh	r2, [r7, #8]
 8000c38:	8979      	ldrh	r1, [r7, #10]
 8000c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	4603      	mov	r3, r0
 8000c40:	68f8      	ldr	r0, [r7, #12]
 8000c42:	f7ff ff61 	bl	8000b08 <u8g2_DrawHXBM>
    bitmap += blen;
 8000c46:	8afb      	ldrh	r3, [r7, #22]
 8000c48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c4a:	4413      	add	r3, r2
 8000c4c:	627b      	str	r3, [r7, #36]	@ 0x24
    y++;
 8000c4e:	893b      	ldrh	r3, [r7, #8]
 8000c50:	3301      	adds	r3, #1
 8000c52:	813b      	strh	r3, [r7, #8]
    h--;
 8000c54:	8c3b      	ldrh	r3, [r7, #32]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 8000c5a:	8c3b      	ldrh	r3, [r7, #32]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d1e9      	bne.n	8000c34 <u8g2_DrawXBM+0x50>
 8000c60:	e000      	b.n	8000c64 <u8g2_DrawXBM+0x80>
    return;
 8000c62:	bf00      	nop
  }
}
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b084      	sub	sp, #16
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	7c1b      	ldrb	r3, [r3, #16]
 8000c78:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000c80:	461a      	mov	r2, r3
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	fb02 f303 	mul.w	r3, r2, r3
 8000c88:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c94:	68fa      	ldr	r2, [r7, #12]
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f007 fecd 	bl	8008a38 <memset>
}
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b086      	sub	sp, #24
 8000caa:	af02      	add	r7, sp, #8
 8000cac:	6078      	str	r0, [r7, #4]
 8000cae:	460b      	mov	r3, r1
 8000cb0:	70fb      	strb	r3, [r7, #3]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	7c1b      	ldrb	r3, [r3, #16]
 8000cbc:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8000cbe:	78fb      	ldrb	r3, [r7, #3]
 8000cc0:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cc6:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8000cc8:	7bfb      	ldrb	r3, [r7, #15]
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	89ba      	ldrh	r2, [r7, #12]
 8000cce:	fb12 f303 	smulbb	r3, r2, r3
 8000cd2:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8000cd4:	89bb      	ldrh	r3, [r7, #12]
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8000cda:	89bb      	ldrh	r3, [r7, #12]
 8000cdc:	68ba      	ldr	r2, [r7, #8]
 8000cde:	4413      	add	r3, r2
 8000ce0:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8000ce2:	7bf9      	ldrb	r1, [r7, #15]
 8000ce4:	78ba      	ldrb	r2, [r7, #2]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	460b      	mov	r3, r1
 8000cec:	2100      	movs	r1, #0
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f001 fc8b 	bl	800260a <u8x8_DrawTile>
}
 8000cf4:	bf00      	nop
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000d0e:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8000d16:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	7c5b      	ldrb	r3, [r3, #17]
 8000d1e:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8000d20:	7bba      	ldrb	r2, [r7, #14]
 8000d22:	7bfb      	ldrb	r3, [r7, #15]
 8000d24:	4619      	mov	r1, r3
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff ffbd 	bl	8000ca6 <u8g2_send_tile_row>
    src_row++;
 8000d2c:	7bfb      	ldrb	r3, [r7, #15]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8000d32:	7bbb      	ldrb	r3, [r7, #14]
 8000d34:	3301      	adds	r3, #1
 8000d36:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8000d38:	7bfa      	ldrb	r2, [r7, #15]
 8000d3a:	7b7b      	ldrb	r3, [r7, #13]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d203      	bcs.n	8000d48 <u8g2_send_buffer+0x4c>
 8000d40:	7bba      	ldrb	r2, [r7, #14]
 8000d42:	7b3b      	ldrb	r3, [r7, #12]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d3eb      	bcc.n	8000d20 <u8g2_send_buffer+0x24>
}
 8000d48:	bf00      	nop
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	78fa      	ldrb	r2, [r7, #3]
 8000d60:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  u8g2->cb->update_dimension(u8g2);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	4798      	blx	r3
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d002      	beq.n	8000d98 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff ff69 	bl	8000c6a <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8000d98:	2100      	movs	r1, #0
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff ffd8 	bl	8000d50 <u8g2_SetBufferCurrTileRow>
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff ffa3 	bl	8000cfc <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8000dbc:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	7c5b      	ldrb	r3, [r3, #17]
 8000dd0:	7bfa      	ldrb	r2, [r7, #15]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d304      	bcc.n	8000de0 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f001 fc79 	bl	80026ce <u8x8_RefreshDisplay>
    return 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	e00d      	b.n	8000dfc <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d002      	beq.n	8000df0 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff ff3d 	bl	8000c6a <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	4619      	mov	r1, r3
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f7ff ffab 	bl	8000d50 <u8g2_SetBufferCurrTileRow>
  return 1;
 8000dfa:	2301      	movs	r3, #1
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff ffb7 	bl	8000d80 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ffc8 	bl	8000da8 <u8g2_NextPage>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d1f9      	bne.n	8000e12 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8000e1e:	2100      	movs	r1, #0
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f7ff ff95 	bl	8000d50 <u8g2_SetBufferCurrTileRow>
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2208      	movs	r2, #8
 8000e3c:	701a      	strb	r2, [r3, #0]
  return buf;
 8000e3e:	4b03      	ldr	r3, [pc, #12]	@ (8000e4c <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	200006ac 	.word	0x200006ac

08000e50 <u8g2_Setup_st7565_64128n_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_lm6063, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_64128n_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af02      	add	r7, sp, #8
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
 8000e5c:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_64128n, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a0b      	ldr	r2, [pc, #44]	@ (8000e94 <u8g2_Setup_st7565_64128n_f+0x44>)
 8000e66:	490c      	ldr	r1, [pc, #48]	@ (8000e98 <u8g2_Setup_st7565_64128n_f+0x48>)
 8000e68:	68f8      	ldr	r0, [r7, #12]
 8000e6a:	f001 fc91 	bl	8002790 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8000e6e:	f107 0313 	add.w	r3, r7, #19
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff ffdc 	bl	8000e30 <u8g2_m_16_8_f>
 8000e78:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8000e7a:	7cfa      	ldrb	r2, [r7, #19]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <u8g2_Setup_st7565_64128n_f+0x4c>)
 8000e82:	6979      	ldr	r1, [r7, #20]
 8000e84:	68f8      	ldr	r0, [r7, #12]
 8000e86:	f000 ffc4 	bl	8001e12 <u8g2_SetupBuffer>
}
 8000e8a:	bf00      	nop
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	08002325 	.word	0x08002325
 8000e98:	080024c5 	.word	0x080024c5
 8000e9c:	08001c95 	.word	0x08001c95

08000ea0 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8000eac:	78fb      	ldrb	r3, [r7, #3]
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	781b      	ldrb	r3, [r3, #0]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	460b      	mov	r3, r1
 8000ece:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8000ed0:	78fb      	ldrb	r3, [r7, #3]
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	81fb      	strh	r3, [r7, #14]
    font++;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8000ee4:	89fb      	ldrh	r3, [r7, #14]
 8000ee6:	021b      	lsls	r3, r3, #8
 8000ee8:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	89fb      	ldrh	r3, [r7, #14]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	81fb      	strh	r3, [r7, #14]
    return pos;
 8000ef6:	89fb      	ldrh	r3, [r7, #14]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8000f0e:	2100      	movs	r1, #0
 8000f10:	6838      	ldr	r0, [r7, #0]
 8000f12:	f7ff ffc5 	bl	8000ea0 <u8g2_font_get_byte>
 8000f16:	4603      	mov	r3, r0
 8000f18:	461a      	mov	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8000f1e:	2101      	movs	r1, #1
 8000f20:	6838      	ldr	r0, [r7, #0]
 8000f22:	f7ff ffbd 	bl	8000ea0 <u8g2_font_get_byte>
 8000f26:	4603      	mov	r3, r0
 8000f28:	461a      	mov	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8000f2e:	2102      	movs	r1, #2
 8000f30:	6838      	ldr	r0, [r7, #0]
 8000f32:	f7ff ffb5 	bl	8000ea0 <u8g2_font_get_byte>
 8000f36:	4603      	mov	r3, r0
 8000f38:	461a      	mov	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8000f3e:	2103      	movs	r1, #3
 8000f40:	6838      	ldr	r0, [r7, #0]
 8000f42:	f7ff ffad 	bl	8000ea0 <u8g2_font_get_byte>
 8000f46:	4603      	mov	r3, r0
 8000f48:	461a      	mov	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8000f4e:	2104      	movs	r1, #4
 8000f50:	6838      	ldr	r0, [r7, #0]
 8000f52:	f7ff ffa5 	bl	8000ea0 <u8g2_font_get_byte>
 8000f56:	4603      	mov	r3, r0
 8000f58:	461a      	mov	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8000f5e:	2105      	movs	r1, #5
 8000f60:	6838      	ldr	r0, [r7, #0]
 8000f62:	f7ff ff9d 	bl	8000ea0 <u8g2_font_get_byte>
 8000f66:	4603      	mov	r3, r0
 8000f68:	461a      	mov	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8000f6e:	2106      	movs	r1, #6
 8000f70:	6838      	ldr	r0, [r7, #0]
 8000f72:	f7ff ff95 	bl	8000ea0 <u8g2_font_get_byte>
 8000f76:	4603      	mov	r3, r0
 8000f78:	461a      	mov	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8000f7e:	2107      	movs	r1, #7
 8000f80:	6838      	ldr	r0, [r7, #0]
 8000f82:	f7ff ff8d 	bl	8000ea0 <u8g2_font_get_byte>
 8000f86:	4603      	mov	r3, r0
 8000f88:	461a      	mov	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8000f8e:	2108      	movs	r1, #8
 8000f90:	6838      	ldr	r0, [r7, #0]
 8000f92:	f7ff ff85 	bl	8000ea0 <u8g2_font_get_byte>
 8000f96:	4603      	mov	r3, r0
 8000f98:	461a      	mov	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8000f9e:	2109      	movs	r1, #9
 8000fa0:	6838      	ldr	r0, [r7, #0]
 8000fa2:	f7ff ff7d 	bl	8000ea0 <u8g2_font_get_byte>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	b25a      	sxtb	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8000fae:	210a      	movs	r1, #10
 8000fb0:	6838      	ldr	r0, [r7, #0]
 8000fb2:	f7ff ff75 	bl	8000ea0 <u8g2_font_get_byte>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	b25a      	sxtb	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8000fbe:	210b      	movs	r1, #11
 8000fc0:	6838      	ldr	r0, [r7, #0]
 8000fc2:	f7ff ff6d 	bl	8000ea0 <u8g2_font_get_byte>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	b25a      	sxtb	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8000fce:	210c      	movs	r1, #12
 8000fd0:	6838      	ldr	r0, [r7, #0]
 8000fd2:	f7ff ff65 	bl	8000ea0 <u8g2_font_get_byte>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	b25a      	sxtb	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8000fde:	210d      	movs	r1, #13
 8000fe0:	6838      	ldr	r0, [r7, #0]
 8000fe2:	f7ff ff5d 	bl	8000ea0 <u8g2_font_get_byte>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	b25a      	sxtb	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8000fee:	210e      	movs	r1, #14
 8000ff0:	6838      	ldr	r0, [r7, #0]
 8000ff2:	f7ff ff55 	bl	8000ea0 <u8g2_font_get_byte>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	b25a      	sxtb	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8000ffe:	210f      	movs	r1, #15
 8001000:	6838      	ldr	r0, [r7, #0]
 8001002:	f7ff ff4d 	bl	8000ea0 <u8g2_font_get_byte>
 8001006:	4603      	mov	r3, r0
 8001008:	b25a      	sxtb	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800100e:	2110      	movs	r1, #16
 8001010:	6838      	ldr	r0, [r7, #0]
 8001012:	f7ff ff45 	bl	8000ea0 <u8g2_font_get_byte>
 8001016:	4603      	mov	r3, r0
 8001018:	b25a      	sxtb	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800101e:	2111      	movs	r1, #17
 8001020:	6838      	ldr	r0, [r7, #0]
 8001022:	f7ff ff4f 	bl	8000ec4 <u8g2_font_get_word>
 8001026:	4603      	mov	r3, r0
 8001028:	461a      	mov	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800102e:	2113      	movs	r1, #19
 8001030:	6838      	ldr	r0, [r7, #0]
 8001032:	f7ff ff47 	bl	8000ec4 <u8g2_font_get_word>
 8001036:	4603      	mov	r3, r0
 8001038:	461a      	mov	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800103e:	2115      	movs	r1, #21
 8001040:	6838      	ldr	r0, [r7, #0]
 8001042:	f7ff ff3f 	bl	8000ec4 <u8g2_font_get_word>
 8001046:	4603      	mov	r3, r0
 8001048:	461a      	mov	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	82da      	strh	r2, [r3, #22]
#endif
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8001056:	b480      	push	{r7}
 8001058:	b085      	sub	sp, #20
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
 800105e:	460b      	mov	r3, r1
 8001060:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	7b1b      	ldrb	r3, [r3, #12]
 8001066:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8001070:	7bfa      	ldrb	r2, [r7, #15]
 8001072:	7b7b      	ldrb	r3, [r7, #13]
 8001074:	fa42 f303 	asr.w	r3, r2, r3
 8001078:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 800107a:	7b7b      	ldrb	r3, [r7, #13]
 800107c:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800107e:	7bba      	ldrb	r2, [r7, #14]
 8001080:	78fb      	ldrb	r3, [r7, #3]
 8001082:	4413      	add	r3, r2
 8001084:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8001086:	7bbb      	ldrb	r3, [r7, #14]
 8001088:	2b07      	cmp	r3, #7
 800108a:	d91a      	bls.n	80010c2 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 800108c:	2308      	movs	r3, #8
 800108e:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8001090:	7b3a      	ldrb	r2, [r7, #12]
 8001092:	7b7b      	ldrb	r3, [r7, #13]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	1c5a      	adds	r2, r3, #1
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	461a      	mov	r2, r3
 80010aa:	7b3b      	ldrb	r3, [r7, #12]
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	b25a      	sxtb	r2, r3
 80010b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	b25b      	sxtb	r3, r3
 80010ba:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 80010bc:	7bbb      	ldrb	r3, [r7, #14]
 80010be:	3b08      	subs	r3, #8
 80010c0:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 80010c2:	78fb      	ldrb	r3, [r7, #3]
 80010c4:	f04f 32ff 	mov.w	r2, #4294967295
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	4013      	ands	r3, r2
 80010d6:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	7bba      	ldrb	r2, [r7, #14]
 80010dc:	731a      	strb	r2, [r3, #12]
  return val;
 80010de:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 80010f8:	78fb      	ldrb	r3, [r7, #3]
 80010fa:	4619      	mov	r1, r3
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff ffaa 	bl	8001056 <u8g2_font_decode_get_unsigned_bits>
 8001102:	4603      	mov	r3, r0
 8001104:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8001106:	2301      	movs	r3, #1
 8001108:	73bb      	strb	r3, [r7, #14]
  cnt--;
 800110a:	78fb      	ldrb	r3, [r7, #3]
 800110c:	3b01      	subs	r3, #1
 800110e:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8001110:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001114:	78fb      	ldrb	r3, [r7, #3]
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	73bb      	strb	r3, [r7, #14]
  v -= d;
 800111c:	7bfa      	ldrb	r2, [r7, #15]
 800111e:	7bbb      	ldrb	r3, [r7, #14]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	b2db      	uxtb	r3, r3
 8001124:	73fb      	strb	r3, [r7, #15]
  return v;
 8001126:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8001132:	b490      	push	{r4, r7}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	4604      	mov	r4, r0
 800113a:	4608      	mov	r0, r1
 800113c:	4611      	mov	r1, r2
 800113e:	461a      	mov	r2, r3
 8001140:	4623      	mov	r3, r4
 8001142:	80fb      	strh	r3, [r7, #6]
 8001144:	4603      	mov	r3, r0
 8001146:	717b      	strb	r3, [r7, #5]
 8001148:	460b      	mov	r3, r1
 800114a:	713b      	strb	r3, [r7, #4]
 800114c:	4613      	mov	r3, r2
 800114e:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8001150:	78fb      	ldrb	r3, [r7, #3]
 8001152:	2b02      	cmp	r3, #2
 8001154:	d014      	beq.n	8001180 <u8g2_add_vector_y+0x4e>
 8001156:	2b02      	cmp	r3, #2
 8001158:	dc19      	bgt.n	800118e <u8g2_add_vector_y+0x5c>
 800115a:	2b00      	cmp	r3, #0
 800115c:	d002      	beq.n	8001164 <u8g2_add_vector_y+0x32>
 800115e:	2b01      	cmp	r3, #1
 8001160:	d007      	beq.n	8001172 <u8g2_add_vector_y+0x40>
 8001162:	e014      	b.n	800118e <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8001164:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001168:	b29a      	uxth	r2, r3
 800116a:	88fb      	ldrh	r3, [r7, #6]
 800116c:	4413      	add	r3, r2
 800116e:	80fb      	strh	r3, [r7, #6]
      break;
 8001170:	e014      	b.n	800119c <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 8001172:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001176:	b29a      	uxth	r2, r3
 8001178:	88fb      	ldrh	r3, [r7, #6]
 800117a:	4413      	add	r3, r2
 800117c:	80fb      	strh	r3, [r7, #6]
      break;
 800117e:	e00d      	b.n	800119c <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8001180:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001184:	b29b      	uxth	r3, r3
 8001186:	88fa      	ldrh	r2, [r7, #6]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	80fb      	strh	r3, [r7, #6]
      break;
 800118c:	e006      	b.n	800119c <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 800118e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001192:	b29b      	uxth	r3, r3
 8001194:	88fa      	ldrh	r2, [r7, #6]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	80fb      	strh	r3, [r7, #6]
      break;      
 800119a:	bf00      	nop
  }
  return dy;
 800119c:	88fb      	ldrh	r3, [r7, #6]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc90      	pop	{r4, r7}
 80011a6:	4770      	bx	lr

080011a8 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80011a8:	b490      	push	{r4, r7}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4604      	mov	r4, r0
 80011b0:	4608      	mov	r0, r1
 80011b2:	4611      	mov	r1, r2
 80011b4:	461a      	mov	r2, r3
 80011b6:	4623      	mov	r3, r4
 80011b8:	80fb      	strh	r3, [r7, #6]
 80011ba:	4603      	mov	r3, r0
 80011bc:	717b      	strb	r3, [r7, #5]
 80011be:	460b      	mov	r3, r1
 80011c0:	713b      	strb	r3, [r7, #4]
 80011c2:	4613      	mov	r3, r2
 80011c4:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80011c6:	78fb      	ldrb	r3, [r7, #3]
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d014      	beq.n	80011f6 <u8g2_add_vector_x+0x4e>
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	dc19      	bgt.n	8001204 <u8g2_add_vector_x+0x5c>
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d002      	beq.n	80011da <u8g2_add_vector_x+0x32>
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d007      	beq.n	80011e8 <u8g2_add_vector_x+0x40>
 80011d8:	e014      	b.n	8001204 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 80011da:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80011de:	b29a      	uxth	r2, r3
 80011e0:	88fb      	ldrh	r3, [r7, #6]
 80011e2:	4413      	add	r3, r2
 80011e4:	80fb      	strh	r3, [r7, #6]
      break;
 80011e6:	e014      	b.n	8001212 <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 80011e8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	88fa      	ldrh	r2, [r7, #6]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	80fb      	strh	r3, [r7, #6]
      break;
 80011f4:	e00d      	b.n	8001212 <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 80011f6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	88fa      	ldrh	r2, [r7, #6]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	80fb      	strh	r3, [r7, #6]
      break;
 8001202:	e006      	b.n	8001212 <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8001204:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001208:	b29a      	uxth	r2, r3
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	4413      	add	r3, r2
 800120e:	80fb      	strh	r3, [r7, #6]
      break;      
 8001210:	bf00      	nop
  }
  return dx;
 8001212:	88fb      	ldrh	r3, [r7, #6]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bc90      	pop	{r4, r7}
 800121c:	4770      	bx	lr

0800121e <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b088      	sub	sp, #32
 8001222:	af02      	add	r7, sp, #8
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	460b      	mov	r3, r1
 8001228:	70fb      	strb	r3, [r7, #3]
 800122a:	4613      	mov	r3, r2
 800122c:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3360      	adds	r3, #96	@ 0x60
 8001232:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8001234:	78fb      	ldrb	r3, [r7, #3]
 8001236:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800123e:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001246:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800124e:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8001250:	7bfa      	ldrb	r2, [r7, #15]
 8001252:	7d7b      	ldrb	r3, [r7, #21]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8001258:	7bfb      	ldrb	r3, [r7, #15]
 800125a:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 800125c:	7dfa      	ldrb	r2, [r7, #23]
 800125e:	7bfb      	ldrb	r3, [r7, #15]
 8001260:	429a      	cmp	r2, r3
 8001262:	d201      	bcs.n	8001268 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8001264:	7dfb      	ldrb	r3, [r7, #23]
 8001266:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	889b      	ldrh	r3, [r3, #4]
 800126c:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	88db      	ldrh	r3, [r3, #6]
 8001272:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001274:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001278:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	7c1b      	ldrb	r3, [r3, #16]
 8001280:	89b8      	ldrh	r0, [r7, #12]
 8001282:	f7ff ff91 	bl	80011a8 <u8g2_add_vector_x>
 8001286:	4603      	mov	r3, r0
 8001288:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 800128a:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800128e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	7c1b      	ldrb	r3, [r3, #16]
 8001296:	8978      	ldrh	r0, [r7, #10]
 8001298:	f7ff ff4b 	bl	8001132 <u8g2_add_vector_y>
 800129c:	4603      	mov	r3, r0
 800129e:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80012a0:	78bb      	ldrb	r3, [r7, #2]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d010      	beq.n	80012c8 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	7b9a      	ldrb	r2, [r3, #14]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 80012b0:	7dbb      	ldrb	r3, [r7, #22]
 80012b2:	b298      	uxth	r0, r3
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	7c1b      	ldrb	r3, [r3, #16]
 80012b8:	897a      	ldrh	r2, [r7, #10]
 80012ba:	89b9      	ldrh	r1, [r7, #12]
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	4603      	mov	r3, r0
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f000 fbfe 	bl	8001ac2 <u8g2_DrawHVLine>
 80012c6:	e013      	b.n	80012f0 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	7b5b      	ldrb	r3, [r3, #13]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d10f      	bne.n	80012f0 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	7bda      	ldrb	r2, [r3, #15]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 80012da:	7dbb      	ldrb	r3, [r7, #22]
 80012dc:	b298      	uxth	r0, r3
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	7c1b      	ldrb	r3, [r3, #16]
 80012e2:	897a      	ldrh	r2, [r7, #10]
 80012e4:	89b9      	ldrh	r1, [r7, #12]
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	4603      	mov	r3, r0
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 fbe9 	bl	8001ac2 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 80012f0:	7dfa      	ldrb	r2, [r7, #23]
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d309      	bcc.n	800130c <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 80012f8:	7dfa      	ldrb	r2, [r7, #23]
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	757b      	strb	r3, [r7, #21]
    ly++;
 8001304:	7d3b      	ldrb	r3, [r7, #20]
 8001306:	3301      	adds	r3, #1
 8001308:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 800130a:	e79d      	b.n	8001248 <u8g2_font_decode_len+0x2a>
      break;
 800130c:	bf00      	nop
  }
  lx += cnt;
 800130e:	7d7a      	ldrb	r2, [r7, #21]
 8001310:	7dfb      	ldrb	r3, [r7, #23]
 8001312:	4413      	add	r3, r2
 8001314:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8001316:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 800131e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	725a      	strb	r2, [r3, #9]
}
 8001326:	bf00      	nop
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b084      	sub	sp, #16
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
 8001336:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3360      	adds	r3, #96	@ 0x60
 800133c:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2200      	movs	r2, #0
 8001348:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8001350:	4619      	mov	r1, r3
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f7ff fe7f 	bl	8001056 <u8g2_font_decode_get_unsigned_bits>
 8001358:	4603      	mov	r3, r0
 800135a:	b25a      	sxtb	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8001366:	4619      	mov	r1, r3
 8001368:	68f8      	ldr	r0, [r7, #12]
 800136a:	f7ff fe74 	bl	8001056 <u8g2_font_decode_get_unsigned_bits>
 800136e:	4603      	mov	r3, r0
 8001370:	b25a      	sxtb	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	7b9b      	ldrb	r3, [r3, #14]
 8001384:	2b00      	cmp	r3, #0
 8001386:	bf0c      	ite	eq
 8001388:	2301      	moveq	r3, #1
 800138a:	2300      	movne	r3, #0
 800138c:	b2db      	uxtb	r3, r3
 800138e:	461a      	mov	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	73da      	strb	r2, [r3, #15]
}
 8001394:	bf00      	nop
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	@ 0x28
 80013a0:	af02      	add	r7, sp, #8
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	3360      	adds	r3, #96	@ 0x60
 80013aa:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 80013ac:	6839      	ldr	r1, [r7, #0]
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff ffbd 	bl	800132e <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 80013ba:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 80013c2:	4619      	mov	r1, r3
 80013c4:	6978      	ldr	r0, [r7, #20]
 80013c6:	f7ff fe91 	bl	80010ec <u8g2_font_decode_get_signed_bits>
 80013ca:	4603      	mov	r3, r0
 80013cc:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 80013d4:	4619      	mov	r1, r3
 80013d6:	6978      	ldr	r0, [r7, #20]
 80013d8:	f7ff fe88 	bl	80010ec <u8g2_font_decode_get_signed_bits>
 80013dc:	4603      	mov	r3, r0
 80013de:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80013e6:	4619      	mov	r1, r3
 80013e8:	6978      	ldr	r0, [r7, #20]
 80013ea:	f7ff fe7f 	bl	80010ec <u8g2_font_decode_get_signed_bits>
 80013ee:	4603      	mov	r3, r0
 80013f0:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f340 80d7 	ble.w	80015ac <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	8898      	ldrh	r0, [r3, #4]
 8001402:	7cfa      	ldrb	r2, [r7, #19]
 8001404:	7c7b      	ldrb	r3, [r7, #17]
 8001406:	4413      	add	r3, r2
 8001408:	b2db      	uxtb	r3, r3
 800140a:	425b      	negs	r3, r3
 800140c:	b2db      	uxtb	r3, r3
 800140e:	b25a      	sxtb	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	7c1b      	ldrb	r3, [r3, #16]
 8001414:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001418:	f7ff fec6 	bl	80011a8 <u8g2_add_vector_x>
 800141c:	4603      	mov	r3, r0
 800141e:	461a      	mov	r2, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	88d8      	ldrh	r0, [r3, #6]
 8001428:	7cfa      	ldrb	r2, [r7, #19]
 800142a:	7c7b      	ldrb	r3, [r7, #17]
 800142c:	4413      	add	r3, r2
 800142e:	b2db      	uxtb	r3, r3
 8001430:	425b      	negs	r3, r3
 8001432:	b2db      	uxtb	r3, r3
 8001434:	b25a      	sxtb	r2, r3
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	7c1b      	ldrb	r3, [r3, #16]
 800143a:	f997 1012 	ldrsb.w	r1, [r7, #18]
 800143e:	f7ff fe78 	bl	8001132 <u8g2_add_vector_y>
 8001442:	4603      	mov	r3, r0
 8001444:	461a      	mov	r2, r3
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	889b      	ldrh	r3, [r3, #4]
 800144e:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	88db      	ldrh	r3, [r3, #6]
 8001454:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8001456:	8bfb      	ldrh	r3, [r7, #30]
 8001458:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 800145a:	8b7b      	ldrh	r3, [r7, #26]
 800145c:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	7c1b      	ldrb	r3, [r3, #16]
 8001462:	2b03      	cmp	r3, #3
 8001464:	d85a      	bhi.n	800151c <u8g2_font_decode_glyph+0x180>
 8001466:	a201      	add	r2, pc, #4	@ (adr r2, 800146c <u8g2_font_decode_glyph+0xd0>)
 8001468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800146c:	0800147d 	.word	0x0800147d
 8001470:	08001499 	.word	0x08001499
 8001474:	080014c1 	.word	0x080014c1
 8001478:	080014f5 	.word	0x080014f5
      {
	case 0:
	    x1 += decode->glyph_width;
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001482:	b29a      	uxth	r2, r3
 8001484:	8bbb      	ldrh	r3, [r7, #28]
 8001486:	4413      	add	r3, r2
 8001488:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 800148a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800148e:	b29a      	uxth	r2, r3
 8001490:	8b3b      	ldrh	r3, [r7, #24]
 8001492:	4413      	add	r3, r2
 8001494:	833b      	strh	r3, [r7, #24]
	    break;
 8001496:	e041      	b.n	800151c <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8001498:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800149c:	b29b      	uxth	r3, r3
 800149e:	8bfa      	ldrh	r2, [r7, #30]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80014a4:	8bfb      	ldrh	r3, [r7, #30]
 80014a6:	3301      	adds	r3, #1
 80014a8:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80014aa:	8bbb      	ldrh	r3, [r7, #28]
 80014ac:	3301      	adds	r3, #1
 80014ae:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	8b3b      	ldrh	r3, [r7, #24]
 80014ba:	4413      	add	r3, r2
 80014bc:	833b      	strh	r3, [r7, #24]
	    break;
 80014be:	e02d      	b.n	800151c <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	8bfa      	ldrh	r2, [r7, #30]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80014ce:	8bfb      	ldrh	r3, [r7, #30]
 80014d0:	3301      	adds	r3, #1
 80014d2:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80014d4:	8bbb      	ldrh	r3, [r7, #28]
 80014d6:	3301      	adds	r3, #1
 80014d8:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 80014da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80014de:	b29b      	uxth	r3, r3
 80014e0:	8b7a      	ldrh	r2, [r7, #26]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80014e6:	8b7b      	ldrh	r3, [r7, #26]
 80014e8:	3301      	adds	r3, #1
 80014ea:	837b      	strh	r3, [r7, #26]
	    y1++;
 80014ec:	8b3b      	ldrh	r3, [r7, #24]
 80014ee:	3301      	adds	r3, #1
 80014f0:	833b      	strh	r3, [r7, #24]
	    break;	  
 80014f2:	e013      	b.n	800151c <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 80014f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	8bbb      	ldrh	r3, [r7, #28]
 80014fc:	4413      	add	r3, r2
 80014fe:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001506:	b29b      	uxth	r3, r3
 8001508:	8b7a      	ldrh	r2, [r7, #26]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800150e:	8b7b      	ldrh	r3, [r7, #26]
 8001510:	3301      	adds	r3, #1
 8001512:	837b      	strh	r3, [r7, #26]
	    y1++;
 8001514:	8b3b      	ldrh	r3, [r7, #24]
 8001516:	3301      	adds	r3, #1
 8001518:	833b      	strh	r3, [r7, #24]
	    break;	  
 800151a:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 800151c:	8bb8      	ldrh	r0, [r7, #28]
 800151e:	8b7a      	ldrh	r2, [r7, #26]
 8001520:	8bf9      	ldrh	r1, [r7, #30]
 8001522:	8b3b      	ldrh	r3, [r7, #24]
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	4603      	mov	r3, r0
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f000 fb88 	bl	8001c3e <u8g2_IsIntersection>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d102      	bne.n	800153a <u8g2_font_decode_glyph+0x19e>
	return d;
 8001534:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001538:	e03a      	b.n	80015b0 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	2200      	movs	r2, #0
 800153e:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	2200      	movs	r2, #0
 8001544:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 800154c:	4619      	mov	r1, r3
 800154e:	6978      	ldr	r0, [r7, #20]
 8001550:	f7ff fd81 	bl	8001056 <u8g2_font_decode_get_unsigned_bits>
 8001554:	4603      	mov	r3, r0
 8001556:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 800155e:	4619      	mov	r1, r3
 8001560:	6978      	ldr	r0, [r7, #20]
 8001562:	f7ff fd78 	bl	8001056 <u8g2_font_decode_get_unsigned_bits>
 8001566:	4603      	mov	r3, r0
 8001568:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	2200      	movs	r2, #0
 800156e:	4619      	mov	r1, r3
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff fe54 	bl	800121e <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8001576:	7bbb      	ldrb	r3, [r7, #14]
 8001578:	2201      	movs	r2, #1
 800157a:	4619      	mov	r1, r3
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff fe4e 	bl	800121e <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001582:	2101      	movs	r1, #1
 8001584:	6978      	ldr	r0, [r7, #20]
 8001586:	f7ff fd66 	bl	8001056 <u8g2_font_decode_get_unsigned_bits>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1ec      	bne.n	800156a <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001596:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800159a:	429a      	cmp	r2, r3
 800159c:	dd00      	ble.n	80015a0 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800159e:	e7d2      	b.n	8001546 <u8g2_font_decode_glyph+0x1aa>
	break;
 80015a0:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	7b9a      	ldrb	r2, [r3, #14]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  }
  return d;
 80015ac:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3720      	adds	r7, #32
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c8:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	3317      	adds	r3, #23
 80015ce:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 80015d0:	887b      	ldrh	r3, [r7, #2]
 80015d2:	2bff      	cmp	r3, #255	@ 0xff
 80015d4:	d82a      	bhi.n	800162c <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 80015d6:	887b      	ldrh	r3, [r7, #2]
 80015d8:	2b60      	cmp	r3, #96	@ 0x60
 80015da:	d907      	bls.n	80015ec <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 80015e2:	461a      	mov	r2, r3
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	4413      	add	r3, r2
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	e009      	b.n	8001600 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 80015ec:	887b      	ldrh	r3, [r7, #2]
 80015ee:	2b40      	cmp	r3, #64	@ 0x40
 80015f0:	d906      	bls.n	8001600 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 80015f8:	461a      	mov	r2, r3
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	4413      	add	r3, r2
 80015fe:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	3301      	adds	r3, #1
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d04e      	beq.n	80016a8 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	887b      	ldrh	r3, [r7, #2]
 8001612:	4293      	cmp	r3, r2
 8001614:	d102      	bne.n	800161c <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	3302      	adds	r3, #2
 800161a:	e049      	b.n	80016b0 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	3301      	adds	r3, #1
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	461a      	mov	r2, r3
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	4413      	add	r3, r2
 8001628:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800162a:	e7e9      	b.n	8001600 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8001632:	461a      	mov	r2, r3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	4413      	add	r3, r2
 8001638:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 800163e:	2100      	movs	r1, #0
 8001640:	6938      	ldr	r0, [r7, #16]
 8001642:	f7ff fc3f 	bl	8000ec4 <u8g2_font_get_word>
 8001646:	4603      	mov	r3, r0
 8001648:	461a      	mov	r2, r3
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	4413      	add	r3, r2
 800164e:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001650:	2102      	movs	r1, #2
 8001652:	6938      	ldr	r0, [r7, #16]
 8001654:	f7ff fc36 	bl	8000ec4 <u8g2_font_get_word>
 8001658:	4603      	mov	r3, r0
 800165a:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	3304      	adds	r3, #4
 8001660:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8001662:	89fa      	ldrh	r2, [r7, #14]
 8001664:	887b      	ldrh	r3, [r7, #2]
 8001666:	429a      	cmp	r2, r3
 8001668:	d3e9      	bcc.n	800163e <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8001670:	89fb      	ldrh	r3, [r7, #14]
 8001672:	021b      	lsls	r3, r3, #8
 8001674:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	3301      	adds	r3, #1
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	89fb      	ldrh	r3, [r7, #14]
 8001680:	4313      	orrs	r3, r2
 8001682:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8001684:	89fb      	ldrh	r3, [r7, #14]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d010      	beq.n	80016ac <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 800168a:	89fa      	ldrh	r2, [r7, #14]
 800168c:	887b      	ldrh	r3, [r7, #2]
 800168e:	429a      	cmp	r2, r3
 8001690:	d102      	bne.n	8001698 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	3303      	adds	r3, #3
 8001696:	e00b      	b.n	80016b0 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	3302      	adds	r3, #2
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	461a      	mov	r2, r3
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	4413      	add	r3, r2
 80016a4:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 80016a6:	e7e0      	b.n	800166a <u8g2_font_get_glyph_data+0xb2>
	break;
 80016a8:	bf00      	nop
 80016aa:	e000      	b.n	80016ae <u8g2_font_get_glyph_data+0xf6>
	break;
 80016ac:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	4608      	mov	r0, r1
 80016c2:	4611      	mov	r1, r2
 80016c4:	461a      	mov	r2, r3
 80016c6:	4603      	mov	r3, r0
 80016c8:	817b      	strh	r3, [r7, #10]
 80016ca:	460b      	mov	r3, r1
 80016cc:	813b      	strh	r3, [r7, #8]
 80016ce:	4613      	mov	r3, r2
 80016d0:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	897a      	ldrh	r2, [r7, #10]
 80016da:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  u8g2->font_decode.target_y = y;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	893a      	ldrh	r2, [r7, #8]
 80016e2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80016e6:	88fb      	ldrh	r3, [r7, #6]
 80016e8:	4619      	mov	r1, r3
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f7ff ff64 	bl	80015b8 <u8g2_font_get_glyph_data>
 80016f0:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d005      	beq.n	8001704 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 80016f8:	6939      	ldr	r1, [r7, #16]
 80016fa:	68f8      	ldr	r0, [r7, #12]
 80016fc:	f7ff fe4e 	bl	800139c <u8g2_font_decode_glyph>
 8001700:	4603      	mov	r3, r0
 8001702:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8001704:	8afb      	ldrh	r3, [r7, #22]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	4608      	mov	r0, r1
 800171a:	4611      	mov	r1, r2
 800171c:	461a      	mov	r2, r3
 800171e:	4603      	mov	r3, r0
 8001720:	817b      	strh	r3, [r7, #10]
 8001722:	460b      	mov	r3, r1
 8001724:	813b      	strh	r3, [r7, #8]
 8001726:	4613      	mov	r3, r2
 8001728:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001730:	2b03      	cmp	r3, #3
 8001732:	d833      	bhi.n	800179c <u8g2_DrawGlyph+0x8c>
 8001734:	a201      	add	r2, pc, #4	@ (adr r2, 800173c <u8g2_DrawGlyph+0x2c>)
 8001736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173a:	bf00      	nop
 800173c:	0800174d 	.word	0x0800174d
 8001740:	08001761 	.word	0x08001761
 8001744:	08001775 	.word	0x08001775
 8001748:	08001789 	.word	0x08001789
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	4798      	blx	r3
 8001754:	4603      	mov	r3, r0
 8001756:	461a      	mov	r2, r3
 8001758:	893b      	ldrh	r3, [r7, #8]
 800175a:	4413      	add	r3, r2
 800175c:	813b      	strh	r3, [r7, #8]
      break;
 800175e:	e01d      	b.n	800179c <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	4798      	blx	r3
 8001768:	4603      	mov	r3, r0
 800176a:	461a      	mov	r2, r3
 800176c:	897b      	ldrh	r3, [r7, #10]
 800176e:	1a9b      	subs	r3, r3, r2
 8001770:	817b      	strh	r3, [r7, #10]
      break;
 8001772:	e013      	b.n	800179c <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001778:	68f8      	ldr	r0, [r7, #12]
 800177a:	4798      	blx	r3
 800177c:	4603      	mov	r3, r0
 800177e:	461a      	mov	r2, r3
 8001780:	893b      	ldrh	r3, [r7, #8]
 8001782:	1a9b      	subs	r3, r3, r2
 8001784:	813b      	strh	r3, [r7, #8]
      break;
 8001786:	e009      	b.n	800179c <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800178c:	68f8      	ldr	r0, [r7, #12]
 800178e:	4798      	blx	r3
 8001790:	4603      	mov	r3, r0
 8001792:	461a      	mov	r2, r3
 8001794:	897b      	ldrh	r3, [r7, #10]
 8001796:	4413      	add	r3, r2
 8001798:	817b      	strh	r3, [r7, #10]
      break;
 800179a:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 800179c:	88fb      	ldrh	r3, [r7, #6]
 800179e:	893a      	ldrh	r2, [r7, #8]
 80017a0:	8979      	ldrh	r1, [r7, #10]
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f7ff ff88 	bl	80016b8 <u8g2_font_draw_glyph>
 80017a8:	4603      	mov	r3, r0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop

080017b4 <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	460b      	mov	r3, r1
 80017c0:	817b      	strh	r3, [r7, #10]
 80017c2:	4613      	mov	r3, r2
 80017c4:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f000 fca7 	bl	800211a <u8x8_utf8_init>
  sum = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	7812      	ldrb	r2, [r2, #0]
 80017d8:	4611      	mov	r1, r2
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	4798      	blx	r3
 80017de:	4603      	mov	r3, r0
 80017e0:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 80017e2:	8abb      	ldrh	r3, [r7, #20]
 80017e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d038      	beq.n	800185e <u8g2_draw_string+0xaa>
      break;
    str++;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3301      	adds	r3, #1
 80017f0:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 80017f2:	8abb      	ldrh	r3, [r7, #20]
 80017f4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d0e9      	beq.n	80017d0 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 80017fc:	8abb      	ldrh	r3, [r7, #20]
 80017fe:	893a      	ldrh	r2, [r7, #8]
 8001800:	8979      	ldrh	r1, [r7, #10]
 8001802:	68f8      	ldr	r0, [r7, #12]
 8001804:	f7ff ff84 	bl	8001710 <u8g2_DrawGlyph>
 8001808:	4603      	mov	r3, r0
 800180a:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001812:	2b03      	cmp	r3, #3
 8001814:	d81e      	bhi.n	8001854 <u8g2_draw_string+0xa0>
 8001816:	a201      	add	r2, pc, #4	@ (adr r2, 800181c <u8g2_draw_string+0x68>)
 8001818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800181c:	0800182d 	.word	0x0800182d
 8001820:	08001837 	.word	0x08001837
 8001824:	08001841 	.word	0x08001841
 8001828:	0800184b 	.word	0x0800184b
      {
	case 0:
	  x += delta;
 800182c:	897a      	ldrh	r2, [r7, #10]
 800182e:	8a7b      	ldrh	r3, [r7, #18]
 8001830:	4413      	add	r3, r2
 8001832:	817b      	strh	r3, [r7, #10]
	  break;
 8001834:	e00e      	b.n	8001854 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8001836:	893a      	ldrh	r2, [r7, #8]
 8001838:	8a7b      	ldrh	r3, [r7, #18]
 800183a:	4413      	add	r3, r2
 800183c:	813b      	strh	r3, [r7, #8]
	  break;
 800183e:	e009      	b.n	8001854 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8001840:	897a      	ldrh	r2, [r7, #10]
 8001842:	8a7b      	ldrh	r3, [r7, #18]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	817b      	strh	r3, [r7, #10]
	  break;
 8001848:	e004      	b.n	8001854 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 800184a:	893a      	ldrh	r2, [r7, #8]
 800184c:	8a7b      	ldrh	r3, [r7, #18]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	813b      	strh	r3, [r7, #8]
	  break;
 8001852:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8001854:	8afa      	ldrh	r2, [r7, #22]
 8001856:	8a7b      	ldrh	r3, [r7, #18]
 8001858:	4413      	add	r3, r2
 800185a:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800185c:	e7b8      	b.n	80017d0 <u8g2_draw_string+0x1c>
      break;
 800185e:	bf00      	nop
    }
  }
  return sum;
 8001860:	8afb      	ldrh	r3, [r7, #22]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop

0800186c <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	607b      	str	r3, [r7, #4]
 8001876:	460b      	mov	r3, r1
 8001878:	817b      	strh	r3, [r7, #10]
 800187a:	4613      	mov	r3, r2
 800187c:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4a06      	ldr	r2, [pc, #24]	@ (800189c <u8g2_DrawStr+0x30>)
 8001882:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8001884:	893a      	ldrh	r2, [r7, #8]
 8001886:	8979      	ldrh	r1, [r7, #10]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f7ff ff92 	bl	80017b4 <u8g2_draw_string>
 8001890:	4603      	mov	r3, r0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	08002137 	.word	0x08002137

080018a0 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d05d      	beq.n	800196c <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f993 2081 	ldrsb.w	r2, [r3, #129]	@ 0x81
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f993 2082 	ldrsb.w	r2, [r3, #130]	@ 0x82
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d04d      	beq.n	800196e <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d11c      	bne.n	8001916 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f993 208e 	ldrsb.w	r2, [r3, #142]	@ 0x8e
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f993 3083 	ldrsb.w	r3, [r3, #131]	@ 0x83
 80018e8:	429a      	cmp	r2, r3
 80018ea:	da05      	bge.n	80018f8 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f993 2083 	ldrsb.w	r2, [r3, #131]	@ 0x83
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f993 3084 	ldrsb.w	r3, [r3, #132]	@ 0x84
 8001904:	429a      	cmp	r2, r3
 8001906:	dd32      	ble.n	800196e <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f993 2084 	ldrsb.w	r2, [r3, #132]	@ 0x84
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8001914:	e02b      	b.n	800196e <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f993 308e 	ldrsb.w	r3, [r3, #142]	@ 0x8e
 800191c:	461a      	mov	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8001924:	4619      	mov	r1, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 800192c:	440b      	add	r3, r1
 800192e:	429a      	cmp	r2, r3
 8001930:	da0d      	bge.n	800194e <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8001938:	b2da      	uxtb	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8001940:	b2db      	uxtb	r3, r3
 8001942:	4413      	add	r3, r2
 8001944:	b2db      	uxtb	r3, r3
 8001946:	b25a      	sxtb	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 800195a:	429a      	cmp	r2, r3
 800195c:	dd07      	ble.n	800196e <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f993 2080 	ldrsb.w	r2, [r3, #128]	@ 0x80
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 800196a:	e000      	b.n	800196e <u8g2_UpdateRefHeight+0xce>
    return;
 800196c:	bf00      	nop
  }  
}
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  return 0;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a04      	ldr	r2, [pc, #16]	@ (80019ac <u8g2_SetFontPosBaseline+0x1c>)
 800199c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	08001979 	.word	0x08001979

080019b0 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d00b      	beq.n	80019dc <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	659a      	str	r2, [r3, #88]	@ 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3374      	adds	r3, #116	@ 0x74
 80019ce:	6839      	ldr	r1, [r7, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fa97 	bl	8000f04 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff ff62 	bl	80018a0 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 80019dc:	bf00      	nop
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <u8g2_clip_intersection2>:
 will return 0 if there is no intersection and if a > b

 */

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len,
		u8g2_uint_t c, u8g2_uint_t d) {
 80019e4:	b480      	push	{r7}
 80019e6:	b087      	sub	sp, #28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	4611      	mov	r1, r2
 80019f0:	461a      	mov	r2, r3
 80019f2:	460b      	mov	r3, r1
 80019f4:	80fb      	strh	r3, [r7, #6]
 80019f6:	4613      	mov	r3, r2
 80019f8:	80bb      	strh	r3, [r7, #4]
	u8g2_uint_t a = *ap;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	82fb      	strh	r3, [r7, #22]
	u8g2_uint_t b;
	b = a;
 8001a00:	8afb      	ldrh	r3, [r7, #22]
 8001a02:	82bb      	strh	r3, [r7, #20]
	b += *len;
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	881a      	ldrh	r2, [r3, #0]
 8001a08:	8abb      	ldrh	r3, [r7, #20]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	82bb      	strh	r3, [r7, #20]
	/* be removed completly (be aware about memory curruption for wrong */
	/* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
	/* arguments) */

	/* removing the following if clause completly may lead to memory corruption of a>b */
	if (a > b) {
 8001a0e:	8afa      	ldrh	r2, [r7, #22]
 8001a10:	8abb      	ldrh	r3, [r7, #20]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d90b      	bls.n	8001a2e <u8g2_clip_intersection2+0x4a>
		/* replacing this if with a simple "return 0;" will not handle the case with negative a */
		if (a < d) {
 8001a16:	8afa      	ldrh	r2, [r7, #22]
 8001a18:	88bb      	ldrh	r3, [r7, #4]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d205      	bcs.n	8001a2a <u8g2_clip_intersection2+0x46>
			b = d;
 8001a1e:	88bb      	ldrh	r3, [r7, #4]
 8001a20:	82bb      	strh	r3, [r7, #20]
			b--;
 8001a22:	8abb      	ldrh	r3, [r7, #20]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	82bb      	strh	r3, [r7, #20]
 8001a28:	e001      	b.n	8001a2e <u8g2_clip_intersection2+0x4a>
		} else {
			a = c;
 8001a2a:	88fb      	ldrh	r3, [r7, #6]
 8001a2c:	82fb      	strh	r3, [r7, #22]
		}
	}

	/* from now on, the asumption a <= b is ok */

	if (a >= d)
 8001a2e:	8afa      	ldrh	r2, [r7, #22]
 8001a30:	88bb      	ldrh	r3, [r7, #4]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d301      	bcc.n	8001a3a <u8g2_clip_intersection2+0x56>
		return 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	e01c      	b.n	8001a74 <u8g2_clip_intersection2+0x90>
	if (b <= c)
 8001a3a:	8aba      	ldrh	r2, [r7, #20]
 8001a3c:	88fb      	ldrh	r3, [r7, #6]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d801      	bhi.n	8001a46 <u8g2_clip_intersection2+0x62>
		return 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e016      	b.n	8001a74 <u8g2_clip_intersection2+0x90>
	if (a < c)
 8001a46:	8afa      	ldrh	r2, [r7, #22]
 8001a48:	88fb      	ldrh	r3, [r7, #6]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d201      	bcs.n	8001a52 <u8g2_clip_intersection2+0x6e>
		a = c;
 8001a4e:	88fb      	ldrh	r3, [r7, #6]
 8001a50:	82fb      	strh	r3, [r7, #22]
	if (b > d)
 8001a52:	8aba      	ldrh	r2, [r7, #20]
 8001a54:	88bb      	ldrh	r3, [r7, #4]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d901      	bls.n	8001a5e <u8g2_clip_intersection2+0x7a>
		b = d;
 8001a5a:	88bb      	ldrh	r3, [r7, #4]
 8001a5c:	82bb      	strh	r3, [r7, #20]

	*ap = a;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	8afa      	ldrh	r2, [r7, #22]
 8001a62:	801a      	strh	r2, [r3, #0]
	b -= a;
 8001a64:	8aba      	ldrh	r2, [r7, #20]
 8001a66:	8afb      	ldrh	r3, [r7, #22]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	82bb      	strh	r3, [r7, #20]
	*len = b;
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	8aba      	ldrh	r2, [r7, #20]
 8001a70:	801a      	strh	r2, [r3, #0]
	return 1;
 8001a72:	2301      	movs	r3, #1
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	371c      	adds	r7, #28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <u8g2_draw_hv_line_2dir>:
 This function first adjusts the y position to the local buffer. Then it
 will clip the line and call u8g2_draw_low_level_hv_line()

 */
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		u8g2_uint_t len, uint8_t dir) {
 8001a80:	b590      	push	{r4, r7, lr}
 8001a82:	b087      	sub	sp, #28
 8001a84:	af02      	add	r7, sp, #8
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	4608      	mov	r0, r1
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4603      	mov	r3, r0
 8001a90:	817b      	strh	r3, [r7, #10]
 8001a92:	460b      	mov	r3, r1
 8001a94:	813b      	strh	r3, [r7, #8]
 8001a96:	4613      	mov	r3, r2
 8001a98:	80fb      	strh	r3, [r7, #6]

	/* clipping happens before the display rotation */

	/* transform to pixel buffer coordinates */
	y -= u8g2->pixel_curr_row;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001a9e:	893a      	ldrh	r2, [r7, #8]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	813b      	strh	r3, [r7, #8]

	u8g2->ll_hvline(u8g2, x, y, len, dir);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8001aa8:	88f8      	ldrh	r0, [r7, #6]
 8001aaa:	893a      	ldrh	r2, [r7, #8]
 8001aac:	8979      	ldrh	r1, [r7, #10]
 8001aae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	47a0      	blx	r4
}
 8001aba:	bf00      	nop
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd90      	pop	{r4, r7, pc}

08001ac2 <u8g2_DrawHVLine>:
 This function should be called by the user.

 "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
 */
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		u8g2_uint_t len, uint8_t dir) {
 8001ac2:	b590      	push	{r4, r7, lr}
 8001ac4:	b087      	sub	sp, #28
 8001ac6:	af02      	add	r7, sp, #8
 8001ac8:	60f8      	str	r0, [r7, #12]
 8001aca:	4608      	mov	r0, r1
 8001acc:	4611      	mov	r1, r2
 8001ace:	461a      	mov	r2, r3
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	817b      	strh	r3, [r7, #10]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	813b      	strh	r3, [r7, #8]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	80fb      	strh	r3, [r7, #6]
	/* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
	/* The callback may rotate the hv line */
	/* after rotation this will call u8g2_draw_hv_line_4dir() */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
	if (u8g2->is_page_clip_window_intersection != 0)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d075      	beq.n	8001bd2 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
		if (len != 0) {
 8001ae6:	88fb      	ldrh	r3, [r7, #6]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d072      	beq.n	8001bd2 <u8g2_DrawHVLine+0x110>

			/* convert to two directions */
			if (len > 1) {
 8001aec:	88fb      	ldrh	r3, [r7, #6]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d91a      	bls.n	8001b28 <u8g2_DrawHVLine+0x66>
				if (dir == 2) {
 8001af2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d109      	bne.n	8001b0e <u8g2_DrawHVLine+0x4c>
					x -= len;
 8001afa:	897a      	ldrh	r2, [r7, #10]
 8001afc:	88fb      	ldrh	r3, [r7, #6]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	817b      	strh	r3, [r7, #10]
					x++;
 8001b04:	897b      	ldrh	r3, [r7, #10]
 8001b06:	3301      	adds	r3, #1
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	817b      	strh	r3, [r7, #10]
 8001b0c:	e00c      	b.n	8001b28 <u8g2_DrawHVLine+0x66>
				} else if (dir == 3) {
 8001b0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	d108      	bne.n	8001b28 <u8g2_DrawHVLine+0x66>
					y -= len;
 8001b16:	893a      	ldrh	r2, [r7, #8]
 8001b18:	88fb      	ldrh	r3, [r7, #6]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	813b      	strh	r3, [r7, #8]
					y++;
 8001b20:	893b      	ldrh	r3, [r7, #8]
 8001b22:	3301      	adds	r3, #1
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	813b      	strh	r3, [r7, #8]
				}
			}
			dir &= 1;
 8001b28:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	f887 3020 	strb.w	r3, [r7, #32]

			/* clip against the user window */
			if (dir == 0) {
 8001b34:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d11a      	bne.n	8001b72 <u8g2_DrawHVLine+0xb0>
				if (y < u8g2->user_y0)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8001b42:	893b      	ldrh	r3, [r7, #8]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d83b      	bhi.n	8001bc0 <u8g2_DrawHVLine+0xfe>
					return;
				if (y >= u8g2->user_y1)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8001b4e:	893b      	ldrh	r3, [r7, #8]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d937      	bls.n	8001bc4 <u8g2_DrawHVLine+0x102>
					return;
				if (u8g2_clip_intersection2(&x, &len, u8g2->user_x0,
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8001b60:	1db9      	adds	r1, r7, #6
 8001b62:	f107 000a 	add.w	r0, r7, #10
 8001b66:	f7ff ff3d 	bl	80019e4 <u8g2_clip_intersection2>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d11a      	bne.n	8001ba6 <u8g2_DrawHVLine+0xe4>
						u8g2->user_x1) == 0)
					return;
 8001b70:	e02f      	b.n	8001bd2 <u8g2_DrawHVLine+0x110>
			} else {
				if (x < u8g2->user_x0)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8001b78:	897b      	ldrh	r3, [r7, #10]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d824      	bhi.n	8001bc8 <u8g2_DrawHVLine+0x106>
					return;
				if (x >= u8g2->user_x1)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8001b84:	897b      	ldrh	r3, [r7, #10]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d920      	bls.n	8001bcc <u8g2_DrawHVLine+0x10a>
					return;
				if (u8g2_clip_intersection2(&y, &len, u8g2->user_y0,
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8001b96:	1db9      	adds	r1, r7, #6
 8001b98:	f107 0008 	add.w	r0, r7, #8
 8001b9c:	f7ff ff22 	bl	80019e4 <u8g2_clip_intersection2>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d014      	beq.n	8001bd0 <u8g2_DrawHVLine+0x10e>
						u8g2->user_y1) == 0)
					return;
			}

			u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001baa:	689c      	ldr	r4, [r3, #8]
 8001bac:	8979      	ldrh	r1, [r7, #10]
 8001bae:	893a      	ldrh	r2, [r7, #8]
 8001bb0:	88f8      	ldrh	r0, [r7, #6]
 8001bb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	4603      	mov	r3, r0
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	47a0      	blx	r4
 8001bbe:	e008      	b.n	8001bd2 <u8g2_DrawHVLine+0x110>
					return;
 8001bc0:	bf00      	nop
 8001bc2:	e006      	b.n	8001bd2 <u8g2_DrawHVLine+0x110>
					return;
 8001bc4:	bf00      	nop
 8001bc6:	e004      	b.n	8001bd2 <u8g2_DrawHVLine+0x110>
					return;
 8001bc8:	bf00      	nop
 8001bca:	e002      	b.n	8001bd2 <u8g2_DrawHVLine+0x110>
					return;
 8001bcc:	bf00      	nop
 8001bce:	e000      	b.n	8001bd2 <u8g2_DrawHVLine+0x110>
					return;
 8001bd0:	bf00      	nop
		}
}
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd90      	pop	{r4, r7, pc}

08001bd8 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8001bd8:	b490      	push	{r4, r7}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4604      	mov	r4, r0
 8001be0:	4608      	mov	r0, r1
 8001be2:	4611      	mov	r1, r2
 8001be4:	461a      	mov	r2, r3
 8001be6:	4623      	mov	r3, r4
 8001be8:	80fb      	strh	r3, [r7, #6]
 8001bea:	4603      	mov	r3, r0
 8001bec:	80bb      	strh	r3, [r7, #4]
 8001bee:	460b      	mov	r3, r1
 8001bf0:	807b      	strh	r3, [r7, #2]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8001bf6:	887a      	ldrh	r2, [r7, #2]
 8001bf8:	88bb      	ldrh	r3, [r7, #4]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d20d      	bcs.n	8001c1a <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8001bfe:	883a      	ldrh	r2, [r7, #0]
 8001c00:	88fb      	ldrh	r3, [r7, #6]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d901      	bls.n	8001c0a <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e014      	b.n	8001c34 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8001c0a:	887a      	ldrh	r2, [r7, #2]
 8001c0c:	883b      	ldrh	r3, [r7, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d901      	bls.n	8001c16 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e00e      	b.n	8001c34 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	e00c      	b.n	8001c34 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8001c1a:	883a      	ldrh	r2, [r7, #0]
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d907      	bls.n	8001c32 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8001c22:	887a      	ldrh	r2, [r7, #2]
 8001c24:	883b      	ldrh	r3, [r7, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d901      	bls.n	8001c2e <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e002      	b.n	8001c34 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e000      	b.n	8001c34 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8001c32:	2300      	movs	r3, #0
    }
  }
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc90      	pop	{r4, r7}
 8001c3c:	4770      	bx	lr

08001c3e <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b084      	sub	sp, #16
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	60f8      	str	r0, [r7, #12]
 8001c46:	4608      	mov	r0, r1
 8001c48:	4611      	mov	r1, r2
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	817b      	strh	r3, [r7, #10]
 8001c50:	460b      	mov	r3, r1
 8001c52:	813b      	strh	r3, [r7, #8]
 8001c54:	4613      	mov	r3, r2
 8001c56:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f8b3 104e 	ldrh.w	r1, [r3, #78]	@ 0x4e
 8001c64:	8b3b      	ldrh	r3, [r7, #24]
 8001c66:	893a      	ldrh	r2, [r7, #8]
 8001c68:	f7ff ffb6 	bl	8001bd8 <u8g2_is_intersection_decision_tree>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <u8g2_IsIntersection+0x38>
    return 0; 
 8001c72:	2300      	movs	r3, #0
 8001c74:	e00a      	b.n	8001c8c <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	897a      	ldrh	r2, [r7, #10]
 8001c86:	f7ff ffa7 	bl	8001bd8 <u8g2_is_intersection_decision_tree>
 8001c8a:	4603      	mov	r3, r0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b089      	sub	sp, #36	@ 0x24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	4608      	mov	r0, r1
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	817b      	strh	r3, [r7, #10]
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	813b      	strh	r3, [r7, #8]
 8001caa:	4613      	mov	r3, r2
 8001cac:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8001cae:	893b      	ldrh	r3, [r7, #8]
 8001cb0:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8001cb2:	7efb      	ldrb	r3, [r7, #27]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8001cbe:	7e3a      	ldrb	r2, [r7, #24]
 8001cc0:	7efb      	ldrb	r3, [r7, #27]
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d801      	bhi.n	8001cde <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8001cda:	7e3b      	ldrb	r3, [r7, #24]
 8001cdc:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d001      	beq.n	8001cec <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8001ce8:	7e3b      	ldrb	r3, [r7, #24]
 8001cea:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8001cec:	893b      	ldrh	r3, [r7, #8]
 8001cee:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8001cf0:	8afb      	ldrh	r3, [r7, #22]
 8001cf2:	f023 0307 	bic.w	r3, r3, #7
 8001cf6:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	7c1b      	ldrb	r3, [r3, #16]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	8afb      	ldrh	r3, [r7, #22]
 8001d02:	fb13 f302 	smulbb	r3, r3, r2
 8001d06:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d0c:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8001d0e:	8afb      	ldrh	r3, [r7, #22]
 8001d10:	69fa      	ldr	r2, [r7, #28]
 8001d12:	4413      	add	r3, r2
 8001d14:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8001d16:	897b      	ldrh	r3, [r7, #10]
 8001d18:	69fa      	ldr	r2, [r7, #28]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8001d1e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d117      	bne.n	8001d56 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	781a      	ldrb	r2, [r3, #0]
 8001d2a:	7ebb      	ldrb	r3, [r7, #26]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	781a      	ldrb	r2, [r3, #0]
 8001d38:	7e7b      	ldrb	r3, [r7, #25]
 8001d3a:	4053      	eors	r3, r2
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	701a      	strb	r2, [r3, #0]
	ptr++;
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3301      	adds	r3, #1
 8001d46:	61fb      	str	r3, [r7, #28]
	len--;
 8001d48:	88fb      	ldrh	r3, [r7, #6]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8001d4e:	88fb      	ldrh	r3, [r7, #6]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1e8      	bne.n	8001d26 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8001d54:	e038      	b.n	8001dc8 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	781a      	ldrb	r2, [r3, #0]
 8001d5a:	7ebb      	ldrb	r3, [r7, #26]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	781a      	ldrb	r2, [r3, #0]
 8001d68:	7e7b      	ldrb	r3, [r7, #25]
 8001d6a:	4053      	eors	r3, r2
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8001d72:	7efb      	ldrb	r3, [r7, #27]
 8001d74:	3301      	adds	r3, #1
 8001d76:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8001d78:	7efb      	ldrb	r3, [r7, #27]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	76fb      	strb	r3, [r7, #27]
      len--;
 8001d80:	88fb      	ldrh	r3, [r7, #6]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8001d86:	7efb      	ldrb	r3, [r7, #27]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d114      	bne.n	8001db6 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8001d90:	461a      	mov	r2, r3
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	4413      	add	r3, r2
 8001d96:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d801      	bhi.n	8001da6 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8001da2:	2301      	movs	r3, #1
 8001da4:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d008      	beq.n	8001dc2 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8001db0:	2301      	movs	r3, #1
 8001db2:	767b      	strb	r3, [r7, #25]
 8001db4:	e005      	b.n	8001dc2 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8001db6:	7ebb      	ldrb	r3, [r7, #26]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8001dbc:	7e7b      	ldrb	r3, [r7, #25]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8001dc2:	88fb      	ldrh	r3, [r7, #6]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1c6      	bne.n	8001d56 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8001dc8:	bf00      	nop
 8001dca:	3724      	adds	r7, #36	@ 0x24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  u8g2->clip_y0 = 0;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001df2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dfc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	4798      	blx	r3
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b084      	sub	sp, #16
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	60f8      	str	r0, [r7, #12]
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	603b      	str	r3, [r7, #0]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	659a      	str	r2, [r3, #88]	@ 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	68ba      	ldr	r2, [r7, #8]
 8001e32:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	79fa      	ldrb	r2, [r7, #7]
 8001e38:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
  u8g2->bitmap_transparency = 0;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
  u8g2->draw_color = 1;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  u8g2->is_auto_page_clear = 1;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
  
  u8g2->cb = u8g2_cb;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update_dimension(u8g2);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	f7ff ffa9 	bl	8001dd4 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f7ff fd84 	bl	8001990 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
#endif
}
 8001e90:	bf00      	nop
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001eac:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8001eae:	89fb      	ldrh	r3, [r7, #14]
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	89fa      	ldrh	r2, [r7, #14]
 8001eb8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  
  t = display_info->tile_width;
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	7c1b      	ldrb	r3, [r3, #16]
 8001ebe:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8001ec0:	89fb      	ldrh	r3, [r7, #14]
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	89fa      	ldrh	r2, [r7, #14]
 8001eca:	875a      	strh	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001ed2:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8001ed4:	89fb      	ldrh	r3, [r7, #14]
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	89fa      	ldrh	r2, [r7, #14]
 8001ede:	87da      	strh	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_buf_height;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001ee6:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8001ee8:	89fb      	ldrh	r3, [r7, #14]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8001ef0:	4413      	add	r3, r2
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	7c52      	ldrb	r2, [r2, #17]
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	dd07      	ble.n	8001f0a <u8g2_update_dimension_common+0x72>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	7c5b      	ldrb	r3, [r3, #17]
 8001efe:	461a      	mov	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8001f0a:	89fb      	ldrh	r3, [r7, #14]
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  u8g2->buf_y1 += t;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8001f2c:	89fb      	ldrh	r3, [r7, #14]
 8001f2e:	4413      	add	r3, r2
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	8a9a      	ldrh	r2, [r3, #20]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  u8g2->height = display_info->pixel_height;
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	8ada      	ldrh	r2, [r3, #22]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af02      	add	r7, sp, #8
 8001f5e:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f8b3 0052 	ldrh.w	r0, [r3, #82]	@ 0x52
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff fe5e 	bl	8001c3e <u8g2_IsIntersection>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d104      	bne.n	8001f92 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8001f90:	e03b      	b.n	800200a <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d205      	bcs.n	8001fb6 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d905      	bls.n	8001fd2 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d205      	bcs.n	8001fee <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d905      	bls.n	800200a <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff ff3c 	bl	8001e98 <u8g2_update_dimension_common>
}
 8002020:	bf00      	nop
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  if ( u8g2->height >= u8g2->buf_y1 )
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8002058:	429a      	cmp	r2, r3
 800205a:	d30a      	bcc.n	8002072 <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	b29a      	uxth	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	b29a      	uxth	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff ff65 	bl	8001f58 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b088      	sub	sp, #32
 800209a:	af02      	add	r7, sp, #8
 800209c:	60f8      	str	r0, [r7, #12]
 800209e:	4608      	mov	r0, r1
 80020a0:	4611      	mov	r1, r2
 80020a2:	461a      	mov	r2, r3
 80020a4:	4603      	mov	r3, r0
 80020a6:	817b      	strh	r3, [r7, #10]
 80020a8:	460b      	mov	r3, r1
 80020aa:	813b      	strh	r3, [r7, #8]
 80020ac:	4613      	mov	r3, r2
 80020ae:	80fb      	strh	r3, [r7, #6]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80020b6:	82bb      	strh	r3, [r7, #20]
  yy -= y;
 80020b8:	8aba      	ldrh	r2, [r7, #20]
 80020ba:	893b      	ldrh	r3, [r7, #8]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	82bb      	strh	r3, [r7, #20]
  
  xx = u8g2->width;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80020c6:	82fb      	strh	r3, [r7, #22]
  xx -= x;
 80020c8:	8afa      	ldrh	r2, [r7, #22]
 80020ca:	897b      	ldrh	r3, [r7, #10]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	82fb      	strh	r3, [r7, #22]
  
  if ( dir == 0 )
 80020d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d107      	bne.n	80020e8 <u8g2_draw_l90_r2+0x52>
  {
    yy--;
 80020d8:	8abb      	ldrh	r3, [r7, #20]
 80020da:	3b01      	subs	r3, #1
 80020dc:	82bb      	strh	r3, [r7, #20]
    xx -= len;
 80020de:	8afa      	ldrh	r2, [r7, #22]
 80020e0:	88fb      	ldrh	r3, [r7, #6]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	82fb      	strh	r3, [r7, #22]
 80020e6:	e00a      	b.n	80020fe <u8g2_draw_l90_r2+0x68>
  }
  else if ( dir == 1 )
 80020e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d106      	bne.n	80020fe <u8g2_draw_l90_r2+0x68>
  {
    xx--;
 80020f0:	8afb      	ldrh	r3, [r7, #22]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	82fb      	strh	r3, [r7, #22]
    yy -= len;
 80020f6:	8aba      	ldrh	r2, [r7, #20]
 80020f8:	88fb      	ldrh	r3, [r7, #6]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	82bb      	strh	r3, [r7, #20]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 80020fe:	88f8      	ldrh	r0, [r7, #6]
 8002100:	8aba      	ldrh	r2, [r7, #20]
 8002102:	8af9      	ldrh	r1, [r7, #22]
 8002104:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002108:	9300      	str	r3, [sp, #0]
 800210a:	4603      	mov	r3, r0
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f7ff fcb7 	bl	8001a80 <u8g2_draw_hv_line_2dir>
}
 8002112:	bf00      	nop
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
 800213e:	460b      	mov	r3, r1
 8002140:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8002142:	78fb      	ldrb	r3, [r7, #3]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d002      	beq.n	800214e <u8x8_ascii_next+0x18>
 8002148:	78fb      	ldrb	r3, [r7, #3]
 800214a:	2b0a      	cmp	r3, #10
 800214c:	d102      	bne.n	8002154 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 800214e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002152:	e001      	b.n	8002158 <u8x8_ascii_next+0x22>
  return b;
 8002154:	78fb      	ldrb	r3, [r7, #3]
 8002156:	b29b      	uxth	r3, r3
}
 8002158:	4618      	mov	r0, r3
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8002164:	b590      	push	{r4, r7, lr}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691c      	ldr	r4, [r3, #16]
 8002174:	78fa      	ldrb	r2, [r7, #3]
 8002176:	2300      	movs	r3, #0
 8002178:	2120      	movs	r1, #32
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	47a0      	blx	r4
 800217e:	4603      	mov	r3, r0
}
 8002180:	4618      	mov	r0, r3
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	bd90      	pop	{r4, r7, pc}

08002188 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002188:	b590      	push	{r4, r7, lr}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	460b      	mov	r3, r1
 8002192:	607a      	str	r2, [r7, #4]
 8002194:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	691c      	ldr	r4, [r3, #16]
 800219a:	7afa      	ldrb	r2, [r7, #11]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2117      	movs	r1, #23
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	47a0      	blx	r4
 80021a4:	4603      	mov	r3, r0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd90      	pop	{r4, r7, pc}

080021ae <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b082      	sub	sp, #8
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	460b      	mov	r3, r1
 80021b8:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 80021ba:	1cfb      	adds	r3, r7, #3
 80021bc:	461a      	mov	r2, r3
 80021be:	2101      	movs	r1, #1
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7ff ffe1 	bl	8002188 <u8x8_byte_SendBytes>
 80021c6:	4603      	mov	r3, r0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 80021d0:	b590      	push	{r4, r7, lr}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68dc      	ldr	r4, [r3, #12]
 80021e0:	78fa      	ldrb	r2, [r7, #3]
 80021e2:	2300      	movs	r3, #0
 80021e4:	2115      	movs	r1, #21
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	47a0      	blx	r4
 80021ea:	4603      	mov	r3, r0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd90      	pop	{r4, r7, pc}

080021f4 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 80021f4:	b590      	push	{r4, r7, lr}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68dc      	ldr	r4, [r3, #12]
 8002204:	78fa      	ldrb	r2, [r7, #3]
 8002206:	2300      	movs	r3, #0
 8002208:	2116      	movs	r1, #22
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	47a0      	blx	r4
 800220e:	4603      	mov	r3, r0
}
 8002210:	4618      	mov	r0, r3
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	bd90      	pop	{r4, r7, pc}

08002218 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002218:	b590      	push	{r4, r7, lr}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	460b      	mov	r3, r1
 8002222:	607a      	str	r2, [r7, #4]
 8002224:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	68dc      	ldr	r4, [r3, #12]
 800222a:	7afa      	ldrb	r2, [r7, #11]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2117      	movs	r1, #23
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	47a0      	blx	r4
 8002234:	4603      	mov	r3, r0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	bd90      	pop	{r4, r7, pc}

0800223e <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 800223e:	b590      	push	{r4, r7, lr}
 8002240:	b083      	sub	sp, #12
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68dc      	ldr	r4, [r3, #12]
 800224a:	2300      	movs	r3, #0
 800224c:	2200      	movs	r2, #0
 800224e:	2118      	movs	r1, #24
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	47a0      	blx	r4
 8002254:	4603      	mov	r3, r0
}
 8002256:	4618      	mov	r0, r3
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	bd90      	pop	{r4, r7, pc}

0800225e <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 800225e:	b590      	push	{r4, r7, lr}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68dc      	ldr	r4, [r3, #12]
 800226a:	2300      	movs	r3, #0
 800226c:	2200      	movs	r2, #0
 800226e:	2119      	movs	r1, #25
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	47a0      	blx	r4
 8002274:	4603      	mov	r3, r0
}
 8002276:	4618      	mov	r0, r3
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	bd90      	pop	{r4, r7, pc}

0800227e <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 800227e:	b590      	push	{r4, r7, lr}
 8002280:	b085      	sub	sp, #20
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
 8002286:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	73fb      	strb	r3, [r7, #15]
    data++;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	3301      	adds	r3, #1
 8002292:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	2bfe      	cmp	r3, #254	@ 0xfe
 8002298:	d031      	beq.n	80022fe <u8x8_cad_SendSequence+0x80>
 800229a:	2bfe      	cmp	r3, #254	@ 0xfe
 800229c:	dc3d      	bgt.n	800231a <u8x8_cad_SendSequence+0x9c>
 800229e:	2b19      	cmp	r3, #25
 80022a0:	dc3b      	bgt.n	800231a <u8x8_cad_SendSequence+0x9c>
 80022a2:	2b18      	cmp	r3, #24
 80022a4:	da23      	bge.n	80022ee <u8x8_cad_SendSequence+0x70>
 80022a6:	2b16      	cmp	r3, #22
 80022a8:	dc02      	bgt.n	80022b0 <u8x8_cad_SendSequence+0x32>
 80022aa:	2b15      	cmp	r3, #21
 80022ac:	da03      	bge.n	80022b6 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 80022ae:	e034      	b.n	800231a <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 80022b0:	2b17      	cmp	r3, #23
 80022b2:	d00e      	beq.n	80022d2 <u8x8_cad_SendSequence+0x54>
	return;
 80022b4:	e031      	b.n	800231a <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68dc      	ldr	r4, [r3, #12]
 80022c0:	7bba      	ldrb	r2, [r7, #14]
 80022c2:	7bf9      	ldrb	r1, [r7, #15]
 80022c4:	2300      	movs	r3, #0
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	47a0      	blx	r4
	  data++;
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	3301      	adds	r3, #1
 80022ce:	603b      	str	r3, [r7, #0]
	  break;
 80022d0:	e022      	b.n	8002318 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 80022d8:	f107 030e 	add.w	r3, r7, #14
 80022dc:	461a      	mov	r2, r3
 80022de:	2101      	movs	r1, #1
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f7ff ff99 	bl	8002218 <u8x8_cad_SendData>
	  data++;
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	3301      	adds	r3, #1
 80022ea:	603b      	str	r3, [r7, #0]
	  break;
 80022ec:	e014      	b.n	8002318 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68dc      	ldr	r4, [r3, #12]
 80022f2:	7bf9      	ldrb	r1, [r7, #15]
 80022f4:	2300      	movs	r3, #0
 80022f6:	2200      	movs	r2, #0
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	47a0      	blx	r4
	  break;
 80022fc:	e00c      	b.n	8002318 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002304:	7bbb      	ldrb	r3, [r7, #14]
 8002306:	461a      	mov	r2, r3
 8002308:	2129      	movs	r1, #41	@ 0x29
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f9ee 	bl	80026ec <u8x8_gpio_call>
	  data++;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	3301      	adds	r3, #1
 8002314:	603b      	str	r3, [r7, #0]
	  break;
 8002316:	bf00      	nop
    cmd = *data;
 8002318:	e7b6      	b.n	8002288 <u8x8_cad_SendSequence+0xa>
	return;
 800231a:	bf00      	nop
    }
  }
}
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	bd90      	pop	{r4, r7, pc}
	...

08002324 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002324:	b590      	push	{r4, r7, lr}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	607b      	str	r3, [r7, #4]
 800232e:	460b      	mov	r3, r1
 8002330:	72fb      	strb	r3, [r7, #11]
 8002332:	4613      	mov	r3, r2
 8002334:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8002336:	7afb      	ldrb	r3, [r7, #11]
 8002338:	3b14      	subs	r3, #20
 800233a:	2b05      	cmp	r3, #5
 800233c:	d82f      	bhi.n	800239e <u8x8_cad_001+0x7a>
 800233e:	a201      	add	r2, pc, #4	@ (adr r2, 8002344 <u8x8_cad_001+0x20>)
 8002340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002344:	0800238d 	.word	0x0800238d
 8002348:	0800235d 	.word	0x0800235d
 800234c:	08002371 	.word	0x08002371
 8002350:	08002385 	.word	0x08002385
 8002354:	0800238d 	.word	0x0800238d
 8002358:	0800238d 	.word	0x0800238d
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 800235c:	2100      	movs	r1, #0
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f7ff ff00 	bl	8002164 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002364:	7abb      	ldrb	r3, [r7, #10]
 8002366:	4619      	mov	r1, r3
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f7ff ff20 	bl	80021ae <u8x8_byte_SendByte>
      break;
 800236e:	e018      	b.n	80023a2 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8002370:	2100      	movs	r1, #0
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f7ff fef6 	bl	8002164 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002378:	7abb      	ldrb	r3, [r7, #10]
 800237a:	4619      	mov	r1, r3
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f7ff ff16 	bl	80021ae <u8x8_byte_SendByte>
      break;
 8002382:	e00e      	b.n	80023a2 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8002384:	2101      	movs	r1, #1
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f7ff feec 	bl	8002164 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	691c      	ldr	r4, [r3, #16]
 8002390:	7aba      	ldrb	r2, [r7, #10]
 8002392:	7af9      	ldrb	r1, [r7, #11]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	47a0      	blx	r4
 800239a:	4603      	mov	r3, r0
 800239c:	e002      	b.n	80023a4 <u8x8_cad_001+0x80>
    default:
      return 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	e000      	b.n	80023a4 <u8x8_cad_001+0x80>
  }
  return 1;
 80023a2:	2301      	movs	r3, #1
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd90      	pop	{r4, r7, pc}

080023ac <u8x8_d_st7565_common>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	607b      	str	r3, [r7, #4]
 80023b6:	460b      	mov	r3, r1
 80023b8:	72fb      	strb	r3, [r7, #11]
 80023ba:	4613      	mov	r3, r2
 80023bc:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 80023be:	7afb      	ldrb	r3, [r7, #11]
 80023c0:	2b0f      	cmp	r3, #15
 80023c2:	d006      	beq.n	80023d2 <u8x8_d_st7565_common+0x26>
 80023c4:	2b0f      	cmp	r3, #15
 80023c6:	dc71      	bgt.n	80024ac <u8x8_d_st7565_common+0x100>
 80023c8:	2b0b      	cmp	r3, #11
 80023ca:	d050      	beq.n	800246e <u8x8_d_st7565_common+0xc2>
 80023cc:	2b0e      	cmp	r3, #14
 80023ce:	d05b      	beq.n	8002488 <u8x8_d_st7565_common+0xdc>
 80023d0:	e06c      	b.n	80024ac <u8x8_d_st7565_common+0x100>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f7ff ff33 	bl	800223e <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	795b      	ldrb	r3, [r3, #5]
 80023dc:	75bb      	strb	r3, [r7, #22]
      x *= 8;
 80023de:	7dbb      	ldrb	r3, [r7, #22]
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	75bb      	strb	r3, [r7, #22]
      x += u8x8->x_offset;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80023ea:	7dbb      	ldrb	r3, [r7, #22]
 80023ec:	4413      	add	r3, r2
 80023ee:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 80023f0:	7dbb      	ldrb	r3, [r7, #22]
 80023f2:	091b      	lsrs	r3, r3, #4
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	f043 0310 	orr.w	r3, r3, #16
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	4619      	mov	r1, r3
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f7ff fee6 	bl	80021d0 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8002404:	7dbb      	ldrb	r3, [r7, #22]
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	b2db      	uxtb	r3, r3
 800240c:	4619      	mov	r1, r3
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f7ff fede 	bl	80021d0 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	799b      	ldrb	r3, [r3, #6]
 8002418:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 800241c:	b2db      	uxtb	r3, r3
 800241e:	4619      	mov	r1, r3
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f7ff fed5 	bl	80021d0 <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	791b      	ldrb	r3, [r3, #4]
 800242a:	75fb      	strb	r3, [r7, #23]
      c *= 8;
 800242c:	7dfb      	ldrb	r3, [r7, #23]
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	613b      	str	r3, [r7, #16]
      /* 
	The following if condition checks the hardware limits of the st7565 
	controller: It is not allowed to write beyond the display limits.
	This is in fact an issue within flip mode.
      */
      if ( c + x > 132u )
 8002438:	7dfa      	ldrb	r2, [r7, #23]
 800243a:	7dbb      	ldrb	r3, [r7, #22]
 800243c:	4413      	add	r3, r2
 800243e:	2b84      	cmp	r3, #132	@ 0x84
 8002440:	d905      	bls.n	800244e <u8x8_d_st7565_common+0xa2>
      {
	c = 132u;
 8002442:	2384      	movs	r3, #132	@ 0x84
 8002444:	75fb      	strb	r3, [r7, #23]
	c -= x;
 8002446:	7dfa      	ldrb	r2, [r7, #23]
 8002448:	7dbb      	ldrb	r3, [r7, #22]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	75fb      	strb	r3, [r7, #23]
      }
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 800244e:	7dfb      	ldrb	r3, [r7, #23]
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4619      	mov	r1, r3
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f7ff fedf 	bl	8002218 <u8x8_cad_SendData>
	arg_int--;
 800245a:	7abb      	ldrb	r3, [r7, #10]
 800245c:	3b01      	subs	r3, #1
 800245e:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8002460:	7abb      	ldrb	r3, [r7, #10]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f3      	bne.n	800244e <u8x8_d_st7565_common+0xa2>
      
      u8x8_cad_EndTransfer(u8x8);
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f7ff fef9 	bl	800225e <u8x8_cad_EndTransfer>
      break;
 800246c:	e020      	b.n	80024b0 <u8x8_d_st7565_common+0x104>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 800246e:	7abb      	ldrb	r3, [r7, #10]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d104      	bne.n	800247e <u8x8_d_st7565_common+0xd2>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
 8002474:	4911      	ldr	r1, [pc, #68]	@ (80024bc <u8x8_d_st7565_common+0x110>)
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f7ff ff01 	bl	800227e <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
      break;
 800247c:	e018      	b.n	80024b0 <u8x8_d_st7565_common+0x104>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
 800247e:	4910      	ldr	r1, [pc, #64]	@ (80024c0 <u8x8_d_st7565_common+0x114>)
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f7ff fefc 	bl	800227e <u8x8_cad_SendSequence>
      break;
 8002486:	e013      	b.n	80024b0 <u8x8_d_st7565_common+0x104>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f7ff fed8 	bl	800223e <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800248e:	2181      	movs	r1, #129	@ 0x81
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f7ff fe9d 	bl	80021d0 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
 8002496:	7abb      	ldrb	r3, [r7, #10]
 8002498:	089b      	lsrs	r3, r3, #2
 800249a:	b2db      	uxtb	r3, r3
 800249c:	4619      	mov	r1, r3
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f7ff fea8 	bl	80021f4 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f7ff feda 	bl	800225e <u8x8_cad_EndTransfer>
      break;
 80024aa:	e001      	b.n	80024b0 <u8x8_d_st7565_common+0x104>
#endif
    default:
      return 0;
 80024ac:	2300      	movs	r3, #0
 80024ae:	e000      	b.n	80024b2 <u8x8_d_st7565_common+0x106>
  }
  return 1;
 80024b0:	2301      	movs	r3, #1
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	08009828 	.word	0x08009828
 80024c0:	08009830 	.word	0x08009830

080024c4 <u8x8_d_st7565_64128n>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_64128n(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	607b      	str	r3, [r7, #4]
 80024ce:	460b      	mov	r3, r1
 80024d0:	72fb      	strb	r3, [r7, #11]
 80024d2:	4613      	mov	r3, r2
 80024d4:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 80024d6:	7aba      	ldrb	r2, [r7, #10]
 80024d8:	7af9      	ldrb	r1, [r7, #11]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f7ff ff65 	bl	80023ac <u8x8_d_st7565_common>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d131      	bne.n	800254c <u8x8_d_st7565_64128n+0x88>
  {
    /* msg not handled, then try here */
    switch(msg)
 80024e8:	7afb      	ldrb	r3, [r7, #11]
 80024ea:	2b0d      	cmp	r3, #13
 80024ec:	d013      	beq.n	8002516 <u8x8_d_st7565_64128n+0x52>
 80024ee:	2b0d      	cmp	r3, #13
 80024f0:	dc2a      	bgt.n	8002548 <u8x8_d_st7565_64128n+0x84>
 80024f2:	2b09      	cmp	r3, #9
 80024f4:	d002      	beq.n	80024fc <u8x8_d_st7565_64128n+0x38>
 80024f6:	2b0a      	cmp	r3, #10
 80024f8:	d005      	beq.n	8002506 <u8x8_d_st7565_64128n+0x42>
 80024fa:	e025      	b.n	8002548 <u8x8_d_st7565_64128n+0x84>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_64128n_display_info);
 80024fc:	4916      	ldr	r1, [pc, #88]	@ (8002558 <u8x8_d_st7565_64128n+0x94>)
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 f832 	bl	8002568 <u8x8_d_helper_display_setup_memory>
	break;
 8002504:	e022      	b.n	800254c <u8x8_d_st7565_64128n+0x88>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 f842 	bl	8002590 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_64128n_init_seq);
 800250c:	4913      	ldr	r1, [pc, #76]	@ (800255c <u8x8_d_st7565_64128n+0x98>)
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f7ff feb5 	bl	800227e <u8x8_cad_SendSequence>
	break;
 8002514:	e01a      	b.n	800254c <u8x8_d_st7565_64128n+0x88>
      case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
	if ( arg_int == 0 )
 8002516:	7abb      	ldrb	r3, [r7, #10]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10a      	bne.n	8002532 <u8x8_d_st7565_64128n+0x6e>
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
 800251c:	4910      	ldr	r1, [pc, #64]	@ (8002560 <u8x8_d_st7565_64128n+0x9c>)
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f7ff fead 	bl	800227e <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	7c9a      	ldrb	r2, [r3, #18]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	else
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
	}	
	break;
 8002530:	e00c      	b.n	800254c <u8x8_d_st7565_64128n+0x88>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
 8002532:	490c      	ldr	r1, [pc, #48]	@ (8002564 <u8x8_d_st7565_64128n+0xa0>)
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f7ff fea2 	bl	800227e <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	7cda      	ldrb	r2, [r3, #19]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	break;
 8002546:	e001      	b.n	800254c <u8x8_d_st7565_64128n+0x88>
      default:
	return 0;		/* msg unknown */
 8002548:	2300      	movs	r3, #0
 800254a:	e000      	b.n	800254e <u8x8_d_st7565_64128n+0x8a>
    }
  }
  return 1;
 800254c:	2301      	movs	r3, #1
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	08009868 	.word	0x08009868
 800255c:	08009848 	.word	0x08009848
 8002560:	08009838 	.word	0x08009838
 8002564:	08009840 	.word	0x08009840

08002568 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	7c9a      	ldrb	r2, [r3, #18]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8002590:	b590      	push	{r4, r7, lr}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	695c      	ldr	r4, [r3, #20]
 800259c:	2300      	movs	r3, #0
 800259e:	2200      	movs	r2, #0
 80025a0:	2128      	movs	r1, #40	@ 0x28
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68dc      	ldr	r4, [r3, #12]
 80025aa:	2300      	movs	r3, #0
 80025ac:	2200      	movs	r2, #0
 80025ae:	2114      	movs	r1, #20
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80025b4:	2201      	movs	r2, #1
 80025b6:	214b      	movs	r1, #75	@ 0x4b
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 f897 	bl	80026ec <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	791b      	ldrb	r3, [r3, #4]
 80025c4:	461a      	mov	r2, r3
 80025c6:	2129      	movs	r1, #41	@ 0x29
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f88f 	bl	80026ec <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 80025ce:	2200      	movs	r2, #0
 80025d0:	214b      	movs	r1, #75	@ 0x4b
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f88a 	bl	80026ec <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	791b      	ldrb	r3, [r3, #4]
 80025de:	461a      	mov	r2, r3
 80025e0:	2129      	movs	r1, #41	@ 0x29
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f882 	bl	80026ec <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80025e8:	2201      	movs	r2, #1
 80025ea:	214b      	movs	r1, #75	@ 0x4b
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f87d 	bl	80026ec <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	795b      	ldrb	r3, [r3, #5]
 80025f8:	461a      	mov	r2, r3
 80025fa:	2129      	movs	r1, #41	@ 0x29
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f875 	bl	80026ec <u8x8_gpio_call>
}    
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	bd90      	pop	{r4, r7, pc}

0800260a <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 800260a:	b590      	push	{r4, r7, lr}
 800260c:	b085      	sub	sp, #20
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
 8002612:	4608      	mov	r0, r1
 8002614:	4611      	mov	r1, r2
 8002616:	461a      	mov	r2, r3
 8002618:	4603      	mov	r3, r0
 800261a:	70fb      	strb	r3, [r7, #3]
 800261c:	460b      	mov	r3, r1
 800261e:	70bb      	strb	r3, [r7, #2]
 8002620:	4613      	mov	r3, r2
 8002622:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8002624:	78fb      	ldrb	r3, [r7, #3]
 8002626:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8002628:	78bb      	ldrb	r3, [r7, #2]
 800262a:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 800262c:	787b      	ldrb	r3, [r7, #1]
 800262e:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8002630:	6a3b      	ldr	r3, [r7, #32]
 8002632:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689c      	ldr	r4, [r3, #8]
 8002638:	f107 0308 	add.w	r3, r7, #8
 800263c:	2201      	movs	r2, #1
 800263e:	210f      	movs	r1, #15
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	47a0      	blx	r4
 8002644:	4603      	mov	r3, r0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	bd90      	pop	{r4, r7, pc}

0800264e <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 800264e:	b590      	push	{r4, r7, lr}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689c      	ldr	r4, [r3, #8]
 800265a:	2300      	movs	r3, #0
 800265c:	2200      	movs	r2, #0
 800265e:	2109      	movs	r1, #9
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	47a0      	blx	r4
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	bd90      	pop	{r4, r7, pc}

0800266c <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 800266c:	b590      	push	{r4, r7, lr}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689c      	ldr	r4, [r3, #8]
 8002678:	2300      	movs	r3, #0
 800267a:	2200      	movs	r2, #0
 800267c:	210a      	movs	r1, #10
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	bd90      	pop	{r4, r7, pc}

0800268a <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800268a:	b590      	push	{r4, r7, lr}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
 8002692:	460b      	mov	r3, r1
 8002694:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689c      	ldr	r4, [r3, #8]
 800269a:	78fa      	ldrb	r2, [r7, #3]
 800269c:	2300      	movs	r3, #0
 800269e:	210b      	movs	r1, #11
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	47a0      	blx	r4
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd90      	pop	{r4, r7, pc}

080026ac <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 80026ac:	b590      	push	{r4, r7, lr}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	460b      	mov	r3, r1
 80026b6:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689c      	ldr	r4, [r3, #8]
 80026bc:	78fa      	ldrb	r2, [r7, #3]
 80026be:	2300      	movs	r3, #0
 80026c0:	210e      	movs	r1, #14
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	47a0      	blx	r4
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd90      	pop	{r4, r7, pc}

080026ce <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80026ce:	b590      	push	{r4, r7, lr}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689c      	ldr	r4, [r3, #8]
 80026da:	2300      	movs	r3, #0
 80026dc:	2200      	movs	r2, #0
 80026de:	2110      	movs	r1, #16
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	47a0      	blx	r4
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd90      	pop	{r4, r7, pc}

080026ec <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80026ec:	b590      	push	{r4, r7, lr}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	460b      	mov	r3, r1
 80026f6:	70fb      	strb	r3, [r7, #3]
 80026f8:	4613      	mov	r3, r2
 80026fa:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	695c      	ldr	r4, [r3, #20]
 8002700:	78ba      	ldrb	r2, [r7, #2]
 8002702:	78f9      	ldrb	r1, [r7, #3]
 8002704:	2300      	movs	r3, #0
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	47a0      	blx	r4
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	bd90      	pop	{r4, r7, pc}

08002712 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8002712:	b480      	push	{r7}
 8002714:	b085      	sub	sp, #20
 8002716:	af00      	add	r7, sp, #0
 8002718:	60f8      	str	r0, [r7, #12]
 800271a:	607b      	str	r3, [r7, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	72fb      	strb	r3, [r7, #11]
 8002720:	4613      	mov	r3, r2
 8002722:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
	...

08002734 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a11      	ldr	r2, [pc, #68]	@ (800278c <u8x8_SetupDefaults+0x58>)
 8002746:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a10      	ldr	r2, [pc, #64]	@ (800278c <u8x8_SetupDefaults+0x58>)
 800274c:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a0e      	ldr	r2, [pc, #56]	@ (800278c <u8x8_SetupDefaults+0x58>)
 8002752:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a0d      	ldr	r2, [pc, #52]	@ (800278c <u8x8_SetupDefaults+0x58>)
 8002758:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	22ff      	movs	r2, #255	@ 0xff
 8002774:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	22ff      	movs	r2, #255	@ 0xff
 800277c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	08002713 	.word	0x08002713

08002790 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
 800279c:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f7ff ffc8 	bl	8002734 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f7ff ff46 	bl	800264e <u8x8_SetupMemory>
}
 80027c2:	bf00      	nop
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <Expander_InitPinDirections>:
 * @param hi2c          Pointer to the I2C handle.
 * @param deviceAddress I2C address of the expander.
 * @return HAL_StatusTypeDef HAL_OK if successful, or an error code.
 */
HAL_StatusTypeDef Expander_InitPinDirections(I2C_HandleTypeDef *hi2c, uint8_t deviceAddress)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b088      	sub	sp, #32
 80027ce:	af04      	add	r7, sp, #16
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	460b      	mov	r3, r1
 80027d4:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef status;
    uint8_t port0_config = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	73bb      	strb	r3, [r7, #14]

    // Build Port 0 configuration mask using the defined direction macros:
    port0_config |= (ALERT_PIN_CELL_01_DIR == PIN_INPUT) ? ALERT_PIN_CELL_01 : 0;
 80027da:	7bbb      	ldrb	r3, [r7, #14]
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_VOLTAGE_01_DIR == PIN_INPUT) ? CELL_01_VOLTAGE_01 : 0;
 80027e4:	7bbb      	ldrb	r3, [r7, #14]
 80027e6:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_VOLTAGE_02_DIR == PIN_INPUT) ? CELL_01_VOLTAGE_02 : 0;
 80027e8:	7bbb      	ldrb	r3, [r7, #14]
 80027ea:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_VOLTAGE_03_DIR == PIN_INPUT) ? CELL_01_VOLTAGE_03 : 0;
 80027ec:	7bbb      	ldrb	r3, [r7, #14]
 80027ee:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_01_LED_01_DIR       == PIN_INPUT) ? CELL_01_LED_01       : 0;
 80027f0:	7bbb      	ldrb	r3, [r7, #14]
 80027f2:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_02_VOLTAGE_03_DIR == PIN_INPUT) ? CELL_02_VOLTAGE_03 : 0;
 80027f4:	7bbb      	ldrb	r3, [r7, #14]
 80027f6:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_02_VOLTAGE_02_DIR == PIN_INPUT) ? CELL_02_VOLTAGE_02 : 0;
 80027f8:	7bbb      	ldrb	r3, [r7, #14]
 80027fa:	73bb      	strb	r3, [r7, #14]
    port0_config |= (CELL_02_VOLTAGE_01_DIR == PIN_INPUT) ? CELL_02_VOLTAGE_01 : 0;
 80027fc:	7bbb      	ldrb	r3, [r7, #14]
 80027fe:	73bb      	strb	r3, [r7, #14]

    // For Port 1, use the corresponding direction macros if needed.
    // In this example, we build Port 1 configuration mask similarly:
    uint8_t port1_config = 0;
 8002800:	2300      	movs	r3, #0
 8002802:	737b      	strb	r3, [r7, #13]
    port1_config |= (ALERT_PIN_CELL_02_DIR   == PIN_INPUT) ? (1U << 0) : 0;
 8002804:	7b7b      	ldrb	r3, [r7, #13]
 8002806:	f043 0301 	orr.w	r3, r3, #1
 800280a:	b2db      	uxtb	r3, r3
 800280c:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_02_LED_01_DIR      == PIN_INPUT) ? (1U << 1) : 0;
 800280e:	7b7b      	ldrb	r3, [r7, #13]
 8002810:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_LED_01_DIR      == PIN_INPUT) ? (1U << 2) : 0;
 8002812:	7b7b      	ldrb	r3, [r7, #13]
 8002814:	737b      	strb	r3, [r7, #13]
    port1_config |= (EXPANDER_FAN_CTRL_DIR   == PIN_INPUT) ? (1U << 3) : 0;
 8002816:	7b7b      	ldrb	r3, [r7, #13]
 8002818:	f043 0308 	orr.w	r3, r3, #8
 800281c:	b2db      	uxtb	r3, r3
 800281e:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_VOLTAGE_03_DIR  == PIN_INPUT) ? (1U << 4) : 0;
 8002820:	7b7b      	ldrb	r3, [r7, #13]
 8002822:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_VOLTAGE_02_DIR  == PIN_INPUT) ? (1U << 5) : 0;
 8002824:	7b7b      	ldrb	r3, [r7, #13]
 8002826:	737b      	strb	r3, [r7, #13]
    port1_config |= (CELL_03_VOLTAGE_01_DIR  == PIN_INPUT) ? (1U << 6) : 0;
 8002828:	7b7b      	ldrb	r3, [r7, #13]
 800282a:	737b      	strb	r3, [r7, #13]
    port1_config |= (ALERT_PIN_CELL_03_DIR   == PIN_INPUT) ? (1U << 7) : 0;
 800282c:	7b7b      	ldrb	r3, [r7, #13]
 800282e:	737b      	strb	r3, [r7, #13]

    // Write configuration to Port 0 register.
    status = HAL_I2C_Mem_Write(hi2c,
 8002830:	78fb      	ldrb	r3, [r7, #3]
 8002832:	b29b      	uxth	r3, r3
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	b299      	uxth	r1, r3
 8002838:	2364      	movs	r3, #100	@ 0x64
 800283a:	9302      	str	r3, [sp, #8]
 800283c:	2301      	movs	r3, #1
 800283e:	9301      	str	r3, [sp, #4]
 8002840:	f107 030e 	add.w	r3, r7, #14
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	2301      	movs	r3, #1
 8002848:	2206      	movs	r2, #6
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f003 f9f4 	bl	8005c38 <HAL_I2C_Mem_Write>
 8002850:	4603      	mov	r3, r0
 8002852:	73fb      	strb	r3, [r7, #15]
                               PCA9535_REG_CONFIG_PORT0,
                               I2C_MEMADD_SIZE_8BIT,
                               &port0_config,
                               1,
                               EXPANDER_I2C_TIMEOUT);
    if (status != HAL_OK)
 8002854:	7bfb      	ldrb	r3, [r7, #15]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <Expander_InitPinDirections+0x94>
    {
        return status;
 800285a:	7bfb      	ldrb	r3, [r7, #15]
 800285c:	e012      	b.n	8002884 <Expander_InitPinDirections+0xba>
    }

    // Write configuration to Port 1 register.
    status = HAL_I2C_Mem_Write(hi2c,
 800285e:	78fb      	ldrb	r3, [r7, #3]
 8002860:	b29b      	uxth	r3, r3
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	b299      	uxth	r1, r3
 8002866:	2364      	movs	r3, #100	@ 0x64
 8002868:	9302      	str	r3, [sp, #8]
 800286a:	2301      	movs	r3, #1
 800286c:	9301      	str	r3, [sp, #4]
 800286e:	f107 030d 	add.w	r3, r7, #13
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	2301      	movs	r3, #1
 8002876:	2207      	movs	r2, #7
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f003 f9dd 	bl	8005c38 <HAL_I2C_Mem_Write>
 800287e:	4603      	mov	r3, r0
 8002880:	73fb      	strb	r3, [r7, #15]
                               PCA9535_REG_CONFIG_PORT1,
                               I2C_MEMADD_SIZE_8BIT,
                               &port1_config,
                               1,
                               EXPANDER_I2C_TIMEOUT);
    return status;
 8002882:	7bfb      	ldrb	r3, [r7, #15]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <Expander_SetPinState>:
 */
HAL_StatusTypeDef Expander_SetPinState(I2C_HandleTypeDef *hi2c,
                                       uint8_t deviceAddress,
                                       uint16_t pin,
                                       uint8_t state)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b088      	sub	sp, #32
 8002890:	af04      	add	r7, sp, #16
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	4608      	mov	r0, r1
 8002896:	4611      	mov	r1, r2
 8002898:	461a      	mov	r2, r3
 800289a:	4603      	mov	r3, r0
 800289c:	70fb      	strb	r3, [r7, #3]
 800289e:	460b      	mov	r3, r1
 80028a0:	803b      	strh	r3, [r7, #0]
 80028a2:	4613      	mov	r3, r2
 80028a4:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef status;
    uint8_t regAddress;
    uint8_t currentOutput;

    // Determine which port the pin belongs to.
    if ((pin & 0xFF00) == 0)
 80028a6:	883b      	ldrh	r3, [r7, #0]
 80028a8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d142      	bne.n	8002936 <Expander_SetPinState+0xaa>
    {
        // Pin belongs to Port 0.
        regAddress = PCA9535_REG_OUTPUT_PORT0;
 80028b0:	2302      	movs	r3, #2
 80028b2:	73fb      	strb	r3, [r7, #15]
        status = HAL_I2C_Mem_Read(hi2c,
 80028b4:	78fb      	ldrb	r3, [r7, #3]
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	b299      	uxth	r1, r3
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	b29a      	uxth	r2, r3
 80028c0:	2364      	movs	r3, #100	@ 0x64
 80028c2:	9302      	str	r3, [sp, #8]
 80028c4:	2301      	movs	r3, #1
 80028c6:	9301      	str	r3, [sp, #4]
 80028c8:	f107 030c 	add.w	r3, r7, #12
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	2301      	movs	r3, #1
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f003 faab 	bl	8005e2c <HAL_I2C_Mem_Read>
 80028d6:	4603      	mov	r3, r0
 80028d8:	73bb      	strb	r3, [r7, #14]
                                  regAddress,
                                  I2C_MEMADD_SIZE_8BIT,
                                  &currentOutput,
                                  1,
                                  EXPANDER_I2C_TIMEOUT);
        if (status != HAL_OK) {
 80028da:	7bbb      	ldrb	r3, [r7, #14]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <Expander_SetPinState+0x58>
            return status;
 80028e0:	7bbb      	ldrb	r3, [r7, #14]
 80028e2:	e073      	b.n	80029cc <Expander_SetPinState+0x140>
        }
        if (state == HIGH) {
 80028e4:	78bb      	ldrb	r3, [r7, #2]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d106      	bne.n	80028f8 <Expander_SetPinState+0x6c>
            currentOutput |= (uint8_t)pin;
 80028ea:	883b      	ldrh	r3, [r7, #0]
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	7b3b      	ldrb	r3, [r7, #12]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	733b      	strb	r3, [r7, #12]
 80028f6:	e009      	b.n	800290c <Expander_SetPinState+0x80>
        } else {
            currentOutput &= ~(uint8_t)pin;
 80028f8:	883b      	ldrh	r3, [r7, #0]
 80028fa:	b25b      	sxtb	r3, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	b25a      	sxtb	r2, r3
 8002900:	7b3b      	ldrb	r3, [r7, #12]
 8002902:	b25b      	sxtb	r3, r3
 8002904:	4013      	ands	r3, r2
 8002906:	b25b      	sxtb	r3, r3
 8002908:	b2db      	uxtb	r3, r3
 800290a:	733b      	strb	r3, [r7, #12]
        }
        status = HAL_I2C_Mem_Write(hi2c,
 800290c:	78fb      	ldrb	r3, [r7, #3]
 800290e:	b29b      	uxth	r3, r3
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	b299      	uxth	r1, r3
 8002914:	7bfb      	ldrb	r3, [r7, #15]
 8002916:	b29a      	uxth	r2, r3
 8002918:	2364      	movs	r3, #100	@ 0x64
 800291a:	9302      	str	r3, [sp, #8]
 800291c:	2301      	movs	r3, #1
 800291e:	9301      	str	r3, [sp, #4]
 8002920:	f107 030c 	add.w	r3, r7, #12
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	2301      	movs	r3, #1
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f003 f985 	bl	8005c38 <HAL_I2C_Mem_Write>
 800292e:	4603      	mov	r3, r0
 8002930:	73bb      	strb	r3, [r7, #14]
                                   regAddress,
                                   I2C_MEMADD_SIZE_8BIT,
                                   &currentOutput,
                                   1,
                                   EXPANDER_I2C_TIMEOUT);
        return status;
 8002932:	7bbb      	ldrb	r3, [r7, #14]
 8002934:	e04a      	b.n	80029cc <Expander_SetPinState+0x140>
    }
    else if ((pin & 0x00FF) == 0)
 8002936:	883b      	ldrh	r3, [r7, #0]
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d145      	bne.n	80029ca <Expander_SetPinState+0x13e>
    {
        // Pin belongs to Port 1.
        regAddress = PCA9535_REG_OUTPUT_PORT1;
 800293e:	2303      	movs	r3, #3
 8002940:	73fb      	strb	r3, [r7, #15]
        status = HAL_I2C_Mem_Read(hi2c,
 8002942:	78fb      	ldrb	r3, [r7, #3]
 8002944:	b29b      	uxth	r3, r3
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	b299      	uxth	r1, r3
 800294a:	7bfb      	ldrb	r3, [r7, #15]
 800294c:	b29a      	uxth	r2, r3
 800294e:	2364      	movs	r3, #100	@ 0x64
 8002950:	9302      	str	r3, [sp, #8]
 8002952:	2301      	movs	r3, #1
 8002954:	9301      	str	r3, [sp, #4]
 8002956:	f107 030c 	add.w	r3, r7, #12
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	2301      	movs	r3, #1
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f003 fa64 	bl	8005e2c <HAL_I2C_Mem_Read>
 8002964:	4603      	mov	r3, r0
 8002966:	73bb      	strb	r3, [r7, #14]
                                  regAddress,
                                  I2C_MEMADD_SIZE_8BIT,
                                  &currentOutput,
                                  1,
                                  EXPANDER_I2C_TIMEOUT);
        if (status != HAL_OK) {
 8002968:	7bbb      	ldrb	r3, [r7, #14]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <Expander_SetPinState+0xe6>
            return status;
 800296e:	7bbb      	ldrb	r3, [r7, #14]
 8002970:	e02c      	b.n	80029cc <Expander_SetPinState+0x140>
        }
        uint8_t pin_mask = (uint8_t)(pin >> 8);
 8002972:	883b      	ldrh	r3, [r7, #0]
 8002974:	0a1b      	lsrs	r3, r3, #8
 8002976:	b29b      	uxth	r3, r3
 8002978:	737b      	strb	r3, [r7, #13]
        if (state == HIGH) {
 800297a:	78bb      	ldrb	r3, [r7, #2]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d105      	bne.n	800298c <Expander_SetPinState+0x100>
            currentOutput |= pin_mask;
 8002980:	7b3a      	ldrb	r2, [r7, #12]
 8002982:	7b7b      	ldrb	r3, [r7, #13]
 8002984:	4313      	orrs	r3, r2
 8002986:	b2db      	uxtb	r3, r3
 8002988:	733b      	strb	r3, [r7, #12]
 800298a:	e009      	b.n	80029a0 <Expander_SetPinState+0x114>
        } else {
            currentOutput &= ~pin_mask;
 800298c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002990:	43db      	mvns	r3, r3
 8002992:	b25a      	sxtb	r2, r3
 8002994:	7b3b      	ldrb	r3, [r7, #12]
 8002996:	b25b      	sxtb	r3, r3
 8002998:	4013      	ands	r3, r2
 800299a:	b25b      	sxtb	r3, r3
 800299c:	b2db      	uxtb	r3, r3
 800299e:	733b      	strb	r3, [r7, #12]
        }
        status = HAL_I2C_Mem_Write(hi2c,
 80029a0:	78fb      	ldrb	r3, [r7, #3]
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	b299      	uxth	r1, r3
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	2364      	movs	r3, #100	@ 0x64
 80029ae:	9302      	str	r3, [sp, #8]
 80029b0:	2301      	movs	r3, #1
 80029b2:	9301      	str	r3, [sp, #4]
 80029b4:	f107 030c 	add.w	r3, r7, #12
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	2301      	movs	r3, #1
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f003 f93b 	bl	8005c38 <HAL_I2C_Mem_Write>
 80029c2:	4603      	mov	r3, r0
 80029c4:	73bb      	strb	r3, [r7, #14]
                                   regAddress,
                                   I2C_MEMADD_SIZE_8BIT,
                                   &currentOutput,
                                   1,
                                   EXPANDER_I2C_TIMEOUT);
        return status;
 80029c6:	7bbb      	ldrb	r3, [r7, #14]
 80029c8:	e000      	b.n	80029cc <Expander_SetPinState+0x140>
    }
    else {
        // Invalid pin mask.
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
    }
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <Expander_InitAllDevices>:
 *
 * @param hi2c Pointer to the I2C handle.
 * @return HAL_StatusTypeDef HAL_OK if all devices are initialized successfully, or an error code.
 */
HAL_StatusTypeDef Expander_InitAllDevices(I2C_HandleTypeDef *hi2c)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;

    // List of expander addresses.
    uint8_t addresses[] = {
 80029dc:	4b11      	ldr	r3, [pc, #68]	@ (8002a24 <Expander_InitAllDevices+0x50>)
 80029de:	60bb      	str	r3, [r7, #8]
        GPIO_EXPANDER_ID_02,
        GPIO_EXPANDER_ID_03,
        GPIO_EXPANDER_ID_04
    };

    size_t count = sizeof(addresses) / sizeof(addresses[0]);
 80029e0:	2304      	movs	r3, #4
 80029e2:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < count; i++)
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	e012      	b.n	8002a10 <Expander_InitAllDevices+0x3c>
    {
        status = Expander_InitPinDirections(hi2c, addresses[i]);
 80029ea:	f107 0208 	add.w	r2, r7, #8
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	4413      	add	r3, r2
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	4619      	mov	r1, r3
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7ff fee7 	bl	80027ca <Expander_InitPinDirections>
 80029fc:	4603      	mov	r3, r0
 80029fe:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <Expander_InitAllDevices+0x36>
        {
            return status;
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
 8002a08:	e007      	b.n	8002a1a <Expander_InitAllDevices+0x46>
    for (size_t i = 0; i < count; i++)
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d3e8      	bcc.n	80029ea <Expander_InitAllDevices+0x16>
        }
    }
    return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3718      	adds	r7, #24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	24232221 	.word	0x24232221

08002a28 <mcu_spiInit>:



/********* MCU SPECIFIC SPI CODE STARTS HERE **********/
void mcu_spiInit(uint8_t busId)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	71fb      	strb	r3, [r7, #7]
    /* Add MCU specific init necessary for I2C to be used */




}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <LTC6811_init_reg_limits>:

/* Initialize the Register limits */
void LTC6811_init_reg_limits(uint8_t total_ic, //The number of ICs in the system
        cell_asic *ic  //A two dimensional array where data will be written
        )
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b085      	sub	sp, #20
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	4603      	mov	r3, r0
 8002a46:	6039      	str	r1, [r7, #0]
 8002a48:	71fb      	strb	r3, [r7, #7]
    uint8_t cic;
    for (cic = 0; cic < total_ic; cic++)
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	73fb      	strb	r3, [r7, #15]
 8002a4e:	e044      	b.n	8002ada <LTC6811_init_reg_limits+0x9c>
    {
        ic[cic].ic_reg.cell_channels = 12;
 8002a50:	7bfa      	ldrb	r2, [r7, #15]
 8002a52:	4613      	mov	r3, r2
 8002a54:	019b      	lsls	r3, r3, #6
 8002a56:	4413      	add	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	4413      	add	r3, r2
 8002a60:	220c      	movs	r2, #12
 8002a62:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
        ic[cic].ic_reg.stat_channels = 4;
 8002a66:	7bfa      	ldrb	r2, [r7, #15]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	019b      	lsls	r3, r3, #6
 8002a6c:	4413      	add	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	461a      	mov	r2, r3
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	4413      	add	r3, r2
 8002a76:	2204      	movs	r2, #4
 8002a78:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
        ic[cic].ic_reg.aux_channels = 6;
 8002a7c:	7bfa      	ldrb	r2, [r7, #15]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	019b      	lsls	r3, r3, #6
 8002a82:	4413      	add	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	461a      	mov	r2, r3
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	2206      	movs	r2, #6
 8002a8e:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
        ic[cic].ic_reg.num_cv_reg = 4;
 8002a92:	7bfa      	ldrb	r2, [r7, #15]
 8002a94:	4613      	mov	r3, r2
 8002a96:	019b      	lsls	r3, r3, #6
 8002a98:	4413      	add	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	2204      	movs	r2, #4
 8002aa4:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
        ic[cic].ic_reg.num_gpio_reg = 2;
 8002aa8:	7bfa      	ldrb	r2, [r7, #15]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	019b      	lsls	r3, r3, #6
 8002aae:	4413      	add	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	2202      	movs	r2, #2
 8002aba:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
        ic[cic].ic_reg.num_stat_reg = 3;
 8002abe:	7bfa      	ldrb	r2, [r7, #15]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	019b      	lsls	r3, r3, #6
 8002ac4:	4413      	add	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	461a      	mov	r2, r3
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	4413      	add	r3, r2
 8002ace:	2203      	movs	r2, #3
 8002ad0:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
    for (cic = 0; cic < total_ic; cic++)
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	73fb      	strb	r3, [r7, #15]
 8002ada:	7bfa      	ldrb	r2, [r7, #15]
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d3b6      	bcc.n	8002a50 <LTC6811_init_reg_limits+0x12>
    }
}
 8002ae2:	bf00      	nop
 8002ae4:	bf00      	nop
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <LTC6811_wrcfg>:
 order so the last device's configuration is written first.
 */
void LTC6811_wrcfg(uint8_t total_ic, //The number of ICs being written to
        cell_asic *ic //A two dimensional array of the configuration data that will be written
        )
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	6039      	str	r1, [r7, #0]
 8002afa:	71fb      	strb	r3, [r7, #7]
    LTC681x_wrcfg(total_ic, ic);
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	6839      	ldr	r1, [r7, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 f8ff 	bl	8002d04 <LTC681x_wrcfg>
}
 8002b06:	bf00      	nop
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <LTC6811_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC6811_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that will store the data
        )
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b082      	sub	sp, #8
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	4603      	mov	r3, r0
 8002b16:	6039      	str	r1, [r7, #0]
 8002b18:	71fb      	strb	r3, [r7, #7]
    LTC681x_reset_crc_count(total_ic, ic);
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	6839      	ldr	r1, [r7, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 f96e 	bl	8002e00 <LTC681x_reset_crc_count>
}
 8002b24:	bf00      	nop
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <LTC6811_init_cfg>:

/* Helper function to initialize CFG variables.*/
void LTC6811_init_cfg(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that will store the data
        )
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	6039      	str	r1, [r7, #0]
 8002b36:	71fb      	strb	r3, [r7, #7]
    LTC681x_init_cfg(total_ic, ic);
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	6839      	ldr	r1, [r7, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f000 f9d1 	bl	8002ee4 <LTC681x_init_cfg>
}
 8002b42:	bf00      	nop
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <LTC6811_set_cfgr>:
        bool dcc[12], // The DCC bit
        bool dcto[4], // The Dcto bit
        uint16_t uv, // The UV bit
        uint16_t ov // The OV bit
        )
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b088      	sub	sp, #32
 8002b4e:	af06      	add	r7, sp, #24
 8002b50:	6039      	str	r1, [r7, #0]
 8002b52:	4611      	mov	r1, r2
 8002b54:	461a      	mov	r2, r3
 8002b56:	4603      	mov	r3, r0
 8002b58:	71fb      	strb	r3, [r7, #7]
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	71bb      	strb	r3, [r7, #6]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	717b      	strb	r3, [r7, #5]
    LTC681x_set_cfgr(nIC, ic, refon, adcopt, gpio, dcc, dcto, uv, ov);
 8002b62:	7979      	ldrb	r1, [r7, #5]
 8002b64:	79ba      	ldrb	r2, [r7, #6]
 8002b66:	79f8      	ldrb	r0, [r7, #7]
 8002b68:	8c3b      	ldrh	r3, [r7, #32]
 8002b6a:	9304      	str	r3, [sp, #16]
 8002b6c:	8bbb      	ldrh	r3, [r7, #28]
 8002b6e:	9303      	str	r3, [sp, #12]
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	9302      	str	r3, [sp, #8]
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	9301      	str	r3, [sp, #4]
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	6839      	ldr	r1, [r7, #0]
 8002b80:	f000 f9e6 	bl	8002f50 <LTC681x_set_cfgr>
}
 8002b84:	bf00      	nop
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <write_68>:
 */
void write_68(uint8_t total_ic, //Number of ICs to be written to
        uint8_t tx_cmd[2], //The command to be transmitted
        uint8_t data[] // Payload Data
        )
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
 8002b98:	73fb      	strb	r3, [r7, #15]
    const uint8_t BYTES_IN_REG = 6;
 8002b9a:	2306      	movs	r3, #6
 8002b9c:	773b      	strb	r3, [r7, #28]
    const uint8_t CMD_LEN = 4 + (8 * total_ic);
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	76fb      	strb	r3, [r7, #27]
    uint16_t data_pec;
    uint16_t cmd_pec;
    uint8_t cmd_index;
    uint8_t *cmd;

    cmd = (uint8_t *) malloc(CMD_LEN * sizeof(uint8_t));
 8002ba8:	7efb      	ldrb	r3, [r7, #27]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f005 fe86 	bl	80088bc <malloc>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	617b      	str	r3, [r7, #20]
    cmd[0] = tx_cmd[0];
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	781a      	ldrb	r2, [r3, #0]
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	701a      	strb	r2, [r3, #0]
    cmd[1] = tx_cmd[1];
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	7852      	ldrb	r2, [r2, #1]
 8002bc4:	701a      	strb	r2, [r3, #0]
    cmd_pec = pec15_calc(2, cmd);
 8002bc6:	6979      	ldr	r1, [r7, #20]
 8002bc8:	2002      	movs	r0, #2
 8002bca:	f000 f869 	bl	8002ca0 <pec15_calc>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	827b      	strh	r3, [r7, #18]
    cmd[2] = (uint8_t) (cmd_pec >> 8);
 8002bd2:	8a7b      	ldrh	r3, [r7, #18]
 8002bd4:	0a1b      	lsrs	r3, r3, #8
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	3302      	adds	r3, #2
 8002bdc:	b2d2      	uxtb	r2, r2
 8002bde:	701a      	strb	r2, [r3, #0]
    cmd[3] = (uint8_t) (cmd_pec);
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	3303      	adds	r3, #3
 8002be4:	8a7a      	ldrh	r2, [r7, #18]
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	701a      	strb	r2, [r3, #0]

    cmd_index = 4;
 8002bea:	2304      	movs	r3, #4
 8002bec:	77fb      	strb	r3, [r7, #31]
    uint8_t current_ic;
    uint8_t current_byte;
    for (current_ic = total_ic; current_ic > 0; current_ic--) // Executes for each LTC681x, this loops starts with the last IC on the stack.
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
 8002bf0:	77bb      	strb	r3, [r7, #30]
 8002bf2:	e042      	b.n	8002c7a <write_68+0xee>
    { //The first configuration written is received by the last IC in the daisy chain
        for (current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	777b      	strb	r3, [r7, #29]
 8002bf8:	e016      	b.n	8002c28 <write_68+0x9c>
        {
            cmd[cmd_index] = data[((current_ic - 1) * 6) + current_byte];
 8002bfa:	7fbb      	ldrb	r3, [r7, #30]
 8002bfc:	1e5a      	subs	r2, r3, #1
 8002bfe:	4613      	mov	r3, r2
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	4413      	add	r3, r2
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	461a      	mov	r2, r3
 8002c08:	7f7b      	ldrb	r3, [r7, #29]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	441a      	add	r2, r3
 8002c12:	7ffb      	ldrb	r3, [r7, #31]
 8002c14:	6979      	ldr	r1, [r7, #20]
 8002c16:	440b      	add	r3, r1
 8002c18:	7812      	ldrb	r2, [r2, #0]
 8002c1a:	701a      	strb	r2, [r3, #0]
            cmd_index = cmd_index + 1;
 8002c1c:	7ffb      	ldrb	r3, [r7, #31]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	77fb      	strb	r3, [r7, #31]
        for (current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8002c22:	7f7b      	ldrb	r3, [r7, #29]
 8002c24:	3301      	adds	r3, #1
 8002c26:	777b      	strb	r3, [r7, #29]
 8002c28:	7f7a      	ldrb	r2, [r7, #29]
 8002c2a:	7f3b      	ldrb	r3, [r7, #28]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d3e4      	bcc.n	8002bfa <write_68+0x6e>
        }

        data_pec = (uint16_t) pec15_calc(BYTES_IN_REG,
                                         &data[(current_ic - 1) * 6]); // Calculating the PEC for each ICs configuration register data
 8002c30:	7fbb      	ldrb	r3, [r7, #30]
 8002c32:	1e5a      	subs	r2, r3, #1
 8002c34:	4613      	mov	r3, r2
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	4413      	add	r3, r2
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	461a      	mov	r2, r3
        data_pec = (uint16_t) pec15_calc(BYTES_IN_REG,
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	441a      	add	r2, r3
 8002c42:	7f3b      	ldrb	r3, [r7, #28]
 8002c44:	4611      	mov	r1, r2
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 f82a 	bl	8002ca0 <pec15_calc>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	823b      	strh	r3, [r7, #16]
        cmd[cmd_index] = (uint8_t) (data_pec >> 8);
 8002c50:	8a3b      	ldrh	r3, [r7, #16]
 8002c52:	0a1b      	lsrs	r3, r3, #8
 8002c54:	b299      	uxth	r1, r3
 8002c56:	7ffb      	ldrb	r3, [r7, #31]
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	b2ca      	uxtb	r2, r1
 8002c5e:	701a      	strb	r2, [r3, #0]
        cmd[cmd_index + 1] = (uint8_t) data_pec;
 8002c60:	7ffb      	ldrb	r3, [r7, #31]
 8002c62:	3301      	adds	r3, #1
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	4413      	add	r3, r2
 8002c68:	8a3a      	ldrh	r2, [r7, #16]
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	701a      	strb	r2, [r3, #0]
        cmd_index = cmd_index + 2;
 8002c6e:	7ffb      	ldrb	r3, [r7, #31]
 8002c70:	3302      	adds	r3, #2
 8002c72:	77fb      	strb	r3, [r7, #31]
    for (current_ic = total_ic; current_ic > 0; current_ic--) // Executes for each LTC681x, this loops starts with the last IC on the stack.
 8002c74:	7fbb      	ldrb	r3, [r7, #30]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	77bb      	strb	r3, [r7, #30]
 8002c7a:	7fbb      	ldrb	r3, [r7, #30]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1b9      	bne.n	8002bf4 <write_68+0x68>
    }

    cs_low();
 8002c80:	f000 fca4 	bl	80035cc <cs_low>
    spi_write_array(CMD_LEN, cmd);
 8002c84:	7efb      	ldrb	r3, [r7, #27]
 8002c86:	6979      	ldr	r1, [r7, #20]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f000 fcc7 	bl	800361c <spi_write_array>
    cs_high();
 8002c8e:	f000 fcb1 	bl	80035f4 <cs_high>

    free(cmd);
 8002c92:	6978      	ldr	r0, [r7, #20]
 8002c94:	f005 fe1a 	bl	80088cc <free>
}
 8002c98:	bf00      	nop
 8002c9a:	3720      	adds	r7, #32
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <pec15_calc>:
 */
/* Calculates  and returns the CRC15 */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
        uint8_t *data //Array of data that will be used to calculate  a PEC
        )
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	6039      	str	r1, [r7, #0]
 8002caa:	71fb      	strb	r3, [r7, #7]
    uint16_t remainder, addr;
    remainder = 16; //initialize the PEC
 8002cac:	2310      	movs	r3, #16
 8002cae:	81fb      	strh	r3, [r7, #14]
    uint8_t i;

    for (i = 0; i < len; i++) // loops for each byte in data array
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	737b      	strb	r3, [r7, #13]
 8002cb4:	e017      	b.n	8002ce6 <pec15_calc+0x46>
    {
        addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 8002cb6:	89fb      	ldrh	r3, [r7, #14]
 8002cb8:	09db      	lsrs	r3, r3, #7
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	7b7a      	ldrb	r2, [r7, #13]
 8002cbe:	6839      	ldr	r1, [r7, #0]
 8002cc0:	440a      	add	r2, r1
 8002cc2:	7812      	ldrb	r2, [r2, #0]
 8002cc4:	4053      	eors	r3, r2
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	817b      	strh	r3, [r7, #10]
        remainder = (remainder << 8) ^ crc15Table[addr];
 8002ccc:	89fb      	ldrh	r3, [r7, #14]
 8002cce:	021b      	lsls	r3, r3, #8
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	897b      	ldrh	r3, [r7, #10]
 8002cd4:	490a      	ldr	r1, [pc, #40]	@ (8002d00 <pec15_calc+0x60>)
 8002cd6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	4053      	eors	r3, r2
 8002cde:	81fb      	strh	r3, [r7, #14]
    for (i = 0; i < len; i++) // loops for each byte in data array
 8002ce0:	7b7b      	ldrb	r3, [r7, #13]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	737b      	strb	r3, [r7, #13]
 8002ce6:	7b7a      	ldrb	r2, [r7, #13]
 8002ce8:	79fb      	ldrb	r3, [r7, #7]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d3e3      	bcc.n	8002cb6 <pec15_calc+0x16>
    }
    return (remainder * 2); //The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8002cee:	89fb      	ldrh	r3, [r7, #14]
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	b29b      	uxth	r3, r3
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	08009880 	.word	0x08009880

08002d04 <LTC681x_wrcfg>:

/* Write the LTC681x CFGRA */
void LTC681x_wrcfg(uint8_t total_ic, //The number of ICs being written to
        cell_asic ic[] // A two dimensional array of the configuration data that will be written
        )
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b0c4      	sub	sp, #272	@ 0x110
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d10:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002d14:	6019      	str	r1, [r3, #0]
 8002d16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d1a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002d1e:	701a      	strb	r2, [r3, #0]
    uint8_t cmd[2] = { 0x00, 0x01 };
 8002d20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d24:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
    uint8_t write_buffer[256];
    uint8_t write_count = 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
    uint8_t c_ic = 0;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
    uint8_t current_ic;
    uint8_t data;

    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8002d34:	2300      	movs	r3, #0
 8002d36:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 8002d3a:	e047      	b.n	8002dcc <LTC681x_wrcfg+0xc8>
    {
        if (ic->isospi_reverse == false)
 8002d3c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d40:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d104      	bne.n	8002d58 <LTC681x_wrcfg+0x54>
        {
            c_ic = current_ic;
 8002d4e:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8002d52:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 8002d56:	e00b      	b.n	8002d70 <LTC681x_wrcfg+0x6c>
        }
        else
        {
            c_ic = total_ic - current_ic - 1;
 8002d58:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d5c:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002d60:	781a      	ldrb	r2, [r3, #0]
 8002d62:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
        }

        for (data = 0; data < 6; data++)
 8002d70:	2300      	movs	r3, #0
 8002d72:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 8002d76:	e020      	b.n	8002dba <LTC681x_wrcfg+0xb6>
        {
            write_buffer[write_count] = ic[c_ic].config.tx_data[data];
 8002d78:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	019b      	lsls	r3, r3, #6
 8002d80:	4413      	add	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	461a      	mov	r2, r3
 8002d86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d8a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	1899      	adds	r1, r3, r2
 8002d92:	f897 210c 	ldrb.w	r2, [r7, #268]	@ 0x10c
 8002d96:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002d9a:	5c89      	ldrb	r1, [r1, r2]
 8002d9c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002da0:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8002da4:	54d1      	strb	r1, [r2, r3]
            write_count++;
 8002da6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002daa:	3301      	adds	r3, #1
 8002dac:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        for (data = 0; data < 6; data++)
 8002db0:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8002db4:	3301      	adds	r3, #1
 8002db6:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 8002dba:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8002dbe:	2b05      	cmp	r3, #5
 8002dc0:	d9da      	bls.n	8002d78 <LTC681x_wrcfg+0x74>
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8002dc2:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 8002dcc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002dd0:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002dd4:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d3ae      	bcc.n	8002d3c <LTC681x_wrcfg+0x38>
        }
    }
    write_68(total_ic, cmd, write_buffer);
 8002dde:	f107 0208 	add.w	r2, r7, #8
 8002de2:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8002de6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002dea:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff fecb 	bl	8002b8c <write_68>
}
 8002df6:	bf00      	nop
 8002df8:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <LTC681x_reset_crc_count>:

/* Helper Function to reset PEC counters */
void LTC681x_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that stores the data
        )
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	6039      	str	r1, [r7, #0]
 8002e0a:	71fb      	strb	r3, [r7, #7]
    int i, current_ic;
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60bb      	str	r3, [r7, #8]
 8002e10:	e05d      	b.n	8002ece <LTC681x_reset_crc_count+0xce>
    {
        ic[current_ic].crc_count.pec_count = 0;
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	4613      	mov	r3, r2
 8002e16:	019b      	lsls	r3, r3, #6
 8002e18:	4413      	add	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	4413      	add	r3, r2
 8002e22:	2200      	movs	r2, #0
 8002e24:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
        ic[current_ic].crc_count.cfgr_pec = 0;
 8002e28:	68ba      	ldr	r2, [r7, #8]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	019b      	lsls	r3, r3, #6
 8002e2e:	4413      	add	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	461a      	mov	r2, r3
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	4413      	add	r3, r2
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
        for (i = 0; i < 6; i++)
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	e010      	b.n	8002e66 <LTC681x_reset_crc_count+0x66>
        {
            ic[current_ic].crc_count.cell_pec[i] = 0;
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	4613      	mov	r3, r2
 8002e48:	019b      	lsls	r3, r3, #6
 8002e4a:	4413      	add	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	461a      	mov	r2, r3
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	441a      	add	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	3360      	adds	r3, #96	@ 0x60
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	4413      	add	r3, r2
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	815a      	strh	r2, [r3, #10]
        for (i = 0; i < 6; i++)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	3301      	adds	r3, #1
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2b05      	cmp	r3, #5
 8002e6a:	ddeb      	ble.n	8002e44 <LTC681x_reset_crc_count+0x44>
        }
        for (i = 0; i < 4; i++)
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	e010      	b.n	8002e94 <LTC681x_reset_crc_count+0x94>
        {
            ic[current_ic].crc_count.aux_pec[i] = 0;
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	4613      	mov	r3, r2
 8002e76:	019b      	lsls	r3, r3, #6
 8002e78:	4413      	add	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	441a      	add	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	3368      	adds	r3, #104	@ 0x68
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	4413      	add	r3, r2
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	80da      	strh	r2, [r3, #6]
        for (i = 0; i < 4; i++)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	3301      	adds	r3, #1
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2b03      	cmp	r3, #3
 8002e98:	ddeb      	ble.n	8002e72 <LTC681x_reset_crc_count+0x72>
        }
        for (i = 0; i < 2; i++)
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	e010      	b.n	8002ec2 <LTC681x_reset_crc_count+0xc2>
        {
            ic[current_ic].crc_count.stat_pec[i] = 0;
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	019b      	lsls	r3, r3, #6
 8002ea6:	4413      	add	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	461a      	mov	r2, r3
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	441a      	add	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	336c      	adds	r3, #108	@ 0x6c
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	4413      	add	r3, r2
 8002eb8:	2200      	movs	r2, #0
 8002eba:	80da      	strh	r2, [r3, #6]
        for (i = 0; i < 2; i++)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	ddeb      	ble.n	8002ea0 <LTC681x_reset_crc_count+0xa0>
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	60bb      	str	r3, [r7, #8]
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	db9d      	blt.n	8002e12 <LTC681x_reset_crc_count+0x12>
        }
    }
}
 8002ed6:	bf00      	nop
 8002ed8:	bf00      	nop
 8002eda:	3714      	adds	r7, #20
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <LTC681x_init_cfg>:

/* Helper function to initialize CFG variables */
void LTC681x_init_cfg(uint8_t total_ic, //Number of ICs in the system
        cell_asic *ic //A two dimensional array that stores the data
        )
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	6039      	str	r1, [r7, #0]
 8002eee:	71fb      	strb	r3, [r7, #7]
    uint8_t current_ic, j;
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	73fb      	strb	r3, [r7, #15]
 8002ef4:	e021      	b.n	8002f3a <LTC681x_init_cfg+0x56>
    {
        for (j = 0; j < 6; j++)
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	73bb      	strb	r3, [r7, #14]
 8002efa:	e00d      	b.n	8002f18 <LTC681x_init_cfg+0x34>
        {
            ic[current_ic].config.tx_data[j] = 0;
 8002efc:	7bfa      	ldrb	r2, [r7, #15]
 8002efe:	4613      	mov	r3, r2
 8002f00:	019b      	lsls	r3, r3, #6
 8002f02:	4413      	add	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	461a      	mov	r2, r3
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	441a      	add	r2, r3
 8002f0c:	7bbb      	ldrb	r3, [r7, #14]
 8002f0e:	2100      	movs	r1, #0
 8002f10:	54d1      	strb	r1, [r2, r3]
        for (j = 0; j < 6; j++)
 8002f12:	7bbb      	ldrb	r3, [r7, #14]
 8002f14:	3301      	adds	r3, #1
 8002f16:	73bb      	strb	r3, [r7, #14]
 8002f18:	7bbb      	ldrb	r3, [r7, #14]
 8002f1a:	2b05      	cmp	r3, #5
 8002f1c:	d9ee      	bls.n	8002efc <LTC681x_init_cfg+0x18>
        }
        ic[current_ic].isospi_reverse = 0;
 8002f1e:	7bfa      	ldrb	r2, [r7, #15]
 8002f20:	4613      	mov	r3, r2
 8002f22:	019b      	lsls	r3, r3, #6
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	461a      	mov	r2, r3
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5
    for (current_ic = 0; current_ic < total_ic; current_ic++)
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
 8002f36:	3301      	adds	r3, #1
 8002f38:	73fb      	strb	r3, [r7, #15]
 8002f3a:	7bfa      	ldrb	r2, [r7, #15]
 8002f3c:	79fb      	ldrb	r3, [r7, #7]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d3d9      	bcc.n	8002ef6 <LTC681x_init_cfg+0x12>
    }
}
 8002f42:	bf00      	nop
 8002f44:	bf00      	nop
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <LTC681x_set_cfgr>:
        bool dcc[12], // The DCC bits
        bool dcto[4], // The Dcto bits
        uint16_t uv, // The UV value
        uint16_t ov // The OV value
        )
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6039      	str	r1, [r7, #0]
 8002f58:	4611      	mov	r1, r2
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	71fb      	strb	r3, [r7, #7]
 8002f60:	460b      	mov	r3, r1
 8002f62:	71bb      	strb	r3, [r7, #6]
 8002f64:	4613      	mov	r3, r2
 8002f66:	717b      	strb	r3, [r7, #5]
    LTC681x_set_cfgr_refon(nIC, ic, refon);
 8002f68:	79ba      	ldrb	r2, [r7, #6]
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	6839      	ldr	r1, [r7, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 f828 	bl	8002fc4 <LTC681x_set_cfgr_refon>
    LTC681x_set_cfgr_adcopt(nIC, ic, adcopt);
 8002f74:	797a      	ldrb	r2, [r7, #5]
 8002f76:	79fb      	ldrb	r3, [r7, #7]
 8002f78:	6839      	ldr	r1, [r7, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 f85e 	bl	800303c <LTC681x_set_cfgr_adcopt>
    LTC681x_set_cfgr_gpio(nIC, ic, gpio);
 8002f80:	79fb      	ldrb	r3, [r7, #7]
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	6839      	ldr	r1, [r7, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 f894 	bl	80030b4 <LTC681x_set_cfgr_gpio>
    LTC681x_set_cfgr_dis(nIC, ic, dcc);
 8002f8c:	79fb      	ldrb	r3, [r7, #7]
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	6839      	ldr	r1, [r7, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 f8e6 	bl	8003164 <LTC681x_set_cfgr_dis>
    LTC681x_set_cfgr_dcto(nIC, ic, dcto);
 8002f98:	79fb      	ldrb	r3, [r7, #7]
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	6839      	ldr	r1, [r7, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 f97f 	bl	80032a2 <LTC681x_set_cfgr_dcto>
    LTC681x_set_cfgr_uv(nIC, ic, uv);
 8002fa4:	8bba      	ldrh	r2, [r7, #28]
 8002fa6:	79fb      	ldrb	r3, [r7, #7]
 8002fa8:	6839      	ldr	r1, [r7, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 f9d1 	bl	8003352 <LTC681x_set_cfgr_uv>
    LTC681x_set_cfgr_ov(nIC, ic, ov);
 8002fb0:	8c3a      	ldrh	r2, [r7, #32]
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	6839      	ldr	r1, [r7, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 fa1b 	bl	80033f2 <LTC681x_set_cfgr_ov>
}
 8002fbc:	bf00      	nop
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <LTC681x_set_cfgr_refon>:

/* Helper function to set the REFON bit */
void LTC681x_set_cfgr_refon(uint8_t nIC, cell_asic *ic, bool refon)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	6039      	str	r1, [r7, #0]
 8002fce:	71fb      	strb	r3, [r7, #7]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	71bb      	strb	r3, [r7, #6]
    if (refon)
 8002fd4:	79bb      	ldrb	r3, [r7, #6]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d015      	beq.n	8003006 <LTC681x_set_cfgr_refon+0x42>
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] | 0x04;
 8002fda:	79fa      	ldrb	r2, [r7, #7]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	019b      	lsls	r3, r3, #6
 8002fe0:	4413      	add	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	4413      	add	r3, r2
 8002fea:	7819      	ldrb	r1, [r3, #0]
 8002fec:	79fa      	ldrb	r2, [r7, #7]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	019b      	lsls	r3, r3, #6
 8002ff2:	4413      	add	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f041 0204 	orr.w	r2, r1, #4
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	701a      	strb	r2, [r3, #0]
    else
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] & 0xFB;
}
 8003004:	e014      	b.n	8003030 <LTC681x_set_cfgr_refon+0x6c>
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] & 0xFB;
 8003006:	79fa      	ldrb	r2, [r7, #7]
 8003008:	4613      	mov	r3, r2
 800300a:	019b      	lsls	r3, r3, #6
 800300c:	4413      	add	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	461a      	mov	r2, r3
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	4413      	add	r3, r2
 8003016:	7819      	ldrb	r1, [r3, #0]
 8003018:	79fa      	ldrb	r2, [r7, #7]
 800301a:	4613      	mov	r3, r2
 800301c:	019b      	lsls	r3, r3, #6
 800301e:	4413      	add	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	461a      	mov	r2, r3
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	4413      	add	r3, r2
 8003028:	f021 0204 	bic.w	r2, r1, #4
 800302c:	b2d2      	uxtb	r2, r2
 800302e:	701a      	strb	r2, [r3, #0]
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <LTC681x_set_cfgr_adcopt>:

/* Helper function to set the ADCOPT bit */
void LTC681x_set_cfgr_adcopt(uint8_t nIC, cell_asic *ic, bool adcopt)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	6039      	str	r1, [r7, #0]
 8003046:	71fb      	strb	r3, [r7, #7]
 8003048:	4613      	mov	r3, r2
 800304a:	71bb      	strb	r3, [r7, #6]
    if (adcopt)
 800304c:	79bb      	ldrb	r3, [r7, #6]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d015      	beq.n	800307e <LTC681x_set_cfgr_adcopt+0x42>
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] | 0x01;
 8003052:	79fa      	ldrb	r2, [r7, #7]
 8003054:	4613      	mov	r3, r2
 8003056:	019b      	lsls	r3, r3, #6
 8003058:	4413      	add	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	461a      	mov	r2, r3
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	4413      	add	r3, r2
 8003062:	7819      	ldrb	r1, [r3, #0]
 8003064:	79fa      	ldrb	r2, [r7, #7]
 8003066:	4613      	mov	r3, r2
 8003068:	019b      	lsls	r3, r3, #6
 800306a:	4413      	add	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	461a      	mov	r2, r3
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	4413      	add	r3, r2
 8003074:	f041 0201 	orr.w	r2, r1, #1
 8003078:	b2d2      	uxtb	r2, r2
 800307a:	701a      	strb	r2, [r3, #0]
    else
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] & 0xFE;
}
 800307c:	e014      	b.n	80030a8 <LTC681x_set_cfgr_adcopt+0x6c>
        ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0] & 0xFE;
 800307e:	79fa      	ldrb	r2, [r7, #7]
 8003080:	4613      	mov	r3, r2
 8003082:	019b      	lsls	r3, r3, #6
 8003084:	4413      	add	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	461a      	mov	r2, r3
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	4413      	add	r3, r2
 800308e:	7819      	ldrb	r1, [r3, #0]
 8003090:	79fa      	ldrb	r2, [r7, #7]
 8003092:	4613      	mov	r3, r2
 8003094:	019b      	lsls	r3, r3, #6
 8003096:	4413      	add	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	461a      	mov	r2, r3
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	4413      	add	r3, r2
 80030a0:	f021 0201 	bic.w	r2, r1, #1
 80030a4:	b2d2      	uxtb	r2, r2
 80030a6:	701a      	strb	r2, [r3, #0]
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <LTC681x_set_cfgr_gpio>:

/* Helper function to set GPIO bits */
void LTC681x_set_cfgr_gpio(uint8_t nIC, cell_asic *ic, bool gpio[5])
{
 80030b4:	b480      	push	{r7}
 80030b6:	b087      	sub	sp, #28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
 80030c0:	73fb      	strb	r3, [r7, #15]
    int i;
    for (i = 0; i < 5; i++)
 80030c2:	2300      	movs	r3, #0
 80030c4:	617b      	str	r3, [r7, #20]
 80030c6:	e043      	b.n	8003150 <LTC681x_set_cfgr_gpio+0x9c>
    {
        if (gpio[i])
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	4413      	add	r3, r2
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d01c      	beq.n	800310e <LTC681x_set_cfgr_gpio+0x5a>
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 80030d4:	7bfa      	ldrb	r2, [r7, #15]
 80030d6:	4613      	mov	r3, r2
 80030d8:	019b      	lsls	r3, r3, #6
 80030da:	4413      	add	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	461a      	mov	r2, r3
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	4413      	add	r3, r2
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	b25a      	sxtb	r2, r3
                    | (0x01 << (i + 3));
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	3303      	adds	r3, #3
 80030ec:	2101      	movs	r1, #1
 80030ee:	fa01 f303 	lsl.w	r3, r1, r3
 80030f2:	b25b      	sxtb	r3, r3
 80030f4:	4313      	orrs	r3, r2
 80030f6:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 80030f8:	7bfa      	ldrb	r2, [r7, #15]
 80030fa:	4613      	mov	r3, r2
 80030fc:	019b      	lsls	r3, r3, #6
 80030fe:	4413      	add	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	461a      	mov	r2, r3
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	4413      	add	r3, r2
                    | (0x01 << (i + 3));
 8003108:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 800310a:	701a      	strb	r2, [r3, #0]
 800310c:	e01d      	b.n	800314a <LTC681x_set_cfgr_gpio+0x96>
        else
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 800310e:	7bfa      	ldrb	r2, [r7, #15]
 8003110:	4613      	mov	r3, r2
 8003112:	019b      	lsls	r3, r3, #6
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	461a      	mov	r2, r3
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	4413      	add	r3, r2
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	b25a      	sxtb	r2, r3
                    & (~(0x01 << (i + 3)));
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	3303      	adds	r3, #3
 8003126:	2101      	movs	r1, #1
 8003128:	fa01 f303 	lsl.w	r3, r1, r3
 800312c:	b25b      	sxtb	r3, r3
 800312e:	43db      	mvns	r3, r3
 8003130:	b25b      	sxtb	r3, r3
 8003132:	4013      	ands	r3, r2
 8003134:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 8003136:	7bfa      	ldrb	r2, [r7, #15]
 8003138:	4613      	mov	r3, r2
 800313a:	019b      	lsls	r3, r3, #6
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	461a      	mov	r2, r3
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	4413      	add	r3, r2
                    & (~(0x01 << (i + 3)));
 8003146:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[0] = ic[nIC].config.tx_data[0]
 8003148:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 5; i++)
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	3301      	adds	r3, #1
 800314e:	617b      	str	r3, [r7, #20]
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	2b04      	cmp	r3, #4
 8003154:	ddb8      	ble.n	80030c8 <LTC681x_set_cfgr_gpio+0x14>
    }
}
 8003156:	bf00      	nop
 8003158:	bf00      	nop
 800315a:	371c      	adds	r7, #28
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <LTC681x_set_cfgr_dis>:

/* Helper function to control discharge */
void LTC681x_set_cfgr_dis(uint8_t nIC, cell_asic *ic, bool dcc[12])
{
 8003164:	b480      	push	{r7}
 8003166:	b087      	sub	sp, #28
 8003168:	af00      	add	r7, sp, #0
 800316a:	4603      	mov	r3, r0
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
 8003170:	73fb      	strb	r3, [r7, #15]
    int i;
    for (i = 0; i < 8; i++)
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]
 8003176:	e041      	b.n	80031fc <LTC681x_set_cfgr_dis+0x98>
    {
        if (dcc[i])
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	4413      	add	r3, r2
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d01b      	beq.n	80031bc <LTC681x_set_cfgr_dis+0x58>
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4] | (0x01 << i);
 8003184:	7bfa      	ldrb	r2, [r7, #15]
 8003186:	4613      	mov	r3, r2
 8003188:	019b      	lsls	r3, r3, #6
 800318a:	4413      	add	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	461a      	mov	r2, r3
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	4413      	add	r3, r2
 8003194:	791b      	ldrb	r3, [r3, #4]
 8003196:	b25a      	sxtb	r2, r3
 8003198:	2101      	movs	r1, #1
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	fa01 f303 	lsl.w	r3, r1, r3
 80031a0:	b25b      	sxtb	r3, r3
 80031a2:	4313      	orrs	r3, r2
 80031a4:	b259      	sxtb	r1, r3
 80031a6:	7bfa      	ldrb	r2, [r7, #15]
 80031a8:	4613      	mov	r3, r2
 80031aa:	019b      	lsls	r3, r3, #6
 80031ac:	4413      	add	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	461a      	mov	r2, r3
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	4413      	add	r3, r2
 80031b6:	b2ca      	uxtb	r2, r1
 80031b8:	711a      	strb	r2, [r3, #4]
 80031ba:	e01c      	b.n	80031f6 <LTC681x_set_cfgr_dis+0x92>
        else
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]
 80031bc:	7bfa      	ldrb	r2, [r7, #15]
 80031be:	4613      	mov	r3, r2
 80031c0:	019b      	lsls	r3, r3, #6
 80031c2:	4413      	add	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	461a      	mov	r2, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	4413      	add	r3, r2
 80031cc:	791b      	ldrb	r3, [r3, #4]
 80031ce:	b25a      	sxtb	r2, r3
                    & (~(0x01 << i));
 80031d0:	2101      	movs	r1, #1
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	fa01 f303 	lsl.w	r3, r1, r3
 80031d8:	b25b      	sxtb	r3, r3
 80031da:	43db      	mvns	r3, r3
 80031dc:	b25b      	sxtb	r3, r3
 80031de:	4013      	ands	r3, r2
 80031e0:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]
 80031e2:	7bfa      	ldrb	r2, [r7, #15]
 80031e4:	4613      	mov	r3, r2
 80031e6:	019b      	lsls	r3, r3, #6
 80031e8:	4413      	add	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	461a      	mov	r2, r3
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	4413      	add	r3, r2
                    & (~(0x01 << i));
 80031f2:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[4] = ic[nIC].config.tx_data[4]
 80031f4:	711a      	strb	r2, [r3, #4]
    for (i = 0; i < 8; i++)
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	3301      	adds	r3, #1
 80031fa:	617b      	str	r3, [r7, #20]
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	2b07      	cmp	r3, #7
 8003200:	ddba      	ble.n	8003178 <LTC681x_set_cfgr_dis+0x14>
    }
    for (i = 0; i < 4; i++)
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]
 8003206:	e042      	b.n	800328e <LTC681x_set_cfgr_dis+0x12a>
    {
        if (dcc[i + 8])
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	3308      	adds	r3, #8
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	4413      	add	r3, r2
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d01b      	beq.n	800324e <LTC681x_set_cfgr_dis+0xea>
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5] | (0x01 << i);
 8003216:	7bfa      	ldrb	r2, [r7, #15]
 8003218:	4613      	mov	r3, r2
 800321a:	019b      	lsls	r3, r3, #6
 800321c:	4413      	add	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	461a      	mov	r2, r3
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	4413      	add	r3, r2
 8003226:	795b      	ldrb	r3, [r3, #5]
 8003228:	b25a      	sxtb	r2, r3
 800322a:	2101      	movs	r1, #1
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	fa01 f303 	lsl.w	r3, r1, r3
 8003232:	b25b      	sxtb	r3, r3
 8003234:	4313      	orrs	r3, r2
 8003236:	b259      	sxtb	r1, r3
 8003238:	7bfa      	ldrb	r2, [r7, #15]
 800323a:	4613      	mov	r3, r2
 800323c:	019b      	lsls	r3, r3, #6
 800323e:	4413      	add	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	461a      	mov	r2, r3
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	4413      	add	r3, r2
 8003248:	b2ca      	uxtb	r2, r1
 800324a:	715a      	strb	r2, [r3, #5]
 800324c:	e01c      	b.n	8003288 <LTC681x_set_cfgr_dis+0x124>
        else
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 800324e:	7bfa      	ldrb	r2, [r7, #15]
 8003250:	4613      	mov	r3, r2
 8003252:	019b      	lsls	r3, r3, #6
 8003254:	4413      	add	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	461a      	mov	r2, r3
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	4413      	add	r3, r2
 800325e:	795b      	ldrb	r3, [r3, #5]
 8003260:	b25a      	sxtb	r2, r3
                    & (~(0x01 << i));
 8003262:	2101      	movs	r1, #1
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	fa01 f303 	lsl.w	r3, r1, r3
 800326a:	b25b      	sxtb	r3, r3
 800326c:	43db      	mvns	r3, r3
 800326e:	b25b      	sxtb	r3, r3
 8003270:	4013      	ands	r3, r2
 8003272:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8003274:	7bfa      	ldrb	r2, [r7, #15]
 8003276:	4613      	mov	r3, r2
 8003278:	019b      	lsls	r3, r3, #6
 800327a:	4413      	add	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	461a      	mov	r2, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	4413      	add	r3, r2
                    & (~(0x01 << i));
 8003284:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8003286:	715a      	strb	r2, [r3, #5]
    for (i = 0; i < 4; i++)
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	3301      	adds	r3, #1
 800328c:	617b      	str	r3, [r7, #20]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	2b03      	cmp	r3, #3
 8003292:	ddb9      	ble.n	8003208 <LTC681x_set_cfgr_dis+0xa4>
    }
}
 8003294:	bf00      	nop
 8003296:	bf00      	nop
 8003298:	371c      	adds	r7, #28
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <LTC681x_set_cfgr_dcto>:

/* Helper function to control discharge time value */
void LTC681x_set_cfgr_dcto(uint8_t nIC, cell_asic *ic, bool dcto[4])
{
 80032a2:	b480      	push	{r7}
 80032a4:	b087      	sub	sp, #28
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	4603      	mov	r3, r0
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	607a      	str	r2, [r7, #4]
 80032ae:	73fb      	strb	r3, [r7, #15]
    int i;
    for (i = 0; i < 4; i++)
 80032b0:	2300      	movs	r3, #0
 80032b2:	617b      	str	r3, [r7, #20]
 80032b4:	e043      	b.n	800333e <LTC681x_set_cfgr_dcto+0x9c>
    {
        if (dcto[i])
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	4413      	add	r3, r2
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d01c      	beq.n	80032fc <LTC681x_set_cfgr_dcto+0x5a>
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 80032c2:	7bfa      	ldrb	r2, [r7, #15]
 80032c4:	4613      	mov	r3, r2
 80032c6:	019b      	lsls	r3, r3, #6
 80032c8:	4413      	add	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	461a      	mov	r2, r3
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	4413      	add	r3, r2
 80032d2:	795b      	ldrb	r3, [r3, #5]
 80032d4:	b25a      	sxtb	r2, r3
                    | (0x01 << (i + 4));
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	3304      	adds	r3, #4
 80032da:	2101      	movs	r1, #1
 80032dc:	fa01 f303 	lsl.w	r3, r1, r3
 80032e0:	b25b      	sxtb	r3, r3
 80032e2:	4313      	orrs	r3, r2
 80032e4:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 80032e6:	7bfa      	ldrb	r2, [r7, #15]
 80032e8:	4613      	mov	r3, r2
 80032ea:	019b      	lsls	r3, r3, #6
 80032ec:	4413      	add	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	461a      	mov	r2, r3
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	4413      	add	r3, r2
                    | (0x01 << (i + 4));
 80032f6:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 80032f8:	715a      	strb	r2, [r3, #5]
 80032fa:	e01d      	b.n	8003338 <LTC681x_set_cfgr_dcto+0x96>
        else
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 80032fc:	7bfa      	ldrb	r2, [r7, #15]
 80032fe:	4613      	mov	r3, r2
 8003300:	019b      	lsls	r3, r3, #6
 8003302:	4413      	add	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	461a      	mov	r2, r3
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	4413      	add	r3, r2
 800330c:	795b      	ldrb	r3, [r3, #5]
 800330e:	b25a      	sxtb	r2, r3
                    & (~(0x01 << (i + 4)));
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	3304      	adds	r3, #4
 8003314:	2101      	movs	r1, #1
 8003316:	fa01 f303 	lsl.w	r3, r1, r3
 800331a:	b25b      	sxtb	r3, r3
 800331c:	43db      	mvns	r3, r3
 800331e:	b25b      	sxtb	r3, r3
 8003320:	4013      	ands	r3, r2
 8003322:	b259      	sxtb	r1, r3
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8003324:	7bfa      	ldrb	r2, [r7, #15]
 8003326:	4613      	mov	r3, r2
 8003328:	019b      	lsls	r3, r3, #6
 800332a:	4413      	add	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	461a      	mov	r2, r3
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	4413      	add	r3, r2
                    & (~(0x01 << (i + 4)));
 8003334:	b2ca      	uxtb	r2, r1
            ic[nIC].config.tx_data[5] = ic[nIC].config.tx_data[5]
 8003336:	715a      	strb	r2, [r3, #5]
    for (i = 0; i < 4; i++)
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	3301      	adds	r3, #1
 800333c:	617b      	str	r3, [r7, #20]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2b03      	cmp	r3, #3
 8003342:	ddb8      	ble.n	80032b6 <LTC681x_set_cfgr_dcto+0x14>
    }
}
 8003344:	bf00      	nop
 8003346:	bf00      	nop
 8003348:	371c      	adds	r7, #28
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <LTC681x_set_cfgr_uv>:

/* Helper Function to set UV value in CFG register */
void LTC681x_set_cfgr_uv(uint8_t nIC, cell_asic *ic, uint16_t uv)
{
 8003352:	b480      	push	{r7}
 8003354:	b085      	sub	sp, #20
 8003356:	af00      	add	r7, sp, #0
 8003358:	4603      	mov	r3, r0
 800335a:	6039      	str	r1, [r7, #0]
 800335c:	71fb      	strb	r3, [r7, #7]
 800335e:	4613      	mov	r3, r2
 8003360:	80bb      	strh	r3, [r7, #4]
    uint16_t tmp = (uv / 16) - 1;
 8003362:	88bb      	ldrh	r3, [r7, #4]
 8003364:	091b      	lsrs	r3, r3, #4
 8003366:	b29b      	uxth	r3, r3
 8003368:	3b01      	subs	r3, #1
 800336a:	81fb      	strh	r3, [r7, #14]
    ic[nIC].config.tx_data[1] = 0x00FF & tmp;
 800336c:	79fa      	ldrb	r2, [r7, #7]
 800336e:	4613      	mov	r3, r2
 8003370:	019b      	lsls	r3, r3, #6
 8003372:	4413      	add	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	461a      	mov	r2, r3
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	4413      	add	r3, r2
 800337c:	89fa      	ldrh	r2, [r7, #14]
 800337e:	b2d2      	uxtb	r2, r2
 8003380:	705a      	strb	r2, [r3, #1]
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2] & 0xF0;
 8003382:	79fa      	ldrb	r2, [r7, #7]
 8003384:	4613      	mov	r3, r2
 8003386:	019b      	lsls	r3, r3, #6
 8003388:	4413      	add	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	461a      	mov	r2, r3
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	4413      	add	r3, r2
 8003392:	7899      	ldrb	r1, [r3, #2]
 8003394:	79fa      	ldrb	r2, [r7, #7]
 8003396:	4613      	mov	r3, r2
 8003398:	019b      	lsls	r3, r3, #6
 800339a:	4413      	add	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	461a      	mov	r2, r3
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	4413      	add	r3, r2
 80033a4:	f021 020f 	bic.w	r2, r1, #15
 80033a8:	b2d2      	uxtb	r2, r2
 80033aa:	709a      	strb	r2, [r3, #2]
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 80033ac:	79fa      	ldrb	r2, [r7, #7]
 80033ae:	4613      	mov	r3, r2
 80033b0:	019b      	lsls	r3, r3, #6
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	461a      	mov	r2, r3
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	4413      	add	r3, r2
 80033bc:	789b      	ldrb	r3, [r3, #2]
 80033be:	b25a      	sxtb	r2, r3
            | ((0x0F00 & tmp) >> 8);
 80033c0:	89fb      	ldrh	r3, [r7, #14]
 80033c2:	0a1b      	lsrs	r3, r3, #8
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	b25b      	sxtb	r3, r3
 80033c8:	f003 030f 	and.w	r3, r3, #15
 80033cc:	b25b      	sxtb	r3, r3
 80033ce:	4313      	orrs	r3, r2
 80033d0:	b259      	sxtb	r1, r3
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 80033d2:	79fa      	ldrb	r2, [r7, #7]
 80033d4:	4613      	mov	r3, r2
 80033d6:	019b      	lsls	r3, r3, #6
 80033d8:	4413      	add	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	461a      	mov	r2, r3
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	4413      	add	r3, r2
            | ((0x0F00 & tmp) >> 8);
 80033e2:	b2ca      	uxtb	r2, r1
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 80033e4:	709a      	strb	r2, [r3, #2]
}
 80033e6:	bf00      	nop
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <LTC681x_set_cfgr_ov>:

/* Helper function to set OV value in CFG register */
void LTC681x_set_cfgr_ov(uint8_t nIC, cell_asic *ic, uint16_t ov)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b085      	sub	sp, #20
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	4603      	mov	r3, r0
 80033fa:	6039      	str	r1, [r7, #0]
 80033fc:	71fb      	strb	r3, [r7, #7]
 80033fe:	4613      	mov	r3, r2
 8003400:	80bb      	strh	r3, [r7, #4]
    uint16_t tmp = (ov / 16);
 8003402:	88bb      	ldrh	r3, [r7, #4]
 8003404:	091b      	lsrs	r3, r3, #4
 8003406:	81fb      	strh	r3, [r7, #14]
    ic[nIC].config.tx_data[3] = 0x00FF & (tmp >> 4);
 8003408:	89fb      	ldrh	r3, [r7, #14]
 800340a:	091b      	lsrs	r3, r3, #4
 800340c:	b299      	uxth	r1, r3
 800340e:	79fa      	ldrb	r2, [r7, #7]
 8003410:	4613      	mov	r3, r2
 8003412:	019b      	lsls	r3, r3, #6
 8003414:	4413      	add	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	461a      	mov	r2, r3
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	4413      	add	r3, r2
 800341e:	b2ca      	uxtb	r2, r1
 8003420:	70da      	strb	r2, [r3, #3]
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2] & 0x0F;
 8003422:	79fa      	ldrb	r2, [r7, #7]
 8003424:	4613      	mov	r3, r2
 8003426:	019b      	lsls	r3, r3, #6
 8003428:	4413      	add	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	461a      	mov	r2, r3
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	4413      	add	r3, r2
 8003432:	7899      	ldrb	r1, [r3, #2]
 8003434:	79fa      	ldrb	r2, [r7, #7]
 8003436:	4613      	mov	r3, r2
 8003438:	019b      	lsls	r3, r3, #6
 800343a:	4413      	add	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	461a      	mov	r2, r3
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	4413      	add	r3, r2
 8003444:	f001 020f 	and.w	r2, r1, #15
 8003448:	b2d2      	uxtb	r2, r2
 800344a:	709a      	strb	r2, [r3, #2]
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 800344c:	79fa      	ldrb	r2, [r7, #7]
 800344e:	4613      	mov	r3, r2
 8003450:	019b      	lsls	r3, r3, #6
 8003452:	4413      	add	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	461a      	mov	r2, r3
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	4413      	add	r3, r2
 800345c:	789b      	ldrb	r3, [r3, #2]
 800345e:	b25a      	sxtb	r2, r3
            | ((0x000F & tmp) << 4);
 8003460:	89fb      	ldrh	r3, [r7, #14]
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	b25b      	sxtb	r3, r3
 8003466:	4313      	orrs	r3, r2
 8003468:	b259      	sxtb	r1, r3
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 800346a:	79fa      	ldrb	r2, [r7, #7]
 800346c:	4613      	mov	r3, r2
 800346e:	019b      	lsls	r3, r3, #6
 8003470:	4413      	add	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	461a      	mov	r2, r3
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	4413      	add	r3, r2
            | ((0x000F & tmp) << 4);
 800347a:	b2ca      	uxtb	r2, r1
    ic[nIC].config.tx_data[2] = ic[nIC].config.tx_data[2]
 800347c:	709a      	strb	r2, [r3, #2]
}
 800347e:	bf00      	nop
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
	...

0800348c <RTC_Init>:
static int BCD2DEC(uint8_t val) {
    return (int)((val / 16 * 10) + (val % 16));
}

void RTC_Init(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af04      	add	r7, sp, #16
    uint8_t ctrl;

    // Step 1: Clear oscillator start bit first
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003492:	f04f 33ff 	mov.w	r3, #4294967295
 8003496:	9302      	str	r3, [sp, #8]
 8003498:	2301      	movs	r3, #1
 800349a:	9301      	str	r3, [sp, #4]
 800349c:	1dfb      	adds	r3, r7, #7
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	2301      	movs	r3, #1
 80034a2:	2200      	movs	r2, #0
 80034a4:	21df      	movs	r1, #223	@ 0xdf
 80034a6:	4848      	ldr	r0, [pc, #288]	@ (80035c8 <RTC_Init+0x13c>)
 80034a8:	f002 fcc0 	bl	8005e2c <HAL_I2C_Mem_Read>
    ctrl &= ~MCP7940N_ST;
 80034ac:	79fb      	ldrb	r3, [r7, #7]
 80034ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 80034b6:	f04f 33ff 	mov.w	r3, #4294967295
 80034ba:	9302      	str	r3, [sp, #8]
 80034bc:	2301      	movs	r3, #1
 80034be:	9301      	str	r3, [sp, #4]
 80034c0:	1dfb      	adds	r3, r7, #7
 80034c2:	9300      	str	r3, [sp, #0]
 80034c4:	2301      	movs	r3, #1
 80034c6:	2200      	movs	r2, #0
 80034c8:	21df      	movs	r1, #223	@ 0xdf
 80034ca:	483f      	ldr	r0, [pc, #252]	@ (80035c8 <RTC_Init+0x13c>)
 80034cc:	f002 fbb4 	bl	8005c38 <HAL_I2C_Mem_Write>
    HAL_Delay(10);  // Wait for oscillator to stop
 80034d0:	200a      	movs	r0, #10
 80034d2:	f001 fbab 	bl	8004c2c <HAL_Delay>

    // Step 2: Enable battery backup
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 80034d6:	f04f 33ff 	mov.w	r3, #4294967295
 80034da:	9302      	str	r3, [sp, #8]
 80034dc:	2301      	movs	r3, #1
 80034de:	9301      	str	r3, [sp, #4]
 80034e0:	1dfb      	adds	r3, r7, #7
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	2301      	movs	r3, #1
 80034e6:	2203      	movs	r2, #3
 80034e8:	21df      	movs	r1, #223	@ 0xdf
 80034ea:	4837      	ldr	r0, [pc, #220]	@ (80035c8 <RTC_Init+0x13c>)
 80034ec:	f002 fc9e 	bl	8005e2c <HAL_I2C_Mem_Read>
    ctrl |= MCP7940N_VBATEN;
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	f043 0308 	orr.w	r3, r3, #8
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 80034fa:	f04f 33ff 	mov.w	r3, #4294967295
 80034fe:	9302      	str	r3, [sp, #8]
 8003500:	2301      	movs	r3, #1
 8003502:	9301      	str	r3, [sp, #4]
 8003504:	1dfb      	adds	r3, r7, #7
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	2301      	movs	r3, #1
 800350a:	2203      	movs	r2, #3
 800350c:	21df      	movs	r1, #223	@ 0xdf
 800350e:	482e      	ldr	r0, [pc, #184]	@ (80035c8 <RTC_Init+0x13c>)
 8003510:	f002 fb92 	bl	8005c38 <HAL_I2C_Mem_Write>

    // Step 3: Start oscillator
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003514:	f04f 33ff 	mov.w	r3, #4294967295
 8003518:	9302      	str	r3, [sp, #8]
 800351a:	2301      	movs	r3, #1
 800351c:	9301      	str	r3, [sp, #4]
 800351e:	1dfb      	adds	r3, r7, #7
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	2301      	movs	r3, #1
 8003524:	2200      	movs	r2, #0
 8003526:	21df      	movs	r1, #223	@ 0xdf
 8003528:	4827      	ldr	r0, [pc, #156]	@ (80035c8 <RTC_Init+0x13c>)
 800352a:	f002 fc7f 	bl	8005e2c <HAL_I2C_Mem_Read>
    ctrl |= MCP7940N_ST;
 800352e:	79fb      	ldrb	r3, [r7, #7]
 8003530:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003534:	b2db      	uxtb	r3, r3
 8003536:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003538:	f04f 33ff 	mov.w	r3, #4294967295
 800353c:	9302      	str	r3, [sp, #8]
 800353e:	2301      	movs	r3, #1
 8003540:	9301      	str	r3, [sp, #4]
 8003542:	1dfb      	adds	r3, r7, #7
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	2301      	movs	r3, #1
 8003548:	2200      	movs	r2, #0
 800354a:	21df      	movs	r1, #223	@ 0xdf
 800354c:	481e      	ldr	r0, [pc, #120]	@ (80035c8 <RTC_Init+0x13c>)
 800354e:	f002 fb73 	bl	8005c38 <HAL_I2C_Mem_Write>

    // Step 4: Wait for oscillator to start running
    do {
        HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003552:	f04f 33ff 	mov.w	r3, #4294967295
 8003556:	9302      	str	r3, [sp, #8]
 8003558:	2301      	movs	r3, #1
 800355a:	9301      	str	r3, [sp, #4]
 800355c:	1dfb      	adds	r3, r7, #7
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	2301      	movs	r3, #1
 8003562:	2203      	movs	r2, #3
 8003564:	21df      	movs	r1, #223	@ 0xdf
 8003566:	4818      	ldr	r0, [pc, #96]	@ (80035c8 <RTC_Init+0x13c>)
 8003568:	f002 fc60 	bl	8005e2c <HAL_I2C_Mem_Read>
    } while(!(ctrl & MCP7940N_OSCON));
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	f003 0320 	and.w	r3, r3, #32
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0ed      	beq.n	8003552 <RTC_Init+0xc6>

    // Step 5: Clear power fail flag if set
    HAL_I2C_Mem_Read(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8003576:	f04f 33ff 	mov.w	r3, #4294967295
 800357a:	9302      	str	r3, [sp, #8]
 800357c:	2301      	movs	r3, #1
 800357e:	9301      	str	r3, [sp, #4]
 8003580:	1dfb      	adds	r3, r7, #7
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	2301      	movs	r3, #1
 8003586:	2203      	movs	r2, #3
 8003588:	21df      	movs	r1, #223	@ 0xdf
 800358a:	480f      	ldr	r0, [pc, #60]	@ (80035c8 <RTC_Init+0x13c>)
 800358c:	f002 fc4e 	bl	8005e2c <HAL_I2C_Mem_Read>
    if(ctrl & MCP7940N_PWRFAIL) {
 8003590:	79fb      	ldrb	r3, [r7, #7]
 8003592:	f003 0310 	and.w	r3, r3, #16
 8003596:	2b00      	cmp	r3, #0
 8003598:	d011      	beq.n	80035be <RTC_Init+0x132>
        ctrl &= ~MCP7940N_PWRFAIL;
 800359a:	79fb      	ldrb	r3, [r7, #7]
 800359c:	f023 0310 	bic.w	r3, r3, #16
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	71fb      	strb	r3, [r7, #7]
        HAL_I2C_Mem_Write(&hi2c1, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 80035a4:	f04f 33ff 	mov.w	r3, #4294967295
 80035a8:	9302      	str	r3, [sp, #8]
 80035aa:	2301      	movs	r3, #1
 80035ac:	9301      	str	r3, [sp, #4]
 80035ae:	1dfb      	adds	r3, r7, #7
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	2301      	movs	r3, #1
 80035b4:	2203      	movs	r2, #3
 80035b6:	21df      	movs	r1, #223	@ 0xdf
 80035b8:	4803      	ldr	r0, [pc, #12]	@ (80035c8 <RTC_Init+0x13c>)
 80035ba:	f002 fb3d 	bl	8005c38 <HAL_I2C_Mem_Write>
    }
}
 80035be:	bf00      	nop
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	20000afc 	.word	0x20000afc

080035cc <cs_low>:
/* USER CODE BEGIN 0 */

//--------------------------------------------------------------//


void cs_low() {
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80035d0:	2200      	movs	r2, #0
 80035d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035d6:	4805      	ldr	r0, [pc, #20]	@ (80035ec <cs_low+0x20>)
 80035d8:	f002 f9d0 	bl	800597c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);// Enable Pack, /CS asserted
 80035dc:	2201      	movs	r2, #1
 80035de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80035e2:	4803      	ldr	r0, [pc, #12]	@ (80035f0 <cs_low+0x24>)
 80035e4:	f002 f9ca 	bl	800597c <HAL_GPIO_WritePin>


}
 80035e8:	bf00      	nop
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	40020400 	.word	0x40020400
 80035f0:	40020c00 	.word	0x40020c00

080035f4 <cs_high>:

void cs_high() {
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80035f8:	2201      	movs	r2, #1
 80035fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035fe:	4805      	ldr	r0, [pc, #20]	@ (8003614 <cs_high+0x20>)
 8003600:	f002 f9bc 	bl	800597c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);// Disable Pack, /CS deasserted
 8003604:	2201      	movs	r2, #1
 8003606:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800360a:	4803      	ldr	r0, [pc, #12]	@ (8003618 <cs_high+0x24>)
 800360c:	f002 f9b6 	bl	800597c <HAL_GPIO_WritePin>


}
 8003610:	bf00      	nop
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40020400 	.word	0x40020400
 8003618:	40020c00 	.word	0x40020c00

0800361c <spi_write_array>:
 * @param parameters   :  Data length, data to transmit
 */

void spi_write_array(uint8_t len, // Option: Number of bytes to be written on the SPI port
		uint8_t data[] //Array of bytes to be written on the SPI port
		) {
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	6039      	str	r1, [r7, #0]
 8003626:	71fb      	strb	r3, [r7, #7]
	uint8_t len_t;
	for (len_t = 0; len_t < len; len_t++) {
 8003628:	2300      	movs	r3, #0
 800362a:	73fb      	strb	r3, [r7, #15]
 800362c:	e00f      	b.n	800364e <spi_write_array+0x32>
		if (HAL_SPI_Transmit(&hspi4, &data[len_t], 1, 20) != HAL_OK) {
 800362e:	7bfb      	ldrb	r3, [r7, #15]
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	18d1      	adds	r1, r2, r3
 8003634:	2314      	movs	r3, #20
 8003636:	2201      	movs	r2, #1
 8003638:	4809      	ldr	r0, [pc, #36]	@ (8003660 <spi_write_array+0x44>)
 800363a:	f003 ff3a 	bl	80074b2 <HAL_SPI_Transmit>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <spi_write_array+0x2c>
			/* Transfer error in transmission process */
			Error_Handler();
 8003644:	f000 fe0a 	bl	800425c <Error_Handler>
	for (len_t = 0; len_t < len; len_t++) {
 8003648:	7bfb      	ldrb	r3, [r7, #15]
 800364a:	3301      	adds	r3, #1
 800364c:	73fb      	strb	r3, [r7, #15]
 800364e:	7bfa      	ldrb	r2, [r7, #15]
 8003650:	79fb      	ldrb	r3, [r7, #7]
 8003652:	429a      	cmp	r2, r3
 8003654:	d3eb      	bcc.n	800362e <spi_write_array+0x12>
		}
	}

}
 8003656:	bf00      	nop
 8003658:	bf00      	nop
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	20000d00 	.word	0x20000d00

08003664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003664:	b590      	push	{r4, r7, lr}
 8003666:	b089      	sub	sp, #36	@ 0x24
 8003668:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800366a:	f001 fa6d 	bl	8004b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800366e:	f000 f88d 	bl	800378c <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003672:	f000 fba1 	bl	8003db8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003676:	f000 fa1f 	bl	8003ab8 <MX_SPI1_Init>
  MX_SPI2_Init();
 800367a:	f000 fa53 	bl	8003b24 <MX_SPI2_Init>
  MX_I2C2_Init();
 800367e:	f000 f99b 	bl	80039b8 <MX_I2C2_Init>
  MX_I2C3_Init();
 8003682:	f000 f9d9 	bl	8003a38 <MX_I2C3_Init>
  MX_SPI3_Init();
 8003686:	f000 fa83 	bl	8003b90 <MX_SPI3_Init>
  MX_SPI4_Init();
 800368a:	f000 fab7 	bl	8003bfc <MX_SPI4_Init>
  MX_CAN1_Init();
 800368e:	f000 f8e9 	bl	8003864 <MX_CAN1_Init>
  MX_CAN2_Init();
 8003692:	f000 f91d 	bl	80038d0 <MX_CAN2_Init>
  MX_I2C1_Init();
 8003696:	f000 f94f 	bl	8003938 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800369a:	f000 fae5 	bl	8003c68 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800369e:	f000 fb0d 	bl	8003cbc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80036a2:	f000 fb35 	bl	8003d10 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80036a6:	f000 fb5d 	bl	8003d64 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 80036aa:	f005 f841 	bl	8008730 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  RTC_Init();
 80036ae:	f7ff feed 	bl	800348c <RTC_Init>
  LED_Init();
 80036b2:	f7fc ff13 	bl	80004dc <LED_Init>
  LED_SetAll(1);
 80036b6:	2001      	movs	r0, #1
 80036b8:	f7fd f830 	bl	800071c <LED_SetAll>
  HAL_Delay(100);
 80036bc:	2064      	movs	r0, #100	@ 0x64
 80036be:	f001 fab5 	bl	8004c2c <HAL_Delay>
  LED_SetAll(0);
 80036c2:	2000      	movs	r0, #0
 80036c4:	f7fd f82a 	bl	800071c <LED_SetAll>
//  for (int i = 0; i < NUM_INA229; i++)
//  { INA229_config(ina229_devices[i]); HAL_Delay(10); }



  mcu_spiInit(0);
 80036c8:	2000      	movs	r0, #0
 80036ca:	f7ff f9ad 	bl	8002a28 <mcu_spiInit>
  HAL_Delay(10);
 80036ce:	200a      	movs	r0, #10
 80036d0:	f001 faac 	bl	8004c2c <HAL_Delay>
  HAL_Delay(10);
 80036d4:	200a      	movs	r0, #10
 80036d6:	f001 faa9 	bl	8004c2c <HAL_Delay>

//

  HAL_Delay(10);
 80036da:	200a      	movs	r0, #10
 80036dc:	f001 faa6 	bl	8004c2c <HAL_Delay>

  //init ltc ics

  //--------------------------------------------------------------//

	LTC6811_init_cfg(TOTAL_IC, BMS_IC);
 80036e0:	4920      	ldr	r1, [pc, #128]	@ (8003764 <main+0x100>)
 80036e2:	2002      	movs	r0, #2
 80036e4:	f7ff fa22 	bl	8002b2c <LTC6811_init_cfg>
	uint8_t main_current_ic;
	for (main_current_ic = 0; main_current_ic < TOTAL_IC; main_current_ic++) {
 80036e8:	2300      	movs	r3, #0
 80036ea:	71fb      	strb	r3, [r7, #7]
 80036ec:	e018      	b.n	8003720 <main+0xbc>
		LTC6811_set_cfgr(main_current_ic, BMS_IC, REF_ON, ADCOPT, GPIOBITS_A,
 80036ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003768 <main+0x104>)
 80036f0:	7819      	ldrb	r1, [r3, #0]
 80036f2:	4b1e      	ldr	r3, [pc, #120]	@ (800376c <main+0x108>)
 80036f4:	781c      	ldrb	r4, [r3, #0]
 80036f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003770 <main+0x10c>)
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	4a1e      	ldr	r2, [pc, #120]	@ (8003774 <main+0x110>)
 80036fc:	8812      	ldrh	r2, [r2, #0]
 80036fe:	79f8      	ldrb	r0, [r7, #7]
 8003700:	9204      	str	r2, [sp, #16]
 8003702:	9303      	str	r3, [sp, #12]
 8003704:	4b1c      	ldr	r3, [pc, #112]	@ (8003778 <main+0x114>)
 8003706:	9302      	str	r3, [sp, #8]
 8003708:	4b1c      	ldr	r3, [pc, #112]	@ (800377c <main+0x118>)
 800370a:	9301      	str	r3, [sp, #4]
 800370c:	4b1c      	ldr	r3, [pc, #112]	@ (8003780 <main+0x11c>)
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	4623      	mov	r3, r4
 8003712:	460a      	mov	r2, r1
 8003714:	4913      	ldr	r1, [pc, #76]	@ (8003764 <main+0x100>)
 8003716:	f7ff fa18 	bl	8002b4a <LTC6811_set_cfgr>
	for (main_current_ic = 0; main_current_ic < TOTAL_IC; main_current_ic++) {
 800371a:	79fb      	ldrb	r3, [r7, #7]
 800371c:	3301      	adds	r3, #1
 800371e:	71fb      	strb	r3, [r7, #7]
 8003720:	79fb      	ldrb	r3, [r7, #7]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d9e3      	bls.n	80036ee <main+0x8a>
				DCCBITS_A, DCTOBITS, UV, OV);
	}
	LTC6811_wrcfg(TOTAL_IC, BMS_IC);
 8003726:	490f      	ldr	r1, [pc, #60]	@ (8003764 <main+0x100>)
 8003728:	2002      	movs	r0, #2
 800372a:	f7ff f9e1 	bl	8002af0 <LTC6811_wrcfg>
	LTC6811_reset_crc_count(TOTAL_IC, BMS_IC);
 800372e:	490d      	ldr	r1, [pc, #52]	@ (8003764 <main+0x100>)
 8003730:	2002      	movs	r0, #2
 8003732:	f7ff f9ec 	bl	8002b0e <LTC6811_reset_crc_count>
	LTC6811_init_reg_limits(TOTAL_IC, BMS_IC);
 8003736:	490b      	ldr	r1, [pc, #44]	@ (8003764 <main+0x100>)
 8003738:	2002      	movs	r0, #2
 800373a:	f7ff f980 	bl	8002a3e <LTC6811_init_reg_limits>

  //--------------------------------------------------------------//

  /* Initialize the display module */
  Display_Init();
 800373e:	f7fd f963 	bl	8000a08 <Display_Init>

  /* Display the main title page */
  Display_MainTitlePage();
 8003742:	f7fd f989 	bl	8000a58 <Display_MainTitlePage>

  /* Initialize the expander at address 0x20 by configuring all its pins as outputs */
  Expander_InitAllDevices(&hi2c2);
 8003746:	480f      	ldr	r0, [pc, #60]	@ (8003784 <main+0x120>)
 8003748:	f7ff f944 	bl	80029d4 <Expander_InitAllDevices>
  Expander_InitAllDevices(&hi2c3);
 800374c:	480e      	ldr	r0, [pc, #56]	@ (8003788 <main+0x124>)
 800374e:	f7ff f941 	bl	80029d4 <Expander_InitAllDevices>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LED_Test_All();
 8003752:	f7fd f845 	bl	80007e0 <LED_Test_All>
	  HAL_Delay(500);
 8003756:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800375a:	f001 fa67 	bl	8004c2c <HAL_Delay>
	  LED_Test_All();
 800375e:	bf00      	nop
 8003760:	e7f7      	b.n	8003752 <main+0xee>
 8003762:	bf00      	nop
 8003764:	20000e78 	.word	0x20000e78
 8003768:	20000560 	.word	0x20000560
 800376c:	20001080 	.word	0x20001080
 8003770:	2000056a 	.word	0x2000056a
 8003774:	2000056c 	.word	0x2000056c
 8003778:	20000570 	.word	0x20000570
 800377c:	20001084 	.word	0x20001084
 8003780:	20000564 	.word	0x20000564
 8003784:	20000b50 	.word	0x20000b50
 8003788:	20000ba4 	.word	0x20000ba4

0800378c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b094      	sub	sp, #80	@ 0x50
 8003790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003792:	f107 0320 	add.w	r3, r7, #32
 8003796:	2230      	movs	r2, #48	@ 0x30
 8003798:	2100      	movs	r1, #0
 800379a:	4618      	mov	r0, r3
 800379c:	f005 f94c 	bl	8008a38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037a0:	f107 030c 	add.w	r3, r7, #12
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	605a      	str	r2, [r3, #4]
 80037aa:	609a      	str	r2, [r3, #8]
 80037ac:	60da      	str	r2, [r3, #12]
 80037ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80037b0:	2300      	movs	r3, #0
 80037b2:	60bb      	str	r3, [r7, #8]
 80037b4:	4b29      	ldr	r3, [pc, #164]	@ (800385c <SystemClock_Config+0xd0>)
 80037b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b8:	4a28      	ldr	r2, [pc, #160]	@ (800385c <SystemClock_Config+0xd0>)
 80037ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037be:	6413      	str	r3, [r2, #64]	@ 0x40
 80037c0:	4b26      	ldr	r3, [pc, #152]	@ (800385c <SystemClock_Config+0xd0>)
 80037c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037c8:	60bb      	str	r3, [r7, #8]
 80037ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80037cc:	2300      	movs	r3, #0
 80037ce:	607b      	str	r3, [r7, #4]
 80037d0:	4b23      	ldr	r3, [pc, #140]	@ (8003860 <SystemClock_Config+0xd4>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80037d8:	4a21      	ldr	r2, [pc, #132]	@ (8003860 <SystemClock_Config+0xd4>)
 80037da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037de:	6013      	str	r3, [r2, #0]
 80037e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003860 <SystemClock_Config+0xd4>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80037e8:	607b      	str	r3, [r7, #4]
 80037ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80037ec:	2302      	movs	r3, #2
 80037ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037f0:	2301      	movs	r3, #1
 80037f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80037f4:	2310      	movs	r3, #16
 80037f6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037f8:	2302      	movs	r3, #2
 80037fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80037fc:	2300      	movs	r3, #0
 80037fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8003800:	230f      	movs	r3, #15
 8003802:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8003804:	2390      	movs	r3, #144	@ 0x90
 8003806:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003808:	2302      	movs	r3, #2
 800380a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800380c:	2305      	movs	r3, #5
 800380e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003810:	f107 0320 	add.w	r3, r7, #32
 8003814:	4618      	mov	r0, r3
 8003816:	f003 f96b 	bl	8006af0 <HAL_RCC_OscConfig>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003820:	f000 fd1c 	bl	800425c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003824:	230f      	movs	r3, #15
 8003826:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003828:	2302      	movs	r3, #2
 800382a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003830:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003834:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003836:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800383a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800383c:	f107 030c 	add.w	r3, r7, #12
 8003840:	2102      	movs	r1, #2
 8003842:	4618      	mov	r0, r3
 8003844:	f003 fbcc 	bl	8006fe0 <HAL_RCC_ClockConfig>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800384e:	f000 fd05 	bl	800425c <Error_Handler>
  }
}
 8003852:	bf00      	nop
 8003854:	3750      	adds	r7, #80	@ 0x50
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40023800 	.word	0x40023800
 8003860:	40007000 	.word	0x40007000

08003864 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003868:	4b17      	ldr	r3, [pc, #92]	@ (80038c8 <MX_CAN1_Init+0x64>)
 800386a:	4a18      	ldr	r2, [pc, #96]	@ (80038cc <MX_CAN1_Init+0x68>)
 800386c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 800386e:	4b16      	ldr	r3, [pc, #88]	@ (80038c8 <MX_CAN1_Init+0x64>)
 8003870:	220a      	movs	r2, #10
 8003872:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003874:	4b14      	ldr	r3, [pc, #80]	@ (80038c8 <MX_CAN1_Init+0x64>)
 8003876:	2200      	movs	r2, #0
 8003878:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800387a:	4b13      	ldr	r3, [pc, #76]	@ (80038c8 <MX_CAN1_Init+0x64>)
 800387c:	2200      	movs	r2, #0
 800387e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8003880:	4b11      	ldr	r3, [pc, #68]	@ (80038c8 <MX_CAN1_Init+0x64>)
 8003882:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8003886:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8003888:	4b0f      	ldr	r3, [pc, #60]	@ (80038c8 <MX_CAN1_Init+0x64>)
 800388a:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 800388e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003890:	4b0d      	ldr	r3, [pc, #52]	@ (80038c8 <MX_CAN1_Init+0x64>)
 8003892:	2200      	movs	r2, #0
 8003894:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003896:	4b0c      	ldr	r3, [pc, #48]	@ (80038c8 <MX_CAN1_Init+0x64>)
 8003898:	2200      	movs	r2, #0
 800389a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800389c:	4b0a      	ldr	r3, [pc, #40]	@ (80038c8 <MX_CAN1_Init+0x64>)
 800389e:	2200      	movs	r2, #0
 80038a0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80038a2:	4b09      	ldr	r3, [pc, #36]	@ (80038c8 <MX_CAN1_Init+0x64>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80038a8:	4b07      	ldr	r3, [pc, #28]	@ (80038c8 <MX_CAN1_Init+0x64>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80038ae:	4b06      	ldr	r3, [pc, #24]	@ (80038c8 <MX_CAN1_Init+0x64>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80038b4:	4804      	ldr	r0, [pc, #16]	@ (80038c8 <MX_CAN1_Init+0x64>)
 80038b6:	f001 f9dd 	bl	8004c74 <HAL_CAN_Init>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80038c0:	f000 fccc 	bl	800425c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80038c4:	bf00      	nop
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	20000aac 	.word	0x20000aac
 80038cc:	40006400 	.word	0x40006400

080038d0 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80038d4:	4b16      	ldr	r3, [pc, #88]	@ (8003930 <MX_CAN2_Init+0x60>)
 80038d6:	4a17      	ldr	r2, [pc, #92]	@ (8003934 <MX_CAN2_Init+0x64>)
 80038d8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 80038da:	4b15      	ldr	r3, [pc, #84]	@ (8003930 <MX_CAN2_Init+0x60>)
 80038dc:	2210      	movs	r2, #16
 80038de:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80038e0:	4b13      	ldr	r3, [pc, #76]	@ (8003930 <MX_CAN2_Init+0x60>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80038e6:	4b12      	ldr	r3, [pc, #72]	@ (8003930 <MX_CAN2_Init+0x60>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80038ec:	4b10      	ldr	r3, [pc, #64]	@ (8003930 <MX_CAN2_Init+0x60>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80038f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003930 <MX_CAN2_Init+0x60>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80038f8:	4b0d      	ldr	r3, [pc, #52]	@ (8003930 <MX_CAN2_Init+0x60>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80038fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003930 <MX_CAN2_Init+0x60>)
 8003900:	2200      	movs	r2, #0
 8003902:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8003904:	4b0a      	ldr	r3, [pc, #40]	@ (8003930 <MX_CAN2_Init+0x60>)
 8003906:	2200      	movs	r2, #0
 8003908:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800390a:	4b09      	ldr	r3, [pc, #36]	@ (8003930 <MX_CAN2_Init+0x60>)
 800390c:	2200      	movs	r2, #0
 800390e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8003910:	4b07      	ldr	r3, [pc, #28]	@ (8003930 <MX_CAN2_Init+0x60>)
 8003912:	2200      	movs	r2, #0
 8003914:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8003916:	4b06      	ldr	r3, [pc, #24]	@ (8003930 <MX_CAN2_Init+0x60>)
 8003918:	2200      	movs	r2, #0
 800391a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800391c:	4804      	ldr	r0, [pc, #16]	@ (8003930 <MX_CAN2_Init+0x60>)
 800391e:	f001 f9a9 	bl	8004c74 <HAL_CAN_Init>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8003928:	f000 fc98 	bl	800425c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800392c:	bf00      	nop
 800392e:	bd80      	pop	{r7, pc}
 8003930:	20000ad4 	.word	0x20000ad4
 8003934:	40006800 	.word	0x40006800

08003938 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800393c:	4b1b      	ldr	r3, [pc, #108]	@ (80039ac <MX_I2C1_Init+0x74>)
 800393e:	4a1c      	ldr	r2, [pc, #112]	@ (80039b0 <MX_I2C1_Init+0x78>)
 8003940:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003942:	4b1a      	ldr	r3, [pc, #104]	@ (80039ac <MX_I2C1_Init+0x74>)
 8003944:	4a1b      	ldr	r2, [pc, #108]	@ (80039b4 <MX_I2C1_Init+0x7c>)
 8003946:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003948:	4b18      	ldr	r3, [pc, #96]	@ (80039ac <MX_I2C1_Init+0x74>)
 800394a:	2200      	movs	r2, #0
 800394c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800394e:	4b17      	ldr	r3, [pc, #92]	@ (80039ac <MX_I2C1_Init+0x74>)
 8003950:	2200      	movs	r2, #0
 8003952:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003954:	4b15      	ldr	r3, [pc, #84]	@ (80039ac <MX_I2C1_Init+0x74>)
 8003956:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800395a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800395c:	4b13      	ldr	r3, [pc, #76]	@ (80039ac <MX_I2C1_Init+0x74>)
 800395e:	2200      	movs	r2, #0
 8003960:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003962:	4b12      	ldr	r3, [pc, #72]	@ (80039ac <MX_I2C1_Init+0x74>)
 8003964:	2200      	movs	r2, #0
 8003966:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003968:	4b10      	ldr	r3, [pc, #64]	@ (80039ac <MX_I2C1_Init+0x74>)
 800396a:	2200      	movs	r2, #0
 800396c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800396e:	4b0f      	ldr	r3, [pc, #60]	@ (80039ac <MX_I2C1_Init+0x74>)
 8003970:	2200      	movs	r2, #0
 8003972:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003974:	480d      	ldr	r0, [pc, #52]	@ (80039ac <MX_I2C1_Init+0x74>)
 8003976:	f002 f81b 	bl	80059b0 <HAL_I2C_Init>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003980:	f000 fc6c 	bl	800425c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003984:	2100      	movs	r1, #0
 8003986:	4809      	ldr	r0, [pc, #36]	@ (80039ac <MX_I2C1_Init+0x74>)
 8003988:	f003 f836 	bl	80069f8 <HAL_I2CEx_ConfigAnalogFilter>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8003992:	f000 fc63 	bl	800425c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003996:	2100      	movs	r1, #0
 8003998:	4804      	ldr	r0, [pc, #16]	@ (80039ac <MX_I2C1_Init+0x74>)
 800399a:	f003 f869 	bl	8006a70 <HAL_I2CEx_ConfigDigitalFilter>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80039a4:	f000 fc5a 	bl	800425c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80039a8:	bf00      	nop
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	20000afc 	.word	0x20000afc
 80039b0:	40005400 	.word	0x40005400
 80039b4:	000186a0 	.word	0x000186a0

080039b8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80039bc:	4b1b      	ldr	r3, [pc, #108]	@ (8003a2c <MX_I2C2_Init+0x74>)
 80039be:	4a1c      	ldr	r2, [pc, #112]	@ (8003a30 <MX_I2C2_Init+0x78>)
 80039c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80039c2:	4b1a      	ldr	r3, [pc, #104]	@ (8003a2c <MX_I2C2_Init+0x74>)
 80039c4:	4a1b      	ldr	r2, [pc, #108]	@ (8003a34 <MX_I2C2_Init+0x7c>)
 80039c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80039c8:	4b18      	ldr	r3, [pc, #96]	@ (8003a2c <MX_I2C2_Init+0x74>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80039ce:	4b17      	ldr	r3, [pc, #92]	@ (8003a2c <MX_I2C2_Init+0x74>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80039d4:	4b15      	ldr	r3, [pc, #84]	@ (8003a2c <MX_I2C2_Init+0x74>)
 80039d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80039da:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80039dc:	4b13      	ldr	r3, [pc, #76]	@ (8003a2c <MX_I2C2_Init+0x74>)
 80039de:	2200      	movs	r2, #0
 80039e0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80039e2:	4b12      	ldr	r3, [pc, #72]	@ (8003a2c <MX_I2C2_Init+0x74>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80039e8:	4b10      	ldr	r3, [pc, #64]	@ (8003a2c <MX_I2C2_Init+0x74>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80039ee:	4b0f      	ldr	r3, [pc, #60]	@ (8003a2c <MX_I2C2_Init+0x74>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80039f4:	480d      	ldr	r0, [pc, #52]	@ (8003a2c <MX_I2C2_Init+0x74>)
 80039f6:	f001 ffdb 	bl	80059b0 <HAL_I2C_Init>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003a00:	f000 fc2c 	bl	800425c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003a04:	2100      	movs	r1, #0
 8003a06:	4809      	ldr	r0, [pc, #36]	@ (8003a2c <MX_I2C2_Init+0x74>)
 8003a08:	f002 fff6 	bl	80069f8 <HAL_I2CEx_ConfigAnalogFilter>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8003a12:	f000 fc23 	bl	800425c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003a16:	2100      	movs	r1, #0
 8003a18:	4804      	ldr	r0, [pc, #16]	@ (8003a2c <MX_I2C2_Init+0x74>)
 8003a1a:	f003 f829 	bl	8006a70 <HAL_I2CEx_ConfigDigitalFilter>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8003a24:	f000 fc1a 	bl	800425c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003a28:	bf00      	nop
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	20000b50 	.word	0x20000b50
 8003a30:	40005800 	.word	0x40005800
 8003a34:	00061a80 	.word	0x00061a80

08003a38 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003a3c:	4b1b      	ldr	r3, [pc, #108]	@ (8003aac <MX_I2C3_Init+0x74>)
 8003a3e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ab0 <MX_I2C3_Init+0x78>)
 8003a40:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8003a42:	4b1a      	ldr	r3, [pc, #104]	@ (8003aac <MX_I2C3_Init+0x74>)
 8003a44:	4a1b      	ldr	r2, [pc, #108]	@ (8003ab4 <MX_I2C3_Init+0x7c>)
 8003a46:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003a48:	4b18      	ldr	r3, [pc, #96]	@ (8003aac <MX_I2C3_Init+0x74>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003a4e:	4b17      	ldr	r3, [pc, #92]	@ (8003aac <MX_I2C3_Init+0x74>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a54:	4b15      	ldr	r3, [pc, #84]	@ (8003aac <MX_I2C3_Init+0x74>)
 8003a56:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003a5a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a5c:	4b13      	ldr	r3, [pc, #76]	@ (8003aac <MX_I2C3_Init+0x74>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003a62:	4b12      	ldr	r3, [pc, #72]	@ (8003aac <MX_I2C3_Init+0x74>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a68:	4b10      	ldr	r3, [pc, #64]	@ (8003aac <MX_I2C3_Init+0x74>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8003aac <MX_I2C3_Init+0x74>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003a74:	480d      	ldr	r0, [pc, #52]	@ (8003aac <MX_I2C3_Init+0x74>)
 8003a76:	f001 ff9b 	bl	80059b0 <HAL_I2C_Init>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003a80:	f000 fbec 	bl	800425c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003a84:	2100      	movs	r1, #0
 8003a86:	4809      	ldr	r0, [pc, #36]	@ (8003aac <MX_I2C3_Init+0x74>)
 8003a88:	f002 ffb6 	bl	80069f8 <HAL_I2CEx_ConfigAnalogFilter>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8003a92:	f000 fbe3 	bl	800425c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003a96:	2100      	movs	r1, #0
 8003a98:	4804      	ldr	r0, [pc, #16]	@ (8003aac <MX_I2C3_Init+0x74>)
 8003a9a:	f002 ffe9 	bl	8006a70 <HAL_I2CEx_ConfigDigitalFilter>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8003aa4:	f000 fbda 	bl	800425c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003aa8:	bf00      	nop
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	20000ba4 	.word	0x20000ba4
 8003ab0:	40005c00 	.word	0x40005c00
 8003ab4:	00061a80 	.word	0x00061a80

08003ab8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003abc:	4b17      	ldr	r3, [pc, #92]	@ (8003b1c <MX_SPI1_Init+0x64>)
 8003abe:	4a18      	ldr	r2, [pc, #96]	@ (8003b20 <MX_SPI1_Init+0x68>)
 8003ac0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003ac2:	4b16      	ldr	r3, [pc, #88]	@ (8003b1c <MX_SPI1_Init+0x64>)
 8003ac4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003ac8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003aca:	4b14      	ldr	r3, [pc, #80]	@ (8003b1c <MX_SPI1_Init+0x64>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ad0:	4b12      	ldr	r3, [pc, #72]	@ (8003b1c <MX_SPI1_Init+0x64>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ad6:	4b11      	ldr	r3, [pc, #68]	@ (8003b1c <MX_SPI1_Init+0x64>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003adc:	4b0f      	ldr	r3, [pc, #60]	@ (8003b1c <MX_SPI1_Init+0x64>)
 8003ade:	2201      	movs	r2, #1
 8003ae0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8003b1c <MX_SPI1_Init+0x64>)
 8003ae4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ae8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003aea:	4b0c      	ldr	r3, [pc, #48]	@ (8003b1c <MX_SPI1_Init+0x64>)
 8003aec:	2228      	movs	r2, #40	@ 0x28
 8003aee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003af0:	4b0a      	ldr	r3, [pc, #40]	@ (8003b1c <MX_SPI1_Init+0x64>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003af6:	4b09      	ldr	r3, [pc, #36]	@ (8003b1c <MX_SPI1_Init+0x64>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003afc:	4b07      	ldr	r3, [pc, #28]	@ (8003b1c <MX_SPI1_Init+0x64>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003b02:	4b06      	ldr	r3, [pc, #24]	@ (8003b1c <MX_SPI1_Init+0x64>)
 8003b04:	220a      	movs	r2, #10
 8003b06:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003b08:	4804      	ldr	r0, [pc, #16]	@ (8003b1c <MX_SPI1_Init+0x64>)
 8003b0a:	f003 fc49 	bl	80073a0 <HAL_SPI_Init>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003b14:	f000 fba2 	bl	800425c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003b18:	bf00      	nop
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	20000bf8 	.word	0x20000bf8
 8003b20:	40013000 	.word	0x40013000

08003b24 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003b28:	4b17      	ldr	r3, [pc, #92]	@ (8003b88 <MX_SPI2_Init+0x64>)
 8003b2a:	4a18      	ldr	r2, [pc, #96]	@ (8003b8c <MX_SPI2_Init+0x68>)
 8003b2c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003b2e:	4b16      	ldr	r3, [pc, #88]	@ (8003b88 <MX_SPI2_Init+0x64>)
 8003b30:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003b34:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003b36:	4b14      	ldr	r3, [pc, #80]	@ (8003b88 <MX_SPI2_Init+0x64>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b3c:	4b12      	ldr	r3, [pc, #72]	@ (8003b88 <MX_SPI2_Init+0x64>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b42:	4b11      	ldr	r3, [pc, #68]	@ (8003b88 <MX_SPI2_Init+0x64>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003b48:	4b0f      	ldr	r3, [pc, #60]	@ (8003b88 <MX_SPI2_Init+0x64>)
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8003b88 <MX_SPI2_Init+0x64>)
 8003b50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b54:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003b56:	4b0c      	ldr	r3, [pc, #48]	@ (8003b88 <MX_SPI2_Init+0x64>)
 8003b58:	2218      	movs	r2, #24
 8003b5a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b88 <MX_SPI2_Init+0x64>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b62:	4b09      	ldr	r3, [pc, #36]	@ (8003b88 <MX_SPI2_Init+0x64>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b68:	4b07      	ldr	r3, [pc, #28]	@ (8003b88 <MX_SPI2_Init+0x64>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003b6e:	4b06      	ldr	r3, [pc, #24]	@ (8003b88 <MX_SPI2_Init+0x64>)
 8003b70:	220a      	movs	r2, #10
 8003b72:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003b74:	4804      	ldr	r0, [pc, #16]	@ (8003b88 <MX_SPI2_Init+0x64>)
 8003b76:	f003 fc13 	bl	80073a0 <HAL_SPI_Init>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003b80:	f000 fb6c 	bl	800425c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003b84:	bf00      	nop
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	20000c50 	.word	0x20000c50
 8003b8c:	40003800 	.word	0x40003800

08003b90 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003b94:	4b17      	ldr	r3, [pc, #92]	@ (8003bf4 <MX_SPI3_Init+0x64>)
 8003b96:	4a18      	ldr	r2, [pc, #96]	@ (8003bf8 <MX_SPI3_Init+0x68>)
 8003b98:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003b9a:	4b16      	ldr	r3, [pc, #88]	@ (8003bf4 <MX_SPI3_Init+0x64>)
 8003b9c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003ba0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003ba2:	4b14      	ldr	r3, [pc, #80]	@ (8003bf4 <MX_SPI3_Init+0x64>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ba8:	4b12      	ldr	r3, [pc, #72]	@ (8003bf4 <MX_SPI3_Init+0x64>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bae:	4b11      	ldr	r3, [pc, #68]	@ (8003bf4 <MX_SPI3_Init+0x64>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8003bf4 <MX_SPI3_Init+0x64>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003bba:	4b0e      	ldr	r3, [pc, #56]	@ (8003bf4 <MX_SPI3_Init+0x64>)
 8003bbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bc0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8003bf4 <MX_SPI3_Init+0x64>)
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8003bf4 <MX_SPI3_Init+0x64>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003bce:	4b09      	ldr	r3, [pc, #36]	@ (8003bf4 <MX_SPI3_Init+0x64>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bd4:	4b07      	ldr	r3, [pc, #28]	@ (8003bf4 <MX_SPI3_Init+0x64>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003bda:	4b06      	ldr	r3, [pc, #24]	@ (8003bf4 <MX_SPI3_Init+0x64>)
 8003bdc:	220a      	movs	r2, #10
 8003bde:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003be0:	4804      	ldr	r0, [pc, #16]	@ (8003bf4 <MX_SPI3_Init+0x64>)
 8003be2:	f003 fbdd 	bl	80073a0 <HAL_SPI_Init>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003bec:	f000 fb36 	bl	800425c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003bf0:	bf00      	nop
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	20000ca8 	.word	0x20000ca8
 8003bf8:	40003c00 	.word	0x40003c00

08003bfc <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8003c00:	4b17      	ldr	r3, [pc, #92]	@ (8003c60 <MX_SPI4_Init+0x64>)
 8003c02:	4a18      	ldr	r2, [pc, #96]	@ (8003c64 <MX_SPI4_Init+0x68>)
 8003c04:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8003c06:	4b16      	ldr	r3, [pc, #88]	@ (8003c60 <MX_SPI4_Init+0x64>)
 8003c08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003c0c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003c0e:	4b14      	ldr	r3, [pc, #80]	@ (8003c60 <MX_SPI4_Init+0x64>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c14:	4b12      	ldr	r3, [pc, #72]	@ (8003c60 <MX_SPI4_Init+0x64>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c1a:	4b11      	ldr	r3, [pc, #68]	@ (8003c60 <MX_SPI4_Init+0x64>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c20:	4b0f      	ldr	r3, [pc, #60]	@ (8003c60 <MX_SPI4_Init+0x64>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8003c26:	4b0e      	ldr	r3, [pc, #56]	@ (8003c60 <MX_SPI4_Init+0x64>)
 8003c28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c2c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8003c60 <MX_SPI4_Init+0x64>)
 8003c30:	2230      	movs	r2, #48	@ 0x30
 8003c32:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c34:	4b0a      	ldr	r3, [pc, #40]	@ (8003c60 <MX_SPI4_Init+0x64>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c3a:	4b09      	ldr	r3, [pc, #36]	@ (8003c60 <MX_SPI4_Init+0x64>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c40:	4b07      	ldr	r3, [pc, #28]	@ (8003c60 <MX_SPI4_Init+0x64>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 8003c46:	4b06      	ldr	r3, [pc, #24]	@ (8003c60 <MX_SPI4_Init+0x64>)
 8003c48:	220a      	movs	r2, #10
 8003c4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003c4c:	4804      	ldr	r0, [pc, #16]	@ (8003c60 <MX_SPI4_Init+0x64>)
 8003c4e:	f003 fba7 	bl	80073a0 <HAL_SPI_Init>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8003c58:	f000 fb00 	bl	800425c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8003c5c:	bf00      	nop
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	20000d00 	.word	0x20000d00
 8003c64:	40013400 	.word	0x40013400

08003c68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003c6c:	4b11      	ldr	r3, [pc, #68]	@ (8003cb4 <MX_USART1_UART_Init+0x4c>)
 8003c6e:	4a12      	ldr	r2, [pc, #72]	@ (8003cb8 <MX_USART1_UART_Init+0x50>)
 8003c70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003c72:	4b10      	ldr	r3, [pc, #64]	@ (8003cb4 <MX_USART1_UART_Init+0x4c>)
 8003c74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003c78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8003cb4 <MX_USART1_UART_Init+0x4c>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c80:	4b0c      	ldr	r3, [pc, #48]	@ (8003cb4 <MX_USART1_UART_Init+0x4c>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c86:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb4 <MX_USART1_UART_Init+0x4c>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c8c:	4b09      	ldr	r3, [pc, #36]	@ (8003cb4 <MX_USART1_UART_Init+0x4c>)
 8003c8e:	220c      	movs	r2, #12
 8003c90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c92:	4b08      	ldr	r3, [pc, #32]	@ (8003cb4 <MX_USART1_UART_Init+0x4c>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c98:	4b06      	ldr	r3, [pc, #24]	@ (8003cb4 <MX_USART1_UART_Init+0x4c>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c9e:	4805      	ldr	r0, [pc, #20]	@ (8003cb4 <MX_USART1_UART_Init+0x4c>)
 8003ca0:	f003 fe28 	bl	80078f4 <HAL_UART_Init>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003caa:	f000 fad7 	bl	800425c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003cae:	bf00      	nop
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	20000d58 	.word	0x20000d58
 8003cb8:	40011000 	.word	0x40011000

08003cbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003cc0:	4b11      	ldr	r3, [pc, #68]	@ (8003d08 <MX_USART2_UART_Init+0x4c>)
 8003cc2:	4a12      	ldr	r2, [pc, #72]	@ (8003d0c <MX_USART2_UART_Init+0x50>)
 8003cc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003cc6:	4b10      	ldr	r3, [pc, #64]	@ (8003d08 <MX_USART2_UART_Init+0x4c>)
 8003cc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003ccc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003cce:	4b0e      	ldr	r3, [pc, #56]	@ (8003d08 <MX_USART2_UART_Init+0x4c>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8003d08 <MX_USART2_UART_Init+0x4c>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003cda:	4b0b      	ldr	r3, [pc, #44]	@ (8003d08 <MX_USART2_UART_Init+0x4c>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003ce0:	4b09      	ldr	r3, [pc, #36]	@ (8003d08 <MX_USART2_UART_Init+0x4c>)
 8003ce2:	220c      	movs	r2, #12
 8003ce4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ce6:	4b08      	ldr	r3, [pc, #32]	@ (8003d08 <MX_USART2_UART_Init+0x4c>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cec:	4b06      	ldr	r3, [pc, #24]	@ (8003d08 <MX_USART2_UART_Init+0x4c>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003cf2:	4805      	ldr	r0, [pc, #20]	@ (8003d08 <MX_USART2_UART_Init+0x4c>)
 8003cf4:	f003 fdfe 	bl	80078f4 <HAL_UART_Init>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003cfe:	f000 faad 	bl	800425c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003d02:	bf00      	nop
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	20000da0 	.word	0x20000da0
 8003d0c:	40004400 	.word	0x40004400

08003d10 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003d14:	4b11      	ldr	r3, [pc, #68]	@ (8003d5c <MX_USART3_UART_Init+0x4c>)
 8003d16:	4a12      	ldr	r2, [pc, #72]	@ (8003d60 <MX_USART3_UART_Init+0x50>)
 8003d18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003d1a:	4b10      	ldr	r3, [pc, #64]	@ (8003d5c <MX_USART3_UART_Init+0x4c>)
 8003d1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003d20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003d22:	4b0e      	ldr	r3, [pc, #56]	@ (8003d5c <MX_USART3_UART_Init+0x4c>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003d28:	4b0c      	ldr	r3, [pc, #48]	@ (8003d5c <MX_USART3_UART_Init+0x4c>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d5c <MX_USART3_UART_Init+0x4c>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003d34:	4b09      	ldr	r3, [pc, #36]	@ (8003d5c <MX_USART3_UART_Init+0x4c>)
 8003d36:	220c      	movs	r2, #12
 8003d38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d3a:	4b08      	ldr	r3, [pc, #32]	@ (8003d5c <MX_USART3_UART_Init+0x4c>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d40:	4b06      	ldr	r3, [pc, #24]	@ (8003d5c <MX_USART3_UART_Init+0x4c>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003d46:	4805      	ldr	r0, [pc, #20]	@ (8003d5c <MX_USART3_UART_Init+0x4c>)
 8003d48:	f003 fdd4 	bl	80078f4 <HAL_UART_Init>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003d52:	f000 fa83 	bl	800425c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003d56:	bf00      	nop
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	20000de8 	.word	0x20000de8
 8003d60:	40004800 	.word	0x40004800

08003d64 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003d68:	4b11      	ldr	r3, [pc, #68]	@ (8003db0 <MX_USART6_UART_Init+0x4c>)
 8003d6a:	4a12      	ldr	r2, [pc, #72]	@ (8003db4 <MX_USART6_UART_Init+0x50>)
 8003d6c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003d6e:	4b10      	ldr	r3, [pc, #64]	@ (8003db0 <MX_USART6_UART_Init+0x4c>)
 8003d70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003d74:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003d76:	4b0e      	ldr	r3, [pc, #56]	@ (8003db0 <MX_USART6_UART_Init+0x4c>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003db0 <MX_USART6_UART_Init+0x4c>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003d82:	4b0b      	ldr	r3, [pc, #44]	@ (8003db0 <MX_USART6_UART_Init+0x4c>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003d88:	4b09      	ldr	r3, [pc, #36]	@ (8003db0 <MX_USART6_UART_Init+0x4c>)
 8003d8a:	220c      	movs	r2, #12
 8003d8c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d8e:	4b08      	ldr	r3, [pc, #32]	@ (8003db0 <MX_USART6_UART_Init+0x4c>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d94:	4b06      	ldr	r3, [pc, #24]	@ (8003db0 <MX_USART6_UART_Init+0x4c>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003d9a:	4805      	ldr	r0, [pc, #20]	@ (8003db0 <MX_USART6_UART_Init+0x4c>)
 8003d9c:	f003 fdaa 	bl	80078f4 <HAL_UART_Init>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003da6:	f000 fa59 	bl	800425c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003daa:	bf00      	nop
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	20000e30 	.word	0x20000e30
 8003db4:	40011400 	.word	0x40011400

08003db8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b08e      	sub	sp, #56	@ 0x38
 8003dbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	605a      	str	r2, [r3, #4]
 8003dc8:	609a      	str	r2, [r3, #8]
 8003dca:	60da      	str	r2, [r3, #12]
 8003dcc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003dce:	2300      	movs	r3, #0
 8003dd0:	623b      	str	r3, [r7, #32]
 8003dd2:	4bb6      	ldr	r3, [pc, #728]	@ (80040ac <MX_GPIO_Init+0x2f4>)
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd6:	4ab5      	ldr	r2, [pc, #724]	@ (80040ac <MX_GPIO_Init+0x2f4>)
 8003dd8:	f043 0310 	orr.w	r3, r3, #16
 8003ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dde:	4bb3      	ldr	r3, [pc, #716]	@ (80040ac <MX_GPIO_Init+0x2f4>)
 8003de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de2:	f003 0310 	and.w	r3, r3, #16
 8003de6:	623b      	str	r3, [r7, #32]
 8003de8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003dea:	2300      	movs	r3, #0
 8003dec:	61fb      	str	r3, [r7, #28]
 8003dee:	4baf      	ldr	r3, [pc, #700]	@ (80040ac <MX_GPIO_Init+0x2f4>)
 8003df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df2:	4aae      	ldr	r2, [pc, #696]	@ (80040ac <MX_GPIO_Init+0x2f4>)
 8003df4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dfa:	4bac      	ldr	r3, [pc, #688]	@ (80040ac <MX_GPIO_Init+0x2f4>)
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e02:	61fb      	str	r3, [r7, #28]
 8003e04:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e06:	2300      	movs	r3, #0
 8003e08:	61bb      	str	r3, [r7, #24]
 8003e0a:	4ba8      	ldr	r3, [pc, #672]	@ (80040ac <MX_GPIO_Init+0x2f4>)
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e0e:	4aa7      	ldr	r2, [pc, #668]	@ (80040ac <MX_GPIO_Init+0x2f4>)
 8003e10:	f043 0304 	orr.w	r3, r3, #4
 8003e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e16:	4ba5      	ldr	r3, [pc, #660]	@ (80040ac <MX_GPIO_Init+0x2f4>)
 8003e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1a:	f003 0304 	and.w	r3, r3, #4
 8003e1e:	61bb      	str	r3, [r7, #24]
 8003e20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e22:	2300      	movs	r3, #0
 8003e24:	617b      	str	r3, [r7, #20]
 8003e26:	4ba1      	ldr	r3, [pc, #644]	@ (80040ac <MX_GPIO_Init+0x2f4>)
 8003e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2a:	4aa0      	ldr	r2, [pc, #640]	@ (80040ac <MX_GPIO_Init+0x2f4>)
 8003e2c:	f043 0320 	orr.w	r3, r3, #32
 8003e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e32:	4b9e      	ldr	r3, [pc, #632]	@ (80040ac <MX_GPIO_Init+0x2f4>)
 8003e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e36:	f003 0320 	and.w	r3, r3, #32
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003e3e:	2300      	movs	r3, #0
 8003e40:	613b      	str	r3, [r7, #16]
 8003e42:	4b9a      	ldr	r3, [pc, #616]	@ (80040ac <MX_GPIO_Init+0x2f4>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e46:	4a99      	ldr	r2, [pc, #612]	@ (80040ac <MX_GPIO_Init+0x2f4>)
 8003e48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e4e:	4b97      	ldr	r3, [pc, #604]	@ (80040ac <MX_GPIO_Init+0x2f4>)
 8003e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e56:	613b      	str	r3, [r7, #16]
 8003e58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60fb      	str	r3, [r7, #12]
 8003e5e:	4b93      	ldr	r3, [pc, #588]	@ (80040ac <MX_GPIO_Init+0x2f4>)
 8003e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e62:	4a92      	ldr	r2, [pc, #584]	@ (80040ac <MX_GPIO_Init+0x2f4>)
 8003e64:	f043 0301 	orr.w	r3, r3, #1
 8003e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e6a:	4b90      	ldr	r3, [pc, #576]	@ (80040ac <MX_GPIO_Init+0x2f4>)
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e76:	2300      	movs	r3, #0
 8003e78:	60bb      	str	r3, [r7, #8]
 8003e7a:	4b8c      	ldr	r3, [pc, #560]	@ (80040ac <MX_GPIO_Init+0x2f4>)
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e7e:	4a8b      	ldr	r2, [pc, #556]	@ (80040ac <MX_GPIO_Init+0x2f4>)
 8003e80:	f043 0302 	orr.w	r3, r3, #2
 8003e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e86:	4b89      	ldr	r3, [pc, #548]	@ (80040ac <MX_GPIO_Init+0x2f4>)
 8003e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	60bb      	str	r3, [r7, #8]
 8003e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003e92:	2300      	movs	r3, #0
 8003e94:	607b      	str	r3, [r7, #4]
 8003e96:	4b85      	ldr	r3, [pc, #532]	@ (80040ac <MX_GPIO_Init+0x2f4>)
 8003e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e9a:	4a84      	ldr	r2, [pc, #528]	@ (80040ac <MX_GPIO_Init+0x2f4>)
 8003e9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ea2:	4b82      	ldr	r3, [pc, #520]	@ (80040ac <MX_GPIO_Init+0x2f4>)
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eaa:	607b      	str	r3, [r7, #4]
 8003eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003eae:	2300      	movs	r3, #0
 8003eb0:	603b      	str	r3, [r7, #0]
 8003eb2:	4b7e      	ldr	r3, [pc, #504]	@ (80040ac <MX_GPIO_Init+0x2f4>)
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb6:	4a7d      	ldr	r2, [pc, #500]	@ (80040ac <MX_GPIO_Init+0x2f4>)
 8003eb8:	f043 0308 	orr.w	r3, r3, #8
 8003ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ebe:	4b7b      	ldr	r3, [pc, #492]	@ (80040ac <MX_GPIO_Init+0x2f4>)
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	603b      	str	r3, [r7, #0]
 8003ec8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CELL12_CS_01_Pin|CELL12_CS_02_Pin|CELL12_CS_03_Pin|CELL12_CS_04_Pin
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f240 71fc 	movw	r1, #2044	@ 0x7fc
 8003ed0:	4877      	ldr	r0, [pc, #476]	@ (80040b0 <MX_GPIO_Init+0x2f8>)
 8003ed2:	f001 fd53 	bl	800597c <HAL_GPIO_WritePin>
                          |CELL12_CS_05_Pin|CELL11_CS_10_Pin|CELL11_CS_11_Pin|CELL11_CS_12_Pin
                          |CSU_11_CELLS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, CELL12_CS_06_Pin|CELL12_CS_08_Pin, GPIO_PIN_SET);
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8003edc:	4875      	ldr	r0, [pc, #468]	@ (80040b4 <MX_GPIO_Init+0x2fc>)
 8003ede:	f001 fd4d 	bl	800597c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CELL12_CS_07_Pin|CELL12_TEMP_02_LED_Pin|CELL12_TEMP_01_CS_Pin|SPI3_CS_03_Pin
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f242 0133 	movw	r1, #8243	@ 0x2033
 8003ee8:	4873      	ldr	r0, [pc, #460]	@ (80040b8 <MX_GPIO_Init+0x300>)
 8003eea:	f001 fd47 	bl	800597c <HAL_GPIO_WritePin>
                          |SPI3_CS_02_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, CELL12_CS_09_Pin|CELL12_CS_10_Pin|LED_DC_Y_Pin|LED_DC_G_Pin
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f44f 614f 	mov.w	r1, #3312	@ 0xcf0
 8003ef4:	486f      	ldr	r0, [pc, #444]	@ (80040b4 <MX_GPIO_Init+0x2fc>)
 8003ef6:	f001 fd41 	bl	800597c <HAL_GPIO_WritePin>
                          |LED_PC_Y_Pin|LED_PC_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CELL12_CS_11_Pin|CELL12_CS_12_Pin|CSU_12_CELLS_Pin|CELL12_TEMP_03_CS_Pin
 8003efa:	2201      	movs	r2, #1
 8003efc:	f64f 5147 	movw	r1, #64839	@ 0xfd47
 8003f00:	486e      	ldr	r0, [pc, #440]	@ (80040bc <MX_GPIO_Init+0x304>)
 8003f02:	f001 fd3b 	bl	800597c <HAL_GPIO_WritePin>
                          |CELL12_TEMP_03_LED_Pin|CELL12_TEMP_02_CS_Pin|CELL11_CS_03_Pin|CELL11_CS_04_Pin
                          |CELL11_CS_05_Pin|CELL11_CS_06_Pin|CELL11_CS_07_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_02_Pin|GPIO_03_Pin|GPIO_04_Pin|GPIO_05_Pin
 8003f06:	2200      	movs	r2, #0
 8003f08:	f44f 712e 	mov.w	r1, #696	@ 0x2b8
 8003f0c:	486b      	ldr	r0, [pc, #428]	@ (80040bc <MX_GPIO_Init+0x304>)
 8003f0e:	f001 fd35 	bl	800597c <HAL_GPIO_WritePin>
                          |GPIO_06_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CELL12_TEMP_01_LED_GPIO_Port, CELL12_TEMP_01_LED_Pin, GPIO_PIN_SET);
 8003f12:	2201      	movs	r2, #1
 8003f14:	2101      	movs	r1, #1
 8003f16:	486a      	ldr	r0, [pc, #424]	@ (80040c0 <MX_GPIO_Init+0x308>)
 8003f18:	f001 fd30 	bl	800597c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USART2_ENABLE_GPIO_Port, USART2_ENABLE_Pin, GPIO_PIN_RESET);
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	2102      	movs	r1, #2
 8003f20:	4867      	ldr	r0, [pc, #412]	@ (80040c0 <MX_GPIO_Init+0x308>)
 8003f22:	f001 fd2b 	bl	800597c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_14_Pin|GPIO_07_Pin|LED_01_Pin|LED_02_Pin, GPIO_PIN_RESET);
 8003f26:	2200      	movs	r2, #0
 8003f28:	f24c 010c 	movw	r1, #49164	@ 0xc00c
 8003f2c:	4865      	ldr	r0, [pc, #404]	@ (80040c4 <MX_GPIO_Init+0x30c>)
 8003f2e:	f001 fd25 	bl	800597c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CELL11_CS_01_Pin|CELL11_CS_02_Pin|CELL11_TEMP_03_CS_Pin|CS_Pin, GPIO_PIN_SET);
 8003f32:	2201      	movs	r2, #1
 8003f34:	f648 0103 	movw	r1, #34819	@ 0x8803
 8003f38:	4863      	ldr	r0, [pc, #396]	@ (80040c8 <MX_GPIO_Init+0x310>)
 8003f3a:	f001 fd1f 	bl	800597c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, CELL11_CS_08_Pin|CELL11_CS_09_Pin, GPIO_PIN_SET);
 8003f3e:	2201      	movs	r2, #1
 8003f40:	2103      	movs	r1, #3
 8003f42:	4862      	ldr	r0, [pc, #392]	@ (80040cc <MX_GPIO_Init+0x314>)
 8003f44:	f001 fd1a 	bl	800597c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_09_Pin|GPIO_10_Pin|LED_06_Pin|LED_05_Pin, GPIO_PIN_RESET);
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f648 0103 	movw	r1, #34819	@ 0x8803
 8003f4e:	4858      	ldr	r0, [pc, #352]	@ (80040b0 <MX_GPIO_Init+0x2f8>)
 8003f50:	f001 fd14 	bl	800597c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_11_Pin|GPIO_12_Pin|LED_03_Pin|LED_07_Pin
 8003f54:	2200      	movs	r2, #0
 8003f56:	f244 4138 	movw	r1, #17464	@ 0x4438
 8003f5a:	485b      	ldr	r0, [pc, #364]	@ (80040c8 <MX_GPIO_Init+0x310>)
 8003f5c:	f001 fd0e 	bl	800597c <HAL_GPIO_WritePin>
                          |USART1_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, CELL11_TEMP_03_LED_Pin|CELL11_TEMP_02_CS_Pin|CELL11_TEMP_02_LED_Pin|CELL11_TEMP_01_CS_Pin
 8003f60:	2201      	movs	r2, #1
 8003f62:	f44f 51f2 	mov.w	r1, #7744	@ 0x1e40
 8003f66:	4857      	ldr	r0, [pc, #348]	@ (80040c4 <MX_GPIO_Init+0x30c>)
 8003f68:	f001 fd08 	bl	800597c <HAL_GPIO_WritePin>
                          |CELL11_TEMP_01_LED_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003f72:	4857      	ldr	r0, [pc, #348]	@ (80040d0 <MX_GPIO_Init+0x318>)
 8003f74:	f001 fd02 	bl	800597c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USART3_ENABLE_Pin|DISPLAY_CS_Pin|SPI5_CS_02_Pin|DIP_SWITCH_01_Pin, GPIO_PIN_RESET);
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f640 011c 	movw	r1, #2076	@ 0x81c
 8003f7e:	4854      	ldr	r0, [pc, #336]	@ (80040d0 <MX_GPIO_Init+0x318>)
 8003f80:	f001 fcfc 	bl	800597c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, DISPLAY_IO_1_Pin|DISPLAY_IO_2_Pin|BACKLIGHT_1_Pin|BACKLIGHT_2_Pin
 8003f84:	2200      	movs	r2, #0
 8003f86:	f24e 013c 	movw	r1, #57404	@ 0xe03c
 8003f8a:	4850      	ldr	r0, [pc, #320]	@ (80040cc <MX_GPIO_Init+0x314>)
 8003f8c:	f001 fcf6 	bl	800597c <HAL_GPIO_WritePin>
                          |LED_09_Pin|LED_04_Pin|LED_08_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USART6_ENABLE_GPIO_Port, USART6_ENABLE_Pin, GPIO_PIN_RESET);
 8003f90:	2200      	movs	r2, #0
 8003f92:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003f96:	4848      	ldr	r0, [pc, #288]	@ (80040b8 <MX_GPIO_Init+0x300>)
 8003f98:	f001 fcf0 	bl	800597c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CELL12_CS_01_Pin CELL12_CS_02_Pin CELL12_CS_03_Pin CELL12_CS_04_Pin
                           CELL12_CS_05_Pin CELL11_CS_10_Pin CELL11_CS_11_Pin CELL11_CS_12_Pin
                           CSU_11_CELLS_Pin GPIO_09_Pin GPIO_10_Pin LED_06_Pin
                           LED_05_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_01_Pin|CELL12_CS_02_Pin|CELL12_CS_03_Pin|CELL12_CS_04_Pin
 8003f9c:	f648 73ff 	movw	r3, #36863	@ 0x8fff
 8003fa0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |CELL12_CS_05_Pin|CELL11_CS_10_Pin|CELL11_CS_11_Pin|CELL11_CS_12_Pin
                          |CSU_11_CELLS_Pin|GPIO_09_Pin|GPIO_10_Pin|LED_06_Pin
                          |LED_05_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003faa:	2300      	movs	r3, #0
 8003fac:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003fae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	483e      	ldr	r0, [pc, #248]	@ (80040b0 <MX_GPIO_Init+0x2f8>)
 8003fb6:	f001 fb35 	bl	8005624 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_CS_06_Pin CELL12_CS_08_Pin CELL12_CS_09_Pin CELL12_CS_10_Pin
                           LED_DC_Y_Pin LED_DC_G_Pin LED_PC_Y_Pin LED_PC_G_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_06_Pin|CELL12_CS_08_Pin|CELL12_CS_09_Pin|CELL12_CS_10_Pin
 8003fba:	f44f 637f 	mov.w	r3, #4080	@ 0xff0
 8003fbe:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LED_DC_Y_Pin|LED_DC_G_Pin|LED_PC_Y_Pin|LED_PC_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003fcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4838      	ldr	r0, [pc, #224]	@ (80040b4 <MX_GPIO_Init+0x2fc>)
 8003fd4:	f001 fb26 	bl	8005624 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_CS_07_Pin SPI3_CS_03_Pin SPI3_CS_02_Pin USART6_ENABLE_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_07_Pin|SPI3_CS_03_Pin|SPI3_CS_02_Pin|USART6_ENABLE_Pin;
 8003fd8:	f242 1330 	movw	r3, #8496	@ 0x2130
 8003fdc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fee:	4619      	mov	r1, r3
 8003ff0:	4831      	ldr	r0, [pc, #196]	@ (80040b8 <MX_GPIO_Init+0x300>)
 8003ff2:	f001 fb17 	bl	8005624 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_CS_11_Pin CELL12_CS_12_Pin GPIO_02_Pin GPIO_03_Pin
                           GPIO_04_Pin GPIO_05_Pin GPIO_06_Pin CELL11_CS_03_Pin
                           CELL11_CS_04_Pin CELL11_CS_05_Pin CELL11_CS_06_Pin CELL11_CS_07_Pin */
  GPIO_InitStruct.Pin = CELL12_CS_11_Pin|CELL12_CS_12_Pin|GPIO_02_Pin|GPIO_03_Pin
 8003ff6:	f64f 23bb 	movw	r3, #64187	@ 0xfabb
 8003ffa:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_04_Pin|GPIO_05_Pin|GPIO_06_Pin|CELL11_CS_03_Pin
                          |CELL11_CS_04_Pin|CELL11_CS_05_Pin|CELL11_CS_06_Pin|CELL11_CS_07_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004000:	2300      	movs	r3, #0
 8004002:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004004:	2300      	movs	r3, #0
 8004006:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004008:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800400c:	4619      	mov	r1, r3
 800400e:	482b      	ldr	r0, [pc, #172]	@ (80040bc <MX_GPIO_Init+0x304>)
 8004010:	f001 fb08 	bl	8005624 <HAL_GPIO_Init>

  /*Configure GPIO pin : CSU_12_CELLS_Pin */
  GPIO_InitStruct.Pin = CSU_12_CELLS_Pin;
 8004014:	2304      	movs	r3, #4
 8004016:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004018:	2301      	movs	r3, #1
 800401a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800401c:	2300      	movs	r3, #0
 800401e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004020:	2302      	movs	r3, #2
 8004022:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CSU_12_CELLS_GPIO_Port, &GPIO_InitStruct);
 8004024:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004028:	4619      	mov	r1, r3
 800402a:	4824      	ldr	r0, [pc, #144]	@ (80040bc <MX_GPIO_Init+0x304>)
 800402c:	f001 fafa 	bl	8005624 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL12_TEMP_03_CS_Pin CELL12_TEMP_02_CS_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_03_CS_Pin|CELL12_TEMP_02_CS_Pin;
 8004030:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 8004034:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004036:	2301      	movs	r3, #1
 8004038:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800403a:	2301      	movs	r3, #1
 800403c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800403e:	2303      	movs	r3, #3
 8004040:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004042:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004046:	4619      	mov	r1, r3
 8004048:	481c      	ldr	r0, [pc, #112]	@ (80040bc <MX_GPIO_Init+0x304>)
 800404a:	f001 faeb 	bl	8005624 <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_03_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_03_LED_Pin;
 800404e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004052:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004054:	2301      	movs	r3, #1
 8004056:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004058:	2302      	movs	r3, #2
 800405a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800405c:	2303      	movs	r3, #3
 800405e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_03_LED_GPIO_Port, &GPIO_InitStruct);
 8004060:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004064:	4619      	mov	r1, r3
 8004066:	4815      	ldr	r0, [pc, #84]	@ (80040bc <MX_GPIO_Init+0x304>)
 8004068:	f001 fadc 	bl	8005624 <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_02_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_02_LED_Pin;
 800406c:	2301      	movs	r3, #1
 800406e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004070:	2301      	movs	r3, #1
 8004072:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004074:	2302      	movs	r3, #2
 8004076:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004078:	2303      	movs	r3, #3
 800407a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_02_LED_GPIO_Port, &GPIO_InitStruct);
 800407c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004080:	4619      	mov	r1, r3
 8004082:	480d      	ldr	r0, [pc, #52]	@ (80040b8 <MX_GPIO_Init+0x300>)
 8004084:	f001 face 	bl	8005624 <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_01_CS_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_01_CS_Pin;
 8004088:	2302      	movs	r3, #2
 800408a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800408c:	2301      	movs	r3, #1
 800408e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004090:	2301      	movs	r3, #1
 8004092:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004094:	2303      	movs	r3, #3
 8004096:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_01_CS_GPIO_Port, &GPIO_InitStruct);
 8004098:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800409c:	4619      	mov	r1, r3
 800409e:	4806      	ldr	r0, [pc, #24]	@ (80040b8 <MX_GPIO_Init+0x300>)
 80040a0:	f001 fac0 	bl	8005624 <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL12_TEMP_01_LED_Pin */
  GPIO_InitStruct.Pin = CELL12_TEMP_01_LED_Pin;
 80040a4:	2301      	movs	r3, #1
 80040a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e013      	b.n	80040d4 <MX_GPIO_Init+0x31c>
 80040ac:	40023800 	.word	0x40023800
 80040b0:	40021000 	.word	0x40021000
 80040b4:	40022000 	.word	0x40022000
 80040b8:	40020800 	.word	0x40020800
 80040bc:	40021400 	.word	0x40021400
 80040c0:	40020000 	.word	0x40020000
 80040c4:	40021c00 	.word	0x40021c00
 80040c8:	40020400 	.word	0x40020400
 80040cc:	40021800 	.word	0x40021800
 80040d0:	40020c00 	.word	0x40020c00
 80040d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80040d6:	2302      	movs	r3, #2
 80040d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040da:	2303      	movs	r3, #3
 80040dc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL12_TEMP_01_LED_GPIO_Port, &GPIO_InitStruct);
 80040de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040e2:	4619      	mov	r1, r3
 80040e4:	4858      	ldr	r0, [pc, #352]	@ (8004248 <MX_GPIO_Init+0x490>)
 80040e6:	f001 fa9d 	bl	8005624 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART2_ENABLE_Pin */
  GPIO_InitStruct.Pin = USART2_ENABLE_Pin;
 80040ea:	2302      	movs	r3, #2
 80040ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040ee:	2301      	movs	r3, #1
 80040f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040f6:	2302      	movs	r3, #2
 80040f8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USART2_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80040fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040fe:	4619      	mov	r1, r3
 8004100:	4851      	ldr	r0, [pc, #324]	@ (8004248 <MX_GPIO_Init+0x490>)
 8004102:	f001 fa8f 	bl	8005624 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_14_Pin GPIO_07_Pin LED_01_Pin LED_02_Pin */
  GPIO_InitStruct.Pin = GPIO_14_Pin|GPIO_07_Pin|LED_01_Pin|LED_02_Pin;
 8004106:	f24c 030c 	movw	r3, #49164	@ 0xc00c
 800410a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800410c:	2301      	movs	r3, #1
 800410e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004110:	2300      	movs	r3, #0
 8004112:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004114:	2300      	movs	r3, #0
 8004116:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004118:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800411c:	4619      	mov	r1, r3
 800411e:	484b      	ldr	r0, [pc, #300]	@ (800424c <MX_GPIO_Init+0x494>)
 8004120:	f001 fa80 	bl	8005624 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_CS_01_Pin CELL11_CS_02_Pin GPIO_11_Pin GPIO_12_Pin
                           CS_Pin LED_03_Pin LED_07_Pin USART1_ENABLE_Pin */
  GPIO_InitStruct.Pin = CELL11_CS_01_Pin|CELL11_CS_02_Pin|GPIO_11_Pin|GPIO_12_Pin
 8004124:	f24c 433b 	movw	r3, #50235	@ 0xc43b
 8004128:	627b      	str	r3, [r7, #36]	@ 0x24
                          |CS_Pin|LED_03_Pin|LED_07_Pin|USART1_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800412a:	2301      	movs	r3, #1
 800412c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800412e:	2300      	movs	r3, #0
 8004130:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004132:	2300      	movs	r3, #0
 8004134:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004136:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800413a:	4619      	mov	r1, r3
 800413c:	4844      	ldr	r0, [pc, #272]	@ (8004250 <MX_GPIO_Init+0x498>)
 800413e:	f001 fa71 	bl	8005624 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_CS_08_Pin CELL11_CS_09_Pin DISPLAY_IO_1_Pin DISPLAY_IO_2_Pin
                           BACKLIGHT_1_Pin BACKLIGHT_2_Pin LED_09_Pin LED_04_Pin
                           LED_08_Pin */
  GPIO_InitStruct.Pin = CELL11_CS_08_Pin|CELL11_CS_09_Pin|DISPLAY_IO_1_Pin|DISPLAY_IO_2_Pin
 8004142:	f24e 033f 	movw	r3, #57407	@ 0xe03f
 8004146:	627b      	str	r3, [r7, #36]	@ 0x24
                          |BACKLIGHT_1_Pin|BACKLIGHT_2_Pin|LED_09_Pin|LED_04_Pin
                          |LED_08_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004148:	2301      	movs	r3, #1
 800414a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414c:	2300      	movs	r3, #0
 800414e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004150:	2300      	movs	r3, #0
 8004152:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004154:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004158:	4619      	mov	r1, r3
 800415a:	483e      	ldr	r0, [pc, #248]	@ (8004254 <MX_GPIO_Init+0x49c>)
 800415c:	f001 fa62 	bl	8005624 <HAL_GPIO_Init>

  /*Configure GPIO pin : CELL11_TEMP_03_CS_Pin */
  GPIO_InitStruct.Pin = CELL11_TEMP_03_CS_Pin;
 8004160:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004164:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004166:	2301      	movs	r3, #1
 8004168:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800416a:	2301      	movs	r3, #1
 800416c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800416e:	2303      	movs	r3, #3
 8004170:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CELL11_TEMP_03_CS_GPIO_Port, &GPIO_InitStruct);
 8004172:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004176:	4619      	mov	r1, r3
 8004178:	4835      	ldr	r0, [pc, #212]	@ (8004250 <MX_GPIO_Init+0x498>)
 800417a:	f001 fa53 	bl	8005624 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_TEMP_03_LED_Pin CELL11_TEMP_02_LED_Pin CELL11_TEMP_01_LED_Pin */
  GPIO_InitStruct.Pin = CELL11_TEMP_03_LED_Pin|CELL11_TEMP_02_LED_Pin|CELL11_TEMP_01_LED_Pin;
 800417e:	f44f 53a2 	mov.w	r3, #5184	@ 0x1440
 8004182:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004184:	2301      	movs	r3, #1
 8004186:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004188:	2302      	movs	r3, #2
 800418a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800418c:	2303      	movs	r3, #3
 800418e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004190:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004194:	4619      	mov	r1, r3
 8004196:	482d      	ldr	r0, [pc, #180]	@ (800424c <MX_GPIO_Init+0x494>)
 8004198:	f001 fa44 	bl	8005624 <HAL_GPIO_Init>

  /*Configure GPIO pins : CELL11_TEMP_02_CS_Pin CELL11_TEMP_01_CS_Pin */
  GPIO_InitStruct.Pin = CELL11_TEMP_02_CS_Pin|CELL11_TEMP_01_CS_Pin;
 800419c:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80041a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041a2:	2301      	movs	r3, #1
 80041a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80041a6:	2301      	movs	r3, #1
 80041a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041aa:	2303      	movs	r3, #3
 80041ac:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80041ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041b2:	4619      	mov	r1, r3
 80041b4:	4825      	ldr	r0, [pc, #148]	@ (800424c <MX_GPIO_Init+0x494>)
 80041b6:	f001 fa35 	bl	8005624 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS1_Pin USART3_ENABLE_Pin DISPLAY_CS_Pin SPI5_CS_02_Pin
                           DIP_SWITCH_01_Pin */
  GPIO_InitStruct.Pin = CS1_Pin|USART3_ENABLE_Pin|DISPLAY_CS_Pin|SPI5_CS_02_Pin
 80041ba:	f640 431c 	movw	r3, #3100	@ 0xc1c
 80041be:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DIP_SWITCH_01_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041c0:	2301      	movs	r3, #1
 80041c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c4:	2300      	movs	r3, #0
 80041c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041c8:	2300      	movs	r3, #0
 80041ca:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041d0:	4619      	mov	r1, r3
 80041d2:	4821      	ldr	r0, [pc, #132]	@ (8004258 <MX_GPIO_Init+0x4a0>)
 80041d4:	f001 fa26 	bl	8005624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PUSH_BUTTON_01_Pin PUSH_BUTTON_02_Pin PUSH_BUTTON_03_Pin PUSH_BUTTON_04_Pin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_01_Pin|PUSH_BUTTON_02_Pin|PUSH_BUTTON_03_Pin|PUSH_BUTTON_04_Pin;
 80041d8:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80041dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80041de:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80041e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e4:	2300      	movs	r3, #0
 80041e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041ec:	4619      	mov	r1, r3
 80041ee:	481a      	ldr	r0, [pc, #104]	@ (8004258 <MX_GPIO_Init+0x4a0>)
 80041f0:	f001 fa18 	bl	8005624 <HAL_GPIO_Init>

  /*Configure GPIO pin : CD_Pin */
  GPIO_InitStruct.Pin = CD_Pin;
 80041f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80041f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041fa:	2300      	movs	r3, #0
 80041fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80041fe:	2301      	movs	r3, #1
 8004200:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 8004202:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004206:	4619      	mov	r1, r3
 8004208:	4810      	ldr	r0, [pc, #64]	@ (800424c <MX_GPIO_Init+0x494>)
 800420a:	f001 fa0b 	bl	8005624 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIP_SWITCH_02_Pin DIP_SWITCH_03_Pin DIP_SWITCH_04_Pin */
  GPIO_InitStruct.Pin = DIP_SWITCH_02_Pin|DIP_SWITCH_03_Pin|DIP_SWITCH_04_Pin;
 800420e:	23e0      	movs	r3, #224	@ 0xe0
 8004210:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004212:	2300      	movs	r3, #0
 8004214:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004216:	2300      	movs	r3, #0
 8004218:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800421a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800421e:	4619      	mov	r1, r3
 8004220:	480d      	ldr	r0, [pc, #52]	@ (8004258 <MX_GPIO_Init+0x4a0>)
 8004222:	f001 f9ff 	bl	8005624 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIP_SWITCH_MODE_01_Pin DIP_SWITCH_MODE_02_Pin DIP_SWITCH_MODE_03_Pin DIP_SWITCH_MODE_04_Pin */
  GPIO_InitStruct.Pin = DIP_SWITCH_MODE_01_Pin|DIP_SWITCH_MODE_02_Pin|DIP_SWITCH_MODE_03_Pin|DIP_SWITCH_MODE_04_Pin;
 8004226:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 800422a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800422c:	2300      	movs	r3, #0
 800422e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004230:	2300      	movs	r3, #0
 8004232:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004234:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004238:	4619      	mov	r1, r3
 800423a:	4806      	ldr	r0, [pc, #24]	@ (8004254 <MX_GPIO_Init+0x49c>)
 800423c:	f001 f9f2 	bl	8005624 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004240:	bf00      	nop
 8004242:	3738      	adds	r7, #56	@ 0x38
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	40020000 	.word	0x40020000
 800424c:	40021c00 	.word	0x40021c00
 8004250:	40020400 	.word	0x40020400
 8004254:	40021800 	.word	0x40021800
 8004258:	40020c00 	.word	0x40020c00

0800425c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004260:	b672      	cpsid	i
}
 8004262:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004264:	bf00      	nop
 8004266:	e7fd      	b.n	8004264 <Error_Handler+0x8>

08004268 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800426e:	2300      	movs	r3, #0
 8004270:	607b      	str	r3, [r7, #4]
 8004272:	4b10      	ldr	r3, [pc, #64]	@ (80042b4 <HAL_MspInit+0x4c>)
 8004274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004276:	4a0f      	ldr	r2, [pc, #60]	@ (80042b4 <HAL_MspInit+0x4c>)
 8004278:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800427c:	6453      	str	r3, [r2, #68]	@ 0x44
 800427e:	4b0d      	ldr	r3, [pc, #52]	@ (80042b4 <HAL_MspInit+0x4c>)
 8004280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004282:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004286:	607b      	str	r3, [r7, #4]
 8004288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800428a:	2300      	movs	r3, #0
 800428c:	603b      	str	r3, [r7, #0]
 800428e:	4b09      	ldr	r3, [pc, #36]	@ (80042b4 <HAL_MspInit+0x4c>)
 8004290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004292:	4a08      	ldr	r2, [pc, #32]	@ (80042b4 <HAL_MspInit+0x4c>)
 8004294:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004298:	6413      	str	r3, [r2, #64]	@ 0x40
 800429a:	4b06      	ldr	r3, [pc, #24]	@ (80042b4 <HAL_MspInit+0x4c>)
 800429c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800429e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042a2:	603b      	str	r3, [r7, #0]
 80042a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80042a6:	bf00      	nop
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	40023800 	.word	0x40023800

080042b8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b08c      	sub	sp, #48	@ 0x30
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042c0:	f107 031c 	add.w	r3, r7, #28
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	605a      	str	r2, [r3, #4]
 80042ca:	609a      	str	r2, [r3, #8]
 80042cc:	60da      	str	r2, [r3, #12]
 80042ce:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a4a      	ldr	r2, [pc, #296]	@ (8004400 <HAL_CAN_MspInit+0x148>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d145      	bne.n	8004366 <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80042da:	4b4a      	ldr	r3, [pc, #296]	@ (8004404 <HAL_CAN_MspInit+0x14c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	3301      	adds	r3, #1
 80042e0:	4a48      	ldr	r2, [pc, #288]	@ (8004404 <HAL_CAN_MspInit+0x14c>)
 80042e2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80042e4:	4b47      	ldr	r3, [pc, #284]	@ (8004404 <HAL_CAN_MspInit+0x14c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d10d      	bne.n	8004308 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80042ec:	2300      	movs	r3, #0
 80042ee:	61bb      	str	r3, [r7, #24]
 80042f0:	4b45      	ldr	r3, [pc, #276]	@ (8004408 <HAL_CAN_MspInit+0x150>)
 80042f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f4:	4a44      	ldr	r2, [pc, #272]	@ (8004408 <HAL_CAN_MspInit+0x150>)
 80042f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80042fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80042fc:	4b42      	ldr	r3, [pc, #264]	@ (8004408 <HAL_CAN_MspInit+0x150>)
 80042fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004300:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004304:	61bb      	str	r3, [r7, #24]
 8004306:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004308:	2300      	movs	r3, #0
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	4b3e      	ldr	r3, [pc, #248]	@ (8004408 <HAL_CAN_MspInit+0x150>)
 800430e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004310:	4a3d      	ldr	r2, [pc, #244]	@ (8004408 <HAL_CAN_MspInit+0x150>)
 8004312:	f043 0308 	orr.w	r3, r3, #8
 8004316:	6313      	str	r3, [r2, #48]	@ 0x30
 8004318:	4b3b      	ldr	r3, [pc, #236]	@ (8004408 <HAL_CAN_MspInit+0x150>)
 800431a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800431c:	f003 0308 	and.w	r3, r3, #8
 8004320:	617b      	str	r3, [r7, #20]
 8004322:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004324:	2303      	movs	r3, #3
 8004326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004328:	2302      	movs	r3, #2
 800432a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800432c:	2300      	movs	r3, #0
 800432e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004330:	2303      	movs	r3, #3
 8004332:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004334:	2309      	movs	r3, #9
 8004336:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004338:	f107 031c 	add.w	r3, r7, #28
 800433c:	4619      	mov	r1, r3
 800433e:	4833      	ldr	r0, [pc, #204]	@ (800440c <HAL_CAN_MspInit+0x154>)
 8004340:	f001 f970 	bl	8005624 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8004344:	2200      	movs	r2, #0
 8004346:	2100      	movs	r1, #0
 8004348:	2014      	movs	r0, #20
 800434a:	f001 f8a2 	bl	8005492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800434e:	2014      	movs	r0, #20
 8004350:	f001 f8bb 	bl	80054ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8004354:	2200      	movs	r2, #0
 8004356:	2100      	movs	r1, #0
 8004358:	2015      	movs	r0, #21
 800435a:	f001 f89a 	bl	8005492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800435e:	2015      	movs	r0, #21
 8004360:	f001 f8b3 	bl	80054ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8004364:	e048      	b.n	80043f8 <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a29      	ldr	r2, [pc, #164]	@ (8004410 <HAL_CAN_MspInit+0x158>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d143      	bne.n	80043f8 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8004370:	2300      	movs	r3, #0
 8004372:	613b      	str	r3, [r7, #16]
 8004374:	4b24      	ldr	r3, [pc, #144]	@ (8004408 <HAL_CAN_MspInit+0x150>)
 8004376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004378:	4a23      	ldr	r2, [pc, #140]	@ (8004408 <HAL_CAN_MspInit+0x150>)
 800437a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800437e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004380:	4b21      	ldr	r3, [pc, #132]	@ (8004408 <HAL_CAN_MspInit+0x150>)
 8004382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004384:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004388:	613b      	str	r3, [r7, #16]
 800438a:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800438c:	4b1d      	ldr	r3, [pc, #116]	@ (8004404 <HAL_CAN_MspInit+0x14c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	3301      	adds	r3, #1
 8004392:	4a1c      	ldr	r2, [pc, #112]	@ (8004404 <HAL_CAN_MspInit+0x14c>)
 8004394:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004396:	4b1b      	ldr	r3, [pc, #108]	@ (8004404 <HAL_CAN_MspInit+0x14c>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d10d      	bne.n	80043ba <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800439e:	2300      	movs	r3, #0
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	4b19      	ldr	r3, [pc, #100]	@ (8004408 <HAL_CAN_MspInit+0x150>)
 80043a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a6:	4a18      	ldr	r2, [pc, #96]	@ (8004408 <HAL_CAN_MspInit+0x150>)
 80043a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80043ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80043ae:	4b16      	ldr	r3, [pc, #88]	@ (8004408 <HAL_CAN_MspInit+0x150>)
 80043b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043b6:	60fb      	str	r3, [r7, #12]
 80043b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043ba:	2300      	movs	r3, #0
 80043bc:	60bb      	str	r3, [r7, #8]
 80043be:	4b12      	ldr	r3, [pc, #72]	@ (8004408 <HAL_CAN_MspInit+0x150>)
 80043c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c2:	4a11      	ldr	r2, [pc, #68]	@ (8004408 <HAL_CAN_MspInit+0x150>)
 80043c4:	f043 0302 	orr.w	r3, r3, #2
 80043c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80043ca:	4b0f      	ldr	r3, [pc, #60]	@ (8004408 <HAL_CAN_MspInit+0x150>)
 80043cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	60bb      	str	r3, [r7, #8]
 80043d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80043d6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80043da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043dc:	2302      	movs	r3, #2
 80043de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e0:	2300      	movs	r3, #0
 80043e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043e4:	2303      	movs	r3, #3
 80043e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80043e8:	2309      	movs	r3, #9
 80043ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043ec:	f107 031c 	add.w	r3, r7, #28
 80043f0:	4619      	mov	r1, r3
 80043f2:	4808      	ldr	r0, [pc, #32]	@ (8004414 <HAL_CAN_MspInit+0x15c>)
 80043f4:	f001 f916 	bl	8005624 <HAL_GPIO_Init>
}
 80043f8:	bf00      	nop
 80043fa:	3730      	adds	r7, #48	@ 0x30
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	40006400 	.word	0x40006400
 8004404:	20001090 	.word	0x20001090
 8004408:	40023800 	.word	0x40023800
 800440c:	40020c00 	.word	0x40020c00
 8004410:	40006800 	.word	0x40006800
 8004414:	40020400 	.word	0x40020400

08004418 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b08e      	sub	sp, #56	@ 0x38
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004420:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004424:	2200      	movs	r2, #0
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	605a      	str	r2, [r3, #4]
 800442a:	609a      	str	r2, [r3, #8]
 800442c:	60da      	str	r2, [r3, #12]
 800442e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a4c      	ldr	r2, [pc, #304]	@ (8004568 <HAL_I2C_MspInit+0x150>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d12d      	bne.n	8004496 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800443a:	2300      	movs	r3, #0
 800443c:	623b      	str	r3, [r7, #32]
 800443e:	4b4b      	ldr	r3, [pc, #300]	@ (800456c <HAL_I2C_MspInit+0x154>)
 8004440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004442:	4a4a      	ldr	r2, [pc, #296]	@ (800456c <HAL_I2C_MspInit+0x154>)
 8004444:	f043 0302 	orr.w	r3, r3, #2
 8004448:	6313      	str	r3, [r2, #48]	@ 0x30
 800444a:	4b48      	ldr	r3, [pc, #288]	@ (800456c <HAL_I2C_MspInit+0x154>)
 800444c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	623b      	str	r3, [r7, #32]
 8004454:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004456:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800445a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800445c:	2312      	movs	r3, #18
 800445e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004460:	2300      	movs	r3, #0
 8004462:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004464:	2303      	movs	r3, #3
 8004466:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004468:	2304      	movs	r3, #4
 800446a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800446c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004470:	4619      	mov	r1, r3
 8004472:	483f      	ldr	r0, [pc, #252]	@ (8004570 <HAL_I2C_MspInit+0x158>)
 8004474:	f001 f8d6 	bl	8005624 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004478:	2300      	movs	r3, #0
 800447a:	61fb      	str	r3, [r7, #28]
 800447c:	4b3b      	ldr	r3, [pc, #236]	@ (800456c <HAL_I2C_MspInit+0x154>)
 800447e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004480:	4a3a      	ldr	r2, [pc, #232]	@ (800456c <HAL_I2C_MspInit+0x154>)
 8004482:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004486:	6413      	str	r3, [r2, #64]	@ 0x40
 8004488:	4b38      	ldr	r3, [pc, #224]	@ (800456c <HAL_I2C_MspInit+0x154>)
 800448a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004490:	61fb      	str	r3, [r7, #28]
 8004492:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004494:	e063      	b.n	800455e <HAL_I2C_MspInit+0x146>
  else if(hi2c->Instance==I2C2)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a36      	ldr	r2, [pc, #216]	@ (8004574 <HAL_I2C_MspInit+0x15c>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d12c      	bne.n	80044fa <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80044a0:	2300      	movs	r3, #0
 80044a2:	61bb      	str	r3, [r7, #24]
 80044a4:	4b31      	ldr	r3, [pc, #196]	@ (800456c <HAL_I2C_MspInit+0x154>)
 80044a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a8:	4a30      	ldr	r2, [pc, #192]	@ (800456c <HAL_I2C_MspInit+0x154>)
 80044aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80044b0:	4b2e      	ldr	r3, [pc, #184]	@ (800456c <HAL_I2C_MspInit+0x154>)
 80044b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044b8:	61bb      	str	r3, [r7, #24]
 80044ba:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80044bc:	2330      	movs	r3, #48	@ 0x30
 80044be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044c0:	2312      	movs	r3, #18
 80044c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c4:	2300      	movs	r3, #0
 80044c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044c8:	2303      	movs	r3, #3
 80044ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80044cc:	2304      	movs	r3, #4
 80044ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80044d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044d4:	4619      	mov	r1, r3
 80044d6:	4828      	ldr	r0, [pc, #160]	@ (8004578 <HAL_I2C_MspInit+0x160>)
 80044d8:	f001 f8a4 	bl	8005624 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80044dc:	2300      	movs	r3, #0
 80044de:	617b      	str	r3, [r7, #20]
 80044e0:	4b22      	ldr	r3, [pc, #136]	@ (800456c <HAL_I2C_MspInit+0x154>)
 80044e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e4:	4a21      	ldr	r2, [pc, #132]	@ (800456c <HAL_I2C_MspInit+0x154>)
 80044e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80044ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80044ec:	4b1f      	ldr	r3, [pc, #124]	@ (800456c <HAL_I2C_MspInit+0x154>)
 80044ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044f4:	617b      	str	r3, [r7, #20]
 80044f6:	697b      	ldr	r3, [r7, #20]
}
 80044f8:	e031      	b.n	800455e <HAL_I2C_MspInit+0x146>
  else if(hi2c->Instance==I2C3)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a1f      	ldr	r2, [pc, #124]	@ (800457c <HAL_I2C_MspInit+0x164>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d12c      	bne.n	800455e <HAL_I2C_MspInit+0x146>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004504:	2300      	movs	r3, #0
 8004506:	613b      	str	r3, [r7, #16]
 8004508:	4b18      	ldr	r3, [pc, #96]	@ (800456c <HAL_I2C_MspInit+0x154>)
 800450a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450c:	4a17      	ldr	r2, [pc, #92]	@ (800456c <HAL_I2C_MspInit+0x154>)
 800450e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004512:	6313      	str	r3, [r2, #48]	@ 0x30
 8004514:	4b15      	ldr	r3, [pc, #84]	@ (800456c <HAL_I2C_MspInit+0x154>)
 8004516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004518:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800451c:	613b      	str	r3, [r7, #16]
 800451e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004520:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8004524:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004526:	2312      	movs	r3, #18
 8004528:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452a:	2300      	movs	r3, #0
 800452c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800452e:	2303      	movs	r3, #3
 8004530:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004532:	2304      	movs	r3, #4
 8004534:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004536:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800453a:	4619      	mov	r1, r3
 800453c:	480e      	ldr	r0, [pc, #56]	@ (8004578 <HAL_I2C_MspInit+0x160>)
 800453e:	f001 f871 	bl	8005624 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004542:	2300      	movs	r3, #0
 8004544:	60fb      	str	r3, [r7, #12]
 8004546:	4b09      	ldr	r3, [pc, #36]	@ (800456c <HAL_I2C_MspInit+0x154>)
 8004548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454a:	4a08      	ldr	r2, [pc, #32]	@ (800456c <HAL_I2C_MspInit+0x154>)
 800454c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004550:	6413      	str	r3, [r2, #64]	@ 0x40
 8004552:	4b06      	ldr	r3, [pc, #24]	@ (800456c <HAL_I2C_MspInit+0x154>)
 8004554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004556:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	68fb      	ldr	r3, [r7, #12]
}
 800455e:	bf00      	nop
 8004560:	3738      	adds	r7, #56	@ 0x38
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	40005400 	.word	0x40005400
 800456c:	40023800 	.word	0x40023800
 8004570:	40020400 	.word	0x40020400
 8004574:	40005800 	.word	0x40005800
 8004578:	40021c00 	.word	0x40021c00
 800457c:	40005c00 	.word	0x40005c00

08004580 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b090      	sub	sp, #64	@ 0x40
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004588:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800458c:	2200      	movs	r2, #0
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	605a      	str	r2, [r3, #4]
 8004592:	609a      	str	r2, [r3, #8]
 8004594:	60da      	str	r2, [r3, #12]
 8004596:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a6d      	ldr	r2, [pc, #436]	@ (8004754 <HAL_SPI_MspInit+0x1d4>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d12c      	bne.n	80045fc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80045a2:	2300      	movs	r3, #0
 80045a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045a6:	4b6c      	ldr	r3, [pc, #432]	@ (8004758 <HAL_SPI_MspInit+0x1d8>)
 80045a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045aa:	4a6b      	ldr	r2, [pc, #428]	@ (8004758 <HAL_SPI_MspInit+0x1d8>)
 80045ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80045b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80045b2:	4b69      	ldr	r3, [pc, #420]	@ (8004758 <HAL_SPI_MspInit+0x1d8>)
 80045b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045be:	2300      	movs	r3, #0
 80045c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80045c2:	4b65      	ldr	r3, [pc, #404]	@ (8004758 <HAL_SPI_MspInit+0x1d8>)
 80045c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c6:	4a64      	ldr	r2, [pc, #400]	@ (8004758 <HAL_SPI_MspInit+0x1d8>)
 80045c8:	f043 0301 	orr.w	r3, r3, #1
 80045cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80045ce:	4b62      	ldr	r3, [pc, #392]	@ (8004758 <HAL_SPI_MspInit+0x1d8>)
 80045d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80045d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80045da:	23e0      	movs	r3, #224	@ 0xe0
 80045dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045de:	2302      	movs	r3, #2
 80045e0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e2:	2300      	movs	r3, #0
 80045e4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045e6:	2303      	movs	r3, #3
 80045e8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80045ea:	2305      	movs	r3, #5
 80045ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80045f2:	4619      	mov	r1, r3
 80045f4:	4859      	ldr	r0, [pc, #356]	@ (800475c <HAL_SPI_MspInit+0x1dc>)
 80045f6:	f001 f815 	bl	8005624 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80045fa:	e0a7      	b.n	800474c <HAL_SPI_MspInit+0x1cc>
  else if(hspi->Instance==SPI2)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a57      	ldr	r2, [pc, #348]	@ (8004760 <HAL_SPI_MspInit+0x1e0>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d12c      	bne.n	8004660 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004606:	2300      	movs	r3, #0
 8004608:	623b      	str	r3, [r7, #32]
 800460a:	4b53      	ldr	r3, [pc, #332]	@ (8004758 <HAL_SPI_MspInit+0x1d8>)
 800460c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460e:	4a52      	ldr	r2, [pc, #328]	@ (8004758 <HAL_SPI_MspInit+0x1d8>)
 8004610:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004614:	6413      	str	r3, [r2, #64]	@ 0x40
 8004616:	4b50      	ldr	r3, [pc, #320]	@ (8004758 <HAL_SPI_MspInit+0x1d8>)
 8004618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800461e:	623b      	str	r3, [r7, #32]
 8004620:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004622:	2300      	movs	r3, #0
 8004624:	61fb      	str	r3, [r7, #28]
 8004626:	4b4c      	ldr	r3, [pc, #304]	@ (8004758 <HAL_SPI_MspInit+0x1d8>)
 8004628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462a:	4a4b      	ldr	r2, [pc, #300]	@ (8004758 <HAL_SPI_MspInit+0x1d8>)
 800462c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004630:	6313      	str	r3, [r2, #48]	@ 0x30
 8004632:	4b49      	ldr	r3, [pc, #292]	@ (8004758 <HAL_SPI_MspInit+0x1d8>)
 8004634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800463a:	61fb      	str	r3, [r7, #28]
 800463c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800463e:	230e      	movs	r3, #14
 8004640:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004642:	2302      	movs	r3, #2
 8004644:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004646:	2300      	movs	r3, #0
 8004648:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800464a:	2303      	movs	r3, #3
 800464c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800464e:	2305      	movs	r3, #5
 8004650:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004652:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004656:	4619      	mov	r1, r3
 8004658:	4842      	ldr	r0, [pc, #264]	@ (8004764 <HAL_SPI_MspInit+0x1e4>)
 800465a:	f000 ffe3 	bl	8005624 <HAL_GPIO_Init>
}
 800465e:	e075      	b.n	800474c <HAL_SPI_MspInit+0x1cc>
  else if(hspi->Instance==SPI3)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a40      	ldr	r2, [pc, #256]	@ (8004768 <HAL_SPI_MspInit+0x1e8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d12d      	bne.n	80046c6 <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800466a:	2300      	movs	r3, #0
 800466c:	61bb      	str	r3, [r7, #24]
 800466e:	4b3a      	ldr	r3, [pc, #232]	@ (8004758 <HAL_SPI_MspInit+0x1d8>)
 8004670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004672:	4a39      	ldr	r2, [pc, #228]	@ (8004758 <HAL_SPI_MspInit+0x1d8>)
 8004674:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004678:	6413      	str	r3, [r2, #64]	@ 0x40
 800467a:	4b37      	ldr	r3, [pc, #220]	@ (8004758 <HAL_SPI_MspInit+0x1d8>)
 800467c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004682:	61bb      	str	r3, [r7, #24]
 8004684:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004686:	2300      	movs	r3, #0
 8004688:	617b      	str	r3, [r7, #20]
 800468a:	4b33      	ldr	r3, [pc, #204]	@ (8004758 <HAL_SPI_MspInit+0x1d8>)
 800468c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800468e:	4a32      	ldr	r2, [pc, #200]	@ (8004758 <HAL_SPI_MspInit+0x1d8>)
 8004690:	f043 0304 	orr.w	r3, r3, #4
 8004694:	6313      	str	r3, [r2, #48]	@ 0x30
 8004696:	4b30      	ldr	r3, [pc, #192]	@ (8004758 <HAL_SPI_MspInit+0x1d8>)
 8004698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800469a:	f003 0304 	and.w	r3, r3, #4
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80046a2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80046a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046a8:	2302      	movs	r3, #2
 80046aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ac:	2300      	movs	r3, #0
 80046ae:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046b0:	2303      	movs	r3, #3
 80046b2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80046b4:	2306      	movs	r3, #6
 80046b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80046bc:	4619      	mov	r1, r3
 80046be:	482b      	ldr	r0, [pc, #172]	@ (800476c <HAL_SPI_MspInit+0x1ec>)
 80046c0:	f000 ffb0 	bl	8005624 <HAL_GPIO_Init>
}
 80046c4:	e042      	b.n	800474c <HAL_SPI_MspInit+0x1cc>
  else if(hspi->Instance==SPI4)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a29      	ldr	r2, [pc, #164]	@ (8004770 <HAL_SPI_MspInit+0x1f0>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d13d      	bne.n	800474c <HAL_SPI_MspInit+0x1cc>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80046d0:	2300      	movs	r3, #0
 80046d2:	613b      	str	r3, [r7, #16]
 80046d4:	4b20      	ldr	r3, [pc, #128]	@ (8004758 <HAL_SPI_MspInit+0x1d8>)
 80046d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d8:	4a1f      	ldr	r2, [pc, #124]	@ (8004758 <HAL_SPI_MspInit+0x1d8>)
 80046da:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80046de:	6453      	str	r3, [r2, #68]	@ 0x44
 80046e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004758 <HAL_SPI_MspInit+0x1d8>)
 80046e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046e8:	613b      	str	r3, [r7, #16]
 80046ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80046ec:	2300      	movs	r3, #0
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	4b19      	ldr	r3, [pc, #100]	@ (8004758 <HAL_SPI_MspInit+0x1d8>)
 80046f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f4:	4a18      	ldr	r2, [pc, #96]	@ (8004758 <HAL_SPI_MspInit+0x1d8>)
 80046f6:	f043 0310 	orr.w	r3, r3, #16
 80046fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80046fc:	4b16      	ldr	r3, [pc, #88]	@ (8004758 <HAL_SPI_MspInit+0x1d8>)
 80046fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004700:	f003 0310 	and.w	r3, r3, #16
 8004704:	60fb      	str	r3, [r7, #12]
 8004706:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8004708:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 800470c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800470e:	2302      	movs	r3, #2
 8004710:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004712:	2300      	movs	r3, #0
 8004714:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004716:	2303      	movs	r3, #3
 8004718:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800471a:	2305      	movs	r3, #5
 800471c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800471e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004722:	4619      	mov	r1, r3
 8004724:	4813      	ldr	r0, [pc, #76]	@ (8004774 <HAL_SPI_MspInit+0x1f4>)
 8004726:	f000 ff7d 	bl	8005624 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800472a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800472e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004730:	2302      	movs	r3, #2
 8004732:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004734:	2301      	movs	r3, #1
 8004736:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004738:	2303      	movs	r3, #3
 800473a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800473c:	2305      	movs	r3, #5
 800473e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004740:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004744:	4619      	mov	r1, r3
 8004746:	480b      	ldr	r0, [pc, #44]	@ (8004774 <HAL_SPI_MspInit+0x1f4>)
 8004748:	f000 ff6c 	bl	8005624 <HAL_GPIO_Init>
}
 800474c:	bf00      	nop
 800474e:	3740      	adds	r7, #64	@ 0x40
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	40013000 	.word	0x40013000
 8004758:	40023800 	.word	0x40023800
 800475c:	40020000 	.word	0x40020000
 8004760:	40003800 	.word	0x40003800
 8004764:	40022000 	.word	0x40022000
 8004768:	40003c00 	.word	0x40003c00
 800476c:	40020800 	.word	0x40020800
 8004770:	40013400 	.word	0x40013400
 8004774:	40021000 	.word	0x40021000

08004778 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b090      	sub	sp, #64	@ 0x40
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004780:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	605a      	str	r2, [r3, #4]
 800478a:	609a      	str	r2, [r3, #8]
 800478c:	60da      	str	r2, [r3, #12]
 800478e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a74      	ldr	r2, [pc, #464]	@ (8004968 <HAL_UART_MspInit+0x1f0>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d134      	bne.n	8004804 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800479a:	2300      	movs	r3, #0
 800479c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800479e:	4b73      	ldr	r3, [pc, #460]	@ (800496c <HAL_UART_MspInit+0x1f4>)
 80047a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047a2:	4a72      	ldr	r2, [pc, #456]	@ (800496c <HAL_UART_MspInit+0x1f4>)
 80047a4:	f043 0310 	orr.w	r3, r3, #16
 80047a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80047aa:	4b70      	ldr	r3, [pc, #448]	@ (800496c <HAL_UART_MspInit+0x1f4>)
 80047ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ae:	f003 0310 	and.w	r3, r3, #16
 80047b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047b6:	2300      	movs	r3, #0
 80047b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80047ba:	4b6c      	ldr	r3, [pc, #432]	@ (800496c <HAL_UART_MspInit+0x1f4>)
 80047bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047be:	4a6b      	ldr	r2, [pc, #428]	@ (800496c <HAL_UART_MspInit+0x1f4>)
 80047c0:	f043 0302 	orr.w	r3, r3, #2
 80047c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80047c6:	4b69      	ldr	r3, [pc, #420]	@ (800496c <HAL_UART_MspInit+0x1f4>)
 80047c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80047d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80047d2:	23c0      	movs	r3, #192	@ 0xc0
 80047d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047d6:	2302      	movs	r3, #2
 80047d8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047da:	2300      	movs	r3, #0
 80047dc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047de:	2303      	movs	r3, #3
 80047e0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80047e2:	2307      	movs	r3, #7
 80047e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80047ea:	4619      	mov	r1, r3
 80047ec:	4860      	ldr	r0, [pc, #384]	@ (8004970 <HAL_UART_MspInit+0x1f8>)
 80047ee:	f000 ff19 	bl	8005624 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80047f2:	2200      	movs	r2, #0
 80047f4:	2100      	movs	r1, #0
 80047f6:	2025      	movs	r0, #37	@ 0x25
 80047f8:	f000 fe4b 	bl	8005492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80047fc:	2025      	movs	r0, #37	@ 0x25
 80047fe:	f000 fe64 	bl	80054ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004802:	e0ad      	b.n	8004960 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART2)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a5a      	ldr	r2, [pc, #360]	@ (8004974 <HAL_UART_MspInit+0x1fc>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d134      	bne.n	8004878 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 800480e:	2300      	movs	r3, #0
 8004810:	623b      	str	r3, [r7, #32]
 8004812:	4b56      	ldr	r3, [pc, #344]	@ (800496c <HAL_UART_MspInit+0x1f4>)
 8004814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004816:	4a55      	ldr	r2, [pc, #340]	@ (800496c <HAL_UART_MspInit+0x1f4>)
 8004818:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800481c:	6413      	str	r3, [r2, #64]	@ 0x40
 800481e:	4b53      	ldr	r3, [pc, #332]	@ (800496c <HAL_UART_MspInit+0x1f4>)
 8004820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004826:	623b      	str	r3, [r7, #32]
 8004828:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800482a:	2300      	movs	r3, #0
 800482c:	61fb      	str	r3, [r7, #28]
 800482e:	4b4f      	ldr	r3, [pc, #316]	@ (800496c <HAL_UART_MspInit+0x1f4>)
 8004830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004832:	4a4e      	ldr	r2, [pc, #312]	@ (800496c <HAL_UART_MspInit+0x1f4>)
 8004834:	f043 0301 	orr.w	r3, r3, #1
 8004838:	6313      	str	r3, [r2, #48]	@ 0x30
 800483a:	4b4c      	ldr	r3, [pc, #304]	@ (800496c <HAL_UART_MspInit+0x1f4>)
 800483c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	61fb      	str	r3, [r7, #28]
 8004844:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004846:	230c      	movs	r3, #12
 8004848:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800484a:	2302      	movs	r3, #2
 800484c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800484e:	2300      	movs	r3, #0
 8004850:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004852:	2303      	movs	r3, #3
 8004854:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004856:	2307      	movs	r3, #7
 8004858:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800485a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800485e:	4619      	mov	r1, r3
 8004860:	4845      	ldr	r0, [pc, #276]	@ (8004978 <HAL_UART_MspInit+0x200>)
 8004862:	f000 fedf 	bl	8005624 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004866:	2200      	movs	r2, #0
 8004868:	2100      	movs	r1, #0
 800486a:	2026      	movs	r0, #38	@ 0x26
 800486c:	f000 fe11 	bl	8005492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004870:	2026      	movs	r0, #38	@ 0x26
 8004872:	f000 fe2a 	bl	80054ca <HAL_NVIC_EnableIRQ>
}
 8004876:	e073      	b.n	8004960 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART3)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a3f      	ldr	r2, [pc, #252]	@ (800497c <HAL_UART_MspInit+0x204>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d135      	bne.n	80048ee <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004882:	2300      	movs	r3, #0
 8004884:	61bb      	str	r3, [r7, #24]
 8004886:	4b39      	ldr	r3, [pc, #228]	@ (800496c <HAL_UART_MspInit+0x1f4>)
 8004888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488a:	4a38      	ldr	r2, [pc, #224]	@ (800496c <HAL_UART_MspInit+0x1f4>)
 800488c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004890:	6413      	str	r3, [r2, #64]	@ 0x40
 8004892:	4b36      	ldr	r3, [pc, #216]	@ (800496c <HAL_UART_MspInit+0x1f4>)
 8004894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004896:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800489a:	61bb      	str	r3, [r7, #24]
 800489c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800489e:	2300      	movs	r3, #0
 80048a0:	617b      	str	r3, [r7, #20]
 80048a2:	4b32      	ldr	r3, [pc, #200]	@ (800496c <HAL_UART_MspInit+0x1f4>)
 80048a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a6:	4a31      	ldr	r2, [pc, #196]	@ (800496c <HAL_UART_MspInit+0x1f4>)
 80048a8:	f043 0308 	orr.w	r3, r3, #8
 80048ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80048ae:	4b2f      	ldr	r3, [pc, #188]	@ (800496c <HAL_UART_MspInit+0x1f4>)
 80048b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b2:	f003 0308 	and.w	r3, r3, #8
 80048b6:	617b      	str	r3, [r7, #20]
 80048b8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80048ba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80048be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048c0:	2302      	movs	r3, #2
 80048c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048c4:	2300      	movs	r3, #0
 80048c6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048c8:	2303      	movs	r3, #3
 80048ca:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80048cc:	2307      	movs	r3, #7
 80048ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80048d4:	4619      	mov	r1, r3
 80048d6:	482a      	ldr	r0, [pc, #168]	@ (8004980 <HAL_UART_MspInit+0x208>)
 80048d8:	f000 fea4 	bl	8005624 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80048dc:	2200      	movs	r2, #0
 80048de:	2100      	movs	r1, #0
 80048e0:	2027      	movs	r0, #39	@ 0x27
 80048e2:	f000 fdd6 	bl	8005492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80048e6:	2027      	movs	r0, #39	@ 0x27
 80048e8:	f000 fdef 	bl	80054ca <HAL_NVIC_EnableIRQ>
}
 80048ec:	e038      	b.n	8004960 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART6)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a24      	ldr	r2, [pc, #144]	@ (8004984 <HAL_UART_MspInit+0x20c>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d133      	bne.n	8004960 <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART6_CLK_ENABLE();
 80048f8:	2300      	movs	r3, #0
 80048fa:	613b      	str	r3, [r7, #16]
 80048fc:	4b1b      	ldr	r3, [pc, #108]	@ (800496c <HAL_UART_MspInit+0x1f4>)
 80048fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004900:	4a1a      	ldr	r2, [pc, #104]	@ (800496c <HAL_UART_MspInit+0x1f4>)
 8004902:	f043 0320 	orr.w	r3, r3, #32
 8004906:	6453      	str	r3, [r2, #68]	@ 0x44
 8004908:	4b18      	ldr	r3, [pc, #96]	@ (800496c <HAL_UART_MspInit+0x1f4>)
 800490a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800490c:	f003 0320 	and.w	r3, r3, #32
 8004910:	613b      	str	r3, [r7, #16]
 8004912:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004914:	2300      	movs	r3, #0
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	4b14      	ldr	r3, [pc, #80]	@ (800496c <HAL_UART_MspInit+0x1f4>)
 800491a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800491c:	4a13      	ldr	r2, [pc, #76]	@ (800496c <HAL_UART_MspInit+0x1f4>)
 800491e:	f043 0304 	orr.w	r3, r3, #4
 8004922:	6313      	str	r3, [r2, #48]	@ 0x30
 8004924:	4b11      	ldr	r3, [pc, #68]	@ (800496c <HAL_UART_MspInit+0x1f4>)
 8004926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004930:	23c0      	movs	r3, #192	@ 0xc0
 8004932:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004934:	2302      	movs	r3, #2
 8004936:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004938:	2300      	movs	r3, #0
 800493a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800493c:	2303      	movs	r3, #3
 800493e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004940:	2308      	movs	r3, #8
 8004942:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004944:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004948:	4619      	mov	r1, r3
 800494a:	480f      	ldr	r0, [pc, #60]	@ (8004988 <HAL_UART_MspInit+0x210>)
 800494c:	f000 fe6a 	bl	8005624 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8004950:	2200      	movs	r2, #0
 8004952:	2100      	movs	r1, #0
 8004954:	2047      	movs	r0, #71	@ 0x47
 8004956:	f000 fd9c 	bl	8005492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800495a:	2047      	movs	r0, #71	@ 0x47
 800495c:	f000 fdb5 	bl	80054ca <HAL_NVIC_EnableIRQ>
}
 8004960:	bf00      	nop
 8004962:	3740      	adds	r7, #64	@ 0x40
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	40011000 	.word	0x40011000
 800496c:	40023800 	.word	0x40023800
 8004970:	40020400 	.word	0x40020400
 8004974:	40004400 	.word	0x40004400
 8004978:	40020000 	.word	0x40020000
 800497c:	40004800 	.word	0x40004800
 8004980:	40020c00 	.word	0x40020c00
 8004984:	40011400 	.word	0x40011400
 8004988:	40020800 	.word	0x40020800

0800498c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800498c:	b480      	push	{r7}
 800498e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004990:	bf00      	nop
 8004992:	e7fd      	b.n	8004990 <NMI_Handler+0x4>

08004994 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004998:	bf00      	nop
 800499a:	e7fd      	b.n	8004998 <HardFault_Handler+0x4>

0800499c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800499c:	b480      	push	{r7}
 800499e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049a0:	bf00      	nop
 80049a2:	e7fd      	b.n	80049a0 <MemManage_Handler+0x4>

080049a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049a4:	b480      	push	{r7}
 80049a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049a8:	bf00      	nop
 80049aa:	e7fd      	b.n	80049a8 <BusFault_Handler+0x4>

080049ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049b0:	bf00      	nop
 80049b2:	e7fd      	b.n	80049b0 <UsageFault_Handler+0x4>

080049b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80049b4:	b480      	push	{r7}
 80049b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80049b8:	bf00      	nop
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049c2:	b480      	push	{r7}
 80049c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049c6:	bf00      	nop
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049d0:	b480      	push	{r7}
 80049d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049d4:	bf00      	nop
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049e2:	f000 f903 	bl	8004bec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049e6:	bf00      	nop
 80049e8:	bd80      	pop	{r7, pc}
	...

080049ec <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80049f0:	4802      	ldr	r0, [pc, #8]	@ (80049fc <CAN1_RX0_IRQHandler+0x10>)
 80049f2:	f000 fa3a 	bl	8004e6a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80049f6:	bf00      	nop
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	20000aac 	.word	0x20000aac

08004a00 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004a04:	4802      	ldr	r0, [pc, #8]	@ (8004a10 <CAN1_RX1_IRQHandler+0x10>)
 8004a06:	f000 fa30 	bl	8004e6a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8004a0a:	bf00      	nop
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	20000aac 	.word	0x20000aac

08004a14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004a18:	4802      	ldr	r0, [pc, #8]	@ (8004a24 <USART1_IRQHandler+0x10>)
 8004a1a:	f002 ffbb 	bl	8007994 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004a1e:	bf00      	nop
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	20000d58 	.word	0x20000d58

08004a28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004a2c:	4802      	ldr	r0, [pc, #8]	@ (8004a38 <USART2_IRQHandler+0x10>)
 8004a2e:	f002 ffb1 	bl	8007994 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004a32:	bf00      	nop
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	20000da0 	.word	0x20000da0

08004a3c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004a40:	4802      	ldr	r0, [pc, #8]	@ (8004a4c <USART3_IRQHandler+0x10>)
 8004a42:	f002 ffa7 	bl	8007994 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004a46:	bf00      	nop
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	20000de8 	.word	0x20000de8

08004a50 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004a54:	4802      	ldr	r0, [pc, #8]	@ (8004a60 <USART6_IRQHandler+0x10>)
 8004a56:	f002 ff9d 	bl	8007994 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004a5a:	bf00      	nop
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	20000e30 	.word	0x20000e30

08004a64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a6c:	4a14      	ldr	r2, [pc, #80]	@ (8004ac0 <_sbrk+0x5c>)
 8004a6e:	4b15      	ldr	r3, [pc, #84]	@ (8004ac4 <_sbrk+0x60>)
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a78:	4b13      	ldr	r3, [pc, #76]	@ (8004ac8 <_sbrk+0x64>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d102      	bne.n	8004a86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a80:	4b11      	ldr	r3, [pc, #68]	@ (8004ac8 <_sbrk+0x64>)
 8004a82:	4a12      	ldr	r2, [pc, #72]	@ (8004acc <_sbrk+0x68>)
 8004a84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a86:	4b10      	ldr	r3, [pc, #64]	@ (8004ac8 <_sbrk+0x64>)
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d207      	bcs.n	8004aa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a94:	f003 ffe8 	bl	8008a68 <__errno>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	220c      	movs	r2, #12
 8004a9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004aa2:	e009      	b.n	8004ab8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004aa4:	4b08      	ldr	r3, [pc, #32]	@ (8004ac8 <_sbrk+0x64>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004aaa:	4b07      	ldr	r3, [pc, #28]	@ (8004ac8 <_sbrk+0x64>)
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	4a05      	ldr	r2, [pc, #20]	@ (8004ac8 <_sbrk+0x64>)
 8004ab4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3718      	adds	r7, #24
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	20030000 	.word	0x20030000
 8004ac4:	00000400 	.word	0x00000400
 8004ac8:	20001094 	.word	0x20001094
 8004acc:	200011f8 	.word	0x200011f8

08004ad0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ad4:	4b06      	ldr	r3, [pc, #24]	@ (8004af0 <SystemInit+0x20>)
 8004ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ada:	4a05      	ldr	r2, [pc, #20]	@ (8004af0 <SystemInit+0x20>)
 8004adc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004ae0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ae4:	bf00      	nop
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	e000ed00 	.word	0xe000ed00

08004af4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004af4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004b2c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004af8:	f7ff ffea 	bl	8004ad0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004afc:	480c      	ldr	r0, [pc, #48]	@ (8004b30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004afe:	490d      	ldr	r1, [pc, #52]	@ (8004b34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004b00:	4a0d      	ldr	r2, [pc, #52]	@ (8004b38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b04:	e002      	b.n	8004b0c <LoopCopyDataInit>

08004b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b0a:	3304      	adds	r3, #4

08004b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b10:	d3f9      	bcc.n	8004b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b12:	4a0a      	ldr	r2, [pc, #40]	@ (8004b3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004b14:	4c0a      	ldr	r4, [pc, #40]	@ (8004b40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b18:	e001      	b.n	8004b1e <LoopFillZerobss>

08004b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b1c:	3204      	adds	r2, #4

08004b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b20:	d3fb      	bcc.n	8004b1a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004b22:	f003 ffa7 	bl	8008a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b26:	f7fe fd9d 	bl	8003664 <main>
  bx  lr    
 8004b2a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004b2c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b34:	200005e4 	.word	0x200005e4
  ldr r2, =_sidata
 8004b38:	08009ca8 	.word	0x08009ca8
  ldr r2, =_sbss
 8004b3c:	200005e4 	.word	0x200005e4
  ldr r4, =_ebss
 8004b40:	200011f8 	.word	0x200011f8

08004b44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b44:	e7fe      	b.n	8004b44 <ADC_IRQHandler>
	...

08004b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8004b88 <HAL_Init+0x40>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a0d      	ldr	r2, [pc, #52]	@ (8004b88 <HAL_Init+0x40>)
 8004b52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b58:	4b0b      	ldr	r3, [pc, #44]	@ (8004b88 <HAL_Init+0x40>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a0a      	ldr	r2, [pc, #40]	@ (8004b88 <HAL_Init+0x40>)
 8004b5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b64:	4b08      	ldr	r3, [pc, #32]	@ (8004b88 <HAL_Init+0x40>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a07      	ldr	r2, [pc, #28]	@ (8004b88 <HAL_Init+0x40>)
 8004b6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b70:	2003      	movs	r0, #3
 8004b72:	f000 fc83 	bl	800547c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b76:	200f      	movs	r0, #15
 8004b78:	f000 f808 	bl	8004b8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b7c:	f7ff fb74 	bl	8004268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	40023c00 	.word	0x40023c00

08004b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b94:	4b12      	ldr	r3, [pc, #72]	@ (8004be0 <HAL_InitTick+0x54>)
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	4b12      	ldr	r3, [pc, #72]	@ (8004be4 <HAL_InitTick+0x58>)
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 fc9b 	bl	80054e6 <HAL_SYSTICK_Config>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e00e      	b.n	8004bd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b0f      	cmp	r3, #15
 8004bbe:	d80a      	bhi.n	8004bd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	6879      	ldr	r1, [r7, #4]
 8004bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bc8:	f000 fc63 	bl	8005492 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004bcc:	4a06      	ldr	r2, [pc, #24]	@ (8004be8 <HAL_InitTick+0x5c>)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	e000      	b.n	8004bd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3708      	adds	r7, #8
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	20000574 	.word	0x20000574
 8004be4:	2000057c 	.word	0x2000057c
 8004be8:	20000578 	.word	0x20000578

08004bec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004bf0:	4b06      	ldr	r3, [pc, #24]	@ (8004c0c <HAL_IncTick+0x20>)
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	4b06      	ldr	r3, [pc, #24]	@ (8004c10 <HAL_IncTick+0x24>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	4a04      	ldr	r2, [pc, #16]	@ (8004c10 <HAL_IncTick+0x24>)
 8004bfe:	6013      	str	r3, [r2, #0]
}
 8004c00:	bf00      	nop
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	2000057c 	.word	0x2000057c
 8004c10:	20001098 	.word	0x20001098

08004c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c14:	b480      	push	{r7}
 8004c16:	af00      	add	r7, sp, #0
  return uwTick;
 8004c18:	4b03      	ldr	r3, [pc, #12]	@ (8004c28 <HAL_GetTick+0x14>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	20001098 	.word	0x20001098

08004c2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c34:	f7ff ffee 	bl	8004c14 <HAL_GetTick>
 8004c38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c44:	d005      	beq.n	8004c52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c46:	4b0a      	ldr	r3, [pc, #40]	@ (8004c70 <HAL_Delay+0x44>)
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4413      	add	r3, r2
 8004c50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004c52:	bf00      	nop
 8004c54:	f7ff ffde 	bl	8004c14 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d8f7      	bhi.n	8004c54 <HAL_Delay+0x28>
  {
  }
}
 8004c64:	bf00      	nop
 8004c66:	bf00      	nop
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	2000057c 	.word	0x2000057c

08004c74 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e0ed      	b.n	8004e62 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d102      	bne.n	8004c98 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7ff fb10 	bl	80042b8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f042 0201 	orr.w	r2, r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ca8:	f7ff ffb4 	bl	8004c14 <HAL_GetTick>
 8004cac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004cae:	e012      	b.n	8004cd6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004cb0:	f7ff ffb0 	bl	8004c14 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b0a      	cmp	r3, #10
 8004cbc:	d90b      	bls.n	8004cd6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2205      	movs	r2, #5
 8004cce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e0c5      	b.n	8004e62 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d0e5      	beq.n	8004cb0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 0202 	bic.w	r2, r2, #2
 8004cf2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cf4:	f7ff ff8e 	bl	8004c14 <HAL_GetTick>
 8004cf8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004cfa:	e012      	b.n	8004d22 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004cfc:	f7ff ff8a 	bl	8004c14 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b0a      	cmp	r3, #10
 8004d08:	d90b      	bls.n	8004d22 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2205      	movs	r2, #5
 8004d1a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e09f      	b.n	8004e62 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1e5      	bne.n	8004cfc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	7e1b      	ldrb	r3, [r3, #24]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d108      	bne.n	8004d4a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	e007      	b.n	8004d5a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	7e5b      	ldrb	r3, [r3, #25]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d108      	bne.n	8004d74 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d70:	601a      	str	r2, [r3, #0]
 8004d72:	e007      	b.n	8004d84 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d82:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	7e9b      	ldrb	r3, [r3, #26]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d108      	bne.n	8004d9e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0220 	orr.w	r2, r2, #32
 8004d9a:	601a      	str	r2, [r3, #0]
 8004d9c:	e007      	b.n	8004dae <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f022 0220 	bic.w	r2, r2, #32
 8004dac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	7edb      	ldrb	r3, [r3, #27]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d108      	bne.n	8004dc8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 0210 	bic.w	r2, r2, #16
 8004dc4:	601a      	str	r2, [r3, #0]
 8004dc6:	e007      	b.n	8004dd8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0210 	orr.w	r2, r2, #16
 8004dd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	7f1b      	ldrb	r3, [r3, #28]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d108      	bne.n	8004df2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 0208 	orr.w	r2, r2, #8
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	e007      	b.n	8004e02 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f022 0208 	bic.w	r2, r2, #8
 8004e00:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	7f5b      	ldrb	r3, [r3, #29]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d108      	bne.n	8004e1c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f042 0204 	orr.w	r2, r2, #4
 8004e18:	601a      	str	r2, [r3, #0]
 8004e1a:	e007      	b.n	8004e2c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f022 0204 	bic.w	r2, r2, #4
 8004e2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	689a      	ldr	r2, [r3, #8]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	431a      	orrs	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	ea42 0103 	orr.w	r1, r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	1e5a      	subs	r2, r3, #1
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b08a      	sub	sp, #40	@ 0x28
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004e72:	2300      	movs	r3, #0
 8004e74:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004ea6:	6a3b      	ldr	r3, [r7, #32]
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d07c      	beq.n	8004faa <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d023      	beq.n	8004f02 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	f003 0302 	and.w	r3, r3, #2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 f983 	bl	80051d8 <HAL_CAN_TxMailbox0CompleteCallback>
 8004ed2:	e016      	b.n	8004f02 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	f003 0304 	and.w	r3, r3, #4
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d004      	beq.n	8004ee8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004ee4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ee6:	e00c      	b.n	8004f02 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	f003 0308 	and.w	r3, r3, #8
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d004      	beq.n	8004efc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004ef8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004efa:	e002      	b.n	8004f02 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 f989 	bl	8005214 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d024      	beq.n	8004f56 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f14:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 f963 	bl	80051ec <HAL_CAN_TxMailbox1CompleteCallback>
 8004f26:	e016      	b.n	8004f56 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d004      	beq.n	8004f3c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f34:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004f38:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f3a:	e00c      	b.n	8004f56 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d004      	beq.n	8004f50 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f4e:	e002      	b.n	8004f56 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f969 	bl	8005228 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d024      	beq.n	8004faa <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004f68:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d003      	beq.n	8004f7c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 f943 	bl	8005200 <HAL_CAN_TxMailbox2CompleteCallback>
 8004f7a:	e016      	b.n	8004faa <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d004      	beq.n	8004f90 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f8e:	e00c      	b.n	8004faa <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d004      	beq.n	8004fa4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fa2:	e002      	b.n	8004faa <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 f949 	bl	800523c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	f003 0308 	and.w	r3, r3, #8
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00c      	beq.n	8004fce <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	f003 0310 	and.w	r3, r3, #16
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d007      	beq.n	8004fce <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004fc4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2210      	movs	r2, #16
 8004fcc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004fce:	6a3b      	ldr	r3, [r7, #32]
 8004fd0:	f003 0304 	and.w	r3, r3, #4
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00b      	beq.n	8004ff0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f003 0308 	and.w	r3, r3, #8
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d006      	beq.n	8004ff0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2208      	movs	r2, #8
 8004fe8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f93a 	bl	8005264 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d009      	beq.n	800500e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f003 0303 	and.w	r3, r3, #3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d002      	beq.n	800500e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 f921 	bl	8005250 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800500e:	6a3b      	ldr	r3, [r7, #32]
 8005010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00c      	beq.n	8005032 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	f003 0310 	and.w	r3, r3, #16
 800501e:	2b00      	cmp	r3, #0
 8005020:	d007      	beq.n	8005032 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005024:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005028:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2210      	movs	r2, #16
 8005030:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005032:	6a3b      	ldr	r3, [r7, #32]
 8005034:	f003 0320 	and.w	r3, r3, #32
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00b      	beq.n	8005054 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	f003 0308 	and.w	r3, r3, #8
 8005042:	2b00      	cmp	r3, #0
 8005044:	d006      	beq.n	8005054 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2208      	movs	r2, #8
 800504c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f91c 	bl	800528c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005054:	6a3b      	ldr	r3, [r7, #32]
 8005056:	f003 0310 	and.w	r3, r3, #16
 800505a:	2b00      	cmp	r3, #0
 800505c:	d009      	beq.n	8005072 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	f003 0303 	and.w	r3, r3, #3
 8005068:	2b00      	cmp	r3, #0
 800506a:	d002      	beq.n	8005072 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f903 	bl	8005278 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005072:	6a3b      	ldr	r3, [r7, #32]
 8005074:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00b      	beq.n	8005094 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	f003 0310 	and.w	r3, r3, #16
 8005082:	2b00      	cmp	r3, #0
 8005084:	d006      	beq.n	8005094 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2210      	movs	r2, #16
 800508c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f906 	bl	80052a0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005094:	6a3b      	ldr	r3, [r7, #32]
 8005096:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00b      	beq.n	80050b6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	f003 0308 	and.w	r3, r3, #8
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d006      	beq.n	80050b6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2208      	movs	r2, #8
 80050ae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 f8ff 	bl	80052b4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80050b6:	6a3b      	ldr	r3, [r7, #32]
 80050b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d07b      	beq.n	80051b8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	f003 0304 	and.w	r3, r3, #4
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d072      	beq.n	80051b0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80050ca:	6a3b      	ldr	r3, [r7, #32]
 80050cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d008      	beq.n	80050e6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d003      	beq.n	80050e6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80050de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e0:	f043 0301 	orr.w	r3, r3, #1
 80050e4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80050e6:	6a3b      	ldr	r3, [r7, #32]
 80050e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d008      	beq.n	8005102 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80050fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fc:	f043 0302 	orr.w	r3, r3, #2
 8005100:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005102:	6a3b      	ldr	r3, [r7, #32]
 8005104:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005108:	2b00      	cmp	r3, #0
 800510a:	d008      	beq.n	800511e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005118:	f043 0304 	orr.w	r3, r3, #4
 800511c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800511e:	6a3b      	ldr	r3, [r7, #32]
 8005120:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005124:	2b00      	cmp	r3, #0
 8005126:	d043      	beq.n	80051b0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800512e:	2b00      	cmp	r3, #0
 8005130:	d03e      	beq.n	80051b0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005138:	2b60      	cmp	r3, #96	@ 0x60
 800513a:	d02b      	beq.n	8005194 <HAL_CAN_IRQHandler+0x32a>
 800513c:	2b60      	cmp	r3, #96	@ 0x60
 800513e:	d82e      	bhi.n	800519e <HAL_CAN_IRQHandler+0x334>
 8005140:	2b50      	cmp	r3, #80	@ 0x50
 8005142:	d022      	beq.n	800518a <HAL_CAN_IRQHandler+0x320>
 8005144:	2b50      	cmp	r3, #80	@ 0x50
 8005146:	d82a      	bhi.n	800519e <HAL_CAN_IRQHandler+0x334>
 8005148:	2b40      	cmp	r3, #64	@ 0x40
 800514a:	d019      	beq.n	8005180 <HAL_CAN_IRQHandler+0x316>
 800514c:	2b40      	cmp	r3, #64	@ 0x40
 800514e:	d826      	bhi.n	800519e <HAL_CAN_IRQHandler+0x334>
 8005150:	2b30      	cmp	r3, #48	@ 0x30
 8005152:	d010      	beq.n	8005176 <HAL_CAN_IRQHandler+0x30c>
 8005154:	2b30      	cmp	r3, #48	@ 0x30
 8005156:	d822      	bhi.n	800519e <HAL_CAN_IRQHandler+0x334>
 8005158:	2b10      	cmp	r3, #16
 800515a:	d002      	beq.n	8005162 <HAL_CAN_IRQHandler+0x2f8>
 800515c:	2b20      	cmp	r3, #32
 800515e:	d005      	beq.n	800516c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005160:	e01d      	b.n	800519e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005164:	f043 0308 	orr.w	r3, r3, #8
 8005168:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800516a:	e019      	b.n	80051a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800516c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516e:	f043 0310 	orr.w	r3, r3, #16
 8005172:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005174:	e014      	b.n	80051a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005178:	f043 0320 	orr.w	r3, r3, #32
 800517c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800517e:	e00f      	b.n	80051a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005182:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005186:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005188:	e00a      	b.n	80051a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800518a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005190:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005192:	e005      	b.n	80051a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005196:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800519a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800519c:	e000      	b.n	80051a0 <HAL_CAN_IRQHandler+0x336>
            break;
 800519e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	699a      	ldr	r2, [r3, #24]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80051ae:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2204      	movs	r2, #4
 80051b6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80051b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d008      	beq.n	80051d0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c4:	431a      	orrs	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f87c 	bl	80052c8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80051d0:	bf00      	nop
 80051d2:	3728      	adds	r7, #40	@ 0x28
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f003 0307 	and.w	r3, r3, #7
 80052ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005320 <__NVIC_SetPriorityGrouping+0x44>)
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80052f8:	4013      	ands	r3, r2
 80052fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005304:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005308:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800530c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800530e:	4a04      	ldr	r2, [pc, #16]	@ (8005320 <__NVIC_SetPriorityGrouping+0x44>)
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	60d3      	str	r3, [r2, #12]
}
 8005314:	bf00      	nop
 8005316:	3714      	adds	r7, #20
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr
 8005320:	e000ed00 	.word	0xe000ed00

08005324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005324:	b480      	push	{r7}
 8005326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005328:	4b04      	ldr	r3, [pc, #16]	@ (800533c <__NVIC_GetPriorityGrouping+0x18>)
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	0a1b      	lsrs	r3, r3, #8
 800532e:	f003 0307 	and.w	r3, r3, #7
}
 8005332:	4618      	mov	r0, r3
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr
 800533c:	e000ed00 	.word	0xe000ed00

08005340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	4603      	mov	r3, r0
 8005348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800534a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800534e:	2b00      	cmp	r3, #0
 8005350:	db0b      	blt.n	800536a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005352:	79fb      	ldrb	r3, [r7, #7]
 8005354:	f003 021f 	and.w	r2, r3, #31
 8005358:	4907      	ldr	r1, [pc, #28]	@ (8005378 <__NVIC_EnableIRQ+0x38>)
 800535a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800535e:	095b      	lsrs	r3, r3, #5
 8005360:	2001      	movs	r0, #1
 8005362:	fa00 f202 	lsl.w	r2, r0, r2
 8005366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800536a:	bf00      	nop
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	e000e100 	.word	0xe000e100

0800537c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	4603      	mov	r3, r0
 8005384:	6039      	str	r1, [r7, #0]
 8005386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800538c:	2b00      	cmp	r3, #0
 800538e:	db0a      	blt.n	80053a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	b2da      	uxtb	r2, r3
 8005394:	490c      	ldr	r1, [pc, #48]	@ (80053c8 <__NVIC_SetPriority+0x4c>)
 8005396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800539a:	0112      	lsls	r2, r2, #4
 800539c:	b2d2      	uxtb	r2, r2
 800539e:	440b      	add	r3, r1
 80053a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053a4:	e00a      	b.n	80053bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	4908      	ldr	r1, [pc, #32]	@ (80053cc <__NVIC_SetPriority+0x50>)
 80053ac:	79fb      	ldrb	r3, [r7, #7]
 80053ae:	f003 030f 	and.w	r3, r3, #15
 80053b2:	3b04      	subs	r3, #4
 80053b4:	0112      	lsls	r2, r2, #4
 80053b6:	b2d2      	uxtb	r2, r2
 80053b8:	440b      	add	r3, r1
 80053ba:	761a      	strb	r2, [r3, #24]
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr
 80053c8:	e000e100 	.word	0xe000e100
 80053cc:	e000ed00 	.word	0xe000ed00

080053d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b089      	sub	sp, #36	@ 0x24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f003 0307 	and.w	r3, r3, #7
 80053e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	f1c3 0307 	rsb	r3, r3, #7
 80053ea:	2b04      	cmp	r3, #4
 80053ec:	bf28      	it	cs
 80053ee:	2304      	movcs	r3, #4
 80053f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	3304      	adds	r3, #4
 80053f6:	2b06      	cmp	r3, #6
 80053f8:	d902      	bls.n	8005400 <NVIC_EncodePriority+0x30>
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	3b03      	subs	r3, #3
 80053fe:	e000      	b.n	8005402 <NVIC_EncodePriority+0x32>
 8005400:	2300      	movs	r3, #0
 8005402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005404:	f04f 32ff 	mov.w	r2, #4294967295
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	fa02 f303 	lsl.w	r3, r2, r3
 800540e:	43da      	mvns	r2, r3
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	401a      	ands	r2, r3
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005418:	f04f 31ff 	mov.w	r1, #4294967295
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	fa01 f303 	lsl.w	r3, r1, r3
 8005422:	43d9      	mvns	r1, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005428:	4313      	orrs	r3, r2
         );
}
 800542a:	4618      	mov	r0, r3
 800542c:	3724      	adds	r7, #36	@ 0x24
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
	...

08005438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	3b01      	subs	r3, #1
 8005444:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005448:	d301      	bcc.n	800544e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800544a:	2301      	movs	r3, #1
 800544c:	e00f      	b.n	800546e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800544e:	4a0a      	ldr	r2, [pc, #40]	@ (8005478 <SysTick_Config+0x40>)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	3b01      	subs	r3, #1
 8005454:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005456:	210f      	movs	r1, #15
 8005458:	f04f 30ff 	mov.w	r0, #4294967295
 800545c:	f7ff ff8e 	bl	800537c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005460:	4b05      	ldr	r3, [pc, #20]	@ (8005478 <SysTick_Config+0x40>)
 8005462:	2200      	movs	r2, #0
 8005464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005466:	4b04      	ldr	r3, [pc, #16]	@ (8005478 <SysTick_Config+0x40>)
 8005468:	2207      	movs	r2, #7
 800546a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3708      	adds	r7, #8
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	e000e010 	.word	0xe000e010

0800547c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f7ff ff29 	bl	80052dc <__NVIC_SetPriorityGrouping>
}
 800548a:	bf00      	nop
 800548c:	3708      	adds	r7, #8
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005492:	b580      	push	{r7, lr}
 8005494:	b086      	sub	sp, #24
 8005496:	af00      	add	r7, sp, #0
 8005498:	4603      	mov	r3, r0
 800549a:	60b9      	str	r1, [r7, #8]
 800549c:	607a      	str	r2, [r7, #4]
 800549e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80054a0:	2300      	movs	r3, #0
 80054a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80054a4:	f7ff ff3e 	bl	8005324 <__NVIC_GetPriorityGrouping>
 80054a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	68b9      	ldr	r1, [r7, #8]
 80054ae:	6978      	ldr	r0, [r7, #20]
 80054b0:	f7ff ff8e 	bl	80053d0 <NVIC_EncodePriority>
 80054b4:	4602      	mov	r2, r0
 80054b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054ba:	4611      	mov	r1, r2
 80054bc:	4618      	mov	r0, r3
 80054be:	f7ff ff5d 	bl	800537c <__NVIC_SetPriority>
}
 80054c2:	bf00      	nop
 80054c4:	3718      	adds	r7, #24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b082      	sub	sp, #8
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	4603      	mov	r3, r0
 80054d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054d8:	4618      	mov	r0, r3
 80054da:	f7ff ff31 	bl	8005340 <__NVIC_EnableIRQ>
}
 80054de:	bf00      	nop
 80054e0:	3708      	adds	r7, #8
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b082      	sub	sp, #8
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7ff ffa2 	bl	8005438 <SysTick_Config>
 80054f4:	4603      	mov	r3, r0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b084      	sub	sp, #16
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800550a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800550c:	f7ff fb82 	bl	8004c14 <HAL_GetTick>
 8005510:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b02      	cmp	r3, #2
 800551c:	d008      	beq.n	8005530 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2280      	movs	r2, #128	@ 0x80
 8005522:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e052      	b.n	80055d6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 0216 	bic.w	r2, r2, #22
 800553e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	695a      	ldr	r2, [r3, #20]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800554e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005554:	2b00      	cmp	r3, #0
 8005556:	d103      	bne.n	8005560 <HAL_DMA_Abort+0x62>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800555c:	2b00      	cmp	r3, #0
 800555e:	d007      	beq.n	8005570 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f022 0208 	bic.w	r2, r2, #8
 800556e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f022 0201 	bic.w	r2, r2, #1
 800557e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005580:	e013      	b.n	80055aa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005582:	f7ff fb47 	bl	8004c14 <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	2b05      	cmp	r3, #5
 800558e:	d90c      	bls.n	80055aa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2220      	movs	r2, #32
 8005594:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2203      	movs	r2, #3
 800559a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e015      	b.n	80055d6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1e4      	bne.n	8005582 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055bc:	223f      	movs	r2, #63	@ 0x3f
 80055be:	409a      	lsls	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80055de:	b480      	push	{r7}
 80055e0:	b083      	sub	sp, #12
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d004      	beq.n	80055fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2280      	movs	r2, #128	@ 0x80
 80055f6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e00c      	b.n	8005616 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2205      	movs	r2, #5
 8005600:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f022 0201 	bic.w	r2, r2, #1
 8005612:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
	...

08005624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005624:	b480      	push	{r7}
 8005626:	b089      	sub	sp, #36	@ 0x24
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800562e:	2300      	movs	r3, #0
 8005630:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005632:	2300      	movs	r3, #0
 8005634:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005636:	2300      	movs	r3, #0
 8005638:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800563a:	2300      	movs	r3, #0
 800563c:	61fb      	str	r3, [r7, #28]
 800563e:	e177      	b.n	8005930 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005640:	2201      	movs	r2, #1
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	fa02 f303 	lsl.w	r3, r2, r3
 8005648:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	4013      	ands	r3, r2
 8005652:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	429a      	cmp	r2, r3
 800565a:	f040 8166 	bne.w	800592a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f003 0303 	and.w	r3, r3, #3
 8005666:	2b01      	cmp	r3, #1
 8005668:	d005      	beq.n	8005676 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005672:	2b02      	cmp	r3, #2
 8005674:	d130      	bne.n	80056d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	2203      	movs	r2, #3
 8005682:	fa02 f303 	lsl.w	r3, r2, r3
 8005686:	43db      	mvns	r3, r3
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	4013      	ands	r3, r2
 800568c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	68da      	ldr	r2, [r3, #12]
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	005b      	lsls	r3, r3, #1
 8005696:	fa02 f303 	lsl.w	r3, r2, r3
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	4313      	orrs	r3, r2
 800569e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	69ba      	ldr	r2, [r7, #24]
 80056a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056ac:	2201      	movs	r2, #1
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	fa02 f303 	lsl.w	r3, r2, r3
 80056b4:	43db      	mvns	r3, r3
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	4013      	ands	r3, r2
 80056ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	091b      	lsrs	r3, r3, #4
 80056c2:	f003 0201 	and.w	r2, r3, #1
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	fa02 f303 	lsl.w	r3, r2, r3
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f003 0303 	and.w	r3, r3, #3
 80056e0:	2b03      	cmp	r3, #3
 80056e2:	d017      	beq.n	8005714 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	005b      	lsls	r3, r3, #1
 80056ee:	2203      	movs	r2, #3
 80056f0:	fa02 f303 	lsl.w	r3, r2, r3
 80056f4:	43db      	mvns	r3, r3
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	4013      	ands	r3, r2
 80056fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	689a      	ldr	r2, [r3, #8]
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	005b      	lsls	r3, r3, #1
 8005704:	fa02 f303 	lsl.w	r3, r2, r3
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	4313      	orrs	r3, r2
 800570c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f003 0303 	and.w	r3, r3, #3
 800571c:	2b02      	cmp	r3, #2
 800571e:	d123      	bne.n	8005768 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	08da      	lsrs	r2, r3, #3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	3208      	adds	r2, #8
 8005728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800572c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	f003 0307 	and.w	r3, r3, #7
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	220f      	movs	r2, #15
 8005738:	fa02 f303 	lsl.w	r3, r2, r3
 800573c:	43db      	mvns	r3, r3
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	4013      	ands	r3, r2
 8005742:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	691a      	ldr	r2, [r3, #16]
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	f003 0307 	and.w	r3, r3, #7
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	fa02 f303 	lsl.w	r3, r2, r3
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	4313      	orrs	r3, r2
 8005758:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	08da      	lsrs	r2, r3, #3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	3208      	adds	r2, #8
 8005762:	69b9      	ldr	r1, [r7, #24]
 8005764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	005b      	lsls	r3, r3, #1
 8005772:	2203      	movs	r2, #3
 8005774:	fa02 f303 	lsl.w	r3, r2, r3
 8005778:	43db      	mvns	r3, r3
 800577a:	69ba      	ldr	r2, [r7, #24]
 800577c:	4013      	ands	r3, r2
 800577e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f003 0203 	and.w	r2, r3, #3
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	005b      	lsls	r3, r3, #1
 800578c:	fa02 f303 	lsl.w	r3, r2, r3
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	4313      	orrs	r3, r2
 8005794:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	69ba      	ldr	r2, [r7, #24]
 800579a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 80c0 	beq.w	800592a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057aa:	2300      	movs	r3, #0
 80057ac:	60fb      	str	r3, [r7, #12]
 80057ae:	4b66      	ldr	r3, [pc, #408]	@ (8005948 <HAL_GPIO_Init+0x324>)
 80057b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057b2:	4a65      	ldr	r2, [pc, #404]	@ (8005948 <HAL_GPIO_Init+0x324>)
 80057b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80057b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80057ba:	4b63      	ldr	r3, [pc, #396]	@ (8005948 <HAL_GPIO_Init+0x324>)
 80057bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057c2:	60fb      	str	r3, [r7, #12]
 80057c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057c6:	4a61      	ldr	r2, [pc, #388]	@ (800594c <HAL_GPIO_Init+0x328>)
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	089b      	lsrs	r3, r3, #2
 80057cc:	3302      	adds	r3, #2
 80057ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	f003 0303 	and.w	r3, r3, #3
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	220f      	movs	r2, #15
 80057de:	fa02 f303 	lsl.w	r3, r2, r3
 80057e2:	43db      	mvns	r3, r3
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	4013      	ands	r3, r2
 80057e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a58      	ldr	r2, [pc, #352]	@ (8005950 <HAL_GPIO_Init+0x32c>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d037      	beq.n	8005862 <HAL_GPIO_Init+0x23e>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a57      	ldr	r2, [pc, #348]	@ (8005954 <HAL_GPIO_Init+0x330>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d031      	beq.n	800585e <HAL_GPIO_Init+0x23a>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a56      	ldr	r2, [pc, #344]	@ (8005958 <HAL_GPIO_Init+0x334>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d02b      	beq.n	800585a <HAL_GPIO_Init+0x236>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a55      	ldr	r2, [pc, #340]	@ (800595c <HAL_GPIO_Init+0x338>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d025      	beq.n	8005856 <HAL_GPIO_Init+0x232>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a54      	ldr	r2, [pc, #336]	@ (8005960 <HAL_GPIO_Init+0x33c>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d01f      	beq.n	8005852 <HAL_GPIO_Init+0x22e>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a53      	ldr	r2, [pc, #332]	@ (8005964 <HAL_GPIO_Init+0x340>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d019      	beq.n	800584e <HAL_GPIO_Init+0x22a>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a52      	ldr	r2, [pc, #328]	@ (8005968 <HAL_GPIO_Init+0x344>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d013      	beq.n	800584a <HAL_GPIO_Init+0x226>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a51      	ldr	r2, [pc, #324]	@ (800596c <HAL_GPIO_Init+0x348>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d00d      	beq.n	8005846 <HAL_GPIO_Init+0x222>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a50      	ldr	r2, [pc, #320]	@ (8005970 <HAL_GPIO_Init+0x34c>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d007      	beq.n	8005842 <HAL_GPIO_Init+0x21e>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a4f      	ldr	r2, [pc, #316]	@ (8005974 <HAL_GPIO_Init+0x350>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d101      	bne.n	800583e <HAL_GPIO_Init+0x21a>
 800583a:	2309      	movs	r3, #9
 800583c:	e012      	b.n	8005864 <HAL_GPIO_Init+0x240>
 800583e:	230a      	movs	r3, #10
 8005840:	e010      	b.n	8005864 <HAL_GPIO_Init+0x240>
 8005842:	2308      	movs	r3, #8
 8005844:	e00e      	b.n	8005864 <HAL_GPIO_Init+0x240>
 8005846:	2307      	movs	r3, #7
 8005848:	e00c      	b.n	8005864 <HAL_GPIO_Init+0x240>
 800584a:	2306      	movs	r3, #6
 800584c:	e00a      	b.n	8005864 <HAL_GPIO_Init+0x240>
 800584e:	2305      	movs	r3, #5
 8005850:	e008      	b.n	8005864 <HAL_GPIO_Init+0x240>
 8005852:	2304      	movs	r3, #4
 8005854:	e006      	b.n	8005864 <HAL_GPIO_Init+0x240>
 8005856:	2303      	movs	r3, #3
 8005858:	e004      	b.n	8005864 <HAL_GPIO_Init+0x240>
 800585a:	2302      	movs	r3, #2
 800585c:	e002      	b.n	8005864 <HAL_GPIO_Init+0x240>
 800585e:	2301      	movs	r3, #1
 8005860:	e000      	b.n	8005864 <HAL_GPIO_Init+0x240>
 8005862:	2300      	movs	r3, #0
 8005864:	69fa      	ldr	r2, [r7, #28]
 8005866:	f002 0203 	and.w	r2, r2, #3
 800586a:	0092      	lsls	r2, r2, #2
 800586c:	4093      	lsls	r3, r2
 800586e:	69ba      	ldr	r2, [r7, #24]
 8005870:	4313      	orrs	r3, r2
 8005872:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005874:	4935      	ldr	r1, [pc, #212]	@ (800594c <HAL_GPIO_Init+0x328>)
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	089b      	lsrs	r3, r3, #2
 800587a:	3302      	adds	r3, #2
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005882:	4b3d      	ldr	r3, [pc, #244]	@ (8005978 <HAL_GPIO_Init+0x354>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	43db      	mvns	r3, r3
 800588c:	69ba      	ldr	r2, [r7, #24]
 800588e:	4013      	ands	r3, r2
 8005890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80058a6:	4a34      	ldr	r2, [pc, #208]	@ (8005978 <HAL_GPIO_Init+0x354>)
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80058ac:	4b32      	ldr	r3, [pc, #200]	@ (8005978 <HAL_GPIO_Init+0x354>)
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	43db      	mvns	r3, r3
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	4013      	ands	r3, r2
 80058ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d003      	beq.n	80058d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80058d0:	4a29      	ldr	r2, [pc, #164]	@ (8005978 <HAL_GPIO_Init+0x354>)
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80058d6:	4b28      	ldr	r3, [pc, #160]	@ (8005978 <HAL_GPIO_Init+0x354>)
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	43db      	mvns	r3, r3
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	4013      	ands	r3, r2
 80058e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80058fa:	4a1f      	ldr	r2, [pc, #124]	@ (8005978 <HAL_GPIO_Init+0x354>)
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005900:	4b1d      	ldr	r3, [pc, #116]	@ (8005978 <HAL_GPIO_Init+0x354>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	43db      	mvns	r3, r3
 800590a:	69ba      	ldr	r2, [r7, #24]
 800590c:	4013      	ands	r3, r2
 800590e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d003      	beq.n	8005924 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	4313      	orrs	r3, r2
 8005922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005924:	4a14      	ldr	r2, [pc, #80]	@ (8005978 <HAL_GPIO_Init+0x354>)
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	3301      	adds	r3, #1
 800592e:	61fb      	str	r3, [r7, #28]
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	2b0f      	cmp	r3, #15
 8005934:	f67f ae84 	bls.w	8005640 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005938:	bf00      	nop
 800593a:	bf00      	nop
 800593c:	3724      	adds	r7, #36	@ 0x24
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	40023800 	.word	0x40023800
 800594c:	40013800 	.word	0x40013800
 8005950:	40020000 	.word	0x40020000
 8005954:	40020400 	.word	0x40020400
 8005958:	40020800 	.word	0x40020800
 800595c:	40020c00 	.word	0x40020c00
 8005960:	40021000 	.word	0x40021000
 8005964:	40021400 	.word	0x40021400
 8005968:	40021800 	.word	0x40021800
 800596c:	40021c00 	.word	0x40021c00
 8005970:	40022000 	.word	0x40022000
 8005974:	40022400 	.word	0x40022400
 8005978:	40013c00 	.word	0x40013c00

0800597c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	460b      	mov	r3, r1
 8005986:	807b      	strh	r3, [r7, #2]
 8005988:	4613      	mov	r3, r2
 800598a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800598c:	787b      	ldrb	r3, [r7, #1]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005992:	887a      	ldrh	r2, [r7, #2]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005998:	e003      	b.n	80059a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800599a:	887b      	ldrh	r3, [r7, #2]
 800599c:	041a      	lsls	r2, r3, #16
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	619a      	str	r2, [r3, #24]
}
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
	...

080059b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d101      	bne.n	80059c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e12b      	b.n	8005c1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d106      	bne.n	80059dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f7fe fd1e 	bl	8004418 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2224      	movs	r2, #36	@ 0x24
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f022 0201 	bic.w	r2, r2, #1
 80059f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005a14:	f001 fc9c 	bl	8007350 <HAL_RCC_GetPCLK1Freq>
 8005a18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	4a81      	ldr	r2, [pc, #516]	@ (8005c24 <HAL_I2C_Init+0x274>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d807      	bhi.n	8005a34 <HAL_I2C_Init+0x84>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4a80      	ldr	r2, [pc, #512]	@ (8005c28 <HAL_I2C_Init+0x278>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	bf94      	ite	ls
 8005a2c:	2301      	movls	r3, #1
 8005a2e:	2300      	movhi	r3, #0
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	e006      	b.n	8005a42 <HAL_I2C_Init+0x92>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	4a7d      	ldr	r2, [pc, #500]	@ (8005c2c <HAL_I2C_Init+0x27c>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	bf94      	ite	ls
 8005a3c:	2301      	movls	r3, #1
 8005a3e:	2300      	movhi	r3, #0
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d001      	beq.n	8005a4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e0e7      	b.n	8005c1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	4a78      	ldr	r2, [pc, #480]	@ (8005c30 <HAL_I2C_Init+0x280>)
 8005a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a52:	0c9b      	lsrs	r3, r3, #18
 8005a54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68ba      	ldr	r2, [r7, #8]
 8005a66:	430a      	orrs	r2, r1
 8005a68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6a1b      	ldr	r3, [r3, #32]
 8005a70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	4a6a      	ldr	r2, [pc, #424]	@ (8005c24 <HAL_I2C_Init+0x274>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d802      	bhi.n	8005a84 <HAL_I2C_Init+0xd4>
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	3301      	adds	r3, #1
 8005a82:	e009      	b.n	8005a98 <HAL_I2C_Init+0xe8>
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005a8a:	fb02 f303 	mul.w	r3, r2, r3
 8005a8e:	4a69      	ldr	r2, [pc, #420]	@ (8005c34 <HAL_I2C_Init+0x284>)
 8005a90:	fba2 2303 	umull	r2, r3, r2, r3
 8005a94:	099b      	lsrs	r3, r3, #6
 8005a96:	3301      	adds	r3, #1
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	6812      	ldr	r2, [r2, #0]
 8005a9c:	430b      	orrs	r3, r1
 8005a9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005aaa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	495c      	ldr	r1, [pc, #368]	@ (8005c24 <HAL_I2C_Init+0x274>)
 8005ab4:	428b      	cmp	r3, r1
 8005ab6:	d819      	bhi.n	8005aec <HAL_I2C_Init+0x13c>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	1e59      	subs	r1, r3, #1
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	005b      	lsls	r3, r3, #1
 8005ac2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ac6:	1c59      	adds	r1, r3, #1
 8005ac8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005acc:	400b      	ands	r3, r1
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00a      	beq.n	8005ae8 <HAL_I2C_Init+0x138>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	1e59      	subs	r1, r3, #1
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	005b      	lsls	r3, r3, #1
 8005adc:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ae6:	e051      	b.n	8005b8c <HAL_I2C_Init+0x1dc>
 8005ae8:	2304      	movs	r3, #4
 8005aea:	e04f      	b.n	8005b8c <HAL_I2C_Init+0x1dc>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d111      	bne.n	8005b18 <HAL_I2C_Init+0x168>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	1e58      	subs	r0, r3, #1
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6859      	ldr	r1, [r3, #4]
 8005afc:	460b      	mov	r3, r1
 8005afe:	005b      	lsls	r3, r3, #1
 8005b00:	440b      	add	r3, r1
 8005b02:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b06:	3301      	adds	r3, #1
 8005b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	bf0c      	ite	eq
 8005b10:	2301      	moveq	r3, #1
 8005b12:	2300      	movne	r3, #0
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	e012      	b.n	8005b3e <HAL_I2C_Init+0x18e>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	1e58      	subs	r0, r3, #1
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6859      	ldr	r1, [r3, #4]
 8005b20:	460b      	mov	r3, r1
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	440b      	add	r3, r1
 8005b26:	0099      	lsls	r1, r3, #2
 8005b28:	440b      	add	r3, r1
 8005b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b2e:	3301      	adds	r3, #1
 8005b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	bf0c      	ite	eq
 8005b38:	2301      	moveq	r3, #1
 8005b3a:	2300      	movne	r3, #0
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d001      	beq.n	8005b46 <HAL_I2C_Init+0x196>
 8005b42:	2301      	movs	r3, #1
 8005b44:	e022      	b.n	8005b8c <HAL_I2C_Init+0x1dc>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10e      	bne.n	8005b6c <HAL_I2C_Init+0x1bc>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	1e58      	subs	r0, r3, #1
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6859      	ldr	r1, [r3, #4]
 8005b56:	460b      	mov	r3, r1
 8005b58:	005b      	lsls	r3, r3, #1
 8005b5a:	440b      	add	r3, r1
 8005b5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b60:	3301      	adds	r3, #1
 8005b62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b6a:	e00f      	b.n	8005b8c <HAL_I2C_Init+0x1dc>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	1e58      	subs	r0, r3, #1
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6859      	ldr	r1, [r3, #4]
 8005b74:	460b      	mov	r3, r1
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	440b      	add	r3, r1
 8005b7a:	0099      	lsls	r1, r3, #2
 8005b7c:	440b      	add	r3, r1
 8005b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b82:	3301      	adds	r3, #1
 8005b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b8c:	6879      	ldr	r1, [r7, #4]
 8005b8e:	6809      	ldr	r1, [r1, #0]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	69da      	ldr	r2, [r3, #28]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	431a      	orrs	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	430a      	orrs	r2, r1
 8005bae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005bba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	6911      	ldr	r1, [r2, #16]
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	68d2      	ldr	r2, [r2, #12]
 8005bc6:	4311      	orrs	r1, r2
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	6812      	ldr	r2, [r2, #0]
 8005bcc:	430b      	orrs	r3, r1
 8005bce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	695a      	ldr	r2, [r3, #20]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	431a      	orrs	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f042 0201 	orr.w	r2, r2, #1
 8005bfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2220      	movs	r2, #32
 8005c06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	000186a0 	.word	0x000186a0
 8005c28:	001e847f 	.word	0x001e847f
 8005c2c:	003d08ff 	.word	0x003d08ff
 8005c30:	431bde83 	.word	0x431bde83
 8005c34:	10624dd3 	.word	0x10624dd3

08005c38 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b088      	sub	sp, #32
 8005c3c:	af02      	add	r7, sp, #8
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	4608      	mov	r0, r1
 8005c42:	4611      	mov	r1, r2
 8005c44:	461a      	mov	r2, r3
 8005c46:	4603      	mov	r3, r0
 8005c48:	817b      	strh	r3, [r7, #10]
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	813b      	strh	r3, [r7, #8]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c52:	f7fe ffdf 	bl	8004c14 <HAL_GetTick>
 8005c56:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b20      	cmp	r3, #32
 8005c62:	f040 80d9 	bne.w	8005e18 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	2319      	movs	r3, #25
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	496d      	ldr	r1, [pc, #436]	@ (8005e24 <HAL_I2C_Mem_Write+0x1ec>)
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f000 fc8b 	bl	800658c <I2C_WaitOnFlagUntilTimeout>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d001      	beq.n	8005c80 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	e0cc      	b.n	8005e1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d101      	bne.n	8005c8e <HAL_I2C_Mem_Write+0x56>
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	e0c5      	b.n	8005e1a <HAL_I2C_Mem_Write+0x1e2>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0301 	and.w	r3, r3, #1
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d007      	beq.n	8005cb4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f042 0201 	orr.w	r2, r2, #1
 8005cb2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005cc2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2221      	movs	r2, #33	@ 0x21
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2240      	movs	r2, #64	@ 0x40
 8005cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6a3a      	ldr	r2, [r7, #32]
 8005cde:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005ce4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	4a4d      	ldr	r2, [pc, #308]	@ (8005e28 <HAL_I2C_Mem_Write+0x1f0>)
 8005cf4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005cf6:	88f8      	ldrh	r0, [r7, #6]
 8005cf8:	893a      	ldrh	r2, [r7, #8]
 8005cfa:	8979      	ldrh	r1, [r7, #10]
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	9301      	str	r3, [sp, #4]
 8005d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d02:	9300      	str	r3, [sp, #0]
 8005d04:	4603      	mov	r3, r0
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f000 fac2 	bl	8006290 <I2C_RequestMemoryWrite>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d052      	beq.n	8005db8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e081      	b.n	8005e1a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f000 fd50 	bl	80067c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00d      	beq.n	8005d42 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d2a:	2b04      	cmp	r3, #4
 8005d2c:	d107      	bne.n	8005d3e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e06b      	b.n	8005e1a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d46:	781a      	ldrb	r2, [r3, #0]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d52:	1c5a      	adds	r2, r3, #1
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	695b      	ldr	r3, [r3, #20]
 8005d78:	f003 0304 	and.w	r3, r3, #4
 8005d7c:	2b04      	cmp	r3, #4
 8005d7e:	d11b      	bne.n	8005db8 <HAL_I2C_Mem_Write+0x180>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d017      	beq.n	8005db8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8c:	781a      	ldrb	r2, [r3, #0]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d98:	1c5a      	adds	r2, r3, #1
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005da2:	3b01      	subs	r3, #1
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	3b01      	subs	r3, #1
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1aa      	bne.n	8005d16 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f000 fd43 	bl	8006850 <I2C_WaitOnBTFFlagUntilTimeout>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00d      	beq.n	8005dec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd4:	2b04      	cmp	r3, #4
 8005dd6:	d107      	bne.n	8005de8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005de6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e016      	b.n	8005e1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005e14:	2300      	movs	r3, #0
 8005e16:	e000      	b.n	8005e1a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005e18:	2302      	movs	r3, #2
  }
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3718      	adds	r7, #24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	00100002 	.word	0x00100002
 8005e28:	ffff0000 	.word	0xffff0000

08005e2c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b08c      	sub	sp, #48	@ 0x30
 8005e30:	af02      	add	r7, sp, #8
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	4608      	mov	r0, r1
 8005e36:	4611      	mov	r1, r2
 8005e38:	461a      	mov	r2, r3
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	817b      	strh	r3, [r7, #10]
 8005e3e:	460b      	mov	r3, r1
 8005e40:	813b      	strh	r3, [r7, #8]
 8005e42:	4613      	mov	r3, r2
 8005e44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e46:	f7fe fee5 	bl	8004c14 <HAL_GetTick>
 8005e4a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b20      	cmp	r3, #32
 8005e56:	f040 8214 	bne.w	8006282 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5c:	9300      	str	r3, [sp, #0]
 8005e5e:	2319      	movs	r3, #25
 8005e60:	2201      	movs	r2, #1
 8005e62:	497b      	ldr	r1, [pc, #492]	@ (8006050 <HAL_I2C_Mem_Read+0x224>)
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f000 fb91 	bl	800658c <I2C_WaitOnFlagUntilTimeout>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005e70:	2302      	movs	r3, #2
 8005e72:	e207      	b.n	8006284 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d101      	bne.n	8005e82 <HAL_I2C_Mem_Read+0x56>
 8005e7e:	2302      	movs	r3, #2
 8005e80:	e200      	b.n	8006284 <HAL_I2C_Mem_Read+0x458>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0301 	and.w	r3, r3, #1
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d007      	beq.n	8005ea8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f042 0201 	orr.w	r2, r2, #1
 8005ea6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005eb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2222      	movs	r2, #34	@ 0x22
 8005ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2240      	movs	r2, #64	@ 0x40
 8005ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ed2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005ed8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4a5b      	ldr	r2, [pc, #364]	@ (8006054 <HAL_I2C_Mem_Read+0x228>)
 8005ee8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005eea:	88f8      	ldrh	r0, [r7, #6]
 8005eec:	893a      	ldrh	r2, [r7, #8]
 8005eee:	8979      	ldrh	r1, [r7, #10]
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef2:	9301      	str	r3, [sp, #4]
 8005ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	4603      	mov	r3, r0
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f000 fa5e 	bl	80063bc <I2C_RequestMemoryRead>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d001      	beq.n	8005f0a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e1bc      	b.n	8006284 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d113      	bne.n	8005f3a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f12:	2300      	movs	r3, #0
 8005f14:	623b      	str	r3, [r7, #32]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	695b      	ldr	r3, [r3, #20]
 8005f1c:	623b      	str	r3, [r7, #32]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	623b      	str	r3, [r7, #32]
 8005f26:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f36:	601a      	str	r2, [r3, #0]
 8005f38:	e190      	b.n	800625c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d11b      	bne.n	8005f7a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f52:	2300      	movs	r3, #0
 8005f54:	61fb      	str	r3, [r7, #28]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	61fb      	str	r3, [r7, #28]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	61fb      	str	r3, [r7, #28]
 8005f66:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f76:	601a      	str	r2, [r3, #0]
 8005f78:	e170      	b.n	800625c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d11b      	bne.n	8005fba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f90:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fa0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	61bb      	str	r3, [r7, #24]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	695b      	ldr	r3, [r3, #20]
 8005fac:	61bb      	str	r3, [r7, #24]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	61bb      	str	r3, [r7, #24]
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	e150      	b.n	800625c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fba:	2300      	movs	r3, #0
 8005fbc:	617b      	str	r3, [r7, #20]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	617b      	str	r3, [r7, #20]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	617b      	str	r3, [r7, #20]
 8005fce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005fd0:	e144      	b.n	800625c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fd6:	2b03      	cmp	r3, #3
 8005fd8:	f200 80f1 	bhi.w	80061be <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d123      	bne.n	800602c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fe4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fe6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f000 fc79 	bl	80068e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d001      	beq.n	8005ff8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e145      	b.n	8006284 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	691a      	ldr	r2, [r3, #16]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006002:	b2d2      	uxtb	r2, r2
 8006004:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800600a:	1c5a      	adds	r2, r3, #1
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006014:	3b01      	subs	r3, #1
 8006016:	b29a      	uxth	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006020:	b29b      	uxth	r3, r3
 8006022:	3b01      	subs	r3, #1
 8006024:	b29a      	uxth	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800602a:	e117      	b.n	800625c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006030:	2b02      	cmp	r3, #2
 8006032:	d14e      	bne.n	80060d2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800603a:	2200      	movs	r2, #0
 800603c:	4906      	ldr	r1, [pc, #24]	@ (8006058 <HAL_I2C_Mem_Read+0x22c>)
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f000 faa4 	bl	800658c <I2C_WaitOnFlagUntilTimeout>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d008      	beq.n	800605c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e11a      	b.n	8006284 <HAL_I2C_Mem_Read+0x458>
 800604e:	bf00      	nop
 8006050:	00100002 	.word	0x00100002
 8006054:	ffff0000 	.word	0xffff0000
 8006058:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800606a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	691a      	ldr	r2, [r3, #16]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006076:	b2d2      	uxtb	r2, r2
 8006078:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607e:	1c5a      	adds	r2, r3, #1
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006088:	3b01      	subs	r3, #1
 800608a:	b29a      	uxth	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006094:	b29b      	uxth	r3, r3
 8006096:	3b01      	subs	r3, #1
 8006098:	b29a      	uxth	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	691a      	ldr	r2, [r3, #16]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a8:	b2d2      	uxtb	r2, r2
 80060aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b0:	1c5a      	adds	r2, r3, #1
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060ba:	3b01      	subs	r3, #1
 80060bc:	b29a      	uxth	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	3b01      	subs	r3, #1
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80060d0:	e0c4      	b.n	800625c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80060d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060d8:	2200      	movs	r2, #0
 80060da:	496c      	ldr	r1, [pc, #432]	@ (800628c <HAL_I2C_Mem_Read+0x460>)
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 fa55 	bl	800658c <I2C_WaitOnFlagUntilTimeout>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e0cb      	b.n	8006284 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	691a      	ldr	r2, [r3, #16]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006106:	b2d2      	uxtb	r2, r2
 8006108:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800610e:	1c5a      	adds	r2, r3, #1
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006118:	3b01      	subs	r3, #1
 800611a:	b29a      	uxth	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006124:	b29b      	uxth	r3, r3
 8006126:	3b01      	subs	r3, #1
 8006128:	b29a      	uxth	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800612e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006134:	2200      	movs	r2, #0
 8006136:	4955      	ldr	r1, [pc, #340]	@ (800628c <HAL_I2C_Mem_Read+0x460>)
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f000 fa27 	bl	800658c <I2C_WaitOnFlagUntilTimeout>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d001      	beq.n	8006148 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e09d      	b.n	8006284 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006156:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	691a      	ldr	r2, [r3, #16]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006162:	b2d2      	uxtb	r2, r2
 8006164:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800616a:	1c5a      	adds	r2, r3, #1
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006174:	3b01      	subs	r3, #1
 8006176:	b29a      	uxth	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006180:	b29b      	uxth	r3, r3
 8006182:	3b01      	subs	r3, #1
 8006184:	b29a      	uxth	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	691a      	ldr	r2, [r3, #16]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006194:	b2d2      	uxtb	r2, r2
 8006196:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800619c:	1c5a      	adds	r2, r3, #1
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061a6:	3b01      	subs	r3, #1
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	3b01      	subs	r3, #1
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80061bc:	e04e      	b.n	800625c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061c0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f000 fb8c 	bl	80068e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e058      	b.n	8006284 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	691a      	ldr	r2, [r3, #16]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061dc:	b2d2      	uxtb	r2, r2
 80061de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e4:	1c5a      	adds	r2, r3, #1
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061ee:	3b01      	subs	r3, #1
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	3b01      	subs	r3, #1
 80061fe:	b29a      	uxth	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	f003 0304 	and.w	r3, r3, #4
 800620e:	2b04      	cmp	r3, #4
 8006210:	d124      	bne.n	800625c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006216:	2b03      	cmp	r3, #3
 8006218:	d107      	bne.n	800622a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006228:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	691a      	ldr	r2, [r3, #16]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006234:	b2d2      	uxtb	r2, r2
 8006236:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800623c:	1c5a      	adds	r2, r3, #1
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006246:	3b01      	subs	r3, #1
 8006248:	b29a      	uxth	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006252:	b29b      	uxth	r3, r3
 8006254:	3b01      	subs	r3, #1
 8006256:	b29a      	uxth	r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006260:	2b00      	cmp	r3, #0
 8006262:	f47f aeb6 	bne.w	8005fd2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2220      	movs	r2, #32
 800626a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800627e:	2300      	movs	r3, #0
 8006280:	e000      	b.n	8006284 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006282:	2302      	movs	r3, #2
  }
}
 8006284:	4618      	mov	r0, r3
 8006286:	3728      	adds	r7, #40	@ 0x28
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	00010004 	.word	0x00010004

08006290 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b088      	sub	sp, #32
 8006294:	af02      	add	r7, sp, #8
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	4608      	mov	r0, r1
 800629a:	4611      	mov	r1, r2
 800629c:	461a      	mov	r2, r3
 800629e:	4603      	mov	r3, r0
 80062a0:	817b      	strh	r3, [r7, #10]
 80062a2:	460b      	mov	r3, r1
 80062a4:	813b      	strh	r3, [r7, #8]
 80062a6:	4613      	mov	r3, r2
 80062a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80062b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	6a3b      	ldr	r3, [r7, #32]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f000 f960 	bl	800658c <I2C_WaitOnFlagUntilTimeout>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00d      	beq.n	80062ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062e0:	d103      	bne.n	80062ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e05f      	b.n	80063ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062ee:	897b      	ldrh	r3, [r7, #10]
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	461a      	mov	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80062fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006300:	6a3a      	ldr	r2, [r7, #32]
 8006302:	492d      	ldr	r1, [pc, #180]	@ (80063b8 <I2C_RequestMemoryWrite+0x128>)
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f000 f9bb 	bl	8006680 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d001      	beq.n	8006314 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e04c      	b.n	80063ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006314:	2300      	movs	r3, #0
 8006316:	617b      	str	r3, [r7, #20]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	617b      	str	r3, [r7, #20]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	617b      	str	r3, [r7, #20]
 8006328:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800632a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800632c:	6a39      	ldr	r1, [r7, #32]
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f000 fa46 	bl	80067c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00d      	beq.n	8006356 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800633e:	2b04      	cmp	r3, #4
 8006340:	d107      	bne.n	8006352 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006350:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e02b      	b.n	80063ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006356:	88fb      	ldrh	r3, [r7, #6]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d105      	bne.n	8006368 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800635c:	893b      	ldrh	r3, [r7, #8]
 800635e:	b2da      	uxtb	r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	611a      	str	r2, [r3, #16]
 8006366:	e021      	b.n	80063ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006368:	893b      	ldrh	r3, [r7, #8]
 800636a:	0a1b      	lsrs	r3, r3, #8
 800636c:	b29b      	uxth	r3, r3
 800636e:	b2da      	uxtb	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006376:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006378:	6a39      	ldr	r1, [r7, #32]
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f000 fa20 	bl	80067c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00d      	beq.n	80063a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800638a:	2b04      	cmp	r3, #4
 800638c:	d107      	bne.n	800639e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800639c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e005      	b.n	80063ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063a2:	893b      	ldrh	r3, [r7, #8]
 80063a4:	b2da      	uxtb	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3718      	adds	r7, #24
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	00010002 	.word	0x00010002

080063bc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b088      	sub	sp, #32
 80063c0:	af02      	add	r7, sp, #8
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	4608      	mov	r0, r1
 80063c6:	4611      	mov	r1, r2
 80063c8:	461a      	mov	r2, r3
 80063ca:	4603      	mov	r3, r0
 80063cc:	817b      	strh	r3, [r7, #10]
 80063ce:	460b      	mov	r3, r1
 80063d0:	813b      	strh	r3, [r7, #8]
 80063d2:	4613      	mov	r3, r2
 80063d4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80063e4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f8:	9300      	str	r3, [sp, #0]
 80063fa:	6a3b      	ldr	r3, [r7, #32]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f000 f8c2 	bl	800658c <I2C_WaitOnFlagUntilTimeout>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00d      	beq.n	800642a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006418:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800641c:	d103      	bne.n	8006426 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006424:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e0aa      	b.n	8006580 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800642a:	897b      	ldrh	r3, [r7, #10]
 800642c:	b2db      	uxtb	r3, r3
 800642e:	461a      	mov	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006438:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800643a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800643c:	6a3a      	ldr	r2, [r7, #32]
 800643e:	4952      	ldr	r1, [pc, #328]	@ (8006588 <I2C_RequestMemoryRead+0x1cc>)
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f000 f91d 	bl	8006680 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d001      	beq.n	8006450 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e097      	b.n	8006580 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006450:	2300      	movs	r3, #0
 8006452:	617b      	str	r3, [r7, #20]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	617b      	str	r3, [r7, #20]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	617b      	str	r3, [r7, #20]
 8006464:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006466:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006468:	6a39      	ldr	r1, [r7, #32]
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 f9a8 	bl	80067c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00d      	beq.n	8006492 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800647a:	2b04      	cmp	r3, #4
 800647c:	d107      	bne.n	800648e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800648c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e076      	b.n	8006580 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006492:	88fb      	ldrh	r3, [r7, #6]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d105      	bne.n	80064a4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006498:	893b      	ldrh	r3, [r7, #8]
 800649a:	b2da      	uxtb	r2, r3
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	611a      	str	r2, [r3, #16]
 80064a2:	e021      	b.n	80064e8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80064a4:	893b      	ldrh	r3, [r7, #8]
 80064a6:	0a1b      	lsrs	r3, r3, #8
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	b2da      	uxtb	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064b4:	6a39      	ldr	r1, [r7, #32]
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f000 f982 	bl	80067c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00d      	beq.n	80064de <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c6:	2b04      	cmp	r3, #4
 80064c8:	d107      	bne.n	80064da <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e050      	b.n	8006580 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064de:	893b      	ldrh	r3, [r7, #8]
 80064e0:	b2da      	uxtb	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064ea:	6a39      	ldr	r1, [r7, #32]
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f000 f967 	bl	80067c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00d      	beq.n	8006514 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064fc:	2b04      	cmp	r3, #4
 80064fe:	d107      	bne.n	8006510 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800650e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e035      	b.n	8006580 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006522:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	6a3b      	ldr	r3, [r7, #32]
 800652a:	2200      	movs	r2, #0
 800652c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f000 f82b 	bl	800658c <I2C_WaitOnFlagUntilTimeout>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00d      	beq.n	8006558 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006546:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800654a:	d103      	bne.n	8006554 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006552:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	e013      	b.n	8006580 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006558:	897b      	ldrh	r3, [r7, #10]
 800655a:	b2db      	uxtb	r3, r3
 800655c:	f043 0301 	orr.w	r3, r3, #1
 8006560:	b2da      	uxtb	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656a:	6a3a      	ldr	r2, [r7, #32]
 800656c:	4906      	ldr	r1, [pc, #24]	@ (8006588 <I2C_RequestMemoryRead+0x1cc>)
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f000 f886 	bl	8006680 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d001      	beq.n	800657e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e000      	b.n	8006580 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3718      	adds	r7, #24
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	00010002 	.word	0x00010002

0800658c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	603b      	str	r3, [r7, #0]
 8006598:	4613      	mov	r3, r2
 800659a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800659c:	e048      	b.n	8006630 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a4:	d044      	beq.n	8006630 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065a6:	f7fe fb35 	bl	8004c14 <HAL_GetTick>
 80065aa:	4602      	mov	r2, r0
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	683a      	ldr	r2, [r7, #0]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d302      	bcc.n	80065bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d139      	bne.n	8006630 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	0c1b      	lsrs	r3, r3, #16
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d10d      	bne.n	80065e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	695b      	ldr	r3, [r3, #20]
 80065cc:	43da      	mvns	r2, r3
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	4013      	ands	r3, r2
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	bf0c      	ite	eq
 80065d8:	2301      	moveq	r3, #1
 80065da:	2300      	movne	r3, #0
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	461a      	mov	r2, r3
 80065e0:	e00c      	b.n	80065fc <I2C_WaitOnFlagUntilTimeout+0x70>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	43da      	mvns	r2, r3
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	4013      	ands	r3, r2
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	bf0c      	ite	eq
 80065f4:	2301      	moveq	r3, #1
 80065f6:	2300      	movne	r3, #0
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	461a      	mov	r2, r3
 80065fc:	79fb      	ldrb	r3, [r7, #7]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d116      	bne.n	8006630 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2220      	movs	r2, #32
 800660c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800661c:	f043 0220 	orr.w	r2, r3, #32
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e023      	b.n	8006678 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	0c1b      	lsrs	r3, r3, #16
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b01      	cmp	r3, #1
 8006638:	d10d      	bne.n	8006656 <I2C_WaitOnFlagUntilTimeout+0xca>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	695b      	ldr	r3, [r3, #20]
 8006640:	43da      	mvns	r2, r3
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	4013      	ands	r3, r2
 8006646:	b29b      	uxth	r3, r3
 8006648:	2b00      	cmp	r3, #0
 800664a:	bf0c      	ite	eq
 800664c:	2301      	moveq	r3, #1
 800664e:	2300      	movne	r3, #0
 8006650:	b2db      	uxtb	r3, r3
 8006652:	461a      	mov	r2, r3
 8006654:	e00c      	b.n	8006670 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	43da      	mvns	r2, r3
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	4013      	ands	r3, r2
 8006662:	b29b      	uxth	r3, r3
 8006664:	2b00      	cmp	r3, #0
 8006666:	bf0c      	ite	eq
 8006668:	2301      	moveq	r3, #1
 800666a:	2300      	movne	r3, #0
 800666c:	b2db      	uxtb	r3, r3
 800666e:	461a      	mov	r2, r3
 8006670:	79fb      	ldrb	r3, [r7, #7]
 8006672:	429a      	cmp	r2, r3
 8006674:	d093      	beq.n	800659e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
 800668c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800668e:	e071      	b.n	8006774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800669a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800669e:	d123      	bne.n	80066e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80066b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2220      	movs	r2, #32
 80066c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066d4:	f043 0204 	orr.w	r2, r3, #4
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e067      	b.n	80067b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ee:	d041      	beq.n	8006774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066f0:	f7fe fa90 	bl	8004c14 <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d302      	bcc.n	8006706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d136      	bne.n	8006774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	0c1b      	lsrs	r3, r3, #16
 800670a:	b2db      	uxtb	r3, r3
 800670c:	2b01      	cmp	r3, #1
 800670e:	d10c      	bne.n	800672a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	43da      	mvns	r2, r3
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	4013      	ands	r3, r2
 800671c:	b29b      	uxth	r3, r3
 800671e:	2b00      	cmp	r3, #0
 8006720:	bf14      	ite	ne
 8006722:	2301      	movne	r3, #1
 8006724:	2300      	moveq	r3, #0
 8006726:	b2db      	uxtb	r3, r3
 8006728:	e00b      	b.n	8006742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	43da      	mvns	r2, r3
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	4013      	ands	r3, r2
 8006736:	b29b      	uxth	r3, r3
 8006738:	2b00      	cmp	r3, #0
 800673a:	bf14      	ite	ne
 800673c:	2301      	movne	r3, #1
 800673e:	2300      	moveq	r3, #0
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d016      	beq.n	8006774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2220      	movs	r2, #32
 8006750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006760:	f043 0220 	orr.w	r2, r3, #32
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e021      	b.n	80067b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	0c1b      	lsrs	r3, r3, #16
 8006778:	b2db      	uxtb	r3, r3
 800677a:	2b01      	cmp	r3, #1
 800677c:	d10c      	bne.n	8006798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	695b      	ldr	r3, [r3, #20]
 8006784:	43da      	mvns	r2, r3
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	4013      	ands	r3, r2
 800678a:	b29b      	uxth	r3, r3
 800678c:	2b00      	cmp	r3, #0
 800678e:	bf14      	ite	ne
 8006790:	2301      	movne	r3, #1
 8006792:	2300      	moveq	r3, #0
 8006794:	b2db      	uxtb	r3, r3
 8006796:	e00b      	b.n	80067b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	43da      	mvns	r2, r3
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	4013      	ands	r3, r2
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	bf14      	ite	ne
 80067aa:	2301      	movne	r3, #1
 80067ac:	2300      	moveq	r3, #0
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f47f af6d 	bne.w	8006690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3710      	adds	r7, #16
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067cc:	e034      	b.n	8006838 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f000 f8e3 	bl	800699a <I2C_IsAcknowledgeFailed>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d001      	beq.n	80067de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e034      	b.n	8006848 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e4:	d028      	beq.n	8006838 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067e6:	f7fe fa15 	bl	8004c14 <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d302      	bcc.n	80067fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d11d      	bne.n	8006838 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	695b      	ldr	r3, [r3, #20]
 8006802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006806:	2b80      	cmp	r3, #128	@ 0x80
 8006808:	d016      	beq.n	8006838 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2220      	movs	r2, #32
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006824:	f043 0220 	orr.w	r2, r3, #32
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e007      	b.n	8006848 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	695b      	ldr	r3, [r3, #20]
 800683e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006842:	2b80      	cmp	r3, #128	@ 0x80
 8006844:	d1c3      	bne.n	80067ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800685c:	e034      	b.n	80068c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f000 f89b 	bl	800699a <I2C_IsAcknowledgeFailed>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d001      	beq.n	800686e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e034      	b.n	80068d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006874:	d028      	beq.n	80068c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006876:	f7fe f9cd 	bl	8004c14 <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	68ba      	ldr	r2, [r7, #8]
 8006882:	429a      	cmp	r2, r3
 8006884:	d302      	bcc.n	800688c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d11d      	bne.n	80068c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	695b      	ldr	r3, [r3, #20]
 8006892:	f003 0304 	and.w	r3, r3, #4
 8006896:	2b04      	cmp	r3, #4
 8006898:	d016      	beq.n	80068c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2220      	movs	r2, #32
 80068a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b4:	f043 0220 	orr.w	r2, r3, #32
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e007      	b.n	80068d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	f003 0304 	and.w	r3, r3, #4
 80068d2:	2b04      	cmp	r3, #4
 80068d4:	d1c3      	bne.n	800685e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3710      	adds	r7, #16
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80068ec:	e049      	b.n	8006982 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	695b      	ldr	r3, [r3, #20]
 80068f4:	f003 0310 	and.w	r3, r3, #16
 80068f8:	2b10      	cmp	r3, #16
 80068fa:	d119      	bne.n	8006930 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f06f 0210 	mvn.w	r2, #16
 8006904:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2220      	movs	r2, #32
 8006910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e030      	b.n	8006992 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006930:	f7fe f970 	bl	8004c14 <HAL_GetTick>
 8006934:	4602      	mov	r2, r0
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	68ba      	ldr	r2, [r7, #8]
 800693c:	429a      	cmp	r2, r3
 800693e:	d302      	bcc.n	8006946 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d11d      	bne.n	8006982 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006950:	2b40      	cmp	r3, #64	@ 0x40
 8006952:	d016      	beq.n	8006982 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2220      	movs	r2, #32
 800695e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800696e:	f043 0220 	orr.w	r2, r3, #32
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e007      	b.n	8006992 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	695b      	ldr	r3, [r3, #20]
 8006988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800698c:	2b40      	cmp	r3, #64	@ 0x40
 800698e:	d1ae      	bne.n	80068ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800699a:	b480      	push	{r7}
 800699c:	b083      	sub	sp, #12
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	695b      	ldr	r3, [r3, #20]
 80069a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069b0:	d11b      	bne.n	80069ea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80069ba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2220      	movs	r2, #32
 80069c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069d6:	f043 0204 	orr.w	r2, r3, #4
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e000      	b.n	80069ec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b20      	cmp	r3, #32
 8006a0c:	d129      	bne.n	8006a62 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2224      	movs	r2, #36	@ 0x24
 8006a12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f022 0201 	bic.w	r2, r2, #1
 8006a24:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f022 0210 	bic.w	r2, r2, #16
 8006a34:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	683a      	ldr	r2, [r7, #0]
 8006a42:	430a      	orrs	r2, r1
 8006a44:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f042 0201 	orr.w	r2, r2, #1
 8006a54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2220      	movs	r2, #32
 8006a5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	e000      	b.n	8006a64 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006a62:	2302      	movs	r3, #2
  }
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	2b20      	cmp	r3, #32
 8006a88:	d12a      	bne.n	8006ae0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2224      	movs	r2, #36	@ 0x24
 8006a8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f022 0201 	bic.w	r2, r2, #1
 8006aa0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006aaa:	89fb      	ldrh	r3, [r7, #14]
 8006aac:	f023 030f 	bic.w	r3, r3, #15
 8006ab0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	89fb      	ldrh	r3, [r7, #14]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	89fa      	ldrh	r2, [r7, #14]
 8006ac2:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f042 0201 	orr.w	r2, r2, #1
 8006ad2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006adc:	2300      	movs	r3, #0
 8006ade:	e000      	b.n	8006ae2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006ae0:	2302      	movs	r3, #2
  }
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3714      	adds	r7, #20
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
	...

08006af0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b086      	sub	sp, #24
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d101      	bne.n	8006b02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e267      	b.n	8006fd2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 0301 	and.w	r3, r3, #1
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d075      	beq.n	8006bfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006b0e:	4b88      	ldr	r3, [pc, #544]	@ (8006d30 <HAL_RCC_OscConfig+0x240>)
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f003 030c 	and.w	r3, r3, #12
 8006b16:	2b04      	cmp	r3, #4
 8006b18:	d00c      	beq.n	8006b34 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b1a:	4b85      	ldr	r3, [pc, #532]	@ (8006d30 <HAL_RCC_OscConfig+0x240>)
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006b22:	2b08      	cmp	r3, #8
 8006b24:	d112      	bne.n	8006b4c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b26:	4b82      	ldr	r3, [pc, #520]	@ (8006d30 <HAL_RCC_OscConfig+0x240>)
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b32:	d10b      	bne.n	8006b4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b34:	4b7e      	ldr	r3, [pc, #504]	@ (8006d30 <HAL_RCC_OscConfig+0x240>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d05b      	beq.n	8006bf8 <HAL_RCC_OscConfig+0x108>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d157      	bne.n	8006bf8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e242      	b.n	8006fd2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b54:	d106      	bne.n	8006b64 <HAL_RCC_OscConfig+0x74>
 8006b56:	4b76      	ldr	r3, [pc, #472]	@ (8006d30 <HAL_RCC_OscConfig+0x240>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a75      	ldr	r2, [pc, #468]	@ (8006d30 <HAL_RCC_OscConfig+0x240>)
 8006b5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b60:	6013      	str	r3, [r2, #0]
 8006b62:	e01d      	b.n	8006ba0 <HAL_RCC_OscConfig+0xb0>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b6c:	d10c      	bne.n	8006b88 <HAL_RCC_OscConfig+0x98>
 8006b6e:	4b70      	ldr	r3, [pc, #448]	@ (8006d30 <HAL_RCC_OscConfig+0x240>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a6f      	ldr	r2, [pc, #444]	@ (8006d30 <HAL_RCC_OscConfig+0x240>)
 8006b74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b78:	6013      	str	r3, [r2, #0]
 8006b7a:	4b6d      	ldr	r3, [pc, #436]	@ (8006d30 <HAL_RCC_OscConfig+0x240>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a6c      	ldr	r2, [pc, #432]	@ (8006d30 <HAL_RCC_OscConfig+0x240>)
 8006b80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b84:	6013      	str	r3, [r2, #0]
 8006b86:	e00b      	b.n	8006ba0 <HAL_RCC_OscConfig+0xb0>
 8006b88:	4b69      	ldr	r3, [pc, #420]	@ (8006d30 <HAL_RCC_OscConfig+0x240>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a68      	ldr	r2, [pc, #416]	@ (8006d30 <HAL_RCC_OscConfig+0x240>)
 8006b8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b92:	6013      	str	r3, [r2, #0]
 8006b94:	4b66      	ldr	r3, [pc, #408]	@ (8006d30 <HAL_RCC_OscConfig+0x240>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a65      	ldr	r2, [pc, #404]	@ (8006d30 <HAL_RCC_OscConfig+0x240>)
 8006b9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d013      	beq.n	8006bd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ba8:	f7fe f834 	bl	8004c14 <HAL_GetTick>
 8006bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bae:	e008      	b.n	8006bc2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bb0:	f7fe f830 	bl	8004c14 <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	2b64      	cmp	r3, #100	@ 0x64
 8006bbc:	d901      	bls.n	8006bc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e207      	b.n	8006fd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bc2:	4b5b      	ldr	r3, [pc, #364]	@ (8006d30 <HAL_RCC_OscConfig+0x240>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d0f0      	beq.n	8006bb0 <HAL_RCC_OscConfig+0xc0>
 8006bce:	e014      	b.n	8006bfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bd0:	f7fe f820 	bl	8004c14 <HAL_GetTick>
 8006bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bd6:	e008      	b.n	8006bea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bd8:	f7fe f81c 	bl	8004c14 <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	2b64      	cmp	r3, #100	@ 0x64
 8006be4:	d901      	bls.n	8006bea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e1f3      	b.n	8006fd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bea:	4b51      	ldr	r3, [pc, #324]	@ (8006d30 <HAL_RCC_OscConfig+0x240>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1f0      	bne.n	8006bd8 <HAL_RCC_OscConfig+0xe8>
 8006bf6:	e000      	b.n	8006bfa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0302 	and.w	r3, r3, #2
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d063      	beq.n	8006cce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006c06:	4b4a      	ldr	r3, [pc, #296]	@ (8006d30 <HAL_RCC_OscConfig+0x240>)
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f003 030c 	and.w	r3, r3, #12
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00b      	beq.n	8006c2a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c12:	4b47      	ldr	r3, [pc, #284]	@ (8006d30 <HAL_RCC_OscConfig+0x240>)
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006c1a:	2b08      	cmp	r3, #8
 8006c1c:	d11c      	bne.n	8006c58 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c1e:	4b44      	ldr	r3, [pc, #272]	@ (8006d30 <HAL_RCC_OscConfig+0x240>)
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d116      	bne.n	8006c58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c2a:	4b41      	ldr	r3, [pc, #260]	@ (8006d30 <HAL_RCC_OscConfig+0x240>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 0302 	and.w	r3, r3, #2
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d005      	beq.n	8006c42 <HAL_RCC_OscConfig+0x152>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d001      	beq.n	8006c42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e1c7      	b.n	8006fd2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c42:	4b3b      	ldr	r3, [pc, #236]	@ (8006d30 <HAL_RCC_OscConfig+0x240>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	00db      	lsls	r3, r3, #3
 8006c50:	4937      	ldr	r1, [pc, #220]	@ (8006d30 <HAL_RCC_OscConfig+0x240>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c56:	e03a      	b.n	8006cce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d020      	beq.n	8006ca2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c60:	4b34      	ldr	r3, [pc, #208]	@ (8006d34 <HAL_RCC_OscConfig+0x244>)
 8006c62:	2201      	movs	r2, #1
 8006c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c66:	f7fd ffd5 	bl	8004c14 <HAL_GetTick>
 8006c6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c6c:	e008      	b.n	8006c80 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c6e:	f7fd ffd1 	bl	8004c14 <HAL_GetTick>
 8006c72:	4602      	mov	r2, r0
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	d901      	bls.n	8006c80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	e1a8      	b.n	8006fd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c80:	4b2b      	ldr	r3, [pc, #172]	@ (8006d30 <HAL_RCC_OscConfig+0x240>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0302 	and.w	r3, r3, #2
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d0f0      	beq.n	8006c6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c8c:	4b28      	ldr	r3, [pc, #160]	@ (8006d30 <HAL_RCC_OscConfig+0x240>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	00db      	lsls	r3, r3, #3
 8006c9a:	4925      	ldr	r1, [pc, #148]	@ (8006d30 <HAL_RCC_OscConfig+0x240>)
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	600b      	str	r3, [r1, #0]
 8006ca0:	e015      	b.n	8006cce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ca2:	4b24      	ldr	r3, [pc, #144]	@ (8006d34 <HAL_RCC_OscConfig+0x244>)
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ca8:	f7fd ffb4 	bl	8004c14 <HAL_GetTick>
 8006cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cae:	e008      	b.n	8006cc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cb0:	f7fd ffb0 	bl	8004c14 <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d901      	bls.n	8006cc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e187      	b.n	8006fd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8006d30 <HAL_RCC_OscConfig+0x240>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0302 	and.w	r3, r3, #2
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1f0      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0308 	and.w	r3, r3, #8
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d036      	beq.n	8006d48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d016      	beq.n	8006d10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ce2:	4b15      	ldr	r3, [pc, #84]	@ (8006d38 <HAL_RCC_OscConfig+0x248>)
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ce8:	f7fd ff94 	bl	8004c14 <HAL_GetTick>
 8006cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cee:	e008      	b.n	8006d02 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cf0:	f7fd ff90 	bl	8004c14 <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d901      	bls.n	8006d02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e167      	b.n	8006fd2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d02:	4b0b      	ldr	r3, [pc, #44]	@ (8006d30 <HAL_RCC_OscConfig+0x240>)
 8006d04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d06:	f003 0302 	and.w	r3, r3, #2
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d0f0      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x200>
 8006d0e:	e01b      	b.n	8006d48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d10:	4b09      	ldr	r3, [pc, #36]	@ (8006d38 <HAL_RCC_OscConfig+0x248>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d16:	f7fd ff7d 	bl	8004c14 <HAL_GetTick>
 8006d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d1c:	e00e      	b.n	8006d3c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d1e:	f7fd ff79 	bl	8004c14 <HAL_GetTick>
 8006d22:	4602      	mov	r2, r0
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	d907      	bls.n	8006d3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	e150      	b.n	8006fd2 <HAL_RCC_OscConfig+0x4e2>
 8006d30:	40023800 	.word	0x40023800
 8006d34:	42470000 	.word	0x42470000
 8006d38:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d3c:	4b88      	ldr	r3, [pc, #544]	@ (8006f60 <HAL_RCC_OscConfig+0x470>)
 8006d3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d40:	f003 0302 	and.w	r3, r3, #2
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1ea      	bne.n	8006d1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0304 	and.w	r3, r3, #4
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f000 8097 	beq.w	8006e84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d56:	2300      	movs	r3, #0
 8006d58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d5a:	4b81      	ldr	r3, [pc, #516]	@ (8006f60 <HAL_RCC_OscConfig+0x470>)
 8006d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10f      	bne.n	8006d86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d66:	2300      	movs	r3, #0
 8006d68:	60bb      	str	r3, [r7, #8]
 8006d6a:	4b7d      	ldr	r3, [pc, #500]	@ (8006f60 <HAL_RCC_OscConfig+0x470>)
 8006d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d6e:	4a7c      	ldr	r2, [pc, #496]	@ (8006f60 <HAL_RCC_OscConfig+0x470>)
 8006d70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d74:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d76:	4b7a      	ldr	r3, [pc, #488]	@ (8006f60 <HAL_RCC_OscConfig+0x470>)
 8006d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d7e:	60bb      	str	r3, [r7, #8]
 8006d80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d82:	2301      	movs	r3, #1
 8006d84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d86:	4b77      	ldr	r3, [pc, #476]	@ (8006f64 <HAL_RCC_OscConfig+0x474>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d118      	bne.n	8006dc4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d92:	4b74      	ldr	r3, [pc, #464]	@ (8006f64 <HAL_RCC_OscConfig+0x474>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a73      	ldr	r2, [pc, #460]	@ (8006f64 <HAL_RCC_OscConfig+0x474>)
 8006d98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d9e:	f7fd ff39 	bl	8004c14 <HAL_GetTick>
 8006da2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006da4:	e008      	b.n	8006db8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006da6:	f7fd ff35 	bl	8004c14 <HAL_GetTick>
 8006daa:	4602      	mov	r2, r0
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	d901      	bls.n	8006db8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006db4:	2303      	movs	r3, #3
 8006db6:	e10c      	b.n	8006fd2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006db8:	4b6a      	ldr	r3, [pc, #424]	@ (8006f64 <HAL_RCC_OscConfig+0x474>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d0f0      	beq.n	8006da6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d106      	bne.n	8006dda <HAL_RCC_OscConfig+0x2ea>
 8006dcc:	4b64      	ldr	r3, [pc, #400]	@ (8006f60 <HAL_RCC_OscConfig+0x470>)
 8006dce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dd0:	4a63      	ldr	r2, [pc, #396]	@ (8006f60 <HAL_RCC_OscConfig+0x470>)
 8006dd2:	f043 0301 	orr.w	r3, r3, #1
 8006dd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dd8:	e01c      	b.n	8006e14 <HAL_RCC_OscConfig+0x324>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	2b05      	cmp	r3, #5
 8006de0:	d10c      	bne.n	8006dfc <HAL_RCC_OscConfig+0x30c>
 8006de2:	4b5f      	ldr	r3, [pc, #380]	@ (8006f60 <HAL_RCC_OscConfig+0x470>)
 8006de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006de6:	4a5e      	ldr	r2, [pc, #376]	@ (8006f60 <HAL_RCC_OscConfig+0x470>)
 8006de8:	f043 0304 	orr.w	r3, r3, #4
 8006dec:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dee:	4b5c      	ldr	r3, [pc, #368]	@ (8006f60 <HAL_RCC_OscConfig+0x470>)
 8006df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006df2:	4a5b      	ldr	r2, [pc, #364]	@ (8006f60 <HAL_RCC_OscConfig+0x470>)
 8006df4:	f043 0301 	orr.w	r3, r3, #1
 8006df8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dfa:	e00b      	b.n	8006e14 <HAL_RCC_OscConfig+0x324>
 8006dfc:	4b58      	ldr	r3, [pc, #352]	@ (8006f60 <HAL_RCC_OscConfig+0x470>)
 8006dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e00:	4a57      	ldr	r2, [pc, #348]	@ (8006f60 <HAL_RCC_OscConfig+0x470>)
 8006e02:	f023 0301 	bic.w	r3, r3, #1
 8006e06:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e08:	4b55      	ldr	r3, [pc, #340]	@ (8006f60 <HAL_RCC_OscConfig+0x470>)
 8006e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e0c:	4a54      	ldr	r2, [pc, #336]	@ (8006f60 <HAL_RCC_OscConfig+0x470>)
 8006e0e:	f023 0304 	bic.w	r3, r3, #4
 8006e12:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d015      	beq.n	8006e48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e1c:	f7fd fefa 	bl	8004c14 <HAL_GetTick>
 8006e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e22:	e00a      	b.n	8006e3a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e24:	f7fd fef6 	bl	8004c14 <HAL_GetTick>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d901      	bls.n	8006e3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006e36:	2303      	movs	r3, #3
 8006e38:	e0cb      	b.n	8006fd2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e3a:	4b49      	ldr	r3, [pc, #292]	@ (8006f60 <HAL_RCC_OscConfig+0x470>)
 8006e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e3e:	f003 0302 	and.w	r3, r3, #2
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d0ee      	beq.n	8006e24 <HAL_RCC_OscConfig+0x334>
 8006e46:	e014      	b.n	8006e72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e48:	f7fd fee4 	bl	8004c14 <HAL_GetTick>
 8006e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e4e:	e00a      	b.n	8006e66 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e50:	f7fd fee0 	bl	8004c14 <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d901      	bls.n	8006e66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	e0b5      	b.n	8006fd2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e66:	4b3e      	ldr	r3, [pc, #248]	@ (8006f60 <HAL_RCC_OscConfig+0x470>)
 8006e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e6a:	f003 0302 	and.w	r3, r3, #2
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1ee      	bne.n	8006e50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006e72:	7dfb      	ldrb	r3, [r7, #23]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d105      	bne.n	8006e84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e78:	4b39      	ldr	r3, [pc, #228]	@ (8006f60 <HAL_RCC_OscConfig+0x470>)
 8006e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e7c:	4a38      	ldr	r2, [pc, #224]	@ (8006f60 <HAL_RCC_OscConfig+0x470>)
 8006e7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e82:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	699b      	ldr	r3, [r3, #24]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f000 80a1 	beq.w	8006fd0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e8e:	4b34      	ldr	r3, [pc, #208]	@ (8006f60 <HAL_RCC_OscConfig+0x470>)
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	f003 030c 	and.w	r3, r3, #12
 8006e96:	2b08      	cmp	r3, #8
 8006e98:	d05c      	beq.n	8006f54 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d141      	bne.n	8006f26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ea2:	4b31      	ldr	r3, [pc, #196]	@ (8006f68 <HAL_RCC_OscConfig+0x478>)
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ea8:	f7fd feb4 	bl	8004c14 <HAL_GetTick>
 8006eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eae:	e008      	b.n	8006ec2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006eb0:	f7fd feb0 	bl	8004c14 <HAL_GetTick>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d901      	bls.n	8006ec2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e087      	b.n	8006fd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ec2:	4b27      	ldr	r3, [pc, #156]	@ (8006f60 <HAL_RCC_OscConfig+0x470>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1f0      	bne.n	8006eb0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	69da      	ldr	r2, [r3, #28]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	431a      	orrs	r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006edc:	019b      	lsls	r3, r3, #6
 8006ede:	431a      	orrs	r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ee4:	085b      	lsrs	r3, r3, #1
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	041b      	lsls	r3, r3, #16
 8006eea:	431a      	orrs	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef0:	061b      	lsls	r3, r3, #24
 8006ef2:	491b      	ldr	r1, [pc, #108]	@ (8006f60 <HAL_RCC_OscConfig+0x470>)
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8006f68 <HAL_RCC_OscConfig+0x478>)
 8006efa:	2201      	movs	r2, #1
 8006efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006efe:	f7fd fe89 	bl	8004c14 <HAL_GetTick>
 8006f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f04:	e008      	b.n	8006f18 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f06:	f7fd fe85 	bl	8004c14 <HAL_GetTick>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	1ad3      	subs	r3, r2, r3
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d901      	bls.n	8006f18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006f14:	2303      	movs	r3, #3
 8006f16:	e05c      	b.n	8006fd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f18:	4b11      	ldr	r3, [pc, #68]	@ (8006f60 <HAL_RCC_OscConfig+0x470>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d0f0      	beq.n	8006f06 <HAL_RCC_OscConfig+0x416>
 8006f24:	e054      	b.n	8006fd0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f26:	4b10      	ldr	r3, [pc, #64]	@ (8006f68 <HAL_RCC_OscConfig+0x478>)
 8006f28:	2200      	movs	r2, #0
 8006f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f2c:	f7fd fe72 	bl	8004c14 <HAL_GetTick>
 8006f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f32:	e008      	b.n	8006f46 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f34:	f7fd fe6e 	bl	8004c14 <HAL_GetTick>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d901      	bls.n	8006f46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e045      	b.n	8006fd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f46:	4b06      	ldr	r3, [pc, #24]	@ (8006f60 <HAL_RCC_OscConfig+0x470>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1f0      	bne.n	8006f34 <HAL_RCC_OscConfig+0x444>
 8006f52:	e03d      	b.n	8006fd0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	699b      	ldr	r3, [r3, #24]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d107      	bne.n	8006f6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e038      	b.n	8006fd2 <HAL_RCC_OscConfig+0x4e2>
 8006f60:	40023800 	.word	0x40023800
 8006f64:	40007000 	.word	0x40007000
 8006f68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8006fdc <HAL_RCC_OscConfig+0x4ec>)
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d028      	beq.n	8006fcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d121      	bne.n	8006fcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d11a      	bne.n	8006fcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006fa2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d111      	bne.n	8006fcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fb2:	085b      	lsrs	r3, r3, #1
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d107      	bne.n	8006fcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d001      	beq.n	8006fd0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e000      	b.n	8006fd2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3718      	adds	r7, #24
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	40023800 	.word	0x40023800

08006fe0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d101      	bne.n	8006ff4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e0cc      	b.n	800718e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ff4:	4b68      	ldr	r3, [pc, #416]	@ (8007198 <HAL_RCC_ClockConfig+0x1b8>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 030f 	and.w	r3, r3, #15
 8006ffc:	683a      	ldr	r2, [r7, #0]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d90c      	bls.n	800701c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007002:	4b65      	ldr	r3, [pc, #404]	@ (8007198 <HAL_RCC_ClockConfig+0x1b8>)
 8007004:	683a      	ldr	r2, [r7, #0]
 8007006:	b2d2      	uxtb	r2, r2
 8007008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800700a:	4b63      	ldr	r3, [pc, #396]	@ (8007198 <HAL_RCC_ClockConfig+0x1b8>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 030f 	and.w	r3, r3, #15
 8007012:	683a      	ldr	r2, [r7, #0]
 8007014:	429a      	cmp	r2, r3
 8007016:	d001      	beq.n	800701c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e0b8      	b.n	800718e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 0302 	and.w	r3, r3, #2
 8007024:	2b00      	cmp	r3, #0
 8007026:	d020      	beq.n	800706a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 0304 	and.w	r3, r3, #4
 8007030:	2b00      	cmp	r3, #0
 8007032:	d005      	beq.n	8007040 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007034:	4b59      	ldr	r3, [pc, #356]	@ (800719c <HAL_RCC_ClockConfig+0x1bc>)
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	4a58      	ldr	r2, [pc, #352]	@ (800719c <HAL_RCC_ClockConfig+0x1bc>)
 800703a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800703e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0308 	and.w	r3, r3, #8
 8007048:	2b00      	cmp	r3, #0
 800704a:	d005      	beq.n	8007058 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800704c:	4b53      	ldr	r3, [pc, #332]	@ (800719c <HAL_RCC_ClockConfig+0x1bc>)
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	4a52      	ldr	r2, [pc, #328]	@ (800719c <HAL_RCC_ClockConfig+0x1bc>)
 8007052:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007056:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007058:	4b50      	ldr	r3, [pc, #320]	@ (800719c <HAL_RCC_ClockConfig+0x1bc>)
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	494d      	ldr	r1, [pc, #308]	@ (800719c <HAL_RCC_ClockConfig+0x1bc>)
 8007066:	4313      	orrs	r3, r2
 8007068:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	2b00      	cmp	r3, #0
 8007074:	d044      	beq.n	8007100 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d107      	bne.n	800708e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800707e:	4b47      	ldr	r3, [pc, #284]	@ (800719c <HAL_RCC_ClockConfig+0x1bc>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007086:	2b00      	cmp	r3, #0
 8007088:	d119      	bne.n	80070be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e07f      	b.n	800718e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	2b02      	cmp	r3, #2
 8007094:	d003      	beq.n	800709e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800709a:	2b03      	cmp	r3, #3
 800709c:	d107      	bne.n	80070ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800709e:	4b3f      	ldr	r3, [pc, #252]	@ (800719c <HAL_RCC_ClockConfig+0x1bc>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d109      	bne.n	80070be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e06f      	b.n	800718e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070ae:	4b3b      	ldr	r3, [pc, #236]	@ (800719c <HAL_RCC_ClockConfig+0x1bc>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 0302 	and.w	r3, r3, #2
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d101      	bne.n	80070be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e067      	b.n	800718e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070be:	4b37      	ldr	r3, [pc, #220]	@ (800719c <HAL_RCC_ClockConfig+0x1bc>)
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f023 0203 	bic.w	r2, r3, #3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	4934      	ldr	r1, [pc, #208]	@ (800719c <HAL_RCC_ClockConfig+0x1bc>)
 80070cc:	4313      	orrs	r3, r2
 80070ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80070d0:	f7fd fda0 	bl	8004c14 <HAL_GetTick>
 80070d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070d6:	e00a      	b.n	80070ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070d8:	f7fd fd9c 	bl	8004c14 <HAL_GetTick>
 80070dc:	4602      	mov	r2, r0
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	1ad3      	subs	r3, r2, r3
 80070e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d901      	bls.n	80070ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070ea:	2303      	movs	r3, #3
 80070ec:	e04f      	b.n	800718e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070ee:	4b2b      	ldr	r3, [pc, #172]	@ (800719c <HAL_RCC_ClockConfig+0x1bc>)
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	f003 020c 	and.w	r2, r3, #12
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d1eb      	bne.n	80070d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007100:	4b25      	ldr	r3, [pc, #148]	@ (8007198 <HAL_RCC_ClockConfig+0x1b8>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 030f 	and.w	r3, r3, #15
 8007108:	683a      	ldr	r2, [r7, #0]
 800710a:	429a      	cmp	r2, r3
 800710c:	d20c      	bcs.n	8007128 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800710e:	4b22      	ldr	r3, [pc, #136]	@ (8007198 <HAL_RCC_ClockConfig+0x1b8>)
 8007110:	683a      	ldr	r2, [r7, #0]
 8007112:	b2d2      	uxtb	r2, r2
 8007114:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007116:	4b20      	ldr	r3, [pc, #128]	@ (8007198 <HAL_RCC_ClockConfig+0x1b8>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 030f 	and.w	r3, r3, #15
 800711e:	683a      	ldr	r2, [r7, #0]
 8007120:	429a      	cmp	r2, r3
 8007122:	d001      	beq.n	8007128 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e032      	b.n	800718e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 0304 	and.w	r3, r3, #4
 8007130:	2b00      	cmp	r3, #0
 8007132:	d008      	beq.n	8007146 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007134:	4b19      	ldr	r3, [pc, #100]	@ (800719c <HAL_RCC_ClockConfig+0x1bc>)
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	4916      	ldr	r1, [pc, #88]	@ (800719c <HAL_RCC_ClockConfig+0x1bc>)
 8007142:	4313      	orrs	r3, r2
 8007144:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0308 	and.w	r3, r3, #8
 800714e:	2b00      	cmp	r3, #0
 8007150:	d009      	beq.n	8007166 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007152:	4b12      	ldr	r3, [pc, #72]	@ (800719c <HAL_RCC_ClockConfig+0x1bc>)
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	00db      	lsls	r3, r3, #3
 8007160:	490e      	ldr	r1, [pc, #56]	@ (800719c <HAL_RCC_ClockConfig+0x1bc>)
 8007162:	4313      	orrs	r3, r2
 8007164:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007166:	f000 f821 	bl	80071ac <HAL_RCC_GetSysClockFreq>
 800716a:	4602      	mov	r2, r0
 800716c:	4b0b      	ldr	r3, [pc, #44]	@ (800719c <HAL_RCC_ClockConfig+0x1bc>)
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	091b      	lsrs	r3, r3, #4
 8007172:	f003 030f 	and.w	r3, r3, #15
 8007176:	490a      	ldr	r1, [pc, #40]	@ (80071a0 <HAL_RCC_ClockConfig+0x1c0>)
 8007178:	5ccb      	ldrb	r3, [r1, r3]
 800717a:	fa22 f303 	lsr.w	r3, r2, r3
 800717e:	4a09      	ldr	r2, [pc, #36]	@ (80071a4 <HAL_RCC_ClockConfig+0x1c4>)
 8007180:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007182:	4b09      	ldr	r3, [pc, #36]	@ (80071a8 <HAL_RCC_ClockConfig+0x1c8>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4618      	mov	r0, r3
 8007188:	f7fd fd00 	bl	8004b8c <HAL_InitTick>

  return HAL_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	40023c00 	.word	0x40023c00
 800719c:	40023800 	.word	0x40023800
 80071a0:	08009c80 	.word	0x08009c80
 80071a4:	20000574 	.word	0x20000574
 80071a8:	20000578 	.word	0x20000578

080071ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071b0:	b090      	sub	sp, #64	@ 0x40
 80071b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80071b4:	2300      	movs	r3, #0
 80071b6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80071b8:	2300      	movs	r3, #0
 80071ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80071bc:	2300      	movs	r3, #0
 80071be:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80071c0:	2300      	movs	r3, #0
 80071c2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071c4:	4b59      	ldr	r3, [pc, #356]	@ (800732c <HAL_RCC_GetSysClockFreq+0x180>)
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	f003 030c 	and.w	r3, r3, #12
 80071cc:	2b08      	cmp	r3, #8
 80071ce:	d00d      	beq.n	80071ec <HAL_RCC_GetSysClockFreq+0x40>
 80071d0:	2b08      	cmp	r3, #8
 80071d2:	f200 80a1 	bhi.w	8007318 <HAL_RCC_GetSysClockFreq+0x16c>
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d002      	beq.n	80071e0 <HAL_RCC_GetSysClockFreq+0x34>
 80071da:	2b04      	cmp	r3, #4
 80071dc:	d003      	beq.n	80071e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80071de:	e09b      	b.n	8007318 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80071e0:	4b53      	ldr	r3, [pc, #332]	@ (8007330 <HAL_RCC_GetSysClockFreq+0x184>)
 80071e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80071e4:	e09b      	b.n	800731e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80071e6:	4b53      	ldr	r3, [pc, #332]	@ (8007334 <HAL_RCC_GetSysClockFreq+0x188>)
 80071e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80071ea:	e098      	b.n	800731e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071ec:	4b4f      	ldr	r3, [pc, #316]	@ (800732c <HAL_RCC_GetSysClockFreq+0x180>)
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80071f6:	4b4d      	ldr	r3, [pc, #308]	@ (800732c <HAL_RCC_GetSysClockFreq+0x180>)
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d028      	beq.n	8007254 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007202:	4b4a      	ldr	r3, [pc, #296]	@ (800732c <HAL_RCC_GetSysClockFreq+0x180>)
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	099b      	lsrs	r3, r3, #6
 8007208:	2200      	movs	r2, #0
 800720a:	623b      	str	r3, [r7, #32]
 800720c:	627a      	str	r2, [r7, #36]	@ 0x24
 800720e:	6a3b      	ldr	r3, [r7, #32]
 8007210:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007214:	2100      	movs	r1, #0
 8007216:	4b47      	ldr	r3, [pc, #284]	@ (8007334 <HAL_RCC_GetSysClockFreq+0x188>)
 8007218:	fb03 f201 	mul.w	r2, r3, r1
 800721c:	2300      	movs	r3, #0
 800721e:	fb00 f303 	mul.w	r3, r0, r3
 8007222:	4413      	add	r3, r2
 8007224:	4a43      	ldr	r2, [pc, #268]	@ (8007334 <HAL_RCC_GetSysClockFreq+0x188>)
 8007226:	fba0 1202 	umull	r1, r2, r0, r2
 800722a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800722c:	460a      	mov	r2, r1
 800722e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007230:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007232:	4413      	add	r3, r2
 8007234:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007238:	2200      	movs	r2, #0
 800723a:	61bb      	str	r3, [r7, #24]
 800723c:	61fa      	str	r2, [r7, #28]
 800723e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007242:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007246:	f7f8 ffd1 	bl	80001ec <__aeabi_uldivmod>
 800724a:	4602      	mov	r2, r0
 800724c:	460b      	mov	r3, r1
 800724e:	4613      	mov	r3, r2
 8007250:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007252:	e053      	b.n	80072fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007254:	4b35      	ldr	r3, [pc, #212]	@ (800732c <HAL_RCC_GetSysClockFreq+0x180>)
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	099b      	lsrs	r3, r3, #6
 800725a:	2200      	movs	r2, #0
 800725c:	613b      	str	r3, [r7, #16]
 800725e:	617a      	str	r2, [r7, #20]
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007266:	f04f 0b00 	mov.w	fp, #0
 800726a:	4652      	mov	r2, sl
 800726c:	465b      	mov	r3, fp
 800726e:	f04f 0000 	mov.w	r0, #0
 8007272:	f04f 0100 	mov.w	r1, #0
 8007276:	0159      	lsls	r1, r3, #5
 8007278:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800727c:	0150      	lsls	r0, r2, #5
 800727e:	4602      	mov	r2, r0
 8007280:	460b      	mov	r3, r1
 8007282:	ebb2 080a 	subs.w	r8, r2, sl
 8007286:	eb63 090b 	sbc.w	r9, r3, fp
 800728a:	f04f 0200 	mov.w	r2, #0
 800728e:	f04f 0300 	mov.w	r3, #0
 8007292:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007296:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800729a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800729e:	ebb2 0408 	subs.w	r4, r2, r8
 80072a2:	eb63 0509 	sbc.w	r5, r3, r9
 80072a6:	f04f 0200 	mov.w	r2, #0
 80072aa:	f04f 0300 	mov.w	r3, #0
 80072ae:	00eb      	lsls	r3, r5, #3
 80072b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072b4:	00e2      	lsls	r2, r4, #3
 80072b6:	4614      	mov	r4, r2
 80072b8:	461d      	mov	r5, r3
 80072ba:	eb14 030a 	adds.w	r3, r4, sl
 80072be:	603b      	str	r3, [r7, #0]
 80072c0:	eb45 030b 	adc.w	r3, r5, fp
 80072c4:	607b      	str	r3, [r7, #4]
 80072c6:	f04f 0200 	mov.w	r2, #0
 80072ca:	f04f 0300 	mov.w	r3, #0
 80072ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80072d2:	4629      	mov	r1, r5
 80072d4:	028b      	lsls	r3, r1, #10
 80072d6:	4621      	mov	r1, r4
 80072d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80072dc:	4621      	mov	r1, r4
 80072de:	028a      	lsls	r2, r1, #10
 80072e0:	4610      	mov	r0, r2
 80072e2:	4619      	mov	r1, r3
 80072e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072e6:	2200      	movs	r2, #0
 80072e8:	60bb      	str	r3, [r7, #8]
 80072ea:	60fa      	str	r2, [r7, #12]
 80072ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072f0:	f7f8 ff7c 	bl	80001ec <__aeabi_uldivmod>
 80072f4:	4602      	mov	r2, r0
 80072f6:	460b      	mov	r3, r1
 80072f8:	4613      	mov	r3, r2
 80072fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80072fc:	4b0b      	ldr	r3, [pc, #44]	@ (800732c <HAL_RCC_GetSysClockFreq+0x180>)
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	0c1b      	lsrs	r3, r3, #16
 8007302:	f003 0303 	and.w	r3, r3, #3
 8007306:	3301      	adds	r3, #1
 8007308:	005b      	lsls	r3, r3, #1
 800730a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800730c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800730e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007310:	fbb2 f3f3 	udiv	r3, r2, r3
 8007314:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007316:	e002      	b.n	800731e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007318:	4b05      	ldr	r3, [pc, #20]	@ (8007330 <HAL_RCC_GetSysClockFreq+0x184>)
 800731a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800731c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800731e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007320:	4618      	mov	r0, r3
 8007322:	3740      	adds	r7, #64	@ 0x40
 8007324:	46bd      	mov	sp, r7
 8007326:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800732a:	bf00      	nop
 800732c:	40023800 	.word	0x40023800
 8007330:	00f42400 	.word	0x00f42400
 8007334:	017d7840 	.word	0x017d7840

08007338 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007338:	b480      	push	{r7}
 800733a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800733c:	4b03      	ldr	r3, [pc, #12]	@ (800734c <HAL_RCC_GetHCLKFreq+0x14>)
 800733e:	681b      	ldr	r3, [r3, #0]
}
 8007340:	4618      	mov	r0, r3
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	20000574 	.word	0x20000574

08007350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007354:	f7ff fff0 	bl	8007338 <HAL_RCC_GetHCLKFreq>
 8007358:	4602      	mov	r2, r0
 800735a:	4b05      	ldr	r3, [pc, #20]	@ (8007370 <HAL_RCC_GetPCLK1Freq+0x20>)
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	0a9b      	lsrs	r3, r3, #10
 8007360:	f003 0307 	and.w	r3, r3, #7
 8007364:	4903      	ldr	r1, [pc, #12]	@ (8007374 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007366:	5ccb      	ldrb	r3, [r1, r3]
 8007368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800736c:	4618      	mov	r0, r3
 800736e:	bd80      	pop	{r7, pc}
 8007370:	40023800 	.word	0x40023800
 8007374:	08009c90 	.word	0x08009c90

08007378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800737c:	f7ff ffdc 	bl	8007338 <HAL_RCC_GetHCLKFreq>
 8007380:	4602      	mov	r2, r0
 8007382:	4b05      	ldr	r3, [pc, #20]	@ (8007398 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	0b5b      	lsrs	r3, r3, #13
 8007388:	f003 0307 	and.w	r3, r3, #7
 800738c:	4903      	ldr	r1, [pc, #12]	@ (800739c <HAL_RCC_GetPCLK2Freq+0x24>)
 800738e:	5ccb      	ldrb	r3, [r1, r3]
 8007390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007394:	4618      	mov	r0, r3
 8007396:	bd80      	pop	{r7, pc}
 8007398:	40023800 	.word	0x40023800
 800739c:	08009c90 	.word	0x08009c90

080073a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d101      	bne.n	80073b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e07b      	b.n	80074aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d108      	bne.n	80073cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073c2:	d009      	beq.n	80073d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	61da      	str	r2, [r3, #28]
 80073ca:	e005      	b.n	80073d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d106      	bne.n	80073f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f7fd f8c4 	bl	8004580 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2202      	movs	r2, #2
 80073fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800740e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007420:	431a      	orrs	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800742a:	431a      	orrs	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	f003 0302 	and.w	r3, r3, #2
 8007434:	431a      	orrs	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	695b      	ldr	r3, [r3, #20]
 800743a:	f003 0301 	and.w	r3, r3, #1
 800743e:	431a      	orrs	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	699b      	ldr	r3, [r3, #24]
 8007444:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007448:	431a      	orrs	r2, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	69db      	ldr	r3, [r3, #28]
 800744e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007452:	431a      	orrs	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6a1b      	ldr	r3, [r3, #32]
 8007458:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800745c:	ea42 0103 	orr.w	r1, r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007464:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	430a      	orrs	r2, r1
 800746e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	699b      	ldr	r3, [r3, #24]
 8007474:	0c1b      	lsrs	r3, r3, #16
 8007476:	f003 0104 	and.w	r1, r3, #4
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800747e:	f003 0210 	and.w	r2, r3, #16
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	430a      	orrs	r2, r1
 8007488:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	69da      	ldr	r2, [r3, #28]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007498:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3708      	adds	r7, #8
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b088      	sub	sp, #32
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	60f8      	str	r0, [r7, #12]
 80074ba:	60b9      	str	r1, [r7, #8]
 80074bc:	603b      	str	r3, [r7, #0]
 80074be:	4613      	mov	r3, r2
 80074c0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074c2:	f7fd fba7 	bl	8004c14 <HAL_GetTick>
 80074c6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80074c8:	88fb      	ldrh	r3, [r7, #6]
 80074ca:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d001      	beq.n	80074dc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80074d8:	2302      	movs	r3, #2
 80074da:	e12a      	b.n	8007732 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d002      	beq.n	80074e8 <HAL_SPI_Transmit+0x36>
 80074e2:	88fb      	ldrh	r3, [r7, #6]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d101      	bne.n	80074ec <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e122      	b.n	8007732 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d101      	bne.n	80074fa <HAL_SPI_Transmit+0x48>
 80074f6:	2302      	movs	r3, #2
 80074f8:	e11b      	b.n	8007732 <HAL_SPI_Transmit+0x280>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2203      	movs	r2, #3
 8007506:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	88fa      	ldrh	r2, [r7, #6]
 800751a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	88fa      	ldrh	r2, [r7, #6]
 8007520:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007548:	d10f      	bne.n	800756a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007558:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007568:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007574:	2b40      	cmp	r3, #64	@ 0x40
 8007576:	d007      	beq.n	8007588 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007586:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007590:	d152      	bne.n	8007638 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d002      	beq.n	80075a0 <HAL_SPI_Transmit+0xee>
 800759a:	8b7b      	ldrh	r3, [r7, #26]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d145      	bne.n	800762c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075a4:	881a      	ldrh	r2, [r3, #0]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075b0:	1c9a      	adds	r2, r3, #2
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	3b01      	subs	r3, #1
 80075be:	b29a      	uxth	r2, r3
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80075c4:	e032      	b.n	800762c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	f003 0302 	and.w	r3, r3, #2
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d112      	bne.n	80075fa <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075d8:	881a      	ldrh	r2, [r3, #0]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075e4:	1c9a      	adds	r2, r3, #2
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	3b01      	subs	r3, #1
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80075f8:	e018      	b.n	800762c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075fa:	f7fd fb0b 	bl	8004c14 <HAL_GetTick>
 80075fe:	4602      	mov	r2, r0
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	1ad3      	subs	r3, r2, r3
 8007604:	683a      	ldr	r2, [r7, #0]
 8007606:	429a      	cmp	r2, r3
 8007608:	d803      	bhi.n	8007612 <HAL_SPI_Transmit+0x160>
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007610:	d102      	bne.n	8007618 <HAL_SPI_Transmit+0x166>
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d109      	bne.n	800762c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007628:	2303      	movs	r3, #3
 800762a:	e082      	b.n	8007732 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007630:	b29b      	uxth	r3, r3
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1c7      	bne.n	80075c6 <HAL_SPI_Transmit+0x114>
 8007636:	e053      	b.n	80076e0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d002      	beq.n	8007646 <HAL_SPI_Transmit+0x194>
 8007640:	8b7b      	ldrh	r3, [r7, #26]
 8007642:	2b01      	cmp	r3, #1
 8007644:	d147      	bne.n	80076d6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	330c      	adds	r3, #12
 8007650:	7812      	ldrb	r2, [r2, #0]
 8007652:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007658:	1c5a      	adds	r2, r3, #1
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007662:	b29b      	uxth	r3, r3
 8007664:	3b01      	subs	r3, #1
 8007666:	b29a      	uxth	r2, r3
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800766c:	e033      	b.n	80076d6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f003 0302 	and.w	r3, r3, #2
 8007678:	2b02      	cmp	r3, #2
 800767a:	d113      	bne.n	80076a4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	330c      	adds	r3, #12
 8007686:	7812      	ldrb	r2, [r2, #0]
 8007688:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800768e:	1c5a      	adds	r2, r3, #1
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007698:	b29b      	uxth	r3, r3
 800769a:	3b01      	subs	r3, #1
 800769c:	b29a      	uxth	r2, r3
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80076a2:	e018      	b.n	80076d6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076a4:	f7fd fab6 	bl	8004c14 <HAL_GetTick>
 80076a8:	4602      	mov	r2, r0
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	683a      	ldr	r2, [r7, #0]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d803      	bhi.n	80076bc <HAL_SPI_Transmit+0x20a>
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ba:	d102      	bne.n	80076c2 <HAL_SPI_Transmit+0x210>
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d109      	bne.n	80076d6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2201      	movs	r2, #1
 80076c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e02d      	b.n	8007732 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076da:	b29b      	uxth	r3, r3
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1c6      	bne.n	800766e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076e0:	69fa      	ldr	r2, [r7, #28]
 80076e2:	6839      	ldr	r1, [r7, #0]
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f000 f8b1 	bl	800784c <SPI_EndRxTxTransaction>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d002      	beq.n	80076f6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2220      	movs	r2, #32
 80076f4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d10a      	bne.n	8007714 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076fe:	2300      	movs	r3, #0
 8007700:	617b      	str	r3, [r7, #20]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	617b      	str	r3, [r7, #20]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	617b      	str	r3, [r7, #20]
 8007712:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007728:	2b00      	cmp	r3, #0
 800772a:	d001      	beq.n	8007730 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	e000      	b.n	8007732 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007730:	2300      	movs	r3, #0
  }
}
 8007732:	4618      	mov	r0, r3
 8007734:	3720      	adds	r7, #32
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
	...

0800773c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b088      	sub	sp, #32
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	603b      	str	r3, [r7, #0]
 8007748:	4613      	mov	r3, r2
 800774a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800774c:	f7fd fa62 	bl	8004c14 <HAL_GetTick>
 8007750:	4602      	mov	r2, r0
 8007752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007754:	1a9b      	subs	r3, r3, r2
 8007756:	683a      	ldr	r2, [r7, #0]
 8007758:	4413      	add	r3, r2
 800775a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800775c:	f7fd fa5a 	bl	8004c14 <HAL_GetTick>
 8007760:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007762:	4b39      	ldr	r3, [pc, #228]	@ (8007848 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	015b      	lsls	r3, r3, #5
 8007768:	0d1b      	lsrs	r3, r3, #20
 800776a:	69fa      	ldr	r2, [r7, #28]
 800776c:	fb02 f303 	mul.w	r3, r2, r3
 8007770:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007772:	e054      	b.n	800781e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800777a:	d050      	beq.n	800781e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800777c:	f7fd fa4a 	bl	8004c14 <HAL_GetTick>
 8007780:	4602      	mov	r2, r0
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	69fa      	ldr	r2, [r7, #28]
 8007788:	429a      	cmp	r2, r3
 800778a:	d902      	bls.n	8007792 <SPI_WaitFlagStateUntilTimeout+0x56>
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d13d      	bne.n	800780e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	685a      	ldr	r2, [r3, #4]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80077a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077aa:	d111      	bne.n	80077d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077b4:	d004      	beq.n	80077c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077be:	d107      	bne.n	80077d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077d8:	d10f      	bne.n	80077fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80077e8:	601a      	str	r2, [r3, #0]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80077f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800780a:	2303      	movs	r3, #3
 800780c:	e017      	b.n	800783e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d101      	bne.n	8007818 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007814:	2300      	movs	r3, #0
 8007816:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	3b01      	subs	r3, #1
 800781c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	689a      	ldr	r2, [r3, #8]
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	4013      	ands	r3, r2
 8007828:	68ba      	ldr	r2, [r7, #8]
 800782a:	429a      	cmp	r2, r3
 800782c:	bf0c      	ite	eq
 800782e:	2301      	moveq	r3, #1
 8007830:	2300      	movne	r3, #0
 8007832:	b2db      	uxtb	r3, r3
 8007834:	461a      	mov	r2, r3
 8007836:	79fb      	ldrb	r3, [r7, #7]
 8007838:	429a      	cmp	r2, r3
 800783a:	d19b      	bne.n	8007774 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3720      	adds	r7, #32
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	20000574 	.word	0x20000574

0800784c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b088      	sub	sp, #32
 8007850:	af02      	add	r7, sp, #8
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	9300      	str	r3, [sp, #0]
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	2201      	movs	r2, #1
 8007860:	2102      	movs	r1, #2
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f7ff ff6a 	bl	800773c <SPI_WaitFlagStateUntilTimeout>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d007      	beq.n	800787e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007872:	f043 0220 	orr.w	r2, r3, #32
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800787a:	2303      	movs	r3, #3
 800787c:	e032      	b.n	80078e4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800787e:	4b1b      	ldr	r3, [pc, #108]	@ (80078ec <SPI_EndRxTxTransaction+0xa0>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a1b      	ldr	r2, [pc, #108]	@ (80078f0 <SPI_EndRxTxTransaction+0xa4>)
 8007884:	fba2 2303 	umull	r2, r3, r2, r3
 8007888:	0d5b      	lsrs	r3, r3, #21
 800788a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800788e:	fb02 f303 	mul.w	r3, r2, r3
 8007892:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800789c:	d112      	bne.n	80078c4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	9300      	str	r3, [sp, #0]
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	2200      	movs	r2, #0
 80078a6:	2180      	movs	r1, #128	@ 0x80
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f7ff ff47 	bl	800773c <SPI_WaitFlagStateUntilTimeout>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d016      	beq.n	80078e2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078b8:	f043 0220 	orr.w	r2, r3, #32
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80078c0:	2303      	movs	r3, #3
 80078c2:	e00f      	b.n	80078e4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00a      	beq.n	80078e0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	3b01      	subs	r3, #1
 80078ce:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078da:	2b80      	cmp	r3, #128	@ 0x80
 80078dc:	d0f2      	beq.n	80078c4 <SPI_EndRxTxTransaction+0x78>
 80078de:	e000      	b.n	80078e2 <SPI_EndRxTxTransaction+0x96>
        break;
 80078e0:	bf00      	nop
  }

  return HAL_OK;
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3718      	adds	r7, #24
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	20000574 	.word	0x20000574
 80078f0:	165e9f81 	.word	0x165e9f81

080078f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d101      	bne.n	8007906 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	e042      	b.n	800798c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d106      	bne.n	8007920 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f7fc ff2c 	bl	8004778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2224      	movs	r2, #36	@ 0x24
 8007924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68da      	ldr	r2, [r3, #12]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007936:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 fc85 	bl	8008248 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	691a      	ldr	r2, [r3, #16]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800794c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	695a      	ldr	r2, [r3, #20]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800795c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68da      	ldr	r2, [r3, #12]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800796c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2220      	movs	r2, #32
 8007978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2220      	movs	r2, #32
 8007980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b0ba      	sub	sp, #232	@ 0xe8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	695b      	ldr	r3, [r3, #20]
 80079b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80079ba:	2300      	movs	r3, #0
 80079bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80079c0:	2300      	movs	r3, #0
 80079c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80079c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079ca:	f003 030f 	and.w	r3, r3, #15
 80079ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80079d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d10f      	bne.n	80079fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80079da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079de:	f003 0320 	and.w	r3, r3, #32
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d009      	beq.n	80079fa <HAL_UART_IRQHandler+0x66>
 80079e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079ea:	f003 0320 	and.w	r3, r3, #32
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d003      	beq.n	80079fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 fb69 	bl	80080ca <UART_Receive_IT>
      return;
 80079f8:	e25b      	b.n	8007eb2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80079fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f000 80de 	beq.w	8007bc0 <HAL_UART_IRQHandler+0x22c>
 8007a04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a08:	f003 0301 	and.w	r3, r3, #1
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d106      	bne.n	8007a1e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a14:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f000 80d1 	beq.w	8007bc0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a22:	f003 0301 	and.w	r3, r3, #1
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00b      	beq.n	8007a42 <HAL_UART_IRQHandler+0xae>
 8007a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d005      	beq.n	8007a42 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a3a:	f043 0201 	orr.w	r2, r3, #1
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a46:	f003 0304 	and.w	r3, r3, #4
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00b      	beq.n	8007a66 <HAL_UART_IRQHandler+0xd2>
 8007a4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a52:	f003 0301 	and.w	r3, r3, #1
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d005      	beq.n	8007a66 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a5e:	f043 0202 	orr.w	r2, r3, #2
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a6a:	f003 0302 	and.w	r3, r3, #2
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00b      	beq.n	8007a8a <HAL_UART_IRQHandler+0xf6>
 8007a72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a76:	f003 0301 	and.w	r3, r3, #1
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d005      	beq.n	8007a8a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a82:	f043 0204 	orr.w	r2, r3, #4
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a8e:	f003 0308 	and.w	r3, r3, #8
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d011      	beq.n	8007aba <HAL_UART_IRQHandler+0x126>
 8007a96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a9a:	f003 0320 	and.w	r3, r3, #32
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d105      	bne.n	8007aae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007aa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007aa6:	f003 0301 	and.w	r3, r3, #1
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d005      	beq.n	8007aba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ab2:	f043 0208 	orr.w	r2, r3, #8
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f000 81f2 	beq.w	8007ea8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ac8:	f003 0320 	and.w	r3, r3, #32
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d008      	beq.n	8007ae2 <HAL_UART_IRQHandler+0x14e>
 8007ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ad4:	f003 0320 	and.w	r3, r3, #32
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d002      	beq.n	8007ae2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 faf4 	bl	80080ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	695b      	ldr	r3, [r3, #20]
 8007ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aec:	2b40      	cmp	r3, #64	@ 0x40
 8007aee:	bf0c      	ite	eq
 8007af0:	2301      	moveq	r3, #1
 8007af2:	2300      	movne	r3, #0
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007afe:	f003 0308 	and.w	r3, r3, #8
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d103      	bne.n	8007b0e <HAL_UART_IRQHandler+0x17a>
 8007b06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d04f      	beq.n	8007bae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f9fc 	bl	8007f0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	695b      	ldr	r3, [r3, #20]
 8007b1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b1e:	2b40      	cmp	r3, #64	@ 0x40
 8007b20:	d141      	bne.n	8007ba6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	3314      	adds	r3, #20
 8007b28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007b30:	e853 3f00 	ldrex	r3, [r3]
 8007b34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007b38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	3314      	adds	r3, #20
 8007b4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007b4e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007b52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007b5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007b5e:	e841 2300 	strex	r3, r2, [r1]
 8007b62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007b66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1d9      	bne.n	8007b22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d013      	beq.n	8007b9e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b7a:	4a7e      	ldr	r2, [pc, #504]	@ (8007d74 <HAL_UART_IRQHandler+0x3e0>)
 8007b7c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7fd fd2b 	bl	80055de <HAL_DMA_Abort_IT>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d016      	beq.n	8007bbc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007b98:	4610      	mov	r0, r2
 8007b9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b9c:	e00e      	b.n	8007bbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f99e 	bl	8007ee0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ba4:	e00a      	b.n	8007bbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f99a 	bl	8007ee0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bac:	e006      	b.n	8007bbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f996 	bl	8007ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007bba:	e175      	b.n	8007ea8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bbc:	bf00      	nop
    return;
 8007bbe:	e173      	b.n	8007ea8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	f040 814f 	bne.w	8007e68 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bce:	f003 0310 	and.w	r3, r3, #16
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f000 8148 	beq.w	8007e68 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bdc:	f003 0310 	and.w	r3, r3, #16
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	f000 8141 	beq.w	8007e68 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007be6:	2300      	movs	r3, #0
 8007be8:	60bb      	str	r3, [r7, #8]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	60bb      	str	r3, [r7, #8]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	60bb      	str	r3, [r7, #8]
 8007bfa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	695b      	ldr	r3, [r3, #20]
 8007c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c06:	2b40      	cmp	r3, #64	@ 0x40
 8007c08:	f040 80b6 	bne.w	8007d78 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f000 8145 	beq.w	8007eac <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007c26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	f080 813e 	bcs.w	8007eac <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c36:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c3c:	69db      	ldr	r3, [r3, #28]
 8007c3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c42:	f000 8088 	beq.w	8007d56 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	330c      	adds	r3, #12
 8007c4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007c54:	e853 3f00 	ldrex	r3, [r3]
 8007c58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007c5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007c60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	330c      	adds	r3, #12
 8007c6e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007c72:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007c76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007c7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007c82:	e841 2300 	strex	r3, r2, [r1]
 8007c86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007c8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d1d9      	bne.n	8007c46 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	3314      	adds	r3, #20
 8007c98:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c9c:	e853 3f00 	ldrex	r3, [r3]
 8007ca0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007ca2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ca4:	f023 0301 	bic.w	r3, r3, #1
 8007ca8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	3314      	adds	r3, #20
 8007cb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007cb6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007cba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007cbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007cc2:	e841 2300 	strex	r3, r2, [r1]
 8007cc6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007cc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1e1      	bne.n	8007c92 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	3314      	adds	r3, #20
 8007cd4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007cd8:	e853 3f00 	ldrex	r3, [r3]
 8007cdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007cde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ce0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ce4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	3314      	adds	r3, #20
 8007cee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007cf2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007cf4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007cf8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007cfa:	e841 2300 	strex	r3, r2, [r1]
 8007cfe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007d00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d1e3      	bne.n	8007cce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2220      	movs	r2, #32
 8007d0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	330c      	adds	r3, #12
 8007d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d1e:	e853 3f00 	ldrex	r3, [r3]
 8007d22:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007d24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d26:	f023 0310 	bic.w	r3, r3, #16
 8007d2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	330c      	adds	r3, #12
 8007d34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007d38:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007d3a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007d3e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007d40:	e841 2300 	strex	r3, r2, [r1]
 8007d44:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007d46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d1e3      	bne.n	8007d14 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7fd fbd4 	bl	80054fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2202      	movs	r2, #2
 8007d5a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 f8c1 	bl	8007ef4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d72:	e09b      	b.n	8007eac <HAL_UART_IRQHandler+0x518>
 8007d74:	08007fd3 	.word	0x08007fd3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	f000 808e 	beq.w	8007eb0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007d94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f000 8089 	beq.w	8007eb0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	330c      	adds	r3, #12
 8007da4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007da8:	e853 3f00 	ldrex	r3, [r3]
 8007dac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007db0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007db4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	330c      	adds	r3, #12
 8007dbe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007dc2:	647a      	str	r2, [r7, #68]	@ 0x44
 8007dc4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007dc8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007dca:	e841 2300 	strex	r3, r2, [r1]
 8007dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007dd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d1e3      	bne.n	8007d9e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	3314      	adds	r3, #20
 8007ddc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de0:	e853 3f00 	ldrex	r3, [r3]
 8007de4:	623b      	str	r3, [r7, #32]
   return(result);
 8007de6:	6a3b      	ldr	r3, [r7, #32]
 8007de8:	f023 0301 	bic.w	r3, r3, #1
 8007dec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	3314      	adds	r3, #20
 8007df6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007dfa:	633a      	str	r2, [r7, #48]	@ 0x30
 8007dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e02:	e841 2300 	strex	r3, r2, [r1]
 8007e06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1e3      	bne.n	8007dd6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2220      	movs	r2, #32
 8007e12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	330c      	adds	r3, #12
 8007e22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	e853 3f00 	ldrex	r3, [r3]
 8007e2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f023 0310 	bic.w	r3, r3, #16
 8007e32:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	330c      	adds	r3, #12
 8007e3c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007e40:	61fa      	str	r2, [r7, #28]
 8007e42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e44:	69b9      	ldr	r1, [r7, #24]
 8007e46:	69fa      	ldr	r2, [r7, #28]
 8007e48:	e841 2300 	strex	r3, r2, [r1]
 8007e4c:	617b      	str	r3, [r7, #20]
   return(result);
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1e3      	bne.n	8007e1c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2202      	movs	r2, #2
 8007e58:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e5a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007e5e:	4619      	mov	r1, r3
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 f847 	bl	8007ef4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e66:	e023      	b.n	8007eb0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d009      	beq.n	8007e88 <HAL_UART_IRQHandler+0x4f4>
 8007e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d003      	beq.n	8007e88 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 f8ba 	bl	8007ffa <UART_Transmit_IT>
    return;
 8007e86:	e014      	b.n	8007eb2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00e      	beq.n	8007eb2 <HAL_UART_IRQHandler+0x51e>
 8007e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d008      	beq.n	8007eb2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 f8fa 	bl	800809a <UART_EndTransmit_IT>
    return;
 8007ea6:	e004      	b.n	8007eb2 <HAL_UART_IRQHandler+0x51e>
    return;
 8007ea8:	bf00      	nop
 8007eaa:	e002      	b.n	8007eb2 <HAL_UART_IRQHandler+0x51e>
      return;
 8007eac:	bf00      	nop
 8007eae:	e000      	b.n	8007eb2 <HAL_UART_IRQHandler+0x51e>
      return;
 8007eb0:	bf00      	nop
  }
}
 8007eb2:	37e8      	adds	r7, #232	@ 0xe8
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007ec0:	bf00      	nop
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007ed4:	bf00      	nop
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007ee8:	bf00      	nop
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	460b      	mov	r3, r1
 8007efe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f00:	bf00      	nop
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b095      	sub	sp, #84	@ 0x54
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	330c      	adds	r3, #12
 8007f1a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f1e:	e853 3f00 	ldrex	r3, [r3]
 8007f22:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	330c      	adds	r3, #12
 8007f32:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007f34:	643a      	str	r2, [r7, #64]	@ 0x40
 8007f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f38:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f3c:	e841 2300 	strex	r3, r2, [r1]
 8007f40:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d1e5      	bne.n	8007f14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	3314      	adds	r3, #20
 8007f4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f50:	6a3b      	ldr	r3, [r7, #32]
 8007f52:	e853 3f00 	ldrex	r3, [r3]
 8007f56:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	f023 0301 	bic.w	r3, r3, #1
 8007f5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	3314      	adds	r3, #20
 8007f66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f68:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f70:	e841 2300 	strex	r3, r2, [r1]
 8007f74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1e5      	bne.n	8007f48 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d119      	bne.n	8007fb8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	330c      	adds	r3, #12
 8007f8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	e853 3f00 	ldrex	r3, [r3]
 8007f92:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	f023 0310 	bic.w	r3, r3, #16
 8007f9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	330c      	adds	r3, #12
 8007fa2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007fa4:	61ba      	str	r2, [r7, #24]
 8007fa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa8:	6979      	ldr	r1, [r7, #20]
 8007faa:	69ba      	ldr	r2, [r7, #24]
 8007fac:	e841 2300 	strex	r3, r2, [r1]
 8007fb0:	613b      	str	r3, [r7, #16]
   return(result);
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d1e5      	bne.n	8007f84 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2220      	movs	r2, #32
 8007fbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007fc6:	bf00      	nop
 8007fc8:	3754      	adds	r7, #84	@ 0x54
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr

08007fd2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	b084      	sub	sp, #16
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fde:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	f7ff ff77 	bl	8007ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ff2:	bf00      	nop
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007ffa:	b480      	push	{r7}
 8007ffc:	b085      	sub	sp, #20
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008008:	b2db      	uxtb	r3, r3
 800800a:	2b21      	cmp	r3, #33	@ 0x21
 800800c:	d13e      	bne.n	800808c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008016:	d114      	bne.n	8008042 <UART_Transmit_IT+0x48>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d110      	bne.n	8008042 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6a1b      	ldr	r3, [r3, #32]
 8008024:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	881b      	ldrh	r3, [r3, #0]
 800802a:	461a      	mov	r2, r3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008034:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6a1b      	ldr	r3, [r3, #32]
 800803a:	1c9a      	adds	r2, r3, #2
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	621a      	str	r2, [r3, #32]
 8008040:	e008      	b.n	8008054 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a1b      	ldr	r3, [r3, #32]
 8008046:	1c59      	adds	r1, r3, #1
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	6211      	str	r1, [r2, #32]
 800804c:	781a      	ldrb	r2, [r3, #0]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008058:	b29b      	uxth	r3, r3
 800805a:	3b01      	subs	r3, #1
 800805c:	b29b      	uxth	r3, r3
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	4619      	mov	r1, r3
 8008062:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008064:	2b00      	cmp	r3, #0
 8008066:	d10f      	bne.n	8008088 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68da      	ldr	r2, [r3, #12]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008076:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	68da      	ldr	r2, [r3, #12]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008086:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008088:	2300      	movs	r3, #0
 800808a:	e000      	b.n	800808e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800808c:	2302      	movs	r3, #2
  }
}
 800808e:	4618      	mov	r0, r3
 8008090:	3714      	adds	r7, #20
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr

0800809a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b082      	sub	sp, #8
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68da      	ldr	r2, [r3, #12]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80080b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2220      	movs	r2, #32
 80080b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f7ff fefc 	bl	8007eb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3708      	adds	r7, #8
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b08c      	sub	sp, #48	@ 0x30
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	2b22      	cmp	r3, #34	@ 0x22
 80080dc:	f040 80ae 	bne.w	800823c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080e8:	d117      	bne.n	800811a <UART_Receive_IT+0x50>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d113      	bne.n	800811a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80080f2:	2300      	movs	r3, #0
 80080f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080fa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	b29b      	uxth	r3, r3
 8008104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008108:	b29a      	uxth	r2, r3
 800810a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800810c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008112:	1c9a      	adds	r2, r3, #2
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	629a      	str	r2, [r3, #40]	@ 0x28
 8008118:	e026      	b.n	8008168 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800811e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008120:	2300      	movs	r3, #0
 8008122:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800812c:	d007      	beq.n	800813e <UART_Receive_IT+0x74>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d10a      	bne.n	800814c <UART_Receive_IT+0x82>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d106      	bne.n	800814c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	b2da      	uxtb	r2, r3
 8008146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008148:	701a      	strb	r2, [r3, #0]
 800814a:	e008      	b.n	800815e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	b2db      	uxtb	r3, r3
 8008154:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008158:	b2da      	uxtb	r2, r3
 800815a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800815c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008162:	1c5a      	adds	r2, r3, #1
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800816c:	b29b      	uxth	r3, r3
 800816e:	3b01      	subs	r3, #1
 8008170:	b29b      	uxth	r3, r3
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	4619      	mov	r1, r3
 8008176:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008178:	2b00      	cmp	r3, #0
 800817a:	d15d      	bne.n	8008238 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68da      	ldr	r2, [r3, #12]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f022 0220 	bic.w	r2, r2, #32
 800818a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68da      	ldr	r2, [r3, #12]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800819a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	695a      	ldr	r2, [r3, #20]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f022 0201 	bic.w	r2, r2, #1
 80081aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2220      	movs	r2, #32
 80081b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d135      	bne.n	800822e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	330c      	adds	r3, #12
 80081ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	e853 3f00 	ldrex	r3, [r3]
 80081d6:	613b      	str	r3, [r7, #16]
   return(result);
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	f023 0310 	bic.w	r3, r3, #16
 80081de:	627b      	str	r3, [r7, #36]	@ 0x24
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	330c      	adds	r3, #12
 80081e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081e8:	623a      	str	r2, [r7, #32]
 80081ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ec:	69f9      	ldr	r1, [r7, #28]
 80081ee:	6a3a      	ldr	r2, [r7, #32]
 80081f0:	e841 2300 	strex	r3, r2, [r1]
 80081f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1e5      	bne.n	80081c8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f003 0310 	and.w	r3, r3, #16
 8008206:	2b10      	cmp	r3, #16
 8008208:	d10a      	bne.n	8008220 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800820a:	2300      	movs	r3, #0
 800820c:	60fb      	str	r3, [r7, #12]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	60fb      	str	r3, [r7, #12]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	60fb      	str	r3, [r7, #12]
 800821e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008224:	4619      	mov	r1, r3
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f7ff fe64 	bl	8007ef4 <HAL_UARTEx_RxEventCallback>
 800822c:	e002      	b.n	8008234 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f7ff fe4c 	bl	8007ecc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008234:	2300      	movs	r3, #0
 8008236:	e002      	b.n	800823e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008238:	2300      	movs	r3, #0
 800823a:	e000      	b.n	800823e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800823c:	2302      	movs	r3, #2
  }
}
 800823e:	4618      	mov	r0, r3
 8008240:	3730      	adds	r7, #48	@ 0x30
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
	...

08008248 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800824c:	b0c0      	sub	sp, #256	@ 0x100
 800824e:	af00      	add	r7, sp, #0
 8008250:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008264:	68d9      	ldr	r1, [r3, #12]
 8008266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	ea40 0301 	orr.w	r3, r0, r1
 8008270:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008276:	689a      	ldr	r2, [r3, #8]
 8008278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	431a      	orrs	r2, r3
 8008280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008284:	695b      	ldr	r3, [r3, #20]
 8008286:	431a      	orrs	r2, r3
 8008288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800828c:	69db      	ldr	r3, [r3, #28]
 800828e:	4313      	orrs	r3, r2
 8008290:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80082a0:	f021 010c 	bic.w	r1, r1, #12
 80082a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80082ae:	430b      	orrs	r3, r1
 80082b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80082b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	695b      	ldr	r3, [r3, #20]
 80082ba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80082be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082c2:	6999      	ldr	r1, [r3, #24]
 80082c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	ea40 0301 	orr.w	r3, r0, r1
 80082ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80082d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	4b8f      	ldr	r3, [pc, #572]	@ (8008514 <UART_SetConfig+0x2cc>)
 80082d8:	429a      	cmp	r2, r3
 80082da:	d005      	beq.n	80082e8 <UART_SetConfig+0xa0>
 80082dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	4b8d      	ldr	r3, [pc, #564]	@ (8008518 <UART_SetConfig+0x2d0>)
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d104      	bne.n	80082f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80082e8:	f7ff f846 	bl	8007378 <HAL_RCC_GetPCLK2Freq>
 80082ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80082f0:	e003      	b.n	80082fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80082f2:	f7ff f82d 	bl	8007350 <HAL_RCC_GetPCLK1Freq>
 80082f6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082fe:	69db      	ldr	r3, [r3, #28]
 8008300:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008304:	f040 810c 	bne.w	8008520 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008308:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800830c:	2200      	movs	r2, #0
 800830e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008312:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008316:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800831a:	4622      	mov	r2, r4
 800831c:	462b      	mov	r3, r5
 800831e:	1891      	adds	r1, r2, r2
 8008320:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008322:	415b      	adcs	r3, r3
 8008324:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008326:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800832a:	4621      	mov	r1, r4
 800832c:	eb12 0801 	adds.w	r8, r2, r1
 8008330:	4629      	mov	r1, r5
 8008332:	eb43 0901 	adc.w	r9, r3, r1
 8008336:	f04f 0200 	mov.w	r2, #0
 800833a:	f04f 0300 	mov.w	r3, #0
 800833e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008342:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008346:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800834a:	4690      	mov	r8, r2
 800834c:	4699      	mov	r9, r3
 800834e:	4623      	mov	r3, r4
 8008350:	eb18 0303 	adds.w	r3, r8, r3
 8008354:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008358:	462b      	mov	r3, r5
 800835a:	eb49 0303 	adc.w	r3, r9, r3
 800835e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800836e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008372:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008376:	460b      	mov	r3, r1
 8008378:	18db      	adds	r3, r3, r3
 800837a:	653b      	str	r3, [r7, #80]	@ 0x50
 800837c:	4613      	mov	r3, r2
 800837e:	eb42 0303 	adc.w	r3, r2, r3
 8008382:	657b      	str	r3, [r7, #84]	@ 0x54
 8008384:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008388:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800838c:	f7f7 ff2e 	bl	80001ec <__aeabi_uldivmod>
 8008390:	4602      	mov	r2, r0
 8008392:	460b      	mov	r3, r1
 8008394:	4b61      	ldr	r3, [pc, #388]	@ (800851c <UART_SetConfig+0x2d4>)
 8008396:	fba3 2302 	umull	r2, r3, r3, r2
 800839a:	095b      	lsrs	r3, r3, #5
 800839c:	011c      	lsls	r4, r3, #4
 800839e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80083a2:	2200      	movs	r2, #0
 80083a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80083a8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80083ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80083b0:	4642      	mov	r2, r8
 80083b2:	464b      	mov	r3, r9
 80083b4:	1891      	adds	r1, r2, r2
 80083b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80083b8:	415b      	adcs	r3, r3
 80083ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80083c0:	4641      	mov	r1, r8
 80083c2:	eb12 0a01 	adds.w	sl, r2, r1
 80083c6:	4649      	mov	r1, r9
 80083c8:	eb43 0b01 	adc.w	fp, r3, r1
 80083cc:	f04f 0200 	mov.w	r2, #0
 80083d0:	f04f 0300 	mov.w	r3, #0
 80083d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80083d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80083dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80083e0:	4692      	mov	sl, r2
 80083e2:	469b      	mov	fp, r3
 80083e4:	4643      	mov	r3, r8
 80083e6:	eb1a 0303 	adds.w	r3, sl, r3
 80083ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80083ee:	464b      	mov	r3, r9
 80083f0:	eb4b 0303 	adc.w	r3, fp, r3
 80083f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80083f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008404:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008408:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800840c:	460b      	mov	r3, r1
 800840e:	18db      	adds	r3, r3, r3
 8008410:	643b      	str	r3, [r7, #64]	@ 0x40
 8008412:	4613      	mov	r3, r2
 8008414:	eb42 0303 	adc.w	r3, r2, r3
 8008418:	647b      	str	r3, [r7, #68]	@ 0x44
 800841a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800841e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008422:	f7f7 fee3 	bl	80001ec <__aeabi_uldivmod>
 8008426:	4602      	mov	r2, r0
 8008428:	460b      	mov	r3, r1
 800842a:	4611      	mov	r1, r2
 800842c:	4b3b      	ldr	r3, [pc, #236]	@ (800851c <UART_SetConfig+0x2d4>)
 800842e:	fba3 2301 	umull	r2, r3, r3, r1
 8008432:	095b      	lsrs	r3, r3, #5
 8008434:	2264      	movs	r2, #100	@ 0x64
 8008436:	fb02 f303 	mul.w	r3, r2, r3
 800843a:	1acb      	subs	r3, r1, r3
 800843c:	00db      	lsls	r3, r3, #3
 800843e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008442:	4b36      	ldr	r3, [pc, #216]	@ (800851c <UART_SetConfig+0x2d4>)
 8008444:	fba3 2302 	umull	r2, r3, r3, r2
 8008448:	095b      	lsrs	r3, r3, #5
 800844a:	005b      	lsls	r3, r3, #1
 800844c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008450:	441c      	add	r4, r3
 8008452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008456:	2200      	movs	r2, #0
 8008458:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800845c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008460:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008464:	4642      	mov	r2, r8
 8008466:	464b      	mov	r3, r9
 8008468:	1891      	adds	r1, r2, r2
 800846a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800846c:	415b      	adcs	r3, r3
 800846e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008470:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008474:	4641      	mov	r1, r8
 8008476:	1851      	adds	r1, r2, r1
 8008478:	6339      	str	r1, [r7, #48]	@ 0x30
 800847a:	4649      	mov	r1, r9
 800847c:	414b      	adcs	r3, r1
 800847e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008480:	f04f 0200 	mov.w	r2, #0
 8008484:	f04f 0300 	mov.w	r3, #0
 8008488:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800848c:	4659      	mov	r1, fp
 800848e:	00cb      	lsls	r3, r1, #3
 8008490:	4651      	mov	r1, sl
 8008492:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008496:	4651      	mov	r1, sl
 8008498:	00ca      	lsls	r2, r1, #3
 800849a:	4610      	mov	r0, r2
 800849c:	4619      	mov	r1, r3
 800849e:	4603      	mov	r3, r0
 80084a0:	4642      	mov	r2, r8
 80084a2:	189b      	adds	r3, r3, r2
 80084a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80084a8:	464b      	mov	r3, r9
 80084aa:	460a      	mov	r2, r1
 80084ac:	eb42 0303 	adc.w	r3, r2, r3
 80084b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80084b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80084c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80084c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80084c8:	460b      	mov	r3, r1
 80084ca:	18db      	adds	r3, r3, r3
 80084cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80084ce:	4613      	mov	r3, r2
 80084d0:	eb42 0303 	adc.w	r3, r2, r3
 80084d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80084d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80084da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80084de:	f7f7 fe85 	bl	80001ec <__aeabi_uldivmod>
 80084e2:	4602      	mov	r2, r0
 80084e4:	460b      	mov	r3, r1
 80084e6:	4b0d      	ldr	r3, [pc, #52]	@ (800851c <UART_SetConfig+0x2d4>)
 80084e8:	fba3 1302 	umull	r1, r3, r3, r2
 80084ec:	095b      	lsrs	r3, r3, #5
 80084ee:	2164      	movs	r1, #100	@ 0x64
 80084f0:	fb01 f303 	mul.w	r3, r1, r3
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	00db      	lsls	r3, r3, #3
 80084f8:	3332      	adds	r3, #50	@ 0x32
 80084fa:	4a08      	ldr	r2, [pc, #32]	@ (800851c <UART_SetConfig+0x2d4>)
 80084fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008500:	095b      	lsrs	r3, r3, #5
 8008502:	f003 0207 	and.w	r2, r3, #7
 8008506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4422      	add	r2, r4
 800850e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008510:	e106      	b.n	8008720 <UART_SetConfig+0x4d8>
 8008512:	bf00      	nop
 8008514:	40011000 	.word	0x40011000
 8008518:	40011400 	.word	0x40011400
 800851c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008520:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008524:	2200      	movs	r2, #0
 8008526:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800852a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800852e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008532:	4642      	mov	r2, r8
 8008534:	464b      	mov	r3, r9
 8008536:	1891      	adds	r1, r2, r2
 8008538:	6239      	str	r1, [r7, #32]
 800853a:	415b      	adcs	r3, r3
 800853c:	627b      	str	r3, [r7, #36]	@ 0x24
 800853e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008542:	4641      	mov	r1, r8
 8008544:	1854      	adds	r4, r2, r1
 8008546:	4649      	mov	r1, r9
 8008548:	eb43 0501 	adc.w	r5, r3, r1
 800854c:	f04f 0200 	mov.w	r2, #0
 8008550:	f04f 0300 	mov.w	r3, #0
 8008554:	00eb      	lsls	r3, r5, #3
 8008556:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800855a:	00e2      	lsls	r2, r4, #3
 800855c:	4614      	mov	r4, r2
 800855e:	461d      	mov	r5, r3
 8008560:	4643      	mov	r3, r8
 8008562:	18e3      	adds	r3, r4, r3
 8008564:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008568:	464b      	mov	r3, r9
 800856a:	eb45 0303 	adc.w	r3, r5, r3
 800856e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800857e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008582:	f04f 0200 	mov.w	r2, #0
 8008586:	f04f 0300 	mov.w	r3, #0
 800858a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800858e:	4629      	mov	r1, r5
 8008590:	008b      	lsls	r3, r1, #2
 8008592:	4621      	mov	r1, r4
 8008594:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008598:	4621      	mov	r1, r4
 800859a:	008a      	lsls	r2, r1, #2
 800859c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80085a0:	f7f7 fe24 	bl	80001ec <__aeabi_uldivmod>
 80085a4:	4602      	mov	r2, r0
 80085a6:	460b      	mov	r3, r1
 80085a8:	4b60      	ldr	r3, [pc, #384]	@ (800872c <UART_SetConfig+0x4e4>)
 80085aa:	fba3 2302 	umull	r2, r3, r3, r2
 80085ae:	095b      	lsrs	r3, r3, #5
 80085b0:	011c      	lsls	r4, r3, #4
 80085b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085b6:	2200      	movs	r2, #0
 80085b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80085bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80085c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80085c4:	4642      	mov	r2, r8
 80085c6:	464b      	mov	r3, r9
 80085c8:	1891      	adds	r1, r2, r2
 80085ca:	61b9      	str	r1, [r7, #24]
 80085cc:	415b      	adcs	r3, r3
 80085ce:	61fb      	str	r3, [r7, #28]
 80085d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80085d4:	4641      	mov	r1, r8
 80085d6:	1851      	adds	r1, r2, r1
 80085d8:	6139      	str	r1, [r7, #16]
 80085da:	4649      	mov	r1, r9
 80085dc:	414b      	adcs	r3, r1
 80085de:	617b      	str	r3, [r7, #20]
 80085e0:	f04f 0200 	mov.w	r2, #0
 80085e4:	f04f 0300 	mov.w	r3, #0
 80085e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80085ec:	4659      	mov	r1, fp
 80085ee:	00cb      	lsls	r3, r1, #3
 80085f0:	4651      	mov	r1, sl
 80085f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085f6:	4651      	mov	r1, sl
 80085f8:	00ca      	lsls	r2, r1, #3
 80085fa:	4610      	mov	r0, r2
 80085fc:	4619      	mov	r1, r3
 80085fe:	4603      	mov	r3, r0
 8008600:	4642      	mov	r2, r8
 8008602:	189b      	adds	r3, r3, r2
 8008604:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008608:	464b      	mov	r3, r9
 800860a:	460a      	mov	r2, r1
 800860c:	eb42 0303 	adc.w	r3, r2, r3
 8008610:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800861e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008620:	f04f 0200 	mov.w	r2, #0
 8008624:	f04f 0300 	mov.w	r3, #0
 8008628:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800862c:	4649      	mov	r1, r9
 800862e:	008b      	lsls	r3, r1, #2
 8008630:	4641      	mov	r1, r8
 8008632:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008636:	4641      	mov	r1, r8
 8008638:	008a      	lsls	r2, r1, #2
 800863a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800863e:	f7f7 fdd5 	bl	80001ec <__aeabi_uldivmod>
 8008642:	4602      	mov	r2, r0
 8008644:	460b      	mov	r3, r1
 8008646:	4611      	mov	r1, r2
 8008648:	4b38      	ldr	r3, [pc, #224]	@ (800872c <UART_SetConfig+0x4e4>)
 800864a:	fba3 2301 	umull	r2, r3, r3, r1
 800864e:	095b      	lsrs	r3, r3, #5
 8008650:	2264      	movs	r2, #100	@ 0x64
 8008652:	fb02 f303 	mul.w	r3, r2, r3
 8008656:	1acb      	subs	r3, r1, r3
 8008658:	011b      	lsls	r3, r3, #4
 800865a:	3332      	adds	r3, #50	@ 0x32
 800865c:	4a33      	ldr	r2, [pc, #204]	@ (800872c <UART_SetConfig+0x4e4>)
 800865e:	fba2 2303 	umull	r2, r3, r2, r3
 8008662:	095b      	lsrs	r3, r3, #5
 8008664:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008668:	441c      	add	r4, r3
 800866a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800866e:	2200      	movs	r2, #0
 8008670:	673b      	str	r3, [r7, #112]	@ 0x70
 8008672:	677a      	str	r2, [r7, #116]	@ 0x74
 8008674:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008678:	4642      	mov	r2, r8
 800867a:	464b      	mov	r3, r9
 800867c:	1891      	adds	r1, r2, r2
 800867e:	60b9      	str	r1, [r7, #8]
 8008680:	415b      	adcs	r3, r3
 8008682:	60fb      	str	r3, [r7, #12]
 8008684:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008688:	4641      	mov	r1, r8
 800868a:	1851      	adds	r1, r2, r1
 800868c:	6039      	str	r1, [r7, #0]
 800868e:	4649      	mov	r1, r9
 8008690:	414b      	adcs	r3, r1
 8008692:	607b      	str	r3, [r7, #4]
 8008694:	f04f 0200 	mov.w	r2, #0
 8008698:	f04f 0300 	mov.w	r3, #0
 800869c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80086a0:	4659      	mov	r1, fp
 80086a2:	00cb      	lsls	r3, r1, #3
 80086a4:	4651      	mov	r1, sl
 80086a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086aa:	4651      	mov	r1, sl
 80086ac:	00ca      	lsls	r2, r1, #3
 80086ae:	4610      	mov	r0, r2
 80086b0:	4619      	mov	r1, r3
 80086b2:	4603      	mov	r3, r0
 80086b4:	4642      	mov	r2, r8
 80086b6:	189b      	adds	r3, r3, r2
 80086b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80086ba:	464b      	mov	r3, r9
 80086bc:	460a      	mov	r2, r1
 80086be:	eb42 0303 	adc.w	r3, r2, r3
 80086c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80086c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80086ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80086d0:	f04f 0200 	mov.w	r2, #0
 80086d4:	f04f 0300 	mov.w	r3, #0
 80086d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80086dc:	4649      	mov	r1, r9
 80086de:	008b      	lsls	r3, r1, #2
 80086e0:	4641      	mov	r1, r8
 80086e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086e6:	4641      	mov	r1, r8
 80086e8:	008a      	lsls	r2, r1, #2
 80086ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80086ee:	f7f7 fd7d 	bl	80001ec <__aeabi_uldivmod>
 80086f2:	4602      	mov	r2, r0
 80086f4:	460b      	mov	r3, r1
 80086f6:	4b0d      	ldr	r3, [pc, #52]	@ (800872c <UART_SetConfig+0x4e4>)
 80086f8:	fba3 1302 	umull	r1, r3, r3, r2
 80086fc:	095b      	lsrs	r3, r3, #5
 80086fe:	2164      	movs	r1, #100	@ 0x64
 8008700:	fb01 f303 	mul.w	r3, r1, r3
 8008704:	1ad3      	subs	r3, r2, r3
 8008706:	011b      	lsls	r3, r3, #4
 8008708:	3332      	adds	r3, #50	@ 0x32
 800870a:	4a08      	ldr	r2, [pc, #32]	@ (800872c <UART_SetConfig+0x4e4>)
 800870c:	fba2 2303 	umull	r2, r3, r2, r3
 8008710:	095b      	lsrs	r3, r3, #5
 8008712:	f003 020f 	and.w	r2, r3, #15
 8008716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4422      	add	r2, r4
 800871e:	609a      	str	r2, [r3, #8]
}
 8008720:	bf00      	nop
 8008722:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008726:	46bd      	mov	sp, r7
 8008728:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800872c:	51eb851f 	.word	0x51eb851f

08008730 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008734:	4904      	ldr	r1, [pc, #16]	@ (8008748 <MX_FATFS_Init+0x18>)
 8008736:	4805      	ldr	r0, [pc, #20]	@ (800874c <MX_FATFS_Init+0x1c>)
 8008738:	f000 f8b0 	bl	800889c <FATFS_LinkDriver>
 800873c:	4603      	mov	r3, r0
 800873e:	461a      	mov	r2, r3
 8008740:	4b03      	ldr	r3, [pc, #12]	@ (8008750 <MX_FATFS_Init+0x20>)
 8008742:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008744:	bf00      	nop
 8008746:	bd80      	pop	{r7, pc}
 8008748:	200010a0 	.word	0x200010a0
 800874c:	20000580 	.word	0x20000580
 8008750:	2000109c 	.word	0x2000109c

08008754 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	4603      	mov	r3, r0
 800875c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800875e:	4b06      	ldr	r3, [pc, #24]	@ (8008778 <USER_initialize+0x24>)
 8008760:	2201      	movs	r2, #1
 8008762:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008764:	4b04      	ldr	r3, [pc, #16]	@ (8008778 <USER_initialize+0x24>)
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800876a:	4618      	mov	r0, r3
 800876c:	370c      	adds	r7, #12
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop
 8008778:	2000057d 	.word	0x2000057d

0800877c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	4603      	mov	r3, r0
 8008784:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8008786:	4b06      	ldr	r3, [pc, #24]	@ (80087a0 <USER_status+0x24>)
 8008788:	2201      	movs	r2, #1
 800878a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800878c:	4b04      	ldr	r3, [pc, #16]	@ (80087a0 <USER_status+0x24>)
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8008792:	4618      	mov	r0, r3
 8008794:	370c      	adds	r7, #12
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop
 80087a0:	2000057d 	.word	0x2000057d

080087a4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60b9      	str	r1, [r7, #8]
 80087ac:	607a      	str	r2, [r7, #4]
 80087ae:	603b      	str	r3, [r7, #0]
 80087b0:	4603      	mov	r3, r0
 80087b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80087b4:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3714      	adds	r7, #20
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr

080087c2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80087c2:	b480      	push	{r7}
 80087c4:	b085      	sub	sp, #20
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	607a      	str	r2, [r7, #4]
 80087cc:	603b      	str	r3, [r7, #0]
 80087ce:	4603      	mov	r3, r0
 80087d0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80087d2:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3714      	adds	r7, #20
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b085      	sub	sp, #20
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	4603      	mov	r3, r0
 80087e8:	603a      	str	r2, [r7, #0]
 80087ea:	71fb      	strb	r3, [r7, #7]
 80087ec:	460b      	mov	r3, r1
 80087ee:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	73fb      	strb	r3, [r7, #15]
    return res;
 80087f4:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3714      	adds	r7, #20
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
	...

08008804 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008804:	b480      	push	{r7}
 8008806:	b087      	sub	sp, #28
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	4613      	mov	r3, r2
 8008810:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008812:	2301      	movs	r3, #1
 8008814:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008816:	2300      	movs	r3, #0
 8008818:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800881a:	4b1f      	ldr	r3, [pc, #124]	@ (8008898 <FATFS_LinkDriverEx+0x94>)
 800881c:	7a5b      	ldrb	r3, [r3, #9]
 800881e:	b2db      	uxtb	r3, r3
 8008820:	2b00      	cmp	r3, #0
 8008822:	d131      	bne.n	8008888 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008824:	4b1c      	ldr	r3, [pc, #112]	@ (8008898 <FATFS_LinkDriverEx+0x94>)
 8008826:	7a5b      	ldrb	r3, [r3, #9]
 8008828:	b2db      	uxtb	r3, r3
 800882a:	461a      	mov	r2, r3
 800882c:	4b1a      	ldr	r3, [pc, #104]	@ (8008898 <FATFS_LinkDriverEx+0x94>)
 800882e:	2100      	movs	r1, #0
 8008830:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008832:	4b19      	ldr	r3, [pc, #100]	@ (8008898 <FATFS_LinkDriverEx+0x94>)
 8008834:	7a5b      	ldrb	r3, [r3, #9]
 8008836:	b2db      	uxtb	r3, r3
 8008838:	4a17      	ldr	r2, [pc, #92]	@ (8008898 <FATFS_LinkDriverEx+0x94>)
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	4413      	add	r3, r2
 800883e:	68fa      	ldr	r2, [r7, #12]
 8008840:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008842:	4b15      	ldr	r3, [pc, #84]	@ (8008898 <FATFS_LinkDriverEx+0x94>)
 8008844:	7a5b      	ldrb	r3, [r3, #9]
 8008846:	b2db      	uxtb	r3, r3
 8008848:	461a      	mov	r2, r3
 800884a:	4b13      	ldr	r3, [pc, #76]	@ (8008898 <FATFS_LinkDriverEx+0x94>)
 800884c:	4413      	add	r3, r2
 800884e:	79fa      	ldrb	r2, [r7, #7]
 8008850:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008852:	4b11      	ldr	r3, [pc, #68]	@ (8008898 <FATFS_LinkDriverEx+0x94>)
 8008854:	7a5b      	ldrb	r3, [r3, #9]
 8008856:	b2db      	uxtb	r3, r3
 8008858:	1c5a      	adds	r2, r3, #1
 800885a:	b2d1      	uxtb	r1, r2
 800885c:	4a0e      	ldr	r2, [pc, #56]	@ (8008898 <FATFS_LinkDriverEx+0x94>)
 800885e:	7251      	strb	r1, [r2, #9]
 8008860:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008862:	7dbb      	ldrb	r3, [r7, #22]
 8008864:	3330      	adds	r3, #48	@ 0x30
 8008866:	b2da      	uxtb	r2, r3
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	3301      	adds	r3, #1
 8008870:	223a      	movs	r2, #58	@ 0x3a
 8008872:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	3302      	adds	r3, #2
 8008878:	222f      	movs	r2, #47	@ 0x2f
 800887a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	3303      	adds	r3, #3
 8008880:	2200      	movs	r2, #0
 8008882:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008884:	2300      	movs	r3, #0
 8008886:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008888:	7dfb      	ldrb	r3, [r7, #23]
}
 800888a:	4618      	mov	r0, r3
 800888c:	371c      	adds	r7, #28
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop
 8008898:	200010a4 	.word	0x200010a4

0800889c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80088a6:	2200      	movs	r2, #0
 80088a8:	6839      	ldr	r1, [r7, #0]
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f7ff ffaa 	bl	8008804 <FATFS_LinkDriverEx>
 80088b0:	4603      	mov	r3, r0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3708      	adds	r7, #8
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
	...

080088bc <malloc>:
 80088bc:	4b02      	ldr	r3, [pc, #8]	@ (80088c8 <malloc+0xc>)
 80088be:	4601      	mov	r1, r0
 80088c0:	6818      	ldr	r0, [r3, #0]
 80088c2:	f000 b82d 	b.w	8008920 <_malloc_r>
 80088c6:	bf00      	nop
 80088c8:	20000594 	.word	0x20000594

080088cc <free>:
 80088cc:	4b02      	ldr	r3, [pc, #8]	@ (80088d8 <free+0xc>)
 80088ce:	4601      	mov	r1, r0
 80088d0:	6818      	ldr	r0, [r3, #0]
 80088d2:	f000 b8f5 	b.w	8008ac0 <_free_r>
 80088d6:	bf00      	nop
 80088d8:	20000594 	.word	0x20000594

080088dc <sbrk_aligned>:
 80088dc:	b570      	push	{r4, r5, r6, lr}
 80088de:	4e0f      	ldr	r6, [pc, #60]	@ (800891c <sbrk_aligned+0x40>)
 80088e0:	460c      	mov	r4, r1
 80088e2:	6831      	ldr	r1, [r6, #0]
 80088e4:	4605      	mov	r5, r0
 80088e6:	b911      	cbnz	r1, 80088ee <sbrk_aligned+0x12>
 80088e8:	f000 f8ae 	bl	8008a48 <_sbrk_r>
 80088ec:	6030      	str	r0, [r6, #0]
 80088ee:	4621      	mov	r1, r4
 80088f0:	4628      	mov	r0, r5
 80088f2:	f000 f8a9 	bl	8008a48 <_sbrk_r>
 80088f6:	1c43      	adds	r3, r0, #1
 80088f8:	d103      	bne.n	8008902 <sbrk_aligned+0x26>
 80088fa:	f04f 34ff 	mov.w	r4, #4294967295
 80088fe:	4620      	mov	r0, r4
 8008900:	bd70      	pop	{r4, r5, r6, pc}
 8008902:	1cc4      	adds	r4, r0, #3
 8008904:	f024 0403 	bic.w	r4, r4, #3
 8008908:	42a0      	cmp	r0, r4
 800890a:	d0f8      	beq.n	80088fe <sbrk_aligned+0x22>
 800890c:	1a21      	subs	r1, r4, r0
 800890e:	4628      	mov	r0, r5
 8008910:	f000 f89a 	bl	8008a48 <_sbrk_r>
 8008914:	3001      	adds	r0, #1
 8008916:	d1f2      	bne.n	80088fe <sbrk_aligned+0x22>
 8008918:	e7ef      	b.n	80088fa <sbrk_aligned+0x1e>
 800891a:	bf00      	nop
 800891c:	200010b0 	.word	0x200010b0

08008920 <_malloc_r>:
 8008920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008924:	1ccd      	adds	r5, r1, #3
 8008926:	f025 0503 	bic.w	r5, r5, #3
 800892a:	3508      	adds	r5, #8
 800892c:	2d0c      	cmp	r5, #12
 800892e:	bf38      	it	cc
 8008930:	250c      	movcc	r5, #12
 8008932:	2d00      	cmp	r5, #0
 8008934:	4606      	mov	r6, r0
 8008936:	db01      	blt.n	800893c <_malloc_r+0x1c>
 8008938:	42a9      	cmp	r1, r5
 800893a:	d904      	bls.n	8008946 <_malloc_r+0x26>
 800893c:	230c      	movs	r3, #12
 800893e:	6033      	str	r3, [r6, #0]
 8008940:	2000      	movs	r0, #0
 8008942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008946:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a1c <_malloc_r+0xfc>
 800894a:	f000 f869 	bl	8008a20 <__malloc_lock>
 800894e:	f8d8 3000 	ldr.w	r3, [r8]
 8008952:	461c      	mov	r4, r3
 8008954:	bb44      	cbnz	r4, 80089a8 <_malloc_r+0x88>
 8008956:	4629      	mov	r1, r5
 8008958:	4630      	mov	r0, r6
 800895a:	f7ff ffbf 	bl	80088dc <sbrk_aligned>
 800895e:	1c43      	adds	r3, r0, #1
 8008960:	4604      	mov	r4, r0
 8008962:	d158      	bne.n	8008a16 <_malloc_r+0xf6>
 8008964:	f8d8 4000 	ldr.w	r4, [r8]
 8008968:	4627      	mov	r7, r4
 800896a:	2f00      	cmp	r7, #0
 800896c:	d143      	bne.n	80089f6 <_malloc_r+0xd6>
 800896e:	2c00      	cmp	r4, #0
 8008970:	d04b      	beq.n	8008a0a <_malloc_r+0xea>
 8008972:	6823      	ldr	r3, [r4, #0]
 8008974:	4639      	mov	r1, r7
 8008976:	4630      	mov	r0, r6
 8008978:	eb04 0903 	add.w	r9, r4, r3
 800897c:	f000 f864 	bl	8008a48 <_sbrk_r>
 8008980:	4581      	cmp	r9, r0
 8008982:	d142      	bne.n	8008a0a <_malloc_r+0xea>
 8008984:	6821      	ldr	r1, [r4, #0]
 8008986:	1a6d      	subs	r5, r5, r1
 8008988:	4629      	mov	r1, r5
 800898a:	4630      	mov	r0, r6
 800898c:	f7ff ffa6 	bl	80088dc <sbrk_aligned>
 8008990:	3001      	adds	r0, #1
 8008992:	d03a      	beq.n	8008a0a <_malloc_r+0xea>
 8008994:	6823      	ldr	r3, [r4, #0]
 8008996:	442b      	add	r3, r5
 8008998:	6023      	str	r3, [r4, #0]
 800899a:	f8d8 3000 	ldr.w	r3, [r8]
 800899e:	685a      	ldr	r2, [r3, #4]
 80089a0:	bb62      	cbnz	r2, 80089fc <_malloc_r+0xdc>
 80089a2:	f8c8 7000 	str.w	r7, [r8]
 80089a6:	e00f      	b.n	80089c8 <_malloc_r+0xa8>
 80089a8:	6822      	ldr	r2, [r4, #0]
 80089aa:	1b52      	subs	r2, r2, r5
 80089ac:	d420      	bmi.n	80089f0 <_malloc_r+0xd0>
 80089ae:	2a0b      	cmp	r2, #11
 80089b0:	d917      	bls.n	80089e2 <_malloc_r+0xc2>
 80089b2:	1961      	adds	r1, r4, r5
 80089b4:	42a3      	cmp	r3, r4
 80089b6:	6025      	str	r5, [r4, #0]
 80089b8:	bf18      	it	ne
 80089ba:	6059      	strne	r1, [r3, #4]
 80089bc:	6863      	ldr	r3, [r4, #4]
 80089be:	bf08      	it	eq
 80089c0:	f8c8 1000 	streq.w	r1, [r8]
 80089c4:	5162      	str	r2, [r4, r5]
 80089c6:	604b      	str	r3, [r1, #4]
 80089c8:	4630      	mov	r0, r6
 80089ca:	f000 f82f 	bl	8008a2c <__malloc_unlock>
 80089ce:	f104 000b 	add.w	r0, r4, #11
 80089d2:	1d23      	adds	r3, r4, #4
 80089d4:	f020 0007 	bic.w	r0, r0, #7
 80089d8:	1ac2      	subs	r2, r0, r3
 80089da:	bf1c      	itt	ne
 80089dc:	1a1b      	subne	r3, r3, r0
 80089de:	50a3      	strne	r3, [r4, r2]
 80089e0:	e7af      	b.n	8008942 <_malloc_r+0x22>
 80089e2:	6862      	ldr	r2, [r4, #4]
 80089e4:	42a3      	cmp	r3, r4
 80089e6:	bf0c      	ite	eq
 80089e8:	f8c8 2000 	streq.w	r2, [r8]
 80089ec:	605a      	strne	r2, [r3, #4]
 80089ee:	e7eb      	b.n	80089c8 <_malloc_r+0xa8>
 80089f0:	4623      	mov	r3, r4
 80089f2:	6864      	ldr	r4, [r4, #4]
 80089f4:	e7ae      	b.n	8008954 <_malloc_r+0x34>
 80089f6:	463c      	mov	r4, r7
 80089f8:	687f      	ldr	r7, [r7, #4]
 80089fa:	e7b6      	b.n	800896a <_malloc_r+0x4a>
 80089fc:	461a      	mov	r2, r3
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	42a3      	cmp	r3, r4
 8008a02:	d1fb      	bne.n	80089fc <_malloc_r+0xdc>
 8008a04:	2300      	movs	r3, #0
 8008a06:	6053      	str	r3, [r2, #4]
 8008a08:	e7de      	b.n	80089c8 <_malloc_r+0xa8>
 8008a0a:	230c      	movs	r3, #12
 8008a0c:	6033      	str	r3, [r6, #0]
 8008a0e:	4630      	mov	r0, r6
 8008a10:	f000 f80c 	bl	8008a2c <__malloc_unlock>
 8008a14:	e794      	b.n	8008940 <_malloc_r+0x20>
 8008a16:	6005      	str	r5, [r0, #0]
 8008a18:	e7d6      	b.n	80089c8 <_malloc_r+0xa8>
 8008a1a:	bf00      	nop
 8008a1c:	200010b4 	.word	0x200010b4

08008a20 <__malloc_lock>:
 8008a20:	4801      	ldr	r0, [pc, #4]	@ (8008a28 <__malloc_lock+0x8>)
 8008a22:	f000 b84b 	b.w	8008abc <__retarget_lock_acquire_recursive>
 8008a26:	bf00      	nop
 8008a28:	200011f4 	.word	0x200011f4

08008a2c <__malloc_unlock>:
 8008a2c:	4801      	ldr	r0, [pc, #4]	@ (8008a34 <__malloc_unlock+0x8>)
 8008a2e:	f000 b846 	b.w	8008abe <__retarget_lock_release_recursive>
 8008a32:	bf00      	nop
 8008a34:	200011f4 	.word	0x200011f4

08008a38 <memset>:
 8008a38:	4402      	add	r2, r0
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d100      	bne.n	8008a42 <memset+0xa>
 8008a40:	4770      	bx	lr
 8008a42:	f803 1b01 	strb.w	r1, [r3], #1
 8008a46:	e7f9      	b.n	8008a3c <memset+0x4>

08008a48 <_sbrk_r>:
 8008a48:	b538      	push	{r3, r4, r5, lr}
 8008a4a:	4d06      	ldr	r5, [pc, #24]	@ (8008a64 <_sbrk_r+0x1c>)
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	4604      	mov	r4, r0
 8008a50:	4608      	mov	r0, r1
 8008a52:	602b      	str	r3, [r5, #0]
 8008a54:	f7fc f806 	bl	8004a64 <_sbrk>
 8008a58:	1c43      	adds	r3, r0, #1
 8008a5a:	d102      	bne.n	8008a62 <_sbrk_r+0x1a>
 8008a5c:	682b      	ldr	r3, [r5, #0]
 8008a5e:	b103      	cbz	r3, 8008a62 <_sbrk_r+0x1a>
 8008a60:	6023      	str	r3, [r4, #0]
 8008a62:	bd38      	pop	{r3, r4, r5, pc}
 8008a64:	200011f0 	.word	0x200011f0

08008a68 <__errno>:
 8008a68:	4b01      	ldr	r3, [pc, #4]	@ (8008a70 <__errno+0x8>)
 8008a6a:	6818      	ldr	r0, [r3, #0]
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	20000594 	.word	0x20000594

08008a74 <__libc_init_array>:
 8008a74:	b570      	push	{r4, r5, r6, lr}
 8008a76:	4d0d      	ldr	r5, [pc, #52]	@ (8008aac <__libc_init_array+0x38>)
 8008a78:	4c0d      	ldr	r4, [pc, #52]	@ (8008ab0 <__libc_init_array+0x3c>)
 8008a7a:	1b64      	subs	r4, r4, r5
 8008a7c:	10a4      	asrs	r4, r4, #2
 8008a7e:	2600      	movs	r6, #0
 8008a80:	42a6      	cmp	r6, r4
 8008a82:	d109      	bne.n	8008a98 <__libc_init_array+0x24>
 8008a84:	4d0b      	ldr	r5, [pc, #44]	@ (8008ab4 <__libc_init_array+0x40>)
 8008a86:	4c0c      	ldr	r4, [pc, #48]	@ (8008ab8 <__libc_init_array+0x44>)
 8008a88:	f000 f864 	bl	8008b54 <_init>
 8008a8c:	1b64      	subs	r4, r4, r5
 8008a8e:	10a4      	asrs	r4, r4, #2
 8008a90:	2600      	movs	r6, #0
 8008a92:	42a6      	cmp	r6, r4
 8008a94:	d105      	bne.n	8008aa2 <__libc_init_array+0x2e>
 8008a96:	bd70      	pop	{r4, r5, r6, pc}
 8008a98:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a9c:	4798      	blx	r3
 8008a9e:	3601      	adds	r6, #1
 8008aa0:	e7ee      	b.n	8008a80 <__libc_init_array+0xc>
 8008aa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008aa6:	4798      	blx	r3
 8008aa8:	3601      	adds	r6, #1
 8008aaa:	e7f2      	b.n	8008a92 <__libc_init_array+0x1e>
 8008aac:	08009ca0 	.word	0x08009ca0
 8008ab0:	08009ca0 	.word	0x08009ca0
 8008ab4:	08009ca0 	.word	0x08009ca0
 8008ab8:	08009ca4 	.word	0x08009ca4

08008abc <__retarget_lock_acquire_recursive>:
 8008abc:	4770      	bx	lr

08008abe <__retarget_lock_release_recursive>:
 8008abe:	4770      	bx	lr

08008ac0 <_free_r>:
 8008ac0:	b538      	push	{r3, r4, r5, lr}
 8008ac2:	4605      	mov	r5, r0
 8008ac4:	2900      	cmp	r1, #0
 8008ac6:	d041      	beq.n	8008b4c <_free_r+0x8c>
 8008ac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008acc:	1f0c      	subs	r4, r1, #4
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	bfb8      	it	lt
 8008ad2:	18e4      	addlt	r4, r4, r3
 8008ad4:	f7ff ffa4 	bl	8008a20 <__malloc_lock>
 8008ad8:	4a1d      	ldr	r2, [pc, #116]	@ (8008b50 <_free_r+0x90>)
 8008ada:	6813      	ldr	r3, [r2, #0]
 8008adc:	b933      	cbnz	r3, 8008aec <_free_r+0x2c>
 8008ade:	6063      	str	r3, [r4, #4]
 8008ae0:	6014      	str	r4, [r2, #0]
 8008ae2:	4628      	mov	r0, r5
 8008ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ae8:	f7ff bfa0 	b.w	8008a2c <__malloc_unlock>
 8008aec:	42a3      	cmp	r3, r4
 8008aee:	d908      	bls.n	8008b02 <_free_r+0x42>
 8008af0:	6820      	ldr	r0, [r4, #0]
 8008af2:	1821      	adds	r1, r4, r0
 8008af4:	428b      	cmp	r3, r1
 8008af6:	bf01      	itttt	eq
 8008af8:	6819      	ldreq	r1, [r3, #0]
 8008afa:	685b      	ldreq	r3, [r3, #4]
 8008afc:	1809      	addeq	r1, r1, r0
 8008afe:	6021      	streq	r1, [r4, #0]
 8008b00:	e7ed      	b.n	8008ade <_free_r+0x1e>
 8008b02:	461a      	mov	r2, r3
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	b10b      	cbz	r3, 8008b0c <_free_r+0x4c>
 8008b08:	42a3      	cmp	r3, r4
 8008b0a:	d9fa      	bls.n	8008b02 <_free_r+0x42>
 8008b0c:	6811      	ldr	r1, [r2, #0]
 8008b0e:	1850      	adds	r0, r2, r1
 8008b10:	42a0      	cmp	r0, r4
 8008b12:	d10b      	bne.n	8008b2c <_free_r+0x6c>
 8008b14:	6820      	ldr	r0, [r4, #0]
 8008b16:	4401      	add	r1, r0
 8008b18:	1850      	adds	r0, r2, r1
 8008b1a:	4283      	cmp	r3, r0
 8008b1c:	6011      	str	r1, [r2, #0]
 8008b1e:	d1e0      	bne.n	8008ae2 <_free_r+0x22>
 8008b20:	6818      	ldr	r0, [r3, #0]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	6053      	str	r3, [r2, #4]
 8008b26:	4408      	add	r0, r1
 8008b28:	6010      	str	r0, [r2, #0]
 8008b2a:	e7da      	b.n	8008ae2 <_free_r+0x22>
 8008b2c:	d902      	bls.n	8008b34 <_free_r+0x74>
 8008b2e:	230c      	movs	r3, #12
 8008b30:	602b      	str	r3, [r5, #0]
 8008b32:	e7d6      	b.n	8008ae2 <_free_r+0x22>
 8008b34:	6820      	ldr	r0, [r4, #0]
 8008b36:	1821      	adds	r1, r4, r0
 8008b38:	428b      	cmp	r3, r1
 8008b3a:	bf04      	itt	eq
 8008b3c:	6819      	ldreq	r1, [r3, #0]
 8008b3e:	685b      	ldreq	r3, [r3, #4]
 8008b40:	6063      	str	r3, [r4, #4]
 8008b42:	bf04      	itt	eq
 8008b44:	1809      	addeq	r1, r1, r0
 8008b46:	6021      	streq	r1, [r4, #0]
 8008b48:	6054      	str	r4, [r2, #4]
 8008b4a:	e7ca      	b.n	8008ae2 <_free_r+0x22>
 8008b4c:	bd38      	pop	{r3, r4, r5, pc}
 8008b4e:	bf00      	nop
 8008b50:	200010b4 	.word	0x200010b4

08008b54 <_init>:
 8008b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b56:	bf00      	nop
 8008b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b5a:	bc08      	pop	{r3}
 8008b5c:	469e      	mov	lr, r3
 8008b5e:	4770      	bx	lr

08008b60 <_fini>:
 8008b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b62:	bf00      	nop
 8008b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b66:	bc08      	pop	{r3}
 8008b68:	469e      	mov	lr, r3
 8008b6a:	4770      	bx	lr
