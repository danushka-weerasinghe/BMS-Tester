
BMS Tester - Cell Emulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc50  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000048c0  0800ce00  0800ce00  0000de00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080116c0  080116c0  0001332c  2**0
                  CONTENTS
  4 .ARM          00000008  080116c0  080116c0  000126c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080116c8  080116c8  0001332c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080116c8  080116c8  000126c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080116cc  080116cc  000126cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000032c  20000000  080116d0  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001332c  2**0
                  CONTENTS
 10 .bss          00000964  2000032c  2000032c  0001332c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000c90  20000c90  0001332c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001332c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000585a8  00000000  00000000  0001335c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000058e8  00000000  00000000  0006b904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003ff8  00000000  00000000  000711f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00003022  00000000  00000000  000751e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026b0a  00000000  00000000  0007820a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002be2d  00000000  00000000  0009ed14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6c0c  00000000  00000000  000cab41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001c174d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00012650  00000000  00000000  001c1790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  001d3de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000032c 	.word	0x2000032c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800cde8 	.word	0x0800cde8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000330 	.word	0x20000330
 80001ec:	0800cde8 	.word	0x0800cde8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96a 	b.w	8000eb4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	460c      	mov	r4, r1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d14e      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c04:	4694      	mov	ip, r2
 8000c06:	458c      	cmp	ip, r1
 8000c08:	4686      	mov	lr, r0
 8000c0a:	fab2 f282 	clz	r2, r2
 8000c0e:	d962      	bls.n	8000cd6 <__udivmoddi4+0xde>
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0320 	rsb	r3, r2, #32
 8000c16:	4091      	lsls	r1, r2
 8000c18:	fa20 f303 	lsr.w	r3, r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	4319      	orrs	r1, r3
 8000c22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f f68c 	uxth.w	r6, ip
 8000c2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c36:	fb07 1114 	mls	r1, r7, r4, r1
 8000c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3e:	fb04 f106 	mul.w	r1, r4, r6
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c4e:	f080 8112 	bcs.w	8000e76 <__udivmoddi4+0x27e>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 810f 	bls.w	8000e76 <__udivmoddi4+0x27e>
 8000c58:	3c02      	subs	r4, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a59      	subs	r1, r3, r1
 8000c5e:	fa1f f38e 	uxth.w	r3, lr
 8000c62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c66:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb00 f606 	mul.w	r6, r0, r6
 8000c72:	429e      	cmp	r6, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x94>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7e:	f080 80fc 	bcs.w	8000e7a <__udivmoddi4+0x282>
 8000c82:	429e      	cmp	r6, r3
 8000c84:	f240 80f9 	bls.w	8000e7a <__udivmoddi4+0x282>
 8000c88:	4463      	add	r3, ip
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	1b9b      	subs	r3, r3, r6
 8000c8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c92:	2100      	movs	r1, #0
 8000c94:	b11d      	cbz	r5, 8000c9e <__udivmoddi4+0xa6>
 8000c96:	40d3      	lsrs	r3, r2
 8000c98:	2200      	movs	r2, #0
 8000c9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d905      	bls.n	8000cb2 <__udivmoddi4+0xba>
 8000ca6:	b10d      	cbz	r5, 8000cac <__udivmoddi4+0xb4>
 8000ca8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e7f5      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cb2:	fab3 f183 	clz	r1, r3
 8000cb6:	2900      	cmp	r1, #0
 8000cb8:	d146      	bne.n	8000d48 <__udivmoddi4+0x150>
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	d302      	bcc.n	8000cc4 <__udivmoddi4+0xcc>
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	f0c0 80f0 	bcc.w	8000ea4 <__udivmoddi4+0x2ac>
 8000cc4:	1a86      	subs	r6, r0, r2
 8000cc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cca:	2001      	movs	r0, #1
 8000ccc:	2d00      	cmp	r5, #0
 8000cce:	d0e6      	beq.n	8000c9e <__udivmoddi4+0xa6>
 8000cd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd4:	e7e3      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x204>
 8000cdc:	eba1 040c 	sub.w	r4, r1, ip
 8000ce0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	2101      	movs	r1, #1
 8000cea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfa:	fb07 f006 	mul.w	r0, r7, r6
 8000cfe:	4298      	cmp	r0, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x11c>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x11a>
 8000d0c:	4298      	cmp	r0, r3
 8000d0e:	f200 80cd 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000d12:	4626      	mov	r6, r4
 8000d14:	1a1c      	subs	r4, r3, r0
 8000d16:	fa1f f38e 	uxth.w	r3, lr
 8000d1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb00 f707 	mul.w	r7, r0, r7
 8000d2a:	429f      	cmp	r7, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x148>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x146>
 8000d38:	429f      	cmp	r7, r3
 8000d3a:	f200 80b0 	bhi.w	8000e9e <__udivmoddi4+0x2a6>
 8000d3e:	4620      	mov	r0, r4
 8000d40:	1bdb      	subs	r3, r3, r7
 8000d42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d46:	e7a5      	b.n	8000c94 <__udivmoddi4+0x9c>
 8000d48:	f1c1 0620 	rsb	r6, r1, #32
 8000d4c:	408b      	lsls	r3, r1
 8000d4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d52:	431f      	orrs	r7, r3
 8000d54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d58:	fa04 f301 	lsl.w	r3, r4, r1
 8000d5c:	ea43 030c 	orr.w	r3, r3, ip
 8000d60:	40f4      	lsrs	r4, r6
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	0c38      	lsrs	r0, r7, #16
 8000d68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d70:	fa1f fc87 	uxth.w	ip, r7
 8000d74:	fb00 441e 	mls	r4, r0, lr, r4
 8000d78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d80:	45a1      	cmp	r9, r4
 8000d82:	fa02 f201 	lsl.w	r2, r2, r1
 8000d86:	d90a      	bls.n	8000d9e <__udivmoddi4+0x1a6>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d8e:	f080 8084 	bcs.w	8000e9a <__udivmoddi4+0x2a2>
 8000d92:	45a1      	cmp	r9, r4
 8000d94:	f240 8081 	bls.w	8000e9a <__udivmoddi4+0x2a2>
 8000d98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d9c:	443c      	add	r4, r7
 8000d9e:	eba4 0409 	sub.w	r4, r4, r9
 8000da2:	fa1f f983 	uxth.w	r9, r3
 8000da6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000daa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x1d2>
 8000dba:	193c      	adds	r4, r7, r4
 8000dbc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc0:	d267      	bcs.n	8000e92 <__udivmoddi4+0x29a>
 8000dc2:	45a4      	cmp	ip, r4
 8000dc4:	d965      	bls.n	8000e92 <__udivmoddi4+0x29a>
 8000dc6:	3b02      	subs	r3, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dce:	fba0 9302 	umull	r9, r3, r0, r2
 8000dd2:	eba4 040c 	sub.w	r4, r4, ip
 8000dd6:	429c      	cmp	r4, r3
 8000dd8:	46ce      	mov	lr, r9
 8000dda:	469c      	mov	ip, r3
 8000ddc:	d351      	bcc.n	8000e82 <__udivmoddi4+0x28a>
 8000dde:	d04e      	beq.n	8000e7e <__udivmoddi4+0x286>
 8000de0:	b155      	cbz	r5, 8000df8 <__udivmoddi4+0x200>
 8000de2:	ebb8 030e 	subs.w	r3, r8, lr
 8000de6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dea:	fa04 f606 	lsl.w	r6, r4, r6
 8000dee:	40cb      	lsrs	r3, r1
 8000df0:	431e      	orrs	r6, r3
 8000df2:	40cc      	lsrs	r4, r1
 8000df4:	e9c5 6400 	strd	r6, r4, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	e750      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f103 	lsr.w	r1, r0, r3
 8000e04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e08:	fa24 f303 	lsr.w	r3, r4, r3
 8000e0c:	4094      	lsls	r4, r2
 8000e0e:	430c      	orrs	r4, r1
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e18:	fa1f f78c 	uxth.w	r7, ip
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3110 	mls	r1, r8, r0, r3
 8000e24:	0c23      	lsrs	r3, r4, #16
 8000e26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2a:	fb00 f107 	mul.w	r1, r0, r7
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x24c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e3a:	d22c      	bcs.n	8000e96 <__udivmoddi4+0x29e>
 8000e3c:	4299      	cmp	r1, r3
 8000e3e:	d92a      	bls.n	8000e96 <__udivmoddi4+0x29e>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb01 f307 	mul.w	r3, r1, r7
 8000e58:	42a3      	cmp	r3, r4
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x276>
 8000e5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e64:	d213      	bcs.n	8000e8e <__udivmoddi4+0x296>
 8000e66:	42a3      	cmp	r3, r4
 8000e68:	d911      	bls.n	8000e8e <__udivmoddi4+0x296>
 8000e6a:	3902      	subs	r1, #2
 8000e6c:	4464      	add	r4, ip
 8000e6e:	1ae4      	subs	r4, r4, r3
 8000e70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e74:	e739      	b.n	8000cea <__udivmoddi4+0xf2>
 8000e76:	4604      	mov	r4, r0
 8000e78:	e6f0      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e706      	b.n	8000c8c <__udivmoddi4+0x94>
 8000e7e:	45c8      	cmp	r8, r9
 8000e80:	d2ae      	bcs.n	8000de0 <__udivmoddi4+0x1e8>
 8000e82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e8a:	3801      	subs	r0, #1
 8000e8c:	e7a8      	b.n	8000de0 <__udivmoddi4+0x1e8>
 8000e8e:	4631      	mov	r1, r6
 8000e90:	e7ed      	b.n	8000e6e <__udivmoddi4+0x276>
 8000e92:	4603      	mov	r3, r0
 8000e94:	e799      	b.n	8000dca <__udivmoddi4+0x1d2>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e7d4      	b.n	8000e44 <__udivmoddi4+0x24c>
 8000e9a:	46d6      	mov	lr, sl
 8000e9c:	e77f      	b.n	8000d9e <__udivmoddi4+0x1a6>
 8000e9e:	4463      	add	r3, ip
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e74d      	b.n	8000d40 <__udivmoddi4+0x148>
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	4623      	mov	r3, r4
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e70f      	b.n	8000ccc <__udivmoddi4+0xd4>
 8000eac:	3e02      	subs	r6, #2
 8000eae:	4463      	add	r3, ip
 8000eb0:	e730      	b.n	8000d14 <__udivmoddi4+0x11c>
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	7c1b      	ldrb	r3, [r3, #16]
 8000ec6:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000ece:	461a      	mov	r2, r3
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	fb02 f303 	mul.w	r3, r2, r3
 8000ed6:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f009 ff6b 	bl	800adc2 <memset>
}
 8000eec:	bf00      	nop
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af02      	add	r7, sp, #8
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	70fb      	strb	r3, [r7, #3]
 8000f00:	4613      	mov	r3, r2
 8000f02:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	7c1b      	ldrb	r3, [r3, #16]
 8000f0a:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8000f0c:	78fb      	ldrb	r3, [r7, #3]
 8000f0e:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f14:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	89ba      	ldrh	r2, [r7, #12]
 8000f1c:	fb12 f303 	smulbb	r3, r2, r3
 8000f20:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8000f22:	89bb      	ldrh	r3, [r7, #12]
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8000f28:	89bb      	ldrh	r3, [r7, #12]
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8000f30:	7bf9      	ldrb	r1, [r7, #15]
 8000f32:	78ba      	ldrb	r2, [r7, #2]
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f001 fc98 	bl	8002872 <u8x8_DrawTile>
}
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b084      	sub	sp, #16
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000f5c:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8000f64:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	7c5b      	ldrb	r3, [r3, #17]
 8000f6c:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8000f6e:	7bba      	ldrb	r2, [r7, #14]
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	4619      	mov	r1, r3
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff ffbd 	bl	8000ef4 <u8g2_send_tile_row>
    src_row++;
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8000f80:	7bbb      	ldrb	r3, [r7, #14]
 8000f82:	3301      	adds	r3, #1
 8000f84:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8000f86:	7bfa      	ldrb	r2, [r7, #15]
 8000f88:	7b7b      	ldrb	r3, [r7, #13]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d203      	bcs.n	8000f96 <u8g2_send_buffer+0x4c>
 8000f8e:	7bba      	ldrb	r2, [r7, #14]
 8000f90:	7b3b      	ldrb	r3, [r7, #12]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d3eb      	bcc.n	8000f6e <u8g2_send_buffer+0x24>
}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ffcf 	bl	8000f4a <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f001 fcc2 	bl	8002936 <u8x8_RefreshDisplay>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	78fa      	ldrb	r2, [r7, #3]
 8000fca:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  u8g2->cb->update_dimension(u8g2);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	4798      	blx	r3
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d002      	beq.n	8001002 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff ff5b 	bl	8000eb8 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8001002:	2100      	movs	r1, #0
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff ffd8 	bl	8000fba <u8g2_SetBufferCurrTileRow>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b084      	sub	sp, #16
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ff95 	bl	8000f4a <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001026:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	4413      	add	r3, r2
 8001032:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	7c5b      	ldrb	r3, [r3, #17]
 800103a:	7bfa      	ldrb	r2, [r7, #15]
 800103c:	429a      	cmp	r2, r3
 800103e:	d304      	bcc.n	800104a <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f001 fc78 	bl	8002936 <u8x8_RefreshDisplay>
    return 0;
 8001046:	2300      	movs	r3, #0
 8001048:	e00d      	b.n	8001066 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8001050:	2b00      	cmp	r3, #0
 8001052:	d002      	beq.n	800105a <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff ff2f 	bl	8000eb8 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	4619      	mov	r1, r3
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff ffab 	bl	8000fba <u8g2_SetBufferCurrTileRow>
  return 1;
 8001064:	2301      	movs	r3, #1
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ffb7 	bl	8000fea <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ffc8 	bl	8001012 <u8g2_NextPage>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1f9      	bne.n	800107c <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8001088:	2100      	movs	r1, #0
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff ff95 	bl	8000fba <u8g2_SetBufferCurrTileRow>
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2208      	movs	r2, #8
 80010a4:	701a      	strb	r2, [r3, #0]
  return buf;
 80010a6:	4b03      	ldr	r3, [pc, #12]	@ (80010b4 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	20000348 	.word	0x20000348

080010b8 <u8g2_Setup_st7565_64128n_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_lm6063, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_64128n_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af02      	add	r7, sp, #8
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_64128n, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a0b      	ldr	r2, [pc, #44]	@ (80010fc <u8g2_Setup_st7565_64128n_f+0x44>)
 80010ce:	490c      	ldr	r1, [pc, #48]	@ (8001100 <u8g2_Setup_st7565_64128n_f+0x48>)
 80010d0:	68f8      	ldr	r0, [r7, #12]
 80010d2:	f001 fc91 	bl	80029f8 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 80010d6:	f107 0313 	add.w	r3, r7, #19
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff ffdc 	bl	8001098 <u8g2_m_16_8_f>
 80010e0:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80010e2:	7cfa      	ldrb	r2, [r7, #19]
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <u8g2_Setup_st7565_64128n_f+0x4c>)
 80010ea:	6979      	ldr	r1, [r7, #20]
 80010ec:	68f8      	ldr	r0, [r7, #12]
 80010ee:	f000 ffc4 	bl	800207a <u8g2_SetupBuffer>
}
 80010f2:	bf00      	nop
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	0800258d 	.word	0x0800258d
 8001100:	0800272d 	.word	0x0800272d
 8001104:	08001efd 	.word	0x08001efd

08001108 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	460b      	mov	r3, r1
 8001112:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8001114:	78fb      	ldrb	r3, [r7, #3]
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	781b      	ldrb	r3, [r3, #0]
}
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8001138:	78fb      	ldrb	r3, [r7, #3]
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	81fb      	strh	r3, [r7, #14]
    font++;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	3301      	adds	r3, #1
 800114a:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 800114c:	89fb      	ldrh	r3, [r7, #14]
 800114e:	021b      	lsls	r3, r3, #8
 8001150:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	461a      	mov	r2, r3
 8001158:	89fb      	ldrh	r3, [r7, #14]
 800115a:	4413      	add	r3, r2
 800115c:	81fb      	strh	r3, [r7, #14]
    return pos;
 800115e:	89fb      	ldrh	r3, [r7, #14]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8001176:	2100      	movs	r1, #0
 8001178:	6838      	ldr	r0, [r7, #0]
 800117a:	f7ff ffc5 	bl	8001108 <u8g2_font_get_byte>
 800117e:	4603      	mov	r3, r0
 8001180:	461a      	mov	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8001186:	2101      	movs	r1, #1
 8001188:	6838      	ldr	r0, [r7, #0]
 800118a:	f7ff ffbd 	bl	8001108 <u8g2_font_get_byte>
 800118e:	4603      	mov	r3, r0
 8001190:	461a      	mov	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8001196:	2102      	movs	r1, #2
 8001198:	6838      	ldr	r0, [r7, #0]
 800119a:	f7ff ffb5 	bl	8001108 <u8g2_font_get_byte>
 800119e:	4603      	mov	r3, r0
 80011a0:	461a      	mov	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80011a6:	2103      	movs	r1, #3
 80011a8:	6838      	ldr	r0, [r7, #0]
 80011aa:	f7ff ffad 	bl	8001108 <u8g2_font_get_byte>
 80011ae:	4603      	mov	r3, r0
 80011b0:	461a      	mov	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80011b6:	2104      	movs	r1, #4
 80011b8:	6838      	ldr	r0, [r7, #0]
 80011ba:	f7ff ffa5 	bl	8001108 <u8g2_font_get_byte>
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80011c6:	2105      	movs	r1, #5
 80011c8:	6838      	ldr	r0, [r7, #0]
 80011ca:	f7ff ff9d 	bl	8001108 <u8g2_font_get_byte>
 80011ce:	4603      	mov	r3, r0
 80011d0:	461a      	mov	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80011d6:	2106      	movs	r1, #6
 80011d8:	6838      	ldr	r0, [r7, #0]
 80011da:	f7ff ff95 	bl	8001108 <u8g2_font_get_byte>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80011e6:	2107      	movs	r1, #7
 80011e8:	6838      	ldr	r0, [r7, #0]
 80011ea:	f7ff ff8d 	bl	8001108 <u8g2_font_get_byte>
 80011ee:	4603      	mov	r3, r0
 80011f0:	461a      	mov	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80011f6:	2108      	movs	r1, #8
 80011f8:	6838      	ldr	r0, [r7, #0]
 80011fa:	f7ff ff85 	bl	8001108 <u8g2_font_get_byte>
 80011fe:	4603      	mov	r3, r0
 8001200:	461a      	mov	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8001206:	2109      	movs	r1, #9
 8001208:	6838      	ldr	r0, [r7, #0]
 800120a:	f7ff ff7d 	bl	8001108 <u8g2_font_get_byte>
 800120e:	4603      	mov	r3, r0
 8001210:	b25a      	sxtb	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8001216:	210a      	movs	r1, #10
 8001218:	6838      	ldr	r0, [r7, #0]
 800121a:	f7ff ff75 	bl	8001108 <u8g2_font_get_byte>
 800121e:	4603      	mov	r3, r0
 8001220:	b25a      	sxtb	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8001226:	210b      	movs	r1, #11
 8001228:	6838      	ldr	r0, [r7, #0]
 800122a:	f7ff ff6d 	bl	8001108 <u8g2_font_get_byte>
 800122e:	4603      	mov	r3, r0
 8001230:	b25a      	sxtb	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8001236:	210c      	movs	r1, #12
 8001238:	6838      	ldr	r0, [r7, #0]
 800123a:	f7ff ff65 	bl	8001108 <u8g2_font_get_byte>
 800123e:	4603      	mov	r3, r0
 8001240:	b25a      	sxtb	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8001246:	210d      	movs	r1, #13
 8001248:	6838      	ldr	r0, [r7, #0]
 800124a:	f7ff ff5d 	bl	8001108 <u8g2_font_get_byte>
 800124e:	4603      	mov	r3, r0
 8001250:	b25a      	sxtb	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8001256:	210e      	movs	r1, #14
 8001258:	6838      	ldr	r0, [r7, #0]
 800125a:	f7ff ff55 	bl	8001108 <u8g2_font_get_byte>
 800125e:	4603      	mov	r3, r0
 8001260:	b25a      	sxtb	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8001266:	210f      	movs	r1, #15
 8001268:	6838      	ldr	r0, [r7, #0]
 800126a:	f7ff ff4d 	bl	8001108 <u8g2_font_get_byte>
 800126e:	4603      	mov	r3, r0
 8001270:	b25a      	sxtb	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8001276:	2110      	movs	r1, #16
 8001278:	6838      	ldr	r0, [r7, #0]
 800127a:	f7ff ff45 	bl	8001108 <u8g2_font_get_byte>
 800127e:	4603      	mov	r3, r0
 8001280:	b25a      	sxtb	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8001286:	2111      	movs	r1, #17
 8001288:	6838      	ldr	r0, [r7, #0]
 800128a:	f7ff ff4f 	bl	800112c <u8g2_font_get_word>
 800128e:	4603      	mov	r3, r0
 8001290:	461a      	mov	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8001296:	2113      	movs	r1, #19
 8001298:	6838      	ldr	r0, [r7, #0]
 800129a:	f7ff ff47 	bl	800112c <u8g2_font_get_word>
 800129e:	4603      	mov	r3, r0
 80012a0:	461a      	mov	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80012a6:	2115      	movs	r1, #21
 80012a8:	6838      	ldr	r0, [r7, #0]
 80012aa:	f7ff ff3f 	bl	800112c <u8g2_font_get_word>
 80012ae:	4603      	mov	r3, r0
 80012b0:	461a      	mov	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	82da      	strh	r2, [r3, #22]
#endif
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 80012be:	b480      	push	{r7}
 80012c0:	b085      	sub	sp, #20
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
 80012c6:	460b      	mov	r3, r1
 80012c8:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	7b1b      	ldrb	r3, [r3, #12]
 80012ce:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 80012d8:	7bfa      	ldrb	r2, [r7, #15]
 80012da:	7b7b      	ldrb	r3, [r7, #13]
 80012dc:	fa42 f303 	asr.w	r3, r2, r3
 80012e0:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 80012e2:	7b7b      	ldrb	r3, [r7, #13]
 80012e4:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 80012e6:	7bba      	ldrb	r2, [r7, #14]
 80012e8:	78fb      	ldrb	r3, [r7, #3]
 80012ea:	4413      	add	r3, r2
 80012ec:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 80012ee:	7bbb      	ldrb	r3, [r7, #14]
 80012f0:	2b07      	cmp	r3, #7
 80012f2:	d91a      	bls.n	800132a <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 80012f4:	2308      	movs	r3, #8
 80012f6:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80012f8:	7b3a      	ldrb	r2, [r7, #12]
 80012fa:	7b7b      	ldrb	r3, [r7, #13]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	1c5a      	adds	r2, r3, #1
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	7b3b      	ldrb	r3, [r7, #12]
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	b25a      	sxtb	r2, r3
 800131a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131e:	4313      	orrs	r3, r2
 8001320:	b25b      	sxtb	r3, r3
 8001322:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8001324:	7bbb      	ldrb	r3, [r7, #14]
 8001326:	3b08      	subs	r3, #8
 8001328:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 800132a:	78fb      	ldrb	r3, [r7, #3]
 800132c:	f04f 32ff 	mov.w	r2, #4294967295
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	b2db      	uxtb	r3, r3
 8001336:	43db      	mvns	r3, r3
 8001338:	b2da      	uxtb	r2, r3
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	4013      	ands	r3, r2
 800133e:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	7bba      	ldrb	r2, [r7, #14]
 8001344:	731a      	strb	r2, [r3, #12]
  return val;
 8001346:	7bfb      	ldrb	r3, [r7, #15]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8001360:	78fb      	ldrb	r3, [r7, #3]
 8001362:	4619      	mov	r1, r3
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff ffaa 	bl	80012be <u8g2_font_decode_get_unsigned_bits>
 800136a:	4603      	mov	r3, r0
 800136c:	73fb      	strb	r3, [r7, #15]
  d = 1;
 800136e:	2301      	movs	r3, #1
 8001370:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8001372:	78fb      	ldrb	r3, [r7, #3]
 8001374:	3b01      	subs	r3, #1
 8001376:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8001378:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800137c:	78fb      	ldrb	r3, [r7, #3]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8001384:	7bfa      	ldrb	r2, [r7, #15]
 8001386:	7bbb      	ldrb	r3, [r7, #14]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	b2db      	uxtb	r3, r3
 800138c:	73fb      	strb	r3, [r7, #15]
  return v;
 800138e:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8001392:	4618      	mov	r0, r3
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 800139a:	b490      	push	{r4, r7}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4604      	mov	r4, r0
 80013a2:	4608      	mov	r0, r1
 80013a4:	4611      	mov	r1, r2
 80013a6:	461a      	mov	r2, r3
 80013a8:	4623      	mov	r3, r4
 80013aa:	80fb      	strh	r3, [r7, #6]
 80013ac:	4603      	mov	r3, r0
 80013ae:	717b      	strb	r3, [r7, #5]
 80013b0:	460b      	mov	r3, r1
 80013b2:	713b      	strb	r3, [r7, #4]
 80013b4:	4613      	mov	r3, r2
 80013b6:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80013b8:	78fb      	ldrb	r3, [r7, #3]
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d014      	beq.n	80013e8 <u8g2_add_vector_y+0x4e>
 80013be:	2b02      	cmp	r3, #2
 80013c0:	dc19      	bgt.n	80013f6 <u8g2_add_vector_y+0x5c>
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d002      	beq.n	80013cc <u8g2_add_vector_y+0x32>
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d007      	beq.n	80013da <u8g2_add_vector_y+0x40>
 80013ca:	e014      	b.n	80013f6 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 80013cc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	88fb      	ldrh	r3, [r7, #6]
 80013d4:	4413      	add	r3, r2
 80013d6:	80fb      	strh	r3, [r7, #6]
      break;
 80013d8:	e014      	b.n	8001404 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 80013da:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80013de:	b29a      	uxth	r2, r3
 80013e0:	88fb      	ldrh	r3, [r7, #6]
 80013e2:	4413      	add	r3, r2
 80013e4:	80fb      	strh	r3, [r7, #6]
      break;
 80013e6:	e00d      	b.n	8001404 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 80013e8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	88fa      	ldrh	r2, [r7, #6]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	80fb      	strh	r3, [r7, #6]
      break;
 80013f4:	e006      	b.n	8001404 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 80013f6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	88fa      	ldrh	r2, [r7, #6]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	80fb      	strh	r3, [r7, #6]
      break;      
 8001402:	bf00      	nop
  }
  return dy;
 8001404:	88fb      	ldrh	r3, [r7, #6]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bc90      	pop	{r4, r7}
 800140e:	4770      	bx	lr

08001410 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8001410:	b490      	push	{r4, r7}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	4604      	mov	r4, r0
 8001418:	4608      	mov	r0, r1
 800141a:	4611      	mov	r1, r2
 800141c:	461a      	mov	r2, r3
 800141e:	4623      	mov	r3, r4
 8001420:	80fb      	strh	r3, [r7, #6]
 8001422:	4603      	mov	r3, r0
 8001424:	717b      	strb	r3, [r7, #5]
 8001426:	460b      	mov	r3, r1
 8001428:	713b      	strb	r3, [r7, #4]
 800142a:	4613      	mov	r3, r2
 800142c:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 800142e:	78fb      	ldrb	r3, [r7, #3]
 8001430:	2b02      	cmp	r3, #2
 8001432:	d014      	beq.n	800145e <u8g2_add_vector_x+0x4e>
 8001434:	2b02      	cmp	r3, #2
 8001436:	dc19      	bgt.n	800146c <u8g2_add_vector_x+0x5c>
 8001438:	2b00      	cmp	r3, #0
 800143a:	d002      	beq.n	8001442 <u8g2_add_vector_x+0x32>
 800143c:	2b01      	cmp	r3, #1
 800143e:	d007      	beq.n	8001450 <u8g2_add_vector_x+0x40>
 8001440:	e014      	b.n	800146c <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 8001442:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001446:	b29a      	uxth	r2, r3
 8001448:	88fb      	ldrh	r3, [r7, #6]
 800144a:	4413      	add	r3, r2
 800144c:	80fb      	strh	r3, [r7, #6]
      break;
 800144e:	e014      	b.n	800147a <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8001450:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001454:	b29b      	uxth	r3, r3
 8001456:	88fa      	ldrh	r2, [r7, #6]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	80fb      	strh	r3, [r7, #6]
      break;
 800145c:	e00d      	b.n	800147a <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 800145e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001462:	b29b      	uxth	r3, r3
 8001464:	88fa      	ldrh	r2, [r7, #6]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	80fb      	strh	r3, [r7, #6]
      break;
 800146a:	e006      	b.n	800147a <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 800146c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001470:	b29a      	uxth	r2, r3
 8001472:	88fb      	ldrh	r3, [r7, #6]
 8001474:	4413      	add	r3, r2
 8001476:	80fb      	strh	r3, [r7, #6]
      break;      
 8001478:	bf00      	nop
  }
  return dx;
 800147a:	88fb      	ldrh	r3, [r7, #6]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bc90      	pop	{r4, r7}
 8001484:	4770      	bx	lr

08001486 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b088      	sub	sp, #32
 800148a:	af02      	add	r7, sp, #8
 800148c:	6078      	str	r0, [r7, #4]
 800148e:	460b      	mov	r3, r1
 8001490:	70fb      	strb	r3, [r7, #3]
 8001492:	4613      	mov	r3, r2
 8001494:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3360      	adds	r3, #96	@ 0x60
 800149a:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 800149c:	78fb      	ldrb	r3, [r7, #3]
 800149e:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80014a6:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80014ae:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80014b6:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80014b8:	7bfa      	ldrb	r2, [r7, #15]
 80014ba:	7d7b      	ldrb	r3, [r7, #21]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80014c4:	7dfa      	ldrb	r2, [r7, #23]
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d201      	bcs.n	80014d0 <u8g2_font_decode_len+0x4a>
      current = cnt;
 80014cc:	7dfb      	ldrb	r3, [r7, #23]
 80014ce:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	889b      	ldrh	r3, [r3, #4]
 80014d4:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	88db      	ldrh	r3, [r3, #6]
 80014da:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80014dc:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80014e0:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	7c1b      	ldrb	r3, [r3, #16]
 80014e8:	89b8      	ldrh	r0, [r7, #12]
 80014ea:	f7ff ff91 	bl	8001410 <u8g2_add_vector_x>
 80014ee:	4603      	mov	r3, r0
 80014f0:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80014f2:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80014f6:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	7c1b      	ldrb	r3, [r3, #16]
 80014fe:	8978      	ldrh	r0, [r7, #10]
 8001500:	f7ff ff4b 	bl	800139a <u8g2_add_vector_y>
 8001504:	4603      	mov	r3, r0
 8001506:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8001508:	78bb      	ldrb	r3, [r7, #2]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d010      	beq.n	8001530 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	7b9a      	ldrb	r2, [r3, #14]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 8001518:	7dbb      	ldrb	r3, [r7, #22]
 800151a:	b298      	uxth	r0, r3
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	7c1b      	ldrb	r3, [r3, #16]
 8001520:	897a      	ldrh	r2, [r7, #10]
 8001522:	89b9      	ldrh	r1, [r7, #12]
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	4603      	mov	r3, r0
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f000 fbfe 	bl	8001d2a <u8g2_DrawHVLine>
 800152e:	e013      	b.n	8001558 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	7b5b      	ldrb	r3, [r3, #13]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d10f      	bne.n	8001558 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	7bda      	ldrb	r2, [r3, #15]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 8001542:	7dbb      	ldrb	r3, [r7, #22]
 8001544:	b298      	uxth	r0, r3
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	7c1b      	ldrb	r3, [r3, #16]
 800154a:	897a      	ldrh	r2, [r7, #10]
 800154c:	89b9      	ldrh	r1, [r7, #12]
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	4603      	mov	r3, r0
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 fbe9 	bl	8001d2a <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8001558:	7dfa      	ldrb	r2, [r7, #23]
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	429a      	cmp	r2, r3
 800155e:	d309      	bcc.n	8001574 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8001560:	7dfa      	ldrb	r2, [r7, #23]
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	757b      	strb	r3, [r7, #21]
    ly++;
 800156c:	7d3b      	ldrb	r3, [r7, #20]
 800156e:	3301      	adds	r3, #1
 8001570:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8001572:	e79d      	b.n	80014b0 <u8g2_font_decode_len+0x2a>
      break;
 8001574:	bf00      	nop
  }
  lx += cnt;
 8001576:	7d7a      	ldrb	r2, [r7, #21]
 8001578:	7dfb      	ldrb	r3, [r7, #23]
 800157a:	4413      	add	r3, r2
 800157c:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 800157e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 8001586:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	725a      	strb	r2, [r3, #9]
}
 800158e:	bf00      	nop
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b084      	sub	sp, #16
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
 800159e:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3360      	adds	r3, #96	@ 0x60
 80015a4:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2200      	movs	r2, #0
 80015b0:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80015b8:	4619      	mov	r1, r3
 80015ba:	68f8      	ldr	r0, [r7, #12]
 80015bc:	f7ff fe7f 	bl	80012be <u8g2_font_decode_get_unsigned_bits>
 80015c0:	4603      	mov	r3, r0
 80015c2:	b25a      	sxtb	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80015ce:	4619      	mov	r1, r3
 80015d0:	68f8      	ldr	r0, [r7, #12]
 80015d2:	f7ff fe74 	bl	80012be <u8g2_font_decode_get_unsigned_bits>
 80015d6:	4603      	mov	r3, r0
 80015d8:	b25a      	sxtb	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	7b9b      	ldrb	r3, [r3, #14]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	bf0c      	ite	eq
 80015f0:	2301      	moveq	r3, #1
 80015f2:	2300      	movne	r3, #0
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	461a      	mov	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	73da      	strb	r2, [r3, #15]
}
 80015fc:	bf00      	nop
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	@ 0x28
 8001608:	af02      	add	r7, sp, #8
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3360      	adds	r3, #96	@ 0x60
 8001612:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8001614:	6839      	ldr	r1, [r7, #0]
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff ffbd 	bl	8001596 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 8001622:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 800162a:	4619      	mov	r1, r3
 800162c:	6978      	ldr	r0, [r7, #20]
 800162e:	f7ff fe91 	bl	8001354 <u8g2_font_decode_get_signed_bits>
 8001632:	4603      	mov	r3, r0
 8001634:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 800163c:	4619      	mov	r1, r3
 800163e:	6978      	ldr	r0, [r7, #20]
 8001640:	f7ff fe88 	bl	8001354 <u8g2_font_decode_get_signed_bits>
 8001644:	4603      	mov	r3, r0
 8001646:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800164e:	4619      	mov	r1, r3
 8001650:	6978      	ldr	r0, [r7, #20]
 8001652:	f7ff fe7f 	bl	8001354 <u8g2_font_decode_get_signed_bits>
 8001656:	4603      	mov	r3, r0
 8001658:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001660:	2b00      	cmp	r3, #0
 8001662:	f340 80d7 	ble.w	8001814 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	8898      	ldrh	r0, [r3, #4]
 800166a:	7cfa      	ldrb	r2, [r7, #19]
 800166c:	7c7b      	ldrb	r3, [r7, #17]
 800166e:	4413      	add	r3, r2
 8001670:	b2db      	uxtb	r3, r3
 8001672:	425b      	negs	r3, r3
 8001674:	b2db      	uxtb	r3, r3
 8001676:	b25a      	sxtb	r2, r3
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	7c1b      	ldrb	r3, [r3, #16]
 800167c:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001680:	f7ff fec6 	bl	8001410 <u8g2_add_vector_x>
 8001684:	4603      	mov	r3, r0
 8001686:	461a      	mov	r2, r3
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	88d8      	ldrh	r0, [r3, #6]
 8001690:	7cfa      	ldrb	r2, [r7, #19]
 8001692:	7c7b      	ldrb	r3, [r7, #17]
 8001694:	4413      	add	r3, r2
 8001696:	b2db      	uxtb	r3, r3
 8001698:	425b      	negs	r3, r3
 800169a:	b2db      	uxtb	r3, r3
 800169c:	b25a      	sxtb	r2, r3
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	7c1b      	ldrb	r3, [r3, #16]
 80016a2:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80016a6:	f7ff fe78 	bl	800139a <u8g2_add_vector_y>
 80016aa:	4603      	mov	r3, r0
 80016ac:	461a      	mov	r2, r3
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	889b      	ldrh	r3, [r3, #4]
 80016b6:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	88db      	ldrh	r3, [r3, #6]
 80016bc:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 80016be:	8bfb      	ldrh	r3, [r7, #30]
 80016c0:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 80016c2:	8b7b      	ldrh	r3, [r7, #26]
 80016c4:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	7c1b      	ldrb	r3, [r3, #16]
 80016ca:	2b03      	cmp	r3, #3
 80016cc:	d85a      	bhi.n	8001784 <u8g2_font_decode_glyph+0x180>
 80016ce:	a201      	add	r2, pc, #4	@ (adr r2, 80016d4 <u8g2_font_decode_glyph+0xd0>)
 80016d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d4:	080016e5 	.word	0x080016e5
 80016d8:	08001701 	.word	0x08001701
 80016dc:	08001729 	.word	0x08001729
 80016e0:	0800175d 	.word	0x0800175d
      {
	case 0:
	    x1 += decode->glyph_width;
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	8bbb      	ldrh	r3, [r7, #28]
 80016ee:	4413      	add	r3, r2
 80016f0:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 80016f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	8b3b      	ldrh	r3, [r7, #24]
 80016fa:	4413      	add	r3, r2
 80016fc:	833b      	strh	r3, [r7, #24]
	    break;
 80016fe:	e041      	b.n	8001784 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8001700:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001704:	b29b      	uxth	r3, r3
 8001706:	8bfa      	ldrh	r2, [r7, #30]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800170c:	8bfb      	ldrh	r3, [r7, #30]
 800170e:	3301      	adds	r3, #1
 8001710:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8001712:	8bbb      	ldrh	r3, [r7, #28]
 8001714:	3301      	adds	r3, #1
 8001716:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800171e:	b29a      	uxth	r2, r3
 8001720:	8b3b      	ldrh	r3, [r7, #24]
 8001722:	4413      	add	r3, r2
 8001724:	833b      	strh	r3, [r7, #24]
	    break;
 8001726:	e02d      	b.n	8001784 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800172e:	b29b      	uxth	r3, r3
 8001730:	8bfa      	ldrh	r2, [r7, #30]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001736:	8bfb      	ldrh	r3, [r7, #30]
 8001738:	3301      	adds	r3, #1
 800173a:	83fb      	strh	r3, [r7, #30]
	    x1++;
 800173c:	8bbb      	ldrh	r3, [r7, #28]
 800173e:	3301      	adds	r3, #1
 8001740:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8001742:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001746:	b29b      	uxth	r3, r3
 8001748:	8b7a      	ldrh	r2, [r7, #26]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800174e:	8b7b      	ldrh	r3, [r7, #26]
 8001750:	3301      	adds	r3, #1
 8001752:	837b      	strh	r3, [r7, #26]
	    y1++;
 8001754:	8b3b      	ldrh	r3, [r7, #24]
 8001756:	3301      	adds	r3, #1
 8001758:	833b      	strh	r3, [r7, #24]
	    break;	  
 800175a:	e013      	b.n	8001784 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 800175c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001760:	b29a      	uxth	r2, r3
 8001762:	8bbb      	ldrh	r3, [r7, #28]
 8001764:	4413      	add	r3, r2
 8001766:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800176e:	b29b      	uxth	r3, r3
 8001770:	8b7a      	ldrh	r2, [r7, #26]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001776:	8b7b      	ldrh	r3, [r7, #26]
 8001778:	3301      	adds	r3, #1
 800177a:	837b      	strh	r3, [r7, #26]
	    y1++;
 800177c:	8b3b      	ldrh	r3, [r7, #24]
 800177e:	3301      	adds	r3, #1
 8001780:	833b      	strh	r3, [r7, #24]
	    break;	  
 8001782:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8001784:	8bb8      	ldrh	r0, [r7, #28]
 8001786:	8b7a      	ldrh	r2, [r7, #26]
 8001788:	8bf9      	ldrh	r1, [r7, #30]
 800178a:	8b3b      	ldrh	r3, [r7, #24]
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	4603      	mov	r3, r0
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 fb88 	bl	8001ea6 <u8g2_IsIntersection>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d102      	bne.n	80017a2 <u8g2_font_decode_glyph+0x19e>
	return d;
 800179c:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80017a0:	e03a      	b.n	8001818 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	2200      	movs	r2, #0
 80017a6:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	2200      	movs	r2, #0
 80017ac:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 80017b4:	4619      	mov	r1, r3
 80017b6:	6978      	ldr	r0, [r7, #20]
 80017b8:	f7ff fd81 	bl	80012be <u8g2_font_decode_get_unsigned_bits>
 80017bc:	4603      	mov	r3, r0
 80017be:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 80017c6:	4619      	mov	r1, r3
 80017c8:	6978      	ldr	r0, [r7, #20]
 80017ca:	f7ff fd78 	bl	80012be <u8g2_font_decode_get_unsigned_bits>
 80017ce:	4603      	mov	r3, r0
 80017d0:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	2200      	movs	r2, #0
 80017d6:	4619      	mov	r1, r3
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff fe54 	bl	8001486 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 80017de:	7bbb      	ldrb	r3, [r7, #14]
 80017e0:	2201      	movs	r2, #1
 80017e2:	4619      	mov	r1, r3
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff fe4e 	bl	8001486 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 80017ea:	2101      	movs	r1, #1
 80017ec:	6978      	ldr	r0, [r7, #20]
 80017ee:	f7ff fd66 	bl	80012be <u8g2_font_decode_get_unsigned_bits>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1ec      	bne.n	80017d2 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80017fe:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001802:	429a      	cmp	r2, r3
 8001804:	dd00      	ble.n	8001808 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001806:	e7d2      	b.n	80017ae <u8g2_font_decode_glyph+0x1aa>
	break;
 8001808:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	7b9a      	ldrb	r2, [r3, #14]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  }
  return d;
 8001814:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3720      	adds	r7, #32
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001830:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	3317      	adds	r3, #23
 8001836:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8001838:	887b      	ldrh	r3, [r7, #2]
 800183a:	2bff      	cmp	r3, #255	@ 0xff
 800183c:	d82a      	bhi.n	8001894 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 800183e:	887b      	ldrh	r3, [r7, #2]
 8001840:	2b60      	cmp	r3, #96	@ 0x60
 8001842:	d907      	bls.n	8001854 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800184a:	461a      	mov	r2, r3
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	4413      	add	r3, r2
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	e009      	b.n	8001868 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8001854:	887b      	ldrh	r3, [r7, #2]
 8001856:	2b40      	cmp	r3, #64	@ 0x40
 8001858:	d906      	bls.n	8001868 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8001860:	461a      	mov	r2, r3
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	4413      	add	r3, r2
 8001866:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	3301      	adds	r3, #1
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d04e      	beq.n	8001910 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	461a      	mov	r2, r3
 8001878:	887b      	ldrh	r3, [r7, #2]
 800187a:	4293      	cmp	r3, r2
 800187c:	d102      	bne.n	8001884 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	3302      	adds	r3, #2
 8001882:	e049      	b.n	8001918 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	3301      	adds	r3, #1
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	461a      	mov	r2, r3
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	4413      	add	r3, r2
 8001890:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001892:	e7e9      	b.n	8001868 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 800189a:	461a      	mov	r2, r3
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	4413      	add	r3, r2
 80018a0:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 80018a6:	2100      	movs	r1, #0
 80018a8:	6938      	ldr	r0, [r7, #16]
 80018aa:	f7ff fc3f 	bl	800112c <u8g2_font_get_word>
 80018ae:	4603      	mov	r3, r0
 80018b0:	461a      	mov	r2, r3
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	4413      	add	r3, r2
 80018b6:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80018b8:	2102      	movs	r1, #2
 80018ba:	6938      	ldr	r0, [r7, #16]
 80018bc:	f7ff fc36 	bl	800112c <u8g2_font_get_word>
 80018c0:	4603      	mov	r3, r0
 80018c2:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	3304      	adds	r3, #4
 80018c8:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 80018ca:	89fa      	ldrh	r2, [r7, #14]
 80018cc:	887b      	ldrh	r3, [r7, #2]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d3e9      	bcc.n	80018a6 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 80018d8:	89fb      	ldrh	r3, [r7, #14]
 80018da:	021b      	lsls	r3, r3, #8
 80018dc:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	3301      	adds	r3, #1
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	89fb      	ldrh	r3, [r7, #14]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 80018ec:	89fb      	ldrh	r3, [r7, #14]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d010      	beq.n	8001914 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 80018f2:	89fa      	ldrh	r2, [r7, #14]
 80018f4:	887b      	ldrh	r3, [r7, #2]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d102      	bne.n	8001900 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	3303      	adds	r3, #3
 80018fe:	e00b      	b.n	8001918 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	3302      	adds	r3, #2
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	4413      	add	r3, r2
 800190c:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 800190e:	e7e0      	b.n	80018d2 <u8g2_font_get_glyph_data+0xb2>
	break;
 8001910:	bf00      	nop
 8001912:	e000      	b.n	8001916 <u8g2_font_get_glyph_data+0xf6>
	break;
 8001914:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	4608      	mov	r0, r1
 800192a:	4611      	mov	r1, r2
 800192c:	461a      	mov	r2, r3
 800192e:	4603      	mov	r3, r0
 8001930:	817b      	strh	r3, [r7, #10]
 8001932:	460b      	mov	r3, r1
 8001934:	813b      	strh	r3, [r7, #8]
 8001936:	4613      	mov	r3, r2
 8001938:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	897a      	ldrh	r2, [r7, #10]
 8001942:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  u8g2->font_decode.target_y = y;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	893a      	ldrh	r2, [r7, #8]
 800194a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 800194e:	88fb      	ldrh	r3, [r7, #6]
 8001950:	4619      	mov	r1, r3
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f7ff ff64 	bl	8001820 <u8g2_font_get_glyph_data>
 8001958:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8001960:	6939      	ldr	r1, [r7, #16]
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f7ff fe4e 	bl	8001604 <u8g2_font_decode_glyph>
 8001968:	4603      	mov	r3, r0
 800196a:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 800196c:	8afb      	ldrh	r3, [r7, #22]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	4608      	mov	r0, r1
 8001982:	4611      	mov	r1, r2
 8001984:	461a      	mov	r2, r3
 8001986:	4603      	mov	r3, r0
 8001988:	817b      	strh	r3, [r7, #10]
 800198a:	460b      	mov	r3, r1
 800198c:	813b      	strh	r3, [r7, #8]
 800198e:	4613      	mov	r3, r2
 8001990:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001998:	2b03      	cmp	r3, #3
 800199a:	d833      	bhi.n	8001a04 <u8g2_DrawGlyph+0x8c>
 800199c:	a201      	add	r2, pc, #4	@ (adr r2, 80019a4 <u8g2_DrawGlyph+0x2c>)
 800199e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a2:	bf00      	nop
 80019a4:	080019b5 	.word	0x080019b5
 80019a8:	080019c9 	.word	0x080019c9
 80019ac:	080019dd 	.word	0x080019dd
 80019b0:	080019f1 	.word	0x080019f1
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019b8:	68f8      	ldr	r0, [r7, #12]
 80019ba:	4798      	blx	r3
 80019bc:	4603      	mov	r3, r0
 80019be:	461a      	mov	r2, r3
 80019c0:	893b      	ldrh	r3, [r7, #8]
 80019c2:	4413      	add	r3, r2
 80019c4:	813b      	strh	r3, [r7, #8]
      break;
 80019c6:	e01d      	b.n	8001a04 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	4798      	blx	r3
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	897b      	ldrh	r3, [r7, #10]
 80019d6:	1a9b      	subs	r3, r3, r2
 80019d8:	817b      	strh	r3, [r7, #10]
      break;
 80019da:	e013      	b.n	8001a04 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	4798      	blx	r3
 80019e4:	4603      	mov	r3, r0
 80019e6:	461a      	mov	r2, r3
 80019e8:	893b      	ldrh	r3, [r7, #8]
 80019ea:	1a9b      	subs	r3, r3, r2
 80019ec:	813b      	strh	r3, [r7, #8]
      break;
 80019ee:	e009      	b.n	8001a04 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	4798      	blx	r3
 80019f8:	4603      	mov	r3, r0
 80019fa:	461a      	mov	r2, r3
 80019fc:	897b      	ldrh	r3, [r7, #10]
 80019fe:	4413      	add	r3, r2
 8001a00:	817b      	strh	r3, [r7, #10]
      break;
 8001a02:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8001a04:	88fb      	ldrh	r3, [r7, #6]
 8001a06:	893a      	ldrh	r2, [r7, #8]
 8001a08:	8979      	ldrh	r1, [r7, #10]
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f7ff ff88 	bl	8001920 <u8g2_font_draw_glyph>
 8001a10:	4603      	mov	r3, r0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop

08001a1c <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	607b      	str	r3, [r7, #4]
 8001a26:	460b      	mov	r3, r1
 8001a28:	817b      	strh	r3, [r7, #10]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f000 fca7 	bl	8002382 <u8x8_utf8_init>
  sum = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	7812      	ldrb	r2, [r2, #0]
 8001a40:	4611      	mov	r1, r2
 8001a42:	68f8      	ldr	r0, [r7, #12]
 8001a44:	4798      	blx	r3
 8001a46:	4603      	mov	r3, r0
 8001a48:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8001a4a:	8abb      	ldrh	r3, [r7, #20]
 8001a4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d038      	beq.n	8001ac6 <u8g2_draw_string+0xaa>
      break;
    str++;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3301      	adds	r3, #1
 8001a58:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8001a5a:	8abb      	ldrh	r3, [r7, #20]
 8001a5c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d0e9      	beq.n	8001a38 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8001a64:	8abb      	ldrh	r3, [r7, #20]
 8001a66:	893a      	ldrh	r2, [r7, #8]
 8001a68:	8979      	ldrh	r1, [r7, #10]
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f7ff ff84 	bl	8001978 <u8g2_DrawGlyph>
 8001a70:	4603      	mov	r3, r0
 8001a72:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001a7a:	2b03      	cmp	r3, #3
 8001a7c:	d81e      	bhi.n	8001abc <u8g2_draw_string+0xa0>
 8001a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a84 <u8g2_draw_string+0x68>)
 8001a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a84:	08001a95 	.word	0x08001a95
 8001a88:	08001a9f 	.word	0x08001a9f
 8001a8c:	08001aa9 	.word	0x08001aa9
 8001a90:	08001ab3 	.word	0x08001ab3
      {
	case 0:
	  x += delta;
 8001a94:	897a      	ldrh	r2, [r7, #10]
 8001a96:	8a7b      	ldrh	r3, [r7, #18]
 8001a98:	4413      	add	r3, r2
 8001a9a:	817b      	strh	r3, [r7, #10]
	  break;
 8001a9c:	e00e      	b.n	8001abc <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8001a9e:	893a      	ldrh	r2, [r7, #8]
 8001aa0:	8a7b      	ldrh	r3, [r7, #18]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	813b      	strh	r3, [r7, #8]
	  break;
 8001aa6:	e009      	b.n	8001abc <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8001aa8:	897a      	ldrh	r2, [r7, #10]
 8001aaa:	8a7b      	ldrh	r3, [r7, #18]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	817b      	strh	r3, [r7, #10]
	  break;
 8001ab0:	e004      	b.n	8001abc <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8001ab2:	893a      	ldrh	r2, [r7, #8]
 8001ab4:	8a7b      	ldrh	r3, [r7, #18]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	813b      	strh	r3, [r7, #8]
	  break;
 8001aba:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8001abc:	8afa      	ldrh	r2, [r7, #22]
 8001abe:	8a7b      	ldrh	r3, [r7, #18]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001ac4:	e7b8      	b.n	8001a38 <u8g2_draw_string+0x1c>
      break;
 8001ac6:	bf00      	nop
    }
  }
  return sum;
 8001ac8:	8afb      	ldrh	r3, [r7, #22]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop

08001ad4 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	607b      	str	r3, [r7, #4]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	817b      	strh	r3, [r7, #10]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4a06      	ldr	r2, [pc, #24]	@ (8001b04 <u8g2_DrawStr+0x30>)
 8001aea:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8001aec:	893a      	ldrh	r2, [r7, #8]
 8001aee:	8979      	ldrh	r1, [r7, #10]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f7ff ff92 	bl	8001a1c <u8g2_draw_string>
 8001af8:	4603      	mov	r3, r0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	0800239f 	.word	0x0800239f

08001b08 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d05d      	beq.n	8001bd4 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f993 2081 	ldrsb.w	r2, [r3, #129]	@ 0x81
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f993 2082 	ldrsb.w	r2, [r3, #130]	@ 0x82
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d04d      	beq.n	8001bd6 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d11c      	bne.n	8001b7e <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f993 208e 	ldrsb.w	r2, [r3, #142]	@ 0x8e
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f993 3083 	ldrsb.w	r3, [r3, #131]	@ 0x83
 8001b50:	429a      	cmp	r2, r3
 8001b52:	da05      	bge.n	8001b60 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f993 2083 	ldrsb.w	r2, [r3, #131]	@ 0x83
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f993 3084 	ldrsb.w	r3, [r3, #132]	@ 0x84
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	dd32      	ble.n	8001bd6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f993 2084 	ldrsb.w	r2, [r3, #132]	@ 0x84
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8001b7c:	e02b      	b.n	8001bd6 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f993 308e 	ldrsb.w	r3, [r3, #142]	@ 0x8e
 8001b84:	461a      	mov	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8001b94:	440b      	add	r3, r1
 8001b96:	429a      	cmp	r2, r3
 8001b98:	da0d      	bge.n	8001bb6 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	4413      	add	r3, r2
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	b25a      	sxtb	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	dd07      	ble.n	8001bd6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f993 2080 	ldrsb.w	r2, [r3, #128]	@ 0x80
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8001bd2:	e000      	b.n	8001bd6 <u8g2_UpdateRefHeight+0xce>
    return;
 8001bd4:	bf00      	nop
  }  
}
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  return 0;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a04      	ldr	r2, [pc, #16]	@ (8001c14 <u8g2_SetFontPosBaseline+0x1c>)
 8001c04:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	08001be1 	.word	0x08001be1

08001c18 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d00b      	beq.n	8001c44 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	659a      	str	r2, [r3, #88]	@ 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3374      	adds	r3, #116	@ 0x74
 8001c36:	6839      	ldr	r1, [r7, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff fa97 	bl	800116c <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff ff62 	bl	8001b08 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8001c44:	bf00      	nop
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b087      	sub	sp, #28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	4611      	mov	r1, r2
 8001c58:	461a      	mov	r2, r3
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	80fb      	strh	r3, [r7, #6]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8001c68:	8afb      	ldrh	r3, [r7, #22]
 8001c6a:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	881a      	ldrh	r2, [r3, #0]
 8001c70:	8abb      	ldrh	r3, [r7, #20]
 8001c72:	4413      	add	r3, r2
 8001c74:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8001c76:	8afa      	ldrh	r2, [r7, #22]
 8001c78:	8abb      	ldrh	r3, [r7, #20]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d90b      	bls.n	8001c96 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8001c7e:	8afa      	ldrh	r2, [r7, #22]
 8001c80:	88bb      	ldrh	r3, [r7, #4]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d205      	bcs.n	8001c92 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8001c86:	88bb      	ldrh	r3, [r7, #4]
 8001c88:	82bb      	strh	r3, [r7, #20]
      b--;
 8001c8a:	8abb      	ldrh	r3, [r7, #20]
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	82bb      	strh	r3, [r7, #20]
 8001c90:	e001      	b.n	8001c96 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8001c92:	88fb      	ldrh	r3, [r7, #6]
 8001c94:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8001c96:	8afa      	ldrh	r2, [r7, #22]
 8001c98:	88bb      	ldrh	r3, [r7, #4]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d301      	bcc.n	8001ca2 <u8g2_clip_intersection2+0x56>
    return 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	e01c      	b.n	8001cdc <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8001ca2:	8aba      	ldrh	r2, [r7, #20]
 8001ca4:	88fb      	ldrh	r3, [r7, #6]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d801      	bhi.n	8001cae <u8g2_clip_intersection2+0x62>
    return 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	e016      	b.n	8001cdc <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8001cae:	8afa      	ldrh	r2, [r7, #22]
 8001cb0:	88fb      	ldrh	r3, [r7, #6]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d201      	bcs.n	8001cba <u8g2_clip_intersection2+0x6e>
    a = c;
 8001cb6:	88fb      	ldrh	r3, [r7, #6]
 8001cb8:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8001cba:	8aba      	ldrh	r2, [r7, #20]
 8001cbc:	88bb      	ldrh	r3, [r7, #4]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d901      	bls.n	8001cc6 <u8g2_clip_intersection2+0x7a>
    b = d;
 8001cc2:	88bb      	ldrh	r3, [r7, #4]
 8001cc4:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	8afa      	ldrh	r2, [r7, #22]
 8001cca:	801a      	strh	r2, [r3, #0]
  b -= a;
 8001ccc:	8aba      	ldrh	r2, [r7, #20]
 8001cce:	8afb      	ldrh	r3, [r7, #22]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	8aba      	ldrh	r2, [r7, #20]
 8001cd8:	801a      	strh	r2, [r3, #0]
  return 1;
 8001cda:	2301      	movs	r3, #1
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	371c      	adds	r7, #28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001ce8:	b590      	push	{r4, r7, lr}
 8001cea:	b087      	sub	sp, #28
 8001cec:	af02      	add	r7, sp, #8
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	4608      	mov	r0, r1
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	817b      	strh	r3, [r7, #10]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	813b      	strh	r3, [r7, #8]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d06:	893a      	ldrh	r2, [r7, #8]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8001d10:	88f8      	ldrh	r0, [r7, #6]
 8001d12:	893a      	ldrh	r2, [r7, #8]
 8001d14:	8979      	ldrh	r1, [r7, #10]
 8001d16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	47a0      	blx	r4
}
 8001d22:	bf00      	nop
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd90      	pop	{r4, r7, pc}

08001d2a <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001d2a:	b590      	push	{r4, r7, lr}
 8001d2c:	b087      	sub	sp, #28
 8001d2e:	af02      	add	r7, sp, #8
 8001d30:	60f8      	str	r0, [r7, #12]
 8001d32:	4608      	mov	r0, r1
 8001d34:	4611      	mov	r1, r2
 8001d36:	461a      	mov	r2, r3
 8001d38:	4603      	mov	r3, r0
 8001d3a:	817b      	strh	r3, [r7, #10]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	813b      	strh	r3, [r7, #8]
 8001d40:	4613      	mov	r3, r2
 8001d42:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d075      	beq.n	8001e3a <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8001d4e:	88fb      	ldrh	r3, [r7, #6]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d072      	beq.n	8001e3a <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8001d54:	88fb      	ldrh	r3, [r7, #6]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d91a      	bls.n	8001d90 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8001d5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d109      	bne.n	8001d76 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8001d62:	897a      	ldrh	r2, [r7, #10]
 8001d64:	88fb      	ldrh	r3, [r7, #6]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	817b      	strh	r3, [r7, #10]
	  x++;
 8001d6c:	897b      	ldrh	r3, [r7, #10]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	817b      	strh	r3, [r7, #10]
 8001d74:	e00c      	b.n	8001d90 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8001d76:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	d108      	bne.n	8001d90 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8001d7e:	893a      	ldrh	r2, [r7, #8]
 8001d80:	88fb      	ldrh	r3, [r7, #6]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	813b      	strh	r3, [r7, #8]
	  y++;
 8001d88:	893b      	ldrh	r3, [r7, #8]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8001d90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8001d9c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d11a      	bne.n	8001dda <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8001daa:	893b      	ldrh	r3, [r7, #8]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d83b      	bhi.n	8001e28 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8001db6:	893b      	ldrh	r3, [r7, #8]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d937      	bls.n	8001e2c <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8001dc8:	1db9      	adds	r1, r7, #6
 8001dca:	f107 000a 	add.w	r0, r7, #10
 8001dce:	f7ff ff3d 	bl	8001c4c <u8g2_clip_intersection2>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d11a      	bne.n	8001e0e <u8g2_DrawHVLine+0xe4>
	  return;
 8001dd8:	e02f      	b.n	8001e3a <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8001de0:	897b      	ldrh	r3, [r7, #10]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d824      	bhi.n	8001e30 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8001dec:	897b      	ldrh	r3, [r7, #10]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d920      	bls.n	8001e34 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8001dfe:	1db9      	adds	r1, r7, #6
 8001e00:	f107 0008 	add.w	r0, r7, #8
 8001e04:	f7ff ff22 	bl	8001c4c <u8g2_clip_intersection2>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d014      	beq.n	8001e38 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e12:	689c      	ldr	r4, [r3, #8]
 8001e14:	8979      	ldrh	r1, [r7, #10]
 8001e16:	893a      	ldrh	r2, [r7, #8]
 8001e18:	88f8      	ldrh	r0, [r7, #6]
 8001e1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	4603      	mov	r3, r0
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	47a0      	blx	r4
 8001e26:	e008      	b.n	8001e3a <u8g2_DrawHVLine+0x110>
	  return;
 8001e28:	bf00      	nop
 8001e2a:	e006      	b.n	8001e3a <u8g2_DrawHVLine+0x110>
	  return;
 8001e2c:	bf00      	nop
 8001e2e:	e004      	b.n	8001e3a <u8g2_DrawHVLine+0x110>
	  return;
 8001e30:	bf00      	nop
 8001e32:	e002      	b.n	8001e3a <u8g2_DrawHVLine+0x110>
	  return;
 8001e34:	bf00      	nop
 8001e36:	e000      	b.n	8001e3a <u8g2_DrawHVLine+0x110>
	  return;
 8001e38:	bf00      	nop
    }
}
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd90      	pop	{r4, r7, pc}

08001e40 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8001e40:	b490      	push	{r4, r7}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4604      	mov	r4, r0
 8001e48:	4608      	mov	r0, r1
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4623      	mov	r3, r4
 8001e50:	80fb      	strh	r3, [r7, #6]
 8001e52:	4603      	mov	r3, r0
 8001e54:	80bb      	strh	r3, [r7, #4]
 8001e56:	460b      	mov	r3, r1
 8001e58:	807b      	strh	r3, [r7, #2]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8001e5e:	887a      	ldrh	r2, [r7, #2]
 8001e60:	88bb      	ldrh	r3, [r7, #4]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d20d      	bcs.n	8001e82 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8001e66:	883a      	ldrh	r2, [r7, #0]
 8001e68:	88fb      	ldrh	r3, [r7, #6]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d901      	bls.n	8001e72 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e014      	b.n	8001e9c <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8001e72:	887a      	ldrh	r2, [r7, #2]
 8001e74:	883b      	ldrh	r3, [r7, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d901      	bls.n	8001e7e <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e00e      	b.n	8001e9c <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	e00c      	b.n	8001e9c <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8001e82:	883a      	ldrh	r2, [r7, #0]
 8001e84:	88fb      	ldrh	r3, [r7, #6]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d907      	bls.n	8001e9a <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8001e8a:	887a      	ldrh	r2, [r7, #2]
 8001e8c:	883b      	ldrh	r3, [r7, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d901      	bls.n	8001e96 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e002      	b.n	8001e9c <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	e000      	b.n	8001e9c <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8001e9a:	2300      	movs	r3, #0
    }
  }
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc90      	pop	{r4, r7}
 8001ea4:	4770      	bx	lr

08001ea6 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b084      	sub	sp, #16
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	60f8      	str	r0, [r7, #12]
 8001eae:	4608      	mov	r0, r1
 8001eb0:	4611      	mov	r1, r2
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	817b      	strh	r3, [r7, #10]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	813b      	strh	r3, [r7, #8]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f8b3 104e 	ldrh.w	r1, [r3, #78]	@ 0x4e
 8001ecc:	8b3b      	ldrh	r3, [r7, #24]
 8001ece:	893a      	ldrh	r2, [r7, #8]
 8001ed0:	f7ff ffb6 	bl	8001e40 <u8g2_is_intersection_decision_tree>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <u8g2_IsIntersection+0x38>
    return 0; 
 8001eda:	2300      	movs	r3, #0
 8001edc:	e00a      	b.n	8001ef4 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 8001eea:	88fb      	ldrh	r3, [r7, #6]
 8001eec:	897a      	ldrh	r2, [r7, #10]
 8001eee:	f7ff ffa7 	bl	8001e40 <u8g2_is_intersection_decision_tree>
 8001ef2:	4603      	mov	r3, r0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b089      	sub	sp, #36	@ 0x24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	4608      	mov	r0, r1
 8001f06:	4611      	mov	r1, r2
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	817b      	strh	r3, [r7, #10]
 8001f0e:	460b      	mov	r3, r1
 8001f10:	813b      	strh	r3, [r7, #8]
 8001f12:	4613      	mov	r3, r2
 8001f14:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8001f16:	893b      	ldrh	r3, [r7, #8]
 8001f18:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8001f1a:	7efb      	ldrb	r3, [r7, #27]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8001f22:	2301      	movs	r3, #1
 8001f24:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8001f26:	7e3a      	ldrb	r2, [r7, #24]
 8001f28:	7efb      	ldrb	r3, [r7, #27]
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d801      	bhi.n	8001f46 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8001f42:	7e3b      	ldrb	r3, [r7, #24]
 8001f44:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d001      	beq.n	8001f54 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8001f50:	7e3b      	ldrb	r3, [r7, #24]
 8001f52:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8001f54:	893b      	ldrh	r3, [r7, #8]
 8001f56:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8001f58:	8afb      	ldrh	r3, [r7, #22]
 8001f5a:	f023 0307 	bic.w	r3, r3, #7
 8001f5e:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	7c1b      	ldrb	r3, [r3, #16]
 8001f66:	461a      	mov	r2, r3
 8001f68:	8afb      	ldrh	r3, [r7, #22]
 8001f6a:	fb13 f302 	smulbb	r3, r3, r2
 8001f6e:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f74:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8001f76:	8afb      	ldrh	r3, [r7, #22]
 8001f78:	69fa      	ldr	r2, [r7, #28]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8001f7e:	897b      	ldrh	r3, [r7, #10]
 8001f80:	69fa      	ldr	r2, [r7, #28]
 8001f82:	4413      	add	r3, r2
 8001f84:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8001f86:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d117      	bne.n	8001fbe <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	781a      	ldrb	r2, [r3, #0]
 8001f92:	7ebb      	ldrb	r3, [r7, #26]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	781a      	ldrb	r2, [r3, #0]
 8001fa0:	7e7b      	ldrb	r3, [r7, #25]
 8001fa2:	4053      	eors	r3, r2
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	701a      	strb	r2, [r3, #0]
	ptr++;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3301      	adds	r3, #1
 8001fae:	61fb      	str	r3, [r7, #28]
	len--;
 8001fb0:	88fb      	ldrh	r3, [r7, #6]
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8001fb6:	88fb      	ldrh	r3, [r7, #6]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1e8      	bne.n	8001f8e <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8001fbc:	e038      	b.n	8002030 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	781a      	ldrb	r2, [r3, #0]
 8001fc2:	7ebb      	ldrb	r3, [r7, #26]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	781a      	ldrb	r2, [r3, #0]
 8001fd0:	7e7b      	ldrb	r3, [r7, #25]
 8001fd2:	4053      	eors	r3, r2
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8001fda:	7efb      	ldrb	r3, [r7, #27]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8001fe0:	7efb      	ldrb	r3, [r7, #27]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	76fb      	strb	r3, [r7, #27]
      len--;
 8001fe8:	88fb      	ldrh	r3, [r7, #6]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8001fee:	7efb      	ldrb	r3, [r7, #27]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d114      	bne.n	800201e <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002006:	2b01      	cmp	r3, #1
 8002008:	d801      	bhi.n	800200e <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 800200a:	2301      	movs	r3, #1
 800200c:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002014:	2b01      	cmp	r3, #1
 8002016:	d008      	beq.n	800202a <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8002018:	2301      	movs	r3, #1
 800201a:	767b      	strb	r3, [r7, #25]
 800201c:	e005      	b.n	800202a <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 800201e:	7ebb      	ldrb	r3, [r7, #26]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8002024:	7e7b      	ldrb	r3, [r7, #25]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 800202a:	88fb      	ldrh	r3, [r7, #6]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1c6      	bne.n	8001fbe <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8002030:	bf00      	nop
 8002032:	3724      	adds	r7, #36	@ 0x24
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  u8g2->clip_y0 = 0;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800205a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002064:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	4798      	blx	r3
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b084      	sub	sp, #16
 800207e:	af00      	add	r7, sp, #0
 8002080:	60f8      	str	r0, [r7, #12]
 8002082:	60b9      	str	r1, [r7, #8]
 8002084:	603b      	str	r3, [r7, #0]
 8002086:	4613      	mov	r3, r2
 8002088:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	659a      	str	r2, [r3, #88]	@ 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	68ba      	ldr	r2, [r7, #8]
 800209a:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	79fa      	ldrb	r2, [r7, #7]
 80020a0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
  u8g2->bitmap_transparency = 0;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
  u8g2->draw_color = 1;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  u8g2->is_auto_page_clear = 1;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
  
  u8g2->cb = u8g2_cb;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update_dimension(u8g2);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f7ff ffa9 	bl	800203c <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f7ff fd84 	bl	8001bf8 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
#endif
}
 80020f8:	bf00      	nop
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002114:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002116:	89fb      	ldrh	r3, [r7, #14]
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	89fa      	ldrh	r2, [r7, #14]
 8002120:	879a      	strh	r2, [r3, #60]	@ 0x3c
  
  t = display_info->tile_width;
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	7c1b      	ldrb	r3, [r3, #16]
 8002126:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8002128:	89fb      	ldrh	r3, [r7, #14]
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	89fa      	ldrh	r2, [r7, #14]
 8002132:	875a      	strh	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800213a:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800213c:	89fb      	ldrh	r3, [r7, #14]
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	89fa      	ldrh	r2, [r7, #14]
 8002146:	87da      	strh	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_buf_height;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800214e:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8002150:	89fb      	ldrh	r3, [r7, #14]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8002158:	4413      	add	r3, r2
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	7c52      	ldrb	r2, [r2, #17]
 800215e:	4293      	cmp	r3, r2
 8002160:	dd07      	ble.n	8002172 <u8g2_update_dimension_common+0x72>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	7c5b      	ldrb	r3, [r3, #17]
 8002166:	461a      	mov	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002172:	89fb      	ldrh	r3, [r7, #14]
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  u8g2->buf_y1 += t;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8002194:	89fb      	ldrh	r3, [r7, #14]
 8002196:	4413      	add	r3, r2
 8002198:	b29a      	uxth	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	8a9a      	ldrh	r2, [r3, #20]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  u8g2->height = display_info->pixel_height;
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	8ada      	ldrh	r2, [r3, #22]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 80021b4:	bf00      	nop
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af02      	add	r7, sp, #8
 80021c6:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f8b3 0052 	ldrh.w	r0, [r3, #82]	@ 0x52
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	4603      	mov	r3, r0
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff fe5e 	bl	8001ea6 <u8g2_IsIntersection>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d104      	bne.n	80021fa <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 80021f8:	e03b      	b.n	8002272 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800220e:	429a      	cmp	r2, r3
 8002210:	d205      	bcs.n	800221e <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800222a:	429a      	cmp	r2, r3
 800222c:	d905      	bls.n	800223a <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002246:	429a      	cmp	r2, r3
 8002248:	d205      	bcs.n	8002256 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002262:	429a      	cmp	r2, r3
 8002264:	d905      	bls.n	8002272 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 8002272:	bf00      	nop
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b082      	sub	sp, #8
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff ff3c 	bl	8002100 <u8g2_update_dimension_common>
}
 8002288:	bf00      	nop
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  if ( u8g2->height >= u8g2->buf_y1 )
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d30a      	bcc.n	80022da <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f8b3 2046 	ldrh.w	r2, [r3, #70]	@ 0x46
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7ff ff65 	bl	80021c0 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b088      	sub	sp, #32
 8002302:	af02      	add	r7, sp, #8
 8002304:	60f8      	str	r0, [r7, #12]
 8002306:	4608      	mov	r0, r1
 8002308:	4611      	mov	r1, r2
 800230a:	461a      	mov	r2, r3
 800230c:	4603      	mov	r3, r0
 800230e:	817b      	strh	r3, [r7, #10]
 8002310:	460b      	mov	r3, r1
 8002312:	813b      	strh	r3, [r7, #8]
 8002314:	4613      	mov	r3, r2
 8002316:	80fb      	strh	r3, [r7, #6]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800231e:	82bb      	strh	r3, [r7, #20]
  yy -= y;
 8002320:	8aba      	ldrh	r2, [r7, #20]
 8002322:	893b      	ldrh	r3, [r7, #8]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	82bb      	strh	r3, [r7, #20]
  
  xx = u8g2->width;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800232e:	82fb      	strh	r3, [r7, #22]
  xx -= x;
 8002330:	8afa      	ldrh	r2, [r7, #22]
 8002332:	897b      	ldrh	r3, [r7, #10]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	82fb      	strh	r3, [r7, #22]
  
  if ( dir == 0 )
 8002338:	f897 3020 	ldrb.w	r3, [r7, #32]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d107      	bne.n	8002350 <u8g2_draw_l90_r2+0x52>
  {
    yy--;
 8002340:	8abb      	ldrh	r3, [r7, #20]
 8002342:	3b01      	subs	r3, #1
 8002344:	82bb      	strh	r3, [r7, #20]
    xx -= len;
 8002346:	8afa      	ldrh	r2, [r7, #22]
 8002348:	88fb      	ldrh	r3, [r7, #6]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	82fb      	strh	r3, [r7, #22]
 800234e:	e00a      	b.n	8002366 <u8g2_draw_l90_r2+0x68>
  }
  else if ( dir == 1 )
 8002350:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d106      	bne.n	8002366 <u8g2_draw_l90_r2+0x68>
  {
    xx--;
 8002358:	8afb      	ldrh	r3, [r7, #22]
 800235a:	3b01      	subs	r3, #1
 800235c:	82fb      	strh	r3, [r7, #22]
    yy -= len;
 800235e:	8aba      	ldrh	r2, [r7, #20]
 8002360:	88fb      	ldrh	r3, [r7, #6]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	82bb      	strh	r3, [r7, #20]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002366:	88f8      	ldrh	r0, [r7, #6]
 8002368:	8aba      	ldrh	r2, [r7, #20]
 800236a:	8af9      	ldrh	r1, [r7, #22]
 800236c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	4603      	mov	r3, r0
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f7ff fcb7 	bl	8001ce8 <u8g2_draw_hv_line_2dir>
}
 800237a:	bf00      	nop
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	460b      	mov	r3, r1
 80023a8:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 80023aa:	78fb      	ldrb	r3, [r7, #3]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d002      	beq.n	80023b6 <u8x8_ascii_next+0x18>
 80023b0:	78fb      	ldrb	r3, [r7, #3]
 80023b2:	2b0a      	cmp	r3, #10
 80023b4:	d102      	bne.n	80023bc <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 80023b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80023ba:	e001      	b.n	80023c0 <u8x8_ascii_next+0x22>
  return b;
 80023bc:	78fb      	ldrb	r3, [r7, #3]
 80023be:	b29b      	uxth	r3, r3
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 80023cc:	b590      	push	{r4, r7, lr}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691c      	ldr	r4, [r3, #16]
 80023dc:	78fa      	ldrb	r2, [r7, #3]
 80023de:	2300      	movs	r3, #0
 80023e0:	2120      	movs	r1, #32
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	47a0      	blx	r4
 80023e6:	4603      	mov	r3, r0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd90      	pop	{r4, r7, pc}

080023f0 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80023f0:	b590      	push	{r4, r7, lr}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	460b      	mov	r3, r1
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	691c      	ldr	r4, [r3, #16]
 8002402:	7afa      	ldrb	r2, [r7, #11]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2117      	movs	r1, #23
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	47a0      	blx	r4
 800240c:	4603      	mov	r3, r0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	bd90      	pop	{r4, r7, pc}

08002416 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	460b      	mov	r3, r1
 8002420:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002422:	1cfb      	adds	r3, r7, #3
 8002424:	461a      	mov	r2, r3
 8002426:	2101      	movs	r1, #1
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f7ff ffe1 	bl	80023f0 <u8x8_byte_SendBytes>
 800242e:	4603      	mov	r3, r0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002438:	b590      	push	{r4, r7, lr}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68dc      	ldr	r4, [r3, #12]
 8002448:	78fa      	ldrb	r2, [r7, #3]
 800244a:	2300      	movs	r3, #0
 800244c:	2115      	movs	r1, #21
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	47a0      	blx	r4
 8002452:	4603      	mov	r3, r0
}
 8002454:	4618      	mov	r0, r3
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	bd90      	pop	{r4, r7, pc}

0800245c <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 800245c:	b590      	push	{r4, r7, lr}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68dc      	ldr	r4, [r3, #12]
 800246c:	78fa      	ldrb	r2, [r7, #3]
 800246e:	2300      	movs	r3, #0
 8002470:	2116      	movs	r1, #22
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	47a0      	blx	r4
 8002476:	4603      	mov	r3, r0
}
 8002478:	4618      	mov	r0, r3
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	bd90      	pop	{r4, r7, pc}

08002480 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002480:	b590      	push	{r4, r7, lr}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	460b      	mov	r3, r1
 800248a:	607a      	str	r2, [r7, #4]
 800248c:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	68dc      	ldr	r4, [r3, #12]
 8002492:	7afa      	ldrb	r2, [r7, #11]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2117      	movs	r1, #23
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	47a0      	blx	r4
 800249c:	4603      	mov	r3, r0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd90      	pop	{r4, r7, pc}

080024a6 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 80024a6:	b590      	push	{r4, r7, lr}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68dc      	ldr	r4, [r3, #12]
 80024b2:	2300      	movs	r3, #0
 80024b4:	2200      	movs	r2, #0
 80024b6:	2118      	movs	r1, #24
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	47a0      	blx	r4
 80024bc:	4603      	mov	r3, r0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd90      	pop	{r4, r7, pc}

080024c6 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80024c6:	b590      	push	{r4, r7, lr}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68dc      	ldr	r4, [r3, #12]
 80024d2:	2300      	movs	r3, #0
 80024d4:	2200      	movs	r2, #0
 80024d6:	2119      	movs	r1, #25
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	47a0      	blx	r4
 80024dc:	4603      	mov	r3, r0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd90      	pop	{r4, r7, pc}

080024e6 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 80024e6:	b590      	push	{r4, r7, lr}
 80024e8:	b085      	sub	sp, #20
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	73fb      	strb	r3, [r7, #15]
    data++;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	3301      	adds	r3, #1
 80024fa:	603b      	str	r3, [r7, #0]
    switch( cmd )
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
 80024fe:	2bfe      	cmp	r3, #254	@ 0xfe
 8002500:	d031      	beq.n	8002566 <u8x8_cad_SendSequence+0x80>
 8002502:	2bfe      	cmp	r3, #254	@ 0xfe
 8002504:	dc3d      	bgt.n	8002582 <u8x8_cad_SendSequence+0x9c>
 8002506:	2b19      	cmp	r3, #25
 8002508:	dc3b      	bgt.n	8002582 <u8x8_cad_SendSequence+0x9c>
 800250a:	2b18      	cmp	r3, #24
 800250c:	da23      	bge.n	8002556 <u8x8_cad_SendSequence+0x70>
 800250e:	2b16      	cmp	r3, #22
 8002510:	dc02      	bgt.n	8002518 <u8x8_cad_SendSequence+0x32>
 8002512:	2b15      	cmp	r3, #21
 8002514:	da03      	bge.n	800251e <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8002516:	e034      	b.n	8002582 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8002518:	2b17      	cmp	r3, #23
 800251a:	d00e      	beq.n	800253a <u8x8_cad_SendSequence+0x54>
	return;
 800251c:	e031      	b.n	8002582 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68dc      	ldr	r4, [r3, #12]
 8002528:	7bba      	ldrb	r2, [r7, #14]
 800252a:	7bf9      	ldrb	r1, [r7, #15]
 800252c:	2300      	movs	r3, #0
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	47a0      	blx	r4
	  data++;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	3301      	adds	r3, #1
 8002536:	603b      	str	r3, [r7, #0]
	  break;
 8002538:	e022      	b.n	8002580 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002540:	f107 030e 	add.w	r3, r7, #14
 8002544:	461a      	mov	r2, r3
 8002546:	2101      	movs	r1, #1
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7ff ff99 	bl	8002480 <u8x8_cad_SendData>
	  data++;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	3301      	adds	r3, #1
 8002552:	603b      	str	r3, [r7, #0]
	  break;
 8002554:	e014      	b.n	8002580 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68dc      	ldr	r4, [r3, #12]
 800255a:	7bf9      	ldrb	r1, [r7, #15]
 800255c:	2300      	movs	r3, #0
 800255e:	2200      	movs	r2, #0
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	47a0      	blx	r4
	  break;
 8002564:	e00c      	b.n	8002580 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 800256c:	7bbb      	ldrb	r3, [r7, #14]
 800256e:	461a      	mov	r2, r3
 8002570:	2129      	movs	r1, #41	@ 0x29
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f9ee 	bl	8002954 <u8x8_gpio_call>
	  data++;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	3301      	adds	r3, #1
 800257c:	603b      	str	r3, [r7, #0]
	  break;
 800257e:	bf00      	nop
    cmd = *data;
 8002580:	e7b6      	b.n	80024f0 <u8x8_cad_SendSequence+0xa>
	return;
 8002582:	bf00      	nop
    }
  }
}
 8002584:	3714      	adds	r7, #20
 8002586:	46bd      	mov	sp, r7
 8002588:	bd90      	pop	{r4, r7, pc}
	...

0800258c <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800258c:	b590      	push	{r4, r7, lr}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	607b      	str	r3, [r7, #4]
 8002596:	460b      	mov	r3, r1
 8002598:	72fb      	strb	r3, [r7, #11]
 800259a:	4613      	mov	r3, r2
 800259c:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 800259e:	7afb      	ldrb	r3, [r7, #11]
 80025a0:	3b14      	subs	r3, #20
 80025a2:	2b05      	cmp	r3, #5
 80025a4:	d82f      	bhi.n	8002606 <u8x8_cad_001+0x7a>
 80025a6:	a201      	add	r2, pc, #4	@ (adr r2, 80025ac <u8x8_cad_001+0x20>)
 80025a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ac:	080025f5 	.word	0x080025f5
 80025b0:	080025c5 	.word	0x080025c5
 80025b4:	080025d9 	.word	0x080025d9
 80025b8:	080025ed 	.word	0x080025ed
 80025bc:	080025f5 	.word	0x080025f5
 80025c0:	080025f5 	.word	0x080025f5
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 80025c4:	2100      	movs	r1, #0
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f7ff ff00 	bl	80023cc <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80025cc:	7abb      	ldrb	r3, [r7, #10]
 80025ce:	4619      	mov	r1, r3
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f7ff ff20 	bl	8002416 <u8x8_byte_SendByte>
      break;
 80025d6:	e018      	b.n	800260a <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 80025d8:	2100      	movs	r1, #0
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f7ff fef6 	bl	80023cc <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80025e0:	7abb      	ldrb	r3, [r7, #10]
 80025e2:	4619      	mov	r1, r3
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f7ff ff16 	bl	8002416 <u8x8_byte_SendByte>
      break;
 80025ea:	e00e      	b.n	800260a <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 80025ec:	2101      	movs	r1, #1
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f7ff feec 	bl	80023cc <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	691c      	ldr	r4, [r3, #16]
 80025f8:	7aba      	ldrb	r2, [r7, #10]
 80025fa:	7af9      	ldrb	r1, [r7, #11]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	47a0      	blx	r4
 8002602:	4603      	mov	r3, r0
 8002604:	e002      	b.n	800260c <u8x8_cad_001+0x80>
    default:
      return 0;
 8002606:	2300      	movs	r3, #0
 8002608:	e000      	b.n	800260c <u8x8_cad_001+0x80>
  }
  return 1;
 800260a:	2301      	movs	r3, #1
}
 800260c:	4618      	mov	r0, r3
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	bd90      	pop	{r4, r7, pc}

08002614 <u8x8_d_st7565_common>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	607b      	str	r3, [r7, #4]
 800261e:	460b      	mov	r3, r1
 8002620:	72fb      	strb	r3, [r7, #11]
 8002622:	4613      	mov	r3, r2
 8002624:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8002626:	7afb      	ldrb	r3, [r7, #11]
 8002628:	2b0f      	cmp	r3, #15
 800262a:	d006      	beq.n	800263a <u8x8_d_st7565_common+0x26>
 800262c:	2b0f      	cmp	r3, #15
 800262e:	dc71      	bgt.n	8002714 <u8x8_d_st7565_common+0x100>
 8002630:	2b0b      	cmp	r3, #11
 8002632:	d050      	beq.n	80026d6 <u8x8_d_st7565_common+0xc2>
 8002634:	2b0e      	cmp	r3, #14
 8002636:	d05b      	beq.n	80026f0 <u8x8_d_st7565_common+0xdc>
 8002638:	e06c      	b.n	8002714 <u8x8_d_st7565_common+0x100>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f7ff ff33 	bl	80024a6 <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	795b      	ldrb	r3, [r3, #5]
 8002644:	75bb      	strb	r3, [r7, #22]
      x *= 8;
 8002646:	7dbb      	ldrb	r3, [r7, #22]
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	75bb      	strb	r3, [r7, #22]
      x += u8x8->x_offset;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8002652:	7dbb      	ldrb	r3, [r7, #22]
 8002654:	4413      	add	r3, r2
 8002656:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8002658:	7dbb      	ldrb	r3, [r7, #22]
 800265a:	091b      	lsrs	r3, r3, #4
 800265c:	b2db      	uxtb	r3, r3
 800265e:	f043 0310 	orr.w	r3, r3, #16
 8002662:	b2db      	uxtb	r3, r3
 8002664:	4619      	mov	r1, r3
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f7ff fee6 	bl	8002438 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 800266c:	7dbb      	ldrb	r3, [r7, #22]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	b2db      	uxtb	r3, r3
 8002674:	4619      	mov	r1, r3
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f7ff fede 	bl	8002438 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	799b      	ldrb	r3, [r3, #6]
 8002680:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8002684:	b2db      	uxtb	r3, r3
 8002686:	4619      	mov	r1, r3
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f7ff fed5 	bl	8002438 <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	791b      	ldrb	r3, [r3, #4]
 8002692:	75fb      	strb	r3, [r7, #23]
      c *= 8;
 8002694:	7dfb      	ldrb	r3, [r7, #23]
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	613b      	str	r3, [r7, #16]
      /* 
	The following if condition checks the hardware limits of the st7565 
	controller: It is not allowed to write beyond the display limits.
	This is in fact an issue within flip mode.
      */
      if ( c + x > 132u )
 80026a0:	7dfa      	ldrb	r2, [r7, #23]
 80026a2:	7dbb      	ldrb	r3, [r7, #22]
 80026a4:	4413      	add	r3, r2
 80026a6:	2b84      	cmp	r3, #132	@ 0x84
 80026a8:	d905      	bls.n	80026b6 <u8x8_d_st7565_common+0xa2>
      {
	c = 132u;
 80026aa:	2384      	movs	r3, #132	@ 0x84
 80026ac:	75fb      	strb	r3, [r7, #23]
	c -= x;
 80026ae:	7dfa      	ldrb	r2, [r7, #23]
 80026b0:	7dbb      	ldrb	r3, [r7, #22]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	75fb      	strb	r3, [r7, #23]
      }
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 80026b6:	7dfb      	ldrb	r3, [r7, #23]
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	4619      	mov	r1, r3
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f7ff fedf 	bl	8002480 <u8x8_cad_SendData>
	arg_int--;
 80026c2:	7abb      	ldrb	r3, [r7, #10]
 80026c4:	3b01      	subs	r3, #1
 80026c6:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80026c8:	7abb      	ldrb	r3, [r7, #10]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f3      	bne.n	80026b6 <u8x8_d_st7565_common+0xa2>
      
      u8x8_cad_EndTransfer(u8x8);
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f7ff fef9 	bl	80024c6 <u8x8_cad_EndTransfer>
      break;
 80026d4:	e020      	b.n	8002718 <u8x8_d_st7565_common+0x104>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80026d6:	7abb      	ldrb	r3, [r7, #10]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d104      	bne.n	80026e6 <u8x8_d_st7565_common+0xd2>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
 80026dc:	4911      	ldr	r1, [pc, #68]	@ (8002724 <u8x8_d_st7565_common+0x110>)
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f7ff ff01 	bl	80024e6 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
      break;
 80026e4:	e018      	b.n	8002718 <u8x8_d_st7565_common+0x104>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
 80026e6:	4910      	ldr	r1, [pc, #64]	@ (8002728 <u8x8_d_st7565_common+0x114>)
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f7ff fefc 	bl	80024e6 <u8x8_cad_SendSequence>
      break;
 80026ee:	e013      	b.n	8002718 <u8x8_d_st7565_common+0x104>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f7ff fed8 	bl	80024a6 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 80026f6:	2181      	movs	r1, #129	@ 0x81
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f7ff fe9d 	bl	8002438 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
 80026fe:	7abb      	ldrb	r3, [r7, #10]
 8002700:	089b      	lsrs	r3, r3, #2
 8002702:	b2db      	uxtb	r3, r3
 8002704:	4619      	mov	r1, r3
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f7ff fea8 	bl	800245c <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f7ff feda 	bl	80024c6 <u8x8_cad_EndTransfer>
      break;
 8002712:	e001      	b.n	8002718 <u8x8_d_st7565_common+0x104>
#endif
    default:
      return 0;
 8002714:	2300      	movs	r3, #0
 8002716:	e000      	b.n	800271a <u8x8_d_st7565_common+0x106>
  }
  return 1;
 8002718:	2301      	movs	r3, #1
}
 800271a:	4618      	mov	r0, r3
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	0801128c 	.word	0x0801128c
 8002728:	08011294 	.word	0x08011294

0800272c <u8x8_d_st7565_64128n>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_64128n(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	607b      	str	r3, [r7, #4]
 8002736:	460b      	mov	r3, r1
 8002738:	72fb      	strb	r3, [r7, #11]
 800273a:	4613      	mov	r3, r2
 800273c:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 800273e:	7aba      	ldrb	r2, [r7, #10]
 8002740:	7af9      	ldrb	r1, [r7, #11]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f7ff ff65 	bl	8002614 <u8x8_d_st7565_common>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d131      	bne.n	80027b4 <u8x8_d_st7565_64128n+0x88>
  {
    /* msg not handled, then try here */
    switch(msg)
 8002750:	7afb      	ldrb	r3, [r7, #11]
 8002752:	2b0d      	cmp	r3, #13
 8002754:	d013      	beq.n	800277e <u8x8_d_st7565_64128n+0x52>
 8002756:	2b0d      	cmp	r3, #13
 8002758:	dc2a      	bgt.n	80027b0 <u8x8_d_st7565_64128n+0x84>
 800275a:	2b09      	cmp	r3, #9
 800275c:	d002      	beq.n	8002764 <u8x8_d_st7565_64128n+0x38>
 800275e:	2b0a      	cmp	r3, #10
 8002760:	d005      	beq.n	800276e <u8x8_d_st7565_64128n+0x42>
 8002762:	e025      	b.n	80027b0 <u8x8_d_st7565_64128n+0x84>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_64128n_display_info);
 8002764:	4916      	ldr	r1, [pc, #88]	@ (80027c0 <u8x8_d_st7565_64128n+0x94>)
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 f832 	bl	80027d0 <u8x8_d_helper_display_setup_memory>
	break;
 800276c:	e022      	b.n	80027b4 <u8x8_d_st7565_64128n+0x88>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 f842 	bl	80027f8 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_64128n_init_seq);
 8002774:	4913      	ldr	r1, [pc, #76]	@ (80027c4 <u8x8_d_st7565_64128n+0x98>)
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f7ff feb5 	bl	80024e6 <u8x8_cad_SendSequence>
	break;
 800277c:	e01a      	b.n	80027b4 <u8x8_d_st7565_64128n+0x88>
      case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
	if ( arg_int == 0 )
 800277e:	7abb      	ldrb	r3, [r7, #10]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10a      	bne.n	800279a <u8x8_d_st7565_64128n+0x6e>
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
 8002784:	4910      	ldr	r1, [pc, #64]	@ (80027c8 <u8x8_d_st7565_64128n+0x9c>)
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f7ff fead 	bl	80024e6 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	7c9a      	ldrb	r2, [r3, #18]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	else
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
	}	
	break;
 8002798:	e00c      	b.n	80027b4 <u8x8_d_st7565_64128n+0x88>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
 800279a:	490c      	ldr	r1, [pc, #48]	@ (80027cc <u8x8_d_st7565_64128n+0xa0>)
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f7ff fea2 	bl	80024e6 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	7cda      	ldrb	r2, [r3, #19]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	break;
 80027ae:	e001      	b.n	80027b4 <u8x8_d_st7565_64128n+0x88>
      default:
	return 0;		/* msg unknown */
 80027b0:	2300      	movs	r3, #0
 80027b2:	e000      	b.n	80027b6 <u8x8_d_st7565_64128n+0x8a>
    }
  }
  return 1;
 80027b4:	2301      	movs	r3, #1
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	080112cc 	.word	0x080112cc
 80027c4:	080112ac 	.word	0x080112ac
 80027c8:	0801129c 	.word	0x0801129c
 80027cc:	080112a4 	.word	0x080112a4

080027d0 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	7c9a      	ldrb	r2, [r3, #18]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80027f8:	b590      	push	{r4, r7, lr}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	695c      	ldr	r4, [r3, #20]
 8002804:	2300      	movs	r3, #0
 8002806:	2200      	movs	r2, #0
 8002808:	2128      	movs	r1, #40	@ 0x28
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68dc      	ldr	r4, [r3, #12]
 8002812:	2300      	movs	r3, #0
 8002814:	2200      	movs	r2, #0
 8002816:	2114      	movs	r1, #20
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800281c:	2201      	movs	r2, #1
 800281e:	214b      	movs	r1, #75	@ 0x4b
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 f897 	bl	8002954 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	791b      	ldrb	r3, [r3, #4]
 800282c:	461a      	mov	r2, r3
 800282e:	2129      	movs	r1, #41	@ 0x29
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 f88f 	bl	8002954 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8002836:	2200      	movs	r2, #0
 8002838:	214b      	movs	r1, #75	@ 0x4b
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f88a 	bl	8002954 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	791b      	ldrb	r3, [r3, #4]
 8002846:	461a      	mov	r2, r3
 8002848:	2129      	movs	r1, #41	@ 0x29
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f882 	bl	8002954 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8002850:	2201      	movs	r2, #1
 8002852:	214b      	movs	r1, #75	@ 0x4b
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 f87d 	bl	8002954 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	795b      	ldrb	r3, [r3, #5]
 8002860:	461a      	mov	r2, r3
 8002862:	2129      	movs	r1, #41	@ 0x29
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f875 	bl	8002954 <u8x8_gpio_call>
}    
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	bd90      	pop	{r4, r7, pc}

08002872 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8002872:	b590      	push	{r4, r7, lr}
 8002874:	b085      	sub	sp, #20
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
 800287a:	4608      	mov	r0, r1
 800287c:	4611      	mov	r1, r2
 800287e:	461a      	mov	r2, r3
 8002880:	4603      	mov	r3, r0
 8002882:	70fb      	strb	r3, [r7, #3]
 8002884:	460b      	mov	r3, r1
 8002886:	70bb      	strb	r3, [r7, #2]
 8002888:	4613      	mov	r3, r2
 800288a:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800288c:	78fb      	ldrb	r3, [r7, #3]
 800288e:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8002890:	78bb      	ldrb	r3, [r7, #2]
 8002892:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8002894:	787b      	ldrb	r3, [r7, #1]
 8002896:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8002898:	6a3b      	ldr	r3, [r7, #32]
 800289a:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689c      	ldr	r4, [r3, #8]
 80028a0:	f107 0308 	add.w	r3, r7, #8
 80028a4:	2201      	movs	r2, #1
 80028a6:	210f      	movs	r1, #15
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	47a0      	blx	r4
 80028ac:	4603      	mov	r3, r0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd90      	pop	{r4, r7, pc}

080028b6 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80028b6:	b590      	push	{r4, r7, lr}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689c      	ldr	r4, [r3, #8]
 80028c2:	2300      	movs	r3, #0
 80028c4:	2200      	movs	r2, #0
 80028c6:	2109      	movs	r1, #9
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	47a0      	blx	r4
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd90      	pop	{r4, r7, pc}

080028d4 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80028d4:	b590      	push	{r4, r7, lr}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689c      	ldr	r4, [r3, #8]
 80028e0:	2300      	movs	r3, #0
 80028e2:	2200      	movs	r2, #0
 80028e4:	210a      	movs	r1, #10
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd90      	pop	{r4, r7, pc}

080028f2 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80028f2:	b590      	push	{r4, r7, lr}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	460b      	mov	r3, r1
 80028fc:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689c      	ldr	r4, [r3, #8]
 8002902:	78fa      	ldrb	r2, [r7, #3]
 8002904:	2300      	movs	r3, #0
 8002906:	210b      	movs	r1, #11
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	47a0      	blx	r4
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	bd90      	pop	{r4, r7, pc}

08002914 <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 8002914:	b590      	push	{r4, r7, lr}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	460b      	mov	r3, r1
 800291e:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689c      	ldr	r4, [r3, #8]
 8002924:	78fa      	ldrb	r2, [r7, #3]
 8002926:	2300      	movs	r3, #0
 8002928:	210e      	movs	r1, #14
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	47a0      	blx	r4
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	bd90      	pop	{r4, r7, pc}

08002936 <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8002936:	b590      	push	{r4, r7, lr}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689c      	ldr	r4, [r3, #8]
 8002942:	2300      	movs	r3, #0
 8002944:	2200      	movs	r2, #0
 8002946:	2110      	movs	r1, #16
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	47a0      	blx	r4
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	bd90      	pop	{r4, r7, pc}

08002954 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8002954:	b590      	push	{r4, r7, lr}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	70fb      	strb	r3, [r7, #3]
 8002960:	4613      	mov	r3, r2
 8002962:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	695c      	ldr	r4, [r3, #20]
 8002968:	78ba      	ldrb	r2, [r7, #2]
 800296a:	78f9      	ldrb	r1, [r7, #3]
 800296c:	2300      	movs	r3, #0
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	47a0      	blx	r4
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	bd90      	pop	{r4, r7, pc}

0800297a <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800297a:	b480      	push	{r7}
 800297c:	b085      	sub	sp, #20
 800297e:	af00      	add	r7, sp, #0
 8002980:	60f8      	str	r0, [r7, #12]
 8002982:	607b      	str	r3, [r7, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	72fb      	strb	r3, [r7, #11]
 8002988:	4613      	mov	r3, r2
 800298a:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
	...

0800299c <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a11      	ldr	r2, [pc, #68]	@ (80029f4 <u8x8_SetupDefaults+0x58>)
 80029ae:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a10      	ldr	r2, [pc, #64]	@ (80029f4 <u8x8_SetupDefaults+0x58>)
 80029b4:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a0e      	ldr	r2, [pc, #56]	@ (80029f4 <u8x8_SetupDefaults+0x58>)
 80029ba:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a0d      	ldr	r2, [pc, #52]	@ (80029f4 <u8x8_SetupDefaults+0x58>)
 80029c0:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	22ff      	movs	r2, #255	@ 0xff
 80029dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	22ff      	movs	r2, #255	@ 0xff
 80029e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	0800297b 	.word	0x0800297b

080029f8 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
 8002a04:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f7ff ffc8 	bl	800299c <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f7ff ff46 	bl	80028b6 <u8x8_SetupMemory>
}
 8002a2a:	bf00      	nop
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <EEPROM_Init>:
/* Private variables */
static uint16_t current_address = 0x0000;
extern I2C_HandleTypeDef hi2c1;

HAL_StatusTypeDef EEPROM_Init(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
    current_address = 0;
 8002a38:	4b04      	ldr	r3, [pc, #16]	@ (8002a4c <EEPROM_Init+0x18>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	801a      	strh	r2, [r3, #0]
    return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	20000748 	.word	0x20000748

08002a50 <EEPROM_WriteData>:

HAL_StatusTypeDef EEPROM_WriteData(uint8_t *data)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b088      	sub	sp, #32
 8002a54:	af02      	add	r7, sp, #8
 8002a56:	6078      	str	r0, [r7, #4]
    uint8_t buffer[BLOCK_SIZE + 2];
    buffer[0] = (uint8_t)((current_address >> 8) & 0xFF);
 8002a58:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac8 <EEPROM_WriteData+0x78>)
 8002a5a:	881b      	ldrh	r3, [r3, #0]
 8002a5c:	0a1b      	lsrs	r3, r3, #8
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	733b      	strb	r3, [r7, #12]
    buffer[1] = (uint8_t)(current_address & 0xFF);
 8002a64:	4b18      	ldr	r3, [pc, #96]	@ (8002ac8 <EEPROM_WriteData+0x78>)
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	737b      	strb	r3, [r7, #13]
    memcpy(&buffer[2], data, BLOCK_SIZE);
 8002a6c:	f107 030c 	add.w	r3, r7, #12
 8002a70:	3302      	adds	r3, #2
 8002a72:	2208      	movs	r2, #8
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f008 fa33 	bl	800aee2 <memcpy>

    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, EEPROM_ADDR,
 8002a7c:	f107 020c 	add.w	r2, r7, #12
 8002a80:	f04f 33ff 	mov.w	r3, #4294967295
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	230a      	movs	r3, #10
 8002a88:	21a8      	movs	r1, #168	@ 0xa8
 8002a8a:	4810      	ldr	r0, [pc, #64]	@ (8002acc <EEPROM_WriteData+0x7c>)
 8002a8c:	f003 fc7e 	bl	800638c <HAL_I2C_Master_Transmit>
 8002a90:	4603      	mov	r3, r0
 8002a92:	75fb      	strb	r3, [r7, #23]
                                                      buffer, BLOCK_SIZE + 2, HAL_MAX_DELAY);

    if (status == HAL_OK) {
 8002a94:	7dfb      	ldrb	r3, [r7, #23]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d111      	bne.n	8002abe <EEPROM_WriteData+0x6e>
        current_address += BLOCK_SIZE;
 8002a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac8 <EEPROM_WriteData+0x78>)
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	3308      	adds	r3, #8
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	4b09      	ldr	r3, [pc, #36]	@ (8002ac8 <EEPROM_WriteData+0x78>)
 8002aa4:	801a      	strh	r2, [r3, #0]
        if (current_address >= EEPROM_SIZE)
 8002aa6:	4b08      	ldr	r3, [pc, #32]	@ (8002ac8 <EEPROM_WriteData+0x78>)
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d902      	bls.n	8002ab8 <EEPROM_WriteData+0x68>
            current_address = 0;
 8002ab2:	4b05      	ldr	r3, [pc, #20]	@ (8002ac8 <EEPROM_WriteData+0x78>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	801a      	strh	r2, [r3, #0]
        HAL_Delay(5); // Write cycle delay
 8002ab8:	2005      	movs	r0, #5
 8002aba:	f002 fc2f 	bl	800531c <HAL_Delay>
    }

    return status;
 8002abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3718      	adds	r7, #24
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	20000748 	.word	0x20000748
 8002acc:	200007c0 	.word	0x200007c0

08002ad0 <EEPROM_ReadData>:

HAL_StatusTypeDef EEPROM_ReadData(uint8_t *buffer)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af02      	add	r7, sp, #8
 8002ad6:	6078      	str	r0, [r7, #4]
    uint8_t addr_buffer[2];
    addr_buffer[0] = (uint8_t)((current_address >> 8) & 0xFF);
 8002ad8:	4b14      	ldr	r3, [pc, #80]	@ (8002b2c <EEPROM_ReadData+0x5c>)
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	0a1b      	lsrs	r3, r3, #8
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	733b      	strb	r3, [r7, #12]
    addr_buffer[1] = (uint8_t)(current_address & 0xFF);
 8002ae4:	4b11      	ldr	r3, [pc, #68]	@ (8002b2c <EEPROM_ReadData+0x5c>)
 8002ae6:	881b      	ldrh	r3, [r3, #0]
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	737b      	strb	r3, [r7, #13]

    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, EEPROM_ADDR,
 8002aec:	f107 020c 	add.w	r2, r7, #12
 8002af0:	f04f 33ff 	mov.w	r3, #4294967295
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	2302      	movs	r3, #2
 8002af8:	21a8      	movs	r1, #168	@ 0xa8
 8002afa:	480d      	ldr	r0, [pc, #52]	@ (8002b30 <EEPROM_ReadData+0x60>)
 8002afc:	f003 fc46 	bl	800638c <HAL_I2C_Master_Transmit>
 8002b00:	4603      	mov	r3, r0
 8002b02:	73fb      	strb	r3, [r7, #15]
                                                      addr_buffer, 2, HAL_MAX_DELAY);
    if (status != HAL_OK)
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <EEPROM_ReadData+0x3e>
        return status;
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
 8002b0c:	e009      	b.n	8002b22 <EEPROM_ReadData+0x52>

    return HAL_I2C_Master_Receive(&hi2c1, EEPROM_ADDR, buffer, BLOCK_SIZE, HAL_MAX_DELAY);
 8002b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	2308      	movs	r3, #8
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	21a8      	movs	r1, #168	@ 0xa8
 8002b1a:	4805      	ldr	r0, [pc, #20]	@ (8002b30 <EEPROM_ReadData+0x60>)
 8002b1c:	f003 fd34 	bl	8006588 <HAL_I2C_Master_Receive>
 8002b20:	4603      	mov	r3, r0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20000748 	.word	0x20000748
 8002b30:	200007c0 	.word	0x200007c0

08002b34 <LED_Init>:
    {GPIOG, LED_07_Pin},  // LED 9


};

void LED_Init(void) {
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
    for(uint8_t i = 0; i < 9; i++) {
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	71fb      	strb	r3, [r7, #7]
 8002b3e:	e00f      	b.n	8002b60 <LED_Init+0x2c>
        HAL_GPIO_WritePin(leds[i].port, leds[i].pin, GPIO_PIN_RESET);
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	4a0b      	ldr	r2, [pc, #44]	@ (8002b70 <LED_Init+0x3c>)
 8002b44:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002b48:	79fb      	ldrb	r3, [r7, #7]
 8002b4a:	4a09      	ldr	r2, [pc, #36]	@ (8002b70 <LED_Init+0x3c>)
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4413      	add	r3, r2
 8002b50:	889b      	ldrh	r3, [r3, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	4619      	mov	r1, r3
 8002b56:	f003 fa89 	bl	800606c <HAL_GPIO_WritePin>
    for(uint8_t i = 0; i < 9; i++) {
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	71fb      	strb	r3, [r7, #7]
 8002b60:	79fb      	ldrb	r3, [r7, #7]
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d9ec      	bls.n	8002b40 <LED_Init+0xc>
    }
}
 8002b66:	bf00      	nop
 8002b68:	bf00      	nop
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	080112e4 	.word	0x080112e4

08002b74 <LED_Toggle>:
                         leds[led_number-1].pin,
                         state == ON ? GPIO_PIN_SET : GPIO_PIN_RESET);
    }
}

void LED_Toggle(uint8_t led_number) {
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	71fb      	strb	r3, [r7, #7]
    if(led_number >= 1 && led_number <= 9) {
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d011      	beq.n	8002ba8 <LED_Toggle+0x34>
 8002b84:	79fb      	ldrb	r3, [r7, #7]
 8002b86:	2b09      	cmp	r3, #9
 8002b88:	d80e      	bhi.n	8002ba8 <LED_Toggle+0x34>
        HAL_GPIO_TogglePin(leds[led_number-1].port, leds[led_number-1].pin);
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	4a08      	ldr	r2, [pc, #32]	@ (8002bb0 <LED_Toggle+0x3c>)
 8002b90:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002b94:	79fb      	ldrb	r3, [r7, #7]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	4905      	ldr	r1, [pc, #20]	@ (8002bb0 <LED_Toggle+0x3c>)
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	440b      	add	r3, r1
 8002b9e:	889b      	ldrh	r3, [r3, #4]
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4610      	mov	r0, r2
 8002ba4:	f003 fa7b 	bl	800609e <HAL_GPIO_TogglePin>
    }
}
 8002ba8:	bf00      	nop
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	080112e4 	.word	0x080112e4

08002bb4 <LED_SetAll>:

void LED_SetAll(LED_Set_State state) {
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	71fb      	strb	r3, [r7, #7]
    for(uint8_t i = 0; i < 9; i++) {
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	73fb      	strb	r3, [r7, #15]
 8002bc2:	e014      	b.n	8002bee <LED_SetAll+0x3a>
        HAL_GPIO_WritePin(leds[i].port,
 8002bc4:	7bfb      	ldrb	r3, [r7, #15]
 8002bc6:	4a0e      	ldr	r2, [pc, #56]	@ (8002c00 <LED_SetAll+0x4c>)
 8002bc8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
                         leds[i].pin,
 8002bce:	4a0c      	ldr	r2, [pc, #48]	@ (8002c00 <LED_SetAll+0x4c>)
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	8899      	ldrh	r1, [r3, #4]
        HAL_GPIO_WritePin(leds[i].port,
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	bf0c      	ite	eq
 8002bdc:	2301      	moveq	r3, #1
 8002bde:	2300      	movne	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	461a      	mov	r2, r3
 8002be4:	f003 fa42 	bl	800606c <HAL_GPIO_WritePin>
    for(uint8_t i = 0; i < 9; i++) {
 8002be8:	7bfb      	ldrb	r3, [r7, #15]
 8002bea:	3301      	adds	r3, #1
 8002bec:	73fb      	strb	r3, [r7, #15]
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
 8002bf0:	2b08      	cmp	r3, #8
 8002bf2:	d9e7      	bls.n	8002bc4 <LED_SetAll+0x10>
                         state == ON ? GPIO_PIN_SET : GPIO_PIN_RESET);
    }
}
 8002bf4:	bf00      	nop
 8002bf6:	bf00      	nop
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	080112e4 	.word	0x080112e4

08002c04 <RS485_Init>:
    {&huart3, USART3_ENABLE_GPIO_Port, USART3_ENABLE_Pin},
    {&huart6, USART6_ENABLE_GPIO_Port, USART6_ENABLE_Pin}
};

void RS485_Init(RS485_Channel channel)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	71fb      	strb	r3, [r7, #7]
    RS485_Handle* ch = &channels[channel];
 8002c0e:	79fa      	ldrb	r2, [r7, #7]
 8002c10:	4613      	mov	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	011b      	lsls	r3, r3, #4
 8002c18:	4a0b      	ldr	r2, [pc, #44]	@ (8002c48 <RS485_Init+0x44>)
 8002c1a:	4413      	add	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]

    // Set to receive mode
    HAL_GPIO_WritePin(ch->dePort, ch->dePin, GPIO_PIN_RESET);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6858      	ldr	r0, [r3, #4]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	891b      	ldrh	r3, [r3, #8]
 8002c26:	2200      	movs	r2, #0
 8002c28:	4619      	mov	r1, r3
 8002c2a:	f003 fa1f 	bl	800606c <HAL_GPIO_WritePin>

    // Start reception
    HAL_UARTEx_ReceiveToIdle_IT(ch->huart, ch->rxBuffer, RS485_BUFFER_SIZE);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6818      	ldr	r0, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	330a      	adds	r3, #10
 8002c36:	2240      	movs	r2, #64	@ 0x40
 8002c38:	4619      	mov	r1, r3
 8002c3a:	f006 fa1a 	bl	8009072 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8002c3e:	bf00      	nop
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20000000 	.word	0x20000000

08002c4c <RS485_Send>:

void RS485_Send(RS485_Channel channel, const char* msg)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	6039      	str	r1, [r7, #0]
 8002c56:	71fb      	strb	r3, [r7, #7]
    RS485_Handle* ch = &channels[channel];
 8002c58:	79fa      	ldrb	r2, [r7, #7]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	4a1c      	ldr	r2, [pc, #112]	@ (8002cd4 <RS485_Send+0x88>)
 8002c64:	4413      	add	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]
    uint16_t len = strlen(msg);
 8002c68:	6838      	ldr	r0, [r7, #0]
 8002c6a:	f7fd fb11 	bl	8000290 <strlen>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	817b      	strh	r3, [r7, #10]

    // Enable transmitter
    HAL_GPIO_WritePin(ch->dePort, ch->dePin, GPIO_PIN_SET);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6858      	ldr	r0, [r3, #4]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	891b      	ldrh	r3, [r3, #8]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	f003 f9f5 	bl	800606c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8002c82:	2001      	movs	r0, #1
 8002c84:	f002 fb4a 	bl	800531c <HAL_Delay>

    // Send data
    HAL_UART_Transmit(ch->huart, (uint8_t*)msg, len, 1000);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6818      	ldr	r0, [r3, #0]
 8002c8c:	897a      	ldrh	r2, [r7, #10]
 8002c8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c92:	6839      	ldr	r1, [r7, #0]
 8002c94:	f006 f962 	bl	8008f5c <HAL_UART_Transmit>
    while(__HAL_UART_GET_FLAG(ch->huart, UART_FLAG_TC) == RESET);
 8002c98:	bf00      	nop
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ca6:	2b40      	cmp	r3, #64	@ 0x40
 8002ca8:	d1f7      	bne.n	8002c9a <RS485_Send+0x4e>

    // Return to receive mode
    HAL_GPIO_WritePin(ch->dePort, ch->dePin, GPIO_PIN_RESET);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6858      	ldr	r0, [r3, #4]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	891b      	ldrh	r3, [r3, #8]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	f003 f9d9 	bl	800606c <HAL_GPIO_WritePin>

    // Restart reception
    HAL_UARTEx_ReceiveToIdle_IT(ch->huart, ch->rxBuffer, RS485_BUFFER_SIZE);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	330a      	adds	r3, #10
 8002cc2:	2240      	movs	r2, #64	@ 0x40
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	f006 f9d4 	bl	8009072 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8002cca:	bf00      	nop
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20000000 	.word	0x20000000

08002cd8 <RS485_Available>:

uint8_t RS485_Available(RS485_Channel channel)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	71fb      	strb	r3, [r7, #7]
    return channels[channel].dataReady;
 8002ce2:	79fa      	ldrb	r2, [r7, #7]
 8002ce4:	4906      	ldr	r1, [pc, #24]	@ (8002d00 <RS485_Available+0x28>)
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	440b      	add	r3, r1
 8002cf0:	334c      	adds	r3, #76	@ 0x4c
 8002cf2:	781b      	ldrb	r3, [r3, #0]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	20000000 	.word	0x20000000

08002d04 <RS485_GetData>:

uint16_t RS485_GetData(RS485_Channel channel, char* buffer)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	6039      	str	r1, [r7, #0]
 8002d0e:	71fb      	strb	r3, [r7, #7]
    RS485_Handle* ch = &channels[channel];
 8002d10:	79fa      	ldrb	r2, [r7, #7]
 8002d12:	4613      	mov	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	011b      	lsls	r3, r3, #4
 8002d1a:	4a10      	ldr	r2, [pc, #64]	@ (8002d5c <RS485_GetData+0x58>)
 8002d1c:	4413      	add	r3, r2
 8002d1e:	60bb      	str	r3, [r7, #8]
    uint16_t size = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	81fb      	strh	r3, [r7, #14]

    if(ch->dataReady) {
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d011      	beq.n	8002d52 <RS485_GetData+0x4e>
        memcpy(buffer, ch->rxBuffer, ch->rxSize);
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	f103 010a 	add.w	r1, r3, #10
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	6838      	ldr	r0, [r7, #0]
 8002d3e:	f008 f8d0 	bl	800aee2 <memcpy>
        size = ch->rxSize;
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8002d48:	81fb      	strh	r3, [r7, #14]
        ch->dataReady = 0;
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    }

    return size;
 8002d52:	89fb      	ldrh	r3, [r7, #14]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	20000000 	.word	0x20000000

08002d60 <HAL_UARTEx_RxEventCallback>:

// Add this to your existing UART callback
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	807b      	strh	r3, [r7, #2]
    for(int i = 0; i < 4; i++) {
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	e030      	b.n	8002dd4 <HAL_UARTEx_RxEventCallback+0x74>
        if(huart == channels[i].huart) {
 8002d72:	491c      	ldr	r1, [pc, #112]	@ (8002de4 <HAL_UARTEx_RxEventCallback+0x84>)
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	4613      	mov	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	011b      	lsls	r3, r3, #4
 8002d7e:	440b      	add	r3, r1
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d122      	bne.n	8002dce <HAL_UARTEx_RxEventCallback+0x6e>
            channels[i].rxSize = Size;
 8002d88:	4916      	ldr	r1, [pc, #88]	@ (8002de4 <HAL_UARTEx_RxEventCallback+0x84>)
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4413      	add	r3, r2
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	440b      	add	r3, r1
 8002d96:	334a      	adds	r3, #74	@ 0x4a
 8002d98:	887a      	ldrh	r2, [r7, #2]
 8002d9a:	801a      	strh	r2, [r3, #0]
            channels[i].dataReady = 1;
 8002d9c:	4911      	ldr	r1, [pc, #68]	@ (8002de4 <HAL_UARTEx_RxEventCallback+0x84>)
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	440b      	add	r3, r1
 8002daa:	334c      	adds	r3, #76	@ 0x4c
 8002dac:	2201      	movs	r2, #1
 8002dae:	701a      	strb	r2, [r3, #0]
            HAL_UARTEx_ReceiveToIdle_IT(huart, channels[i].rxBuffer, RS485_BUFFER_SIZE);
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	4613      	mov	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	011b      	lsls	r3, r3, #4
 8002dba:	3308      	adds	r3, #8
 8002dbc:	4a09      	ldr	r2, [pc, #36]	@ (8002de4 <HAL_UARTEx_RxEventCallback+0x84>)
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3302      	adds	r3, #2
 8002dc2:	2240      	movs	r2, #64	@ 0x40
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f006 f953 	bl	8009072 <HAL_UARTEx_ReceiveToIdle_IT>
            break;
 8002dcc:	e006      	b.n	8002ddc <HAL_UARTEx_RxEventCallback+0x7c>
    for(int i = 0; i < 4; i++) {
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2b03      	cmp	r3, #3
 8002dd8:	ddcb      	ble.n	8002d72 <HAL_UARTEx_RxEventCallback+0x12>
        }
    }
}
 8002dda:	bf00      	nop
 8002ddc:	bf00      	nop
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	20000000 	.word	0x20000000

08002de8 <DEC2BCD>:

static I2C_HandleTypeDef *hi2c_rtc;
DateTime time;

// Convert decimal to BCD
static uint8_t DEC2BCD(int val) {
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
    return (uint8_t)((val / 10 * 16) + (val % 10));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a0f      	ldr	r2, [pc, #60]	@ (8002e30 <DEC2BCD+0x48>)
 8002df4:	fb82 1203 	smull	r1, r2, r2, r3
 8002df8:	1092      	asrs	r2, r2, #2
 8002dfa:	17db      	asrs	r3, r3, #31
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	b2d8      	uxtb	r0, r3
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	4b0a      	ldr	r3, [pc, #40]	@ (8002e30 <DEC2BCD+0x48>)
 8002e08:	fb83 1302 	smull	r1, r3, r3, r2
 8002e0c:	1099      	asrs	r1, r3, #2
 8002e0e:	17d3      	asrs	r3, r2, #31
 8002e10:	1ac9      	subs	r1, r1, r3
 8002e12:	460b      	mov	r3, r1
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	440b      	add	r3, r1
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	1ad1      	subs	r1, r2, r3
 8002e1c:	b2cb      	uxtb	r3, r1
 8002e1e:	4403      	add	r3, r0
 8002e20:	b2db      	uxtb	r3, r3
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	66666667 	.word	0x66666667

08002e34 <BCD2DEC>:

// Convert BCD to decimal
static int BCD2DEC(uint8_t val) {
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	71fb      	strb	r3, [r7, #7]
    return (int)((val / 16 * 10) + (val % 16));
 8002e3e:	79fb      	ldrb	r3, [r7, #7]
 8002e40:	091b      	lsrs	r3, r3, #4
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	461a      	mov	r2, r3
 8002e46:	4613      	mov	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	461a      	mov	r2, r3
 8002e50:	79fb      	ldrb	r3, [r7, #7]
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	4413      	add	r3, r2
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <RTC_Init>:

void RTC_Init(I2C_HandleTypeDef *hi2c)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b088      	sub	sp, #32
 8002e68:	af04      	add	r7, sp, #16
 8002e6a:	6078      	str	r0, [r7, #4]
    hi2c_rtc = hi2c;
 8002e6c:	4a57      	ldr	r2, [pc, #348]	@ (8002fcc <RTC_Init+0x168>)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6013      	str	r3, [r2, #0]
    uint8_t ctrl;

    // Step 1: Clear oscillator start bit first
    HAL_I2C_Mem_Read(hi2c_rtc, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8002e72:	4b56      	ldr	r3, [pc, #344]	@ (8002fcc <RTC_Init+0x168>)
 8002e74:	6818      	ldr	r0, [r3, #0]
 8002e76:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7a:	9302      	str	r3, [sp, #8]
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	9301      	str	r3, [sp, #4]
 8002e80:	f107 030f 	add.w	r3, r7, #15
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	2301      	movs	r3, #1
 8002e88:	2200      	movs	r2, #0
 8002e8a:	21df      	movs	r1, #223	@ 0xdf
 8002e8c:	f003 fea8 	bl	8006be0 <HAL_I2C_Mem_Read>
    ctrl &= ~MCP7940N_ST;
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
 8002e92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c_rtc, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8002e9a:	4b4c      	ldr	r3, [pc, #304]	@ (8002fcc <RTC_Init+0x168>)
 8002e9c:	6818      	ldr	r0, [r3, #0]
 8002e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea2:	9302      	str	r3, [sp, #8]
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	9301      	str	r3, [sp, #4]
 8002ea8:	f107 030f 	add.w	r3, r7, #15
 8002eac:	9300      	str	r3, [sp, #0]
 8002eae:	2301      	movs	r3, #1
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	21df      	movs	r1, #223	@ 0xdf
 8002eb4:	f003 fd9a 	bl	80069ec <HAL_I2C_Mem_Write>
    HAL_Delay(10);  // Wait for oscillator to stop
 8002eb8:	200a      	movs	r0, #10
 8002eba:	f002 fa2f 	bl	800531c <HAL_Delay>

    // Step 2: Enable battery backup
    HAL_I2C_Mem_Read(hi2c_rtc, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8002ebe:	4b43      	ldr	r3, [pc, #268]	@ (8002fcc <RTC_Init+0x168>)
 8002ec0:	6818      	ldr	r0, [r3, #0]
 8002ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec6:	9302      	str	r3, [sp, #8]
 8002ec8:	2301      	movs	r3, #1
 8002eca:	9301      	str	r3, [sp, #4]
 8002ecc:	f107 030f 	add.w	r3, r7, #15
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	2203      	movs	r2, #3
 8002ed6:	21df      	movs	r1, #223	@ 0xdf
 8002ed8:	f003 fe82 	bl	8006be0 <HAL_I2C_Mem_Read>
    ctrl |= MCP7940N_VBATEN;
 8002edc:	7bfb      	ldrb	r3, [r7, #15]
 8002ede:	f043 0308 	orr.w	r3, r3, #8
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c_rtc, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8002ee6:	4b39      	ldr	r3, [pc, #228]	@ (8002fcc <RTC_Init+0x168>)
 8002ee8:	6818      	ldr	r0, [r3, #0]
 8002eea:	f04f 33ff 	mov.w	r3, #4294967295
 8002eee:	9302      	str	r3, [sp, #8]
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	9301      	str	r3, [sp, #4]
 8002ef4:	f107 030f 	add.w	r3, r7, #15
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	2301      	movs	r3, #1
 8002efc:	2203      	movs	r2, #3
 8002efe:	21df      	movs	r1, #223	@ 0xdf
 8002f00:	f003 fd74 	bl	80069ec <HAL_I2C_Mem_Write>

    // Step 3: Start oscillator
    HAL_I2C_Mem_Read(hi2c_rtc, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8002f04:	4b31      	ldr	r3, [pc, #196]	@ (8002fcc <RTC_Init+0x168>)
 8002f06:	6818      	ldr	r0, [r3, #0]
 8002f08:	f04f 33ff 	mov.w	r3, #4294967295
 8002f0c:	9302      	str	r3, [sp, #8]
 8002f0e:	2301      	movs	r3, #1
 8002f10:	9301      	str	r3, [sp, #4]
 8002f12:	f107 030f 	add.w	r3, r7, #15
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	2301      	movs	r3, #1
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	21df      	movs	r1, #223	@ 0xdf
 8002f1e:	f003 fe5f 	bl	8006be0 <HAL_I2C_Mem_Read>
    ctrl |= MCP7940N_ST;
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
 8002f24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c_rtc, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, &ctrl, 1, HAL_MAX_DELAY);
 8002f2c:	4b27      	ldr	r3, [pc, #156]	@ (8002fcc <RTC_Init+0x168>)
 8002f2e:	6818      	ldr	r0, [r3, #0]
 8002f30:	f04f 33ff 	mov.w	r3, #4294967295
 8002f34:	9302      	str	r3, [sp, #8]
 8002f36:	2301      	movs	r3, #1
 8002f38:	9301      	str	r3, [sp, #4]
 8002f3a:	f107 030f 	add.w	r3, r7, #15
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	2301      	movs	r3, #1
 8002f42:	2200      	movs	r2, #0
 8002f44:	21df      	movs	r1, #223	@ 0xdf
 8002f46:	f003 fd51 	bl	80069ec <HAL_I2C_Mem_Write>

    // Step 4: Wait for oscillator to start running
    do {
        HAL_I2C_Mem_Read(hi2c_rtc, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8002f4a:	4b20      	ldr	r3, [pc, #128]	@ (8002fcc <RTC_Init+0x168>)
 8002f4c:	6818      	ldr	r0, [r3, #0]
 8002f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f52:	9302      	str	r3, [sp, #8]
 8002f54:	2301      	movs	r3, #1
 8002f56:	9301      	str	r3, [sp, #4]
 8002f58:	f107 030f 	add.w	r3, r7, #15
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	2301      	movs	r3, #1
 8002f60:	2203      	movs	r2, #3
 8002f62:	21df      	movs	r1, #223	@ 0xdf
 8002f64:	f003 fe3c 	bl	8006be0 <HAL_I2C_Mem_Read>
    } while(!(ctrl & MCP7940N_OSCON));
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
 8002f6a:	f003 0320 	and.w	r3, r3, #32
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0eb      	beq.n	8002f4a <RTC_Init+0xe6>

    // Step 5: Clear power fail flag if set
    HAL_I2C_Mem_Read(hi2c_rtc, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8002f72:	4b16      	ldr	r3, [pc, #88]	@ (8002fcc <RTC_Init+0x168>)
 8002f74:	6818      	ldr	r0, [r3, #0]
 8002f76:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7a:	9302      	str	r3, [sp, #8]
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	9301      	str	r3, [sp, #4]
 8002f80:	f107 030f 	add.w	r3, r7, #15
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	2301      	movs	r3, #1
 8002f88:	2203      	movs	r2, #3
 8002f8a:	21df      	movs	r1, #223	@ 0xdf
 8002f8c:	f003 fe28 	bl	8006be0 <HAL_I2C_Mem_Read>
    if(ctrl & MCP7940N_PWRFAIL) {
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
 8002f92:	f003 0310 	and.w	r3, r3, #16
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d013      	beq.n	8002fc2 <RTC_Init+0x15e>
        ctrl &= ~MCP7940N_PWRFAIL;
 8002f9a:	7bfb      	ldrb	r3, [r7, #15]
 8002f9c:	f023 0310 	bic.w	r3, r3, #16
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(hi2c_rtc, MCP7940N_I2C_ADDR, MCP7940N_RTCWKDAY, 1, &ctrl, 1, HAL_MAX_DELAY);
 8002fa4:	4b09      	ldr	r3, [pc, #36]	@ (8002fcc <RTC_Init+0x168>)
 8002fa6:	6818      	ldr	r0, [r3, #0]
 8002fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8002fac:	9302      	str	r3, [sp, #8]
 8002fae:	2301      	movs	r3, #1
 8002fb0:	9301      	str	r3, [sp, #4]
 8002fb2:	f107 030f 	add.w	r3, r7, #15
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	2301      	movs	r3, #1
 8002fba:	2203      	movs	r2, #3
 8002fbc:	21df      	movs	r1, #223	@ 0xdf
 8002fbe:	f003 fd15 	bl	80069ec <HAL_I2C_Mem_Write>
    }
}
 8002fc2:	bf00      	nop
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	2000074c 	.word	0x2000074c

08002fd0 <RTC_ReadTime>:

void RTC_ReadTime(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af04      	add	r7, sp, #16
    uint8_t data[7];

    HAL_I2C_Mem_Read(hi2c_rtc, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, data, 7, HAL_MAX_DELAY);
 8002fd6:	4b2e      	ldr	r3, [pc, #184]	@ (8003090 <RTC_ReadTime+0xc0>)
 8002fd8:	6818      	ldr	r0, [r3, #0]
 8002fda:	f04f 33ff 	mov.w	r3, #4294967295
 8002fde:	9302      	str	r3, [sp, #8]
 8002fe0:	2307      	movs	r3, #7
 8002fe2:	9301      	str	r3, [sp, #4]
 8002fe4:	463b      	mov	r3, r7
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	2301      	movs	r3, #1
 8002fea:	2200      	movs	r2, #0
 8002fec:	21df      	movs	r1, #223	@ 0xdf
 8002fee:	f003 fdf7 	bl	8006be0 <HAL_I2C_Mem_Read>

    time.second = BCD2DEC(data[0] & 0x7F);
 8002ff2:	783b      	ldrb	r3, [r7, #0]
 8002ff4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff ff1a 	bl	8002e34 <BCD2DEC>
 8003000:	4603      	mov	r3, r0
 8003002:	b2da      	uxtb	r2, r3
 8003004:	4b23      	ldr	r3, [pc, #140]	@ (8003094 <RTC_ReadTime+0xc4>)
 8003006:	701a      	strb	r2, [r3, #0]
    time.minute = BCD2DEC(data[1] & 0x7F);
 8003008:	787b      	ldrb	r3, [r7, #1]
 800300a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800300e:	b2db      	uxtb	r3, r3
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff ff0f 	bl	8002e34 <BCD2DEC>
 8003016:	4603      	mov	r3, r0
 8003018:	b2da      	uxtb	r2, r3
 800301a:	4b1e      	ldr	r3, [pc, #120]	@ (8003094 <RTC_ReadTime+0xc4>)
 800301c:	705a      	strb	r2, [r3, #1]
    time.hour = BCD2DEC(data[2] & 0x3F);
 800301e:	78bb      	ldrb	r3, [r7, #2]
 8003020:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003024:	b2db      	uxtb	r3, r3
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff ff04 	bl	8002e34 <BCD2DEC>
 800302c:	4603      	mov	r3, r0
 800302e:	b2da      	uxtb	r2, r3
 8003030:	4b18      	ldr	r3, [pc, #96]	@ (8003094 <RTC_ReadTime+0xc4>)
 8003032:	709a      	strb	r2, [r3, #2]
    time.dayofweek = BCD2DEC(data[3] & 0x07);
 8003034:	78fb      	ldrb	r3, [r7, #3]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	b2db      	uxtb	r3, r3
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff fef9 	bl	8002e34 <BCD2DEC>
 8003042:	4603      	mov	r3, r0
 8003044:	b2da      	uxtb	r2, r3
 8003046:	4b13      	ldr	r3, [pc, #76]	@ (8003094 <RTC_ReadTime+0xc4>)
 8003048:	70da      	strb	r2, [r3, #3]
    time.day = BCD2DEC(data[4] & 0x3F);
 800304a:	793b      	ldrb	r3, [r7, #4]
 800304c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003050:	b2db      	uxtb	r3, r3
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff feee 	bl	8002e34 <BCD2DEC>
 8003058:	4603      	mov	r3, r0
 800305a:	b2da      	uxtb	r2, r3
 800305c:	4b0d      	ldr	r3, [pc, #52]	@ (8003094 <RTC_ReadTime+0xc4>)
 800305e:	711a      	strb	r2, [r3, #4]
    time.month = BCD2DEC(data[5] & 0x1F);
 8003060:	797b      	ldrb	r3, [r7, #5]
 8003062:	f003 031f 	and.w	r3, r3, #31
 8003066:	b2db      	uxtb	r3, r3
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff fee3 	bl	8002e34 <BCD2DEC>
 800306e:	4603      	mov	r3, r0
 8003070:	b2da      	uxtb	r2, r3
 8003072:	4b08      	ldr	r3, [pc, #32]	@ (8003094 <RTC_ReadTime+0xc4>)
 8003074:	715a      	strb	r2, [r3, #5]
    time.year = BCD2DEC(data[6]);
 8003076:	79bb      	ldrb	r3, [r7, #6]
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff fedb 	bl	8002e34 <BCD2DEC>
 800307e:	4603      	mov	r3, r0
 8003080:	b2da      	uxtb	r2, r3
 8003082:	4b04      	ldr	r3, [pc, #16]	@ (8003094 <RTC_ReadTime+0xc4>)
 8003084:	719a      	strb	r2, [r3, #6]
}
 8003086:	bf00      	nop
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	2000074c 	.word	0x2000074c
 8003094:	20000750 	.word	0x20000750

08003098 <RTC_TimeLapseInit>:

    HAL_I2C_Mem_Write(hi2c_rtc, MCP7940N_I2C_ADDR, MCP7940N_RTCSEC, 1, data, 7, HAL_MAX_DELAY);
}

void RTC_TimeLapseInit(void)
{
 8003098:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800309c:	b08f      	sub	sp, #60	@ 0x3c
 800309e:	af04      	add	r7, sp, #16
    static uint8_t timestamp[TIMELAPSE_SIZE];

    // Read current time
    RTC_ReadTime();
 80030a0:	f7ff ff96 	bl	8002fd0 <RTC_ReadTime>

    // Check if 5 minutes have passed since last timelapse
    if ((time.minute % TIMELAPSE_INTERVAL == 0) && (time.minute != last_timelapse_minute)) {
 80030a4:	4b49      	ldr	r3, [pc, #292]	@ (80031cc <RTC_TimeLapseInit+0x134>)
 80030a6:	785a      	ldrb	r2, [r3, #1]
 80030a8:	4b49      	ldr	r3, [pc, #292]	@ (80031d0 <RTC_TimeLapseInit+0x138>)
 80030aa:	fba3 1302 	umull	r1, r3, r3, r2
 80030ae:	0899      	lsrs	r1, r3, #2
 80030b0:	460b      	mov	r3, r1
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	440b      	add	r3, r1
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d14b      	bne.n	8003156 <RTC_TimeLapseInit+0xbe>
 80030be:	4b43      	ldr	r3, [pc, #268]	@ (80031cc <RTC_TimeLapseInit+0x134>)
 80030c0:	785a      	ldrb	r2, [r3, #1]
 80030c2:	4b44      	ldr	r3, [pc, #272]	@ (80031d4 <RTC_TimeLapseInit+0x13c>)
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d045      	beq.n	8003156 <RTC_TimeLapseInit+0xbe>
        // Pack time data for EEPROM
        timestamp[0] = DEC2BCD(time.second);
 80030ca:	4b40      	ldr	r3, [pc, #256]	@ (80031cc <RTC_TimeLapseInit+0x134>)
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff fe8a 	bl	8002de8 <DEC2BCD>
 80030d4:	4603      	mov	r3, r0
 80030d6:	461a      	mov	r2, r3
 80030d8:	4b3f      	ldr	r3, [pc, #252]	@ (80031d8 <RTC_TimeLapseInit+0x140>)
 80030da:	701a      	strb	r2, [r3, #0]
        timestamp[1] = DEC2BCD(time.minute);
 80030dc:	4b3b      	ldr	r3, [pc, #236]	@ (80031cc <RTC_TimeLapseInit+0x134>)
 80030de:	785b      	ldrb	r3, [r3, #1]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff fe81 	bl	8002de8 <DEC2BCD>
 80030e6:	4603      	mov	r3, r0
 80030e8:	461a      	mov	r2, r3
 80030ea:	4b3b      	ldr	r3, [pc, #236]	@ (80031d8 <RTC_TimeLapseInit+0x140>)
 80030ec:	705a      	strb	r2, [r3, #1]
        timestamp[2] = DEC2BCD(time.hour);
 80030ee:	4b37      	ldr	r3, [pc, #220]	@ (80031cc <RTC_TimeLapseInit+0x134>)
 80030f0:	789b      	ldrb	r3, [r3, #2]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff fe78 	bl	8002de8 <DEC2BCD>
 80030f8:	4603      	mov	r3, r0
 80030fa:	461a      	mov	r2, r3
 80030fc:	4b36      	ldr	r3, [pc, #216]	@ (80031d8 <RTC_TimeLapseInit+0x140>)
 80030fe:	709a      	strb	r2, [r3, #2]
        timestamp[3] = DEC2BCD(time.dayofweek);
 8003100:	4b32      	ldr	r3, [pc, #200]	@ (80031cc <RTC_TimeLapseInit+0x134>)
 8003102:	78db      	ldrb	r3, [r3, #3]
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff fe6f 	bl	8002de8 <DEC2BCD>
 800310a:	4603      	mov	r3, r0
 800310c:	461a      	mov	r2, r3
 800310e:	4b32      	ldr	r3, [pc, #200]	@ (80031d8 <RTC_TimeLapseInit+0x140>)
 8003110:	70da      	strb	r2, [r3, #3]
        timestamp[4] = DEC2BCD(time.day);
 8003112:	4b2e      	ldr	r3, [pc, #184]	@ (80031cc <RTC_TimeLapseInit+0x134>)
 8003114:	791b      	ldrb	r3, [r3, #4]
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff fe66 	bl	8002de8 <DEC2BCD>
 800311c:	4603      	mov	r3, r0
 800311e:	461a      	mov	r2, r3
 8003120:	4b2d      	ldr	r3, [pc, #180]	@ (80031d8 <RTC_TimeLapseInit+0x140>)
 8003122:	711a      	strb	r2, [r3, #4]
        timestamp[5] = DEC2BCD(time.month);
 8003124:	4b29      	ldr	r3, [pc, #164]	@ (80031cc <RTC_TimeLapseInit+0x134>)
 8003126:	795b      	ldrb	r3, [r3, #5]
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff fe5d 	bl	8002de8 <DEC2BCD>
 800312e:	4603      	mov	r3, r0
 8003130:	461a      	mov	r2, r3
 8003132:	4b29      	ldr	r3, [pc, #164]	@ (80031d8 <RTC_TimeLapseInit+0x140>)
 8003134:	715a      	strb	r2, [r3, #5]
        timestamp[6] = DEC2BCD(time.year);
 8003136:	4b25      	ldr	r3, [pc, #148]	@ (80031cc <RTC_TimeLapseInit+0x134>)
 8003138:	799b      	ldrb	r3, [r3, #6]
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff fe54 	bl	8002de8 <DEC2BCD>
 8003140:	4603      	mov	r3, r0
 8003142:	461a      	mov	r2, r3
 8003144:	4b24      	ldr	r3, [pc, #144]	@ (80031d8 <RTC_TimeLapseInit+0x140>)
 8003146:	719a      	strb	r2, [r3, #6]

        // Write to EEPROM with wear leveling
        EEPROM_WriteData(timestamp);
 8003148:	4823      	ldr	r0, [pc, #140]	@ (80031d8 <RTC_TimeLapseInit+0x140>)
 800314a:	f7ff fc81 	bl	8002a50 <EEPROM_WriteData>

        // Update last timelapse time
        last_timelapse_minute = time.minute;
 800314e:	4b1f      	ldr	r3, [pc, #124]	@ (80031cc <RTC_TimeLapseInit+0x134>)
 8003150:	785a      	ldrb	r2, [r3, #1]
 8003152:	4b20      	ldr	r3, [pc, #128]	@ (80031d4 <RTC_TimeLapseInit+0x13c>)
 8003154:	701a      	strb	r2, [r3, #0]
    }

    uint8_t read_buffer[7];
	  if (EEPROM_ReadData(read_buffer) == HAL_OK) {
 8003156:	f107 0320 	add.w	r3, r7, #32
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff fcb8 	bl	8002ad0 <EEPROM_ReadData>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d12d      	bne.n	80031c2 <RTC_TimeLapseInit+0x12a>

		  char timeStr[32];
		  sprintf(timeStr, "%02d:%02d:%02d %02d/%02d/%02d",
 8003166:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff fe62 	bl	8002e34 <BCD2DEC>
 8003170:	4680      	mov	r8, r0
 8003172:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff fe5c 	bl	8002e34 <BCD2DEC>
 800317c:	4681      	mov	r9, r0
 800317e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff fe56 	bl	8002e34 <BCD2DEC>
 8003188:	4604      	mov	r4, r0
 800318a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff fe50 	bl	8002e34 <BCD2DEC>
 8003194:	4605      	mov	r5, r0
 8003196:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff fe4a 	bl	8002e34 <BCD2DEC>
 80031a0:	4606      	mov	r6, r0
 80031a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff fe44 	bl	8002e34 <BCD2DEC>
 80031ac:	4603      	mov	r3, r0
 80031ae:	4638      	mov	r0, r7
 80031b0:	9303      	str	r3, [sp, #12]
 80031b2:	9602      	str	r6, [sp, #8]
 80031b4:	9501      	str	r5, [sp, #4]
 80031b6:	9400      	str	r4, [sp, #0]
 80031b8:	464b      	mov	r3, r9
 80031ba:	4642      	mov	r2, r8
 80031bc:	4907      	ldr	r1, [pc, #28]	@ (80031dc <RTC_TimeLapseInit+0x144>)
 80031be:	f007 fd9d 	bl	800acfc <siprintf>
				  BCD2DEC(read_buffer[4]),  // Day
				  BCD2DEC(read_buffer[5]),  // Month
				  BCD2DEC(read_buffer[6])); // Year
	  }

}
 80031c2:	bf00      	nop
 80031c4:	372c      	adds	r7, #44	@ 0x2c
 80031c6:	46bd      	mov	sp, r7
 80031c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80031cc:	20000750 	.word	0x20000750
 80031d0:	cccccccd 	.word	0xcccccccd
 80031d4:	2000074a 	.word	0x2000074a
 80031d8:	20000758 	.word	0x20000758
 80031dc:	0800ce00 	.word	0x0800ce00

080031e0 <Push_ButtonHandler>:
extern const uint16_t DIP_SWITCH_PINS[];

const uint16_t BUTTON_PINS[] = {PUSH_BUTTON_01_Pin, PUSH_BUTTON_02_Pin, PUSH_BUTTON_03_Pin, PUSH_BUTTON_04_Pin};

void Push_ButtonHandler(uint16_t GPIO_Pin)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	4603      	mov	r3, r0
 80031e8:	80fb      	strh	r3, [r7, #6]
    currentTime = HAL_GetTick();
 80031ea:	f002 f88b 	bl	8005304 <HAL_GetTick>
 80031ee:	4603      	mov	r3, r0
 80031f0:	4a14      	ldr	r2, [pc, #80]	@ (8003244 <Push_ButtonHandler+0x64>)
 80031f2:	6013      	str	r3, [r2, #0]

    for(int j = 0; j < 4; j++) {
 80031f4:	2300      	movs	r3, #0
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	e01c      	b.n	8003234 <Push_ButtonHandler+0x54>
        if((GPIO_Pin == BUTTON_PINS[j]) && (currentTime - previousTime > 100)) {
 80031fa:	4a13      	ldr	r2, [pc, #76]	@ (8003248 <Push_ButtonHandler+0x68>)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003202:	88fa      	ldrh	r2, [r7, #6]
 8003204:	429a      	cmp	r2, r3
 8003206:	d112      	bne.n	800322e <Push_ButtonHandler+0x4e>
 8003208:	4b0e      	ldr	r3, [pc, #56]	@ (8003244 <Push_ButtonHandler+0x64>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	4b0f      	ldr	r3, [pc, #60]	@ (800324c <Push_ButtonHandler+0x6c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b64      	cmp	r3, #100	@ 0x64
 8003214:	d90b      	bls.n	800322e <Push_ButtonHandler+0x4e>
            LED_Toggle(j+1);  // Keep your existing LED toggle
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	b2db      	uxtb	r3, r3
 800321a:	3301      	adds	r3, #1
 800321c:	b2db      	uxtb	r3, r3
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff fca8 	bl	8002b74 <LED_Toggle>
            previousTime = currentTime;
 8003224:	4b07      	ldr	r3, [pc, #28]	@ (8003244 <Push_ButtonHandler+0x64>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a08      	ldr	r2, [pc, #32]	@ (800324c <Push_ButtonHandler+0x6c>)
 800322a:	6013      	str	r3, [r2, #0]
            break;
 800322c:	e006      	b.n	800323c <Push_ButtonHandler+0x5c>
    for(int j = 0; j < 4; j++) {
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	3301      	adds	r3, #1
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2b03      	cmp	r3, #3
 8003238:	dddf      	ble.n	80031fa <Push_ButtonHandler+0x1a>
        }
    }
}
 800323a:	bf00      	nop
 800323c:	bf00      	nop
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	20000760 	.word	0x20000760
 8003248:	0801132c 	.word	0x0801132c
 800324c:	20000764 	.word	0x20000764

08003250 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003254:	4b17      	ldr	r3, [pc, #92]	@ (80032b4 <MX_CAN1_Init+0x64>)
 8003256:	4a18      	ldr	r2, [pc, #96]	@ (80032b8 <MX_CAN1_Init+0x68>)
 8003258:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 800325a:	4b16      	ldr	r3, [pc, #88]	@ (80032b4 <MX_CAN1_Init+0x64>)
 800325c:	2209      	movs	r2, #9
 800325e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003260:	4b14      	ldr	r3, [pc, #80]	@ (80032b4 <MX_CAN1_Init+0x64>)
 8003262:	2200      	movs	r2, #0
 8003264:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003266:	4b13      	ldr	r3, [pc, #76]	@ (80032b4 <MX_CAN1_Init+0x64>)
 8003268:	2200      	movs	r2, #0
 800326a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800326c:	4b11      	ldr	r3, [pc, #68]	@ (80032b4 <MX_CAN1_Init+0x64>)
 800326e:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8003272:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8003274:	4b0f      	ldr	r3, [pc, #60]	@ (80032b4 <MX_CAN1_Init+0x64>)
 8003276:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800327a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800327c:	4b0d      	ldr	r3, [pc, #52]	@ (80032b4 <MX_CAN1_Init+0x64>)
 800327e:	2200      	movs	r2, #0
 8003280:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003282:	4b0c      	ldr	r3, [pc, #48]	@ (80032b4 <MX_CAN1_Init+0x64>)
 8003284:	2200      	movs	r2, #0
 8003286:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003288:	4b0a      	ldr	r3, [pc, #40]	@ (80032b4 <MX_CAN1_Init+0x64>)
 800328a:	2200      	movs	r2, #0
 800328c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800328e:	4b09      	ldr	r3, [pc, #36]	@ (80032b4 <MX_CAN1_Init+0x64>)
 8003290:	2200      	movs	r2, #0
 8003292:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003294:	4b07      	ldr	r3, [pc, #28]	@ (80032b4 <MX_CAN1_Init+0x64>)
 8003296:	2200      	movs	r2, #0
 8003298:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800329a:	4b06      	ldr	r3, [pc, #24]	@ (80032b4 <MX_CAN1_Init+0x64>)
 800329c:	2200      	movs	r2, #0
 800329e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80032a0:	4804      	ldr	r0, [pc, #16]	@ (80032b4 <MX_CAN1_Init+0x64>)
 80032a2:	f002 f85f 	bl	8005364 <HAL_CAN_Init>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80032ac:	f001 fb22 	bl	80048f4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80032b0:	bf00      	nop
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	20000768 	.word	0x20000768
 80032b8:	40006400 	.word	0x40006400

080032bc <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80032c0:	4b16      	ldr	r3, [pc, #88]	@ (800331c <MX_CAN2_Init+0x60>)
 80032c2:	4a17      	ldr	r2, [pc, #92]	@ (8003320 <MX_CAN2_Init+0x64>)
 80032c4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 80032c6:	4b15      	ldr	r3, [pc, #84]	@ (800331c <MX_CAN2_Init+0x60>)
 80032c8:	2210      	movs	r2, #16
 80032ca:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80032cc:	4b13      	ldr	r3, [pc, #76]	@ (800331c <MX_CAN2_Init+0x60>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80032d2:	4b12      	ldr	r3, [pc, #72]	@ (800331c <MX_CAN2_Init+0x60>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80032d8:	4b10      	ldr	r3, [pc, #64]	@ (800331c <MX_CAN2_Init+0x60>)
 80032da:	2200      	movs	r2, #0
 80032dc:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80032de:	4b0f      	ldr	r3, [pc, #60]	@ (800331c <MX_CAN2_Init+0x60>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80032e4:	4b0d      	ldr	r3, [pc, #52]	@ (800331c <MX_CAN2_Init+0x60>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80032ea:	4b0c      	ldr	r3, [pc, #48]	@ (800331c <MX_CAN2_Init+0x60>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80032f0:	4b0a      	ldr	r3, [pc, #40]	@ (800331c <MX_CAN2_Init+0x60>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80032f6:	4b09      	ldr	r3, [pc, #36]	@ (800331c <MX_CAN2_Init+0x60>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80032fc:	4b07      	ldr	r3, [pc, #28]	@ (800331c <MX_CAN2_Init+0x60>)
 80032fe:	2200      	movs	r2, #0
 8003300:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8003302:	4b06      	ldr	r3, [pc, #24]	@ (800331c <MX_CAN2_Init+0x60>)
 8003304:	2200      	movs	r2, #0
 8003306:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8003308:	4804      	ldr	r0, [pc, #16]	@ (800331c <MX_CAN2_Init+0x60>)
 800330a:	f002 f82b 	bl	8005364 <HAL_CAN_Init>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8003314:	f001 faee 	bl	80048f4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8003318:	bf00      	nop
 800331a:	bd80      	pop	{r7, pc}
 800331c:	20000790 	.word	0x20000790
 8003320:	40006800 	.word	0x40006800

08003324 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b08c      	sub	sp, #48	@ 0x30
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800332c:	f107 031c 	add.w	r3, r7, #28
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	605a      	str	r2, [r3, #4]
 8003336:	609a      	str	r2, [r3, #8]
 8003338:	60da      	str	r2, [r3, #12]
 800333a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a4a      	ldr	r2, [pc, #296]	@ (800346c <HAL_CAN_MspInit+0x148>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d145      	bne.n	80033d2 <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003346:	4b4a      	ldr	r3, [pc, #296]	@ (8003470 <HAL_CAN_MspInit+0x14c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	3301      	adds	r3, #1
 800334c:	4a48      	ldr	r2, [pc, #288]	@ (8003470 <HAL_CAN_MspInit+0x14c>)
 800334e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003350:	4b47      	ldr	r3, [pc, #284]	@ (8003470 <HAL_CAN_MspInit+0x14c>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d10d      	bne.n	8003374 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003358:	2300      	movs	r3, #0
 800335a:	61bb      	str	r3, [r7, #24]
 800335c:	4b45      	ldr	r3, [pc, #276]	@ (8003474 <HAL_CAN_MspInit+0x150>)
 800335e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003360:	4a44      	ldr	r2, [pc, #272]	@ (8003474 <HAL_CAN_MspInit+0x150>)
 8003362:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003366:	6413      	str	r3, [r2, #64]	@ 0x40
 8003368:	4b42      	ldr	r3, [pc, #264]	@ (8003474 <HAL_CAN_MspInit+0x150>)
 800336a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003370:	61bb      	str	r3, [r7, #24]
 8003372:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]
 8003378:	4b3e      	ldr	r3, [pc, #248]	@ (8003474 <HAL_CAN_MspInit+0x150>)
 800337a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337c:	4a3d      	ldr	r2, [pc, #244]	@ (8003474 <HAL_CAN_MspInit+0x150>)
 800337e:	f043 0308 	orr.w	r3, r3, #8
 8003382:	6313      	str	r3, [r2, #48]	@ 0x30
 8003384:	4b3b      	ldr	r3, [pc, #236]	@ (8003474 <HAL_CAN_MspInit+0x150>)
 8003386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	617b      	str	r3, [r7, #20]
 800338e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003390:	2303      	movs	r3, #3
 8003392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003394:	2302      	movs	r3, #2
 8003396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003398:	2300      	movs	r3, #0
 800339a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800339c:	2303      	movs	r3, #3
 800339e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80033a0:	2309      	movs	r3, #9
 80033a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033a4:	f107 031c 	add.w	r3, r7, #28
 80033a8:	4619      	mov	r1, r3
 80033aa:	4833      	ldr	r0, [pc, #204]	@ (8003478 <HAL_CAN_MspInit+0x154>)
 80033ac:	f002 fcb2 	bl	8005d14 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80033b0:	2200      	movs	r2, #0
 80033b2:	2100      	movs	r1, #0
 80033b4:	2014      	movs	r0, #20
 80033b6:	f002 fbe4 	bl	8005b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80033ba:	2014      	movs	r0, #20
 80033bc:	f002 fbfd 	bl	8005bba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80033c0:	2200      	movs	r2, #0
 80033c2:	2100      	movs	r1, #0
 80033c4:	2015      	movs	r0, #21
 80033c6:	f002 fbdc 	bl	8005b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80033ca:	2015      	movs	r0, #21
 80033cc:	f002 fbf5 	bl	8005bba <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80033d0:	e048      	b.n	8003464 <HAL_CAN_MspInit+0x140>
  else if(canHandle->Instance==CAN2)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a29      	ldr	r2, [pc, #164]	@ (800347c <HAL_CAN_MspInit+0x158>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d143      	bne.n	8003464 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80033dc:	2300      	movs	r3, #0
 80033de:	613b      	str	r3, [r7, #16]
 80033e0:	4b24      	ldr	r3, [pc, #144]	@ (8003474 <HAL_CAN_MspInit+0x150>)
 80033e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e4:	4a23      	ldr	r2, [pc, #140]	@ (8003474 <HAL_CAN_MspInit+0x150>)
 80033e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80033ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80033ec:	4b21      	ldr	r3, [pc, #132]	@ (8003474 <HAL_CAN_MspInit+0x150>)
 80033ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033f4:	613b      	str	r3, [r7, #16]
 80033f6:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80033f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003470 <HAL_CAN_MspInit+0x14c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	3301      	adds	r3, #1
 80033fe:	4a1c      	ldr	r2, [pc, #112]	@ (8003470 <HAL_CAN_MspInit+0x14c>)
 8003400:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003402:	4b1b      	ldr	r3, [pc, #108]	@ (8003470 <HAL_CAN_MspInit+0x14c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d10d      	bne.n	8003426 <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800340a:	2300      	movs	r3, #0
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	4b19      	ldr	r3, [pc, #100]	@ (8003474 <HAL_CAN_MspInit+0x150>)
 8003410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003412:	4a18      	ldr	r2, [pc, #96]	@ (8003474 <HAL_CAN_MspInit+0x150>)
 8003414:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003418:	6413      	str	r3, [r2, #64]	@ 0x40
 800341a:	4b16      	ldr	r3, [pc, #88]	@ (8003474 <HAL_CAN_MspInit+0x150>)
 800341c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003426:	2300      	movs	r3, #0
 8003428:	60bb      	str	r3, [r7, #8]
 800342a:	4b12      	ldr	r3, [pc, #72]	@ (8003474 <HAL_CAN_MspInit+0x150>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342e:	4a11      	ldr	r2, [pc, #68]	@ (8003474 <HAL_CAN_MspInit+0x150>)
 8003430:	f043 0302 	orr.w	r3, r3, #2
 8003434:	6313      	str	r3, [r2, #48]	@ 0x30
 8003436:	4b0f      	ldr	r3, [pc, #60]	@ (8003474 <HAL_CAN_MspInit+0x150>)
 8003438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	60bb      	str	r3, [r7, #8]
 8003440:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003442:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003448:	2302      	movs	r3, #2
 800344a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344c:	2300      	movs	r3, #0
 800344e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003450:	2303      	movs	r3, #3
 8003452:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8003454:	2309      	movs	r3, #9
 8003456:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003458:	f107 031c 	add.w	r3, r7, #28
 800345c:	4619      	mov	r1, r3
 800345e:	4808      	ldr	r0, [pc, #32]	@ (8003480 <HAL_CAN_MspInit+0x15c>)
 8003460:	f002 fc58 	bl	8005d14 <HAL_GPIO_Init>
}
 8003464:	bf00      	nop
 8003466:	3730      	adds	r7, #48	@ 0x30
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40006400 	.word	0x40006400
 8003470:	200007b8 	.word	0x200007b8
 8003474:	40023800 	.word	0x40023800
 8003478:	40020c00 	.word	0x40020c00
 800347c:	40006800 	.word	0x40006800
 8003480:	40020400 	.word	0x40020400

08003484 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8003488:	2200      	movs	r2, #0
 800348a:	2108      	movs	r1, #8
 800348c:	4803      	ldr	r0, [pc, #12]	@ (800349c <SELECT+0x18>)
 800348e:	f002 fded 	bl	800606c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003492:	2001      	movs	r0, #1
 8003494:	f001 ff42 	bl	800531c <HAL_Delay>
}
 8003498:	bf00      	nop
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40020c00 	.word	0x40020c00

080034a0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80034a4:	2201      	movs	r2, #1
 80034a6:	2108      	movs	r1, #8
 80034a8:	4803      	ldr	r0, [pc, #12]	@ (80034b8 <DESELECT+0x18>)
 80034aa:	f002 fddf 	bl	800606c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80034ae:	2001      	movs	r0, #1
 80034b0:	f001 ff34 	bl	800531c <HAL_Delay>
}
 80034b4:	bf00      	nop
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40020c00 	.word	0x40020c00

080034bc <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80034c6:	bf00      	nop
 80034c8:	4b08      	ldr	r3, [pc, #32]	@ (80034ec <SPI_TxByte+0x30>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d1f8      	bne.n	80034c8 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80034d6:	1df9      	adds	r1, r7, #7
 80034d8:	2364      	movs	r3, #100	@ 0x64
 80034da:	2201      	movs	r2, #1
 80034dc:	4803      	ldr	r0, [pc, #12]	@ (80034ec <SPI_TxByte+0x30>)
 80034de:	f005 f812 	bl	8008506 <HAL_SPI_Transmit>
}
 80034e2:	bf00      	nop
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	20000950 	.word	0x20000950

080034f0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80034fc:	bf00      	nop
 80034fe:	4b08      	ldr	r3, [pc, #32]	@ (8003520 <SPI_TxBuffer+0x30>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b02      	cmp	r3, #2
 800350a:	d1f8      	bne.n	80034fe <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800350c:	887a      	ldrh	r2, [r7, #2]
 800350e:	2364      	movs	r3, #100	@ 0x64
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	4803      	ldr	r0, [pc, #12]	@ (8003520 <SPI_TxBuffer+0x30>)
 8003514:	f004 fff7 	bl	8008506 <HAL_SPI_Transmit>
}
 8003518:	bf00      	nop
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	20000950 	.word	0x20000950

08003524 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800352a:	23ff      	movs	r3, #255	@ 0xff
 800352c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800352e:	bf00      	nop
 8003530:	4b09      	ldr	r3, [pc, #36]	@ (8003558 <SPI_RxByte+0x34>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b02      	cmp	r3, #2
 800353c:	d1f8      	bne.n	8003530 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800353e:	1dba      	adds	r2, r7, #6
 8003540:	1df9      	adds	r1, r7, #7
 8003542:	2364      	movs	r3, #100	@ 0x64
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	2301      	movs	r3, #1
 8003548:	4803      	ldr	r0, [pc, #12]	@ (8003558 <SPI_RxByte+0x34>)
 800354a:	f005 f920 	bl	800878e <HAL_SPI_TransmitReceive>

	return data;
 800354e:	79bb      	ldrb	r3, [r7, #6]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	20000950 	.word	0x20000950

0800355c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8003564:	f7ff ffde 	bl	8003524 <SPI_RxByte>
 8003568:	4603      	mov	r3, r0
 800356a:	461a      	mov	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	701a      	strb	r2, [r3, #0]
}
 8003570:	bf00      	nop
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800357e:	4b0a      	ldr	r3, [pc, #40]	@ (80035a8 <SD_ReadyWait+0x30>)
 8003580:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003584:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8003586:	f7ff ffcd 	bl	8003524 <SPI_RxByte>
 800358a:	4603      	mov	r3, r0
 800358c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800358e:	79fb      	ldrb	r3, [r7, #7]
 8003590:	2bff      	cmp	r3, #255	@ 0xff
 8003592:	d004      	beq.n	800359e <SD_ReadyWait+0x26>
 8003594:	4b04      	ldr	r3, [pc, #16]	@ (80035a8 <SD_ReadyWait+0x30>)
 8003596:	881b      	ldrh	r3, [r3, #0]
 8003598:	b29b      	uxth	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f3      	bne.n	8003586 <SD_ReadyWait+0xe>

	return res;
 800359e:	79fb      	ldrb	r3, [r7, #7]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	20000a04 	.word	0x20000a04

080035ac <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80035b2:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80035b6:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80035b8:	f7ff ff72 	bl	80034a0 <DESELECT>
	for(int i = 0; i < 10; i++)
 80035bc:	2300      	movs	r3, #0
 80035be:	60bb      	str	r3, [r7, #8]
 80035c0:	e005      	b.n	80035ce <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80035c2:	20ff      	movs	r0, #255	@ 0xff
 80035c4:	f7ff ff7a 	bl	80034bc <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	3301      	adds	r3, #1
 80035cc:	60bb      	str	r3, [r7, #8]
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2b09      	cmp	r3, #9
 80035d2:	ddf6      	ble.n	80035c2 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80035d4:	f7ff ff56 	bl	8003484 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80035d8:	2340      	movs	r3, #64	@ 0x40
 80035da:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80035dc:	2300      	movs	r3, #0
 80035de:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80035e0:	2300      	movs	r3, #0
 80035e2:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80035e4:	2300      	movs	r3, #0
 80035e6:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80035e8:	2300      	movs	r3, #0
 80035ea:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80035ec:	2395      	movs	r3, #149	@ 0x95
 80035ee:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80035f0:	463b      	mov	r3, r7
 80035f2:	2106      	movs	r1, #6
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff ff7b 	bl	80034f0 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80035fa:	e002      	b.n	8003602 <SD_PowerOn+0x56>
	{
		cnt--;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	3b01      	subs	r3, #1
 8003600:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8003602:	f7ff ff8f 	bl	8003524 <SPI_RxByte>
 8003606:	4603      	mov	r3, r0
 8003608:	2b01      	cmp	r3, #1
 800360a:	d002      	beq.n	8003612 <SD_PowerOn+0x66>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f4      	bne.n	80035fc <SD_PowerOn+0x50>
	}

	DESELECT();
 8003612:	f7ff ff45 	bl	80034a0 <DESELECT>
	SPI_TxByte(0XFF);
 8003616:	20ff      	movs	r0, #255	@ 0xff
 8003618:	f7ff ff50 	bl	80034bc <SPI_TxByte>

	PowerFlag = 1;
 800361c:	4b03      	ldr	r3, [pc, #12]	@ (800362c <SD_PowerOn+0x80>)
 800361e:	2201      	movs	r2, #1
 8003620:	701a      	strb	r2, [r3, #0]
}
 8003622:	bf00      	nop
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	200007bd 	.word	0x200007bd

08003630 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8003634:	4b03      	ldr	r3, [pc, #12]	@ (8003644 <SD_PowerOff+0x14>)
 8003636:	2200      	movs	r2, #0
 8003638:	701a      	strb	r2, [r3, #0]
}
 800363a:	bf00      	nop
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	200007bd 	.word	0x200007bd

08003648 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800364c:	4b03      	ldr	r3, [pc, #12]	@ (800365c <SD_CheckPower+0x14>)
 800364e:	781b      	ldrb	r3, [r3, #0]
}
 8003650:	4618      	mov	r0, r3
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	200007bd 	.word	0x200007bd

08003660 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800366a:	4b14      	ldr	r3, [pc, #80]	@ (80036bc <SD_RxDataBlock+0x5c>)
 800366c:	22c8      	movs	r2, #200	@ 0xc8
 800366e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8003670:	f7ff ff58 	bl	8003524 <SPI_RxByte>
 8003674:	4603      	mov	r3, r0
 8003676:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8003678:	7bfb      	ldrb	r3, [r7, #15]
 800367a:	2bff      	cmp	r3, #255	@ 0xff
 800367c:	d104      	bne.n	8003688 <SD_RxDataBlock+0x28>
 800367e:	4b0f      	ldr	r3, [pc, #60]	@ (80036bc <SD_RxDataBlock+0x5c>)
 8003680:	881b      	ldrh	r3, [r3, #0]
 8003682:	b29b      	uxth	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1f3      	bne.n	8003670 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8003688:	7bfb      	ldrb	r3, [r7, #15]
 800368a:	2bfe      	cmp	r3, #254	@ 0xfe
 800368c:	d001      	beq.n	8003692 <SD_RxDataBlock+0x32>
 800368e:	2300      	movs	r3, #0
 8003690:	e00f      	b.n	80036b2 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	607a      	str	r2, [r7, #4]
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff ff5f 	bl	800355c <SPI_RxBytePtr>
	} while(len--);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	1e5a      	subs	r2, r3, #1
 80036a2:	603a      	str	r2, [r7, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1f4      	bne.n	8003692 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 80036a8:	f7ff ff3c 	bl	8003524 <SPI_RxByte>
	SPI_RxByte();
 80036ac:	f7ff ff3a 	bl	8003524 <SPI_RxByte>

	return TRUE;
 80036b0:	2301      	movs	r3, #1
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	20000a02 	.word	0x20000a02

080036c0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80036cc:	2300      	movs	r3, #0
 80036ce:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80036d0:	f7ff ff52 	bl	8003578 <SD_ReadyWait>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2bff      	cmp	r3, #255	@ 0xff
 80036d8:	d001      	beq.n	80036de <SD_TxDataBlock+0x1e>
 80036da:	2300      	movs	r3, #0
 80036dc:	e02f      	b.n	800373e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80036de:	78fb      	ldrb	r3, [r7, #3]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff feeb 	bl	80034bc <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80036e6:	78fb      	ldrb	r3, [r7, #3]
 80036e8:	2bfd      	cmp	r3, #253	@ 0xfd
 80036ea:	d020      	beq.n	800372e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80036ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f7ff fefd 	bl	80034f0 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80036f6:	f7ff ff15 	bl	8003524 <SPI_RxByte>
		SPI_RxByte();
 80036fa:	f7ff ff13 	bl	8003524 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80036fe:	e00b      	b.n	8003718 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8003700:	f7ff ff10 	bl	8003524 <SPI_RxByte>
 8003704:	4603      	mov	r3, r0
 8003706:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8003708:	7bfb      	ldrb	r3, [r7, #15]
 800370a:	f003 031f 	and.w	r3, r3, #31
 800370e:	2b05      	cmp	r3, #5
 8003710:	d006      	beq.n	8003720 <SD_TxDataBlock+0x60>
			i++;
 8003712:	7bbb      	ldrb	r3, [r7, #14]
 8003714:	3301      	adds	r3, #1
 8003716:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8003718:	7bbb      	ldrb	r3, [r7, #14]
 800371a:	2b40      	cmp	r3, #64	@ 0x40
 800371c:	d9f0      	bls.n	8003700 <SD_TxDataBlock+0x40>
 800371e:	e000      	b.n	8003722 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8003720:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8003722:	bf00      	nop
 8003724:	f7ff fefe 	bl	8003524 <SPI_RxByte>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0fa      	beq.n	8003724 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800372e:	7bfb      	ldrb	r3, [r7, #15]
 8003730:	f003 031f 	and.w	r3, r3, #31
 8003734:	2b05      	cmp	r3, #5
 8003736:	d101      	bne.n	800373c <SD_TxDataBlock+0x7c>
 8003738:	2301      	movs	r3, #1
 800373a:	e000      	b.n	800373e <SD_TxDataBlock+0x7e>

	return FALSE;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b084      	sub	sp, #16
 800374a:	af00      	add	r7, sp, #0
 800374c:	4603      	mov	r3, r0
 800374e:	6039      	str	r1, [r7, #0]
 8003750:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8003752:	f7ff ff11 	bl	8003578 <SD_ReadyWait>
 8003756:	4603      	mov	r3, r0
 8003758:	2bff      	cmp	r3, #255	@ 0xff
 800375a:	d001      	beq.n	8003760 <SD_SendCmd+0x1a>
 800375c:	23ff      	movs	r3, #255	@ 0xff
 800375e:	e042      	b.n	80037e6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8003760:	79fb      	ldrb	r3, [r7, #7]
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff feaa 	bl	80034bc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	0e1b      	lsrs	r3, r3, #24
 800376c:	b2db      	uxtb	r3, r3
 800376e:	4618      	mov	r0, r3
 8003770:	f7ff fea4 	bl	80034bc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	0c1b      	lsrs	r3, r3, #16
 8003778:	b2db      	uxtb	r3, r3
 800377a:	4618      	mov	r0, r3
 800377c:	f7ff fe9e 	bl	80034bc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	0a1b      	lsrs	r3, r3, #8
 8003784:	b2db      	uxtb	r3, r3
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff fe98 	bl	80034bc <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	b2db      	uxtb	r3, r3
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff fe93 	bl	80034bc <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8003796:	79fb      	ldrb	r3, [r7, #7]
 8003798:	2b40      	cmp	r3, #64	@ 0x40
 800379a:	d102      	bne.n	80037a2 <SD_SendCmd+0x5c>
 800379c:	2395      	movs	r3, #149	@ 0x95
 800379e:	73fb      	strb	r3, [r7, #15]
 80037a0:	e007      	b.n	80037b2 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80037a2:	79fb      	ldrb	r3, [r7, #7]
 80037a4:	2b48      	cmp	r3, #72	@ 0x48
 80037a6:	d102      	bne.n	80037ae <SD_SendCmd+0x68>
 80037a8:	2387      	movs	r3, #135	@ 0x87
 80037aa:	73fb      	strb	r3, [r7, #15]
 80037ac:	e001      	b.n	80037b2 <SD_SendCmd+0x6c>
	else crc = 1;
 80037ae:	2301      	movs	r3, #1
 80037b0:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80037b2:	7bfb      	ldrb	r3, [r7, #15]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7ff fe81 	bl	80034bc <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80037ba:	79fb      	ldrb	r3, [r7, #7]
 80037bc:	2b4c      	cmp	r3, #76	@ 0x4c
 80037be:	d101      	bne.n	80037c4 <SD_SendCmd+0x7e>
 80037c0:	f7ff feb0 	bl	8003524 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80037c4:	230a      	movs	r3, #10
 80037c6:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80037c8:	f7ff feac 	bl	8003524 <SPI_RxByte>
 80037cc:	4603      	mov	r3, r0
 80037ce:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80037d0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	da05      	bge.n	80037e4 <SD_SendCmd+0x9e>
 80037d8:	7bbb      	ldrb	r3, [r7, #14]
 80037da:	3b01      	subs	r3, #1
 80037dc:	73bb      	strb	r3, [r7, #14]
 80037de:	7bbb      	ldrb	r3, [r7, #14]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1f1      	bne.n	80037c8 <SD_SendCmd+0x82>

	return res;
 80037e4:	7b7b      	ldrb	r3, [r7, #13]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
	...

080037f0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80037f0:	b590      	push	{r4, r7, lr}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	4603      	mov	r3, r0
 80037f8:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80037fa:	79fb      	ldrb	r3, [r7, #7]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <SD_disk_initialize+0x14>
 8003800:	2301      	movs	r3, #1
 8003802:	e0d6      	b.n	80039b2 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8003804:	4b6d      	ldr	r3, [pc, #436]	@ (80039bc <SD_disk_initialize+0x1cc>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <SD_disk_initialize+0x2a>
 8003812:	4b6a      	ldr	r3, [pc, #424]	@ (80039bc <SD_disk_initialize+0x1cc>)
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	b2db      	uxtb	r3, r3
 8003818:	e0cb      	b.n	80039b2 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800381a:	f7ff fec7 	bl	80035ac <SD_PowerOn>

	/* slave select */
	SELECT();
 800381e:	f7ff fe31 	bl	8003484 <SELECT>

	/* check disk type */
	type = 0;
 8003822:	2300      	movs	r3, #0
 8003824:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8003826:	2100      	movs	r1, #0
 8003828:	2040      	movs	r0, #64	@ 0x40
 800382a:	f7ff ff8c 	bl	8003746 <SD_SendCmd>
 800382e:	4603      	mov	r3, r0
 8003830:	2b01      	cmp	r3, #1
 8003832:	f040 80a6 	bne.w	8003982 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8003836:	4b62      	ldr	r3, [pc, #392]	@ (80039c0 <SD_disk_initialize+0x1d0>)
 8003838:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800383c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800383e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8003842:	2048      	movs	r0, #72	@ 0x48
 8003844:	f7ff ff7f 	bl	8003746 <SD_SendCmd>
 8003848:	4603      	mov	r3, r0
 800384a:	2b01      	cmp	r3, #1
 800384c:	d158      	bne.n	8003900 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800384e:	2300      	movs	r3, #0
 8003850:	73fb      	strb	r3, [r7, #15]
 8003852:	e00c      	b.n	800386e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8003854:	7bfc      	ldrb	r4, [r7, #15]
 8003856:	f7ff fe65 	bl	8003524 <SPI_RxByte>
 800385a:	4603      	mov	r3, r0
 800385c:	461a      	mov	r2, r3
 800385e:	f104 0310 	add.w	r3, r4, #16
 8003862:	443b      	add	r3, r7
 8003864:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8003868:	7bfb      	ldrb	r3, [r7, #15]
 800386a:	3301      	adds	r3, #1
 800386c:	73fb      	strb	r3, [r7, #15]
 800386e:	7bfb      	ldrb	r3, [r7, #15]
 8003870:	2b03      	cmp	r3, #3
 8003872:	d9ef      	bls.n	8003854 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8003874:	7abb      	ldrb	r3, [r7, #10]
 8003876:	2b01      	cmp	r3, #1
 8003878:	f040 8083 	bne.w	8003982 <SD_disk_initialize+0x192>
 800387c:	7afb      	ldrb	r3, [r7, #11]
 800387e:	2baa      	cmp	r3, #170	@ 0xaa
 8003880:	d17f      	bne.n	8003982 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8003882:	2100      	movs	r1, #0
 8003884:	2077      	movs	r0, #119	@ 0x77
 8003886:	f7ff ff5e 	bl	8003746 <SD_SendCmd>
 800388a:	4603      	mov	r3, r0
 800388c:	2b01      	cmp	r3, #1
 800388e:	d807      	bhi.n	80038a0 <SD_disk_initialize+0xb0>
 8003890:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003894:	2069      	movs	r0, #105	@ 0x69
 8003896:	f7ff ff56 	bl	8003746 <SD_SendCmd>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d005      	beq.n	80038ac <SD_disk_initialize+0xbc>
				} while (Timer1);
 80038a0:	4b47      	ldr	r3, [pc, #284]	@ (80039c0 <SD_disk_initialize+0x1d0>)
 80038a2:	881b      	ldrh	r3, [r3, #0]
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1eb      	bne.n	8003882 <SD_disk_initialize+0x92>
 80038aa:	e000      	b.n	80038ae <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80038ac:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80038ae:	4b44      	ldr	r3, [pc, #272]	@ (80039c0 <SD_disk_initialize+0x1d0>)
 80038b0:	881b      	ldrh	r3, [r3, #0]
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d064      	beq.n	8003982 <SD_disk_initialize+0x192>
 80038b8:	2100      	movs	r1, #0
 80038ba:	207a      	movs	r0, #122	@ 0x7a
 80038bc:	f7ff ff43 	bl	8003746 <SD_SendCmd>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d15d      	bne.n	8003982 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80038c6:	2300      	movs	r3, #0
 80038c8:	73fb      	strb	r3, [r7, #15]
 80038ca:	e00c      	b.n	80038e6 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 80038cc:	7bfc      	ldrb	r4, [r7, #15]
 80038ce:	f7ff fe29 	bl	8003524 <SPI_RxByte>
 80038d2:	4603      	mov	r3, r0
 80038d4:	461a      	mov	r2, r3
 80038d6:	f104 0310 	add.w	r3, r4, #16
 80038da:	443b      	add	r3, r7
 80038dc:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
 80038e2:	3301      	adds	r3, #1
 80038e4:	73fb      	strb	r3, [r7, #15]
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
 80038e8:	2b03      	cmp	r3, #3
 80038ea:	d9ef      	bls.n	80038cc <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80038ec:	7a3b      	ldrb	r3, [r7, #8]
 80038ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <SD_disk_initialize+0x10a>
 80038f6:	230c      	movs	r3, #12
 80038f8:	e000      	b.n	80038fc <SD_disk_initialize+0x10c>
 80038fa:	2304      	movs	r3, #4
 80038fc:	73bb      	strb	r3, [r7, #14]
 80038fe:	e040      	b.n	8003982 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8003900:	2100      	movs	r1, #0
 8003902:	2077      	movs	r0, #119	@ 0x77
 8003904:	f7ff ff1f 	bl	8003746 <SD_SendCmd>
 8003908:	4603      	mov	r3, r0
 800390a:	2b01      	cmp	r3, #1
 800390c:	d808      	bhi.n	8003920 <SD_disk_initialize+0x130>
 800390e:	2100      	movs	r1, #0
 8003910:	2069      	movs	r0, #105	@ 0x69
 8003912:	f7ff ff18 	bl	8003746 <SD_SendCmd>
 8003916:	4603      	mov	r3, r0
 8003918:	2b01      	cmp	r3, #1
 800391a:	d801      	bhi.n	8003920 <SD_disk_initialize+0x130>
 800391c:	2302      	movs	r3, #2
 800391e:	e000      	b.n	8003922 <SD_disk_initialize+0x132>
 8003920:	2301      	movs	r3, #1
 8003922:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8003924:	7bbb      	ldrb	r3, [r7, #14]
 8003926:	2b02      	cmp	r3, #2
 8003928:	d10e      	bne.n	8003948 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800392a:	2100      	movs	r1, #0
 800392c:	2077      	movs	r0, #119	@ 0x77
 800392e:	f7ff ff0a 	bl	8003746 <SD_SendCmd>
 8003932:	4603      	mov	r3, r0
 8003934:	2b01      	cmp	r3, #1
 8003936:	d80e      	bhi.n	8003956 <SD_disk_initialize+0x166>
 8003938:	2100      	movs	r1, #0
 800393a:	2069      	movs	r0, #105	@ 0x69
 800393c:	f7ff ff03 	bl	8003746 <SD_SendCmd>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d107      	bne.n	8003956 <SD_disk_initialize+0x166>
 8003946:	e00d      	b.n	8003964 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8003948:	2100      	movs	r1, #0
 800394a:	2041      	movs	r0, #65	@ 0x41
 800394c:	f7ff fefb 	bl	8003746 <SD_SendCmd>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d005      	beq.n	8003962 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8003956:	4b1a      	ldr	r3, [pc, #104]	@ (80039c0 <SD_disk_initialize+0x1d0>)
 8003958:	881b      	ldrh	r3, [r3, #0]
 800395a:	b29b      	uxth	r3, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1e1      	bne.n	8003924 <SD_disk_initialize+0x134>
 8003960:	e000      	b.n	8003964 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8003962:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8003964:	4b16      	ldr	r3, [pc, #88]	@ (80039c0 <SD_disk_initialize+0x1d0>)
 8003966:	881b      	ldrh	r3, [r3, #0]
 8003968:	b29b      	uxth	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d007      	beq.n	800397e <SD_disk_initialize+0x18e>
 800396e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003972:	2050      	movs	r0, #80	@ 0x50
 8003974:	f7ff fee7 	bl	8003746 <SD_SendCmd>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <SD_disk_initialize+0x192>
 800397e:	2300      	movs	r3, #0
 8003980:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8003982:	4a10      	ldr	r2, [pc, #64]	@ (80039c4 <SD_disk_initialize+0x1d4>)
 8003984:	7bbb      	ldrb	r3, [r7, #14]
 8003986:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8003988:	f7ff fd8a 	bl	80034a0 <DESELECT>
	SPI_RxByte();
 800398c:	f7ff fdca 	bl	8003524 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8003990:	7bbb      	ldrb	r3, [r7, #14]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d008      	beq.n	80039a8 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8003996:	4b09      	ldr	r3, [pc, #36]	@ (80039bc <SD_disk_initialize+0x1cc>)
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	b2db      	uxtb	r3, r3
 800399c:	f023 0301 	bic.w	r3, r3, #1
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	4b06      	ldr	r3, [pc, #24]	@ (80039bc <SD_disk_initialize+0x1cc>)
 80039a4:	701a      	strb	r2, [r3, #0]
 80039a6:	e001      	b.n	80039ac <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80039a8:	f7ff fe42 	bl	8003630 <SD_PowerOff>
	}

	return Stat;
 80039ac:	4b03      	ldr	r3, [pc, #12]	@ (80039bc <SD_disk_initialize+0x1cc>)
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	b2db      	uxtb	r3, r3
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd90      	pop	{r4, r7, pc}
 80039ba:	bf00      	nop
 80039bc:	20000140 	.word	0x20000140
 80039c0:	20000a02 	.word	0x20000a02
 80039c4:	200007bc 	.word	0x200007bc

080039c8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80039d2:	79fb      	ldrb	r3, [r7, #7]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <SD_disk_status+0x14>
 80039d8:	2301      	movs	r3, #1
 80039da:	e002      	b.n	80039e2 <SD_disk_status+0x1a>
	return Stat;
 80039dc:	4b04      	ldr	r3, [pc, #16]	@ (80039f0 <SD_disk_status+0x28>)
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	b2db      	uxtb	r3, r3
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	20000140 	.word	0x20000140

080039f4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60b9      	str	r1, [r7, #8]
 80039fc:	607a      	str	r2, [r7, #4]
 80039fe:	603b      	str	r3, [r7, #0]
 8003a00:	4603      	mov	r3, r0
 8003a02:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d102      	bne.n	8003a10 <SD_disk_read+0x1c>
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <SD_disk_read+0x20>
 8003a10:	2304      	movs	r3, #4
 8003a12:	e051      	b.n	8003ab8 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003a14:	4b2a      	ldr	r3, [pc, #168]	@ (8003ac0 <SD_disk_read+0xcc>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <SD_disk_read+0x32>
 8003a22:	2303      	movs	r3, #3
 8003a24:	e048      	b.n	8003ab8 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8003a26:	4b27      	ldr	r3, [pc, #156]	@ (8003ac4 <SD_disk_read+0xd0>)
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d102      	bne.n	8003a38 <SD_disk_read+0x44>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	025b      	lsls	r3, r3, #9
 8003a36:	607b      	str	r3, [r7, #4]

	SELECT();
 8003a38:	f7ff fd24 	bl	8003484 <SELECT>

	if (count == 1)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d111      	bne.n	8003a66 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	2051      	movs	r0, #81	@ 0x51
 8003a46:	f7ff fe7e 	bl	8003746 <SD_SendCmd>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d129      	bne.n	8003aa4 <SD_disk_read+0xb0>
 8003a50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003a54:	68b8      	ldr	r0, [r7, #8]
 8003a56:	f7ff fe03 	bl	8003660 <SD_RxDataBlock>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d021      	beq.n	8003aa4 <SD_disk_read+0xb0>
 8003a60:	2300      	movs	r3, #0
 8003a62:	603b      	str	r3, [r7, #0]
 8003a64:	e01e      	b.n	8003aa4 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	2052      	movs	r0, #82	@ 0x52
 8003a6a:	f7ff fe6c 	bl	8003746 <SD_SendCmd>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d117      	bne.n	8003aa4 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8003a74:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003a78:	68b8      	ldr	r0, [r7, #8]
 8003a7a:	f7ff fdf1 	bl	8003660 <SD_RxDataBlock>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00a      	beq.n	8003a9a <SD_disk_read+0xa6>
				buff += 512;
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003a8a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	603b      	str	r3, [r7, #0]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1ed      	bne.n	8003a74 <SD_disk_read+0x80>
 8003a98:	e000      	b.n	8003a9c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8003a9a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	204c      	movs	r0, #76	@ 0x4c
 8003aa0:	f7ff fe51 	bl	8003746 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8003aa4:	f7ff fcfc 	bl	80034a0 <DESELECT>
	SPI_RxByte();
 8003aa8:	f7ff fd3c 	bl	8003524 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	bf14      	ite	ne
 8003ab2:	2301      	movne	r3, #1
 8003ab4:	2300      	moveq	r3, #0
 8003ab6:	b2db      	uxtb	r3, r3
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	20000140 	.word	0x20000140
 8003ac4:	200007bc 	.word	0x200007bc

08003ac8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60b9      	str	r1, [r7, #8]
 8003ad0:	607a      	str	r2, [r7, #4]
 8003ad2:	603b      	str	r3, [r7, #0]
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8003ad8:	7bfb      	ldrb	r3, [r7, #15]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d102      	bne.n	8003ae4 <SD_disk_write+0x1c>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d101      	bne.n	8003ae8 <SD_disk_write+0x20>
 8003ae4:	2304      	movs	r3, #4
 8003ae6:	e06b      	b.n	8003bc0 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003ae8:	4b37      	ldr	r3, [pc, #220]	@ (8003bc8 <SD_disk_write+0x100>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <SD_disk_write+0x32>
 8003af6:	2303      	movs	r3, #3
 8003af8:	e062      	b.n	8003bc0 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8003afa:	4b33      	ldr	r3, [pc, #204]	@ (8003bc8 <SD_disk_write+0x100>)
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	f003 0304 	and.w	r3, r3, #4
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <SD_disk_write+0x44>
 8003b08:	2302      	movs	r3, #2
 8003b0a:	e059      	b.n	8003bc0 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8003b0c:	4b2f      	ldr	r3, [pc, #188]	@ (8003bcc <SD_disk_write+0x104>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d102      	bne.n	8003b1e <SD_disk_write+0x56>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	025b      	lsls	r3, r3, #9
 8003b1c:	607b      	str	r3, [r7, #4]

	SELECT();
 8003b1e:	f7ff fcb1 	bl	8003484 <SELECT>

	if (count == 1)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d110      	bne.n	8003b4a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8003b28:	6879      	ldr	r1, [r7, #4]
 8003b2a:	2058      	movs	r0, #88	@ 0x58
 8003b2c:	f7ff fe0b 	bl	8003746 <SD_SendCmd>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d13a      	bne.n	8003bac <SD_disk_write+0xe4>
 8003b36:	21fe      	movs	r1, #254	@ 0xfe
 8003b38:	68b8      	ldr	r0, [r7, #8]
 8003b3a:	f7ff fdc1 	bl	80036c0 <SD_TxDataBlock>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d033      	beq.n	8003bac <SD_disk_write+0xe4>
			count = 0;
 8003b44:	2300      	movs	r3, #0
 8003b46:	603b      	str	r3, [r7, #0]
 8003b48:	e030      	b.n	8003bac <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8003b4a:	4b20      	ldr	r3, [pc, #128]	@ (8003bcc <SD_disk_write+0x104>)
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d007      	beq.n	8003b66 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8003b56:	2100      	movs	r1, #0
 8003b58:	2077      	movs	r0, #119	@ 0x77
 8003b5a:	f7ff fdf4 	bl	8003746 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8003b5e:	6839      	ldr	r1, [r7, #0]
 8003b60:	2057      	movs	r0, #87	@ 0x57
 8003b62:	f7ff fdf0 	bl	8003746 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	2059      	movs	r0, #89	@ 0x59
 8003b6a:	f7ff fdec 	bl	8003746 <SD_SendCmd>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d11b      	bne.n	8003bac <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8003b74:	21fc      	movs	r1, #252	@ 0xfc
 8003b76:	68b8      	ldr	r0, [r7, #8]
 8003b78:	f7ff fda2 	bl	80036c0 <SD_TxDataBlock>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <SD_disk_write+0xd0>
				buff += 512;
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003b88:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	603b      	str	r3, [r7, #0]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1ee      	bne.n	8003b74 <SD_disk_write+0xac>
 8003b96:	e000      	b.n	8003b9a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8003b98:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8003b9a:	21fd      	movs	r1, #253	@ 0xfd
 8003b9c:	2000      	movs	r0, #0
 8003b9e:	f7ff fd8f 	bl	80036c0 <SD_TxDataBlock>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <SD_disk_write+0xe4>
			{
				count = 1;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8003bac:	f7ff fc78 	bl	80034a0 <DESELECT>
	SPI_RxByte();
 8003bb0:	f7ff fcb8 	bl	8003524 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	bf14      	ite	ne
 8003bba:	2301      	movne	r3, #1
 8003bbc:	2300      	moveq	r3, #0
 8003bbe:	b2db      	uxtb	r3, r3
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	20000140 	.word	0x20000140
 8003bcc:	200007bc 	.word	0x200007bc

08003bd0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8003bd0:	b590      	push	{r4, r7, lr}
 8003bd2:	b08b      	sub	sp, #44	@ 0x2c
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	603a      	str	r2, [r7, #0]
 8003bda:	71fb      	strb	r3, [r7, #7]
 8003bdc:	460b      	mov	r3, r1
 8003bde:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8003be4:	79fb      	ldrb	r3, [r7, #7]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <SD_disk_ioctl+0x1e>
 8003bea:	2304      	movs	r3, #4
 8003bec:	e113      	b.n	8003e16 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8003bf4:	79bb      	ldrb	r3, [r7, #6]
 8003bf6:	2b05      	cmp	r3, #5
 8003bf8:	d124      	bne.n	8003c44 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d012      	beq.n	8003c28 <SD_disk_ioctl+0x58>
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	dc1a      	bgt.n	8003c3c <SD_disk_ioctl+0x6c>
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <SD_disk_ioctl+0x40>
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d006      	beq.n	8003c1c <SD_disk_ioctl+0x4c>
 8003c0e:	e015      	b.n	8003c3c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8003c10:	f7ff fd0e 	bl	8003630 <SD_PowerOff>
			res = RES_OK;
 8003c14:	2300      	movs	r3, #0
 8003c16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8003c1a:	e0fa      	b.n	8003e12 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8003c1c:	f7ff fcc6 	bl	80035ac <SD_PowerOn>
			res = RES_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8003c26:	e0f4      	b.n	8003e12 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8003c28:	6a3b      	ldr	r3, [r7, #32]
 8003c2a:	1c5c      	adds	r4, r3, #1
 8003c2c:	f7ff fd0c 	bl	8003648 <SD_CheckPower>
 8003c30:	4603      	mov	r3, r0
 8003c32:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8003c34:	2300      	movs	r3, #0
 8003c36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8003c3a:	e0ea      	b.n	8003e12 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8003c3c:	2304      	movs	r3, #4
 8003c3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003c42:	e0e6      	b.n	8003e12 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003c44:	4b76      	ldr	r3, [pc, #472]	@ (8003e20 <SD_disk_ioctl+0x250>)
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <SD_disk_ioctl+0x86>
 8003c52:	2303      	movs	r3, #3
 8003c54:	e0df      	b.n	8003e16 <SD_disk_ioctl+0x246>

		SELECT();
 8003c56:	f7ff fc15 	bl	8003484 <SELECT>

		switch (ctrl)
 8003c5a:	79bb      	ldrb	r3, [r7, #6]
 8003c5c:	2b0d      	cmp	r3, #13
 8003c5e:	f200 80c9 	bhi.w	8003df4 <SD_disk_ioctl+0x224>
 8003c62:	a201      	add	r2, pc, #4	@ (adr r2, 8003c68 <SD_disk_ioctl+0x98>)
 8003c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c68:	08003d5f 	.word	0x08003d5f
 8003c6c:	08003ca1 	.word	0x08003ca1
 8003c70:	08003d4f 	.word	0x08003d4f
 8003c74:	08003df5 	.word	0x08003df5
 8003c78:	08003df5 	.word	0x08003df5
 8003c7c:	08003df5 	.word	0x08003df5
 8003c80:	08003df5 	.word	0x08003df5
 8003c84:	08003df5 	.word	0x08003df5
 8003c88:	08003df5 	.word	0x08003df5
 8003c8c:	08003df5 	.word	0x08003df5
 8003c90:	08003df5 	.word	0x08003df5
 8003c94:	08003d71 	.word	0x08003d71
 8003c98:	08003d95 	.word	0x08003d95
 8003c9c:	08003db9 	.word	0x08003db9
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	2049      	movs	r0, #73	@ 0x49
 8003ca4:	f7ff fd4f 	bl	8003746 <SD_SendCmd>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f040 80a6 	bne.w	8003dfc <SD_disk_ioctl+0x22c>
 8003cb0:	f107 030c 	add.w	r3, r7, #12
 8003cb4:	2110      	movs	r1, #16
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7ff fcd2 	bl	8003660 <SD_RxDataBlock>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f000 809c 	beq.w	8003dfc <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8003cc4:	7b3b      	ldrb	r3, [r7, #12]
 8003cc6:	099b      	lsrs	r3, r3, #6
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d10d      	bne.n	8003cea <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8003cce:	7d7b      	ldrb	r3, [r7, #21]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	7d3b      	ldrb	r3, [r7, #20]
 8003cd4:	021b      	lsls	r3, r3, #8
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	4413      	add	r3, r2
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	3301      	adds	r3, #1
 8003cde:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8003ce0:	8bfb      	ldrh	r3, [r7, #30]
 8003ce2:	029a      	lsls	r2, r3, #10
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	e02d      	b.n	8003d46 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003cea:	7c7b      	ldrb	r3, [r7, #17]
 8003cec:	f003 030f 	and.w	r3, r3, #15
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	7dbb      	ldrb	r3, [r7, #22]
 8003cf4:	09db      	lsrs	r3, r3, #7
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	4413      	add	r3, r2
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	7d7b      	ldrb	r3, [r7, #21]
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	f003 0306 	and.w	r3, r3, #6
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	4413      	add	r3, r2
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	3302      	adds	r3, #2
 8003d0e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8003d12:	7d3b      	ldrb	r3, [r7, #20]
 8003d14:	099b      	lsrs	r3, r3, #6
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	461a      	mov	r2, r3
 8003d1a:	7cfb      	ldrb	r3, [r7, #19]
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	4413      	add	r3, r2
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	7cbb      	ldrb	r3, [r7, #18]
 8003d26:	029b      	lsls	r3, r3, #10
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	4413      	add	r3, r2
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	3301      	adds	r3, #1
 8003d36:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8003d38:	8bfa      	ldrh	r2, [r7, #30]
 8003d3a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003d3e:	3b09      	subs	r3, #9
 8003d40:	409a      	lsls	r2, r3
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8003d46:	2300      	movs	r3, #0
 8003d48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8003d4c:	e056      	b.n	8003dfc <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d54:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8003d56:	2300      	movs	r3, #0
 8003d58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8003d5c:	e055      	b.n	8003e0a <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8003d5e:	f7ff fc0b 	bl	8003578 <SD_ReadyWait>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2bff      	cmp	r3, #255	@ 0xff
 8003d66:	d14b      	bne.n	8003e00 <SD_disk_ioctl+0x230>
 8003d68:	2300      	movs	r3, #0
 8003d6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8003d6e:	e047      	b.n	8003e00 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003d70:	2100      	movs	r1, #0
 8003d72:	2049      	movs	r0, #73	@ 0x49
 8003d74:	f7ff fce7 	bl	8003746 <SD_SendCmd>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d142      	bne.n	8003e04 <SD_disk_ioctl+0x234>
 8003d7e:	2110      	movs	r1, #16
 8003d80:	6a38      	ldr	r0, [r7, #32]
 8003d82:	f7ff fc6d 	bl	8003660 <SD_RxDataBlock>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d03b      	beq.n	8003e04 <SD_disk_ioctl+0x234>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8003d92:	e037      	b.n	8003e04 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003d94:	2100      	movs	r1, #0
 8003d96:	204a      	movs	r0, #74	@ 0x4a
 8003d98:	f7ff fcd5 	bl	8003746 <SD_SendCmd>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d132      	bne.n	8003e08 <SD_disk_ioctl+0x238>
 8003da2:	2110      	movs	r1, #16
 8003da4:	6a38      	ldr	r0, [r7, #32]
 8003da6:	f7ff fc5b 	bl	8003660 <SD_RxDataBlock>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d02b      	beq.n	8003e08 <SD_disk_ioctl+0x238>
 8003db0:	2300      	movs	r3, #0
 8003db2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8003db6:	e027      	b.n	8003e08 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8003db8:	2100      	movs	r1, #0
 8003dba:	207a      	movs	r0, #122	@ 0x7a
 8003dbc:	f7ff fcc3 	bl	8003746 <SD_SendCmd>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d116      	bne.n	8003df4 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003dcc:	e00b      	b.n	8003de6 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8003dce:	6a3c      	ldr	r4, [r7, #32]
 8003dd0:	1c63      	adds	r3, r4, #1
 8003dd2:	623b      	str	r3, [r7, #32]
 8003dd4:	f7ff fba6 	bl	8003524 <SPI_RxByte>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8003ddc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003de0:	3301      	adds	r3, #1
 8003de2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003de6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003dea:	2b03      	cmp	r3, #3
 8003dec:	d9ef      	bls.n	8003dce <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8003dee:	2300      	movs	r3, #0
 8003df0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8003df4:	2304      	movs	r3, #4
 8003df6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003dfa:	e006      	b.n	8003e0a <SD_disk_ioctl+0x23a>
			break;
 8003dfc:	bf00      	nop
 8003dfe:	e004      	b.n	8003e0a <SD_disk_ioctl+0x23a>
			break;
 8003e00:	bf00      	nop
 8003e02:	e002      	b.n	8003e0a <SD_disk_ioctl+0x23a>
			break;
 8003e04:	bf00      	nop
 8003e06:	e000      	b.n	8003e0a <SD_disk_ioctl+0x23a>
			break;
 8003e08:	bf00      	nop
		}

		DESELECT();
 8003e0a:	f7ff fb49 	bl	80034a0 <DESELECT>
		SPI_RxByte();
 8003e0e:	f7ff fb89 	bl	8003524 <SPI_RxByte>
	}

	return res;
 8003e12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	372c      	adds	r7, #44	@ 0x2c
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd90      	pop	{r4, r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	20000140 	.word	0x20000140

08003e24 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b08e      	sub	sp, #56	@ 0x38
 8003e28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	605a      	str	r2, [r3, #4]
 8003e34:	609a      	str	r2, [r3, #8]
 8003e36:	60da      	str	r2, [r3, #12]
 8003e38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	623b      	str	r3, [r7, #32]
 8003e3e:	4bb5      	ldr	r3, [pc, #724]	@ (8004114 <MX_GPIO_Init+0x2f0>)
 8003e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e42:	4ab4      	ldr	r2, [pc, #720]	@ (8004114 <MX_GPIO_Init+0x2f0>)
 8003e44:	f043 0304 	orr.w	r3, r3, #4
 8003e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e4a:	4bb2      	ldr	r3, [pc, #712]	@ (8004114 <MX_GPIO_Init+0x2f0>)
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4e:	f003 0304 	and.w	r3, r3, #4
 8003e52:	623b      	str	r3, [r7, #32]
 8003e54:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e56:	2300      	movs	r3, #0
 8003e58:	61fb      	str	r3, [r7, #28]
 8003e5a:	4bae      	ldr	r3, [pc, #696]	@ (8004114 <MX_GPIO_Init+0x2f0>)
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e5e:	4aad      	ldr	r2, [pc, #692]	@ (8004114 <MX_GPIO_Init+0x2f0>)
 8003e60:	f043 0320 	orr.w	r3, r3, #32
 8003e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e66:	4bab      	ldr	r3, [pc, #684]	@ (8004114 <MX_GPIO_Init+0x2f0>)
 8003e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6a:	f003 0320 	and.w	r3, r3, #32
 8003e6e:	61fb      	str	r3, [r7, #28]
 8003e70:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003e72:	2300      	movs	r3, #0
 8003e74:	61bb      	str	r3, [r7, #24]
 8003e76:	4ba7      	ldr	r3, [pc, #668]	@ (8004114 <MX_GPIO_Init+0x2f0>)
 8003e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e7a:	4aa6      	ldr	r2, [pc, #664]	@ (8004114 <MX_GPIO_Init+0x2f0>)
 8003e7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e82:	4ba4      	ldr	r3, [pc, #656]	@ (8004114 <MX_GPIO_Init+0x2f0>)
 8003e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e8a:	61bb      	str	r3, [r7, #24]
 8003e8c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e8e:	2300      	movs	r3, #0
 8003e90:	617b      	str	r3, [r7, #20]
 8003e92:	4ba0      	ldr	r3, [pc, #640]	@ (8004114 <MX_GPIO_Init+0x2f0>)
 8003e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e96:	4a9f      	ldr	r2, [pc, #636]	@ (8004114 <MX_GPIO_Init+0x2f0>)
 8003e98:	f043 0301 	orr.w	r3, r3, #1
 8003e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e9e:	4b9d      	ldr	r3, [pc, #628]	@ (8004114 <MX_GPIO_Init+0x2f0>)
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	617b      	str	r3, [r7, #20]
 8003ea8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003eaa:	2300      	movs	r3, #0
 8003eac:	613b      	str	r3, [r7, #16]
 8003eae:	4b99      	ldr	r3, [pc, #612]	@ (8004114 <MX_GPIO_Init+0x2f0>)
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb2:	4a98      	ldr	r2, [pc, #608]	@ (8004114 <MX_GPIO_Init+0x2f0>)
 8003eb4:	f043 0310 	orr.w	r3, r3, #16
 8003eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003eba:	4b96      	ldr	r3, [pc, #600]	@ (8004114 <MX_GPIO_Init+0x2f0>)
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ebe:	f003 0310 	and.w	r3, r3, #16
 8003ec2:	613b      	str	r3, [r7, #16]
 8003ec4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	4b92      	ldr	r3, [pc, #584]	@ (8004114 <MX_GPIO_Init+0x2f0>)
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ece:	4a91      	ldr	r2, [pc, #580]	@ (8004114 <MX_GPIO_Init+0x2f0>)
 8003ed0:	f043 0302 	orr.w	r3, r3, #2
 8003ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ed6:	4b8f      	ldr	r3, [pc, #572]	@ (8004114 <MX_GPIO_Init+0x2f0>)
 8003ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60bb      	str	r3, [r7, #8]
 8003ee6:	4b8b      	ldr	r3, [pc, #556]	@ (8004114 <MX_GPIO_Init+0x2f0>)
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eea:	4a8a      	ldr	r2, [pc, #552]	@ (8004114 <MX_GPIO_Init+0x2f0>)
 8003eec:	f043 0308 	orr.w	r3, r3, #8
 8003ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ef2:	4b88      	ldr	r3, [pc, #544]	@ (8004114 <MX_GPIO_Init+0x2f0>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef6:	f003 0308 	and.w	r3, r3, #8
 8003efa:	60bb      	str	r3, [r7, #8]
 8003efc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003efe:	2300      	movs	r3, #0
 8003f00:	607b      	str	r3, [r7, #4]
 8003f02:	4b84      	ldr	r3, [pc, #528]	@ (8004114 <MX_GPIO_Init+0x2f0>)
 8003f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f06:	4a83      	ldr	r2, [pc, #524]	@ (8004114 <MX_GPIO_Init+0x2f0>)
 8003f08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f0e:	4b81      	ldr	r3, [pc, #516]	@ (8004114 <MX_GPIO_Init+0x2f0>)
 8003f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f16:	607b      	str	r3, [r7, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	603b      	str	r3, [r7, #0]
 8003f1e:	4b7d      	ldr	r3, [pc, #500]	@ (8004114 <MX_GPIO_Init+0x2f0>)
 8003f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f22:	4a7c      	ldr	r2, [pc, #496]	@ (8004114 <MX_GPIO_Init+0x2f0>)
 8003f24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f2a:	4b7a      	ldr	r3, [pc, #488]	@ (8004114 <MX_GPIO_Init+0x2f0>)
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f32:	603b      	str	r3, [r7, #0]
 8003f34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USART2_ENABLE_GPIO_Port, USART2_ENABLE_Pin, GPIO_PIN_RESET);
 8003f36:	2200      	movs	r2, #0
 8003f38:	2102      	movs	r1, #2
 8003f3a:	4877      	ldr	r0, [pc, #476]	@ (8004118 <MX_GPIO_Init+0x2f4>)
 8003f3c:	f002 f896 	bl	800606c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, Temp_LED_Pin|LED_09_Pin, GPIO_PIN_SET);
 8003f40:	2201      	movs	r2, #1
 8003f42:	f244 0140 	movw	r1, #16448	@ 0x4040
 8003f46:	4875      	ldr	r0, [pc, #468]	@ (800411c <MX_GPIO_Init+0x2f8>)
 8003f48:	f002 f890 	bl	800606c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_ISO_01_GPIO_Port, CS_ISO_01_Pin, GPIO_PIN_SET);
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f52:	4873      	ldr	r0, [pc, #460]	@ (8004120 <MX_GPIO_Init+0x2fc>)
 8003f54:	f002 f88a 	bl	800606c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CS_ISO_02_Pin|USART3_ENABLE_Pin, GPIO_PIN_RESET);
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8003f5e:	4871      	ldr	r0, [pc, #452]	@ (8004124 <MX_GPIO_Init+0x300>)
 8003f60:	f002 f884 	bl	800606c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, DISPLAY_IO_1_Pin|DISPLAY_IO_2_Pin|BACKLIGHT_1_Pin|BACKLIGHT_2_Pin, GPIO_PIN_SET);
 8003f64:	2201      	movs	r2, #1
 8003f66:	213c      	movs	r1, #60	@ 0x3c
 8003f68:	486f      	ldr	r0, [pc, #444]	@ (8004128 <MX_GPIO_Init+0x304>)
 8003f6a:	f002 f87f 	bl	800606c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USART6_ENABLE_GPIO_Port, USART6_ENABLE_Pin, GPIO_PIN_RESET);
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003f74:	486d      	ldr	r0, [pc, #436]	@ (800412c <MX_GPIO_Init+0x308>)
 8003f76:	f002 f879 	bl	800606c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_08_GPIO_Port, LED_08_Pin, GPIO_PIN_RESET);
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f80:	4866      	ldr	r0, [pc, #408]	@ (800411c <MX_GPIO_Init+0x2f8>)
 8003f82:	f002 f873 	bl	800606c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DISPLAY_CS_Pin|SPI5_CS_02_Pin, GPIO_PIN_SET);
 8003f86:	2201      	movs	r2, #1
 8003f88:	210c      	movs	r1, #12
 8003f8a:	4866      	ldr	r0, [pc, #408]	@ (8004124 <MX_GPIO_Init+0x300>)
 8003f8c:	f002 f86e 	bl	800606c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_07_Pin|LED_02_Pin|LED_06_Pin, GPIO_PIN_RESET);
 8003f90:	2200      	movs	r2, #0
 8003f92:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8003f96:	4864      	ldr	r0, [pc, #400]	@ (8004128 <MX_GPIO_Init+0x304>)
 8003f98:	f002 f868 	bl	800606c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_01_Pin|LED_05_Pin|USART1_ENABLE_Pin, GPIO_PIN_RESET);
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	2138      	movs	r1, #56	@ 0x38
 8003fa0:	485f      	ldr	r0, [pc, #380]	@ (8004120 <MX_GPIO_Init+0x2fc>)
 8003fa2:	f002 f863 	bl	800606c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_04_Pin|LED_03_Pin, GPIO_PIN_RESET);
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	2103      	movs	r1, #3
 8003faa:	4861      	ldr	r0, [pc, #388]	@ (8004130 <MX_GPIO_Init+0x30c>)
 8003fac:	f002 f85e 	bl	800606c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, RS485_YELLOW_LED_02_Pin|RS485_GREEN_LED_02_Pin|RS485_YELLOW_LED_01_Pin|RS485_GREEN_LED_01_Pin, GPIO_PIN_RESET);
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	21f0      	movs	r1, #240	@ 0xf0
 8003fb4:	485f      	ldr	r0, [pc, #380]	@ (8004134 <MX_GPIO_Init+0x310>)
 8003fb6:	f002 f859 	bl	800606c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USART2_ENABLE_Pin;
 8003fba:	2302      	movs	r3, #2
 8003fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USART2_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003fca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fce:	4619      	mov	r1, r3
 8003fd0:	4851      	ldr	r0, [pc, #324]	@ (8004118 <MX_GPIO_Init+0x2f4>)
 8003fd2:	f001 fe9f 	bl	8005d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = Temp_LED_Pin|LED_08_Pin;
 8003fd6:	f248 0340 	movw	r3, #32832	@ 0x8040
 8003fda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003fe8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fec:	4619      	mov	r1, r3
 8003fee:	484b      	ldr	r0, [pc, #300]	@ (800411c <MX_GPIO_Init+0x2f8>)
 8003ff0:	f001 fe90 	bl	8005d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CS_ISO_01_Pin|LED_01_Pin|LED_05_Pin|USART1_ENABLE_Pin;
 8003ff4:	f248 0338 	movw	r3, #32824	@ 0x8038
 8003ff8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ffe:	2300      	movs	r3, #0
 8004000:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004002:	2300      	movs	r3, #0
 8004004:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004006:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800400a:	4619      	mov	r1, r3
 800400c:	4844      	ldr	r0, [pc, #272]	@ (8004120 <MX_GPIO_Init+0x2fc>)
 800400e:	f001 fe81 	bl	8005d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = CS_ISO_02_Pin|USART3_ENABLE_Pin|DISPLAY_CS_Pin|SPI5_CS_02_Pin;
 8004012:	f640 430c 	movw	r3, #3084	@ 0xc0c
 8004016:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004018:	2301      	movs	r3, #1
 800401a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800401c:	2300      	movs	r3, #0
 800401e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004020:	2300      	movs	r3, #0
 8004022:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004024:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004028:	4619      	mov	r1, r3
 800402a:	483e      	ldr	r0, [pc, #248]	@ (8004124 <MX_GPIO_Init+0x300>)
 800402c:	f001 fe72 	bl	8005d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_01_Pin|PUSH_BUTTON_03_Pin|PUSH_BUTTON_04_Pin;
 8004030:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8004034:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004036:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800403a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800403c:	2300      	movs	r3, #0
 800403e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004040:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004044:	4619      	mov	r1, r3
 8004046:	4837      	ldr	r0, [pc, #220]	@ (8004124 <MX_GPIO_Init+0x300>)
 8004048:	f001 fe64 	bl	8005d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_02_Pin;
 800404c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004050:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004052:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004056:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004058:	2300      	movs	r3, #0
 800405a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PUSH_BUTTON_02_GPIO_Port, &GPIO_InitStruct);
 800405c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004060:	4619      	mov	r1, r3
 8004062:	4830      	ldr	r0, [pc, #192]	@ (8004124 <MX_GPIO_Init+0x300>)
 8004064:	f001 fe56 	bl	8005d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = DISPLAY_IO_1_Pin|DISPLAY_IO_2_Pin|BACKLIGHT_1_Pin|BACKLIGHT_2_Pin
 8004068:	f24e 033c 	movw	r3, #57404	@ 0xe03c
 800406c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LED_07_Pin|LED_02_Pin|LED_06_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800406e:	2301      	movs	r3, #1
 8004070:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004072:	2300      	movs	r3, #0
 8004074:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004076:	2300      	movs	r3, #0
 8004078:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800407a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800407e:	4619      	mov	r1, r3
 8004080:	4829      	ldr	r0, [pc, #164]	@ (8004128 <MX_GPIO_Init+0x304>)
 8004082:	f001 fe47 	bl	8005d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USART6_ENABLE_Pin;
 8004086:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800408a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800408c:	2301      	movs	r3, #1
 800408e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004090:	2300      	movs	r3, #0
 8004092:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004094:	2300      	movs	r3, #0
 8004096:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USART6_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8004098:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800409c:	4619      	mov	r1, r3
 800409e:	4823      	ldr	r0, [pc, #140]	@ (800412c <MX_GPIO_Init+0x308>)
 80040a0:	f001 fe38 	bl	8005d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CD_Pin;
 80040a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80040a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040aa:	2300      	movs	r3, #0
 80040ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040ae:	2301      	movs	r3, #1
 80040b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 80040b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040b6:	4619      	mov	r1, r3
 80040b8:	4818      	ldr	r0, [pc, #96]	@ (800411c <MX_GPIO_Init+0x2f8>)
 80040ba:	f001 fe2b 	bl	8005d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_09_Pin;
 80040be:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80040c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040c4:	2301      	movs	r3, #1
 80040c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040c8:	2301      	movs	r3, #1
 80040ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040cc:	2300      	movs	r3, #0
 80040ce:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED_09_GPIO_Port, &GPIO_InitStruct);
 80040d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040d4:	4619      	mov	r1, r3
 80040d6:	4811      	ldr	r0, [pc, #68]	@ (800411c <MX_GPIO_Init+0x2f8>)
 80040d8:	f001 fe1c 	bl	8005d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = DIP_SWITCH_01_Pin|DIP_SWITCH_02_Pin|DIP_SWITCH_03_Pin|DIP_SWITCH_04_Pin;
 80040dc:	23f0      	movs	r3, #240	@ 0xf0
 80040de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040e0:	2300      	movs	r3, #0
 80040e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e4:	2300      	movs	r3, #0
 80040e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040ec:	4619      	mov	r1, r3
 80040ee:	480d      	ldr	r0, [pc, #52]	@ (8004124 <MX_GPIO_Init+0x300>)
 80040f0:	f001 fe10 	bl	8005d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = DIP_SWITCH_MODE_01_Pin|DIP_SWITCH_MODE_02_Pin|DIP_SWITCH_MODE_03_Pin|DIP_SWITCH_MODE_04_Pin;
 80040f4:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 80040f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040fa:	2300      	movs	r3, #0
 80040fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040fe:	2300      	movs	r3, #0
 8004100:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004102:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004106:	4619      	mov	r1, r3
 8004108:	4807      	ldr	r0, [pc, #28]	@ (8004128 <MX_GPIO_Init+0x304>)
 800410a:	f001 fe03 	bl	8005d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED_04_Pin|LED_03_Pin;
 800410e:	2303      	movs	r3, #3
 8004110:	e012      	b.n	8004138 <MX_GPIO_Init+0x314>
 8004112:	bf00      	nop
 8004114:	40023800 	.word	0x40023800
 8004118:	40020000 	.word	0x40020000
 800411c:	40021c00 	.word	0x40021c00
 8004120:	40020400 	.word	0x40020400
 8004124:	40020c00 	.word	0x40020c00
 8004128:	40021800 	.word	0x40021800
 800412c:	40020800 	.word	0x40020800
 8004130:	40021000 	.word	0x40021000
 8004134:	40022000 	.word	0x40022000
 8004138:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800413a:	2301      	movs	r3, #1
 800413c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800413e:	2300      	movs	r3, #0
 8004140:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004142:	2300      	movs	r3, #0
 8004144:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004146:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800414a:	4619      	mov	r1, r3
 800414c:	480e      	ldr	r0, [pc, #56]	@ (8004188 <MX_GPIO_Init+0x364>)
 800414e:	f001 fde1 	bl	8005d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = RS485_YELLOW_LED_02_Pin|RS485_GREEN_LED_02_Pin|RS485_YELLOW_LED_01_Pin|RS485_GREEN_LED_01_Pin;
 8004152:	23f0      	movs	r3, #240	@ 0xf0
 8004154:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004156:	2301      	movs	r3, #1
 8004158:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800415a:	2300      	movs	r3, #0
 800415c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800415e:	2300      	movs	r3, #0
 8004160:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004162:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004166:	4619      	mov	r1, r3
 8004168:	4808      	ldr	r0, [pc, #32]	@ (800418c <MX_GPIO_Init+0x368>)
 800416a:	f001 fdd3 	bl	8005d14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800416e:	2200      	movs	r2, #0
 8004170:	2100      	movs	r1, #0
 8004172:	2028      	movs	r0, #40	@ 0x28
 8004174:	f001 fd05 	bl	8005b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004178:	2028      	movs	r0, #40	@ 0x28
 800417a:	f001 fd1e 	bl	8005bba <HAL_NVIC_EnableIRQ>

}
 800417e:	bf00      	nop
 8004180:	3738      	adds	r7, #56	@ 0x38
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	40021000 	.word	0x40021000
 800418c:	40022000 	.word	0x40022000

08004190 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004194:	4b1b      	ldr	r3, [pc, #108]	@ (8004204 <MX_I2C1_Init+0x74>)
 8004196:	4a1c      	ldr	r2, [pc, #112]	@ (8004208 <MX_I2C1_Init+0x78>)
 8004198:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800419a:	4b1a      	ldr	r3, [pc, #104]	@ (8004204 <MX_I2C1_Init+0x74>)
 800419c:	4a1b      	ldr	r2, [pc, #108]	@ (800420c <MX_I2C1_Init+0x7c>)
 800419e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80041a0:	4b18      	ldr	r3, [pc, #96]	@ (8004204 <MX_I2C1_Init+0x74>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80041a6:	4b17      	ldr	r3, [pc, #92]	@ (8004204 <MX_I2C1_Init+0x74>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80041ac:	4b15      	ldr	r3, [pc, #84]	@ (8004204 <MX_I2C1_Init+0x74>)
 80041ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80041b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80041b4:	4b13      	ldr	r3, [pc, #76]	@ (8004204 <MX_I2C1_Init+0x74>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80041ba:	4b12      	ldr	r3, [pc, #72]	@ (8004204 <MX_I2C1_Init+0x74>)
 80041bc:	2200      	movs	r2, #0
 80041be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80041c0:	4b10      	ldr	r3, [pc, #64]	@ (8004204 <MX_I2C1_Init+0x74>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80041c6:	4b0f      	ldr	r3, [pc, #60]	@ (8004204 <MX_I2C1_Init+0x74>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80041cc:	480d      	ldr	r0, [pc, #52]	@ (8004204 <MX_I2C1_Init+0x74>)
 80041ce:	f001 ff99 	bl	8006104 <HAL_I2C_Init>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80041d8:	f000 fb8c 	bl	80048f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80041dc:	2100      	movs	r1, #0
 80041de:	4809      	ldr	r0, [pc, #36]	@ (8004204 <MX_I2C1_Init+0x74>)
 80041e0:	f003 fc34 	bl	8007a4c <HAL_I2CEx_ConfigAnalogFilter>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80041ea:	f000 fb83 	bl	80048f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80041ee:	2100      	movs	r1, #0
 80041f0:	4804      	ldr	r0, [pc, #16]	@ (8004204 <MX_I2C1_Init+0x74>)
 80041f2:	f003 fc67 	bl	8007ac4 <HAL_I2CEx_ConfigDigitalFilter>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80041fc:	f000 fb7a 	bl	80048f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004200:	bf00      	nop
 8004202:	bd80      	pop	{r7, pc}
 8004204:	200007c0 	.word	0x200007c0
 8004208:	40005400 	.word	0x40005400
 800420c:	00061a80 	.word	0x00061a80

08004210 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004214:	4b1b      	ldr	r3, [pc, #108]	@ (8004284 <MX_I2C2_Init+0x74>)
 8004216:	4a1c      	ldr	r2, [pc, #112]	@ (8004288 <MX_I2C2_Init+0x78>)
 8004218:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800421a:	4b1a      	ldr	r3, [pc, #104]	@ (8004284 <MX_I2C2_Init+0x74>)
 800421c:	4a1b      	ldr	r2, [pc, #108]	@ (800428c <MX_I2C2_Init+0x7c>)
 800421e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004220:	4b18      	ldr	r3, [pc, #96]	@ (8004284 <MX_I2C2_Init+0x74>)
 8004222:	2200      	movs	r2, #0
 8004224:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8004226:	4b17      	ldr	r3, [pc, #92]	@ (8004284 <MX_I2C2_Init+0x74>)
 8004228:	2200      	movs	r2, #0
 800422a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800422c:	4b15      	ldr	r3, [pc, #84]	@ (8004284 <MX_I2C2_Init+0x74>)
 800422e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004232:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004234:	4b13      	ldr	r3, [pc, #76]	@ (8004284 <MX_I2C2_Init+0x74>)
 8004236:	2200      	movs	r2, #0
 8004238:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800423a:	4b12      	ldr	r3, [pc, #72]	@ (8004284 <MX_I2C2_Init+0x74>)
 800423c:	2200      	movs	r2, #0
 800423e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004240:	4b10      	ldr	r3, [pc, #64]	@ (8004284 <MX_I2C2_Init+0x74>)
 8004242:	2200      	movs	r2, #0
 8004244:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004246:	4b0f      	ldr	r3, [pc, #60]	@ (8004284 <MX_I2C2_Init+0x74>)
 8004248:	2200      	movs	r2, #0
 800424a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800424c:	480d      	ldr	r0, [pc, #52]	@ (8004284 <MX_I2C2_Init+0x74>)
 800424e:	f001 ff59 	bl	8006104 <HAL_I2C_Init>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004258:	f000 fb4c 	bl	80048f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800425c:	2100      	movs	r1, #0
 800425e:	4809      	ldr	r0, [pc, #36]	@ (8004284 <MX_I2C2_Init+0x74>)
 8004260:	f003 fbf4 	bl	8007a4c <HAL_I2CEx_ConfigAnalogFilter>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800426a:	f000 fb43 	bl	80048f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800426e:	2100      	movs	r1, #0
 8004270:	4804      	ldr	r0, [pc, #16]	@ (8004284 <MX_I2C2_Init+0x74>)
 8004272:	f003 fc27 	bl	8007ac4 <HAL_I2CEx_ConfigDigitalFilter>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800427c:	f000 fb3a 	bl	80048f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004280:	bf00      	nop
 8004282:	bd80      	pop	{r7, pc}
 8004284:	20000814 	.word	0x20000814
 8004288:	40005800 	.word	0x40005800
 800428c:	000186a0 	.word	0x000186a0

08004290 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8004294:	4b1b      	ldr	r3, [pc, #108]	@ (8004304 <MX_I2C3_Init+0x74>)
 8004296:	4a1c      	ldr	r2, [pc, #112]	@ (8004308 <MX_I2C3_Init+0x78>)
 8004298:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800429a:	4b1a      	ldr	r3, [pc, #104]	@ (8004304 <MX_I2C3_Init+0x74>)
 800429c:	4a1b      	ldr	r2, [pc, #108]	@ (800430c <MX_I2C3_Init+0x7c>)
 800429e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80042a0:	4b18      	ldr	r3, [pc, #96]	@ (8004304 <MX_I2C3_Init+0x74>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80042a6:	4b17      	ldr	r3, [pc, #92]	@ (8004304 <MX_I2C3_Init+0x74>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80042ac:	4b15      	ldr	r3, [pc, #84]	@ (8004304 <MX_I2C3_Init+0x74>)
 80042ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80042b2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80042b4:	4b13      	ldr	r3, [pc, #76]	@ (8004304 <MX_I2C3_Init+0x74>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80042ba:	4b12      	ldr	r3, [pc, #72]	@ (8004304 <MX_I2C3_Init+0x74>)
 80042bc:	2200      	movs	r2, #0
 80042be:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80042c0:	4b10      	ldr	r3, [pc, #64]	@ (8004304 <MX_I2C3_Init+0x74>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80042c6:	4b0f      	ldr	r3, [pc, #60]	@ (8004304 <MX_I2C3_Init+0x74>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80042cc:	480d      	ldr	r0, [pc, #52]	@ (8004304 <MX_I2C3_Init+0x74>)
 80042ce:	f001 ff19 	bl	8006104 <HAL_I2C_Init>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80042d8:	f000 fb0c 	bl	80048f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80042dc:	2100      	movs	r1, #0
 80042de:	4809      	ldr	r0, [pc, #36]	@ (8004304 <MX_I2C3_Init+0x74>)
 80042e0:	f003 fbb4 	bl	8007a4c <HAL_I2CEx_ConfigAnalogFilter>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80042ea:	f000 fb03 	bl	80048f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80042ee:	2100      	movs	r1, #0
 80042f0:	4804      	ldr	r0, [pc, #16]	@ (8004304 <MX_I2C3_Init+0x74>)
 80042f2:	f003 fbe7 	bl	8007ac4 <HAL_I2CEx_ConfigDigitalFilter>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80042fc:	f000 fafa 	bl	80048f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8004300:	bf00      	nop
 8004302:	bd80      	pop	{r7, pc}
 8004304:	20000868 	.word	0x20000868
 8004308:	40005c00 	.word	0x40005c00
 800430c:	000186a0 	.word	0x000186a0

08004310 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08e      	sub	sp, #56	@ 0x38
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004318:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	605a      	str	r2, [r3, #4]
 8004322:	609a      	str	r2, [r3, #8]
 8004324:	60da      	str	r2, [r3, #12]
 8004326:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a4c      	ldr	r2, [pc, #304]	@ (8004460 <HAL_I2C_MspInit+0x150>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d12d      	bne.n	800438e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004332:	2300      	movs	r3, #0
 8004334:	623b      	str	r3, [r7, #32]
 8004336:	4b4b      	ldr	r3, [pc, #300]	@ (8004464 <HAL_I2C_MspInit+0x154>)
 8004338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800433a:	4a4a      	ldr	r2, [pc, #296]	@ (8004464 <HAL_I2C_MspInit+0x154>)
 800433c:	f043 0302 	orr.w	r3, r3, #2
 8004340:	6313      	str	r3, [r2, #48]	@ 0x30
 8004342:	4b48      	ldr	r3, [pc, #288]	@ (8004464 <HAL_I2C_MspInit+0x154>)
 8004344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	623b      	str	r3, [r7, #32]
 800434c:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800434e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004352:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004354:	2312      	movs	r3, #18
 8004356:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004358:	2300      	movs	r3, #0
 800435a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800435c:	2303      	movs	r3, #3
 800435e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004360:	2304      	movs	r3, #4
 8004362:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004364:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004368:	4619      	mov	r1, r3
 800436a:	483f      	ldr	r0, [pc, #252]	@ (8004468 <HAL_I2C_MspInit+0x158>)
 800436c:	f001 fcd2 	bl	8005d14 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004370:	2300      	movs	r3, #0
 8004372:	61fb      	str	r3, [r7, #28]
 8004374:	4b3b      	ldr	r3, [pc, #236]	@ (8004464 <HAL_I2C_MspInit+0x154>)
 8004376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004378:	4a3a      	ldr	r2, [pc, #232]	@ (8004464 <HAL_I2C_MspInit+0x154>)
 800437a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800437e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004380:	4b38      	ldr	r3, [pc, #224]	@ (8004464 <HAL_I2C_MspInit+0x154>)
 8004382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004384:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004388:	61fb      	str	r3, [r7, #28]
 800438a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800438c:	e063      	b.n	8004456 <HAL_I2C_MspInit+0x146>
  else if(i2cHandle->Instance==I2C2)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a36      	ldr	r2, [pc, #216]	@ (800446c <HAL_I2C_MspInit+0x15c>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d12c      	bne.n	80043f2 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004398:	2300      	movs	r3, #0
 800439a:	61bb      	str	r3, [r7, #24]
 800439c:	4b31      	ldr	r3, [pc, #196]	@ (8004464 <HAL_I2C_MspInit+0x154>)
 800439e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a0:	4a30      	ldr	r2, [pc, #192]	@ (8004464 <HAL_I2C_MspInit+0x154>)
 80043a2:	f043 0320 	orr.w	r3, r3, #32
 80043a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80043a8:	4b2e      	ldr	r3, [pc, #184]	@ (8004464 <HAL_I2C_MspInit+0x154>)
 80043aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ac:	f003 0320 	and.w	r3, r3, #32
 80043b0:	61bb      	str	r3, [r7, #24]
 80043b2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80043b4:	2303      	movs	r3, #3
 80043b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043b8:	2312      	movs	r3, #18
 80043ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043bc:	2300      	movs	r3, #0
 80043be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043c0:	2303      	movs	r3, #3
 80043c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80043c4:	2304      	movs	r3, #4
 80043c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80043c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043cc:	4619      	mov	r1, r3
 80043ce:	4828      	ldr	r0, [pc, #160]	@ (8004470 <HAL_I2C_MspInit+0x160>)
 80043d0:	f001 fca0 	bl	8005d14 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80043d4:	2300      	movs	r3, #0
 80043d6:	617b      	str	r3, [r7, #20]
 80043d8:	4b22      	ldr	r3, [pc, #136]	@ (8004464 <HAL_I2C_MspInit+0x154>)
 80043da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043dc:	4a21      	ldr	r2, [pc, #132]	@ (8004464 <HAL_I2C_MspInit+0x154>)
 80043de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80043e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80043e4:	4b1f      	ldr	r3, [pc, #124]	@ (8004464 <HAL_I2C_MspInit+0x154>)
 80043e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043ec:	617b      	str	r3, [r7, #20]
 80043ee:	697b      	ldr	r3, [r7, #20]
}
 80043f0:	e031      	b.n	8004456 <HAL_I2C_MspInit+0x146>
  else if(i2cHandle->Instance==I2C3)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a1f      	ldr	r2, [pc, #124]	@ (8004474 <HAL_I2C_MspInit+0x164>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d12c      	bne.n	8004456 <HAL_I2C_MspInit+0x146>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80043fc:	2300      	movs	r3, #0
 80043fe:	613b      	str	r3, [r7, #16]
 8004400:	4b18      	ldr	r3, [pc, #96]	@ (8004464 <HAL_I2C_MspInit+0x154>)
 8004402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004404:	4a17      	ldr	r2, [pc, #92]	@ (8004464 <HAL_I2C_MspInit+0x154>)
 8004406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800440a:	6313      	str	r3, [r2, #48]	@ 0x30
 800440c:	4b15      	ldr	r3, [pc, #84]	@ (8004464 <HAL_I2C_MspInit+0x154>)
 800440e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004410:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004414:	613b      	str	r3, [r7, #16]
 8004416:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004418:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800441c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800441e:	2312      	movs	r3, #18
 8004420:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004422:	2300      	movs	r3, #0
 8004424:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004426:	2303      	movs	r3, #3
 8004428:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800442a:	2304      	movs	r3, #4
 800442c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800442e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004432:	4619      	mov	r1, r3
 8004434:	4810      	ldr	r0, [pc, #64]	@ (8004478 <HAL_I2C_MspInit+0x168>)
 8004436:	f001 fc6d 	bl	8005d14 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800443a:	2300      	movs	r3, #0
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	4b09      	ldr	r3, [pc, #36]	@ (8004464 <HAL_I2C_MspInit+0x154>)
 8004440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004442:	4a08      	ldr	r2, [pc, #32]	@ (8004464 <HAL_I2C_MspInit+0x154>)
 8004444:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004448:	6413      	str	r3, [r2, #64]	@ 0x40
 800444a:	4b06      	ldr	r3, [pc, #24]	@ (8004464 <HAL_I2C_MspInit+0x154>)
 800444c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	68fb      	ldr	r3, [r7, #12]
}
 8004456:	bf00      	nop
 8004458:	3738      	adds	r7, #56	@ 0x38
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	40005400 	.word	0x40005400
 8004464:	40023800 	.word	0x40023800
 8004468:	40020400 	.word	0x40020400
 800446c:	40005800 	.word	0x40005800
 8004470:	40021400 	.word	0x40021400
 8004474:	40005c00 	.word	0x40005c00
 8004478:	40021c00 	.word	0x40021c00

0800447c <u8x8_stm32_gpio_and_delay>:

static u8g2_t u8g2;

uint8_t u8x8_stm32_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8,
U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int,
U8X8_UNUSED void *arg_ptr) {
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	607b      	str	r3, [r7, #4]
 8004486:	460b      	mov	r3, r1
 8004488:	72fb      	strb	r3, [r7, #11]
 800448a:	4613      	mov	r3, r2
 800448c:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 800448e:	7afb      	ldrb	r3, [r7, #11]
 8004490:	2b4b      	cmp	r3, #75	@ 0x4b
 8004492:	d01a      	beq.n	80044ca <u8x8_stm32_gpio_and_delay+0x4e>
 8004494:	2b4b      	cmp	r3, #75	@ 0x4b
 8004496:	dc1f      	bgt.n	80044d8 <u8x8_stm32_gpio_and_delay+0x5c>
 8004498:	2b4a      	cmp	r3, #74	@ 0x4a
 800449a:	d00f      	beq.n	80044bc <u8x8_stm32_gpio_and_delay+0x40>
 800449c:	2b4a      	cmp	r3, #74	@ 0x4a
 800449e:	dc1b      	bgt.n	80044d8 <u8x8_stm32_gpio_and_delay+0x5c>
 80044a0:	2b28      	cmp	r3, #40	@ 0x28
 80044a2:	d002      	beq.n	80044aa <u8x8_stm32_gpio_and_delay+0x2e>
 80044a4:	2b29      	cmp	r3, #41	@ 0x29
 80044a6:	d004      	beq.n	80044b2 <u8x8_stm32_gpio_and_delay+0x36>
 80044a8:	e016      	b.n	80044d8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		HAL_Delay(1);
 80044aa:	2001      	movs	r0, #1
 80044ac:	f000 ff36 	bl	800531c <HAL_Delay>
		break;
 80044b0:	e012      	b.n	80044d8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 80044b2:	7abb      	ldrb	r3, [r7, #10]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f000 ff31 	bl	800531c <HAL_Delay>
		break;
 80044ba:	e00d      	b.n	80044d8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_DC:
		HAL_GPIO_WritePin(DISPLAY_IO_2_GPIO_Port, DISPLAY_IO_2_Pin, arg_int);
 80044bc:	7abb      	ldrb	r3, [r7, #10]
 80044be:	461a      	mov	r2, r3
 80044c0:	2108      	movs	r1, #8
 80044c2:	4808      	ldr	r0, [pc, #32]	@ (80044e4 <u8x8_stm32_gpio_and_delay+0x68>)
 80044c4:	f001 fdd2 	bl	800606c <HAL_GPIO_WritePin>
		break;
 80044c8:	e006      	b.n	80044d8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_RESET:
		HAL_GPIO_WritePin(DISPLAY_IO_1_GPIO_Port, DISPLAY_IO_1_Pin, arg_int);
 80044ca:	7abb      	ldrb	r3, [r7, #10]
 80044cc:	461a      	mov	r2, r3
 80044ce:	2104      	movs	r1, #4
 80044d0:	4804      	ldr	r0, [pc, #16]	@ (80044e4 <u8x8_stm32_gpio_and_delay+0x68>)
 80044d2:	f001 fdcb 	bl	800606c <HAL_GPIO_WritePin>
		break;
 80044d6:	bf00      	nop
	}
	return 1;
 80044d8:	2301      	movs	r3, #1
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	40021800 	.word	0x40021800

080044e8 <u8x8_byte_4wire_hw_spi>:

uint8_t u8x8_byte_4wire_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	607b      	str	r3, [r7, #4]
 80044f2:	460b      	mov	r3, r1
 80044f4:	72fb      	strb	r3, [r7, #11]
 80044f6:	4613      	mov	r3, r2
 80044f8:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 80044fa:	7afb      	ldrb	r3, [r7, #11]
 80044fc:	3b14      	subs	r3, #20
 80044fe:	2b0c      	cmp	r3, #12
 8004500:	d83e      	bhi.n	8004580 <u8x8_byte_4wire_hw_spi+0x98>
 8004502:	a201      	add	r2, pc, #4	@ (adr r2, 8004508 <u8x8_byte_4wire_hw_spi+0x20>)
 8004504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004508:	08004585 	.word	0x08004585
 800450c:	08004581 	.word	0x08004581
 8004510:	08004581 	.word	0x08004581
 8004514:	0800453d 	.word	0x0800453d
 8004518:	0800455d 	.word	0x0800455d
 800451c:	0800456f 	.word	0x0800456f
 8004520:	08004581 	.word	0x08004581
 8004524:	08004581 	.word	0x08004581
 8004528:	08004581 	.word	0x08004581
 800452c:	08004581 	.word	0x08004581
 8004530:	08004581 	.word	0x08004581
 8004534:	08004581 	.word	0x08004581
 8004538:	0800454f 	.word	0x0800454f
	case U8X8_MSG_BYTE_SEND:
//		HAL_SPI_Transmit(hspi, pData, Size, Timeout)
		HAL_SPI_Transmit(&hspi3, (uint8_t*) arg_ptr, arg_int, 10000);
 800453c:	7abb      	ldrb	r3, [r7, #10]
 800453e:	b29a      	uxth	r2, r3
 8004540:	f242 7310 	movw	r3, #10000	@ 0x2710
 8004544:	6879      	ldr	r1, [r7, #4]
 8004546:	4812      	ldr	r0, [pc, #72]	@ (8004590 <u8x8_byte_4wire_hw_spi+0xa8>)
 8004548:	f003 ffdd 	bl	8008506 <HAL_SPI_Transmit>
		break;
 800454c:	e01b      	b.n	8004586 <u8x8_byte_4wire_hw_spi+0x9e>
	case U8X8_MSG_BYTE_INIT:
		break;
	case U8X8_MSG_BYTE_SET_DC:
		HAL_GPIO_WritePin(DISPLAY_IO_2_GPIO_Port, DISPLAY_IO_2_Pin, arg_int);
 800454e:	7abb      	ldrb	r3, [r7, #10]
 8004550:	461a      	mov	r2, r3
 8004552:	2108      	movs	r1, #8
 8004554:	480f      	ldr	r0, [pc, #60]	@ (8004594 <u8x8_byte_4wire_hw_spi+0xac>)
 8004556:	f001 fd89 	bl	800606c <HAL_GPIO_WritePin>
		break;
 800455a:	e014      	b.n	8004586 <u8x8_byte_4wire_hw_spi+0x9e>
	case U8X8_MSG_BYTE_START_TRANSFER:
		HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, u8x8->display_info->chip_enable_level);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	461a      	mov	r2, r3
 8004564:	2104      	movs	r1, #4
 8004566:	480c      	ldr	r0, [pc, #48]	@ (8004598 <u8x8_byte_4wire_hw_spi+0xb0>)
 8004568:	f001 fd80 	bl	800606c <HAL_GPIO_WritePin>
		break;
 800456c:	e00b      	b.n	8004586 <u8x8_byte_4wire_hw_spi+0x9e>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, u8x8->display_info->chip_disable_level);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	785b      	ldrb	r3, [r3, #1]
 8004574:	461a      	mov	r2, r3
 8004576:	2104      	movs	r1, #4
 8004578:	4807      	ldr	r0, [pc, #28]	@ (8004598 <u8x8_byte_4wire_hw_spi+0xb0>)
 800457a:	f001 fd77 	bl	800606c <HAL_GPIO_WritePin>
		break;
 800457e:	e002      	b.n	8004586 <u8x8_byte_4wire_hw_spi+0x9e>
	default:
		return 0;
 8004580:	2300      	movs	r3, #0
 8004582:	e001      	b.n	8004588 <u8x8_byte_4wire_hw_spi+0xa0>
		break;
 8004584:	bf00      	nop
	}
	return 1;
 8004586:	2301      	movs	r3, #1
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	20000950 	.word	0x20000950
 8004594:	40021800 	.word	0x40021800
 8004598:	40020c00 	.word	0x40020c00

0800459c <MainTitlePage>:
uint8_t errorline;

void MainTitlePage() {
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
	do {
		// Load and display the image
		u8g2_FirstPage(&u8g2);
 80045a0:	482b      	ldr	r0, [pc, #172]	@ (8004650 <MainTitlePage+0xb4>)
 80045a2:	f7fc fd22 	bl	8000fea <u8g2_FirstPage>
		do {
			// Draw your image using U8g2 functions
//			u8g2_DrawXBM(&u8g2, 0, 0, 128, 64, logo);
		} while (u8g2_NextPage(&u8g2));
 80045a6:	482a      	ldr	r0, [pc, #168]	@ (8004650 <MainTitlePage+0xb4>)
 80045a8:	f7fc fd33 	bl	8001012 <u8g2_NextPage>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1f9      	bne.n	80045a6 <MainTitlePage+0xa>

		// Wait for a moment to display the image
		HAL_Delay(500); // Adjust the delay time as needed
 80045b2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80045b6:	f000 feb1 	bl	800531c <HAL_Delay>

		// Clear the screen for the title page
		u8g2_ClearBuffer(&u8g2);
 80045ba:	4825      	ldr	r0, [pc, #148]	@ (8004650 <MainTitlePage+0xb4>)
 80045bc:	f7fc fc7c 	bl	8000eb8 <u8g2_ClearBuffer>

		u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 80045c0:	4924      	ldr	r1, [pc, #144]	@ (8004654 <MainTitlePage+0xb8>)
 80045c2:	4823      	ldr	r0, [pc, #140]	@ (8004650 <MainTitlePage+0xb4>)
 80045c4:	f7fd fb28 	bl	8001c18 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 42, 16, "VEGA");
 80045c8:	4b23      	ldr	r3, [pc, #140]	@ (8004658 <MainTitlePage+0xbc>)
 80045ca:	2210      	movs	r2, #16
 80045cc:	212a      	movs	r1, #42	@ 0x2a
 80045ce:	4820      	ldr	r0, [pc, #128]	@ (8004650 <MainTitlePage+0xb4>)
 80045d0:	f7fd fa80 	bl	8001ad4 <u8g2_DrawStr>
		u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 80045d4:	491f      	ldr	r1, [pc, #124]	@ (8004654 <MainTitlePage+0xb8>)
 80045d6:	481e      	ldr	r0, [pc, #120]	@ (8004650 <MainTitlePage+0xb4>)
 80045d8:	f7fd fb1e 	bl	8001c18 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 6, 33, "INNOVATIONS");
 80045dc:	4b1f      	ldr	r3, [pc, #124]	@ (800465c <MainTitlePage+0xc0>)
 80045de:	2221      	movs	r2, #33	@ 0x21
 80045e0:	2106      	movs	r1, #6
 80045e2:	481b      	ldr	r0, [pc, #108]	@ (8004650 <MainTitlePage+0xb4>)
 80045e4:	f7fd fa76 	bl	8001ad4 <u8g2_DrawStr>
		u8g2_SetFont(&u8g2, u8g2_font_wqy12_t_chinese3);
 80045e8:	491d      	ldr	r1, [pc, #116]	@ (8004660 <MainTitlePage+0xc4>)
 80045ea:	4819      	ldr	r0, [pc, #100]	@ (8004650 <MainTitlePage+0xb4>)
 80045ec:	f7fd fb14 	bl	8001c18 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 16, 50, "BMS-TESTBENCH");
 80045f0:	4b1c      	ldr	r3, [pc, #112]	@ (8004664 <MainTitlePage+0xc8>)
 80045f2:	2232      	movs	r2, #50	@ 0x32
 80045f4:	2110      	movs	r1, #16
 80045f6:	4816      	ldr	r0, [pc, #88]	@ (8004650 <MainTitlePage+0xb4>)
 80045f8:	f7fd fa6c 	bl	8001ad4 <u8g2_DrawStr>
		u8g2_SetFont(&u8g2, u8g2_font_tom_thumb_4x6_tr);
 80045fc:	491a      	ldr	r1, [pc, #104]	@ (8004668 <MainTitlePage+0xcc>)
 80045fe:	4814      	ldr	r0, [pc, #80]	@ (8004650 <MainTitlePage+0xb4>)
 8004600:	f7fd fb0a 	bl	8001c18 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 0, 62, "Last_Time_Lapse");
 8004604:	4b19      	ldr	r3, [pc, #100]	@ (800466c <MainTitlePage+0xd0>)
 8004606:	223e      	movs	r2, #62	@ 0x3e
 8004608:	2100      	movs	r1, #0
 800460a:	4811      	ldr	r0, [pc, #68]	@ (8004650 <MainTitlePage+0xb4>)
 800460c:	f7fd fa62 	bl	8001ad4 <u8g2_DrawStr>

	    u8g2_SetFont(&u8g2, u8g2_font_tom_thumb_4x6_tr);
 8004610:	4915      	ldr	r1, [pc, #84]	@ (8004668 <MainTitlePage+0xcc>)
 8004612:	480f      	ldr	r0, [pc, #60]	@ (8004650 <MainTitlePage+0xb4>)
 8004614:	f7fd fb00 	bl	8001c18 <u8g2_SetFont>
	    u8g2_DrawStr(&u8g2, 70, 62, "nnnnnnnn");
 8004618:	4b15      	ldr	r3, [pc, #84]	@ (8004670 <MainTitlePage+0xd4>)
 800461a:	223e      	movs	r2, #62	@ 0x3e
 800461c:	2146      	movs	r1, #70	@ 0x46
 800461e:	480c      	ldr	r0, [pc, #48]	@ (8004650 <MainTitlePage+0xb4>)
 8004620:	f7fd fa58 	bl	8001ad4 <u8g2_DrawStr>
	    u8g2_SendBuffer(&u8g2);
 8004624:	480a      	ldr	r0, [pc, #40]	@ (8004650 <MainTitlePage+0xb4>)
 8004626:	f7fc fcba 	bl	8000f9e <u8g2_SendBuffer>
	    u8g2_ClearBuffer(&u8g2);
 800462a:	4809      	ldr	r0, [pc, #36]	@ (8004650 <MainTitlePage+0xb4>)
 800462c:	f7fc fc44 	bl	8000eb8 <u8g2_ClearBuffer>

		HAL_Delay(1000);
 8004630:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004634:	f000 fe72 	bl	800531c <HAL_Delay>

	} while (u8g2_NextPage(&u8g2));
 8004638:	4805      	ldr	r0, [pc, #20]	@ (8004650 <MainTitlePage+0xb4>)
 800463a:	f7fc fcea 	bl	8001012 <u8g2_NextPage>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1ad      	bne.n	80045a0 <MainTitlePage+0x4>
	HAL_Delay(100);
 8004644:	2064      	movs	r0, #100	@ 0x64
 8004646:	f000 fe69 	bl	800531c <HAL_Delay>
}
 800464a:	bf00      	nop
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	200008bc 	.word	0x200008bc
 8004654:	08010628 	.word	0x08010628
 8004658:	0800ce20 	.word	0x0800ce20
 800465c:	0800ce28 	.word	0x0800ce28
 8004660:	0800d150 	.word	0x0800d150
 8004664:	0800ce34 	.word	0x0800ce34
 8004668:	0800ce88 	.word	0x0800ce88
 800466c:	0800ce44 	.word	0x0800ce44
 8004670:	0800ce54 	.word	0x0800ce54

08004674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b092      	sub	sp, #72	@ 0x48
 8004678:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800467a:	f000 fddd 	bl	8005238 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800467e:	f000 f899 	bl	80047b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004682:	f7ff fbcf 	bl	8003e24 <MX_GPIO_Init>
  MX_SPI3_Init();
 8004686:	f000 f93b 	bl	8004900 <MX_SPI3_Init>
  MX_I2C1_Init();
 800468a:	f7ff fd81 	bl	8004190 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800468e:	f000 fbf7 	bl	8004e80 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004692:	f000 fc1f 	bl	8004ed4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8004696:	f000 fc47 	bl	8004f28 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800469a:	f000 fc6f 	bl	8004f7c <MX_USART6_UART_Init>
  MX_CAN1_Init();
 800469e:	f7fe fdd7 	bl	8003250 <MX_CAN1_Init>
  MX_CAN2_Init();
 80046a2:	f7fe fe0b 	bl	80032bc <MX_CAN2_Init>
  MX_SPI4_Init();
 80046a6:	f000 f961 	bl	800496c <MX_SPI4_Init>
  MX_I2C2_Init();
 80046aa:	f7ff fdb1 	bl	8004210 <MX_I2C2_Init>
  MX_I2C3_Init();
 80046ae:	f7ff fdef 	bl	8004290 <MX_I2C3_Init>
  MX_FATFS_Init();
 80046b2:	f005 fc8f 	bl	8009fd4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  LED_Init();
 80046b6:	f7fe fa3d 	bl	8002b34 <LED_Init>

  EEPROM_Init();
 80046ba:	f7fe f9bb 	bl	8002a34 <EEPROM_Init>

  RS485_Init(RS485_CH1);
 80046be:	2000      	movs	r0, #0
 80046c0:	f7fe faa0 	bl	8002c04 <RS485_Init>
  RS485_Init(RS485_CH2);
 80046c4:	2001      	movs	r0, #1
 80046c6:	f7fe fa9d 	bl	8002c04 <RS485_Init>
  RS485_Init(RS485_CH3);
 80046ca:	2002      	movs	r0, #2
 80046cc:	f7fe fa9a 	bl	8002c04 <RS485_Init>
  RS485_Init(RS485_CH6);
 80046d0:	2003      	movs	r0, #3
 80046d2:	f7fe fa97 	bl	8002c04 <RS485_Init>
  HAL_UARTEx_ReceiveToIdle_IT(&huart1, rx_buffer, RS485_BUFFER_SIZE);
*/

//  HAL_UARTEx_ReceiveToIdle_IT(&huart6, RxData, 16);

  u8g2_Setup_st7565_64128n_f(&u8g2, U8G2_R2, u8x8_byte_4wire_hw_spi, u8x8_stm32_gpio_and_delay);
 80046d6:	4b31      	ldr	r3, [pc, #196]	@ (800479c <main+0x128>)
 80046d8:	4a31      	ldr	r2, [pc, #196]	@ (80047a0 <main+0x12c>)
 80046da:	4932      	ldr	r1, [pc, #200]	@ (80047a4 <main+0x130>)
 80046dc:	4832      	ldr	r0, [pc, #200]	@ (80047a8 <main+0x134>)
 80046de:	f7fc fceb 	bl	80010b8 <u8g2_Setup_st7565_64128n_f>

  u8g2_InitDisplay(&u8g2);
 80046e2:	4831      	ldr	r0, [pc, #196]	@ (80047a8 <main+0x134>)
 80046e4:	f7fe f8f6 	bl	80028d4 <u8x8_InitDisplay>
  u8g2_SetPowerSave(&u8g2, 0);
 80046e8:	2100      	movs	r1, #0
 80046ea:	482f      	ldr	r0, [pc, #188]	@ (80047a8 <main+0x134>)
 80046ec:	f7fe f901 	bl	80028f2 <u8x8_SetPowerSave>

  u8g2_ClearDisplay(&u8g2);
 80046f0:	482d      	ldr	r0, [pc, #180]	@ (80047a8 <main+0x134>)
 80046f2:	f7fc fcbc 	bl	800106e <u8g2_ClearDisplay>
  u8g2_SetContrast(&u8g2, 100);
 80046f6:	2164      	movs	r1, #100	@ 0x64
 80046f8:	482b      	ldr	r0, [pc, #172]	@ (80047a8 <main+0x134>)
 80046fa:	f7fe f90b 	bl	8002914 <u8x8_SetContrast>
  u8g2_FirstPage(&u8g2);
 80046fe:	482a      	ldr	r0, [pc, #168]	@ (80047a8 <main+0x134>)
 8004700:	f7fc fc73 	bl	8000fea <u8g2_FirstPage>
  u8g2_ClearDisplay(&u8g2);
 8004704:	4828      	ldr	r0, [pc, #160]	@ (80047a8 <main+0x134>)
 8004706:	f7fc fcb2 	bl	800106e <u8g2_ClearDisplay>

  u8g2_FirstPage(&u8g2);
 800470a:	4827      	ldr	r0, [pc, #156]	@ (80047a8 <main+0x134>)
 800470c:	f7fc fc6d 	bl	8000fea <u8g2_FirstPage>
  HAL_Delay(500);
 8004710:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004714:	f000 fe02 	bl	800531c <HAL_Delay>
  MainTitlePage();
 8004718:	f7ff ff40 	bl	800459c <MainTitlePage>
  u8g2_ClearBuffer(&u8g2);
 800471c:	4822      	ldr	r0, [pc, #136]	@ (80047a8 <main+0x134>)
 800471e:	f7fc fbcb 	bl	8000eb8 <u8g2_ClearBuffer>

  LED_SetAll(ON);
 8004722:	2001      	movs	r0, #1
 8004724:	f7fe fa46 	bl	8002bb4 <LED_SetAll>
  HAL_Delay(500);
 8004728:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800472c:	f000 fdf6 	bl	800531c <HAL_Delay>
  LED_SetAll(OFF);
 8004730:	2000      	movs	r0, #0
 8004732:	f7fe fa3f 	bl	8002bb4 <LED_SetAll>

  u8g2_ClearDisplay(&u8g2);
 8004736:	481c      	ldr	r0, [pc, #112]	@ (80047a8 <main+0x134>)
 8004738:	f7fc fc99 	bl	800106e <u8g2_ClearDisplay>
  u8g2_SetContrast(&u8g2, 100);
 800473c:	2164      	movs	r1, #100	@ 0x64
 800473e:	481a      	ldr	r0, [pc, #104]	@ (80047a8 <main+0x134>)
 8004740:	f7fe f8e8 	bl	8002914 <u8x8_SetContrast>
//	  LED_State(1, OFF);
//  }

//  LED_State(1, ON);

  RTC_Init(&hi2c1);
 8004744:	4819      	ldr	r0, [pc, #100]	@ (80047ac <main+0x138>)
 8004746:	f7fe fb8d 	bl	8002e64 <RTC_Init>
  RTC_TimeLapseInit();
 800474a:	f7fe fca5 	bl	8003098 <RTC_TimeLapseInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  RS485_Send(RS485_CH2, "Testing from USART2\r\n");
 800474e:	4918      	ldr	r1, [pc, #96]	@ (80047b0 <main+0x13c>)
 8004750:	2001      	movs	r0, #1
 8004752:	f7fe fa7b 	bl	8002c4c <RS485_Send>

      if(RS485_Available(RS485_CH3))
 8004756:	2002      	movs	r0, #2
 8004758:	f7fe fabe 	bl	8002cd8 <RS485_Available>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d016      	beq.n	8004790 <main+0x11c>
      {
          char buffer[64];
          uint16_t length = RS485_GetData(RS485_CH3, buffer);
 8004762:	1d3b      	adds	r3, r7, #4
 8004764:	4619      	mov	r1, r3
 8004766:	2002      	movs	r0, #2
 8004768:	f7fe facc 	bl	8002d04 <RS485_GetData>
 800476c:	4603      	mov	r3, r0
 800476e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if(length > 0)
 8004772:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <main+0x11c>
          {
              buffer[length] = '\0';  // Null terminate
 800477a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800477e:	3348      	adds	r3, #72	@ 0x48
 8004780:	443b      	add	r3, r7
 8004782:	2200      	movs	r2, #0
 8004784:	f803 2c44 	strb.w	r2, [r3, #-68]
              display_lcd(buffer);
 8004788:	1d3b      	adds	r3, r7, #4
 800478a:	4618      	mov	r0, r3
 800478c:	f000 f88c 	bl	80048a8 <display_lcd>
          }
      }

	  HAL_Delay(1000);
 8004790:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004794:	f000 fdc2 	bl	800531c <HAL_Delay>
	  RS485_Send(RS485_CH2, "Testing from USART2\r\n");
 8004798:	e7d9      	b.n	800474e <main+0xda>
 800479a:	bf00      	nop
 800479c:	0800447d 	.word	0x0800447d
 80047a0:	080044e9 	.word	0x080044e9
 80047a4:	08011280 	.word	0x08011280
 80047a8:	200008bc 	.word	0x200008bc
 80047ac:	200007c0 	.word	0x200007c0
 80047b0:	0800ce60 	.word	0x0800ce60

080047b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b094      	sub	sp, #80	@ 0x50
 80047b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80047ba:	f107 0320 	add.w	r3, r7, #32
 80047be:	2230      	movs	r2, #48	@ 0x30
 80047c0:	2100      	movs	r1, #0
 80047c2:	4618      	mov	r0, r3
 80047c4:	f006 fafd 	bl	800adc2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80047c8:	f107 030c 	add.w	r3, r7, #12
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	605a      	str	r2, [r3, #4]
 80047d2:	609a      	str	r2, [r3, #8]
 80047d4:	60da      	str	r2, [r3, #12]
 80047d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80047d8:	2300      	movs	r3, #0
 80047da:	60bb      	str	r3, [r7, #8]
 80047dc:	4b29      	ldr	r3, [pc, #164]	@ (8004884 <SystemClock_Config+0xd0>)
 80047de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e0:	4a28      	ldr	r2, [pc, #160]	@ (8004884 <SystemClock_Config+0xd0>)
 80047e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80047e8:	4b26      	ldr	r3, [pc, #152]	@ (8004884 <SystemClock_Config+0xd0>)
 80047ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047f0:	60bb      	str	r3, [r7, #8]
 80047f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80047f4:	2300      	movs	r3, #0
 80047f6:	607b      	str	r3, [r7, #4]
 80047f8:	4b23      	ldr	r3, [pc, #140]	@ (8004888 <SystemClock_Config+0xd4>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004800:	4a21      	ldr	r2, [pc, #132]	@ (8004888 <SystemClock_Config+0xd4>)
 8004802:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004806:	6013      	str	r3, [r2, #0]
 8004808:	4b1f      	ldr	r3, [pc, #124]	@ (8004888 <SystemClock_Config+0xd4>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004810:	607b      	str	r3, [r7, #4]
 8004812:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004814:	2301      	movs	r3, #1
 8004816:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004818:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800481c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800481e:	2302      	movs	r3, #2
 8004820:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004822:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004826:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8004828:	2319      	movs	r3, #25
 800482a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800482c:	2390      	movs	r3, #144	@ 0x90
 800482e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004830:	2302      	movs	r3, #2
 8004832:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004834:	2304      	movs	r3, #4
 8004836:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004838:	f107 0320 	add.w	r3, r7, #32
 800483c:	4618      	mov	r0, r3
 800483e:	f003 f981 	bl	8007b44 <HAL_RCC_OscConfig>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004848:	f000 f854 	bl	80048f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800484c:	230f      	movs	r3, #15
 800484e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004850:	2302      	movs	r3, #2
 8004852:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004854:	2300      	movs	r3, #0
 8004856:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004858:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800485c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800485e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004862:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004864:	f107 030c 	add.w	r3, r7, #12
 8004868:	2102      	movs	r1, #2
 800486a:	4618      	mov	r0, r3
 800486c:	f003 fbe2 	bl	8008034 <HAL_RCC_ClockConfig>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8004876:	f000 f83d 	bl	80048f4 <Error_Handler>
  }
}
 800487a:	bf00      	nop
 800487c:	3750      	adds	r7, #80	@ 0x50
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	40023800 	.word	0x40023800
 8004888:	40007000 	.word	0x40007000

0800488c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	4603      	mov	r3, r0
 8004894:	80fb      	strh	r3, [r7, #6]
    UNUSED(GPIO_Pin);
    Push_ButtonHandler(GPIO_Pin);
 8004896:	88fb      	ldrh	r3, [r7, #6]
 8004898:	4618      	mov	r0, r3
 800489a:	f7fe fca1 	bl	80031e0 <Push_ButtonHandler>
}
 800489e:	bf00      	nop
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
	...

080048a8 <display_lcd>:
    }
}
*/

void display_lcd(const char *message)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
	u8g2_FirstPage(&u8g2);
 80048b0:	480e      	ldr	r0, [pc, #56]	@ (80048ec <display_lcd+0x44>)
 80048b2:	f7fc fb9a 	bl	8000fea <u8g2_FirstPage>
	    do {
	    	u8g2_ClearBuffer(&u8g2);
 80048b6:	480d      	ldr	r0, [pc, #52]	@ (80048ec <display_lcd+0x44>)
 80048b8:	f7fc fafe 	bl	8000eb8 <u8g2_ClearBuffer>
			u8g2_SetFont(&u8g2, u8g2_font_wqy12_t_chinese3);
 80048bc:	490c      	ldr	r1, [pc, #48]	@ (80048f0 <display_lcd+0x48>)
 80048be:	480b      	ldr	r0, [pc, #44]	@ (80048ec <display_lcd+0x44>)
 80048c0:	f7fd f9aa 	bl	8001c18 <u8g2_SetFont>
			u8g2_DrawStr(&u8g2, 0, 30, message);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	221e      	movs	r2, #30
 80048c8:	2100      	movs	r1, #0
 80048ca:	4808      	ldr	r0, [pc, #32]	@ (80048ec <display_lcd+0x44>)
 80048cc:	f7fd f902 	bl	8001ad4 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 80048d0:	4806      	ldr	r0, [pc, #24]	@ (80048ec <display_lcd+0x44>)
 80048d2:	f7fc fb64 	bl	8000f9e <u8g2_SendBuffer>
	    } while (u8g2_NextPage(&u8g2));
 80048d6:	4805      	ldr	r0, [pc, #20]	@ (80048ec <display_lcd+0x44>)
 80048d8:	f7fc fb9b 	bl	8001012 <u8g2_NextPage>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1e9      	bne.n	80048b6 <display_lcd+0xe>
}
 80048e2:	bf00      	nop
 80048e4:	bf00      	nop
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	200008bc 	.word	0x200008bc
 80048f0:	0800d150 	.word	0x0800d150

080048f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80048f8:	b672      	cpsid	i
}
 80048fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80048fc:	bf00      	nop
 80048fe:	e7fd      	b.n	80048fc <Error_Handler+0x8>

08004900 <MX_SPI3_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi4;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8004904:	4b17      	ldr	r3, [pc, #92]	@ (8004964 <MX_SPI3_Init+0x64>)
 8004906:	4a18      	ldr	r2, [pc, #96]	@ (8004968 <MX_SPI3_Init+0x68>)
 8004908:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800490a:	4b16      	ldr	r3, [pc, #88]	@ (8004964 <MX_SPI3_Init+0x64>)
 800490c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004910:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004912:	4b14      	ldr	r3, [pc, #80]	@ (8004964 <MX_SPI3_Init+0x64>)
 8004914:	2200      	movs	r2, #0
 8004916:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004918:	4b12      	ldr	r3, [pc, #72]	@ (8004964 <MX_SPI3_Init+0x64>)
 800491a:	2200      	movs	r2, #0
 800491c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800491e:	4b11      	ldr	r3, [pc, #68]	@ (8004964 <MX_SPI3_Init+0x64>)
 8004920:	2200      	movs	r2, #0
 8004922:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004924:	4b0f      	ldr	r3, [pc, #60]	@ (8004964 <MX_SPI3_Init+0x64>)
 8004926:	2200      	movs	r2, #0
 8004928:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800492a:	4b0e      	ldr	r3, [pc, #56]	@ (8004964 <MX_SPI3_Init+0x64>)
 800492c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004930:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004932:	4b0c      	ldr	r3, [pc, #48]	@ (8004964 <MX_SPI3_Init+0x64>)
 8004934:	2218      	movs	r2, #24
 8004936:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004938:	4b0a      	ldr	r3, [pc, #40]	@ (8004964 <MX_SPI3_Init+0x64>)
 800493a:	2200      	movs	r2, #0
 800493c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800493e:	4b09      	ldr	r3, [pc, #36]	@ (8004964 <MX_SPI3_Init+0x64>)
 8004940:	2200      	movs	r2, #0
 8004942:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004944:	4b07      	ldr	r3, [pc, #28]	@ (8004964 <MX_SPI3_Init+0x64>)
 8004946:	2200      	movs	r2, #0
 8004948:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800494a:	4b06      	ldr	r3, [pc, #24]	@ (8004964 <MX_SPI3_Init+0x64>)
 800494c:	220a      	movs	r2, #10
 800494e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004950:	4804      	ldr	r0, [pc, #16]	@ (8004964 <MX_SPI3_Init+0x64>)
 8004952:	f003 fd4f 	bl	80083f4 <HAL_SPI_Init>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800495c:	f7ff ffca 	bl	80048f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004960:	bf00      	nop
 8004962:	bd80      	pop	{r7, pc}
 8004964:	20000950 	.word	0x20000950
 8004968:	40003c00 	.word	0x40003c00

0800496c <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8004970:	4b17      	ldr	r3, [pc, #92]	@ (80049d0 <MX_SPI4_Init+0x64>)
 8004972:	4a18      	ldr	r2, [pc, #96]	@ (80049d4 <MX_SPI4_Init+0x68>)
 8004974:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8004976:	4b16      	ldr	r3, [pc, #88]	@ (80049d0 <MX_SPI4_Init+0x64>)
 8004978:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800497c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800497e:	4b14      	ldr	r3, [pc, #80]	@ (80049d0 <MX_SPI4_Init+0x64>)
 8004980:	2200      	movs	r2, #0
 8004982:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8004984:	4b12      	ldr	r3, [pc, #72]	@ (80049d0 <MX_SPI4_Init+0x64>)
 8004986:	2200      	movs	r2, #0
 8004988:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800498a:	4b11      	ldr	r3, [pc, #68]	@ (80049d0 <MX_SPI4_Init+0x64>)
 800498c:	2202      	movs	r2, #2
 800498e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004990:	4b0f      	ldr	r3, [pc, #60]	@ (80049d0 <MX_SPI4_Init+0x64>)
 8004992:	2201      	movs	r2, #1
 8004994:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8004996:	4b0e      	ldr	r3, [pc, #56]	@ (80049d0 <MX_SPI4_Init+0x64>)
 8004998:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800499c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800499e:	4b0c      	ldr	r3, [pc, #48]	@ (80049d0 <MX_SPI4_Init+0x64>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80049a4:	4b0a      	ldr	r3, [pc, #40]	@ (80049d0 <MX_SPI4_Init+0x64>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80049aa:	4b09      	ldr	r3, [pc, #36]	@ (80049d0 <MX_SPI4_Init+0x64>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049b0:	4b07      	ldr	r3, [pc, #28]	@ (80049d0 <MX_SPI4_Init+0x64>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 80049b6:	4b06      	ldr	r3, [pc, #24]	@ (80049d0 <MX_SPI4_Init+0x64>)
 80049b8:	220a      	movs	r2, #10
 80049ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80049bc:	4804      	ldr	r0, [pc, #16]	@ (80049d0 <MX_SPI4_Init+0x64>)
 80049be:	f003 fd19 	bl	80083f4 <HAL_SPI_Init>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d001      	beq.n	80049cc <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 80049c8:	f7ff ff94 	bl	80048f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80049cc:	bf00      	nop
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	200009a8 	.word	0x200009a8
 80049d4:	40013400 	.word	0x40013400

080049d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b08c      	sub	sp, #48	@ 0x30
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049e0:	f107 031c 	add.w	r3, r7, #28
 80049e4:	2200      	movs	r2, #0
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	605a      	str	r2, [r3, #4]
 80049ea:	609a      	str	r2, [r3, #8]
 80049ec:	60da      	str	r2, [r3, #12]
 80049ee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a3b      	ldr	r2, [pc, #236]	@ (8004ae4 <HAL_SPI_MspInit+0x10c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d135      	bne.n	8004a66 <HAL_SPI_MspInit+0x8e>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80049fa:	2300      	movs	r3, #0
 80049fc:	61bb      	str	r3, [r7, #24]
 80049fe:	4b3a      	ldr	r3, [pc, #232]	@ (8004ae8 <HAL_SPI_MspInit+0x110>)
 8004a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a02:	4a39      	ldr	r2, [pc, #228]	@ (8004ae8 <HAL_SPI_MspInit+0x110>)
 8004a04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a08:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a0a:	4b37      	ldr	r3, [pc, #220]	@ (8004ae8 <HAL_SPI_MspInit+0x110>)
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a12:	61bb      	str	r3, [r7, #24]
 8004a14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a16:	2300      	movs	r3, #0
 8004a18:	617b      	str	r3, [r7, #20]
 8004a1a:	4b33      	ldr	r3, [pc, #204]	@ (8004ae8 <HAL_SPI_MspInit+0x110>)
 8004a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1e:	4a32      	ldr	r2, [pc, #200]	@ (8004ae8 <HAL_SPI_MspInit+0x110>)
 8004a20:	f043 0304 	orr.w	r3, r3, #4
 8004a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a26:	4b30      	ldr	r3, [pc, #192]	@ (8004ae8 <HAL_SPI_MspInit+0x110>)
 8004a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a2a:	f003 0304 	and.w	r3, r3, #4
 8004a2e:	617b      	str	r3, [r7, #20]
 8004a30:	697b      	ldr	r3, [r7, #20]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004a32:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8004a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a38:	2302      	movs	r3, #2
 8004a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a40:	2303      	movs	r3, #3
 8004a42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004a44:	2306      	movs	r3, #6
 8004a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a48:	f107 031c 	add.w	r3, r7, #28
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	4827      	ldr	r0, [pc, #156]	@ (8004aec <HAL_SPI_MspInit+0x114>)
 8004a50:	f001 f960 	bl	8005d14 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8004a54:	2200      	movs	r2, #0
 8004a56:	2100      	movs	r1, #0
 8004a58:	2033      	movs	r0, #51	@ 0x33
 8004a5a:	f001 f892 	bl	8005b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8004a5e:	2033      	movs	r0, #51	@ 0x33
 8004a60:	f001 f8ab 	bl	8005bba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8004a64:	e039      	b.n	8004ada <HAL_SPI_MspInit+0x102>
  else if(spiHandle->Instance==SPI4)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a21      	ldr	r2, [pc, #132]	@ (8004af0 <HAL_SPI_MspInit+0x118>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d134      	bne.n	8004ada <HAL_SPI_MspInit+0x102>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8004a70:	2300      	movs	r3, #0
 8004a72:	613b      	str	r3, [r7, #16]
 8004a74:	4b1c      	ldr	r3, [pc, #112]	@ (8004ae8 <HAL_SPI_MspInit+0x110>)
 8004a76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a78:	4a1b      	ldr	r2, [pc, #108]	@ (8004ae8 <HAL_SPI_MspInit+0x110>)
 8004a7a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004a7e:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a80:	4b19      	ldr	r3, [pc, #100]	@ (8004ae8 <HAL_SPI_MspInit+0x110>)
 8004a82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a88:	613b      	str	r3, [r7, #16]
 8004a8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	4b15      	ldr	r3, [pc, #84]	@ (8004ae8 <HAL_SPI_MspInit+0x110>)
 8004a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a94:	4a14      	ldr	r2, [pc, #80]	@ (8004ae8 <HAL_SPI_MspInit+0x110>)
 8004a96:	f043 0310 	orr.w	r3, r3, #16
 8004a9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a9c:	4b12      	ldr	r3, [pc, #72]	@ (8004ae8 <HAL_SPI_MspInit+0x110>)
 8004a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa0:	f003 0310 	and.w	r3, r3, #16
 8004aa4:	60fb      	str	r3, [r7, #12]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8004aa8:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8004aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aae:	2302      	movs	r3, #2
 8004ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8004aba:	2305      	movs	r3, #5
 8004abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004abe:	f107 031c 	add.w	r3, r7, #28
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	480b      	ldr	r0, [pc, #44]	@ (8004af4 <HAL_SPI_MspInit+0x11c>)
 8004ac6:	f001 f925 	bl	8005d14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8004aca:	2200      	movs	r2, #0
 8004acc:	2100      	movs	r1, #0
 8004ace:	2054      	movs	r0, #84	@ 0x54
 8004ad0:	f001 f857 	bl	8005b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8004ad4:	2054      	movs	r0, #84	@ 0x54
 8004ad6:	f001 f870 	bl	8005bba <HAL_NVIC_EnableIRQ>
}
 8004ada:	bf00      	nop
 8004adc:	3730      	adds	r7, #48	@ 0x30
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	40003c00 	.word	0x40003c00
 8004ae8:	40023800 	.word	0x40023800
 8004aec:	40020800 	.word	0x40020800
 8004af0:	40013400 	.word	0x40013400
 8004af4:	40021000 	.word	0x40021000

08004af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004afe:	2300      	movs	r3, #0
 8004b00:	607b      	str	r3, [r7, #4]
 8004b02:	4b10      	ldr	r3, [pc, #64]	@ (8004b44 <HAL_MspInit+0x4c>)
 8004b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b06:	4a0f      	ldr	r2, [pc, #60]	@ (8004b44 <HAL_MspInit+0x4c>)
 8004b08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004b44 <HAL_MspInit+0x4c>)
 8004b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b16:	607b      	str	r3, [r7, #4]
 8004b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	603b      	str	r3, [r7, #0]
 8004b1e:	4b09      	ldr	r3, [pc, #36]	@ (8004b44 <HAL_MspInit+0x4c>)
 8004b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b22:	4a08      	ldr	r2, [pc, #32]	@ (8004b44 <HAL_MspInit+0x4c>)
 8004b24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b28:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b2a:	4b06      	ldr	r3, [pc, #24]	@ (8004b44 <HAL_MspInit+0x4c>)
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b32:	603b      	str	r3, [r7, #0]
 8004b34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b36:	bf00      	nop
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	40023800 	.word	0x40023800

08004b48 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8004b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8004b88 <SDTimer_Handler+0x40>)
 8004b4e:	881b      	ldrh	r3, [r3, #0]
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d006      	beq.n	8004b64 <SDTimer_Handler+0x1c>
    Timer1--;
 8004b56:	4b0c      	ldr	r3, [pc, #48]	@ (8004b88 <SDTimer_Handler+0x40>)
 8004b58:	881b      	ldrh	r3, [r3, #0]
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	4b09      	ldr	r3, [pc, #36]	@ (8004b88 <SDTimer_Handler+0x40>)
 8004b62:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8004b64:	4b09      	ldr	r3, [pc, #36]	@ (8004b8c <SDTimer_Handler+0x44>)
 8004b66:	881b      	ldrh	r3, [r3, #0]
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d006      	beq.n	8004b7c <SDTimer_Handler+0x34>
    Timer2--;
 8004b6e:	4b07      	ldr	r3, [pc, #28]	@ (8004b8c <SDTimer_Handler+0x44>)
 8004b70:	881b      	ldrh	r3, [r3, #0]
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	3b01      	subs	r3, #1
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	4b04      	ldr	r3, [pc, #16]	@ (8004b8c <SDTimer_Handler+0x44>)
 8004b7a:	801a      	strh	r2, [r3, #0]
}
 8004b7c:	bf00      	nop
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	20000a02 	.word	0x20000a02
 8004b8c:	20000a04 	.word	0x20000a04

08004b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b90:	b480      	push	{r7}
 8004b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004b94:	bf00      	nop
 8004b96:	e7fd      	b.n	8004b94 <NMI_Handler+0x4>

08004b98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b9c:	bf00      	nop
 8004b9e:	e7fd      	b.n	8004b9c <HardFault_Handler+0x4>

08004ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ba4:	bf00      	nop
 8004ba6:	e7fd      	b.n	8004ba4 <MemManage_Handler+0x4>

08004ba8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004bac:	bf00      	nop
 8004bae:	e7fd      	b.n	8004bac <BusFault_Handler+0x4>

08004bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004bb4:	bf00      	nop
 8004bb6:	e7fd      	b.n	8004bb4 <UsageFault_Handler+0x4>

08004bb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004bbc:	bf00      	nop
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004bca:	bf00      	nop
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004bd8:	bf00      	nop
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
	...

08004be4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	if(FatFsCnt >= 10)
 8004be8:	4b06      	ldr	r3, [pc, #24]	@ (8004c04 <SysTick_Handler+0x20>)
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b09      	cmp	r3, #9
 8004bf0:	d904      	bls.n	8004bfc <SysTick_Handler+0x18>
	{
		FatFsCnt = 0;
 8004bf2:	4b04      	ldr	r3, [pc, #16]	@ (8004c04 <SysTick_Handler+0x20>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8004bf8:	f7ff ffa6 	bl	8004b48 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004bfc:	f000 fb6e 	bl	80052dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c00:	bf00      	nop
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	20000a00 	.word	0x20000a00

08004c08 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004c0c:	4802      	ldr	r0, [pc, #8]	@ (8004c18 <CAN1_RX0_IRQHandler+0x10>)
 8004c0e:	f000 fca4 	bl	800555a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004c12:	bf00      	nop
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	20000768 	.word	0x20000768

08004c1c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004c20:	4802      	ldr	r0, [pc, #8]	@ (8004c2c <CAN1_RX1_IRQHandler+0x10>)
 8004c22:	f000 fc9a 	bl	800555a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8004c26:	bf00      	nop
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	20000768 	.word	0x20000768

08004c30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004c34:	4802      	ldr	r0, [pc, #8]	@ (8004c40 <USART1_IRQHandler+0x10>)
 8004c36:	f004 fa79 	bl	800912c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004c3a:	bf00      	nop
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	20000a0c 	.word	0x20000a0c

08004c44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004c48:	4802      	ldr	r0, [pc, #8]	@ (8004c54 <USART2_IRQHandler+0x10>)
 8004c4a:	f004 fa6f 	bl	800912c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004c4e:	bf00      	nop
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	20000a54 	.word	0x20000a54

08004c58 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004c5c:	4802      	ldr	r0, [pc, #8]	@ (8004c68 <USART3_IRQHandler+0x10>)
 8004c5e:	f004 fa65 	bl	800912c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004c62:	bf00      	nop
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	20000a9c 	.word	0x20000a9c

08004c6c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_01_Pin);
 8004c70:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004c74:	f001 fa2e 	bl	80060d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_02_Pin);
 8004c78:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004c7c:	f001 fa2a 	bl	80060d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_03_Pin);
 8004c80:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004c84:	f001 fa26 	bl	80060d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_04_Pin);
 8004c88:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004c8c:	f001 fa22 	bl	80060d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004c90:	bf00      	nop
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8004c98:	4802      	ldr	r0, [pc, #8]	@ (8004ca4 <SPI3_IRQHandler+0x10>)
 8004c9a:	f003 ff21 	bl	8008ae0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8004c9e:	bf00      	nop
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	20000950 	.word	0x20000950

08004ca8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004cac:	4802      	ldr	r0, [pc, #8]	@ (8004cb8 <USART6_IRQHandler+0x10>)
 8004cae:	f004 fa3d 	bl	800912c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004cb2:	bf00      	nop
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	20000ae4 	.word	0x20000ae4

08004cbc <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8004cc0:	4802      	ldr	r0, [pc, #8]	@ (8004ccc <SPI4_IRQHandler+0x10>)
 8004cc2:	f003 ff0d 	bl	8008ae0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8004cc6:	bf00      	nop
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	200009a8 	.word	0x200009a8

08004cd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
  return 1;
 8004cd4:	2301      	movs	r3, #1
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <_kill>:

int _kill(int pid, int sig)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004cea:	f006 f8cd 	bl	800ae88 <__errno>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2216      	movs	r2, #22
 8004cf2:	601a      	str	r2, [r3, #0]
  return -1;
 8004cf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <_exit>:

void _exit (int status)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004d08:	f04f 31ff 	mov.w	r1, #4294967295
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f7ff ffe7 	bl	8004ce0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004d12:	bf00      	nop
 8004d14:	e7fd      	b.n	8004d12 <_exit+0x12>

08004d16 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b086      	sub	sp, #24
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	60f8      	str	r0, [r7, #12]
 8004d1e:	60b9      	str	r1, [r7, #8]
 8004d20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d22:	2300      	movs	r3, #0
 8004d24:	617b      	str	r3, [r7, #20]
 8004d26:	e00a      	b.n	8004d3e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004d28:	f3af 8000 	nop.w
 8004d2c:	4601      	mov	r1, r0
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	60ba      	str	r2, [r7, #8]
 8004d34:	b2ca      	uxtb	r2, r1
 8004d36:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	617b      	str	r3, [r7, #20]
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	dbf0      	blt.n	8004d28 <_read+0x12>
  }

  return len;
 8004d46:	687b      	ldr	r3, [r7, #4]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3718      	adds	r7, #24
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	617b      	str	r3, [r7, #20]
 8004d60:	e009      	b.n	8004d76 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	1c5a      	adds	r2, r3, #1
 8004d66:	60ba      	str	r2, [r7, #8]
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	3301      	adds	r3, #1
 8004d74:	617b      	str	r3, [r7, #20]
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	dbf1      	blt.n	8004d62 <_write+0x12>
  }
  return len;
 8004d7e:	687b      	ldr	r3, [r7, #4]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3718      	adds	r7, #24
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <_close>:

int _close(int file)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004d90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004db0:	605a      	str	r2, [r3, #4]
  return 0;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <_isatty>:

int _isatty(int file)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004dc8:	2301      	movs	r3, #1
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b085      	sub	sp, #20
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	60f8      	str	r0, [r7, #12]
 8004dde:	60b9      	str	r1, [r7, #8]
 8004de0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3714      	adds	r7, #20
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004df8:	4a14      	ldr	r2, [pc, #80]	@ (8004e4c <_sbrk+0x5c>)
 8004dfa:	4b15      	ldr	r3, [pc, #84]	@ (8004e50 <_sbrk+0x60>)
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e04:	4b13      	ldr	r3, [pc, #76]	@ (8004e54 <_sbrk+0x64>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d102      	bne.n	8004e12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004e0c:	4b11      	ldr	r3, [pc, #68]	@ (8004e54 <_sbrk+0x64>)
 8004e0e:	4a12      	ldr	r2, [pc, #72]	@ (8004e58 <_sbrk+0x68>)
 8004e10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e12:	4b10      	ldr	r3, [pc, #64]	@ (8004e54 <_sbrk+0x64>)
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4413      	add	r3, r2
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d207      	bcs.n	8004e30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004e20:	f006 f832 	bl	800ae88 <__errno>
 8004e24:	4603      	mov	r3, r0
 8004e26:	220c      	movs	r2, #12
 8004e28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e2e:	e009      	b.n	8004e44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004e30:	4b08      	ldr	r3, [pc, #32]	@ (8004e54 <_sbrk+0x64>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004e36:	4b07      	ldr	r3, [pc, #28]	@ (8004e54 <_sbrk+0x64>)
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	4a05      	ldr	r2, [pc, #20]	@ (8004e54 <_sbrk+0x64>)
 8004e40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004e42:	68fb      	ldr	r3, [r7, #12]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3718      	adds	r7, #24
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	20030000 	.word	0x20030000
 8004e50:	00000400 	.word	0x00000400
 8004e54:	20000a08 	.word	0x20000a08
 8004e58:	20000c90 	.word	0x20000c90

08004e5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004e60:	4b06      	ldr	r3, [pc, #24]	@ (8004e7c <SystemInit+0x20>)
 8004e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e66:	4a05      	ldr	r2, [pc, #20]	@ (8004e7c <SystemInit+0x20>)
 8004e68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004e6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004e70:	bf00      	nop
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	e000ed00 	.word	0xe000ed00

08004e80 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004e84:	4b11      	ldr	r3, [pc, #68]	@ (8004ecc <MX_USART1_UART_Init+0x4c>)
 8004e86:	4a12      	ldr	r2, [pc, #72]	@ (8004ed0 <MX_USART1_UART_Init+0x50>)
 8004e88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004e8a:	4b10      	ldr	r3, [pc, #64]	@ (8004ecc <MX_USART1_UART_Init+0x4c>)
 8004e8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004e90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004e92:	4b0e      	ldr	r3, [pc, #56]	@ (8004ecc <MX_USART1_UART_Init+0x4c>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004e98:	4b0c      	ldr	r3, [pc, #48]	@ (8004ecc <MX_USART1_UART_Init+0x4c>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004ecc <MX_USART1_UART_Init+0x4c>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004ea4:	4b09      	ldr	r3, [pc, #36]	@ (8004ecc <MX_USART1_UART_Init+0x4c>)
 8004ea6:	220c      	movs	r2, #12
 8004ea8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004eaa:	4b08      	ldr	r3, [pc, #32]	@ (8004ecc <MX_USART1_UART_Init+0x4c>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004eb0:	4b06      	ldr	r3, [pc, #24]	@ (8004ecc <MX_USART1_UART_Init+0x4c>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004eb6:	4805      	ldr	r0, [pc, #20]	@ (8004ecc <MX_USART1_UART_Init+0x4c>)
 8004eb8:	f004 f800 	bl	8008ebc <HAL_UART_Init>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d001      	beq.n	8004ec6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004ec2:	f7ff fd17 	bl	80048f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004ec6:	bf00      	nop
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	20000a0c 	.word	0x20000a0c
 8004ed0:	40011000 	.word	0x40011000

08004ed4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004ed8:	4b11      	ldr	r3, [pc, #68]	@ (8004f20 <MX_USART2_UART_Init+0x4c>)
 8004eda:	4a12      	ldr	r2, [pc, #72]	@ (8004f24 <MX_USART2_UART_Init+0x50>)
 8004edc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004ede:	4b10      	ldr	r3, [pc, #64]	@ (8004f20 <MX_USART2_UART_Init+0x4c>)
 8004ee0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004ee4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8004f20 <MX_USART2_UART_Init+0x4c>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004eec:	4b0c      	ldr	r3, [pc, #48]	@ (8004f20 <MX_USART2_UART_Init+0x4c>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8004f20 <MX_USART2_UART_Init+0x4c>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004ef8:	4b09      	ldr	r3, [pc, #36]	@ (8004f20 <MX_USART2_UART_Init+0x4c>)
 8004efa:	220c      	movs	r2, #12
 8004efc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004efe:	4b08      	ldr	r3, [pc, #32]	@ (8004f20 <MX_USART2_UART_Init+0x4c>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f04:	4b06      	ldr	r3, [pc, #24]	@ (8004f20 <MX_USART2_UART_Init+0x4c>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004f0a:	4805      	ldr	r0, [pc, #20]	@ (8004f20 <MX_USART2_UART_Init+0x4c>)
 8004f0c:	f003 ffd6 	bl	8008ebc <HAL_UART_Init>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d001      	beq.n	8004f1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004f16:	f7ff fced 	bl	80048f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004f1a:	bf00      	nop
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	20000a54 	.word	0x20000a54
 8004f24:	40004400 	.word	0x40004400

08004f28 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004f2c:	4b11      	ldr	r3, [pc, #68]	@ (8004f74 <MX_USART3_UART_Init+0x4c>)
 8004f2e:	4a12      	ldr	r2, [pc, #72]	@ (8004f78 <MX_USART3_UART_Init+0x50>)
 8004f30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004f32:	4b10      	ldr	r3, [pc, #64]	@ (8004f74 <MX_USART3_UART_Init+0x4c>)
 8004f34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004f38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8004f74 <MX_USART3_UART_Init+0x4c>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004f40:	4b0c      	ldr	r3, [pc, #48]	@ (8004f74 <MX_USART3_UART_Init+0x4c>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004f46:	4b0b      	ldr	r3, [pc, #44]	@ (8004f74 <MX_USART3_UART_Init+0x4c>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004f4c:	4b09      	ldr	r3, [pc, #36]	@ (8004f74 <MX_USART3_UART_Init+0x4c>)
 8004f4e:	220c      	movs	r2, #12
 8004f50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f52:	4b08      	ldr	r3, [pc, #32]	@ (8004f74 <MX_USART3_UART_Init+0x4c>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f58:	4b06      	ldr	r3, [pc, #24]	@ (8004f74 <MX_USART3_UART_Init+0x4c>)
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004f5e:	4805      	ldr	r0, [pc, #20]	@ (8004f74 <MX_USART3_UART_Init+0x4c>)
 8004f60:	f003 ffac 	bl	8008ebc <HAL_UART_Init>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d001      	beq.n	8004f6e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004f6a:	f7ff fcc3 	bl	80048f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004f6e:	bf00      	nop
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	20000a9c 	.word	0x20000a9c
 8004f78:	40004800 	.word	0x40004800

08004f7c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004f80:	4b11      	ldr	r3, [pc, #68]	@ (8004fc8 <MX_USART6_UART_Init+0x4c>)
 8004f82:	4a12      	ldr	r2, [pc, #72]	@ (8004fcc <MX_USART6_UART_Init+0x50>)
 8004f84:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004f86:	4b10      	ldr	r3, [pc, #64]	@ (8004fc8 <MX_USART6_UART_Init+0x4c>)
 8004f88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004f8c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8004fc8 <MX_USART6_UART_Init+0x4c>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004f94:	4b0c      	ldr	r3, [pc, #48]	@ (8004fc8 <MX_USART6_UART_Init+0x4c>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004fc8 <MX_USART6_UART_Init+0x4c>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004fa0:	4b09      	ldr	r3, [pc, #36]	@ (8004fc8 <MX_USART6_UART_Init+0x4c>)
 8004fa2:	220c      	movs	r2, #12
 8004fa4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004fa6:	4b08      	ldr	r3, [pc, #32]	@ (8004fc8 <MX_USART6_UART_Init+0x4c>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004fac:	4b06      	ldr	r3, [pc, #24]	@ (8004fc8 <MX_USART6_UART_Init+0x4c>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004fb2:	4805      	ldr	r0, [pc, #20]	@ (8004fc8 <MX_USART6_UART_Init+0x4c>)
 8004fb4:	f003 ff82 	bl	8008ebc <HAL_UART_Init>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004fbe:	f7ff fc99 	bl	80048f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004fc2:	bf00      	nop
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20000ae4 	.word	0x20000ae4
 8004fcc:	40011400 	.word	0x40011400

08004fd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b090      	sub	sp, #64	@ 0x40
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004fdc:	2200      	movs	r2, #0
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	605a      	str	r2, [r3, #4]
 8004fe2:	609a      	str	r2, [r3, #8]
 8004fe4:	60da      	str	r2, [r3, #12]
 8004fe6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a74      	ldr	r2, [pc, #464]	@ (80051c0 <HAL_UART_MspInit+0x1f0>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d134      	bne.n	800505c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ff6:	4b73      	ldr	r3, [pc, #460]	@ (80051c4 <HAL_UART_MspInit+0x1f4>)
 8004ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ffa:	4a72      	ldr	r2, [pc, #456]	@ (80051c4 <HAL_UART_MspInit+0x1f4>)
 8004ffc:	f043 0310 	orr.w	r3, r3, #16
 8005000:	6453      	str	r3, [r2, #68]	@ 0x44
 8005002:	4b70      	ldr	r3, [pc, #448]	@ (80051c4 <HAL_UART_MspInit+0x1f4>)
 8005004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005006:	f003 0310 	and.w	r3, r3, #16
 800500a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800500c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800500e:	2300      	movs	r3, #0
 8005010:	627b      	str	r3, [r7, #36]	@ 0x24
 8005012:	4b6c      	ldr	r3, [pc, #432]	@ (80051c4 <HAL_UART_MspInit+0x1f4>)
 8005014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005016:	4a6b      	ldr	r2, [pc, #428]	@ (80051c4 <HAL_UART_MspInit+0x1f4>)
 8005018:	f043 0302 	orr.w	r3, r3, #2
 800501c:	6313      	str	r3, [r2, #48]	@ 0x30
 800501e:	4b69      	ldr	r3, [pc, #420]	@ (80051c4 <HAL_UART_MspInit+0x1f4>)
 8005020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	627b      	str	r3, [r7, #36]	@ 0x24
 8005028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800502a:	23c0      	movs	r3, #192	@ 0xc0
 800502c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800502e:	2302      	movs	r3, #2
 8005030:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005032:	2300      	movs	r3, #0
 8005034:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005036:	2303      	movs	r3, #3
 8005038:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800503a:	2307      	movs	r3, #7
 800503c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800503e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005042:	4619      	mov	r1, r3
 8005044:	4860      	ldr	r0, [pc, #384]	@ (80051c8 <HAL_UART_MspInit+0x1f8>)
 8005046:	f000 fe65 	bl	8005d14 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800504a:	2200      	movs	r2, #0
 800504c:	2100      	movs	r1, #0
 800504e:	2025      	movs	r0, #37	@ 0x25
 8005050:	f000 fd97 	bl	8005b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005054:	2025      	movs	r0, #37	@ 0x25
 8005056:	f000 fdb0 	bl	8005bba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800505a:	e0ad      	b.n	80051b8 <HAL_UART_MspInit+0x1e8>
  else if(uartHandle->Instance==USART2)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a5a      	ldr	r2, [pc, #360]	@ (80051cc <HAL_UART_MspInit+0x1fc>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d134      	bne.n	80050d0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005066:	2300      	movs	r3, #0
 8005068:	623b      	str	r3, [r7, #32]
 800506a:	4b56      	ldr	r3, [pc, #344]	@ (80051c4 <HAL_UART_MspInit+0x1f4>)
 800506c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506e:	4a55      	ldr	r2, [pc, #340]	@ (80051c4 <HAL_UART_MspInit+0x1f4>)
 8005070:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005074:	6413      	str	r3, [r2, #64]	@ 0x40
 8005076:	4b53      	ldr	r3, [pc, #332]	@ (80051c4 <HAL_UART_MspInit+0x1f4>)
 8005078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800507e:	623b      	str	r3, [r7, #32]
 8005080:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005082:	2300      	movs	r3, #0
 8005084:	61fb      	str	r3, [r7, #28]
 8005086:	4b4f      	ldr	r3, [pc, #316]	@ (80051c4 <HAL_UART_MspInit+0x1f4>)
 8005088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800508a:	4a4e      	ldr	r2, [pc, #312]	@ (80051c4 <HAL_UART_MspInit+0x1f4>)
 800508c:	f043 0301 	orr.w	r3, r3, #1
 8005090:	6313      	str	r3, [r2, #48]	@ 0x30
 8005092:	4b4c      	ldr	r3, [pc, #304]	@ (80051c4 <HAL_UART_MspInit+0x1f4>)
 8005094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	61fb      	str	r3, [r7, #28]
 800509c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800509e:	230c      	movs	r3, #12
 80050a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050a2:	2302      	movs	r3, #2
 80050a4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a6:	2300      	movs	r3, #0
 80050a8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050aa:	2303      	movs	r3, #3
 80050ac:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80050ae:	2307      	movs	r3, #7
 80050b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80050b6:	4619      	mov	r1, r3
 80050b8:	4845      	ldr	r0, [pc, #276]	@ (80051d0 <HAL_UART_MspInit+0x200>)
 80050ba:	f000 fe2b 	bl	8005d14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80050be:	2200      	movs	r2, #0
 80050c0:	2100      	movs	r1, #0
 80050c2:	2026      	movs	r0, #38	@ 0x26
 80050c4:	f000 fd5d 	bl	8005b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80050c8:	2026      	movs	r0, #38	@ 0x26
 80050ca:	f000 fd76 	bl	8005bba <HAL_NVIC_EnableIRQ>
}
 80050ce:	e073      	b.n	80051b8 <HAL_UART_MspInit+0x1e8>
  else if(uartHandle->Instance==USART3)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a3f      	ldr	r2, [pc, #252]	@ (80051d4 <HAL_UART_MspInit+0x204>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d135      	bne.n	8005146 <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 80050da:	2300      	movs	r3, #0
 80050dc:	61bb      	str	r3, [r7, #24]
 80050de:	4b39      	ldr	r3, [pc, #228]	@ (80051c4 <HAL_UART_MspInit+0x1f4>)
 80050e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e2:	4a38      	ldr	r2, [pc, #224]	@ (80051c4 <HAL_UART_MspInit+0x1f4>)
 80050e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80050ea:	4b36      	ldr	r3, [pc, #216]	@ (80051c4 <HAL_UART_MspInit+0x1f4>)
 80050ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050f2:	61bb      	str	r3, [r7, #24]
 80050f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80050f6:	2300      	movs	r3, #0
 80050f8:	617b      	str	r3, [r7, #20]
 80050fa:	4b32      	ldr	r3, [pc, #200]	@ (80051c4 <HAL_UART_MspInit+0x1f4>)
 80050fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050fe:	4a31      	ldr	r2, [pc, #196]	@ (80051c4 <HAL_UART_MspInit+0x1f4>)
 8005100:	f043 0308 	orr.w	r3, r3, #8
 8005104:	6313      	str	r3, [r2, #48]	@ 0x30
 8005106:	4b2f      	ldr	r3, [pc, #188]	@ (80051c4 <HAL_UART_MspInit+0x1f4>)
 8005108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800510a:	f003 0308 	and.w	r3, r3, #8
 800510e:	617b      	str	r3, [r7, #20]
 8005110:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005112:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005116:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005118:	2302      	movs	r3, #2
 800511a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800511c:	2300      	movs	r3, #0
 800511e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005120:	2303      	movs	r3, #3
 8005122:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005124:	2307      	movs	r3, #7
 8005126:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005128:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800512c:	4619      	mov	r1, r3
 800512e:	482a      	ldr	r0, [pc, #168]	@ (80051d8 <HAL_UART_MspInit+0x208>)
 8005130:	f000 fdf0 	bl	8005d14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005134:	2200      	movs	r2, #0
 8005136:	2100      	movs	r1, #0
 8005138:	2027      	movs	r0, #39	@ 0x27
 800513a:	f000 fd22 	bl	8005b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800513e:	2027      	movs	r0, #39	@ 0x27
 8005140:	f000 fd3b 	bl	8005bba <HAL_NVIC_EnableIRQ>
}
 8005144:	e038      	b.n	80051b8 <HAL_UART_MspInit+0x1e8>
  else if(uartHandle->Instance==USART6)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a24      	ldr	r2, [pc, #144]	@ (80051dc <HAL_UART_MspInit+0x20c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d133      	bne.n	80051b8 <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005150:	2300      	movs	r3, #0
 8005152:	613b      	str	r3, [r7, #16]
 8005154:	4b1b      	ldr	r3, [pc, #108]	@ (80051c4 <HAL_UART_MspInit+0x1f4>)
 8005156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005158:	4a1a      	ldr	r2, [pc, #104]	@ (80051c4 <HAL_UART_MspInit+0x1f4>)
 800515a:	f043 0320 	orr.w	r3, r3, #32
 800515e:	6453      	str	r3, [r2, #68]	@ 0x44
 8005160:	4b18      	ldr	r3, [pc, #96]	@ (80051c4 <HAL_UART_MspInit+0x1f4>)
 8005162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005164:	f003 0320 	and.w	r3, r3, #32
 8005168:	613b      	str	r3, [r7, #16]
 800516a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800516c:	2300      	movs	r3, #0
 800516e:	60fb      	str	r3, [r7, #12]
 8005170:	4b14      	ldr	r3, [pc, #80]	@ (80051c4 <HAL_UART_MspInit+0x1f4>)
 8005172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005174:	4a13      	ldr	r2, [pc, #76]	@ (80051c4 <HAL_UART_MspInit+0x1f4>)
 8005176:	f043 0304 	orr.w	r3, r3, #4
 800517a:	6313      	str	r3, [r2, #48]	@ 0x30
 800517c:	4b11      	ldr	r3, [pc, #68]	@ (80051c4 <HAL_UART_MspInit+0x1f4>)
 800517e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	60fb      	str	r3, [r7, #12]
 8005186:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005188:	23c0      	movs	r3, #192	@ 0xc0
 800518a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800518c:	2302      	movs	r3, #2
 800518e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005190:	2300      	movs	r3, #0
 8005192:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005194:	2303      	movs	r3, #3
 8005196:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005198:	2308      	movs	r3, #8
 800519a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800519c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80051a0:	4619      	mov	r1, r3
 80051a2:	480f      	ldr	r0, [pc, #60]	@ (80051e0 <HAL_UART_MspInit+0x210>)
 80051a4:	f000 fdb6 	bl	8005d14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80051a8:	2200      	movs	r2, #0
 80051aa:	2100      	movs	r1, #0
 80051ac:	2047      	movs	r0, #71	@ 0x47
 80051ae:	f000 fce8 	bl	8005b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80051b2:	2047      	movs	r0, #71	@ 0x47
 80051b4:	f000 fd01 	bl	8005bba <HAL_NVIC_EnableIRQ>
}
 80051b8:	bf00      	nop
 80051ba:	3740      	adds	r7, #64	@ 0x40
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	40011000 	.word	0x40011000
 80051c4:	40023800 	.word	0x40023800
 80051c8:	40020400 	.word	0x40020400
 80051cc:	40004400 	.word	0x40004400
 80051d0:	40020000 	.word	0x40020000
 80051d4:	40004800 	.word	0x40004800
 80051d8:	40020c00 	.word	0x40020c00
 80051dc:	40011400 	.word	0x40011400
 80051e0:	40020800 	.word	0x40020800

080051e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80051e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800521c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80051e8:	f7ff fe38 	bl	8004e5c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80051ec:	480c      	ldr	r0, [pc, #48]	@ (8005220 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80051ee:	490d      	ldr	r1, [pc, #52]	@ (8005224 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80051f0:	4a0d      	ldr	r2, [pc, #52]	@ (8005228 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80051f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80051f4:	e002      	b.n	80051fc <LoopCopyDataInit>

080051f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80051f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80051f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80051fa:	3304      	adds	r3, #4

080051fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80051fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80051fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005200:	d3f9      	bcc.n	80051f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005202:	4a0a      	ldr	r2, [pc, #40]	@ (800522c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005204:	4c0a      	ldr	r4, [pc, #40]	@ (8005230 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005208:	e001      	b.n	800520e <LoopFillZerobss>

0800520a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800520a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800520c:	3204      	adds	r2, #4

0800520e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800520e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005210:	d3fb      	bcc.n	800520a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005212:	f005 fe3f 	bl	800ae94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005216:	f7ff fa2d 	bl	8004674 <main>
  bx  lr    
 800521a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800521c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8005220:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005224:	2000032c 	.word	0x2000032c
  ldr r2, =_sidata
 8005228:	080116d0 	.word	0x080116d0
  ldr r2, =_sbss
 800522c:	2000032c 	.word	0x2000032c
  ldr r4, =_ebss
 8005230:	20000c90 	.word	0x20000c90

08005234 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005234:	e7fe      	b.n	8005234 <ADC_IRQHandler>
	...

08005238 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800523c:	4b0e      	ldr	r3, [pc, #56]	@ (8005278 <HAL_Init+0x40>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a0d      	ldr	r2, [pc, #52]	@ (8005278 <HAL_Init+0x40>)
 8005242:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005246:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005248:	4b0b      	ldr	r3, [pc, #44]	@ (8005278 <HAL_Init+0x40>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a0a      	ldr	r2, [pc, #40]	@ (8005278 <HAL_Init+0x40>)
 800524e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005252:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005254:	4b08      	ldr	r3, [pc, #32]	@ (8005278 <HAL_Init+0x40>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a07      	ldr	r2, [pc, #28]	@ (8005278 <HAL_Init+0x40>)
 800525a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800525e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005260:	2003      	movs	r0, #3
 8005262:	f000 fc83 	bl	8005b6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005266:	200f      	movs	r0, #15
 8005268:	f000 f808 	bl	800527c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800526c:	f7ff fc44 	bl	8004af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	40023c00 	.word	0x40023c00

0800527c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005284:	4b12      	ldr	r3, [pc, #72]	@ (80052d0 <HAL_InitTick+0x54>)
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	4b12      	ldr	r3, [pc, #72]	@ (80052d4 <HAL_InitTick+0x58>)
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	4619      	mov	r1, r3
 800528e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005292:	fbb3 f3f1 	udiv	r3, r3, r1
 8005296:	fbb2 f3f3 	udiv	r3, r2, r3
 800529a:	4618      	mov	r0, r3
 800529c:	f000 fc9b 	bl	8005bd6 <HAL_SYSTICK_Config>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e00e      	b.n	80052c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b0f      	cmp	r3, #15
 80052ae:	d80a      	bhi.n	80052c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80052b0:	2200      	movs	r2, #0
 80052b2:	6879      	ldr	r1, [r7, #4]
 80052b4:	f04f 30ff 	mov.w	r0, #4294967295
 80052b8:	f000 fc63 	bl	8005b82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80052bc:	4a06      	ldr	r2, [pc, #24]	@ (80052d8 <HAL_InitTick+0x5c>)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
 80052c4:	e000      	b.n	80052c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3708      	adds	r7, #8
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	20000144 	.word	0x20000144
 80052d4:	2000014c 	.word	0x2000014c
 80052d8:	20000148 	.word	0x20000148

080052dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80052e0:	4b06      	ldr	r3, [pc, #24]	@ (80052fc <HAL_IncTick+0x20>)
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	461a      	mov	r2, r3
 80052e6:	4b06      	ldr	r3, [pc, #24]	@ (8005300 <HAL_IncTick+0x24>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4413      	add	r3, r2
 80052ec:	4a04      	ldr	r2, [pc, #16]	@ (8005300 <HAL_IncTick+0x24>)
 80052ee:	6013      	str	r3, [r2, #0]
}
 80052f0:	bf00      	nop
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	2000014c 	.word	0x2000014c
 8005300:	20000b2c 	.word	0x20000b2c

08005304 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005304:	b480      	push	{r7}
 8005306:	af00      	add	r7, sp, #0
  return uwTick;
 8005308:	4b03      	ldr	r3, [pc, #12]	@ (8005318 <HAL_GetTick+0x14>)
 800530a:	681b      	ldr	r3, [r3, #0]
}
 800530c:	4618      	mov	r0, r3
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	20000b2c 	.word	0x20000b2c

0800531c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005324:	f7ff ffee 	bl	8005304 <HAL_GetTick>
 8005328:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005334:	d005      	beq.n	8005342 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005336:	4b0a      	ldr	r3, [pc, #40]	@ (8005360 <HAL_Delay+0x44>)
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	461a      	mov	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	4413      	add	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005342:	bf00      	nop
 8005344:	f7ff ffde 	bl	8005304 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	429a      	cmp	r2, r3
 8005352:	d8f7      	bhi.n	8005344 <HAL_Delay+0x28>
  {
  }
}
 8005354:	bf00      	nop
 8005356:	bf00      	nop
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	2000014c 	.word	0x2000014c

08005364 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e0ed      	b.n	8005552 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 3020 	ldrb.w	r3, [r3, #32]
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d102      	bne.n	8005388 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f7fd ffce 	bl	8003324 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f042 0201 	orr.w	r2, r2, #1
 8005396:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005398:	f7ff ffb4 	bl	8005304 <HAL_GetTick>
 800539c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800539e:	e012      	b.n	80053c6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80053a0:	f7ff ffb0 	bl	8005304 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	2b0a      	cmp	r3, #10
 80053ac:	d90b      	bls.n	80053c6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2205      	movs	r2, #5
 80053be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e0c5      	b.n	8005552 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d0e5      	beq.n	80053a0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f022 0202 	bic.w	r2, r2, #2
 80053e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80053e4:	f7ff ff8e 	bl	8005304 <HAL_GetTick>
 80053e8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80053ea:	e012      	b.n	8005412 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80053ec:	f7ff ff8a 	bl	8005304 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b0a      	cmp	r3, #10
 80053f8:	d90b      	bls.n	8005412 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053fe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2205      	movs	r2, #5
 800540a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e09f      	b.n	8005552 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1e5      	bne.n	80053ec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	7e1b      	ldrb	r3, [r3, #24]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d108      	bne.n	800543a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005436:	601a      	str	r2, [r3, #0]
 8005438:	e007      	b.n	800544a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005448:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	7e5b      	ldrb	r3, [r3, #25]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d108      	bne.n	8005464 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	e007      	b.n	8005474 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005472:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	7e9b      	ldrb	r3, [r3, #26]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d108      	bne.n	800548e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f042 0220 	orr.w	r2, r2, #32
 800548a:	601a      	str	r2, [r3, #0]
 800548c:	e007      	b.n	800549e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f022 0220 	bic.w	r2, r2, #32
 800549c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	7edb      	ldrb	r3, [r3, #27]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d108      	bne.n	80054b8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 0210 	bic.w	r2, r2, #16
 80054b4:	601a      	str	r2, [r3, #0]
 80054b6:	e007      	b.n	80054c8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f042 0210 	orr.w	r2, r2, #16
 80054c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	7f1b      	ldrb	r3, [r3, #28]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d108      	bne.n	80054e2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f042 0208 	orr.w	r2, r2, #8
 80054de:	601a      	str	r2, [r3, #0]
 80054e0:	e007      	b.n	80054f2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 0208 	bic.w	r2, r2, #8
 80054f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	7f5b      	ldrb	r3, [r3, #29]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d108      	bne.n	800550c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f042 0204 	orr.w	r2, r2, #4
 8005508:	601a      	str	r2, [r3, #0]
 800550a:	e007      	b.n	800551c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 0204 	bic.w	r2, r2, #4
 800551a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689a      	ldr	r2, [r3, #8]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	431a      	orrs	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	431a      	orrs	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	ea42 0103 	orr.w	r1, r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	1e5a      	subs	r2, r3, #1
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	430a      	orrs	r2, r1
 8005540:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b08a      	sub	sp, #40	@ 0x28
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005562:	2300      	movs	r3, #0
 8005564:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	695b      	ldr	r3, [r3, #20]
 800556c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b00      	cmp	r3, #0
 800559e:	d07c      	beq.n	800569a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d023      	beq.n	80055f2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2201      	movs	r2, #1
 80055b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	f003 0302 	and.w	r3, r3, #2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d003      	beq.n	80055c4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 f983 	bl	80058c8 <HAL_CAN_TxMailbox0CompleteCallback>
 80055c2:	e016      	b.n	80055f2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	f003 0304 	and.w	r3, r3, #4
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d004      	beq.n	80055d8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80055ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80055d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80055d6:	e00c      	b.n	80055f2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	f003 0308 	and.w	r3, r3, #8
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d004      	beq.n	80055ec <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80055e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80055e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80055ea:	e002      	b.n	80055f2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f989 	bl	8005904 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d024      	beq.n	8005646 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005604:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800560c:	2b00      	cmp	r3, #0
 800560e:	d003      	beq.n	8005618 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 f963 	bl	80058dc <HAL_CAN_TxMailbox1CompleteCallback>
 8005616:	e016      	b.n	8005646 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800561e:	2b00      	cmp	r3, #0
 8005620:	d004      	beq.n	800562c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005624:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005628:	627b      	str	r3, [r7, #36]	@ 0x24
 800562a:	e00c      	b.n	8005646 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005632:	2b00      	cmp	r3, #0
 8005634:	d004      	beq.n	8005640 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005638:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800563c:	627b      	str	r3, [r7, #36]	@ 0x24
 800563e:	e002      	b.n	8005646 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 f969 	bl	8005918 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d024      	beq.n	800569a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005658:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f943 	bl	80058f0 <HAL_CAN_TxMailbox2CompleteCallback>
 800566a:	e016      	b.n	800569a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d004      	beq.n	8005680 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005678:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800567c:	627b      	str	r3, [r7, #36]	@ 0x24
 800567e:	e00c      	b.n	800569a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d004      	beq.n	8005694 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800568a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005690:	627b      	str	r3, [r7, #36]	@ 0x24
 8005692:	e002      	b.n	800569a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 f949 	bl	800592c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800569a:	6a3b      	ldr	r3, [r7, #32]
 800569c:	f003 0308 	and.w	r3, r3, #8
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00c      	beq.n	80056be <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	f003 0310 	and.w	r3, r3, #16
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d007      	beq.n	80056be <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80056ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80056b4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2210      	movs	r2, #16
 80056bc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80056be:	6a3b      	ldr	r3, [r7, #32]
 80056c0:	f003 0304 	and.w	r3, r3, #4
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00b      	beq.n	80056e0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f003 0308 	and.w	r3, r3, #8
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d006      	beq.n	80056e0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2208      	movs	r2, #8
 80056d8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f93a 	bl	8005954 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d009      	beq.n	80056fe <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	f003 0303 	and.w	r3, r3, #3
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 f921 	bl	8005940 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80056fe:	6a3b      	ldr	r3, [r7, #32]
 8005700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00c      	beq.n	8005722 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	f003 0310 	and.w	r3, r3, #16
 800570e:	2b00      	cmp	r3, #0
 8005710:	d007      	beq.n	8005722 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005714:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005718:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2210      	movs	r2, #16
 8005720:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	f003 0320 	and.w	r3, r3, #32
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00b      	beq.n	8005744 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	f003 0308 	and.w	r3, r3, #8
 8005732:	2b00      	cmp	r3, #0
 8005734:	d006      	beq.n	8005744 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2208      	movs	r2, #8
 800573c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f91c 	bl	800597c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	f003 0310 	and.w	r3, r3, #16
 800574a:	2b00      	cmp	r3, #0
 800574c:	d009      	beq.n	8005762 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	f003 0303 	and.w	r3, r3, #3
 8005758:	2b00      	cmp	r3, #0
 800575a:	d002      	beq.n	8005762 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 f903 	bl	8005968 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005762:	6a3b      	ldr	r3, [r7, #32]
 8005764:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00b      	beq.n	8005784 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	f003 0310 	and.w	r3, r3, #16
 8005772:	2b00      	cmp	r3, #0
 8005774:	d006      	beq.n	8005784 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2210      	movs	r2, #16
 800577c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f906 	bl	8005990 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005784:	6a3b      	ldr	r3, [r7, #32]
 8005786:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00b      	beq.n	80057a6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	f003 0308 	and.w	r3, r3, #8
 8005794:	2b00      	cmp	r3, #0
 8005796:	d006      	beq.n	80057a6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2208      	movs	r2, #8
 800579e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 f8ff 	bl	80059a4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d07b      	beq.n	80058a8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	f003 0304 	and.w	r3, r3, #4
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d072      	beq.n	80058a0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80057ba:	6a3b      	ldr	r3, [r7, #32]
 80057bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d008      	beq.n	80057d6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80057ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d0:	f043 0301 	orr.w	r3, r3, #1
 80057d4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80057d6:	6a3b      	ldr	r3, [r7, #32]
 80057d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d008      	beq.n	80057f2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80057ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ec:	f043 0302 	orr.w	r3, r3, #2
 80057f0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80057f2:	6a3b      	ldr	r3, [r7, #32]
 80057f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d008      	beq.n	800580e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005808:	f043 0304 	orr.w	r3, r3, #4
 800580c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800580e:	6a3b      	ldr	r3, [r7, #32]
 8005810:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005814:	2b00      	cmp	r3, #0
 8005816:	d043      	beq.n	80058a0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800581e:	2b00      	cmp	r3, #0
 8005820:	d03e      	beq.n	80058a0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005828:	2b60      	cmp	r3, #96	@ 0x60
 800582a:	d02b      	beq.n	8005884 <HAL_CAN_IRQHandler+0x32a>
 800582c:	2b60      	cmp	r3, #96	@ 0x60
 800582e:	d82e      	bhi.n	800588e <HAL_CAN_IRQHandler+0x334>
 8005830:	2b50      	cmp	r3, #80	@ 0x50
 8005832:	d022      	beq.n	800587a <HAL_CAN_IRQHandler+0x320>
 8005834:	2b50      	cmp	r3, #80	@ 0x50
 8005836:	d82a      	bhi.n	800588e <HAL_CAN_IRQHandler+0x334>
 8005838:	2b40      	cmp	r3, #64	@ 0x40
 800583a:	d019      	beq.n	8005870 <HAL_CAN_IRQHandler+0x316>
 800583c:	2b40      	cmp	r3, #64	@ 0x40
 800583e:	d826      	bhi.n	800588e <HAL_CAN_IRQHandler+0x334>
 8005840:	2b30      	cmp	r3, #48	@ 0x30
 8005842:	d010      	beq.n	8005866 <HAL_CAN_IRQHandler+0x30c>
 8005844:	2b30      	cmp	r3, #48	@ 0x30
 8005846:	d822      	bhi.n	800588e <HAL_CAN_IRQHandler+0x334>
 8005848:	2b10      	cmp	r3, #16
 800584a:	d002      	beq.n	8005852 <HAL_CAN_IRQHandler+0x2f8>
 800584c:	2b20      	cmp	r3, #32
 800584e:	d005      	beq.n	800585c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005850:	e01d      	b.n	800588e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005854:	f043 0308 	orr.w	r3, r3, #8
 8005858:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800585a:	e019      	b.n	8005890 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800585c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585e:	f043 0310 	orr.w	r3, r3, #16
 8005862:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005864:	e014      	b.n	8005890 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005868:	f043 0320 	orr.w	r3, r3, #32
 800586c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800586e:	e00f      	b.n	8005890 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005872:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005876:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005878:	e00a      	b.n	8005890 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800587a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005880:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005882:	e005      	b.n	8005890 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005886:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800588a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800588c:	e000      	b.n	8005890 <HAL_CAN_IRQHandler+0x336>
            break;
 800588e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	699a      	ldr	r2, [r3, #24]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800589e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2204      	movs	r2, #4
 80058a6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80058a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d008      	beq.n	80058c0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b4:	431a      	orrs	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f87c 	bl	80059b8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80058c0:	bf00      	nop
 80058c2:	3728      	adds	r7, #40	@ 0x28
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f003 0307 	and.w	r3, r3, #7
 80059da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005a10 <__NVIC_SetPriorityGrouping+0x44>)
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80059e8:	4013      	ands	r3, r2
 80059ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80059f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80059f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80059fe:	4a04      	ldr	r2, [pc, #16]	@ (8005a10 <__NVIC_SetPriorityGrouping+0x44>)
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	60d3      	str	r3, [r2, #12]
}
 8005a04:	bf00      	nop
 8005a06:	3714      	adds	r7, #20
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	e000ed00 	.word	0xe000ed00

08005a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a14:	b480      	push	{r7}
 8005a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a18:	4b04      	ldr	r3, [pc, #16]	@ (8005a2c <__NVIC_GetPriorityGrouping+0x18>)
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	0a1b      	lsrs	r3, r3, #8
 8005a1e:	f003 0307 	and.w	r3, r3, #7
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	e000ed00 	.word	0xe000ed00

08005a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	4603      	mov	r3, r0
 8005a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	db0b      	blt.n	8005a5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a42:	79fb      	ldrb	r3, [r7, #7]
 8005a44:	f003 021f 	and.w	r2, r3, #31
 8005a48:	4907      	ldr	r1, [pc, #28]	@ (8005a68 <__NVIC_EnableIRQ+0x38>)
 8005a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a4e:	095b      	lsrs	r3, r3, #5
 8005a50:	2001      	movs	r0, #1
 8005a52:	fa00 f202 	lsl.w	r2, r0, r2
 8005a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005a5a:	bf00      	nop
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop
 8005a68:	e000e100 	.word	0xe000e100

08005a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	4603      	mov	r3, r0
 8005a74:	6039      	str	r1, [r7, #0]
 8005a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	db0a      	blt.n	8005a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	b2da      	uxtb	r2, r3
 8005a84:	490c      	ldr	r1, [pc, #48]	@ (8005ab8 <__NVIC_SetPriority+0x4c>)
 8005a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a8a:	0112      	lsls	r2, r2, #4
 8005a8c:	b2d2      	uxtb	r2, r2
 8005a8e:	440b      	add	r3, r1
 8005a90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a94:	e00a      	b.n	8005aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	4908      	ldr	r1, [pc, #32]	@ (8005abc <__NVIC_SetPriority+0x50>)
 8005a9c:	79fb      	ldrb	r3, [r7, #7]
 8005a9e:	f003 030f 	and.w	r3, r3, #15
 8005aa2:	3b04      	subs	r3, #4
 8005aa4:	0112      	lsls	r2, r2, #4
 8005aa6:	b2d2      	uxtb	r2, r2
 8005aa8:	440b      	add	r3, r1
 8005aaa:	761a      	strb	r2, [r3, #24]
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr
 8005ab8:	e000e100 	.word	0xe000e100
 8005abc:	e000ed00 	.word	0xe000ed00

08005ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b089      	sub	sp, #36	@ 0x24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f003 0307 	and.w	r3, r3, #7
 8005ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	f1c3 0307 	rsb	r3, r3, #7
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	bf28      	it	cs
 8005ade:	2304      	movcs	r3, #4
 8005ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	3304      	adds	r3, #4
 8005ae6:	2b06      	cmp	r3, #6
 8005ae8:	d902      	bls.n	8005af0 <NVIC_EncodePriority+0x30>
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	3b03      	subs	r3, #3
 8005aee:	e000      	b.n	8005af2 <NVIC_EncodePriority+0x32>
 8005af0:	2300      	movs	r3, #0
 8005af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005af4:	f04f 32ff 	mov.w	r2, #4294967295
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	fa02 f303 	lsl.w	r3, r2, r3
 8005afe:	43da      	mvns	r2, r3
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	401a      	ands	r2, r3
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b08:	f04f 31ff 	mov.w	r1, #4294967295
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b12:	43d9      	mvns	r1, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b18:	4313      	orrs	r3, r2
         );
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3724      	adds	r7, #36	@ 0x24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
	...

08005b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	3b01      	subs	r3, #1
 8005b34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b38:	d301      	bcc.n	8005b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e00f      	b.n	8005b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8005b68 <SysTick_Config+0x40>)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	3b01      	subs	r3, #1
 8005b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b46:	210f      	movs	r1, #15
 8005b48:	f04f 30ff 	mov.w	r0, #4294967295
 8005b4c:	f7ff ff8e 	bl	8005a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b50:	4b05      	ldr	r3, [pc, #20]	@ (8005b68 <SysTick_Config+0x40>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b56:	4b04      	ldr	r3, [pc, #16]	@ (8005b68 <SysTick_Config+0x40>)
 8005b58:	2207      	movs	r2, #7
 8005b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	e000e010 	.word	0xe000e010

08005b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f7ff ff29 	bl	80059cc <__NVIC_SetPriorityGrouping>
}
 8005b7a:	bf00      	nop
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b086      	sub	sp, #24
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	4603      	mov	r3, r0
 8005b8a:	60b9      	str	r1, [r7, #8]
 8005b8c:	607a      	str	r2, [r7, #4]
 8005b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005b90:	2300      	movs	r3, #0
 8005b92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005b94:	f7ff ff3e 	bl	8005a14 <__NVIC_GetPriorityGrouping>
 8005b98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	68b9      	ldr	r1, [r7, #8]
 8005b9e:	6978      	ldr	r0, [r7, #20]
 8005ba0:	f7ff ff8e 	bl	8005ac0 <NVIC_EncodePriority>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005baa:	4611      	mov	r1, r2
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7ff ff5d 	bl	8005a6c <__NVIC_SetPriority>
}
 8005bb2:	bf00      	nop
 8005bb4:	3718      	adds	r7, #24
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b082      	sub	sp, #8
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7ff ff31 	bl	8005a30 <__NVIC_EnableIRQ>
}
 8005bce:	bf00      	nop
 8005bd0:	3708      	adds	r7, #8
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b082      	sub	sp, #8
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7ff ffa2 	bl	8005b28 <SysTick_Config>
 8005be4:	4603      	mov	r3, r0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3708      	adds	r7, #8
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b084      	sub	sp, #16
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bfa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005bfc:	f7ff fb82 	bl	8005304 <HAL_GetTick>
 8005c00:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d008      	beq.n	8005c20 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2280      	movs	r2, #128	@ 0x80
 8005c12:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e052      	b.n	8005cc6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f022 0216 	bic.w	r2, r2, #22
 8005c2e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	695a      	ldr	r2, [r3, #20]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c3e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d103      	bne.n	8005c50 <HAL_DMA_Abort+0x62>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d007      	beq.n	8005c60 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 0208 	bic.w	r2, r2, #8
 8005c5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f022 0201 	bic.w	r2, r2, #1
 8005c6e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c70:	e013      	b.n	8005c9a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c72:	f7ff fb47 	bl	8005304 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	2b05      	cmp	r3, #5
 8005c7e:	d90c      	bls.n	8005c9a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2220      	movs	r2, #32
 8005c84:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2203      	movs	r2, #3
 8005c8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e015      	b.n	8005cc6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0301 	and.w	r3, r3, #1
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1e4      	bne.n	8005c72 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cac:	223f      	movs	r2, #63	@ 0x3f
 8005cae:	409a      	lsls	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b083      	sub	sp, #12
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d004      	beq.n	8005cec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2280      	movs	r2, #128	@ 0x80
 8005ce6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e00c      	b.n	8005d06 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2205      	movs	r2, #5
 8005cf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f022 0201 	bic.w	r2, r2, #1
 8005d02:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
	...

08005d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b089      	sub	sp, #36	@ 0x24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005d22:	2300      	movs	r3, #0
 8005d24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005d26:	2300      	movs	r3, #0
 8005d28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	61fb      	str	r3, [r7, #28]
 8005d2e:	e177      	b.n	8006020 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005d30:	2201      	movs	r2, #1
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	fa02 f303 	lsl.w	r3, r2, r3
 8005d38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	4013      	ands	r3, r2
 8005d42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	f040 8166 	bne.w	800601a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f003 0303 	and.w	r3, r3, #3
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d005      	beq.n	8005d66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d130      	bne.n	8005dc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	005b      	lsls	r3, r3, #1
 8005d70:	2203      	movs	r2, #3
 8005d72:	fa02 f303 	lsl.w	r3, r2, r3
 8005d76:	43db      	mvns	r3, r3
 8005d78:	69ba      	ldr	r2, [r7, #24]
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	68da      	ldr	r2, [r3, #12]
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	005b      	lsls	r3, r3, #1
 8005d86:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	69ba      	ldr	r2, [r7, #24]
 8005d94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	fa02 f303 	lsl.w	r3, r2, r3
 8005da4:	43db      	mvns	r3, r3
 8005da6:	69ba      	ldr	r2, [r7, #24]
 8005da8:	4013      	ands	r3, r2
 8005daa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	091b      	lsrs	r3, r3, #4
 8005db2:	f003 0201 	and.w	r2, r3, #1
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	69ba      	ldr	r2, [r7, #24]
 8005dc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f003 0303 	and.w	r3, r3, #3
 8005dd0:	2b03      	cmp	r3, #3
 8005dd2:	d017      	beq.n	8005e04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	2203      	movs	r2, #3
 8005de0:	fa02 f303 	lsl.w	r3, r2, r3
 8005de4:	43db      	mvns	r3, r3
 8005de6:	69ba      	ldr	r2, [r7, #24]
 8005de8:	4013      	ands	r3, r2
 8005dea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	689a      	ldr	r2, [r3, #8]
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	005b      	lsls	r3, r3, #1
 8005df4:	fa02 f303 	lsl.w	r3, r2, r3
 8005df8:	69ba      	ldr	r2, [r7, #24]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f003 0303 	and.w	r3, r3, #3
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d123      	bne.n	8005e58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	08da      	lsrs	r2, r3, #3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	3208      	adds	r2, #8
 8005e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	f003 0307 	and.w	r3, r3, #7
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	220f      	movs	r2, #15
 8005e28:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2c:	43db      	mvns	r3, r3
 8005e2e:	69ba      	ldr	r2, [r7, #24]
 8005e30:	4013      	ands	r3, r2
 8005e32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	691a      	ldr	r2, [r3, #16]
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	f003 0307 	and.w	r3, r3, #7
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	fa02 f303 	lsl.w	r3, r2, r3
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	08da      	lsrs	r2, r3, #3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	3208      	adds	r2, #8
 8005e52:	69b9      	ldr	r1, [r7, #24]
 8005e54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	005b      	lsls	r3, r3, #1
 8005e62:	2203      	movs	r2, #3
 8005e64:	fa02 f303 	lsl.w	r3, r2, r3
 8005e68:	43db      	mvns	r3, r3
 8005e6a:	69ba      	ldr	r2, [r7, #24]
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f003 0203 	and.w	r2, r3, #3
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	005b      	lsls	r3, r3, #1
 8005e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e80:	69ba      	ldr	r2, [r7, #24]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	69ba      	ldr	r2, [r7, #24]
 8005e8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f000 80c0 	beq.w	800601a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	60fb      	str	r3, [r7, #12]
 8005e9e:	4b66      	ldr	r3, [pc, #408]	@ (8006038 <HAL_GPIO_Init+0x324>)
 8005ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ea2:	4a65      	ldr	r2, [pc, #404]	@ (8006038 <HAL_GPIO_Init+0x324>)
 8005ea4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005ea8:	6453      	str	r3, [r2, #68]	@ 0x44
 8005eaa:	4b63      	ldr	r3, [pc, #396]	@ (8006038 <HAL_GPIO_Init+0x324>)
 8005eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005eb2:	60fb      	str	r3, [r7, #12]
 8005eb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005eb6:	4a61      	ldr	r2, [pc, #388]	@ (800603c <HAL_GPIO_Init+0x328>)
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	089b      	lsrs	r3, r3, #2
 8005ebc:	3302      	adds	r3, #2
 8005ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	f003 0303 	and.w	r3, r3, #3
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	220f      	movs	r2, #15
 8005ece:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed2:	43db      	mvns	r3, r3
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a58      	ldr	r2, [pc, #352]	@ (8006040 <HAL_GPIO_Init+0x32c>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d037      	beq.n	8005f52 <HAL_GPIO_Init+0x23e>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a57      	ldr	r2, [pc, #348]	@ (8006044 <HAL_GPIO_Init+0x330>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d031      	beq.n	8005f4e <HAL_GPIO_Init+0x23a>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a56      	ldr	r2, [pc, #344]	@ (8006048 <HAL_GPIO_Init+0x334>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d02b      	beq.n	8005f4a <HAL_GPIO_Init+0x236>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a55      	ldr	r2, [pc, #340]	@ (800604c <HAL_GPIO_Init+0x338>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d025      	beq.n	8005f46 <HAL_GPIO_Init+0x232>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a54      	ldr	r2, [pc, #336]	@ (8006050 <HAL_GPIO_Init+0x33c>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d01f      	beq.n	8005f42 <HAL_GPIO_Init+0x22e>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a53      	ldr	r2, [pc, #332]	@ (8006054 <HAL_GPIO_Init+0x340>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d019      	beq.n	8005f3e <HAL_GPIO_Init+0x22a>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a52      	ldr	r2, [pc, #328]	@ (8006058 <HAL_GPIO_Init+0x344>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d013      	beq.n	8005f3a <HAL_GPIO_Init+0x226>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a51      	ldr	r2, [pc, #324]	@ (800605c <HAL_GPIO_Init+0x348>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d00d      	beq.n	8005f36 <HAL_GPIO_Init+0x222>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a50      	ldr	r2, [pc, #320]	@ (8006060 <HAL_GPIO_Init+0x34c>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d007      	beq.n	8005f32 <HAL_GPIO_Init+0x21e>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a4f      	ldr	r2, [pc, #316]	@ (8006064 <HAL_GPIO_Init+0x350>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d101      	bne.n	8005f2e <HAL_GPIO_Init+0x21a>
 8005f2a:	2309      	movs	r3, #9
 8005f2c:	e012      	b.n	8005f54 <HAL_GPIO_Init+0x240>
 8005f2e:	230a      	movs	r3, #10
 8005f30:	e010      	b.n	8005f54 <HAL_GPIO_Init+0x240>
 8005f32:	2308      	movs	r3, #8
 8005f34:	e00e      	b.n	8005f54 <HAL_GPIO_Init+0x240>
 8005f36:	2307      	movs	r3, #7
 8005f38:	e00c      	b.n	8005f54 <HAL_GPIO_Init+0x240>
 8005f3a:	2306      	movs	r3, #6
 8005f3c:	e00a      	b.n	8005f54 <HAL_GPIO_Init+0x240>
 8005f3e:	2305      	movs	r3, #5
 8005f40:	e008      	b.n	8005f54 <HAL_GPIO_Init+0x240>
 8005f42:	2304      	movs	r3, #4
 8005f44:	e006      	b.n	8005f54 <HAL_GPIO_Init+0x240>
 8005f46:	2303      	movs	r3, #3
 8005f48:	e004      	b.n	8005f54 <HAL_GPIO_Init+0x240>
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	e002      	b.n	8005f54 <HAL_GPIO_Init+0x240>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e000      	b.n	8005f54 <HAL_GPIO_Init+0x240>
 8005f52:	2300      	movs	r3, #0
 8005f54:	69fa      	ldr	r2, [r7, #28]
 8005f56:	f002 0203 	and.w	r2, r2, #3
 8005f5a:	0092      	lsls	r2, r2, #2
 8005f5c:	4093      	lsls	r3, r2
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f64:	4935      	ldr	r1, [pc, #212]	@ (800603c <HAL_GPIO_Init+0x328>)
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	089b      	lsrs	r3, r3, #2
 8005f6a:	3302      	adds	r3, #2
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f72:	4b3d      	ldr	r3, [pc, #244]	@ (8006068 <HAL_GPIO_Init+0x354>)
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	43db      	mvns	r3, r3
 8005f7c:	69ba      	ldr	r2, [r7, #24]
 8005f7e:	4013      	ands	r3, r2
 8005f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d003      	beq.n	8005f96 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005f8e:	69ba      	ldr	r2, [r7, #24]
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005f96:	4a34      	ldr	r2, [pc, #208]	@ (8006068 <HAL_GPIO_Init+0x354>)
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005f9c:	4b32      	ldr	r3, [pc, #200]	@ (8006068 <HAL_GPIO_Init+0x354>)
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	43db      	mvns	r3, r3
 8005fa6:	69ba      	ldr	r2, [r7, #24]
 8005fa8:	4013      	ands	r3, r2
 8005faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d003      	beq.n	8005fc0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005fb8:	69ba      	ldr	r2, [r7, #24]
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005fc0:	4a29      	ldr	r2, [pc, #164]	@ (8006068 <HAL_GPIO_Init+0x354>)
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005fc6:	4b28      	ldr	r3, [pc, #160]	@ (8006068 <HAL_GPIO_Init+0x354>)
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	43db      	mvns	r3, r3
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d003      	beq.n	8005fea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005fe2:	69ba      	ldr	r2, [r7, #24]
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005fea:	4a1f      	ldr	r2, [pc, #124]	@ (8006068 <HAL_GPIO_Init+0x354>)
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ff0:	4b1d      	ldr	r3, [pc, #116]	@ (8006068 <HAL_GPIO_Init+0x354>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	43db      	mvns	r3, r3
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d003      	beq.n	8006014 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800600c:	69ba      	ldr	r2, [r7, #24]
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	4313      	orrs	r3, r2
 8006012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006014:	4a14      	ldr	r2, [pc, #80]	@ (8006068 <HAL_GPIO_Init+0x354>)
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	3301      	adds	r3, #1
 800601e:	61fb      	str	r3, [r7, #28]
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	2b0f      	cmp	r3, #15
 8006024:	f67f ae84 	bls.w	8005d30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006028:	bf00      	nop
 800602a:	bf00      	nop
 800602c:	3724      	adds	r7, #36	@ 0x24
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	40023800 	.word	0x40023800
 800603c:	40013800 	.word	0x40013800
 8006040:	40020000 	.word	0x40020000
 8006044:	40020400 	.word	0x40020400
 8006048:	40020800 	.word	0x40020800
 800604c:	40020c00 	.word	0x40020c00
 8006050:	40021000 	.word	0x40021000
 8006054:	40021400 	.word	0x40021400
 8006058:	40021800 	.word	0x40021800
 800605c:	40021c00 	.word	0x40021c00
 8006060:	40022000 	.word	0x40022000
 8006064:	40022400 	.word	0x40022400
 8006068:	40013c00 	.word	0x40013c00

0800606c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	460b      	mov	r3, r1
 8006076:	807b      	strh	r3, [r7, #2]
 8006078:	4613      	mov	r3, r2
 800607a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800607c:	787b      	ldrb	r3, [r7, #1]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d003      	beq.n	800608a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006082:	887a      	ldrh	r2, [r7, #2]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006088:	e003      	b.n	8006092 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800608a:	887b      	ldrh	r3, [r7, #2]
 800608c:	041a      	lsls	r2, r3, #16
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	619a      	str	r2, [r3, #24]
}
 8006092:	bf00      	nop
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800609e:	b480      	push	{r7}
 80060a0:	b085      	sub	sp, #20
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
 80060a6:	460b      	mov	r3, r1
 80060a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80060b0:	887a      	ldrh	r2, [r7, #2]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	4013      	ands	r3, r2
 80060b6:	041a      	lsls	r2, r3, #16
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	43d9      	mvns	r1, r3
 80060bc:	887b      	ldrh	r3, [r7, #2]
 80060be:	400b      	ands	r3, r1
 80060c0:	431a      	orrs	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	619a      	str	r2, [r3, #24]
}
 80060c6:	bf00      	nop
 80060c8:	3714      	adds	r7, #20
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
	...

080060d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	4603      	mov	r3, r0
 80060dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80060de:	4b08      	ldr	r3, [pc, #32]	@ (8006100 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80060e0:	695a      	ldr	r2, [r3, #20]
 80060e2:	88fb      	ldrh	r3, [r7, #6]
 80060e4:	4013      	ands	r3, r2
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d006      	beq.n	80060f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80060ea:	4a05      	ldr	r2, [pc, #20]	@ (8006100 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80060ec:	88fb      	ldrh	r3, [r7, #6]
 80060ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80060f0:	88fb      	ldrh	r3, [r7, #6]
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7fe fbca 	bl	800488c <HAL_GPIO_EXTI_Callback>
  }
}
 80060f8:	bf00      	nop
 80060fa:	3708      	adds	r7, #8
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	40013c00 	.word	0x40013c00

08006104 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e12b      	b.n	800636e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d106      	bne.n	8006130 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f7fe f8f0 	bl	8004310 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2224      	movs	r2, #36	@ 0x24
 8006134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f022 0201 	bic.w	r2, r2, #1
 8006146:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006156:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006166:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006168:	f002 f91c 	bl	80083a4 <HAL_RCC_GetPCLK1Freq>
 800616c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	4a81      	ldr	r2, [pc, #516]	@ (8006378 <HAL_I2C_Init+0x274>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d807      	bhi.n	8006188 <HAL_I2C_Init+0x84>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	4a80      	ldr	r2, [pc, #512]	@ (800637c <HAL_I2C_Init+0x278>)
 800617c:	4293      	cmp	r3, r2
 800617e:	bf94      	ite	ls
 8006180:	2301      	movls	r3, #1
 8006182:	2300      	movhi	r3, #0
 8006184:	b2db      	uxtb	r3, r3
 8006186:	e006      	b.n	8006196 <HAL_I2C_Init+0x92>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	4a7d      	ldr	r2, [pc, #500]	@ (8006380 <HAL_I2C_Init+0x27c>)
 800618c:	4293      	cmp	r3, r2
 800618e:	bf94      	ite	ls
 8006190:	2301      	movls	r3, #1
 8006192:	2300      	movhi	r3, #0
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e0e7      	b.n	800636e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	4a78      	ldr	r2, [pc, #480]	@ (8006384 <HAL_I2C_Init+0x280>)
 80061a2:	fba2 2303 	umull	r2, r3, r2, r3
 80061a6:	0c9b      	lsrs	r3, r3, #18
 80061a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68ba      	ldr	r2, [r7, #8]
 80061ba:	430a      	orrs	r2, r1
 80061bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	6a1b      	ldr	r3, [r3, #32]
 80061c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	4a6a      	ldr	r2, [pc, #424]	@ (8006378 <HAL_I2C_Init+0x274>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d802      	bhi.n	80061d8 <HAL_I2C_Init+0xd4>
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	3301      	adds	r3, #1
 80061d6:	e009      	b.n	80061ec <HAL_I2C_Init+0xe8>
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80061de:	fb02 f303 	mul.w	r3, r2, r3
 80061e2:	4a69      	ldr	r2, [pc, #420]	@ (8006388 <HAL_I2C_Init+0x284>)
 80061e4:	fba2 2303 	umull	r2, r3, r2, r3
 80061e8:	099b      	lsrs	r3, r3, #6
 80061ea:	3301      	adds	r3, #1
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	6812      	ldr	r2, [r2, #0]
 80061f0:	430b      	orrs	r3, r1
 80061f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	69db      	ldr	r3, [r3, #28]
 80061fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80061fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	495c      	ldr	r1, [pc, #368]	@ (8006378 <HAL_I2C_Init+0x274>)
 8006208:	428b      	cmp	r3, r1
 800620a:	d819      	bhi.n	8006240 <HAL_I2C_Init+0x13c>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	1e59      	subs	r1, r3, #1
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	005b      	lsls	r3, r3, #1
 8006216:	fbb1 f3f3 	udiv	r3, r1, r3
 800621a:	1c59      	adds	r1, r3, #1
 800621c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006220:	400b      	ands	r3, r1
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00a      	beq.n	800623c <HAL_I2C_Init+0x138>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	1e59      	subs	r1, r3, #1
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	005b      	lsls	r3, r3, #1
 8006230:	fbb1 f3f3 	udiv	r3, r1, r3
 8006234:	3301      	adds	r3, #1
 8006236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800623a:	e051      	b.n	80062e0 <HAL_I2C_Init+0x1dc>
 800623c:	2304      	movs	r3, #4
 800623e:	e04f      	b.n	80062e0 <HAL_I2C_Init+0x1dc>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d111      	bne.n	800626c <HAL_I2C_Init+0x168>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	1e58      	subs	r0, r3, #1
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6859      	ldr	r1, [r3, #4]
 8006250:	460b      	mov	r3, r1
 8006252:	005b      	lsls	r3, r3, #1
 8006254:	440b      	add	r3, r1
 8006256:	fbb0 f3f3 	udiv	r3, r0, r3
 800625a:	3301      	adds	r3, #1
 800625c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006260:	2b00      	cmp	r3, #0
 8006262:	bf0c      	ite	eq
 8006264:	2301      	moveq	r3, #1
 8006266:	2300      	movne	r3, #0
 8006268:	b2db      	uxtb	r3, r3
 800626a:	e012      	b.n	8006292 <HAL_I2C_Init+0x18e>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	1e58      	subs	r0, r3, #1
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6859      	ldr	r1, [r3, #4]
 8006274:	460b      	mov	r3, r1
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	440b      	add	r3, r1
 800627a:	0099      	lsls	r1, r3, #2
 800627c:	440b      	add	r3, r1
 800627e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006282:	3301      	adds	r3, #1
 8006284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006288:	2b00      	cmp	r3, #0
 800628a:	bf0c      	ite	eq
 800628c:	2301      	moveq	r3, #1
 800628e:	2300      	movne	r3, #0
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <HAL_I2C_Init+0x196>
 8006296:	2301      	movs	r3, #1
 8006298:	e022      	b.n	80062e0 <HAL_I2C_Init+0x1dc>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10e      	bne.n	80062c0 <HAL_I2C_Init+0x1bc>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	1e58      	subs	r0, r3, #1
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6859      	ldr	r1, [r3, #4]
 80062aa:	460b      	mov	r3, r1
 80062ac:	005b      	lsls	r3, r3, #1
 80062ae:	440b      	add	r3, r1
 80062b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80062b4:	3301      	adds	r3, #1
 80062b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062be:	e00f      	b.n	80062e0 <HAL_I2C_Init+0x1dc>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	1e58      	subs	r0, r3, #1
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6859      	ldr	r1, [r3, #4]
 80062c8:	460b      	mov	r3, r1
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	440b      	add	r3, r1
 80062ce:	0099      	lsls	r1, r3, #2
 80062d0:	440b      	add	r3, r1
 80062d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80062d6:	3301      	adds	r3, #1
 80062d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80062e0:	6879      	ldr	r1, [r7, #4]
 80062e2:	6809      	ldr	r1, [r1, #0]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	69da      	ldr	r2, [r3, #28]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	431a      	orrs	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	430a      	orrs	r2, r1
 8006302:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800630e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	6911      	ldr	r1, [r2, #16]
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	68d2      	ldr	r2, [r2, #12]
 800631a:	4311      	orrs	r1, r2
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	6812      	ldr	r2, [r2, #0]
 8006320:	430b      	orrs	r3, r1
 8006322:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	695a      	ldr	r2, [r3, #20]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	431a      	orrs	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	430a      	orrs	r2, r1
 800633e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f042 0201 	orr.w	r2, r2, #1
 800634e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2220      	movs	r2, #32
 800635a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	000186a0 	.word	0x000186a0
 800637c:	001e847f 	.word	0x001e847f
 8006380:	003d08ff 	.word	0x003d08ff
 8006384:	431bde83 	.word	0x431bde83
 8006388:	10624dd3 	.word	0x10624dd3

0800638c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b088      	sub	sp, #32
 8006390:	af02      	add	r7, sp, #8
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	607a      	str	r2, [r7, #4]
 8006396:	461a      	mov	r2, r3
 8006398:	460b      	mov	r3, r1
 800639a:	817b      	strh	r3, [r7, #10]
 800639c:	4613      	mov	r3, r2
 800639e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80063a0:	f7fe ffb0 	bl	8005304 <HAL_GetTick>
 80063a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b20      	cmp	r3, #32
 80063b0:	f040 80e0 	bne.w	8006574 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	2319      	movs	r3, #25
 80063ba:	2201      	movs	r2, #1
 80063bc:	4970      	ldr	r1, [pc, #448]	@ (8006580 <HAL_I2C_Master_Transmit+0x1f4>)
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f001 f90e 	bl	80075e0 <I2C_WaitOnFlagUntilTimeout>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d001      	beq.n	80063ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80063ca:	2302      	movs	r3, #2
 80063cc:	e0d3      	b.n	8006576 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d101      	bne.n	80063dc <HAL_I2C_Master_Transmit+0x50>
 80063d8:	2302      	movs	r3, #2
 80063da:	e0cc      	b.n	8006576 <HAL_I2C_Master_Transmit+0x1ea>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d007      	beq.n	8006402 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f042 0201 	orr.w	r2, r2, #1
 8006400:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006410:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2221      	movs	r2, #33	@ 0x21
 8006416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2210      	movs	r2, #16
 800641e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	893a      	ldrh	r2, [r7, #8]
 8006432:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006438:	b29a      	uxth	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	4a50      	ldr	r2, [pc, #320]	@ (8006584 <HAL_I2C_Master_Transmit+0x1f8>)
 8006442:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006444:	8979      	ldrh	r1, [r7, #10]
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	6a3a      	ldr	r2, [r7, #32]
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f000 fdfa 	bl	8007044 <I2C_MasterRequestWrite>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e08d      	b.n	8006576 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800645a:	2300      	movs	r3, #0
 800645c:	613b      	str	r3, [r7, #16]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	695b      	ldr	r3, [r3, #20]
 8006464:	613b      	str	r3, [r7, #16]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	613b      	str	r3, [r7, #16]
 800646e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006470:	e066      	b.n	8006540 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	6a39      	ldr	r1, [r7, #32]
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f001 f9cc 	bl	8007814 <I2C_WaitOnTXEFlagUntilTimeout>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00d      	beq.n	800649e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006486:	2b04      	cmp	r3, #4
 8006488:	d107      	bne.n	800649a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006498:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e06b      	b.n	8006576 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a2:	781a      	ldrb	r2, [r3, #0]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ae:	1c5a      	adds	r2, r3, #1
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	3b01      	subs	r3, #1
 80064bc:	b29a      	uxth	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064c6:	3b01      	subs	r3, #1
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	695b      	ldr	r3, [r3, #20]
 80064d4:	f003 0304 	and.w	r3, r3, #4
 80064d8:	2b04      	cmp	r3, #4
 80064da:	d11b      	bne.n	8006514 <HAL_I2C_Master_Transmit+0x188>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d017      	beq.n	8006514 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e8:	781a      	ldrb	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f4:	1c5a      	adds	r2, r3, #1
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064fe:	b29b      	uxth	r3, r3
 8006500:	3b01      	subs	r3, #1
 8006502:	b29a      	uxth	r2, r3
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800650c:	3b01      	subs	r3, #1
 800650e:	b29a      	uxth	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	6a39      	ldr	r1, [r7, #32]
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f001 f9c3 	bl	80078a4 <I2C_WaitOnBTFFlagUntilTimeout>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00d      	beq.n	8006540 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006528:	2b04      	cmp	r3, #4
 800652a:	d107      	bne.n	800653c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800653a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e01a      	b.n	8006576 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006544:	2b00      	cmp	r3, #0
 8006546:	d194      	bne.n	8006472 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006556:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2220      	movs	r2, #32
 800655c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006570:	2300      	movs	r3, #0
 8006572:	e000      	b.n	8006576 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006574:	2302      	movs	r3, #2
  }
}
 8006576:	4618      	mov	r0, r3
 8006578:	3718      	adds	r7, #24
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	00100002 	.word	0x00100002
 8006584:	ffff0000 	.word	0xffff0000

08006588 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b08c      	sub	sp, #48	@ 0x30
 800658c:	af02      	add	r7, sp, #8
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	607a      	str	r2, [r7, #4]
 8006592:	461a      	mov	r2, r3
 8006594:	460b      	mov	r3, r1
 8006596:	817b      	strh	r3, [r7, #10]
 8006598:	4613      	mov	r3, r2
 800659a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800659c:	f7fe feb2 	bl	8005304 <HAL_GetTick>
 80065a0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	2b20      	cmp	r3, #32
 80065ac:	f040 8217 	bne.w	80069de <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b2:	9300      	str	r3, [sp, #0]
 80065b4:	2319      	movs	r3, #25
 80065b6:	2201      	movs	r2, #1
 80065b8:	497c      	ldr	r1, [pc, #496]	@ (80067ac <HAL_I2C_Master_Receive+0x224>)
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f001 f810 	bl	80075e0 <I2C_WaitOnFlagUntilTimeout>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d001      	beq.n	80065ca <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80065c6:	2302      	movs	r3, #2
 80065c8:	e20a      	b.n	80069e0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d101      	bne.n	80065d8 <HAL_I2C_Master_Receive+0x50>
 80065d4:	2302      	movs	r3, #2
 80065d6:	e203      	b.n	80069e0 <HAL_I2C_Master_Receive+0x458>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d007      	beq.n	80065fe <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f042 0201 	orr.w	r2, r2, #1
 80065fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800660c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2222      	movs	r2, #34	@ 0x22
 8006612:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2210      	movs	r2, #16
 800661a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	893a      	ldrh	r2, [r7, #8]
 800662e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006634:	b29a      	uxth	r2, r3
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	4a5c      	ldr	r2, [pc, #368]	@ (80067b0 <HAL_I2C_Master_Receive+0x228>)
 800663e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006640:	8979      	ldrh	r1, [r7, #10]
 8006642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006644:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f000 fd7e 	bl	8007148 <I2C_MasterRequestRead>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e1c4      	b.n	80069e0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800665a:	2b00      	cmp	r3, #0
 800665c:	d113      	bne.n	8006686 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800665e:	2300      	movs	r3, #0
 8006660:	623b      	str	r3, [r7, #32]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	623b      	str	r3, [r7, #32]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	623b      	str	r3, [r7, #32]
 8006672:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006682:	601a      	str	r2, [r3, #0]
 8006684:	e198      	b.n	80069b8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800668a:	2b01      	cmp	r3, #1
 800668c:	d11b      	bne.n	80066c6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800669c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800669e:	2300      	movs	r3, #0
 80066a0:	61fb      	str	r3, [r7, #28]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	695b      	ldr	r3, [r3, #20]
 80066a8:	61fb      	str	r3, [r7, #28]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	61fb      	str	r3, [r7, #28]
 80066b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066c2:	601a      	str	r2, [r3, #0]
 80066c4:	e178      	b.n	80069b8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d11b      	bne.n	8006706 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066ee:	2300      	movs	r3, #0
 80066f0:	61bb      	str	r3, [r7, #24]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	695b      	ldr	r3, [r3, #20]
 80066f8:	61bb      	str	r3, [r7, #24]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	61bb      	str	r3, [r7, #24]
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	e158      	b.n	80069b8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006714:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006716:	2300      	movs	r3, #0
 8006718:	617b      	str	r3, [r7, #20]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	617b      	str	r3, [r7, #20]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	617b      	str	r3, [r7, #20]
 800672a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800672c:	e144      	b.n	80069b8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006732:	2b03      	cmp	r3, #3
 8006734:	f200 80f1 	bhi.w	800691a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800673c:	2b01      	cmp	r3, #1
 800673e:	d123      	bne.n	8006788 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006740:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006742:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f001 f8f5 	bl	8007934 <I2C_WaitOnRXNEFlagUntilTimeout>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d001      	beq.n	8006754 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e145      	b.n	80069e0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	691a      	ldr	r2, [r3, #16]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800675e:	b2d2      	uxtb	r2, r2
 8006760:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006766:	1c5a      	adds	r2, r3, #1
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006770:	3b01      	subs	r3, #1
 8006772:	b29a      	uxth	r2, r3
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800677c:	b29b      	uxth	r3, r3
 800677e:	3b01      	subs	r3, #1
 8006780:	b29a      	uxth	r2, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006786:	e117      	b.n	80069b8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800678c:	2b02      	cmp	r3, #2
 800678e:	d14e      	bne.n	800682e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006796:	2200      	movs	r2, #0
 8006798:	4906      	ldr	r1, [pc, #24]	@ (80067b4 <HAL_I2C_Master_Receive+0x22c>)
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f000 ff20 	bl	80075e0 <I2C_WaitOnFlagUntilTimeout>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d008      	beq.n	80067b8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e11a      	b.n	80069e0 <HAL_I2C_Master_Receive+0x458>
 80067aa:	bf00      	nop
 80067ac:	00100002 	.word	0x00100002
 80067b0:	ffff0000 	.word	0xffff0000
 80067b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	691a      	ldr	r2, [r3, #16]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d2:	b2d2      	uxtb	r2, r2
 80067d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067da:	1c5a      	adds	r2, r3, #1
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067e4:	3b01      	subs	r3, #1
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	3b01      	subs	r3, #1
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	691a      	ldr	r2, [r3, #16]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006804:	b2d2      	uxtb	r2, r2
 8006806:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800680c:	1c5a      	adds	r2, r3, #1
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006816:	3b01      	subs	r3, #1
 8006818:	b29a      	uxth	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006822:	b29b      	uxth	r3, r3
 8006824:	3b01      	subs	r3, #1
 8006826:	b29a      	uxth	r2, r3
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800682c:	e0c4      	b.n	80069b8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800682e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006830:	9300      	str	r3, [sp, #0]
 8006832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006834:	2200      	movs	r2, #0
 8006836:	496c      	ldr	r1, [pc, #432]	@ (80069e8 <HAL_I2C_Master_Receive+0x460>)
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f000 fed1 	bl	80075e0 <I2C_WaitOnFlagUntilTimeout>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d001      	beq.n	8006848 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e0cb      	b.n	80069e0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006856:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	691a      	ldr	r2, [r3, #16]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006862:	b2d2      	uxtb	r2, r2
 8006864:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800686a:	1c5a      	adds	r2, r3, #1
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006874:	3b01      	subs	r3, #1
 8006876:	b29a      	uxth	r2, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006880:	b29b      	uxth	r3, r3
 8006882:	3b01      	subs	r3, #1
 8006884:	b29a      	uxth	r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800688a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688c:	9300      	str	r3, [sp, #0]
 800688e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006890:	2200      	movs	r2, #0
 8006892:	4955      	ldr	r1, [pc, #340]	@ (80069e8 <HAL_I2C_Master_Receive+0x460>)
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f000 fea3 	bl	80075e0 <I2C_WaitOnFlagUntilTimeout>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d001      	beq.n	80068a4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e09d      	b.n	80069e0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	691a      	ldr	r2, [r3, #16]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068be:	b2d2      	uxtb	r2, r2
 80068c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c6:	1c5a      	adds	r2, r3, #1
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068d0:	3b01      	subs	r3, #1
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068dc:	b29b      	uxth	r3, r3
 80068de:	3b01      	subs	r3, #1
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	691a      	ldr	r2, [r3, #16]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f0:	b2d2      	uxtb	r2, r2
 80068f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f8:	1c5a      	adds	r2, r3, #1
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006902:	3b01      	subs	r3, #1
 8006904:	b29a      	uxth	r2, r3
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800690e:	b29b      	uxth	r3, r3
 8006910:	3b01      	subs	r3, #1
 8006912:	b29a      	uxth	r2, r3
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006918:	e04e      	b.n	80069b8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800691a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800691c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f001 f808 	bl	8007934 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d001      	beq.n	800692e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e058      	b.n	80069e0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	691a      	ldr	r2, [r3, #16]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006938:	b2d2      	uxtb	r2, r2
 800693a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006940:	1c5a      	adds	r2, r3, #1
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800694a:	3b01      	subs	r3, #1
 800694c:	b29a      	uxth	r2, r3
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006956:	b29b      	uxth	r3, r3
 8006958:	3b01      	subs	r3, #1
 800695a:	b29a      	uxth	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	f003 0304 	and.w	r3, r3, #4
 800696a:	2b04      	cmp	r3, #4
 800696c:	d124      	bne.n	80069b8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006972:	2b03      	cmp	r3, #3
 8006974:	d107      	bne.n	8006986 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006984:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	691a      	ldr	r2, [r3, #16]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006990:	b2d2      	uxtb	r2, r2
 8006992:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006998:	1c5a      	adds	r2, r3, #1
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069a2:	3b01      	subs	r3, #1
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	3b01      	subs	r3, #1
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f47f aeb6 	bne.w	800672e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2220      	movs	r2, #32
 80069c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80069da:	2300      	movs	r3, #0
 80069dc:	e000      	b.n	80069e0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80069de:	2302      	movs	r3, #2
  }
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3728      	adds	r7, #40	@ 0x28
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	00010004 	.word	0x00010004

080069ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b088      	sub	sp, #32
 80069f0:	af02      	add	r7, sp, #8
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	4608      	mov	r0, r1
 80069f6:	4611      	mov	r1, r2
 80069f8:	461a      	mov	r2, r3
 80069fa:	4603      	mov	r3, r0
 80069fc:	817b      	strh	r3, [r7, #10]
 80069fe:	460b      	mov	r3, r1
 8006a00:	813b      	strh	r3, [r7, #8]
 8006a02:	4613      	mov	r3, r2
 8006a04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a06:	f7fe fc7d 	bl	8005304 <HAL_GetTick>
 8006a0a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	2b20      	cmp	r3, #32
 8006a16:	f040 80d9 	bne.w	8006bcc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	2319      	movs	r3, #25
 8006a20:	2201      	movs	r2, #1
 8006a22:	496d      	ldr	r1, [pc, #436]	@ (8006bd8 <HAL_I2C_Mem_Write+0x1ec>)
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f000 fddb 	bl	80075e0 <I2C_WaitOnFlagUntilTimeout>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d001      	beq.n	8006a34 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006a30:	2302      	movs	r3, #2
 8006a32:	e0cc      	b.n	8006bce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d101      	bne.n	8006a42 <HAL_I2C_Mem_Write+0x56>
 8006a3e:	2302      	movs	r3, #2
 8006a40:	e0c5      	b.n	8006bce <HAL_I2C_Mem_Write+0x1e2>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0301 	and.w	r3, r3, #1
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d007      	beq.n	8006a68 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f042 0201 	orr.w	r2, r2, #1
 8006a66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2221      	movs	r2, #33	@ 0x21
 8006a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2240      	movs	r2, #64	@ 0x40
 8006a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6a3a      	ldr	r2, [r7, #32]
 8006a92:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006a98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	4a4d      	ldr	r2, [pc, #308]	@ (8006bdc <HAL_I2C_Mem_Write+0x1f0>)
 8006aa8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006aaa:	88f8      	ldrh	r0, [r7, #6]
 8006aac:	893a      	ldrh	r2, [r7, #8]
 8006aae:	8979      	ldrh	r1, [r7, #10]
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	9301      	str	r3, [sp, #4]
 8006ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab6:	9300      	str	r3, [sp, #0]
 8006ab8:	4603      	mov	r3, r0
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f000 fc12 	bl	80072e4 <I2C_RequestMemoryWrite>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d052      	beq.n	8006b6c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e081      	b.n	8006bce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f000 fea0 	bl	8007814 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d00d      	beq.n	8006af6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ade:	2b04      	cmp	r3, #4
 8006ae0:	d107      	bne.n	8006af2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006af0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e06b      	b.n	8006bce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006afa:	781a      	ldrb	r2, [r3, #0]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b06:	1c5a      	adds	r2, r3, #1
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b10:	3b01      	subs	r3, #1
 8006b12:	b29a      	uxth	r2, r3
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	695b      	ldr	r3, [r3, #20]
 8006b2c:	f003 0304 	and.w	r3, r3, #4
 8006b30:	2b04      	cmp	r3, #4
 8006b32:	d11b      	bne.n	8006b6c <HAL_I2C_Mem_Write+0x180>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d017      	beq.n	8006b6c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b40:	781a      	ldrb	r2, [r3, #0]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b4c:	1c5a      	adds	r2, r3, #1
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b56:	3b01      	subs	r3, #1
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	3b01      	subs	r3, #1
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1aa      	bne.n	8006aca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f000 fe93 	bl	80078a4 <I2C_WaitOnBTFFlagUntilTimeout>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00d      	beq.n	8006ba0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b88:	2b04      	cmp	r3, #4
 8006b8a:	d107      	bne.n	8006b9c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b9a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e016      	b.n	8006bce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2220      	movs	r2, #32
 8006bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	e000      	b.n	8006bce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006bcc:	2302      	movs	r3, #2
  }
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3718      	adds	r7, #24
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	00100002 	.word	0x00100002
 8006bdc:	ffff0000 	.word	0xffff0000

08006be0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b08c      	sub	sp, #48	@ 0x30
 8006be4:	af02      	add	r7, sp, #8
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	4608      	mov	r0, r1
 8006bea:	4611      	mov	r1, r2
 8006bec:	461a      	mov	r2, r3
 8006bee:	4603      	mov	r3, r0
 8006bf0:	817b      	strh	r3, [r7, #10]
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	813b      	strh	r3, [r7, #8]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006bfa:	f7fe fb83 	bl	8005304 <HAL_GetTick>
 8006bfe:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	2b20      	cmp	r3, #32
 8006c0a:	f040 8214 	bne.w	8007036 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c10:	9300      	str	r3, [sp, #0]
 8006c12:	2319      	movs	r3, #25
 8006c14:	2201      	movs	r2, #1
 8006c16:	497b      	ldr	r1, [pc, #492]	@ (8006e04 <HAL_I2C_Mem_Read+0x224>)
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f000 fce1 	bl	80075e0 <I2C_WaitOnFlagUntilTimeout>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d001      	beq.n	8006c28 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006c24:	2302      	movs	r3, #2
 8006c26:	e207      	b.n	8007038 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d101      	bne.n	8006c36 <HAL_I2C_Mem_Read+0x56>
 8006c32:	2302      	movs	r3, #2
 8006c34:	e200      	b.n	8007038 <HAL_I2C_Mem_Read+0x458>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 0301 	and.w	r3, r3, #1
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d007      	beq.n	8006c5c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f042 0201 	orr.w	r2, r2, #1
 8006c5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2222      	movs	r2, #34	@ 0x22
 8006c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2240      	movs	r2, #64	@ 0x40
 8006c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006c8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	4a5b      	ldr	r2, [pc, #364]	@ (8006e08 <HAL_I2C_Mem_Read+0x228>)
 8006c9c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c9e:	88f8      	ldrh	r0, [r7, #6]
 8006ca0:	893a      	ldrh	r2, [r7, #8]
 8006ca2:	8979      	ldrh	r1, [r7, #10]
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca6:	9301      	str	r3, [sp, #4]
 8006ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	4603      	mov	r3, r0
 8006cae:	68f8      	ldr	r0, [r7, #12]
 8006cb0:	f000 fbae 	bl	8007410 <I2C_RequestMemoryRead>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d001      	beq.n	8006cbe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e1bc      	b.n	8007038 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d113      	bne.n	8006cee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	623b      	str	r3, [r7, #32]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	695b      	ldr	r3, [r3, #20]
 8006cd0:	623b      	str	r3, [r7, #32]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	699b      	ldr	r3, [r3, #24]
 8006cd8:	623b      	str	r3, [r7, #32]
 8006cda:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cea:	601a      	str	r2, [r3, #0]
 8006cec:	e190      	b.n	8007010 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d11b      	bne.n	8006d2e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d06:	2300      	movs	r3, #0
 8006d08:	61fb      	str	r3, [r7, #28]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	695b      	ldr	r3, [r3, #20]
 8006d10:	61fb      	str	r3, [r7, #28]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	61fb      	str	r3, [r7, #28]
 8006d1a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d2a:	601a      	str	r2, [r3, #0]
 8006d2c:	e170      	b.n	8007010 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d11b      	bne.n	8006d6e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d44:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d56:	2300      	movs	r3, #0
 8006d58:	61bb      	str	r3, [r7, #24]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	695b      	ldr	r3, [r3, #20]
 8006d60:	61bb      	str	r3, [r7, #24]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	61bb      	str	r3, [r7, #24]
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	e150      	b.n	8007010 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d6e:	2300      	movs	r3, #0
 8006d70:	617b      	str	r3, [r7, #20]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	617b      	str	r3, [r7, #20]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	699b      	ldr	r3, [r3, #24]
 8006d80:	617b      	str	r3, [r7, #20]
 8006d82:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006d84:	e144      	b.n	8007010 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d8a:	2b03      	cmp	r3, #3
 8006d8c:	f200 80f1 	bhi.w	8006f72 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d123      	bne.n	8006de0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d9a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f000 fdc9 	bl	8007934 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d001      	beq.n	8006dac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e145      	b.n	8007038 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	691a      	ldr	r2, [r3, #16]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db6:	b2d2      	uxtb	r2, r2
 8006db8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dbe:	1c5a      	adds	r2, r3, #1
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006dde:	e117      	b.n	8007010 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d14e      	bne.n	8006e86 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dea:	9300      	str	r3, [sp, #0]
 8006dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dee:	2200      	movs	r2, #0
 8006df0:	4906      	ldr	r1, [pc, #24]	@ (8006e0c <HAL_I2C_Mem_Read+0x22c>)
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	f000 fbf4 	bl	80075e0 <I2C_WaitOnFlagUntilTimeout>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d008      	beq.n	8006e10 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e11a      	b.n	8007038 <HAL_I2C_Mem_Read+0x458>
 8006e02:	bf00      	nop
 8006e04:	00100002 	.word	0x00100002
 8006e08:	ffff0000 	.word	0xffff0000
 8006e0c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	691a      	ldr	r2, [r3, #16]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e2a:	b2d2      	uxtb	r2, r2
 8006e2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e32:	1c5a      	adds	r2, r3, #1
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	b29a      	uxth	r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	691a      	ldr	r2, [r3, #16]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e5c:	b2d2      	uxtb	r2, r2
 8006e5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e64:	1c5a      	adds	r2, r3, #1
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006e84:	e0c4      	b.n	8007010 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e88:	9300      	str	r3, [sp, #0]
 8006e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	496c      	ldr	r1, [pc, #432]	@ (8007040 <HAL_I2C_Mem_Read+0x460>)
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f000 fba5 	bl	80075e0 <I2C_WaitOnFlagUntilTimeout>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d001      	beq.n	8006ea0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e0cb      	b.n	8007038 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006eae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	691a      	ldr	r2, [r3, #16]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eba:	b2d2      	uxtb	r2, r2
 8006ebc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec2:	1c5a      	adds	r2, r3, #1
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	3b01      	subs	r3, #1
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee8:	2200      	movs	r2, #0
 8006eea:	4955      	ldr	r1, [pc, #340]	@ (8007040 <HAL_I2C_Mem_Read+0x460>)
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f000 fb77 	bl	80075e0 <I2C_WaitOnFlagUntilTimeout>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d001      	beq.n	8006efc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e09d      	b.n	8007038 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	691a      	ldr	r2, [r3, #16]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f16:	b2d2      	uxtb	r2, r2
 8006f18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f1e:	1c5a      	adds	r2, r3, #1
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	3b01      	subs	r3, #1
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	691a      	ldr	r2, [r3, #16]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f48:	b2d2      	uxtb	r2, r2
 8006f4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f50:	1c5a      	adds	r2, r3, #1
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006f70:	e04e      	b.n	8007010 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f74:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	f000 fcdc 	bl	8007934 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d001      	beq.n	8006f86 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e058      	b.n	8007038 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	691a      	ldr	r2, [r3, #16]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f90:	b2d2      	uxtb	r2, r2
 8006f92:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f98:	1c5a      	adds	r2, r3, #1
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	695b      	ldr	r3, [r3, #20]
 8006fbe:	f003 0304 	and.w	r3, r3, #4
 8006fc2:	2b04      	cmp	r3, #4
 8006fc4:	d124      	bne.n	8007010 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fca:	2b03      	cmp	r3, #3
 8006fcc:	d107      	bne.n	8006fde <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006fdc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	691a      	ldr	r2, [r3, #16]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe8:	b2d2      	uxtb	r2, r2
 8006fea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff0:	1c5a      	adds	r2, r3, #1
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007006:	b29b      	uxth	r3, r3
 8007008:	3b01      	subs	r3, #1
 800700a:	b29a      	uxth	r2, r3
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007014:	2b00      	cmp	r3, #0
 8007016:	f47f aeb6 	bne.w	8006d86 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2220      	movs	r2, #32
 800701e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007032:	2300      	movs	r3, #0
 8007034:	e000      	b.n	8007038 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8007036:	2302      	movs	r3, #2
  }
}
 8007038:	4618      	mov	r0, r3
 800703a:	3728      	adds	r7, #40	@ 0x28
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	00010004 	.word	0x00010004

08007044 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b088      	sub	sp, #32
 8007048:	af02      	add	r7, sp, #8
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	607a      	str	r2, [r7, #4]
 800704e:	603b      	str	r3, [r7, #0]
 8007050:	460b      	mov	r3, r1
 8007052:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007058:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	2b08      	cmp	r3, #8
 800705e:	d006      	beq.n	800706e <I2C_MasterRequestWrite+0x2a>
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	2b01      	cmp	r3, #1
 8007064:	d003      	beq.n	800706e <I2C_MasterRequestWrite+0x2a>
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800706c:	d108      	bne.n	8007080 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800707c:	601a      	str	r2, [r3, #0]
 800707e:	e00b      	b.n	8007098 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007084:	2b12      	cmp	r3, #18
 8007086:	d107      	bne.n	8007098 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007096:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	9300      	str	r3, [sp, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	f000 fa9b 	bl	80075e0 <I2C_WaitOnFlagUntilTimeout>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00d      	beq.n	80070cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070be:	d103      	bne.n	80070c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e035      	b.n	8007138 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80070d4:	d108      	bne.n	80070e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80070d6:	897b      	ldrh	r3, [r7, #10]
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	461a      	mov	r2, r3
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80070e4:	611a      	str	r2, [r3, #16]
 80070e6:	e01b      	b.n	8007120 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80070e8:	897b      	ldrh	r3, [r7, #10]
 80070ea:	11db      	asrs	r3, r3, #7
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	f003 0306 	and.w	r3, r3, #6
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	f063 030f 	orn	r3, r3, #15
 80070f8:	b2da      	uxtb	r2, r3
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	490e      	ldr	r1, [pc, #56]	@ (8007140 <I2C_MasterRequestWrite+0xfc>)
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f000 fae4 	bl	80076d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d001      	beq.n	8007116 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e010      	b.n	8007138 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007116:	897b      	ldrh	r3, [r7, #10]
 8007118:	b2da      	uxtb	r2, r3
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	4907      	ldr	r1, [pc, #28]	@ (8007144 <I2C_MasterRequestWrite+0x100>)
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f000 fad4 	bl	80076d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d001      	beq.n	8007136 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e000      	b.n	8007138 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3718      	adds	r7, #24
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	00010008 	.word	0x00010008
 8007144:	00010002 	.word	0x00010002

08007148 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b088      	sub	sp, #32
 800714c:	af02      	add	r7, sp, #8
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	607a      	str	r2, [r7, #4]
 8007152:	603b      	str	r3, [r7, #0]
 8007154:	460b      	mov	r3, r1
 8007156:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800715c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800716c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	2b08      	cmp	r3, #8
 8007172:	d006      	beq.n	8007182 <I2C_MasterRequestRead+0x3a>
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d003      	beq.n	8007182 <I2C_MasterRequestRead+0x3a>
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007180:	d108      	bne.n	8007194 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007190:	601a      	str	r2, [r3, #0]
 8007192:	e00b      	b.n	80071ac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007198:	2b11      	cmp	r3, #17
 800719a:	d107      	bne.n	80071ac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80071aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	9300      	str	r3, [sp, #0]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f000 fa11 	bl	80075e0 <I2C_WaitOnFlagUntilTimeout>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00d      	beq.n	80071e0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071d2:	d103      	bne.n	80071dc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80071da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80071dc:	2303      	movs	r3, #3
 80071de:	e079      	b.n	80072d4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80071e8:	d108      	bne.n	80071fc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80071ea:	897b      	ldrh	r3, [r7, #10]
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	f043 0301 	orr.w	r3, r3, #1
 80071f2:	b2da      	uxtb	r2, r3
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	611a      	str	r2, [r3, #16]
 80071fa:	e05f      	b.n	80072bc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80071fc:	897b      	ldrh	r3, [r7, #10]
 80071fe:	11db      	asrs	r3, r3, #7
 8007200:	b2db      	uxtb	r3, r3
 8007202:	f003 0306 	and.w	r3, r3, #6
 8007206:	b2db      	uxtb	r3, r3
 8007208:	f063 030f 	orn	r3, r3, #15
 800720c:	b2da      	uxtb	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	4930      	ldr	r1, [pc, #192]	@ (80072dc <I2C_MasterRequestRead+0x194>)
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	f000 fa5a 	bl	80076d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d001      	beq.n	800722a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e054      	b.n	80072d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800722a:	897b      	ldrh	r3, [r7, #10]
 800722c:	b2da      	uxtb	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	4929      	ldr	r1, [pc, #164]	@ (80072e0 <I2C_MasterRequestRead+0x198>)
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f000 fa4a 	bl	80076d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d001      	beq.n	800724a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e044      	b.n	80072d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800724a:	2300      	movs	r3, #0
 800724c:	613b      	str	r3, [r7, #16]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	695b      	ldr	r3, [r3, #20]
 8007254:	613b      	str	r3, [r7, #16]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	699b      	ldr	r3, [r3, #24]
 800725c:	613b      	str	r3, [r7, #16]
 800725e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800726e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f000 f9af 	bl	80075e0 <I2C_WaitOnFlagUntilTimeout>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00d      	beq.n	80072a4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007292:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007296:	d103      	bne.n	80072a0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800729e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80072a0:	2303      	movs	r3, #3
 80072a2:	e017      	b.n	80072d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80072a4:	897b      	ldrh	r3, [r7, #10]
 80072a6:	11db      	asrs	r3, r3, #7
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	f003 0306 	and.w	r3, r3, #6
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	f063 030e 	orn	r3, r3, #14
 80072b4:	b2da      	uxtb	r2, r3
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	4907      	ldr	r1, [pc, #28]	@ (80072e0 <I2C_MasterRequestRead+0x198>)
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f000 fa06 	bl	80076d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d001      	beq.n	80072d2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e000      	b.n	80072d4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3718      	adds	r7, #24
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	00010008 	.word	0x00010008
 80072e0:	00010002 	.word	0x00010002

080072e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b088      	sub	sp, #32
 80072e8:	af02      	add	r7, sp, #8
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	4608      	mov	r0, r1
 80072ee:	4611      	mov	r1, r2
 80072f0:	461a      	mov	r2, r3
 80072f2:	4603      	mov	r3, r0
 80072f4:	817b      	strh	r3, [r7, #10]
 80072f6:	460b      	mov	r3, r1
 80072f8:	813b      	strh	r3, [r7, #8]
 80072fa:	4613      	mov	r3, r2
 80072fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800730c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800730e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007310:	9300      	str	r3, [sp, #0]
 8007312:	6a3b      	ldr	r3, [r7, #32]
 8007314:	2200      	movs	r2, #0
 8007316:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f000 f960 	bl	80075e0 <I2C_WaitOnFlagUntilTimeout>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00d      	beq.n	8007342 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007330:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007334:	d103      	bne.n	800733e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800733c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e05f      	b.n	8007402 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007342:	897b      	ldrh	r3, [r7, #10]
 8007344:	b2db      	uxtb	r3, r3
 8007346:	461a      	mov	r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007350:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007354:	6a3a      	ldr	r2, [r7, #32]
 8007356:	492d      	ldr	r1, [pc, #180]	@ (800740c <I2C_RequestMemoryWrite+0x128>)
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f000 f9bb 	bl	80076d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d001      	beq.n	8007368 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e04c      	b.n	8007402 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007368:	2300      	movs	r3, #0
 800736a:	617b      	str	r3, [r7, #20]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	617b      	str	r3, [r7, #20]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	617b      	str	r3, [r7, #20]
 800737c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800737e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007380:	6a39      	ldr	r1, [r7, #32]
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f000 fa46 	bl	8007814 <I2C_WaitOnTXEFlagUntilTimeout>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00d      	beq.n	80073aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007392:	2b04      	cmp	r3, #4
 8007394:	d107      	bne.n	80073a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e02b      	b.n	8007402 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80073aa:	88fb      	ldrh	r3, [r7, #6]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d105      	bne.n	80073bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80073b0:	893b      	ldrh	r3, [r7, #8]
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	611a      	str	r2, [r3, #16]
 80073ba:	e021      	b.n	8007400 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80073bc:	893b      	ldrh	r3, [r7, #8]
 80073be:	0a1b      	lsrs	r3, r3, #8
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	b2da      	uxtb	r2, r3
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073cc:	6a39      	ldr	r1, [r7, #32]
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f000 fa20 	bl	8007814 <I2C_WaitOnTXEFlagUntilTimeout>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00d      	beq.n	80073f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073de:	2b04      	cmp	r3, #4
 80073e0:	d107      	bne.n	80073f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e005      	b.n	8007402 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80073f6:	893b      	ldrh	r3, [r7, #8]
 80073f8:	b2da      	uxtb	r2, r3
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3718      	adds	r7, #24
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	00010002 	.word	0x00010002

08007410 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b088      	sub	sp, #32
 8007414:	af02      	add	r7, sp, #8
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	4608      	mov	r0, r1
 800741a:	4611      	mov	r1, r2
 800741c:	461a      	mov	r2, r3
 800741e:	4603      	mov	r3, r0
 8007420:	817b      	strh	r3, [r7, #10]
 8007422:	460b      	mov	r3, r1
 8007424:	813b      	strh	r3, [r7, #8]
 8007426:	4613      	mov	r3, r2
 8007428:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007438:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007448:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800744a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	6a3b      	ldr	r3, [r7, #32]
 8007450:	2200      	movs	r2, #0
 8007452:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007456:	68f8      	ldr	r0, [r7, #12]
 8007458:	f000 f8c2 	bl	80075e0 <I2C_WaitOnFlagUntilTimeout>
 800745c:	4603      	mov	r3, r0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00d      	beq.n	800747e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800746c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007470:	d103      	bne.n	800747a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007478:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e0aa      	b.n	80075d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800747e:	897b      	ldrh	r3, [r7, #10]
 8007480:	b2db      	uxtb	r3, r3
 8007482:	461a      	mov	r2, r3
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800748c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800748e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007490:	6a3a      	ldr	r2, [r7, #32]
 8007492:	4952      	ldr	r1, [pc, #328]	@ (80075dc <I2C_RequestMemoryRead+0x1cc>)
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f000 f91d 	bl	80076d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d001      	beq.n	80074a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	e097      	b.n	80075d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074a4:	2300      	movs	r3, #0
 80074a6:	617b      	str	r3, [r7, #20]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	695b      	ldr	r3, [r3, #20]
 80074ae:	617b      	str	r3, [r7, #20]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	699b      	ldr	r3, [r3, #24]
 80074b6:	617b      	str	r3, [r7, #20]
 80074b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074bc:	6a39      	ldr	r1, [r7, #32]
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f000 f9a8 	bl	8007814 <I2C_WaitOnTXEFlagUntilTimeout>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00d      	beq.n	80074e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ce:	2b04      	cmp	r3, #4
 80074d0:	d107      	bne.n	80074e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80074e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e076      	b.n	80075d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80074e6:	88fb      	ldrh	r3, [r7, #6]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d105      	bne.n	80074f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80074ec:	893b      	ldrh	r3, [r7, #8]
 80074ee:	b2da      	uxtb	r2, r3
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	611a      	str	r2, [r3, #16]
 80074f6:	e021      	b.n	800753c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80074f8:	893b      	ldrh	r3, [r7, #8]
 80074fa:	0a1b      	lsrs	r3, r3, #8
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	b2da      	uxtb	r2, r3
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007508:	6a39      	ldr	r1, [r7, #32]
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	f000 f982 	bl	8007814 <I2C_WaitOnTXEFlagUntilTimeout>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00d      	beq.n	8007532 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800751a:	2b04      	cmp	r3, #4
 800751c:	d107      	bne.n	800752e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800752c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e050      	b.n	80075d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007532:	893b      	ldrh	r3, [r7, #8]
 8007534:	b2da      	uxtb	r2, r3
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800753c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800753e:	6a39      	ldr	r1, [r7, #32]
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f000 f967 	bl	8007814 <I2C_WaitOnTXEFlagUntilTimeout>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d00d      	beq.n	8007568 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007550:	2b04      	cmp	r3, #4
 8007552:	d107      	bne.n	8007564 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007562:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e035      	b.n	80075d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007576:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	6a3b      	ldr	r3, [r7, #32]
 800757e:	2200      	movs	r2, #0
 8007580:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f000 f82b 	bl	80075e0 <I2C_WaitOnFlagUntilTimeout>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00d      	beq.n	80075ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800759a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800759e:	d103      	bne.n	80075a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80075a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80075a8:	2303      	movs	r3, #3
 80075aa:	e013      	b.n	80075d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80075ac:	897b      	ldrh	r3, [r7, #10]
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	f043 0301 	orr.w	r3, r3, #1
 80075b4:	b2da      	uxtb	r2, r3
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80075bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075be:	6a3a      	ldr	r2, [r7, #32]
 80075c0:	4906      	ldr	r1, [pc, #24]	@ (80075dc <I2C_RequestMemoryRead+0x1cc>)
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f000 f886 	bl	80076d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d001      	beq.n	80075d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e000      	b.n	80075d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3718      	adds	r7, #24
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	00010002 	.word	0x00010002

080075e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	603b      	str	r3, [r7, #0]
 80075ec:	4613      	mov	r3, r2
 80075ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80075f0:	e048      	b.n	8007684 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f8:	d044      	beq.n	8007684 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075fa:	f7fd fe83 	bl	8005304 <HAL_GetTick>
 80075fe:	4602      	mov	r2, r0
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	1ad3      	subs	r3, r2, r3
 8007604:	683a      	ldr	r2, [r7, #0]
 8007606:	429a      	cmp	r2, r3
 8007608:	d302      	bcc.n	8007610 <I2C_WaitOnFlagUntilTimeout+0x30>
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d139      	bne.n	8007684 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	0c1b      	lsrs	r3, r3, #16
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2b01      	cmp	r3, #1
 8007618:	d10d      	bne.n	8007636 <I2C_WaitOnFlagUntilTimeout+0x56>
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	695b      	ldr	r3, [r3, #20]
 8007620:	43da      	mvns	r2, r3
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	4013      	ands	r3, r2
 8007626:	b29b      	uxth	r3, r3
 8007628:	2b00      	cmp	r3, #0
 800762a:	bf0c      	ite	eq
 800762c:	2301      	moveq	r3, #1
 800762e:	2300      	movne	r3, #0
 8007630:	b2db      	uxtb	r3, r3
 8007632:	461a      	mov	r2, r3
 8007634:	e00c      	b.n	8007650 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	699b      	ldr	r3, [r3, #24]
 800763c:	43da      	mvns	r2, r3
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	4013      	ands	r3, r2
 8007642:	b29b      	uxth	r3, r3
 8007644:	2b00      	cmp	r3, #0
 8007646:	bf0c      	ite	eq
 8007648:	2301      	moveq	r3, #1
 800764a:	2300      	movne	r3, #0
 800764c:	b2db      	uxtb	r3, r3
 800764e:	461a      	mov	r2, r3
 8007650:	79fb      	ldrb	r3, [r7, #7]
 8007652:	429a      	cmp	r2, r3
 8007654:	d116      	bne.n	8007684 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2220      	movs	r2, #32
 8007660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2200      	movs	r2, #0
 8007668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007670:	f043 0220 	orr.w	r2, r3, #32
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	e023      	b.n	80076cc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	0c1b      	lsrs	r3, r3, #16
 8007688:	b2db      	uxtb	r3, r3
 800768a:	2b01      	cmp	r3, #1
 800768c:	d10d      	bne.n	80076aa <I2C_WaitOnFlagUntilTimeout+0xca>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	695b      	ldr	r3, [r3, #20]
 8007694:	43da      	mvns	r2, r3
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	4013      	ands	r3, r2
 800769a:	b29b      	uxth	r3, r3
 800769c:	2b00      	cmp	r3, #0
 800769e:	bf0c      	ite	eq
 80076a0:	2301      	moveq	r3, #1
 80076a2:	2300      	movne	r3, #0
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	461a      	mov	r2, r3
 80076a8:	e00c      	b.n	80076c4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	699b      	ldr	r3, [r3, #24]
 80076b0:	43da      	mvns	r2, r3
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	4013      	ands	r3, r2
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	bf0c      	ite	eq
 80076bc:	2301      	moveq	r3, #1
 80076be:	2300      	movne	r3, #0
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	461a      	mov	r2, r3
 80076c4:	79fb      	ldrb	r3, [r7, #7]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d093      	beq.n	80075f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3710      	adds	r7, #16
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
 80076e0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80076e2:	e071      	b.n	80077c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	695b      	ldr	r3, [r3, #20]
 80076ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076f2:	d123      	bne.n	800773c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007702:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800770c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2200      	movs	r2, #0
 8007712:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2220      	movs	r2, #32
 8007718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007728:	f043 0204 	orr.w	r2, r3, #4
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2200      	movs	r2, #0
 8007734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	e067      	b.n	800780c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007742:	d041      	beq.n	80077c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007744:	f7fd fdde 	bl	8005304 <HAL_GetTick>
 8007748:	4602      	mov	r2, r0
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	429a      	cmp	r2, r3
 8007752:	d302      	bcc.n	800775a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d136      	bne.n	80077c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	0c1b      	lsrs	r3, r3, #16
 800775e:	b2db      	uxtb	r3, r3
 8007760:	2b01      	cmp	r3, #1
 8007762:	d10c      	bne.n	800777e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	43da      	mvns	r2, r3
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	4013      	ands	r3, r2
 8007770:	b29b      	uxth	r3, r3
 8007772:	2b00      	cmp	r3, #0
 8007774:	bf14      	ite	ne
 8007776:	2301      	movne	r3, #1
 8007778:	2300      	moveq	r3, #0
 800777a:	b2db      	uxtb	r3, r3
 800777c:	e00b      	b.n	8007796 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	699b      	ldr	r3, [r3, #24]
 8007784:	43da      	mvns	r2, r3
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	4013      	ands	r3, r2
 800778a:	b29b      	uxth	r3, r3
 800778c:	2b00      	cmp	r3, #0
 800778e:	bf14      	ite	ne
 8007790:	2301      	movne	r3, #1
 8007792:	2300      	moveq	r3, #0
 8007794:	b2db      	uxtb	r3, r3
 8007796:	2b00      	cmp	r3, #0
 8007798:	d016      	beq.n	80077c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2200      	movs	r2, #0
 800779e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2220      	movs	r2, #32
 80077a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077b4:	f043 0220 	orr.w	r2, r3, #32
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2200      	movs	r2, #0
 80077c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	e021      	b.n	800780c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	0c1b      	lsrs	r3, r3, #16
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d10c      	bne.n	80077ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	695b      	ldr	r3, [r3, #20]
 80077d8:	43da      	mvns	r2, r3
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	4013      	ands	r3, r2
 80077de:	b29b      	uxth	r3, r3
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	bf14      	ite	ne
 80077e4:	2301      	movne	r3, #1
 80077e6:	2300      	moveq	r3, #0
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	e00b      	b.n	8007804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	699b      	ldr	r3, [r3, #24]
 80077f2:	43da      	mvns	r2, r3
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	4013      	ands	r3, r2
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	bf14      	ite	ne
 80077fe:	2301      	movne	r3, #1
 8007800:	2300      	moveq	r3, #0
 8007802:	b2db      	uxtb	r3, r3
 8007804:	2b00      	cmp	r3, #0
 8007806:	f47f af6d 	bne.w	80076e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007820:	e034      	b.n	800788c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f000 f8e3 	bl	80079ee <I2C_IsAcknowledgeFailed>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d001      	beq.n	8007832 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	e034      	b.n	800789c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007838:	d028      	beq.n	800788c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800783a:	f7fd fd63 	bl	8005304 <HAL_GetTick>
 800783e:	4602      	mov	r2, r0
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	1ad3      	subs	r3, r2, r3
 8007844:	68ba      	ldr	r2, [r7, #8]
 8007846:	429a      	cmp	r2, r3
 8007848:	d302      	bcc.n	8007850 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d11d      	bne.n	800788c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	695b      	ldr	r3, [r3, #20]
 8007856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800785a:	2b80      	cmp	r3, #128	@ 0x80
 800785c:	d016      	beq.n	800788c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2200      	movs	r2, #0
 8007862:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2220      	movs	r2, #32
 8007868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007878:	f043 0220 	orr.w	r2, r3, #32
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2200      	movs	r2, #0
 8007884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e007      	b.n	800789c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	695b      	ldr	r3, [r3, #20]
 8007892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007896:	2b80      	cmp	r3, #128	@ 0x80
 8007898:	d1c3      	bne.n	8007822 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80078b0:	e034      	b.n	800791c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f000 f89b 	bl	80079ee <I2C_IsAcknowledgeFailed>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d001      	beq.n	80078c2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e034      	b.n	800792c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c8:	d028      	beq.n	800791c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078ca:	f7fd fd1b 	bl	8005304 <HAL_GetTick>
 80078ce:	4602      	mov	r2, r0
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	1ad3      	subs	r3, r2, r3
 80078d4:	68ba      	ldr	r2, [r7, #8]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d302      	bcc.n	80078e0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d11d      	bne.n	800791c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	695b      	ldr	r3, [r3, #20]
 80078e6:	f003 0304 	and.w	r3, r3, #4
 80078ea:	2b04      	cmp	r3, #4
 80078ec:	d016      	beq.n	800791c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2200      	movs	r2, #0
 80078f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2220      	movs	r2, #32
 80078f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007908:	f043 0220 	orr.w	r2, r3, #32
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	e007      	b.n	800792c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	695b      	ldr	r3, [r3, #20]
 8007922:	f003 0304 	and.w	r3, r3, #4
 8007926:	2b04      	cmp	r3, #4
 8007928:	d1c3      	bne.n	80078b2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007940:	e049      	b.n	80079d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	695b      	ldr	r3, [r3, #20]
 8007948:	f003 0310 	and.w	r3, r3, #16
 800794c:	2b10      	cmp	r3, #16
 800794e:	d119      	bne.n	8007984 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f06f 0210 	mvn.w	r2, #16
 8007958:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2200      	movs	r2, #0
 800795e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2220      	movs	r2, #32
 8007964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2200      	movs	r2, #0
 800796c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2200      	movs	r2, #0
 800797c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	e030      	b.n	80079e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007984:	f7fd fcbe 	bl	8005304 <HAL_GetTick>
 8007988:	4602      	mov	r2, r0
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	1ad3      	subs	r3, r2, r3
 800798e:	68ba      	ldr	r2, [r7, #8]
 8007990:	429a      	cmp	r2, r3
 8007992:	d302      	bcc.n	800799a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d11d      	bne.n	80079d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	695b      	ldr	r3, [r3, #20]
 80079a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079a4:	2b40      	cmp	r3, #64	@ 0x40
 80079a6:	d016      	beq.n	80079d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2200      	movs	r2, #0
 80079ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2220      	movs	r2, #32
 80079b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079c2:	f043 0220 	orr.w	r2, r3, #32
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e007      	b.n	80079e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	695b      	ldr	r3, [r3, #20]
 80079dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079e0:	2b40      	cmp	r3, #64	@ 0x40
 80079e2:	d1ae      	bne.n	8007942 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80079ee:	b480      	push	{r7}
 80079f0:	b083      	sub	sp, #12
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	695b      	ldr	r3, [r3, #20]
 80079fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a04:	d11b      	bne.n	8007a3e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007a0e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2220      	movs	r2, #32
 8007a1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a2a:	f043 0204 	orr.w	r2, r3, #4
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e000      	b.n	8007a40 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	2b20      	cmp	r3, #32
 8007a60:	d129      	bne.n	8007ab6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2224      	movs	r2, #36	@ 0x24
 8007a66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f022 0201 	bic.w	r2, r2, #1
 8007a78:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f022 0210 	bic.w	r2, r2, #16
 8007a88:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	430a      	orrs	r2, r1
 8007a98:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f042 0201 	orr.w	r2, r2, #1
 8007aa8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2220      	movs	r2, #32
 8007aae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	e000      	b.n	8007ab8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8007ab6:	2302      	movs	r3, #2
  }
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b085      	sub	sp, #20
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	2b20      	cmp	r3, #32
 8007adc:	d12a      	bne.n	8007b34 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2224      	movs	r2, #36	@ 0x24
 8007ae2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f022 0201 	bic.w	r2, r2, #1
 8007af4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007afc:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8007afe:	89fb      	ldrh	r3, [r7, #14]
 8007b00:	f023 030f 	bic.w	r3, r3, #15
 8007b04:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	89fb      	ldrh	r3, [r7, #14]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	89fa      	ldrh	r2, [r7, #14]
 8007b16:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f042 0201 	orr.w	r2, r2, #1
 8007b26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2220      	movs	r2, #32
 8007b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8007b30:	2300      	movs	r3, #0
 8007b32:	e000      	b.n	8007b36 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007b34:	2302      	movs	r3, #2
  }
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3714      	adds	r7, #20
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
	...

08007b44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b086      	sub	sp, #24
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d101      	bne.n	8007b56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e267      	b.n	8008026 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f003 0301 	and.w	r3, r3, #1
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d075      	beq.n	8007c4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007b62:	4b88      	ldr	r3, [pc, #544]	@ (8007d84 <HAL_RCC_OscConfig+0x240>)
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	f003 030c 	and.w	r3, r3, #12
 8007b6a:	2b04      	cmp	r3, #4
 8007b6c:	d00c      	beq.n	8007b88 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b6e:	4b85      	ldr	r3, [pc, #532]	@ (8007d84 <HAL_RCC_OscConfig+0x240>)
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007b76:	2b08      	cmp	r3, #8
 8007b78:	d112      	bne.n	8007ba0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b7a:	4b82      	ldr	r3, [pc, #520]	@ (8007d84 <HAL_RCC_OscConfig+0x240>)
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b86:	d10b      	bne.n	8007ba0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b88:	4b7e      	ldr	r3, [pc, #504]	@ (8007d84 <HAL_RCC_OscConfig+0x240>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d05b      	beq.n	8007c4c <HAL_RCC_OscConfig+0x108>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d157      	bne.n	8007c4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e242      	b.n	8008026 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ba8:	d106      	bne.n	8007bb8 <HAL_RCC_OscConfig+0x74>
 8007baa:	4b76      	ldr	r3, [pc, #472]	@ (8007d84 <HAL_RCC_OscConfig+0x240>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a75      	ldr	r2, [pc, #468]	@ (8007d84 <HAL_RCC_OscConfig+0x240>)
 8007bb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bb4:	6013      	str	r3, [r2, #0]
 8007bb6:	e01d      	b.n	8007bf4 <HAL_RCC_OscConfig+0xb0>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007bc0:	d10c      	bne.n	8007bdc <HAL_RCC_OscConfig+0x98>
 8007bc2:	4b70      	ldr	r3, [pc, #448]	@ (8007d84 <HAL_RCC_OscConfig+0x240>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a6f      	ldr	r2, [pc, #444]	@ (8007d84 <HAL_RCC_OscConfig+0x240>)
 8007bc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007bcc:	6013      	str	r3, [r2, #0]
 8007bce:	4b6d      	ldr	r3, [pc, #436]	@ (8007d84 <HAL_RCC_OscConfig+0x240>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a6c      	ldr	r2, [pc, #432]	@ (8007d84 <HAL_RCC_OscConfig+0x240>)
 8007bd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bd8:	6013      	str	r3, [r2, #0]
 8007bda:	e00b      	b.n	8007bf4 <HAL_RCC_OscConfig+0xb0>
 8007bdc:	4b69      	ldr	r3, [pc, #420]	@ (8007d84 <HAL_RCC_OscConfig+0x240>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a68      	ldr	r2, [pc, #416]	@ (8007d84 <HAL_RCC_OscConfig+0x240>)
 8007be2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007be6:	6013      	str	r3, [r2, #0]
 8007be8:	4b66      	ldr	r3, [pc, #408]	@ (8007d84 <HAL_RCC_OscConfig+0x240>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a65      	ldr	r2, [pc, #404]	@ (8007d84 <HAL_RCC_OscConfig+0x240>)
 8007bee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007bf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d013      	beq.n	8007c24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bfc:	f7fd fb82 	bl	8005304 <HAL_GetTick>
 8007c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c02:	e008      	b.n	8007c16 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c04:	f7fd fb7e 	bl	8005304 <HAL_GetTick>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	1ad3      	subs	r3, r2, r3
 8007c0e:	2b64      	cmp	r3, #100	@ 0x64
 8007c10:	d901      	bls.n	8007c16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007c12:	2303      	movs	r3, #3
 8007c14:	e207      	b.n	8008026 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c16:	4b5b      	ldr	r3, [pc, #364]	@ (8007d84 <HAL_RCC_OscConfig+0x240>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d0f0      	beq.n	8007c04 <HAL_RCC_OscConfig+0xc0>
 8007c22:	e014      	b.n	8007c4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c24:	f7fd fb6e 	bl	8005304 <HAL_GetTick>
 8007c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c2a:	e008      	b.n	8007c3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c2c:	f7fd fb6a 	bl	8005304 <HAL_GetTick>
 8007c30:	4602      	mov	r2, r0
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	1ad3      	subs	r3, r2, r3
 8007c36:	2b64      	cmp	r3, #100	@ 0x64
 8007c38:	d901      	bls.n	8007c3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	e1f3      	b.n	8008026 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c3e:	4b51      	ldr	r3, [pc, #324]	@ (8007d84 <HAL_RCC_OscConfig+0x240>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1f0      	bne.n	8007c2c <HAL_RCC_OscConfig+0xe8>
 8007c4a:	e000      	b.n	8007c4e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 0302 	and.w	r3, r3, #2
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d063      	beq.n	8007d22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007c5a:	4b4a      	ldr	r3, [pc, #296]	@ (8007d84 <HAL_RCC_OscConfig+0x240>)
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	f003 030c 	and.w	r3, r3, #12
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00b      	beq.n	8007c7e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c66:	4b47      	ldr	r3, [pc, #284]	@ (8007d84 <HAL_RCC_OscConfig+0x240>)
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007c6e:	2b08      	cmp	r3, #8
 8007c70:	d11c      	bne.n	8007cac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c72:	4b44      	ldr	r3, [pc, #272]	@ (8007d84 <HAL_RCC_OscConfig+0x240>)
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d116      	bne.n	8007cac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c7e:	4b41      	ldr	r3, [pc, #260]	@ (8007d84 <HAL_RCC_OscConfig+0x240>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f003 0302 	and.w	r3, r3, #2
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d005      	beq.n	8007c96 <HAL_RCC_OscConfig+0x152>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d001      	beq.n	8007c96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e1c7      	b.n	8008026 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c96:	4b3b      	ldr	r3, [pc, #236]	@ (8007d84 <HAL_RCC_OscConfig+0x240>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	00db      	lsls	r3, r3, #3
 8007ca4:	4937      	ldr	r1, [pc, #220]	@ (8007d84 <HAL_RCC_OscConfig+0x240>)
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007caa:	e03a      	b.n	8007d22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d020      	beq.n	8007cf6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007cb4:	4b34      	ldr	r3, [pc, #208]	@ (8007d88 <HAL_RCC_OscConfig+0x244>)
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cba:	f7fd fb23 	bl	8005304 <HAL_GetTick>
 8007cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cc0:	e008      	b.n	8007cd4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007cc2:	f7fd fb1f 	bl	8005304 <HAL_GetTick>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	1ad3      	subs	r3, r2, r3
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	d901      	bls.n	8007cd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007cd0:	2303      	movs	r3, #3
 8007cd2:	e1a8      	b.n	8008026 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8007d84 <HAL_RCC_OscConfig+0x240>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f003 0302 	and.w	r3, r3, #2
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d0f0      	beq.n	8007cc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ce0:	4b28      	ldr	r3, [pc, #160]	@ (8007d84 <HAL_RCC_OscConfig+0x240>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	00db      	lsls	r3, r3, #3
 8007cee:	4925      	ldr	r1, [pc, #148]	@ (8007d84 <HAL_RCC_OscConfig+0x240>)
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	600b      	str	r3, [r1, #0]
 8007cf4:	e015      	b.n	8007d22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007cf6:	4b24      	ldr	r3, [pc, #144]	@ (8007d88 <HAL_RCC_OscConfig+0x244>)
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cfc:	f7fd fb02 	bl	8005304 <HAL_GetTick>
 8007d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d02:	e008      	b.n	8007d16 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d04:	f7fd fafe 	bl	8005304 <HAL_GetTick>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	1ad3      	subs	r3, r2, r3
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	d901      	bls.n	8007d16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007d12:	2303      	movs	r3, #3
 8007d14:	e187      	b.n	8008026 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d16:	4b1b      	ldr	r3, [pc, #108]	@ (8007d84 <HAL_RCC_OscConfig+0x240>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 0302 	and.w	r3, r3, #2
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1f0      	bne.n	8007d04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f003 0308 	and.w	r3, r3, #8
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d036      	beq.n	8007d9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	695b      	ldr	r3, [r3, #20]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d016      	beq.n	8007d64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d36:	4b15      	ldr	r3, [pc, #84]	@ (8007d8c <HAL_RCC_OscConfig+0x248>)
 8007d38:	2201      	movs	r2, #1
 8007d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d3c:	f7fd fae2 	bl	8005304 <HAL_GetTick>
 8007d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d42:	e008      	b.n	8007d56 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d44:	f7fd fade 	bl	8005304 <HAL_GetTick>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	1ad3      	subs	r3, r2, r3
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	d901      	bls.n	8007d56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e167      	b.n	8008026 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d56:	4b0b      	ldr	r3, [pc, #44]	@ (8007d84 <HAL_RCC_OscConfig+0x240>)
 8007d58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d5a:	f003 0302 	and.w	r3, r3, #2
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d0f0      	beq.n	8007d44 <HAL_RCC_OscConfig+0x200>
 8007d62:	e01b      	b.n	8007d9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d64:	4b09      	ldr	r3, [pc, #36]	@ (8007d8c <HAL_RCC_OscConfig+0x248>)
 8007d66:	2200      	movs	r2, #0
 8007d68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d6a:	f7fd facb 	bl	8005304 <HAL_GetTick>
 8007d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d70:	e00e      	b.n	8007d90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d72:	f7fd fac7 	bl	8005304 <HAL_GetTick>
 8007d76:	4602      	mov	r2, r0
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	1ad3      	subs	r3, r2, r3
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d907      	bls.n	8007d90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007d80:	2303      	movs	r3, #3
 8007d82:	e150      	b.n	8008026 <HAL_RCC_OscConfig+0x4e2>
 8007d84:	40023800 	.word	0x40023800
 8007d88:	42470000 	.word	0x42470000
 8007d8c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d90:	4b88      	ldr	r3, [pc, #544]	@ (8007fb4 <HAL_RCC_OscConfig+0x470>)
 8007d92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d94:	f003 0302 	and.w	r3, r3, #2
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d1ea      	bne.n	8007d72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 0304 	and.w	r3, r3, #4
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	f000 8097 	beq.w	8007ed8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007daa:	2300      	movs	r3, #0
 8007dac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007dae:	4b81      	ldr	r3, [pc, #516]	@ (8007fb4 <HAL_RCC_OscConfig+0x470>)
 8007db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d10f      	bne.n	8007dda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007dba:	2300      	movs	r3, #0
 8007dbc:	60bb      	str	r3, [r7, #8]
 8007dbe:	4b7d      	ldr	r3, [pc, #500]	@ (8007fb4 <HAL_RCC_OscConfig+0x470>)
 8007dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dc2:	4a7c      	ldr	r2, [pc, #496]	@ (8007fb4 <HAL_RCC_OscConfig+0x470>)
 8007dc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007dc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8007dca:	4b7a      	ldr	r3, [pc, #488]	@ (8007fb4 <HAL_RCC_OscConfig+0x470>)
 8007dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007dd2:	60bb      	str	r3, [r7, #8]
 8007dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007dda:	4b77      	ldr	r3, [pc, #476]	@ (8007fb8 <HAL_RCC_OscConfig+0x474>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d118      	bne.n	8007e18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007de6:	4b74      	ldr	r3, [pc, #464]	@ (8007fb8 <HAL_RCC_OscConfig+0x474>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a73      	ldr	r2, [pc, #460]	@ (8007fb8 <HAL_RCC_OscConfig+0x474>)
 8007dec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007df2:	f7fd fa87 	bl	8005304 <HAL_GetTick>
 8007df6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007df8:	e008      	b.n	8007e0c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007dfa:	f7fd fa83 	bl	8005304 <HAL_GetTick>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	d901      	bls.n	8007e0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	e10c      	b.n	8008026 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e0c:	4b6a      	ldr	r3, [pc, #424]	@ (8007fb8 <HAL_RCC_OscConfig+0x474>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d0f0      	beq.n	8007dfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d106      	bne.n	8007e2e <HAL_RCC_OscConfig+0x2ea>
 8007e20:	4b64      	ldr	r3, [pc, #400]	@ (8007fb4 <HAL_RCC_OscConfig+0x470>)
 8007e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e24:	4a63      	ldr	r2, [pc, #396]	@ (8007fb4 <HAL_RCC_OscConfig+0x470>)
 8007e26:	f043 0301 	orr.w	r3, r3, #1
 8007e2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e2c:	e01c      	b.n	8007e68 <HAL_RCC_OscConfig+0x324>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	2b05      	cmp	r3, #5
 8007e34:	d10c      	bne.n	8007e50 <HAL_RCC_OscConfig+0x30c>
 8007e36:	4b5f      	ldr	r3, [pc, #380]	@ (8007fb4 <HAL_RCC_OscConfig+0x470>)
 8007e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e3a:	4a5e      	ldr	r2, [pc, #376]	@ (8007fb4 <HAL_RCC_OscConfig+0x470>)
 8007e3c:	f043 0304 	orr.w	r3, r3, #4
 8007e40:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e42:	4b5c      	ldr	r3, [pc, #368]	@ (8007fb4 <HAL_RCC_OscConfig+0x470>)
 8007e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e46:	4a5b      	ldr	r2, [pc, #364]	@ (8007fb4 <HAL_RCC_OscConfig+0x470>)
 8007e48:	f043 0301 	orr.w	r3, r3, #1
 8007e4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e4e:	e00b      	b.n	8007e68 <HAL_RCC_OscConfig+0x324>
 8007e50:	4b58      	ldr	r3, [pc, #352]	@ (8007fb4 <HAL_RCC_OscConfig+0x470>)
 8007e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e54:	4a57      	ldr	r2, [pc, #348]	@ (8007fb4 <HAL_RCC_OscConfig+0x470>)
 8007e56:	f023 0301 	bic.w	r3, r3, #1
 8007e5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e5c:	4b55      	ldr	r3, [pc, #340]	@ (8007fb4 <HAL_RCC_OscConfig+0x470>)
 8007e5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e60:	4a54      	ldr	r2, [pc, #336]	@ (8007fb4 <HAL_RCC_OscConfig+0x470>)
 8007e62:	f023 0304 	bic.w	r3, r3, #4
 8007e66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d015      	beq.n	8007e9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e70:	f7fd fa48 	bl	8005304 <HAL_GetTick>
 8007e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e76:	e00a      	b.n	8007e8e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e78:	f7fd fa44 	bl	8005304 <HAL_GetTick>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d901      	bls.n	8007e8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	e0cb      	b.n	8008026 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e8e:	4b49      	ldr	r3, [pc, #292]	@ (8007fb4 <HAL_RCC_OscConfig+0x470>)
 8007e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e92:	f003 0302 	and.w	r3, r3, #2
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d0ee      	beq.n	8007e78 <HAL_RCC_OscConfig+0x334>
 8007e9a:	e014      	b.n	8007ec6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e9c:	f7fd fa32 	bl	8005304 <HAL_GetTick>
 8007ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ea2:	e00a      	b.n	8007eba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ea4:	f7fd fa2e 	bl	8005304 <HAL_GetTick>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	1ad3      	subs	r3, r2, r3
 8007eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d901      	bls.n	8007eba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007eb6:	2303      	movs	r3, #3
 8007eb8:	e0b5      	b.n	8008026 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007eba:	4b3e      	ldr	r3, [pc, #248]	@ (8007fb4 <HAL_RCC_OscConfig+0x470>)
 8007ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ebe:	f003 0302 	and.w	r3, r3, #2
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1ee      	bne.n	8007ea4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007ec6:	7dfb      	ldrb	r3, [r7, #23]
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d105      	bne.n	8007ed8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ecc:	4b39      	ldr	r3, [pc, #228]	@ (8007fb4 <HAL_RCC_OscConfig+0x470>)
 8007ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ed0:	4a38      	ldr	r2, [pc, #224]	@ (8007fb4 <HAL_RCC_OscConfig+0x470>)
 8007ed2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ed6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	699b      	ldr	r3, [r3, #24]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f000 80a1 	beq.w	8008024 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007ee2:	4b34      	ldr	r3, [pc, #208]	@ (8007fb4 <HAL_RCC_OscConfig+0x470>)
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	f003 030c 	and.w	r3, r3, #12
 8007eea:	2b08      	cmp	r3, #8
 8007eec:	d05c      	beq.n	8007fa8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	699b      	ldr	r3, [r3, #24]
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d141      	bne.n	8007f7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ef6:	4b31      	ldr	r3, [pc, #196]	@ (8007fbc <HAL_RCC_OscConfig+0x478>)
 8007ef8:	2200      	movs	r2, #0
 8007efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007efc:	f7fd fa02 	bl	8005304 <HAL_GetTick>
 8007f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f02:	e008      	b.n	8007f16 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f04:	f7fd f9fe 	bl	8005304 <HAL_GetTick>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d901      	bls.n	8007f16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e087      	b.n	8008026 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f16:	4b27      	ldr	r3, [pc, #156]	@ (8007fb4 <HAL_RCC_OscConfig+0x470>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1f0      	bne.n	8007f04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	69da      	ldr	r2, [r3, #28]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a1b      	ldr	r3, [r3, #32]
 8007f2a:	431a      	orrs	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f30:	019b      	lsls	r3, r3, #6
 8007f32:	431a      	orrs	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f38:	085b      	lsrs	r3, r3, #1
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	041b      	lsls	r3, r3, #16
 8007f3e:	431a      	orrs	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f44:	061b      	lsls	r3, r3, #24
 8007f46:	491b      	ldr	r1, [pc, #108]	@ (8007fb4 <HAL_RCC_OscConfig+0x470>)
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8007fbc <HAL_RCC_OscConfig+0x478>)
 8007f4e:	2201      	movs	r2, #1
 8007f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f52:	f7fd f9d7 	bl	8005304 <HAL_GetTick>
 8007f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f58:	e008      	b.n	8007f6c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f5a:	f7fd f9d3 	bl	8005304 <HAL_GetTick>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	1ad3      	subs	r3, r2, r3
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	d901      	bls.n	8007f6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007f68:	2303      	movs	r3, #3
 8007f6a:	e05c      	b.n	8008026 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f6c:	4b11      	ldr	r3, [pc, #68]	@ (8007fb4 <HAL_RCC_OscConfig+0x470>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d0f0      	beq.n	8007f5a <HAL_RCC_OscConfig+0x416>
 8007f78:	e054      	b.n	8008024 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f7a:	4b10      	ldr	r3, [pc, #64]	@ (8007fbc <HAL_RCC_OscConfig+0x478>)
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f80:	f7fd f9c0 	bl	8005304 <HAL_GetTick>
 8007f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f86:	e008      	b.n	8007f9a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f88:	f7fd f9bc 	bl	8005304 <HAL_GetTick>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	2b02      	cmp	r3, #2
 8007f94:	d901      	bls.n	8007f9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007f96:	2303      	movs	r3, #3
 8007f98:	e045      	b.n	8008026 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f9a:	4b06      	ldr	r3, [pc, #24]	@ (8007fb4 <HAL_RCC_OscConfig+0x470>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1f0      	bne.n	8007f88 <HAL_RCC_OscConfig+0x444>
 8007fa6:	e03d      	b.n	8008024 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	699b      	ldr	r3, [r3, #24]
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d107      	bne.n	8007fc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e038      	b.n	8008026 <HAL_RCC_OscConfig+0x4e2>
 8007fb4:	40023800 	.word	0x40023800
 8007fb8:	40007000 	.word	0x40007000
 8007fbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8008030 <HAL_RCC_OscConfig+0x4ec>)
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	699b      	ldr	r3, [r3, #24]
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d028      	beq.n	8008020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d121      	bne.n	8008020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d11a      	bne.n	8008020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007ff0:	4013      	ands	r3, r2
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007ff6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d111      	bne.n	8008020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008006:	085b      	lsrs	r3, r3, #1
 8008008:	3b01      	subs	r3, #1
 800800a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800800c:	429a      	cmp	r2, r3
 800800e:	d107      	bne.n	8008020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800801a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800801c:	429a      	cmp	r2, r3
 800801e:	d001      	beq.n	8008024 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	e000      	b.n	8008026 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3718      	adds	r7, #24
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	40023800 	.word	0x40023800

08008034 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d101      	bne.n	8008048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	e0cc      	b.n	80081e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008048:	4b68      	ldr	r3, [pc, #416]	@ (80081ec <HAL_RCC_ClockConfig+0x1b8>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f003 030f 	and.w	r3, r3, #15
 8008050:	683a      	ldr	r2, [r7, #0]
 8008052:	429a      	cmp	r2, r3
 8008054:	d90c      	bls.n	8008070 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008056:	4b65      	ldr	r3, [pc, #404]	@ (80081ec <HAL_RCC_ClockConfig+0x1b8>)
 8008058:	683a      	ldr	r2, [r7, #0]
 800805a:	b2d2      	uxtb	r2, r2
 800805c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800805e:	4b63      	ldr	r3, [pc, #396]	@ (80081ec <HAL_RCC_ClockConfig+0x1b8>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f003 030f 	and.w	r3, r3, #15
 8008066:	683a      	ldr	r2, [r7, #0]
 8008068:	429a      	cmp	r2, r3
 800806a:	d001      	beq.n	8008070 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e0b8      	b.n	80081e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f003 0302 	and.w	r3, r3, #2
 8008078:	2b00      	cmp	r3, #0
 800807a:	d020      	beq.n	80080be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f003 0304 	and.w	r3, r3, #4
 8008084:	2b00      	cmp	r3, #0
 8008086:	d005      	beq.n	8008094 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008088:	4b59      	ldr	r3, [pc, #356]	@ (80081f0 <HAL_RCC_ClockConfig+0x1bc>)
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	4a58      	ldr	r2, [pc, #352]	@ (80081f0 <HAL_RCC_ClockConfig+0x1bc>)
 800808e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008092:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 0308 	and.w	r3, r3, #8
 800809c:	2b00      	cmp	r3, #0
 800809e:	d005      	beq.n	80080ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80080a0:	4b53      	ldr	r3, [pc, #332]	@ (80081f0 <HAL_RCC_ClockConfig+0x1bc>)
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	4a52      	ldr	r2, [pc, #328]	@ (80081f0 <HAL_RCC_ClockConfig+0x1bc>)
 80080a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80080aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080ac:	4b50      	ldr	r3, [pc, #320]	@ (80081f0 <HAL_RCC_ClockConfig+0x1bc>)
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	494d      	ldr	r1, [pc, #308]	@ (80081f0 <HAL_RCC_ClockConfig+0x1bc>)
 80080ba:	4313      	orrs	r3, r2
 80080bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f003 0301 	and.w	r3, r3, #1
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d044      	beq.n	8008154 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d107      	bne.n	80080e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080d2:	4b47      	ldr	r3, [pc, #284]	@ (80081f0 <HAL_RCC_ClockConfig+0x1bc>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d119      	bne.n	8008112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e07f      	b.n	80081e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d003      	beq.n	80080f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80080ee:	2b03      	cmp	r3, #3
 80080f0:	d107      	bne.n	8008102 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080f2:	4b3f      	ldr	r3, [pc, #252]	@ (80081f0 <HAL_RCC_ClockConfig+0x1bc>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d109      	bne.n	8008112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	e06f      	b.n	80081e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008102:	4b3b      	ldr	r3, [pc, #236]	@ (80081f0 <HAL_RCC_ClockConfig+0x1bc>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f003 0302 	and.w	r3, r3, #2
 800810a:	2b00      	cmp	r3, #0
 800810c:	d101      	bne.n	8008112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e067      	b.n	80081e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008112:	4b37      	ldr	r3, [pc, #220]	@ (80081f0 <HAL_RCC_ClockConfig+0x1bc>)
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	f023 0203 	bic.w	r2, r3, #3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	4934      	ldr	r1, [pc, #208]	@ (80081f0 <HAL_RCC_ClockConfig+0x1bc>)
 8008120:	4313      	orrs	r3, r2
 8008122:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008124:	f7fd f8ee 	bl	8005304 <HAL_GetTick>
 8008128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800812a:	e00a      	b.n	8008142 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800812c:	f7fd f8ea 	bl	8005304 <HAL_GetTick>
 8008130:	4602      	mov	r2, r0
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	1ad3      	subs	r3, r2, r3
 8008136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800813a:	4293      	cmp	r3, r2
 800813c:	d901      	bls.n	8008142 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800813e:	2303      	movs	r3, #3
 8008140:	e04f      	b.n	80081e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008142:	4b2b      	ldr	r3, [pc, #172]	@ (80081f0 <HAL_RCC_ClockConfig+0x1bc>)
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	f003 020c 	and.w	r2, r3, #12
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	429a      	cmp	r2, r3
 8008152:	d1eb      	bne.n	800812c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008154:	4b25      	ldr	r3, [pc, #148]	@ (80081ec <HAL_RCC_ClockConfig+0x1b8>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f003 030f 	and.w	r3, r3, #15
 800815c:	683a      	ldr	r2, [r7, #0]
 800815e:	429a      	cmp	r2, r3
 8008160:	d20c      	bcs.n	800817c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008162:	4b22      	ldr	r3, [pc, #136]	@ (80081ec <HAL_RCC_ClockConfig+0x1b8>)
 8008164:	683a      	ldr	r2, [r7, #0]
 8008166:	b2d2      	uxtb	r2, r2
 8008168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800816a:	4b20      	ldr	r3, [pc, #128]	@ (80081ec <HAL_RCC_ClockConfig+0x1b8>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f003 030f 	and.w	r3, r3, #15
 8008172:	683a      	ldr	r2, [r7, #0]
 8008174:	429a      	cmp	r2, r3
 8008176:	d001      	beq.n	800817c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	e032      	b.n	80081e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f003 0304 	and.w	r3, r3, #4
 8008184:	2b00      	cmp	r3, #0
 8008186:	d008      	beq.n	800819a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008188:	4b19      	ldr	r3, [pc, #100]	@ (80081f0 <HAL_RCC_ClockConfig+0x1bc>)
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	4916      	ldr	r1, [pc, #88]	@ (80081f0 <HAL_RCC_ClockConfig+0x1bc>)
 8008196:	4313      	orrs	r3, r2
 8008198:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f003 0308 	and.w	r3, r3, #8
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d009      	beq.n	80081ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80081a6:	4b12      	ldr	r3, [pc, #72]	@ (80081f0 <HAL_RCC_ClockConfig+0x1bc>)
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	691b      	ldr	r3, [r3, #16]
 80081b2:	00db      	lsls	r3, r3, #3
 80081b4:	490e      	ldr	r1, [pc, #56]	@ (80081f0 <HAL_RCC_ClockConfig+0x1bc>)
 80081b6:	4313      	orrs	r3, r2
 80081b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80081ba:	f000 f821 	bl	8008200 <HAL_RCC_GetSysClockFreq>
 80081be:	4602      	mov	r2, r0
 80081c0:	4b0b      	ldr	r3, [pc, #44]	@ (80081f0 <HAL_RCC_ClockConfig+0x1bc>)
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	091b      	lsrs	r3, r3, #4
 80081c6:	f003 030f 	and.w	r3, r3, #15
 80081ca:	490a      	ldr	r1, [pc, #40]	@ (80081f4 <HAL_RCC_ClockConfig+0x1c0>)
 80081cc:	5ccb      	ldrb	r3, [r1, r3]
 80081ce:	fa22 f303 	lsr.w	r3, r2, r3
 80081d2:	4a09      	ldr	r2, [pc, #36]	@ (80081f8 <HAL_RCC_ClockConfig+0x1c4>)
 80081d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80081d6:	4b09      	ldr	r3, [pc, #36]	@ (80081fc <HAL_RCC_ClockConfig+0x1c8>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4618      	mov	r0, r3
 80081dc:	f7fd f84e 	bl	800527c <HAL_InitTick>

  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	40023c00 	.word	0x40023c00
 80081f0:	40023800 	.word	0x40023800
 80081f4:	08011334 	.word	0x08011334
 80081f8:	20000144 	.word	0x20000144
 80081fc:	20000148 	.word	0x20000148

08008200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008204:	b090      	sub	sp, #64	@ 0x40
 8008206:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008208:	2300      	movs	r3, #0
 800820a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800820c:	2300      	movs	r3, #0
 800820e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8008210:	2300      	movs	r3, #0
 8008212:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008214:	2300      	movs	r3, #0
 8008216:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008218:	4b59      	ldr	r3, [pc, #356]	@ (8008380 <HAL_RCC_GetSysClockFreq+0x180>)
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	f003 030c 	and.w	r3, r3, #12
 8008220:	2b08      	cmp	r3, #8
 8008222:	d00d      	beq.n	8008240 <HAL_RCC_GetSysClockFreq+0x40>
 8008224:	2b08      	cmp	r3, #8
 8008226:	f200 80a1 	bhi.w	800836c <HAL_RCC_GetSysClockFreq+0x16c>
 800822a:	2b00      	cmp	r3, #0
 800822c:	d002      	beq.n	8008234 <HAL_RCC_GetSysClockFreq+0x34>
 800822e:	2b04      	cmp	r3, #4
 8008230:	d003      	beq.n	800823a <HAL_RCC_GetSysClockFreq+0x3a>
 8008232:	e09b      	b.n	800836c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008234:	4b53      	ldr	r3, [pc, #332]	@ (8008384 <HAL_RCC_GetSysClockFreq+0x184>)
 8008236:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008238:	e09b      	b.n	8008372 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800823a:	4b53      	ldr	r3, [pc, #332]	@ (8008388 <HAL_RCC_GetSysClockFreq+0x188>)
 800823c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800823e:	e098      	b.n	8008372 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008240:	4b4f      	ldr	r3, [pc, #316]	@ (8008380 <HAL_RCC_GetSysClockFreq+0x180>)
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008248:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800824a:	4b4d      	ldr	r3, [pc, #308]	@ (8008380 <HAL_RCC_GetSysClockFreq+0x180>)
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008252:	2b00      	cmp	r3, #0
 8008254:	d028      	beq.n	80082a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008256:	4b4a      	ldr	r3, [pc, #296]	@ (8008380 <HAL_RCC_GetSysClockFreq+0x180>)
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	099b      	lsrs	r3, r3, #6
 800825c:	2200      	movs	r2, #0
 800825e:	623b      	str	r3, [r7, #32]
 8008260:	627a      	str	r2, [r7, #36]	@ 0x24
 8008262:	6a3b      	ldr	r3, [r7, #32]
 8008264:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008268:	2100      	movs	r1, #0
 800826a:	4b47      	ldr	r3, [pc, #284]	@ (8008388 <HAL_RCC_GetSysClockFreq+0x188>)
 800826c:	fb03 f201 	mul.w	r2, r3, r1
 8008270:	2300      	movs	r3, #0
 8008272:	fb00 f303 	mul.w	r3, r0, r3
 8008276:	4413      	add	r3, r2
 8008278:	4a43      	ldr	r2, [pc, #268]	@ (8008388 <HAL_RCC_GetSysClockFreq+0x188>)
 800827a:	fba0 1202 	umull	r1, r2, r0, r2
 800827e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008280:	460a      	mov	r2, r1
 8008282:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008284:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008286:	4413      	add	r3, r2
 8008288:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800828a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800828c:	2200      	movs	r2, #0
 800828e:	61bb      	str	r3, [r7, #24]
 8008290:	61fa      	str	r2, [r7, #28]
 8008292:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008296:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800829a:	f7f8 fc95 	bl	8000bc8 <__aeabi_uldivmod>
 800829e:	4602      	mov	r2, r0
 80082a0:	460b      	mov	r3, r1
 80082a2:	4613      	mov	r3, r2
 80082a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082a6:	e053      	b.n	8008350 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80082a8:	4b35      	ldr	r3, [pc, #212]	@ (8008380 <HAL_RCC_GetSysClockFreq+0x180>)
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	099b      	lsrs	r3, r3, #6
 80082ae:	2200      	movs	r2, #0
 80082b0:	613b      	str	r3, [r7, #16]
 80082b2:	617a      	str	r2, [r7, #20]
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80082ba:	f04f 0b00 	mov.w	fp, #0
 80082be:	4652      	mov	r2, sl
 80082c0:	465b      	mov	r3, fp
 80082c2:	f04f 0000 	mov.w	r0, #0
 80082c6:	f04f 0100 	mov.w	r1, #0
 80082ca:	0159      	lsls	r1, r3, #5
 80082cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80082d0:	0150      	lsls	r0, r2, #5
 80082d2:	4602      	mov	r2, r0
 80082d4:	460b      	mov	r3, r1
 80082d6:	ebb2 080a 	subs.w	r8, r2, sl
 80082da:	eb63 090b 	sbc.w	r9, r3, fp
 80082de:	f04f 0200 	mov.w	r2, #0
 80082e2:	f04f 0300 	mov.w	r3, #0
 80082e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80082ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80082ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80082f2:	ebb2 0408 	subs.w	r4, r2, r8
 80082f6:	eb63 0509 	sbc.w	r5, r3, r9
 80082fa:	f04f 0200 	mov.w	r2, #0
 80082fe:	f04f 0300 	mov.w	r3, #0
 8008302:	00eb      	lsls	r3, r5, #3
 8008304:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008308:	00e2      	lsls	r2, r4, #3
 800830a:	4614      	mov	r4, r2
 800830c:	461d      	mov	r5, r3
 800830e:	eb14 030a 	adds.w	r3, r4, sl
 8008312:	603b      	str	r3, [r7, #0]
 8008314:	eb45 030b 	adc.w	r3, r5, fp
 8008318:	607b      	str	r3, [r7, #4]
 800831a:	f04f 0200 	mov.w	r2, #0
 800831e:	f04f 0300 	mov.w	r3, #0
 8008322:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008326:	4629      	mov	r1, r5
 8008328:	028b      	lsls	r3, r1, #10
 800832a:	4621      	mov	r1, r4
 800832c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008330:	4621      	mov	r1, r4
 8008332:	028a      	lsls	r2, r1, #10
 8008334:	4610      	mov	r0, r2
 8008336:	4619      	mov	r1, r3
 8008338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800833a:	2200      	movs	r2, #0
 800833c:	60bb      	str	r3, [r7, #8]
 800833e:	60fa      	str	r2, [r7, #12]
 8008340:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008344:	f7f8 fc40 	bl	8000bc8 <__aeabi_uldivmod>
 8008348:	4602      	mov	r2, r0
 800834a:	460b      	mov	r3, r1
 800834c:	4613      	mov	r3, r2
 800834e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008350:	4b0b      	ldr	r3, [pc, #44]	@ (8008380 <HAL_RCC_GetSysClockFreq+0x180>)
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	0c1b      	lsrs	r3, r3, #16
 8008356:	f003 0303 	and.w	r3, r3, #3
 800835a:	3301      	adds	r3, #1
 800835c:	005b      	lsls	r3, r3, #1
 800835e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008360:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008364:	fbb2 f3f3 	udiv	r3, r2, r3
 8008368:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800836a:	e002      	b.n	8008372 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800836c:	4b05      	ldr	r3, [pc, #20]	@ (8008384 <HAL_RCC_GetSysClockFreq+0x184>)
 800836e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008370:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008374:	4618      	mov	r0, r3
 8008376:	3740      	adds	r7, #64	@ 0x40
 8008378:	46bd      	mov	sp, r7
 800837a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800837e:	bf00      	nop
 8008380:	40023800 	.word	0x40023800
 8008384:	00f42400 	.word	0x00f42400
 8008388:	017d7840 	.word	0x017d7840

0800838c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800838c:	b480      	push	{r7}
 800838e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008390:	4b03      	ldr	r3, [pc, #12]	@ (80083a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008392:	681b      	ldr	r3, [r3, #0]
}
 8008394:	4618      	mov	r0, r3
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	20000144 	.word	0x20000144

080083a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80083a8:	f7ff fff0 	bl	800838c <HAL_RCC_GetHCLKFreq>
 80083ac:	4602      	mov	r2, r0
 80083ae:	4b05      	ldr	r3, [pc, #20]	@ (80083c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	0a9b      	lsrs	r3, r3, #10
 80083b4:	f003 0307 	and.w	r3, r3, #7
 80083b8:	4903      	ldr	r1, [pc, #12]	@ (80083c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80083ba:	5ccb      	ldrb	r3, [r1, r3]
 80083bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	40023800 	.word	0x40023800
 80083c8:	08011344 	.word	0x08011344

080083cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80083d0:	f7ff ffdc 	bl	800838c <HAL_RCC_GetHCLKFreq>
 80083d4:	4602      	mov	r2, r0
 80083d6:	4b05      	ldr	r3, [pc, #20]	@ (80083ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	0b5b      	lsrs	r3, r3, #13
 80083dc:	f003 0307 	and.w	r3, r3, #7
 80083e0:	4903      	ldr	r1, [pc, #12]	@ (80083f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80083e2:	5ccb      	ldrb	r3, [r1, r3]
 80083e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	40023800 	.word	0x40023800
 80083f0:	08011344 	.word	0x08011344

080083f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d101      	bne.n	8008406 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	e07b      	b.n	80084fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800840a:	2b00      	cmp	r3, #0
 800840c:	d108      	bne.n	8008420 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008416:	d009      	beq.n	800842c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	61da      	str	r2, [r3, #28]
 800841e:	e005      	b.n	800842c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008438:	b2db      	uxtb	r3, r3
 800843a:	2b00      	cmp	r3, #0
 800843c:	d106      	bne.n	800844c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f7fc fac6 	bl	80049d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2202      	movs	r2, #2
 8008450:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008462:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008474:	431a      	orrs	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800847e:	431a      	orrs	r2, r3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	f003 0302 	and.w	r3, r3, #2
 8008488:	431a      	orrs	r2, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	695b      	ldr	r3, [r3, #20]
 800848e:	f003 0301 	and.w	r3, r3, #1
 8008492:	431a      	orrs	r2, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	699b      	ldr	r3, [r3, #24]
 8008498:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800849c:	431a      	orrs	r2, r3
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	69db      	ldr	r3, [r3, #28]
 80084a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80084a6:	431a      	orrs	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a1b      	ldr	r3, [r3, #32]
 80084ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084b0:	ea42 0103 	orr.w	r1, r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084b8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	430a      	orrs	r2, r1
 80084c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	699b      	ldr	r3, [r3, #24]
 80084c8:	0c1b      	lsrs	r3, r3, #16
 80084ca:	f003 0104 	and.w	r1, r3, #4
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084d2:	f003 0210 	and.w	r2, r3, #16
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	430a      	orrs	r2, r1
 80084dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	69da      	ldr	r2, [r3, #28]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80084ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80084fc:	2300      	movs	r3, #0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3708      	adds	r7, #8
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b088      	sub	sp, #32
 800850a:	af00      	add	r7, sp, #0
 800850c:	60f8      	str	r0, [r7, #12]
 800850e:	60b9      	str	r1, [r7, #8]
 8008510:	603b      	str	r3, [r7, #0]
 8008512:	4613      	mov	r3, r2
 8008514:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008516:	f7fc fef5 	bl	8005304 <HAL_GetTick>
 800851a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800851c:	88fb      	ldrh	r3, [r7, #6]
 800851e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008526:	b2db      	uxtb	r3, r3
 8008528:	2b01      	cmp	r3, #1
 800852a:	d001      	beq.n	8008530 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800852c:	2302      	movs	r3, #2
 800852e:	e12a      	b.n	8008786 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d002      	beq.n	800853c <HAL_SPI_Transmit+0x36>
 8008536:	88fb      	ldrh	r3, [r7, #6]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d101      	bne.n	8008540 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	e122      	b.n	8008786 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008546:	2b01      	cmp	r3, #1
 8008548:	d101      	bne.n	800854e <HAL_SPI_Transmit+0x48>
 800854a:	2302      	movs	r3, #2
 800854c:	e11b      	b.n	8008786 <HAL_SPI_Transmit+0x280>
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2201      	movs	r2, #1
 8008552:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2203      	movs	r2, #3
 800855a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	68ba      	ldr	r2, [r7, #8]
 8008568:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	88fa      	ldrh	r2, [r7, #6]
 800856e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	88fa      	ldrh	r2, [r7, #6]
 8008574:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2200      	movs	r2, #0
 800857a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2200      	movs	r2, #0
 8008580:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2200      	movs	r2, #0
 8008586:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2200      	movs	r2, #0
 800858c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800859c:	d10f      	bne.n	80085be <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80085ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80085bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085c8:	2b40      	cmp	r3, #64	@ 0x40
 80085ca:	d007      	beq.n	80085dc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80085da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80085e4:	d152      	bne.n	800868c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d002      	beq.n	80085f4 <HAL_SPI_Transmit+0xee>
 80085ee:	8b7b      	ldrh	r3, [r7, #26]
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d145      	bne.n	8008680 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085f8:	881a      	ldrh	r2, [r3, #0]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008604:	1c9a      	adds	r2, r3, #2
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800860e:	b29b      	uxth	r3, r3
 8008610:	3b01      	subs	r3, #1
 8008612:	b29a      	uxth	r2, r3
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008618:	e032      	b.n	8008680 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	f003 0302 	and.w	r3, r3, #2
 8008624:	2b02      	cmp	r3, #2
 8008626:	d112      	bne.n	800864e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800862c:	881a      	ldrh	r2, [r3, #0]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008638:	1c9a      	adds	r2, r3, #2
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008642:	b29b      	uxth	r3, r3
 8008644:	3b01      	subs	r3, #1
 8008646:	b29a      	uxth	r2, r3
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800864c:	e018      	b.n	8008680 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800864e:	f7fc fe59 	bl	8005304 <HAL_GetTick>
 8008652:	4602      	mov	r2, r0
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	683a      	ldr	r2, [r7, #0]
 800865a:	429a      	cmp	r2, r3
 800865c:	d803      	bhi.n	8008666 <HAL_SPI_Transmit+0x160>
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008664:	d102      	bne.n	800866c <HAL_SPI_Transmit+0x166>
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d109      	bne.n	8008680 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2200      	movs	r2, #0
 8008678:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800867c:	2303      	movs	r3, #3
 800867e:	e082      	b.n	8008786 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008684:	b29b      	uxth	r3, r3
 8008686:	2b00      	cmp	r3, #0
 8008688:	d1c7      	bne.n	800861a <HAL_SPI_Transmit+0x114>
 800868a:	e053      	b.n	8008734 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d002      	beq.n	800869a <HAL_SPI_Transmit+0x194>
 8008694:	8b7b      	ldrh	r3, [r7, #26]
 8008696:	2b01      	cmp	r3, #1
 8008698:	d147      	bne.n	800872a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	330c      	adds	r3, #12
 80086a4:	7812      	ldrb	r2, [r2, #0]
 80086a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086ac:	1c5a      	adds	r2, r3, #1
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	3b01      	subs	r3, #1
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80086c0:	e033      	b.n	800872a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	f003 0302 	and.w	r3, r3, #2
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	d113      	bne.n	80086f8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	330c      	adds	r3, #12
 80086da:	7812      	ldrb	r2, [r2, #0]
 80086dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086e2:	1c5a      	adds	r2, r3, #1
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	3b01      	subs	r3, #1
 80086f0:	b29a      	uxth	r2, r3
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80086f6:	e018      	b.n	800872a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80086f8:	f7fc fe04 	bl	8005304 <HAL_GetTick>
 80086fc:	4602      	mov	r2, r0
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	683a      	ldr	r2, [r7, #0]
 8008704:	429a      	cmp	r2, r3
 8008706:	d803      	bhi.n	8008710 <HAL_SPI_Transmit+0x20a>
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800870e:	d102      	bne.n	8008716 <HAL_SPI_Transmit+0x210>
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d109      	bne.n	800872a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2201      	movs	r2, #1
 800871a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2200      	movs	r2, #0
 8008722:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008726:	2303      	movs	r3, #3
 8008728:	e02d      	b.n	8008786 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800872e:	b29b      	uxth	r3, r3
 8008730:	2b00      	cmp	r3, #0
 8008732:	d1c6      	bne.n	80086c2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008734:	69fa      	ldr	r2, [r7, #28]
 8008736:	6839      	ldr	r1, [r7, #0]
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	f000 fb6b 	bl	8008e14 <SPI_EndRxTxTransaction>
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d002      	beq.n	800874a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2220      	movs	r2, #32
 8008748:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d10a      	bne.n	8008768 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008752:	2300      	movs	r3, #0
 8008754:	617b      	str	r3, [r7, #20]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	617b      	str	r3, [r7, #20]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	617b      	str	r3, [r7, #20]
 8008766:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800877c:	2b00      	cmp	r3, #0
 800877e:	d001      	beq.n	8008784 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	e000      	b.n	8008786 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8008784:	2300      	movs	r3, #0
  }
}
 8008786:	4618      	mov	r0, r3
 8008788:	3720      	adds	r7, #32
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b08a      	sub	sp, #40	@ 0x28
 8008792:	af00      	add	r7, sp, #0
 8008794:	60f8      	str	r0, [r7, #12]
 8008796:	60b9      	str	r1, [r7, #8]
 8008798:	607a      	str	r2, [r7, #4]
 800879a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800879c:	2301      	movs	r3, #1
 800879e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80087a0:	f7fc fdb0 	bl	8005304 <HAL_GetTick>
 80087a4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80087ac:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80087b4:	887b      	ldrh	r3, [r7, #2]
 80087b6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80087b8:	7ffb      	ldrb	r3, [r7, #31]
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d00c      	beq.n	80087d8 <HAL_SPI_TransmitReceive+0x4a>
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80087c4:	d106      	bne.n	80087d4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d102      	bne.n	80087d4 <HAL_SPI_TransmitReceive+0x46>
 80087ce:	7ffb      	ldrb	r3, [r7, #31]
 80087d0:	2b04      	cmp	r3, #4
 80087d2:	d001      	beq.n	80087d8 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80087d4:	2302      	movs	r3, #2
 80087d6:	e17f      	b.n	8008ad8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d005      	beq.n	80087ea <HAL_SPI_TransmitReceive+0x5c>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d002      	beq.n	80087ea <HAL_SPI_TransmitReceive+0x5c>
 80087e4:	887b      	ldrh	r3, [r7, #2]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d101      	bne.n	80087ee <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	e174      	b.n	8008ad8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d101      	bne.n	80087fc <HAL_SPI_TransmitReceive+0x6e>
 80087f8:	2302      	movs	r3, #2
 80087fa:	e16d      	b.n	8008ad8 <HAL_SPI_TransmitReceive+0x34a>
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2201      	movs	r2, #1
 8008800:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800880a:	b2db      	uxtb	r3, r3
 800880c:	2b04      	cmp	r3, #4
 800880e:	d003      	beq.n	8008818 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2205      	movs	r2, #5
 8008814:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2200      	movs	r2, #0
 800881c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	887a      	ldrh	r2, [r7, #2]
 8008828:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	887a      	ldrh	r2, [r7, #2]
 800882e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	68ba      	ldr	r2, [r7, #8]
 8008834:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	887a      	ldrh	r2, [r7, #2]
 800883a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	887a      	ldrh	r2, [r7, #2]
 8008840:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2200      	movs	r2, #0
 8008846:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2200      	movs	r2, #0
 800884c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008858:	2b40      	cmp	r3, #64	@ 0x40
 800885a:	d007      	beq.n	800886c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800886a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008874:	d17e      	bne.n	8008974 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d002      	beq.n	8008884 <HAL_SPI_TransmitReceive+0xf6>
 800887e:	8afb      	ldrh	r3, [r7, #22]
 8008880:	2b01      	cmp	r3, #1
 8008882:	d16c      	bne.n	800895e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008888:	881a      	ldrh	r2, [r3, #0]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008894:	1c9a      	adds	r2, r3, #2
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800889e:	b29b      	uxth	r3, r3
 80088a0:	3b01      	subs	r3, #1
 80088a2:	b29a      	uxth	r2, r3
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088a8:	e059      	b.n	800895e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	f003 0302 	and.w	r3, r3, #2
 80088b4:	2b02      	cmp	r3, #2
 80088b6:	d11b      	bne.n	80088f0 <HAL_SPI_TransmitReceive+0x162>
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80088bc:	b29b      	uxth	r3, r3
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d016      	beq.n	80088f0 <HAL_SPI_TransmitReceive+0x162>
 80088c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d113      	bne.n	80088f0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088cc:	881a      	ldrh	r2, [r3, #0]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088d8:	1c9a      	adds	r2, r3, #2
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	3b01      	subs	r3, #1
 80088e6:	b29a      	uxth	r2, r3
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80088ec:	2300      	movs	r3, #0
 80088ee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	f003 0301 	and.w	r3, r3, #1
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d119      	bne.n	8008932 <HAL_SPI_TransmitReceive+0x1a4>
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008902:	b29b      	uxth	r3, r3
 8008904:	2b00      	cmp	r3, #0
 8008906:	d014      	beq.n	8008932 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	68da      	ldr	r2, [r3, #12]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008912:	b292      	uxth	r2, r2
 8008914:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800891a:	1c9a      	adds	r2, r3, #2
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008924:	b29b      	uxth	r3, r3
 8008926:	3b01      	subs	r3, #1
 8008928:	b29a      	uxth	r2, r3
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800892e:	2301      	movs	r3, #1
 8008930:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008932:	f7fc fce7 	bl	8005304 <HAL_GetTick>
 8008936:	4602      	mov	r2, r0
 8008938:	6a3b      	ldr	r3, [r7, #32]
 800893a:	1ad3      	subs	r3, r2, r3
 800893c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800893e:	429a      	cmp	r2, r3
 8008940:	d80d      	bhi.n	800895e <HAL_SPI_TransmitReceive+0x1d0>
 8008942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008948:	d009      	beq.n	800895e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2201      	movs	r2, #1
 800894e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2200      	movs	r2, #0
 8008956:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800895a:	2303      	movs	r3, #3
 800895c:	e0bc      	b.n	8008ad8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008962:	b29b      	uxth	r3, r3
 8008964:	2b00      	cmp	r3, #0
 8008966:	d1a0      	bne.n	80088aa <HAL_SPI_TransmitReceive+0x11c>
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800896c:	b29b      	uxth	r3, r3
 800896e:	2b00      	cmp	r3, #0
 8008970:	d19b      	bne.n	80088aa <HAL_SPI_TransmitReceive+0x11c>
 8008972:	e082      	b.n	8008a7a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d002      	beq.n	8008982 <HAL_SPI_TransmitReceive+0x1f4>
 800897c:	8afb      	ldrh	r3, [r7, #22]
 800897e:	2b01      	cmp	r3, #1
 8008980:	d171      	bne.n	8008a66 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	330c      	adds	r3, #12
 800898c:	7812      	ldrb	r2, [r2, #0]
 800898e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008994:	1c5a      	adds	r2, r3, #1
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800899e:	b29b      	uxth	r3, r3
 80089a0:	3b01      	subs	r3, #1
 80089a2:	b29a      	uxth	r2, r3
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80089a8:	e05d      	b.n	8008a66 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	f003 0302 	and.w	r3, r3, #2
 80089b4:	2b02      	cmp	r3, #2
 80089b6:	d11c      	bne.n	80089f2 <HAL_SPI_TransmitReceive+0x264>
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80089bc:	b29b      	uxth	r3, r3
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d017      	beq.n	80089f2 <HAL_SPI_TransmitReceive+0x264>
 80089c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d114      	bne.n	80089f2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	330c      	adds	r3, #12
 80089d2:	7812      	ldrb	r2, [r2, #0]
 80089d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089da:	1c5a      	adds	r2, r3, #1
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	3b01      	subs	r3, #1
 80089e8:	b29a      	uxth	r2, r3
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80089ee:	2300      	movs	r3, #0
 80089f0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	f003 0301 	and.w	r3, r3, #1
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d119      	bne.n	8008a34 <HAL_SPI_TransmitReceive+0x2a6>
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d014      	beq.n	8008a34 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	68da      	ldr	r2, [r3, #12]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a14:	b2d2      	uxtb	r2, r2
 8008a16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a1c:	1c5a      	adds	r2, r3, #1
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	b29a      	uxth	r2, r3
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008a30:	2301      	movs	r3, #1
 8008a32:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008a34:	f7fc fc66 	bl	8005304 <HAL_GetTick>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	6a3b      	ldr	r3, [r7, #32]
 8008a3c:	1ad3      	subs	r3, r2, r3
 8008a3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d803      	bhi.n	8008a4c <HAL_SPI_TransmitReceive+0x2be>
 8008a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a4a:	d102      	bne.n	8008a52 <HAL_SPI_TransmitReceive+0x2c4>
 8008a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d109      	bne.n	8008a66 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2201      	movs	r2, #1
 8008a56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008a62:	2303      	movs	r3, #3
 8008a64:	e038      	b.n	8008ad8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d19c      	bne.n	80089aa <HAL_SPI_TransmitReceive+0x21c>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d197      	bne.n	80089aa <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008a7a:	6a3a      	ldr	r2, [r7, #32]
 8008a7c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008a7e:	68f8      	ldr	r0, [r7, #12]
 8008a80:	f000 f9c8 	bl	8008e14 <SPI_EndRxTxTransaction>
 8008a84:	4603      	mov	r3, r0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d008      	beq.n	8008a9c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2220      	movs	r2, #32
 8008a8e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e01d      	b.n	8008ad8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d10a      	bne.n	8008aba <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	613b      	str	r3, [r7, #16]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	613b      	str	r3, [r7, #16]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	613b      	str	r3, [r7, #16]
 8008ab8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2201      	movs	r2, #1
 8008abe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d001      	beq.n	8008ad6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	e000      	b.n	8008ad8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8008ad6:	2300      	movs	r3, #0
  }
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3728      	adds	r7, #40	@ 0x28
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b088      	sub	sp, #32
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008af8:	69bb      	ldr	r3, [r7, #24]
 8008afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d10e      	bne.n	8008b20 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008b02:	69bb      	ldr	r3, [r7, #24]
 8008b04:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d009      	beq.n	8008b20 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d004      	beq.n	8008b20 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	4798      	blx	r3
    return;
 8008b1e:	e0ce      	b.n	8008cbe <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	f003 0302 	and.w	r3, r3, #2
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d009      	beq.n	8008b3e <HAL_SPI_IRQHandler+0x5e>
 8008b2a:	69fb      	ldr	r3, [r7, #28]
 8008b2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d004      	beq.n	8008b3e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	4798      	blx	r3
    return;
 8008b3c:	e0bf      	b.n	8008cbe <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	f003 0320 	and.w	r3, r3, #32
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d10a      	bne.n	8008b5e <HAL_SPI_IRQHandler+0x7e>
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d105      	bne.n	8008b5e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	f000 80b0 	beq.w	8008cbe <HAL_SPI_IRQHandler+0x1de>
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	f003 0320 	and.w	r3, r3, #32
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	f000 80aa 	beq.w	8008cbe <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d023      	beq.n	8008bbc <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	2b03      	cmp	r3, #3
 8008b7e:	d011      	beq.n	8008ba4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b84:	f043 0204 	orr.w	r2, r3, #4
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	617b      	str	r3, [r7, #20]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	617b      	str	r3, [r7, #20]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	617b      	str	r3, [r7, #20]
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	e00b      	b.n	8008bbc <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	613b      	str	r3, [r7, #16]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	613b      	str	r3, [r7, #16]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	613b      	str	r3, [r7, #16]
 8008bb8:	693b      	ldr	r3, [r7, #16]
        return;
 8008bba:	e080      	b.n	8008cbe <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008bbc:	69bb      	ldr	r3, [r7, #24]
 8008bbe:	f003 0320 	and.w	r3, r3, #32
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d014      	beq.n	8008bf0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bca:	f043 0201 	orr.w	r2, r3, #1
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	60fb      	str	r3, [r7, #12]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	60fb      	str	r3, [r7, #12]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008bec:	601a      	str	r2, [r3, #0]
 8008bee:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d00c      	beq.n	8008c14 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bfe:	f043 0208 	orr.w	r2, r3, #8
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008c06:	2300      	movs	r3, #0
 8008c08:	60bb      	str	r3, [r7, #8]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	60bb      	str	r3, [r7, #8]
 8008c12:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d04f      	beq.n	8008cbc <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	685a      	ldr	r2, [r3, #4]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008c2a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	f003 0302 	and.w	r3, r3, #2
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d104      	bne.n	8008c48 <HAL_SPI_IRQHandler+0x168>
 8008c3e:	69fb      	ldr	r3, [r7, #28]
 8008c40:	f003 0301 	and.w	r3, r3, #1
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d034      	beq.n	8008cb2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	685a      	ldr	r2, [r3, #4]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f022 0203 	bic.w	r2, r2, #3
 8008c56:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d011      	beq.n	8008c84 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c64:	4a17      	ldr	r2, [pc, #92]	@ (8008cc4 <HAL_SPI_IRQHandler+0x1e4>)
 8008c66:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f7fd f82e 	bl	8005cce <HAL_DMA_Abort_IT>
 8008c72:	4603      	mov	r3, r0
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d005      	beq.n	8008c84 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c7c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d016      	beq.n	8008cba <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c90:	4a0c      	ldr	r2, [pc, #48]	@ (8008cc4 <HAL_SPI_IRQHandler+0x1e4>)
 8008c92:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7fd f818 	bl	8005cce <HAL_DMA_Abort_IT>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d00a      	beq.n	8008cba <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ca8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8008cb0:	e003      	b.n	8008cba <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 f808 	bl	8008cc8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008cb8:	e000      	b.n	8008cbc <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8008cba:	bf00      	nop
    return;
 8008cbc:	bf00      	nop
  }
}
 8008cbe:	3720      	adds	r7, #32
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	08008cdd 	.word	0x08008cdd

08008cc8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b083      	sub	sp, #12
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008cd0:	bf00      	nop
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ce8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2200      	movs	r2, #0
 8008cee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008cf6:	68f8      	ldr	r0, [r7, #12]
 8008cf8:	f7ff ffe6 	bl	8008cc8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008cfc:	bf00      	nop
 8008cfe:	3710      	adds	r7, #16
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b088      	sub	sp, #32
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	603b      	str	r3, [r7, #0]
 8008d10:	4613      	mov	r3, r2
 8008d12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008d14:	f7fc faf6 	bl	8005304 <HAL_GetTick>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d1c:	1a9b      	subs	r3, r3, r2
 8008d1e:	683a      	ldr	r2, [r7, #0]
 8008d20:	4413      	add	r3, r2
 8008d22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008d24:	f7fc faee 	bl	8005304 <HAL_GetTick>
 8008d28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008d2a:	4b39      	ldr	r3, [pc, #228]	@ (8008e10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	015b      	lsls	r3, r3, #5
 8008d30:	0d1b      	lsrs	r3, r3, #20
 8008d32:	69fa      	ldr	r2, [r7, #28]
 8008d34:	fb02 f303 	mul.w	r3, r2, r3
 8008d38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d3a:	e054      	b.n	8008de6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d42:	d050      	beq.n	8008de6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008d44:	f7fc fade 	bl	8005304 <HAL_GetTick>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	1ad3      	subs	r3, r2, r3
 8008d4e:	69fa      	ldr	r2, [r7, #28]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d902      	bls.n	8008d5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008d54:	69fb      	ldr	r3, [r7, #28]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d13d      	bne.n	8008dd6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	685a      	ldr	r2, [r3, #4]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008d68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008d72:	d111      	bne.n	8008d98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d7c:	d004      	beq.n	8008d88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d86:	d107      	bne.n	8008d98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008d96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008da0:	d10f      	bne.n	8008dc2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008db0:	601a      	str	r2, [r3, #0]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008dc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	e017      	b.n	8008e06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d101      	bne.n	8008de0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	3b01      	subs	r3, #1
 8008de4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	689a      	ldr	r2, [r3, #8]
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	4013      	ands	r3, r2
 8008df0:	68ba      	ldr	r2, [r7, #8]
 8008df2:	429a      	cmp	r2, r3
 8008df4:	bf0c      	ite	eq
 8008df6:	2301      	moveq	r3, #1
 8008df8:	2300      	movne	r3, #0
 8008dfa:	b2db      	uxtb	r3, r3
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	79fb      	ldrb	r3, [r7, #7]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d19b      	bne.n	8008d3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008e04:	2300      	movs	r3, #0
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3720      	adds	r7, #32
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	20000144 	.word	0x20000144

08008e14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b088      	sub	sp, #32
 8008e18:	af02      	add	r7, sp, #8
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	9300      	str	r3, [sp, #0]
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	2201      	movs	r2, #1
 8008e28:	2102      	movs	r1, #2
 8008e2a:	68f8      	ldr	r0, [r7, #12]
 8008e2c:	f7ff ff6a 	bl	8008d04 <SPI_WaitFlagStateUntilTimeout>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d007      	beq.n	8008e46 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e3a:	f043 0220 	orr.w	r2, r3, #32
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008e42:	2303      	movs	r3, #3
 8008e44:	e032      	b.n	8008eac <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008e46:	4b1b      	ldr	r3, [pc, #108]	@ (8008eb4 <SPI_EndRxTxTransaction+0xa0>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a1b      	ldr	r2, [pc, #108]	@ (8008eb8 <SPI_EndRxTxTransaction+0xa4>)
 8008e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8008e50:	0d5b      	lsrs	r3, r3, #21
 8008e52:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008e56:	fb02 f303 	mul.w	r3, r2, r3
 8008e5a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008e64:	d112      	bne.n	8008e8c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	9300      	str	r3, [sp, #0]
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	2180      	movs	r1, #128	@ 0x80
 8008e70:	68f8      	ldr	r0, [r7, #12]
 8008e72:	f7ff ff47 	bl	8008d04 <SPI_WaitFlagStateUntilTimeout>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d016      	beq.n	8008eaa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e80:	f043 0220 	orr.w	r2, r3, #32
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008e88:	2303      	movs	r3, #3
 8008e8a:	e00f      	b.n	8008eac <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d00a      	beq.n	8008ea8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	3b01      	subs	r3, #1
 8008e96:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ea2:	2b80      	cmp	r3, #128	@ 0x80
 8008ea4:	d0f2      	beq.n	8008e8c <SPI_EndRxTxTransaction+0x78>
 8008ea6:	e000      	b.n	8008eaa <SPI_EndRxTxTransaction+0x96>
        break;
 8008ea8:	bf00      	nop
  }

  return HAL_OK;
 8008eaa:	2300      	movs	r3, #0
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3718      	adds	r7, #24
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	20000144 	.word	0x20000144
 8008eb8:	165e9f81 	.word	0x165e9f81

08008ebc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d101      	bne.n	8008ece <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e042      	b.n	8008f54 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d106      	bne.n	8008ee8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f7fc f874 	bl	8004fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2224      	movs	r2, #36	@ 0x24
 8008eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	68da      	ldr	r2, [r3, #12]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008efe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 fdf3 	bl	8009aec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	691a      	ldr	r2, [r3, #16]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008f14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	695a      	ldr	r2, [r3, #20]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008f24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	68da      	ldr	r2, [r3, #12]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008f34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2220      	movs	r2, #32
 8008f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2220      	movs	r2, #32
 8008f48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008f52:	2300      	movs	r3, #0
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3708      	adds	r7, #8
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b08a      	sub	sp, #40	@ 0x28
 8008f60:	af02      	add	r7, sp, #8
 8008f62:	60f8      	str	r0, [r7, #12]
 8008f64:	60b9      	str	r1, [r7, #8]
 8008f66:	603b      	str	r3, [r7, #0]
 8008f68:	4613      	mov	r3, r2
 8008f6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	2b20      	cmp	r3, #32
 8008f7a:	d175      	bne.n	8009068 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d002      	beq.n	8008f88 <HAL_UART_Transmit+0x2c>
 8008f82:	88fb      	ldrh	r3, [r7, #6]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d101      	bne.n	8008f8c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	e06e      	b.n	800906a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2221      	movs	r2, #33	@ 0x21
 8008f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008f9a:	f7fc f9b3 	bl	8005304 <HAL_GetTick>
 8008f9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	88fa      	ldrh	r2, [r7, #6]
 8008fa4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	88fa      	ldrh	r2, [r7, #6]
 8008faa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fb4:	d108      	bne.n	8008fc8 <HAL_UART_Transmit+0x6c>
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	691b      	ldr	r3, [r3, #16]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d104      	bne.n	8008fc8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	61bb      	str	r3, [r7, #24]
 8008fc6:	e003      	b.n	8008fd0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008fd0:	e02e      	b.n	8009030 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	9300      	str	r3, [sp, #0]
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	2180      	movs	r1, #128	@ 0x80
 8008fdc:	68f8      	ldr	r0, [r7, #12]
 8008fde:	f000 fb55 	bl	800968c <UART_WaitOnFlagUntilTimeout>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d005      	beq.n	8008ff4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2220      	movs	r2, #32
 8008fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	e03a      	b.n	800906a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d10b      	bne.n	8009012 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ffa:	69bb      	ldr	r3, [r7, #24]
 8008ffc:	881b      	ldrh	r3, [r3, #0]
 8008ffe:	461a      	mov	r2, r3
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009008:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	3302      	adds	r3, #2
 800900e:	61bb      	str	r3, [r7, #24]
 8009010:	e007      	b.n	8009022 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	781a      	ldrb	r2, [r3, #0]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	3301      	adds	r3, #1
 8009020:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009026:	b29b      	uxth	r3, r3
 8009028:	3b01      	subs	r3, #1
 800902a:	b29a      	uxth	r2, r3
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009034:	b29b      	uxth	r3, r3
 8009036:	2b00      	cmp	r3, #0
 8009038:	d1cb      	bne.n	8008fd2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	9300      	str	r3, [sp, #0]
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	2200      	movs	r2, #0
 8009042:	2140      	movs	r1, #64	@ 0x40
 8009044:	68f8      	ldr	r0, [r7, #12]
 8009046:	f000 fb21 	bl	800968c <UART_WaitOnFlagUntilTimeout>
 800904a:	4603      	mov	r3, r0
 800904c:	2b00      	cmp	r3, #0
 800904e:	d005      	beq.n	800905c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2220      	movs	r2, #32
 8009054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009058:	2303      	movs	r3, #3
 800905a:	e006      	b.n	800906a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2220      	movs	r2, #32
 8009060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009064:	2300      	movs	r3, #0
 8009066:	e000      	b.n	800906a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009068:	2302      	movs	r3, #2
  }
}
 800906a:	4618      	mov	r0, r3
 800906c:	3720      	adds	r7, #32
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}

08009072 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009072:	b580      	push	{r7, lr}
 8009074:	b08c      	sub	sp, #48	@ 0x30
 8009076:	af00      	add	r7, sp, #0
 8009078:	60f8      	str	r0, [r7, #12]
 800907a:	60b9      	str	r1, [r7, #8]
 800907c:	4613      	mov	r3, r2
 800907e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009086:	b2db      	uxtb	r3, r3
 8009088:	2b20      	cmp	r3, #32
 800908a:	d14a      	bne.n	8009122 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d002      	beq.n	8009098 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8009092:	88fb      	ldrh	r3, [r7, #6]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d101      	bne.n	800909c <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8009098:	2301      	movs	r3, #1
 800909a:	e043      	b.n	8009124 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2201      	movs	r2, #1
 80090a0:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2200      	movs	r2, #0
 80090a6:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80090a8:	88fb      	ldrh	r3, [r7, #6]
 80090aa:	461a      	mov	r2, r3
 80090ac:	68b9      	ldr	r1, [r7, #8]
 80090ae:	68f8      	ldr	r0, [r7, #12]
 80090b0:	f000 fb45 	bl	800973e <UART_Start_Receive_IT>
 80090b4:	4603      	mov	r3, r0
 80090b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80090ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d12c      	bne.n	800911c <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d125      	bne.n	8009116 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80090ca:	2300      	movs	r3, #0
 80090cc:	613b      	str	r3, [r7, #16]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	613b      	str	r3, [r7, #16]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	613b      	str	r3, [r7, #16]
 80090de:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	330c      	adds	r3, #12
 80090e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e8:	69bb      	ldr	r3, [r7, #24]
 80090ea:	e853 3f00 	ldrex	r3, [r3]
 80090ee:	617b      	str	r3, [r7, #20]
   return(result);
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	f043 0310 	orr.w	r3, r3, #16
 80090f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	330c      	adds	r3, #12
 80090fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009100:	627a      	str	r2, [r7, #36]	@ 0x24
 8009102:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009104:	6a39      	ldr	r1, [r7, #32]
 8009106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009108:	e841 2300 	strex	r3, r2, [r1]
 800910c:	61fb      	str	r3, [r7, #28]
   return(result);
 800910e:	69fb      	ldr	r3, [r7, #28]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d1e5      	bne.n	80090e0 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8009114:	e002      	b.n	800911c <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009116:	2301      	movs	r3, #1
 8009118:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800911c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009120:	e000      	b.n	8009124 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8009122:	2302      	movs	r3, #2
  }
}
 8009124:	4618      	mov	r0, r3
 8009126:	3730      	adds	r7, #48	@ 0x30
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b0ba      	sub	sp, #232	@ 0xe8
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	695b      	ldr	r3, [r3, #20]
 800914e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009152:	2300      	movs	r3, #0
 8009154:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009158:	2300      	movs	r3, #0
 800915a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800915e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009162:	f003 030f 	and.w	r3, r3, #15
 8009166:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800916a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800916e:	2b00      	cmp	r3, #0
 8009170:	d10f      	bne.n	8009192 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009176:	f003 0320 	and.w	r3, r3, #32
 800917a:	2b00      	cmp	r3, #0
 800917c:	d009      	beq.n	8009192 <HAL_UART_IRQHandler+0x66>
 800917e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009182:	f003 0320 	and.w	r3, r3, #32
 8009186:	2b00      	cmp	r3, #0
 8009188:	d003      	beq.n	8009192 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 fbf0 	bl	8009970 <UART_Receive_IT>
      return;
 8009190:	e25b      	b.n	800964a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009192:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009196:	2b00      	cmp	r3, #0
 8009198:	f000 80de 	beq.w	8009358 <HAL_UART_IRQHandler+0x22c>
 800919c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091a0:	f003 0301 	and.w	r3, r3, #1
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d106      	bne.n	80091b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80091a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091ac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	f000 80d1 	beq.w	8009358 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80091b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091ba:	f003 0301 	and.w	r3, r3, #1
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d00b      	beq.n	80091da <HAL_UART_IRQHandler+0xae>
 80091c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d005      	beq.n	80091da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091d2:	f043 0201 	orr.w	r2, r3, #1
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80091da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091de:	f003 0304 	and.w	r3, r3, #4
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00b      	beq.n	80091fe <HAL_UART_IRQHandler+0xd2>
 80091e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091ea:	f003 0301 	and.w	r3, r3, #1
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d005      	beq.n	80091fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091f6:	f043 0202 	orr.w	r2, r3, #2
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80091fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009202:	f003 0302 	and.w	r3, r3, #2
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00b      	beq.n	8009222 <HAL_UART_IRQHandler+0xf6>
 800920a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800920e:	f003 0301 	and.w	r3, r3, #1
 8009212:	2b00      	cmp	r3, #0
 8009214:	d005      	beq.n	8009222 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800921a:	f043 0204 	orr.w	r2, r3, #4
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009226:	f003 0308 	and.w	r3, r3, #8
 800922a:	2b00      	cmp	r3, #0
 800922c:	d011      	beq.n	8009252 <HAL_UART_IRQHandler+0x126>
 800922e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009232:	f003 0320 	and.w	r3, r3, #32
 8009236:	2b00      	cmp	r3, #0
 8009238:	d105      	bne.n	8009246 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800923a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800923e:	f003 0301 	and.w	r3, r3, #1
 8009242:	2b00      	cmp	r3, #0
 8009244:	d005      	beq.n	8009252 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800924a:	f043 0208 	orr.w	r2, r3, #8
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009256:	2b00      	cmp	r3, #0
 8009258:	f000 81f2 	beq.w	8009640 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800925c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009260:	f003 0320 	and.w	r3, r3, #32
 8009264:	2b00      	cmp	r3, #0
 8009266:	d008      	beq.n	800927a <HAL_UART_IRQHandler+0x14e>
 8009268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800926c:	f003 0320 	and.w	r3, r3, #32
 8009270:	2b00      	cmp	r3, #0
 8009272:	d002      	beq.n	800927a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 fb7b 	bl	8009970 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	695b      	ldr	r3, [r3, #20]
 8009280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009284:	2b40      	cmp	r3, #64	@ 0x40
 8009286:	bf0c      	ite	eq
 8009288:	2301      	moveq	r3, #1
 800928a:	2300      	movne	r3, #0
 800928c:	b2db      	uxtb	r3, r3
 800928e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009296:	f003 0308 	and.w	r3, r3, #8
 800929a:	2b00      	cmp	r3, #0
 800929c:	d103      	bne.n	80092a6 <HAL_UART_IRQHandler+0x17a>
 800929e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d04f      	beq.n	8009346 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 fa83 	bl	80097b2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	695b      	ldr	r3, [r3, #20]
 80092b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092b6:	2b40      	cmp	r3, #64	@ 0x40
 80092b8:	d141      	bne.n	800933e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	3314      	adds	r3, #20
 80092c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80092c8:	e853 3f00 	ldrex	r3, [r3]
 80092cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80092d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80092d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	3314      	adds	r3, #20
 80092e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80092e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80092ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80092f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80092f6:	e841 2300 	strex	r3, r2, [r1]
 80092fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80092fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009302:	2b00      	cmp	r3, #0
 8009304:	d1d9      	bne.n	80092ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800930a:	2b00      	cmp	r3, #0
 800930c:	d013      	beq.n	8009336 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009312:	4a7e      	ldr	r2, [pc, #504]	@ (800950c <HAL_UART_IRQHandler+0x3e0>)
 8009314:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800931a:	4618      	mov	r0, r3
 800931c:	f7fc fcd7 	bl	8005cce <HAL_DMA_Abort_IT>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d016      	beq.n	8009354 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800932a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009330:	4610      	mov	r0, r2
 8009332:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009334:	e00e      	b.n	8009354 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 f99e 	bl	8009678 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800933c:	e00a      	b.n	8009354 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 f99a 	bl	8009678 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009344:	e006      	b.n	8009354 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 f996 	bl	8009678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009352:	e175      	b.n	8009640 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009354:	bf00      	nop
    return;
 8009356:	e173      	b.n	8009640 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800935c:	2b01      	cmp	r3, #1
 800935e:	f040 814f 	bne.w	8009600 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009366:	f003 0310 	and.w	r3, r3, #16
 800936a:	2b00      	cmp	r3, #0
 800936c:	f000 8148 	beq.w	8009600 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009374:	f003 0310 	and.w	r3, r3, #16
 8009378:	2b00      	cmp	r3, #0
 800937a:	f000 8141 	beq.w	8009600 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800937e:	2300      	movs	r3, #0
 8009380:	60bb      	str	r3, [r7, #8]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	60bb      	str	r3, [r7, #8]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	60bb      	str	r3, [r7, #8]
 8009392:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	695b      	ldr	r3, [r3, #20]
 800939a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800939e:	2b40      	cmp	r3, #64	@ 0x40
 80093a0:	f040 80b6 	bne.w	8009510 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80093b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	f000 8145 	beq.w	8009644 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80093be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80093c2:	429a      	cmp	r2, r3
 80093c4:	f080 813e 	bcs.w	8009644 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80093ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093d4:	69db      	ldr	r3, [r3, #28]
 80093d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093da:	f000 8088 	beq.w	80094ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	330c      	adds	r3, #12
 80093e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80093ec:	e853 3f00 	ldrex	r3, [r3]
 80093f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80093f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80093f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	330c      	adds	r3, #12
 8009406:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800940a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800940e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009412:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009416:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800941a:	e841 2300 	strex	r3, r2, [r1]
 800941e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009422:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009426:	2b00      	cmp	r3, #0
 8009428:	d1d9      	bne.n	80093de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	3314      	adds	r3, #20
 8009430:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009432:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009434:	e853 3f00 	ldrex	r3, [r3]
 8009438:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800943a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800943c:	f023 0301 	bic.w	r3, r3, #1
 8009440:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	3314      	adds	r3, #20
 800944a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800944e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009452:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009454:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009456:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800945a:	e841 2300 	strex	r3, r2, [r1]
 800945e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009460:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009462:	2b00      	cmp	r3, #0
 8009464:	d1e1      	bne.n	800942a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	3314      	adds	r3, #20
 800946c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800946e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009470:	e853 3f00 	ldrex	r3, [r3]
 8009474:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009476:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009478:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800947c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	3314      	adds	r3, #20
 8009486:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800948a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800948c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800948e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009490:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009492:	e841 2300 	strex	r3, r2, [r1]
 8009496:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009498:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800949a:	2b00      	cmp	r3, #0
 800949c:	d1e3      	bne.n	8009466 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2220      	movs	r2, #32
 80094a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	330c      	adds	r3, #12
 80094b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094b6:	e853 3f00 	ldrex	r3, [r3]
 80094ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80094bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094be:	f023 0310 	bic.w	r3, r3, #16
 80094c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	330c      	adds	r3, #12
 80094cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80094d0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80094d2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80094d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80094d8:	e841 2300 	strex	r3, r2, [r1]
 80094dc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80094de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d1e3      	bne.n	80094ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7fc fb80 	bl	8005bee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2202      	movs	r2, #2
 80094f2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	1ad3      	subs	r3, r2, r3
 8009500:	b29b      	uxth	r3, r3
 8009502:	4619      	mov	r1, r3
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f7f9 fc2b 	bl	8002d60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800950a:	e09b      	b.n	8009644 <HAL_UART_IRQHandler+0x518>
 800950c:	08009879 	.word	0x08009879
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009518:	b29b      	uxth	r3, r3
 800951a:	1ad3      	subs	r3, r2, r3
 800951c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009524:	b29b      	uxth	r3, r3
 8009526:	2b00      	cmp	r3, #0
 8009528:	f000 808e 	beq.w	8009648 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800952c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009530:	2b00      	cmp	r3, #0
 8009532:	f000 8089 	beq.w	8009648 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	330c      	adds	r3, #12
 800953c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800953e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009540:	e853 3f00 	ldrex	r3, [r3]
 8009544:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009548:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800954c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	330c      	adds	r3, #12
 8009556:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800955a:	647a      	str	r2, [r7, #68]	@ 0x44
 800955c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009560:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009562:	e841 2300 	strex	r3, r2, [r1]
 8009566:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800956a:	2b00      	cmp	r3, #0
 800956c:	d1e3      	bne.n	8009536 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	3314      	adds	r3, #20
 8009574:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009578:	e853 3f00 	ldrex	r3, [r3]
 800957c:	623b      	str	r3, [r7, #32]
   return(result);
 800957e:	6a3b      	ldr	r3, [r7, #32]
 8009580:	f023 0301 	bic.w	r3, r3, #1
 8009584:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	3314      	adds	r3, #20
 800958e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009592:	633a      	str	r2, [r7, #48]	@ 0x30
 8009594:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009596:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009598:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800959a:	e841 2300 	strex	r3, r2, [r1]
 800959e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d1e3      	bne.n	800956e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2220      	movs	r2, #32
 80095aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	330c      	adds	r3, #12
 80095ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	e853 3f00 	ldrex	r3, [r3]
 80095c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f023 0310 	bic.w	r3, r3, #16
 80095ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	330c      	adds	r3, #12
 80095d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80095d8:	61fa      	str	r2, [r7, #28]
 80095da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095dc:	69b9      	ldr	r1, [r7, #24]
 80095de:	69fa      	ldr	r2, [r7, #28]
 80095e0:	e841 2300 	strex	r3, r2, [r1]
 80095e4:	617b      	str	r3, [r7, #20]
   return(result);
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d1e3      	bne.n	80095b4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2202      	movs	r2, #2
 80095f0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80095f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80095f6:	4619      	mov	r1, r3
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f7f9 fbb1 	bl	8002d60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80095fe:	e023      	b.n	8009648 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009604:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009608:	2b00      	cmp	r3, #0
 800960a:	d009      	beq.n	8009620 <HAL_UART_IRQHandler+0x4f4>
 800960c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009610:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009614:	2b00      	cmp	r3, #0
 8009616:	d003      	beq.n	8009620 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 f941 	bl	80098a0 <UART_Transmit_IT>
    return;
 800961e:	e014      	b.n	800964a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009628:	2b00      	cmp	r3, #0
 800962a:	d00e      	beq.n	800964a <HAL_UART_IRQHandler+0x51e>
 800962c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009634:	2b00      	cmp	r3, #0
 8009636:	d008      	beq.n	800964a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 f981 	bl	8009940 <UART_EndTransmit_IT>
    return;
 800963e:	e004      	b.n	800964a <HAL_UART_IRQHandler+0x51e>
    return;
 8009640:	bf00      	nop
 8009642:	e002      	b.n	800964a <HAL_UART_IRQHandler+0x51e>
      return;
 8009644:	bf00      	nop
 8009646:	e000      	b.n	800964a <HAL_UART_IRQHandler+0x51e>
      return;
 8009648:	bf00      	nop
  }
}
 800964a:	37e8      	adds	r7, #232	@ 0xe8
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009650:	b480      	push	{r7}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009658:	bf00      	nop
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800966c:	bf00      	nop
 800966e:	370c      	adds	r7, #12
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009678:	b480      	push	{r7}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009680:	bf00      	nop
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr

0800968c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b086      	sub	sp, #24
 8009690:	af00      	add	r7, sp, #0
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	60b9      	str	r1, [r7, #8]
 8009696:	603b      	str	r3, [r7, #0]
 8009698:	4613      	mov	r3, r2
 800969a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800969c:	e03b      	b.n	8009716 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800969e:	6a3b      	ldr	r3, [r7, #32]
 80096a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096a4:	d037      	beq.n	8009716 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096a6:	f7fb fe2d 	bl	8005304 <HAL_GetTick>
 80096aa:	4602      	mov	r2, r0
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	1ad3      	subs	r3, r2, r3
 80096b0:	6a3a      	ldr	r2, [r7, #32]
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d302      	bcc.n	80096bc <UART_WaitOnFlagUntilTimeout+0x30>
 80096b6:	6a3b      	ldr	r3, [r7, #32]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d101      	bne.n	80096c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80096bc:	2303      	movs	r3, #3
 80096be:	e03a      	b.n	8009736 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	f003 0304 	and.w	r3, r3, #4
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d023      	beq.n	8009716 <UART_WaitOnFlagUntilTimeout+0x8a>
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	2b80      	cmp	r3, #128	@ 0x80
 80096d2:	d020      	beq.n	8009716 <UART_WaitOnFlagUntilTimeout+0x8a>
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	2b40      	cmp	r3, #64	@ 0x40
 80096d8:	d01d      	beq.n	8009716 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f003 0308 	and.w	r3, r3, #8
 80096e4:	2b08      	cmp	r3, #8
 80096e6:	d116      	bne.n	8009716 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80096e8:	2300      	movs	r3, #0
 80096ea:	617b      	str	r3, [r7, #20]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	617b      	str	r3, [r7, #20]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	617b      	str	r3, [r7, #20]
 80096fc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80096fe:	68f8      	ldr	r0, [r7, #12]
 8009700:	f000 f857 	bl	80097b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2208      	movs	r2, #8
 8009708:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2200      	movs	r2, #0
 800970e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009712:	2301      	movs	r3, #1
 8009714:	e00f      	b.n	8009736 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	4013      	ands	r3, r2
 8009720:	68ba      	ldr	r2, [r7, #8]
 8009722:	429a      	cmp	r2, r3
 8009724:	bf0c      	ite	eq
 8009726:	2301      	moveq	r3, #1
 8009728:	2300      	movne	r3, #0
 800972a:	b2db      	uxtb	r3, r3
 800972c:	461a      	mov	r2, r3
 800972e:	79fb      	ldrb	r3, [r7, #7]
 8009730:	429a      	cmp	r2, r3
 8009732:	d0b4      	beq.n	800969e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009734:	2300      	movs	r3, #0
}
 8009736:	4618      	mov	r0, r3
 8009738:	3718      	adds	r7, #24
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800973e:	b480      	push	{r7}
 8009740:	b085      	sub	sp, #20
 8009742:	af00      	add	r7, sp, #0
 8009744:	60f8      	str	r0, [r7, #12]
 8009746:	60b9      	str	r1, [r7, #8]
 8009748:	4613      	mov	r3, r2
 800974a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	68ba      	ldr	r2, [r7, #8]
 8009750:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	88fa      	ldrh	r2, [r7, #6]
 8009756:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	88fa      	ldrh	r2, [r7, #6]
 800975c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2200      	movs	r2, #0
 8009762:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2222      	movs	r2, #34	@ 0x22
 8009768:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	691b      	ldr	r3, [r3, #16]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d007      	beq.n	8009784 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	68da      	ldr	r2, [r3, #12]
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009782:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	695a      	ldr	r2, [r3, #20]
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f042 0201 	orr.w	r2, r2, #1
 8009792:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	68da      	ldr	r2, [r3, #12]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f042 0220 	orr.w	r2, r2, #32
 80097a2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80097a4:	2300      	movs	r3, #0
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3714      	adds	r7, #20
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr

080097b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80097b2:	b480      	push	{r7}
 80097b4:	b095      	sub	sp, #84	@ 0x54
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	330c      	adds	r3, #12
 80097c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097c4:	e853 3f00 	ldrex	r3, [r3]
 80097c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80097ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	330c      	adds	r3, #12
 80097d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80097da:	643a      	str	r2, [r7, #64]	@ 0x40
 80097dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80097e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80097e2:	e841 2300 	strex	r3, r2, [r1]
 80097e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80097e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d1e5      	bne.n	80097ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	3314      	adds	r3, #20
 80097f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f6:	6a3b      	ldr	r3, [r7, #32]
 80097f8:	e853 3f00 	ldrex	r3, [r3]
 80097fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80097fe:	69fb      	ldr	r3, [r7, #28]
 8009800:	f023 0301 	bic.w	r3, r3, #1
 8009804:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	3314      	adds	r3, #20
 800980c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800980e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009810:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009812:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009814:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009816:	e841 2300 	strex	r3, r2, [r1]
 800981a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800981c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800981e:	2b00      	cmp	r3, #0
 8009820:	d1e5      	bne.n	80097ee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009826:	2b01      	cmp	r3, #1
 8009828:	d119      	bne.n	800985e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	330c      	adds	r3, #12
 8009830:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	e853 3f00 	ldrex	r3, [r3]
 8009838:	60bb      	str	r3, [r7, #8]
   return(result);
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	f023 0310 	bic.w	r3, r3, #16
 8009840:	647b      	str	r3, [r7, #68]	@ 0x44
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	330c      	adds	r3, #12
 8009848:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800984a:	61ba      	str	r2, [r7, #24]
 800984c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800984e:	6979      	ldr	r1, [r7, #20]
 8009850:	69ba      	ldr	r2, [r7, #24]
 8009852:	e841 2300 	strex	r3, r2, [r1]
 8009856:	613b      	str	r3, [r7, #16]
   return(result);
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d1e5      	bne.n	800982a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2220      	movs	r2, #32
 8009862:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800986c:	bf00      	nop
 800986e:	3754      	adds	r7, #84	@ 0x54
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr

08009878 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009884:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2200      	movs	r2, #0
 800988a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2200      	movs	r2, #0
 8009890:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009892:	68f8      	ldr	r0, [r7, #12]
 8009894:	f7ff fef0 	bl	8009678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009898:	bf00      	nop
 800989a:	3710      	adds	r7, #16
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b085      	sub	sp, #20
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	2b21      	cmp	r3, #33	@ 0x21
 80098b2:	d13e      	bne.n	8009932 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	689b      	ldr	r3, [r3, #8]
 80098b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098bc:	d114      	bne.n	80098e8 <UART_Transmit_IT+0x48>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	691b      	ldr	r3, [r3, #16]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d110      	bne.n	80098e8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6a1b      	ldr	r3, [r3, #32]
 80098ca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	881b      	ldrh	r3, [r3, #0]
 80098d0:	461a      	mov	r2, r3
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80098da:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6a1b      	ldr	r3, [r3, #32]
 80098e0:	1c9a      	adds	r2, r3, #2
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	621a      	str	r2, [r3, #32]
 80098e6:	e008      	b.n	80098fa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6a1b      	ldr	r3, [r3, #32]
 80098ec:	1c59      	adds	r1, r3, #1
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	6211      	str	r1, [r2, #32]
 80098f2:	781a      	ldrb	r2, [r3, #0]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80098fe:	b29b      	uxth	r3, r3
 8009900:	3b01      	subs	r3, #1
 8009902:	b29b      	uxth	r3, r3
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	4619      	mov	r1, r3
 8009908:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800990a:	2b00      	cmp	r3, #0
 800990c:	d10f      	bne.n	800992e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	68da      	ldr	r2, [r3, #12]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800991c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	68da      	ldr	r2, [r3, #12]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800992c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800992e:	2300      	movs	r3, #0
 8009930:	e000      	b.n	8009934 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009932:	2302      	movs	r3, #2
  }
}
 8009934:	4618      	mov	r0, r3
 8009936:	3714      	adds	r7, #20
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	68da      	ldr	r2, [r3, #12]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009956:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2220      	movs	r2, #32
 800995c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f7ff fe75 	bl	8009650 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009966:	2300      	movs	r3, #0
}
 8009968:	4618      	mov	r0, r3
 800996a:	3708      	adds	r7, #8
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b08c      	sub	sp, #48	@ 0x30
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800997e:	b2db      	uxtb	r3, r3
 8009980:	2b22      	cmp	r3, #34	@ 0x22
 8009982:	f040 80ae 	bne.w	8009ae2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	689b      	ldr	r3, [r3, #8]
 800998a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800998e:	d117      	bne.n	80099c0 <UART_Receive_IT+0x50>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	691b      	ldr	r3, [r3, #16]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d113      	bne.n	80099c0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009998:	2300      	movs	r3, #0
 800999a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099ae:	b29a      	uxth	r2, r3
 80099b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099b2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099b8:	1c9a      	adds	r2, r3, #2
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80099be:	e026      	b.n	8009a0e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80099c6:	2300      	movs	r3, #0
 80099c8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099d2:	d007      	beq.n	80099e4 <UART_Receive_IT+0x74>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d10a      	bne.n	80099f2 <UART_Receive_IT+0x82>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	691b      	ldr	r3, [r3, #16]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d106      	bne.n	80099f2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	b2da      	uxtb	r2, r3
 80099ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099ee:	701a      	strb	r2, [r3, #0]
 80099f0:	e008      	b.n	8009a04 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099fe:	b2da      	uxtb	r2, r3
 8009a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a02:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a08:	1c5a      	adds	r2, r3, #1
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	3b01      	subs	r3, #1
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	687a      	ldr	r2, [r7, #4]
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d15d      	bne.n	8009ade <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	68da      	ldr	r2, [r3, #12]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f022 0220 	bic.w	r2, r2, #32
 8009a30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	68da      	ldr	r2, [r3, #12]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009a40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	695a      	ldr	r2, [r3, #20]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f022 0201 	bic.w	r2, r2, #1
 8009a50:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2220      	movs	r2, #32
 8009a56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d135      	bne.n	8009ad4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	330c      	adds	r3, #12
 8009a74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	e853 3f00 	ldrex	r3, [r3]
 8009a7c:	613b      	str	r3, [r7, #16]
   return(result);
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	f023 0310 	bic.w	r3, r3, #16
 8009a84:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	330c      	adds	r3, #12
 8009a8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a8e:	623a      	str	r2, [r7, #32]
 8009a90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a92:	69f9      	ldr	r1, [r7, #28]
 8009a94:	6a3a      	ldr	r2, [r7, #32]
 8009a96:	e841 2300 	strex	r3, r2, [r1]
 8009a9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a9c:	69bb      	ldr	r3, [r7, #24]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d1e5      	bne.n	8009a6e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f003 0310 	and.w	r3, r3, #16
 8009aac:	2b10      	cmp	r3, #16
 8009aae:	d10a      	bne.n	8009ac6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	60fb      	str	r3, [r7, #12]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	60fb      	str	r3, [r7, #12]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	60fb      	str	r3, [r7, #12]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009aca:	4619      	mov	r1, r3
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f7f9 f947 	bl	8002d60 <HAL_UARTEx_RxEventCallback>
 8009ad2:	e002      	b.n	8009ada <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f7ff fdc5 	bl	8009664 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009ada:	2300      	movs	r3, #0
 8009adc:	e002      	b.n	8009ae4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	e000      	b.n	8009ae4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009ae2:	2302      	movs	r3, #2
  }
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3730      	adds	r7, #48	@ 0x30
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009af0:	b0c0      	sub	sp, #256	@ 0x100
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	691b      	ldr	r3, [r3, #16]
 8009b00:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b08:	68d9      	ldr	r1, [r3, #12]
 8009b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	ea40 0301 	orr.w	r3, r0, r1
 8009b14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b1a:	689a      	ldr	r2, [r3, #8]
 8009b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b20:	691b      	ldr	r3, [r3, #16]
 8009b22:	431a      	orrs	r2, r3
 8009b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b28:	695b      	ldr	r3, [r3, #20]
 8009b2a:	431a      	orrs	r2, r3
 8009b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b30:	69db      	ldr	r3, [r3, #28]
 8009b32:	4313      	orrs	r3, r2
 8009b34:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009b44:	f021 010c 	bic.w	r1, r1, #12
 8009b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b4c:	681a      	ldr	r2, [r3, #0]
 8009b4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009b52:	430b      	orrs	r3, r1
 8009b54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	695b      	ldr	r3, [r3, #20]
 8009b5e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b66:	6999      	ldr	r1, [r3, #24]
 8009b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	ea40 0301 	orr.w	r3, r0, r1
 8009b72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	4b8f      	ldr	r3, [pc, #572]	@ (8009db8 <UART_SetConfig+0x2cc>)
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d005      	beq.n	8009b8c <UART_SetConfig+0xa0>
 8009b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	4b8d      	ldr	r3, [pc, #564]	@ (8009dbc <UART_SetConfig+0x2d0>)
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d104      	bne.n	8009b96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009b8c:	f7fe fc1e 	bl	80083cc <HAL_RCC_GetPCLK2Freq>
 8009b90:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009b94:	e003      	b.n	8009b9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009b96:	f7fe fc05 	bl	80083a4 <HAL_RCC_GetPCLK1Freq>
 8009b9a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ba2:	69db      	ldr	r3, [r3, #28]
 8009ba4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ba8:	f040 810c 	bne.w	8009dc4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009bac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009bb6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009bba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009bbe:	4622      	mov	r2, r4
 8009bc0:	462b      	mov	r3, r5
 8009bc2:	1891      	adds	r1, r2, r2
 8009bc4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009bc6:	415b      	adcs	r3, r3
 8009bc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009bca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009bce:	4621      	mov	r1, r4
 8009bd0:	eb12 0801 	adds.w	r8, r2, r1
 8009bd4:	4629      	mov	r1, r5
 8009bd6:	eb43 0901 	adc.w	r9, r3, r1
 8009bda:	f04f 0200 	mov.w	r2, #0
 8009bde:	f04f 0300 	mov.w	r3, #0
 8009be2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009be6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009bea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009bee:	4690      	mov	r8, r2
 8009bf0:	4699      	mov	r9, r3
 8009bf2:	4623      	mov	r3, r4
 8009bf4:	eb18 0303 	adds.w	r3, r8, r3
 8009bf8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009bfc:	462b      	mov	r3, r5
 8009bfe:	eb49 0303 	adc.w	r3, r9, r3
 8009c02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009c12:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009c16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009c1a:	460b      	mov	r3, r1
 8009c1c:	18db      	adds	r3, r3, r3
 8009c1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c20:	4613      	mov	r3, r2
 8009c22:	eb42 0303 	adc.w	r3, r2, r3
 8009c26:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009c2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009c30:	f7f6 ffca 	bl	8000bc8 <__aeabi_uldivmod>
 8009c34:	4602      	mov	r2, r0
 8009c36:	460b      	mov	r3, r1
 8009c38:	4b61      	ldr	r3, [pc, #388]	@ (8009dc0 <UART_SetConfig+0x2d4>)
 8009c3a:	fba3 2302 	umull	r2, r3, r3, r2
 8009c3e:	095b      	lsrs	r3, r3, #5
 8009c40:	011c      	lsls	r4, r3, #4
 8009c42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c46:	2200      	movs	r2, #0
 8009c48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009c4c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009c50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009c54:	4642      	mov	r2, r8
 8009c56:	464b      	mov	r3, r9
 8009c58:	1891      	adds	r1, r2, r2
 8009c5a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009c5c:	415b      	adcs	r3, r3
 8009c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009c64:	4641      	mov	r1, r8
 8009c66:	eb12 0a01 	adds.w	sl, r2, r1
 8009c6a:	4649      	mov	r1, r9
 8009c6c:	eb43 0b01 	adc.w	fp, r3, r1
 8009c70:	f04f 0200 	mov.w	r2, #0
 8009c74:	f04f 0300 	mov.w	r3, #0
 8009c78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009c7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009c80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009c84:	4692      	mov	sl, r2
 8009c86:	469b      	mov	fp, r3
 8009c88:	4643      	mov	r3, r8
 8009c8a:	eb1a 0303 	adds.w	r3, sl, r3
 8009c8e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009c92:	464b      	mov	r3, r9
 8009c94:	eb4b 0303 	adc.w	r3, fp, r3
 8009c98:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009ca8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009cac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	18db      	adds	r3, r3, r3
 8009cb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	eb42 0303 	adc.w	r3, r2, r3
 8009cbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8009cbe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009cc2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009cc6:	f7f6 ff7f 	bl	8000bc8 <__aeabi_uldivmod>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	460b      	mov	r3, r1
 8009cce:	4611      	mov	r1, r2
 8009cd0:	4b3b      	ldr	r3, [pc, #236]	@ (8009dc0 <UART_SetConfig+0x2d4>)
 8009cd2:	fba3 2301 	umull	r2, r3, r3, r1
 8009cd6:	095b      	lsrs	r3, r3, #5
 8009cd8:	2264      	movs	r2, #100	@ 0x64
 8009cda:	fb02 f303 	mul.w	r3, r2, r3
 8009cde:	1acb      	subs	r3, r1, r3
 8009ce0:	00db      	lsls	r3, r3, #3
 8009ce2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009ce6:	4b36      	ldr	r3, [pc, #216]	@ (8009dc0 <UART_SetConfig+0x2d4>)
 8009ce8:	fba3 2302 	umull	r2, r3, r3, r2
 8009cec:	095b      	lsrs	r3, r3, #5
 8009cee:	005b      	lsls	r3, r3, #1
 8009cf0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009cf4:	441c      	add	r4, r3
 8009cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009d00:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009d04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009d08:	4642      	mov	r2, r8
 8009d0a:	464b      	mov	r3, r9
 8009d0c:	1891      	adds	r1, r2, r2
 8009d0e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009d10:	415b      	adcs	r3, r3
 8009d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009d18:	4641      	mov	r1, r8
 8009d1a:	1851      	adds	r1, r2, r1
 8009d1c:	6339      	str	r1, [r7, #48]	@ 0x30
 8009d1e:	4649      	mov	r1, r9
 8009d20:	414b      	adcs	r3, r1
 8009d22:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d24:	f04f 0200 	mov.w	r2, #0
 8009d28:	f04f 0300 	mov.w	r3, #0
 8009d2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009d30:	4659      	mov	r1, fp
 8009d32:	00cb      	lsls	r3, r1, #3
 8009d34:	4651      	mov	r1, sl
 8009d36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d3a:	4651      	mov	r1, sl
 8009d3c:	00ca      	lsls	r2, r1, #3
 8009d3e:	4610      	mov	r0, r2
 8009d40:	4619      	mov	r1, r3
 8009d42:	4603      	mov	r3, r0
 8009d44:	4642      	mov	r2, r8
 8009d46:	189b      	adds	r3, r3, r2
 8009d48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009d4c:	464b      	mov	r3, r9
 8009d4e:	460a      	mov	r2, r1
 8009d50:	eb42 0303 	adc.w	r3, r2, r3
 8009d54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009d64:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009d68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	18db      	adds	r3, r3, r3
 8009d70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009d72:	4613      	mov	r3, r2
 8009d74:	eb42 0303 	adc.w	r3, r2, r3
 8009d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009d7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009d82:	f7f6 ff21 	bl	8000bc8 <__aeabi_uldivmod>
 8009d86:	4602      	mov	r2, r0
 8009d88:	460b      	mov	r3, r1
 8009d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8009dc0 <UART_SetConfig+0x2d4>)
 8009d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8009d90:	095b      	lsrs	r3, r3, #5
 8009d92:	2164      	movs	r1, #100	@ 0x64
 8009d94:	fb01 f303 	mul.w	r3, r1, r3
 8009d98:	1ad3      	subs	r3, r2, r3
 8009d9a:	00db      	lsls	r3, r3, #3
 8009d9c:	3332      	adds	r3, #50	@ 0x32
 8009d9e:	4a08      	ldr	r2, [pc, #32]	@ (8009dc0 <UART_SetConfig+0x2d4>)
 8009da0:	fba2 2303 	umull	r2, r3, r2, r3
 8009da4:	095b      	lsrs	r3, r3, #5
 8009da6:	f003 0207 	and.w	r2, r3, #7
 8009daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4422      	add	r2, r4
 8009db2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009db4:	e106      	b.n	8009fc4 <UART_SetConfig+0x4d8>
 8009db6:	bf00      	nop
 8009db8:	40011000 	.word	0x40011000
 8009dbc:	40011400 	.word	0x40011400
 8009dc0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009dc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009dc8:	2200      	movs	r2, #0
 8009dca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009dce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009dd2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009dd6:	4642      	mov	r2, r8
 8009dd8:	464b      	mov	r3, r9
 8009dda:	1891      	adds	r1, r2, r2
 8009ddc:	6239      	str	r1, [r7, #32]
 8009dde:	415b      	adcs	r3, r3
 8009de0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009de2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009de6:	4641      	mov	r1, r8
 8009de8:	1854      	adds	r4, r2, r1
 8009dea:	4649      	mov	r1, r9
 8009dec:	eb43 0501 	adc.w	r5, r3, r1
 8009df0:	f04f 0200 	mov.w	r2, #0
 8009df4:	f04f 0300 	mov.w	r3, #0
 8009df8:	00eb      	lsls	r3, r5, #3
 8009dfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009dfe:	00e2      	lsls	r2, r4, #3
 8009e00:	4614      	mov	r4, r2
 8009e02:	461d      	mov	r5, r3
 8009e04:	4643      	mov	r3, r8
 8009e06:	18e3      	adds	r3, r4, r3
 8009e08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009e0c:	464b      	mov	r3, r9
 8009e0e:	eb45 0303 	adc.w	r3, r5, r3
 8009e12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009e22:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009e26:	f04f 0200 	mov.w	r2, #0
 8009e2a:	f04f 0300 	mov.w	r3, #0
 8009e2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009e32:	4629      	mov	r1, r5
 8009e34:	008b      	lsls	r3, r1, #2
 8009e36:	4621      	mov	r1, r4
 8009e38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e3c:	4621      	mov	r1, r4
 8009e3e:	008a      	lsls	r2, r1, #2
 8009e40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009e44:	f7f6 fec0 	bl	8000bc8 <__aeabi_uldivmod>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	460b      	mov	r3, r1
 8009e4c:	4b60      	ldr	r3, [pc, #384]	@ (8009fd0 <UART_SetConfig+0x4e4>)
 8009e4e:	fba3 2302 	umull	r2, r3, r3, r2
 8009e52:	095b      	lsrs	r3, r3, #5
 8009e54:	011c      	lsls	r4, r3, #4
 8009e56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009e60:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009e64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009e68:	4642      	mov	r2, r8
 8009e6a:	464b      	mov	r3, r9
 8009e6c:	1891      	adds	r1, r2, r2
 8009e6e:	61b9      	str	r1, [r7, #24]
 8009e70:	415b      	adcs	r3, r3
 8009e72:	61fb      	str	r3, [r7, #28]
 8009e74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009e78:	4641      	mov	r1, r8
 8009e7a:	1851      	adds	r1, r2, r1
 8009e7c:	6139      	str	r1, [r7, #16]
 8009e7e:	4649      	mov	r1, r9
 8009e80:	414b      	adcs	r3, r1
 8009e82:	617b      	str	r3, [r7, #20]
 8009e84:	f04f 0200 	mov.w	r2, #0
 8009e88:	f04f 0300 	mov.w	r3, #0
 8009e8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009e90:	4659      	mov	r1, fp
 8009e92:	00cb      	lsls	r3, r1, #3
 8009e94:	4651      	mov	r1, sl
 8009e96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e9a:	4651      	mov	r1, sl
 8009e9c:	00ca      	lsls	r2, r1, #3
 8009e9e:	4610      	mov	r0, r2
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	4642      	mov	r2, r8
 8009ea6:	189b      	adds	r3, r3, r2
 8009ea8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009eac:	464b      	mov	r3, r9
 8009eae:	460a      	mov	r2, r1
 8009eb0:	eb42 0303 	adc.w	r3, r2, r3
 8009eb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009ec2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009ec4:	f04f 0200 	mov.w	r2, #0
 8009ec8:	f04f 0300 	mov.w	r3, #0
 8009ecc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009ed0:	4649      	mov	r1, r9
 8009ed2:	008b      	lsls	r3, r1, #2
 8009ed4:	4641      	mov	r1, r8
 8009ed6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009eda:	4641      	mov	r1, r8
 8009edc:	008a      	lsls	r2, r1, #2
 8009ede:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009ee2:	f7f6 fe71 	bl	8000bc8 <__aeabi_uldivmod>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	460b      	mov	r3, r1
 8009eea:	4611      	mov	r1, r2
 8009eec:	4b38      	ldr	r3, [pc, #224]	@ (8009fd0 <UART_SetConfig+0x4e4>)
 8009eee:	fba3 2301 	umull	r2, r3, r3, r1
 8009ef2:	095b      	lsrs	r3, r3, #5
 8009ef4:	2264      	movs	r2, #100	@ 0x64
 8009ef6:	fb02 f303 	mul.w	r3, r2, r3
 8009efa:	1acb      	subs	r3, r1, r3
 8009efc:	011b      	lsls	r3, r3, #4
 8009efe:	3332      	adds	r3, #50	@ 0x32
 8009f00:	4a33      	ldr	r2, [pc, #204]	@ (8009fd0 <UART_SetConfig+0x4e4>)
 8009f02:	fba2 2303 	umull	r2, r3, r2, r3
 8009f06:	095b      	lsrs	r3, r3, #5
 8009f08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009f0c:	441c      	add	r4, r3
 8009f0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009f12:	2200      	movs	r2, #0
 8009f14:	673b      	str	r3, [r7, #112]	@ 0x70
 8009f16:	677a      	str	r2, [r7, #116]	@ 0x74
 8009f18:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009f1c:	4642      	mov	r2, r8
 8009f1e:	464b      	mov	r3, r9
 8009f20:	1891      	adds	r1, r2, r2
 8009f22:	60b9      	str	r1, [r7, #8]
 8009f24:	415b      	adcs	r3, r3
 8009f26:	60fb      	str	r3, [r7, #12]
 8009f28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009f2c:	4641      	mov	r1, r8
 8009f2e:	1851      	adds	r1, r2, r1
 8009f30:	6039      	str	r1, [r7, #0]
 8009f32:	4649      	mov	r1, r9
 8009f34:	414b      	adcs	r3, r1
 8009f36:	607b      	str	r3, [r7, #4]
 8009f38:	f04f 0200 	mov.w	r2, #0
 8009f3c:	f04f 0300 	mov.w	r3, #0
 8009f40:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009f44:	4659      	mov	r1, fp
 8009f46:	00cb      	lsls	r3, r1, #3
 8009f48:	4651      	mov	r1, sl
 8009f4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f4e:	4651      	mov	r1, sl
 8009f50:	00ca      	lsls	r2, r1, #3
 8009f52:	4610      	mov	r0, r2
 8009f54:	4619      	mov	r1, r3
 8009f56:	4603      	mov	r3, r0
 8009f58:	4642      	mov	r2, r8
 8009f5a:	189b      	adds	r3, r3, r2
 8009f5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f5e:	464b      	mov	r3, r9
 8009f60:	460a      	mov	r2, r1
 8009f62:	eb42 0303 	adc.w	r3, r2, r3
 8009f66:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	663b      	str	r3, [r7, #96]	@ 0x60
 8009f72:	667a      	str	r2, [r7, #100]	@ 0x64
 8009f74:	f04f 0200 	mov.w	r2, #0
 8009f78:	f04f 0300 	mov.w	r3, #0
 8009f7c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009f80:	4649      	mov	r1, r9
 8009f82:	008b      	lsls	r3, r1, #2
 8009f84:	4641      	mov	r1, r8
 8009f86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f8a:	4641      	mov	r1, r8
 8009f8c:	008a      	lsls	r2, r1, #2
 8009f8e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009f92:	f7f6 fe19 	bl	8000bc8 <__aeabi_uldivmod>
 8009f96:	4602      	mov	r2, r0
 8009f98:	460b      	mov	r3, r1
 8009f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8009fd0 <UART_SetConfig+0x4e4>)
 8009f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8009fa0:	095b      	lsrs	r3, r3, #5
 8009fa2:	2164      	movs	r1, #100	@ 0x64
 8009fa4:	fb01 f303 	mul.w	r3, r1, r3
 8009fa8:	1ad3      	subs	r3, r2, r3
 8009faa:	011b      	lsls	r3, r3, #4
 8009fac:	3332      	adds	r3, #50	@ 0x32
 8009fae:	4a08      	ldr	r2, [pc, #32]	@ (8009fd0 <UART_SetConfig+0x4e4>)
 8009fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8009fb4:	095b      	lsrs	r3, r3, #5
 8009fb6:	f003 020f 	and.w	r2, r3, #15
 8009fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4422      	add	r2, r4
 8009fc2:	609a      	str	r2, [r3, #8]
}
 8009fc4:	bf00      	nop
 8009fc6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009fd0:	51eb851f 	.word	0x51eb851f

08009fd4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009fd8:	4904      	ldr	r1, [pc, #16]	@ (8009fec <MX_FATFS_Init+0x18>)
 8009fda:	4805      	ldr	r0, [pc, #20]	@ (8009ff0 <MX_FATFS_Init+0x1c>)
 8009fdc:	f000 f8ae 	bl	800a13c <FATFS_LinkDriver>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	4b03      	ldr	r3, [pc, #12]	@ (8009ff4 <MX_FATFS_Init+0x20>)
 8009fe6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009fe8:	bf00      	nop
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	20000b34 	.word	0x20000b34
 8009ff0:	20000150 	.word	0x20000150
 8009ff4:	20000b30 	.word	0x20000b30

08009ff8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	4603      	mov	r3, r0
 800a000:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize (pdrv);
 800a002:	79fb      	ldrb	r3, [r7, #7]
 800a004:	4618      	mov	r0, r3
 800a006:	f7f9 fbf3 	bl	80037f0 <SD_disk_initialize>
 800a00a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3708      	adds	r7, #8
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	4603      	mov	r3, r0
 800a01c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status (pdrv);
 800a01e:	79fb      	ldrb	r3, [r7, #7]
 800a020:	4618      	mov	r0, r3
 800a022:	f7f9 fcd1 	bl	80039c8 <SD_disk_status>
 800a026:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3708      	adds	r7, #8
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b084      	sub	sp, #16
 800a034:	af00      	add	r7, sp, #0
 800a036:	60b9      	str	r1, [r7, #8]
 800a038:	607a      	str	r2, [r7, #4]
 800a03a:	603b      	str	r3, [r7, #0]
 800a03c:	4603      	mov	r3, r0
 800a03e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read (pdrv, buff, sector, count);
 800a040:	7bf8      	ldrb	r0, [r7, #15]
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	68b9      	ldr	r1, [r7, #8]
 800a048:	f7f9 fcd4 	bl	80039f4 <SD_disk_read>
 800a04c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3710      	adds	r7, #16
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}

0800a056 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a056:	b580      	push	{r7, lr}
 800a058:	b084      	sub	sp, #16
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	607a      	str	r2, [r7, #4]
 800a060:	603b      	str	r3, [r7, #0]
 800a062:	4603      	mov	r3, r0
 800a064:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write (pdrv, buff, sector, count);
 800a066:	7bf8      	ldrb	r0, [r7, #15]
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	68b9      	ldr	r1, [r7, #8]
 800a06e:	f7f9 fd2b 	bl	8003ac8 <SD_disk_write>
 800a072:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800a074:	4618      	mov	r0, r3
 800a076:	3710      	adds	r7, #16
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b082      	sub	sp, #8
 800a080:	af00      	add	r7, sp, #0
 800a082:	4603      	mov	r3, r0
 800a084:	603a      	str	r2, [r7, #0]
 800a086:	71fb      	strb	r3, [r7, #7]
 800a088:	460b      	mov	r3, r1
 800a08a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl (pdrv, cmd, buff);
 800a08c:	79b9      	ldrb	r1, [r7, #6]
 800a08e:	79fb      	ldrb	r3, [r7, #7]
 800a090:	683a      	ldr	r2, [r7, #0]
 800a092:	4618      	mov	r0, r3
 800a094:	f7f9 fd9c 	bl	8003bd0 <SD_disk_ioctl>
 800a098:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3708      	adds	r7, #8
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
	...

0800a0a4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b087      	sub	sp, #28
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a0ba:	4b1f      	ldr	r3, [pc, #124]	@ (800a138 <FATFS_LinkDriverEx+0x94>)
 800a0bc:	7a5b      	ldrb	r3, [r3, #9]
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d131      	bne.n	800a128 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a0c4:	4b1c      	ldr	r3, [pc, #112]	@ (800a138 <FATFS_LinkDriverEx+0x94>)
 800a0c6:	7a5b      	ldrb	r3, [r3, #9]
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	4b1a      	ldr	r3, [pc, #104]	@ (800a138 <FATFS_LinkDriverEx+0x94>)
 800a0ce:	2100      	movs	r1, #0
 800a0d0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a0d2:	4b19      	ldr	r3, [pc, #100]	@ (800a138 <FATFS_LinkDriverEx+0x94>)
 800a0d4:	7a5b      	ldrb	r3, [r3, #9]
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	4a17      	ldr	r2, [pc, #92]	@ (800a138 <FATFS_LinkDriverEx+0x94>)
 800a0da:	009b      	lsls	r3, r3, #2
 800a0dc:	4413      	add	r3, r2
 800a0de:	68fa      	ldr	r2, [r7, #12]
 800a0e0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a0e2:	4b15      	ldr	r3, [pc, #84]	@ (800a138 <FATFS_LinkDriverEx+0x94>)
 800a0e4:	7a5b      	ldrb	r3, [r3, #9]
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	4b13      	ldr	r3, [pc, #76]	@ (800a138 <FATFS_LinkDriverEx+0x94>)
 800a0ec:	4413      	add	r3, r2
 800a0ee:	79fa      	ldrb	r2, [r7, #7]
 800a0f0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a0f2:	4b11      	ldr	r3, [pc, #68]	@ (800a138 <FATFS_LinkDriverEx+0x94>)
 800a0f4:	7a5b      	ldrb	r3, [r3, #9]
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	1c5a      	adds	r2, r3, #1
 800a0fa:	b2d1      	uxtb	r1, r2
 800a0fc:	4a0e      	ldr	r2, [pc, #56]	@ (800a138 <FATFS_LinkDriverEx+0x94>)
 800a0fe:	7251      	strb	r1, [r2, #9]
 800a100:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a102:	7dbb      	ldrb	r3, [r7, #22]
 800a104:	3330      	adds	r3, #48	@ 0x30
 800a106:	b2da      	uxtb	r2, r3
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	3301      	adds	r3, #1
 800a110:	223a      	movs	r2, #58	@ 0x3a
 800a112:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	3302      	adds	r3, #2
 800a118:	222f      	movs	r2, #47	@ 0x2f
 800a11a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	3303      	adds	r3, #3
 800a120:	2200      	movs	r2, #0
 800a122:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a124:	2300      	movs	r3, #0
 800a126:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a128:	7dfb      	ldrb	r3, [r7, #23]
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	371c      	adds	r7, #28
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr
 800a136:	bf00      	nop
 800a138:	20000b38 	.word	0x20000b38

0800a13c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a146:	2200      	movs	r2, #0
 800a148:	6839      	ldr	r1, [r7, #0]
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f7ff ffaa 	bl	800a0a4 <FATFS_LinkDriverEx>
 800a150:	4603      	mov	r3, r0
}
 800a152:	4618      	mov	r0, r3
 800a154:	3708      	adds	r7, #8
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
	...

0800a15c <malloc>:
 800a15c:	4b02      	ldr	r3, [pc, #8]	@ (800a168 <malloc+0xc>)
 800a15e:	4601      	mov	r1, r0
 800a160:	6818      	ldr	r0, [r3, #0]
 800a162:	f000 b825 	b.w	800a1b0 <_malloc_r>
 800a166:	bf00      	nop
 800a168:	20000170 	.word	0x20000170

0800a16c <sbrk_aligned>:
 800a16c:	b570      	push	{r4, r5, r6, lr}
 800a16e:	4e0f      	ldr	r6, [pc, #60]	@ (800a1ac <sbrk_aligned+0x40>)
 800a170:	460c      	mov	r4, r1
 800a172:	6831      	ldr	r1, [r6, #0]
 800a174:	4605      	mov	r5, r0
 800a176:	b911      	cbnz	r1, 800a17e <sbrk_aligned+0x12>
 800a178:	f000 fe64 	bl	800ae44 <_sbrk_r>
 800a17c:	6030      	str	r0, [r6, #0]
 800a17e:	4621      	mov	r1, r4
 800a180:	4628      	mov	r0, r5
 800a182:	f000 fe5f 	bl	800ae44 <_sbrk_r>
 800a186:	1c43      	adds	r3, r0, #1
 800a188:	d103      	bne.n	800a192 <sbrk_aligned+0x26>
 800a18a:	f04f 34ff 	mov.w	r4, #4294967295
 800a18e:	4620      	mov	r0, r4
 800a190:	bd70      	pop	{r4, r5, r6, pc}
 800a192:	1cc4      	adds	r4, r0, #3
 800a194:	f024 0403 	bic.w	r4, r4, #3
 800a198:	42a0      	cmp	r0, r4
 800a19a:	d0f8      	beq.n	800a18e <sbrk_aligned+0x22>
 800a19c:	1a21      	subs	r1, r4, r0
 800a19e:	4628      	mov	r0, r5
 800a1a0:	f000 fe50 	bl	800ae44 <_sbrk_r>
 800a1a4:	3001      	adds	r0, #1
 800a1a6:	d1f2      	bne.n	800a18e <sbrk_aligned+0x22>
 800a1a8:	e7ef      	b.n	800a18a <sbrk_aligned+0x1e>
 800a1aa:	bf00      	nop
 800a1ac:	20000b44 	.word	0x20000b44

0800a1b0 <_malloc_r>:
 800a1b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1b4:	1ccd      	adds	r5, r1, #3
 800a1b6:	f025 0503 	bic.w	r5, r5, #3
 800a1ba:	3508      	adds	r5, #8
 800a1bc:	2d0c      	cmp	r5, #12
 800a1be:	bf38      	it	cc
 800a1c0:	250c      	movcc	r5, #12
 800a1c2:	2d00      	cmp	r5, #0
 800a1c4:	4606      	mov	r6, r0
 800a1c6:	db01      	blt.n	800a1cc <_malloc_r+0x1c>
 800a1c8:	42a9      	cmp	r1, r5
 800a1ca:	d904      	bls.n	800a1d6 <_malloc_r+0x26>
 800a1cc:	230c      	movs	r3, #12
 800a1ce:	6033      	str	r3, [r6, #0]
 800a1d0:	2000      	movs	r0, #0
 800a1d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a2ac <_malloc_r+0xfc>
 800a1da:	f000 f869 	bl	800a2b0 <__malloc_lock>
 800a1de:	f8d8 3000 	ldr.w	r3, [r8]
 800a1e2:	461c      	mov	r4, r3
 800a1e4:	bb44      	cbnz	r4, 800a238 <_malloc_r+0x88>
 800a1e6:	4629      	mov	r1, r5
 800a1e8:	4630      	mov	r0, r6
 800a1ea:	f7ff ffbf 	bl	800a16c <sbrk_aligned>
 800a1ee:	1c43      	adds	r3, r0, #1
 800a1f0:	4604      	mov	r4, r0
 800a1f2:	d158      	bne.n	800a2a6 <_malloc_r+0xf6>
 800a1f4:	f8d8 4000 	ldr.w	r4, [r8]
 800a1f8:	4627      	mov	r7, r4
 800a1fa:	2f00      	cmp	r7, #0
 800a1fc:	d143      	bne.n	800a286 <_malloc_r+0xd6>
 800a1fe:	2c00      	cmp	r4, #0
 800a200:	d04b      	beq.n	800a29a <_malloc_r+0xea>
 800a202:	6823      	ldr	r3, [r4, #0]
 800a204:	4639      	mov	r1, r7
 800a206:	4630      	mov	r0, r6
 800a208:	eb04 0903 	add.w	r9, r4, r3
 800a20c:	f000 fe1a 	bl	800ae44 <_sbrk_r>
 800a210:	4581      	cmp	r9, r0
 800a212:	d142      	bne.n	800a29a <_malloc_r+0xea>
 800a214:	6821      	ldr	r1, [r4, #0]
 800a216:	1a6d      	subs	r5, r5, r1
 800a218:	4629      	mov	r1, r5
 800a21a:	4630      	mov	r0, r6
 800a21c:	f7ff ffa6 	bl	800a16c <sbrk_aligned>
 800a220:	3001      	adds	r0, #1
 800a222:	d03a      	beq.n	800a29a <_malloc_r+0xea>
 800a224:	6823      	ldr	r3, [r4, #0]
 800a226:	442b      	add	r3, r5
 800a228:	6023      	str	r3, [r4, #0]
 800a22a:	f8d8 3000 	ldr.w	r3, [r8]
 800a22e:	685a      	ldr	r2, [r3, #4]
 800a230:	bb62      	cbnz	r2, 800a28c <_malloc_r+0xdc>
 800a232:	f8c8 7000 	str.w	r7, [r8]
 800a236:	e00f      	b.n	800a258 <_malloc_r+0xa8>
 800a238:	6822      	ldr	r2, [r4, #0]
 800a23a:	1b52      	subs	r2, r2, r5
 800a23c:	d420      	bmi.n	800a280 <_malloc_r+0xd0>
 800a23e:	2a0b      	cmp	r2, #11
 800a240:	d917      	bls.n	800a272 <_malloc_r+0xc2>
 800a242:	1961      	adds	r1, r4, r5
 800a244:	42a3      	cmp	r3, r4
 800a246:	6025      	str	r5, [r4, #0]
 800a248:	bf18      	it	ne
 800a24a:	6059      	strne	r1, [r3, #4]
 800a24c:	6863      	ldr	r3, [r4, #4]
 800a24e:	bf08      	it	eq
 800a250:	f8c8 1000 	streq.w	r1, [r8]
 800a254:	5162      	str	r2, [r4, r5]
 800a256:	604b      	str	r3, [r1, #4]
 800a258:	4630      	mov	r0, r6
 800a25a:	f000 f82f 	bl	800a2bc <__malloc_unlock>
 800a25e:	f104 000b 	add.w	r0, r4, #11
 800a262:	1d23      	adds	r3, r4, #4
 800a264:	f020 0007 	bic.w	r0, r0, #7
 800a268:	1ac2      	subs	r2, r0, r3
 800a26a:	bf1c      	itt	ne
 800a26c:	1a1b      	subne	r3, r3, r0
 800a26e:	50a3      	strne	r3, [r4, r2]
 800a270:	e7af      	b.n	800a1d2 <_malloc_r+0x22>
 800a272:	6862      	ldr	r2, [r4, #4]
 800a274:	42a3      	cmp	r3, r4
 800a276:	bf0c      	ite	eq
 800a278:	f8c8 2000 	streq.w	r2, [r8]
 800a27c:	605a      	strne	r2, [r3, #4]
 800a27e:	e7eb      	b.n	800a258 <_malloc_r+0xa8>
 800a280:	4623      	mov	r3, r4
 800a282:	6864      	ldr	r4, [r4, #4]
 800a284:	e7ae      	b.n	800a1e4 <_malloc_r+0x34>
 800a286:	463c      	mov	r4, r7
 800a288:	687f      	ldr	r7, [r7, #4]
 800a28a:	e7b6      	b.n	800a1fa <_malloc_r+0x4a>
 800a28c:	461a      	mov	r2, r3
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	42a3      	cmp	r3, r4
 800a292:	d1fb      	bne.n	800a28c <_malloc_r+0xdc>
 800a294:	2300      	movs	r3, #0
 800a296:	6053      	str	r3, [r2, #4]
 800a298:	e7de      	b.n	800a258 <_malloc_r+0xa8>
 800a29a:	230c      	movs	r3, #12
 800a29c:	6033      	str	r3, [r6, #0]
 800a29e:	4630      	mov	r0, r6
 800a2a0:	f000 f80c 	bl	800a2bc <__malloc_unlock>
 800a2a4:	e794      	b.n	800a1d0 <_malloc_r+0x20>
 800a2a6:	6005      	str	r5, [r0, #0]
 800a2a8:	e7d6      	b.n	800a258 <_malloc_r+0xa8>
 800a2aa:	bf00      	nop
 800a2ac:	20000b48 	.word	0x20000b48

0800a2b0 <__malloc_lock>:
 800a2b0:	4801      	ldr	r0, [pc, #4]	@ (800a2b8 <__malloc_lock+0x8>)
 800a2b2:	f000 be14 	b.w	800aede <__retarget_lock_acquire_recursive>
 800a2b6:	bf00      	nop
 800a2b8:	20000c8c 	.word	0x20000c8c

0800a2bc <__malloc_unlock>:
 800a2bc:	4801      	ldr	r0, [pc, #4]	@ (800a2c4 <__malloc_unlock+0x8>)
 800a2be:	f000 be0f 	b.w	800aee0 <__retarget_lock_release_recursive>
 800a2c2:	bf00      	nop
 800a2c4:	20000c8c 	.word	0x20000c8c

0800a2c8 <__cvt>:
 800a2c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2cc:	ec57 6b10 	vmov	r6, r7, d0
 800a2d0:	2f00      	cmp	r7, #0
 800a2d2:	460c      	mov	r4, r1
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	463b      	mov	r3, r7
 800a2d8:	bfbb      	ittet	lt
 800a2da:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a2de:	461f      	movlt	r7, r3
 800a2e0:	2300      	movge	r3, #0
 800a2e2:	232d      	movlt	r3, #45	@ 0x2d
 800a2e4:	700b      	strb	r3, [r1, #0]
 800a2e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a2e8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a2ec:	4691      	mov	r9, r2
 800a2ee:	f023 0820 	bic.w	r8, r3, #32
 800a2f2:	bfbc      	itt	lt
 800a2f4:	4632      	movlt	r2, r6
 800a2f6:	4616      	movlt	r6, r2
 800a2f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a2fc:	d005      	beq.n	800a30a <__cvt+0x42>
 800a2fe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a302:	d100      	bne.n	800a306 <__cvt+0x3e>
 800a304:	3401      	adds	r4, #1
 800a306:	2102      	movs	r1, #2
 800a308:	e000      	b.n	800a30c <__cvt+0x44>
 800a30a:	2103      	movs	r1, #3
 800a30c:	ab03      	add	r3, sp, #12
 800a30e:	9301      	str	r3, [sp, #4]
 800a310:	ab02      	add	r3, sp, #8
 800a312:	9300      	str	r3, [sp, #0]
 800a314:	ec47 6b10 	vmov	d0, r6, r7
 800a318:	4653      	mov	r3, sl
 800a31a:	4622      	mov	r2, r4
 800a31c:	f000 fe78 	bl	800b010 <_dtoa_r>
 800a320:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a324:	4605      	mov	r5, r0
 800a326:	d119      	bne.n	800a35c <__cvt+0x94>
 800a328:	f019 0f01 	tst.w	r9, #1
 800a32c:	d00e      	beq.n	800a34c <__cvt+0x84>
 800a32e:	eb00 0904 	add.w	r9, r0, r4
 800a332:	2200      	movs	r2, #0
 800a334:	2300      	movs	r3, #0
 800a336:	4630      	mov	r0, r6
 800a338:	4639      	mov	r1, r7
 800a33a:	f7f6 fbd5 	bl	8000ae8 <__aeabi_dcmpeq>
 800a33e:	b108      	cbz	r0, 800a344 <__cvt+0x7c>
 800a340:	f8cd 900c 	str.w	r9, [sp, #12]
 800a344:	2230      	movs	r2, #48	@ 0x30
 800a346:	9b03      	ldr	r3, [sp, #12]
 800a348:	454b      	cmp	r3, r9
 800a34a:	d31e      	bcc.n	800a38a <__cvt+0xc2>
 800a34c:	9b03      	ldr	r3, [sp, #12]
 800a34e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a350:	1b5b      	subs	r3, r3, r5
 800a352:	4628      	mov	r0, r5
 800a354:	6013      	str	r3, [r2, #0]
 800a356:	b004      	add	sp, #16
 800a358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a35c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a360:	eb00 0904 	add.w	r9, r0, r4
 800a364:	d1e5      	bne.n	800a332 <__cvt+0x6a>
 800a366:	7803      	ldrb	r3, [r0, #0]
 800a368:	2b30      	cmp	r3, #48	@ 0x30
 800a36a:	d10a      	bne.n	800a382 <__cvt+0xba>
 800a36c:	2200      	movs	r2, #0
 800a36e:	2300      	movs	r3, #0
 800a370:	4630      	mov	r0, r6
 800a372:	4639      	mov	r1, r7
 800a374:	f7f6 fbb8 	bl	8000ae8 <__aeabi_dcmpeq>
 800a378:	b918      	cbnz	r0, 800a382 <__cvt+0xba>
 800a37a:	f1c4 0401 	rsb	r4, r4, #1
 800a37e:	f8ca 4000 	str.w	r4, [sl]
 800a382:	f8da 3000 	ldr.w	r3, [sl]
 800a386:	4499      	add	r9, r3
 800a388:	e7d3      	b.n	800a332 <__cvt+0x6a>
 800a38a:	1c59      	adds	r1, r3, #1
 800a38c:	9103      	str	r1, [sp, #12]
 800a38e:	701a      	strb	r2, [r3, #0]
 800a390:	e7d9      	b.n	800a346 <__cvt+0x7e>

0800a392 <__exponent>:
 800a392:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a394:	2900      	cmp	r1, #0
 800a396:	bfba      	itte	lt
 800a398:	4249      	neglt	r1, r1
 800a39a:	232d      	movlt	r3, #45	@ 0x2d
 800a39c:	232b      	movge	r3, #43	@ 0x2b
 800a39e:	2909      	cmp	r1, #9
 800a3a0:	7002      	strb	r2, [r0, #0]
 800a3a2:	7043      	strb	r3, [r0, #1]
 800a3a4:	dd29      	ble.n	800a3fa <__exponent+0x68>
 800a3a6:	f10d 0307 	add.w	r3, sp, #7
 800a3aa:	461d      	mov	r5, r3
 800a3ac:	270a      	movs	r7, #10
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	fbb1 f6f7 	udiv	r6, r1, r7
 800a3b4:	fb07 1416 	mls	r4, r7, r6, r1
 800a3b8:	3430      	adds	r4, #48	@ 0x30
 800a3ba:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a3be:	460c      	mov	r4, r1
 800a3c0:	2c63      	cmp	r4, #99	@ 0x63
 800a3c2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a3c6:	4631      	mov	r1, r6
 800a3c8:	dcf1      	bgt.n	800a3ae <__exponent+0x1c>
 800a3ca:	3130      	adds	r1, #48	@ 0x30
 800a3cc:	1e94      	subs	r4, r2, #2
 800a3ce:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a3d2:	1c41      	adds	r1, r0, #1
 800a3d4:	4623      	mov	r3, r4
 800a3d6:	42ab      	cmp	r3, r5
 800a3d8:	d30a      	bcc.n	800a3f0 <__exponent+0x5e>
 800a3da:	f10d 0309 	add.w	r3, sp, #9
 800a3de:	1a9b      	subs	r3, r3, r2
 800a3e0:	42ac      	cmp	r4, r5
 800a3e2:	bf88      	it	hi
 800a3e4:	2300      	movhi	r3, #0
 800a3e6:	3302      	adds	r3, #2
 800a3e8:	4403      	add	r3, r0
 800a3ea:	1a18      	subs	r0, r3, r0
 800a3ec:	b003      	add	sp, #12
 800a3ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3f0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a3f4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a3f8:	e7ed      	b.n	800a3d6 <__exponent+0x44>
 800a3fa:	2330      	movs	r3, #48	@ 0x30
 800a3fc:	3130      	adds	r1, #48	@ 0x30
 800a3fe:	7083      	strb	r3, [r0, #2]
 800a400:	70c1      	strb	r1, [r0, #3]
 800a402:	1d03      	adds	r3, r0, #4
 800a404:	e7f1      	b.n	800a3ea <__exponent+0x58>
	...

0800a408 <_printf_float>:
 800a408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a40c:	b08d      	sub	sp, #52	@ 0x34
 800a40e:	460c      	mov	r4, r1
 800a410:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a414:	4616      	mov	r6, r2
 800a416:	461f      	mov	r7, r3
 800a418:	4605      	mov	r5, r0
 800a41a:	f000 fcdb 	bl	800add4 <_localeconv_r>
 800a41e:	6803      	ldr	r3, [r0, #0]
 800a420:	9304      	str	r3, [sp, #16]
 800a422:	4618      	mov	r0, r3
 800a424:	f7f5 ff34 	bl	8000290 <strlen>
 800a428:	2300      	movs	r3, #0
 800a42a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a42c:	f8d8 3000 	ldr.w	r3, [r8]
 800a430:	9005      	str	r0, [sp, #20]
 800a432:	3307      	adds	r3, #7
 800a434:	f023 0307 	bic.w	r3, r3, #7
 800a438:	f103 0208 	add.w	r2, r3, #8
 800a43c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a440:	f8d4 b000 	ldr.w	fp, [r4]
 800a444:	f8c8 2000 	str.w	r2, [r8]
 800a448:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a44c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a450:	9307      	str	r3, [sp, #28]
 800a452:	f8cd 8018 	str.w	r8, [sp, #24]
 800a456:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a45a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a45e:	4b9c      	ldr	r3, [pc, #624]	@ (800a6d0 <_printf_float+0x2c8>)
 800a460:	f04f 32ff 	mov.w	r2, #4294967295
 800a464:	f7f6 fb72 	bl	8000b4c <__aeabi_dcmpun>
 800a468:	bb70      	cbnz	r0, 800a4c8 <_printf_float+0xc0>
 800a46a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a46e:	4b98      	ldr	r3, [pc, #608]	@ (800a6d0 <_printf_float+0x2c8>)
 800a470:	f04f 32ff 	mov.w	r2, #4294967295
 800a474:	f7f6 fb4c 	bl	8000b10 <__aeabi_dcmple>
 800a478:	bb30      	cbnz	r0, 800a4c8 <_printf_float+0xc0>
 800a47a:	2200      	movs	r2, #0
 800a47c:	2300      	movs	r3, #0
 800a47e:	4640      	mov	r0, r8
 800a480:	4649      	mov	r1, r9
 800a482:	f7f6 fb3b 	bl	8000afc <__aeabi_dcmplt>
 800a486:	b110      	cbz	r0, 800a48e <_printf_float+0x86>
 800a488:	232d      	movs	r3, #45	@ 0x2d
 800a48a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a48e:	4a91      	ldr	r2, [pc, #580]	@ (800a6d4 <_printf_float+0x2cc>)
 800a490:	4b91      	ldr	r3, [pc, #580]	@ (800a6d8 <_printf_float+0x2d0>)
 800a492:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a496:	bf94      	ite	ls
 800a498:	4690      	movls	r8, r2
 800a49a:	4698      	movhi	r8, r3
 800a49c:	2303      	movs	r3, #3
 800a49e:	6123      	str	r3, [r4, #16]
 800a4a0:	f02b 0304 	bic.w	r3, fp, #4
 800a4a4:	6023      	str	r3, [r4, #0]
 800a4a6:	f04f 0900 	mov.w	r9, #0
 800a4aa:	9700      	str	r7, [sp, #0]
 800a4ac:	4633      	mov	r3, r6
 800a4ae:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a4b0:	4621      	mov	r1, r4
 800a4b2:	4628      	mov	r0, r5
 800a4b4:	f000 f9d2 	bl	800a85c <_printf_common>
 800a4b8:	3001      	adds	r0, #1
 800a4ba:	f040 808d 	bne.w	800a5d8 <_printf_float+0x1d0>
 800a4be:	f04f 30ff 	mov.w	r0, #4294967295
 800a4c2:	b00d      	add	sp, #52	@ 0x34
 800a4c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4c8:	4642      	mov	r2, r8
 800a4ca:	464b      	mov	r3, r9
 800a4cc:	4640      	mov	r0, r8
 800a4ce:	4649      	mov	r1, r9
 800a4d0:	f7f6 fb3c 	bl	8000b4c <__aeabi_dcmpun>
 800a4d4:	b140      	cbz	r0, 800a4e8 <_printf_float+0xe0>
 800a4d6:	464b      	mov	r3, r9
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	bfbc      	itt	lt
 800a4dc:	232d      	movlt	r3, #45	@ 0x2d
 800a4de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a4e2:	4a7e      	ldr	r2, [pc, #504]	@ (800a6dc <_printf_float+0x2d4>)
 800a4e4:	4b7e      	ldr	r3, [pc, #504]	@ (800a6e0 <_printf_float+0x2d8>)
 800a4e6:	e7d4      	b.n	800a492 <_printf_float+0x8a>
 800a4e8:	6863      	ldr	r3, [r4, #4]
 800a4ea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a4ee:	9206      	str	r2, [sp, #24]
 800a4f0:	1c5a      	adds	r2, r3, #1
 800a4f2:	d13b      	bne.n	800a56c <_printf_float+0x164>
 800a4f4:	2306      	movs	r3, #6
 800a4f6:	6063      	str	r3, [r4, #4]
 800a4f8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	6022      	str	r2, [r4, #0]
 800a500:	9303      	str	r3, [sp, #12]
 800a502:	ab0a      	add	r3, sp, #40	@ 0x28
 800a504:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a508:	ab09      	add	r3, sp, #36	@ 0x24
 800a50a:	9300      	str	r3, [sp, #0]
 800a50c:	6861      	ldr	r1, [r4, #4]
 800a50e:	ec49 8b10 	vmov	d0, r8, r9
 800a512:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a516:	4628      	mov	r0, r5
 800a518:	f7ff fed6 	bl	800a2c8 <__cvt>
 800a51c:	9b06      	ldr	r3, [sp, #24]
 800a51e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a520:	2b47      	cmp	r3, #71	@ 0x47
 800a522:	4680      	mov	r8, r0
 800a524:	d129      	bne.n	800a57a <_printf_float+0x172>
 800a526:	1cc8      	adds	r0, r1, #3
 800a528:	db02      	blt.n	800a530 <_printf_float+0x128>
 800a52a:	6863      	ldr	r3, [r4, #4]
 800a52c:	4299      	cmp	r1, r3
 800a52e:	dd41      	ble.n	800a5b4 <_printf_float+0x1ac>
 800a530:	f1aa 0a02 	sub.w	sl, sl, #2
 800a534:	fa5f fa8a 	uxtb.w	sl, sl
 800a538:	3901      	subs	r1, #1
 800a53a:	4652      	mov	r2, sl
 800a53c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a540:	9109      	str	r1, [sp, #36]	@ 0x24
 800a542:	f7ff ff26 	bl	800a392 <__exponent>
 800a546:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a548:	1813      	adds	r3, r2, r0
 800a54a:	2a01      	cmp	r2, #1
 800a54c:	4681      	mov	r9, r0
 800a54e:	6123      	str	r3, [r4, #16]
 800a550:	dc02      	bgt.n	800a558 <_printf_float+0x150>
 800a552:	6822      	ldr	r2, [r4, #0]
 800a554:	07d2      	lsls	r2, r2, #31
 800a556:	d501      	bpl.n	800a55c <_printf_float+0x154>
 800a558:	3301      	adds	r3, #1
 800a55a:	6123      	str	r3, [r4, #16]
 800a55c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a560:	2b00      	cmp	r3, #0
 800a562:	d0a2      	beq.n	800a4aa <_printf_float+0xa2>
 800a564:	232d      	movs	r3, #45	@ 0x2d
 800a566:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a56a:	e79e      	b.n	800a4aa <_printf_float+0xa2>
 800a56c:	9a06      	ldr	r2, [sp, #24]
 800a56e:	2a47      	cmp	r2, #71	@ 0x47
 800a570:	d1c2      	bne.n	800a4f8 <_printf_float+0xf0>
 800a572:	2b00      	cmp	r3, #0
 800a574:	d1c0      	bne.n	800a4f8 <_printf_float+0xf0>
 800a576:	2301      	movs	r3, #1
 800a578:	e7bd      	b.n	800a4f6 <_printf_float+0xee>
 800a57a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a57e:	d9db      	bls.n	800a538 <_printf_float+0x130>
 800a580:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a584:	d118      	bne.n	800a5b8 <_printf_float+0x1b0>
 800a586:	2900      	cmp	r1, #0
 800a588:	6863      	ldr	r3, [r4, #4]
 800a58a:	dd0b      	ble.n	800a5a4 <_printf_float+0x19c>
 800a58c:	6121      	str	r1, [r4, #16]
 800a58e:	b913      	cbnz	r3, 800a596 <_printf_float+0x18e>
 800a590:	6822      	ldr	r2, [r4, #0]
 800a592:	07d0      	lsls	r0, r2, #31
 800a594:	d502      	bpl.n	800a59c <_printf_float+0x194>
 800a596:	3301      	adds	r3, #1
 800a598:	440b      	add	r3, r1
 800a59a:	6123      	str	r3, [r4, #16]
 800a59c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a59e:	f04f 0900 	mov.w	r9, #0
 800a5a2:	e7db      	b.n	800a55c <_printf_float+0x154>
 800a5a4:	b913      	cbnz	r3, 800a5ac <_printf_float+0x1a4>
 800a5a6:	6822      	ldr	r2, [r4, #0]
 800a5a8:	07d2      	lsls	r2, r2, #31
 800a5aa:	d501      	bpl.n	800a5b0 <_printf_float+0x1a8>
 800a5ac:	3302      	adds	r3, #2
 800a5ae:	e7f4      	b.n	800a59a <_printf_float+0x192>
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	e7f2      	b.n	800a59a <_printf_float+0x192>
 800a5b4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a5b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5ba:	4299      	cmp	r1, r3
 800a5bc:	db05      	blt.n	800a5ca <_printf_float+0x1c2>
 800a5be:	6823      	ldr	r3, [r4, #0]
 800a5c0:	6121      	str	r1, [r4, #16]
 800a5c2:	07d8      	lsls	r0, r3, #31
 800a5c4:	d5ea      	bpl.n	800a59c <_printf_float+0x194>
 800a5c6:	1c4b      	adds	r3, r1, #1
 800a5c8:	e7e7      	b.n	800a59a <_printf_float+0x192>
 800a5ca:	2900      	cmp	r1, #0
 800a5cc:	bfd4      	ite	le
 800a5ce:	f1c1 0202 	rsble	r2, r1, #2
 800a5d2:	2201      	movgt	r2, #1
 800a5d4:	4413      	add	r3, r2
 800a5d6:	e7e0      	b.n	800a59a <_printf_float+0x192>
 800a5d8:	6823      	ldr	r3, [r4, #0]
 800a5da:	055a      	lsls	r2, r3, #21
 800a5dc:	d407      	bmi.n	800a5ee <_printf_float+0x1e6>
 800a5de:	6923      	ldr	r3, [r4, #16]
 800a5e0:	4642      	mov	r2, r8
 800a5e2:	4631      	mov	r1, r6
 800a5e4:	4628      	mov	r0, r5
 800a5e6:	47b8      	blx	r7
 800a5e8:	3001      	adds	r0, #1
 800a5ea:	d12b      	bne.n	800a644 <_printf_float+0x23c>
 800a5ec:	e767      	b.n	800a4be <_printf_float+0xb6>
 800a5ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a5f2:	f240 80dd 	bls.w	800a7b0 <_printf_float+0x3a8>
 800a5f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	f7f6 fa73 	bl	8000ae8 <__aeabi_dcmpeq>
 800a602:	2800      	cmp	r0, #0
 800a604:	d033      	beq.n	800a66e <_printf_float+0x266>
 800a606:	4a37      	ldr	r2, [pc, #220]	@ (800a6e4 <_printf_float+0x2dc>)
 800a608:	2301      	movs	r3, #1
 800a60a:	4631      	mov	r1, r6
 800a60c:	4628      	mov	r0, r5
 800a60e:	47b8      	blx	r7
 800a610:	3001      	adds	r0, #1
 800a612:	f43f af54 	beq.w	800a4be <_printf_float+0xb6>
 800a616:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a61a:	4543      	cmp	r3, r8
 800a61c:	db02      	blt.n	800a624 <_printf_float+0x21c>
 800a61e:	6823      	ldr	r3, [r4, #0]
 800a620:	07d8      	lsls	r0, r3, #31
 800a622:	d50f      	bpl.n	800a644 <_printf_float+0x23c>
 800a624:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a628:	4631      	mov	r1, r6
 800a62a:	4628      	mov	r0, r5
 800a62c:	47b8      	blx	r7
 800a62e:	3001      	adds	r0, #1
 800a630:	f43f af45 	beq.w	800a4be <_printf_float+0xb6>
 800a634:	f04f 0900 	mov.w	r9, #0
 800a638:	f108 38ff 	add.w	r8, r8, #4294967295
 800a63c:	f104 0a1a 	add.w	sl, r4, #26
 800a640:	45c8      	cmp	r8, r9
 800a642:	dc09      	bgt.n	800a658 <_printf_float+0x250>
 800a644:	6823      	ldr	r3, [r4, #0]
 800a646:	079b      	lsls	r3, r3, #30
 800a648:	f100 8103 	bmi.w	800a852 <_printf_float+0x44a>
 800a64c:	68e0      	ldr	r0, [r4, #12]
 800a64e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a650:	4298      	cmp	r0, r3
 800a652:	bfb8      	it	lt
 800a654:	4618      	movlt	r0, r3
 800a656:	e734      	b.n	800a4c2 <_printf_float+0xba>
 800a658:	2301      	movs	r3, #1
 800a65a:	4652      	mov	r2, sl
 800a65c:	4631      	mov	r1, r6
 800a65e:	4628      	mov	r0, r5
 800a660:	47b8      	blx	r7
 800a662:	3001      	adds	r0, #1
 800a664:	f43f af2b 	beq.w	800a4be <_printf_float+0xb6>
 800a668:	f109 0901 	add.w	r9, r9, #1
 800a66c:	e7e8      	b.n	800a640 <_printf_float+0x238>
 800a66e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a670:	2b00      	cmp	r3, #0
 800a672:	dc39      	bgt.n	800a6e8 <_printf_float+0x2e0>
 800a674:	4a1b      	ldr	r2, [pc, #108]	@ (800a6e4 <_printf_float+0x2dc>)
 800a676:	2301      	movs	r3, #1
 800a678:	4631      	mov	r1, r6
 800a67a:	4628      	mov	r0, r5
 800a67c:	47b8      	blx	r7
 800a67e:	3001      	adds	r0, #1
 800a680:	f43f af1d 	beq.w	800a4be <_printf_float+0xb6>
 800a684:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a688:	ea59 0303 	orrs.w	r3, r9, r3
 800a68c:	d102      	bne.n	800a694 <_printf_float+0x28c>
 800a68e:	6823      	ldr	r3, [r4, #0]
 800a690:	07d9      	lsls	r1, r3, #31
 800a692:	d5d7      	bpl.n	800a644 <_printf_float+0x23c>
 800a694:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a698:	4631      	mov	r1, r6
 800a69a:	4628      	mov	r0, r5
 800a69c:	47b8      	blx	r7
 800a69e:	3001      	adds	r0, #1
 800a6a0:	f43f af0d 	beq.w	800a4be <_printf_float+0xb6>
 800a6a4:	f04f 0a00 	mov.w	sl, #0
 800a6a8:	f104 0b1a 	add.w	fp, r4, #26
 800a6ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6ae:	425b      	negs	r3, r3
 800a6b0:	4553      	cmp	r3, sl
 800a6b2:	dc01      	bgt.n	800a6b8 <_printf_float+0x2b0>
 800a6b4:	464b      	mov	r3, r9
 800a6b6:	e793      	b.n	800a5e0 <_printf_float+0x1d8>
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	465a      	mov	r2, fp
 800a6bc:	4631      	mov	r1, r6
 800a6be:	4628      	mov	r0, r5
 800a6c0:	47b8      	blx	r7
 800a6c2:	3001      	adds	r0, #1
 800a6c4:	f43f aefb 	beq.w	800a4be <_printf_float+0xb6>
 800a6c8:	f10a 0a01 	add.w	sl, sl, #1
 800a6cc:	e7ee      	b.n	800a6ac <_printf_float+0x2a4>
 800a6ce:	bf00      	nop
 800a6d0:	7fefffff 	.word	0x7fefffff
 800a6d4:	0801134c 	.word	0x0801134c
 800a6d8:	08011350 	.word	0x08011350
 800a6dc:	08011354 	.word	0x08011354
 800a6e0:	08011358 	.word	0x08011358
 800a6e4:	0801135c 	.word	0x0801135c
 800a6e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a6ea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a6ee:	4553      	cmp	r3, sl
 800a6f0:	bfa8      	it	ge
 800a6f2:	4653      	movge	r3, sl
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	4699      	mov	r9, r3
 800a6f8:	dc36      	bgt.n	800a768 <_printf_float+0x360>
 800a6fa:	f04f 0b00 	mov.w	fp, #0
 800a6fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a702:	f104 021a 	add.w	r2, r4, #26
 800a706:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a708:	9306      	str	r3, [sp, #24]
 800a70a:	eba3 0309 	sub.w	r3, r3, r9
 800a70e:	455b      	cmp	r3, fp
 800a710:	dc31      	bgt.n	800a776 <_printf_float+0x36e>
 800a712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a714:	459a      	cmp	sl, r3
 800a716:	dc3a      	bgt.n	800a78e <_printf_float+0x386>
 800a718:	6823      	ldr	r3, [r4, #0]
 800a71a:	07da      	lsls	r2, r3, #31
 800a71c:	d437      	bmi.n	800a78e <_printf_float+0x386>
 800a71e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a720:	ebaa 0903 	sub.w	r9, sl, r3
 800a724:	9b06      	ldr	r3, [sp, #24]
 800a726:	ebaa 0303 	sub.w	r3, sl, r3
 800a72a:	4599      	cmp	r9, r3
 800a72c:	bfa8      	it	ge
 800a72e:	4699      	movge	r9, r3
 800a730:	f1b9 0f00 	cmp.w	r9, #0
 800a734:	dc33      	bgt.n	800a79e <_printf_float+0x396>
 800a736:	f04f 0800 	mov.w	r8, #0
 800a73a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a73e:	f104 0b1a 	add.w	fp, r4, #26
 800a742:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a744:	ebaa 0303 	sub.w	r3, sl, r3
 800a748:	eba3 0309 	sub.w	r3, r3, r9
 800a74c:	4543      	cmp	r3, r8
 800a74e:	f77f af79 	ble.w	800a644 <_printf_float+0x23c>
 800a752:	2301      	movs	r3, #1
 800a754:	465a      	mov	r2, fp
 800a756:	4631      	mov	r1, r6
 800a758:	4628      	mov	r0, r5
 800a75a:	47b8      	blx	r7
 800a75c:	3001      	adds	r0, #1
 800a75e:	f43f aeae 	beq.w	800a4be <_printf_float+0xb6>
 800a762:	f108 0801 	add.w	r8, r8, #1
 800a766:	e7ec      	b.n	800a742 <_printf_float+0x33a>
 800a768:	4642      	mov	r2, r8
 800a76a:	4631      	mov	r1, r6
 800a76c:	4628      	mov	r0, r5
 800a76e:	47b8      	blx	r7
 800a770:	3001      	adds	r0, #1
 800a772:	d1c2      	bne.n	800a6fa <_printf_float+0x2f2>
 800a774:	e6a3      	b.n	800a4be <_printf_float+0xb6>
 800a776:	2301      	movs	r3, #1
 800a778:	4631      	mov	r1, r6
 800a77a:	4628      	mov	r0, r5
 800a77c:	9206      	str	r2, [sp, #24]
 800a77e:	47b8      	blx	r7
 800a780:	3001      	adds	r0, #1
 800a782:	f43f ae9c 	beq.w	800a4be <_printf_float+0xb6>
 800a786:	9a06      	ldr	r2, [sp, #24]
 800a788:	f10b 0b01 	add.w	fp, fp, #1
 800a78c:	e7bb      	b.n	800a706 <_printf_float+0x2fe>
 800a78e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a792:	4631      	mov	r1, r6
 800a794:	4628      	mov	r0, r5
 800a796:	47b8      	blx	r7
 800a798:	3001      	adds	r0, #1
 800a79a:	d1c0      	bne.n	800a71e <_printf_float+0x316>
 800a79c:	e68f      	b.n	800a4be <_printf_float+0xb6>
 800a79e:	9a06      	ldr	r2, [sp, #24]
 800a7a0:	464b      	mov	r3, r9
 800a7a2:	4442      	add	r2, r8
 800a7a4:	4631      	mov	r1, r6
 800a7a6:	4628      	mov	r0, r5
 800a7a8:	47b8      	blx	r7
 800a7aa:	3001      	adds	r0, #1
 800a7ac:	d1c3      	bne.n	800a736 <_printf_float+0x32e>
 800a7ae:	e686      	b.n	800a4be <_printf_float+0xb6>
 800a7b0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a7b4:	f1ba 0f01 	cmp.w	sl, #1
 800a7b8:	dc01      	bgt.n	800a7be <_printf_float+0x3b6>
 800a7ba:	07db      	lsls	r3, r3, #31
 800a7bc:	d536      	bpl.n	800a82c <_printf_float+0x424>
 800a7be:	2301      	movs	r3, #1
 800a7c0:	4642      	mov	r2, r8
 800a7c2:	4631      	mov	r1, r6
 800a7c4:	4628      	mov	r0, r5
 800a7c6:	47b8      	blx	r7
 800a7c8:	3001      	adds	r0, #1
 800a7ca:	f43f ae78 	beq.w	800a4be <_printf_float+0xb6>
 800a7ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7d2:	4631      	mov	r1, r6
 800a7d4:	4628      	mov	r0, r5
 800a7d6:	47b8      	blx	r7
 800a7d8:	3001      	adds	r0, #1
 800a7da:	f43f ae70 	beq.w	800a4be <_printf_float+0xb6>
 800a7de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a7ea:	f7f6 f97d 	bl	8000ae8 <__aeabi_dcmpeq>
 800a7ee:	b9c0      	cbnz	r0, 800a822 <_printf_float+0x41a>
 800a7f0:	4653      	mov	r3, sl
 800a7f2:	f108 0201 	add.w	r2, r8, #1
 800a7f6:	4631      	mov	r1, r6
 800a7f8:	4628      	mov	r0, r5
 800a7fa:	47b8      	blx	r7
 800a7fc:	3001      	adds	r0, #1
 800a7fe:	d10c      	bne.n	800a81a <_printf_float+0x412>
 800a800:	e65d      	b.n	800a4be <_printf_float+0xb6>
 800a802:	2301      	movs	r3, #1
 800a804:	465a      	mov	r2, fp
 800a806:	4631      	mov	r1, r6
 800a808:	4628      	mov	r0, r5
 800a80a:	47b8      	blx	r7
 800a80c:	3001      	adds	r0, #1
 800a80e:	f43f ae56 	beq.w	800a4be <_printf_float+0xb6>
 800a812:	f108 0801 	add.w	r8, r8, #1
 800a816:	45d0      	cmp	r8, sl
 800a818:	dbf3      	blt.n	800a802 <_printf_float+0x3fa>
 800a81a:	464b      	mov	r3, r9
 800a81c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a820:	e6df      	b.n	800a5e2 <_printf_float+0x1da>
 800a822:	f04f 0800 	mov.w	r8, #0
 800a826:	f104 0b1a 	add.w	fp, r4, #26
 800a82a:	e7f4      	b.n	800a816 <_printf_float+0x40e>
 800a82c:	2301      	movs	r3, #1
 800a82e:	4642      	mov	r2, r8
 800a830:	e7e1      	b.n	800a7f6 <_printf_float+0x3ee>
 800a832:	2301      	movs	r3, #1
 800a834:	464a      	mov	r2, r9
 800a836:	4631      	mov	r1, r6
 800a838:	4628      	mov	r0, r5
 800a83a:	47b8      	blx	r7
 800a83c:	3001      	adds	r0, #1
 800a83e:	f43f ae3e 	beq.w	800a4be <_printf_float+0xb6>
 800a842:	f108 0801 	add.w	r8, r8, #1
 800a846:	68e3      	ldr	r3, [r4, #12]
 800a848:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a84a:	1a5b      	subs	r3, r3, r1
 800a84c:	4543      	cmp	r3, r8
 800a84e:	dcf0      	bgt.n	800a832 <_printf_float+0x42a>
 800a850:	e6fc      	b.n	800a64c <_printf_float+0x244>
 800a852:	f04f 0800 	mov.w	r8, #0
 800a856:	f104 0919 	add.w	r9, r4, #25
 800a85a:	e7f4      	b.n	800a846 <_printf_float+0x43e>

0800a85c <_printf_common>:
 800a85c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a860:	4616      	mov	r6, r2
 800a862:	4698      	mov	r8, r3
 800a864:	688a      	ldr	r2, [r1, #8]
 800a866:	690b      	ldr	r3, [r1, #16]
 800a868:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a86c:	4293      	cmp	r3, r2
 800a86e:	bfb8      	it	lt
 800a870:	4613      	movlt	r3, r2
 800a872:	6033      	str	r3, [r6, #0]
 800a874:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a878:	4607      	mov	r7, r0
 800a87a:	460c      	mov	r4, r1
 800a87c:	b10a      	cbz	r2, 800a882 <_printf_common+0x26>
 800a87e:	3301      	adds	r3, #1
 800a880:	6033      	str	r3, [r6, #0]
 800a882:	6823      	ldr	r3, [r4, #0]
 800a884:	0699      	lsls	r1, r3, #26
 800a886:	bf42      	ittt	mi
 800a888:	6833      	ldrmi	r3, [r6, #0]
 800a88a:	3302      	addmi	r3, #2
 800a88c:	6033      	strmi	r3, [r6, #0]
 800a88e:	6825      	ldr	r5, [r4, #0]
 800a890:	f015 0506 	ands.w	r5, r5, #6
 800a894:	d106      	bne.n	800a8a4 <_printf_common+0x48>
 800a896:	f104 0a19 	add.w	sl, r4, #25
 800a89a:	68e3      	ldr	r3, [r4, #12]
 800a89c:	6832      	ldr	r2, [r6, #0]
 800a89e:	1a9b      	subs	r3, r3, r2
 800a8a0:	42ab      	cmp	r3, r5
 800a8a2:	dc26      	bgt.n	800a8f2 <_printf_common+0x96>
 800a8a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a8a8:	6822      	ldr	r2, [r4, #0]
 800a8aa:	3b00      	subs	r3, #0
 800a8ac:	bf18      	it	ne
 800a8ae:	2301      	movne	r3, #1
 800a8b0:	0692      	lsls	r2, r2, #26
 800a8b2:	d42b      	bmi.n	800a90c <_printf_common+0xb0>
 800a8b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a8b8:	4641      	mov	r1, r8
 800a8ba:	4638      	mov	r0, r7
 800a8bc:	47c8      	blx	r9
 800a8be:	3001      	adds	r0, #1
 800a8c0:	d01e      	beq.n	800a900 <_printf_common+0xa4>
 800a8c2:	6823      	ldr	r3, [r4, #0]
 800a8c4:	6922      	ldr	r2, [r4, #16]
 800a8c6:	f003 0306 	and.w	r3, r3, #6
 800a8ca:	2b04      	cmp	r3, #4
 800a8cc:	bf02      	ittt	eq
 800a8ce:	68e5      	ldreq	r5, [r4, #12]
 800a8d0:	6833      	ldreq	r3, [r6, #0]
 800a8d2:	1aed      	subeq	r5, r5, r3
 800a8d4:	68a3      	ldr	r3, [r4, #8]
 800a8d6:	bf0c      	ite	eq
 800a8d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a8dc:	2500      	movne	r5, #0
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	bfc4      	itt	gt
 800a8e2:	1a9b      	subgt	r3, r3, r2
 800a8e4:	18ed      	addgt	r5, r5, r3
 800a8e6:	2600      	movs	r6, #0
 800a8e8:	341a      	adds	r4, #26
 800a8ea:	42b5      	cmp	r5, r6
 800a8ec:	d11a      	bne.n	800a924 <_printf_common+0xc8>
 800a8ee:	2000      	movs	r0, #0
 800a8f0:	e008      	b.n	800a904 <_printf_common+0xa8>
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	4652      	mov	r2, sl
 800a8f6:	4641      	mov	r1, r8
 800a8f8:	4638      	mov	r0, r7
 800a8fa:	47c8      	blx	r9
 800a8fc:	3001      	adds	r0, #1
 800a8fe:	d103      	bne.n	800a908 <_printf_common+0xac>
 800a900:	f04f 30ff 	mov.w	r0, #4294967295
 800a904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a908:	3501      	adds	r5, #1
 800a90a:	e7c6      	b.n	800a89a <_printf_common+0x3e>
 800a90c:	18e1      	adds	r1, r4, r3
 800a90e:	1c5a      	adds	r2, r3, #1
 800a910:	2030      	movs	r0, #48	@ 0x30
 800a912:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a916:	4422      	add	r2, r4
 800a918:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a91c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a920:	3302      	adds	r3, #2
 800a922:	e7c7      	b.n	800a8b4 <_printf_common+0x58>
 800a924:	2301      	movs	r3, #1
 800a926:	4622      	mov	r2, r4
 800a928:	4641      	mov	r1, r8
 800a92a:	4638      	mov	r0, r7
 800a92c:	47c8      	blx	r9
 800a92e:	3001      	adds	r0, #1
 800a930:	d0e6      	beq.n	800a900 <_printf_common+0xa4>
 800a932:	3601      	adds	r6, #1
 800a934:	e7d9      	b.n	800a8ea <_printf_common+0x8e>
	...

0800a938 <_printf_i>:
 800a938:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a93c:	7e0f      	ldrb	r7, [r1, #24]
 800a93e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a940:	2f78      	cmp	r7, #120	@ 0x78
 800a942:	4691      	mov	r9, r2
 800a944:	4680      	mov	r8, r0
 800a946:	460c      	mov	r4, r1
 800a948:	469a      	mov	sl, r3
 800a94a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a94e:	d807      	bhi.n	800a960 <_printf_i+0x28>
 800a950:	2f62      	cmp	r7, #98	@ 0x62
 800a952:	d80a      	bhi.n	800a96a <_printf_i+0x32>
 800a954:	2f00      	cmp	r7, #0
 800a956:	f000 80d2 	beq.w	800aafe <_printf_i+0x1c6>
 800a95a:	2f58      	cmp	r7, #88	@ 0x58
 800a95c:	f000 80b9 	beq.w	800aad2 <_printf_i+0x19a>
 800a960:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a964:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a968:	e03a      	b.n	800a9e0 <_printf_i+0xa8>
 800a96a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a96e:	2b15      	cmp	r3, #21
 800a970:	d8f6      	bhi.n	800a960 <_printf_i+0x28>
 800a972:	a101      	add	r1, pc, #4	@ (adr r1, 800a978 <_printf_i+0x40>)
 800a974:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a978:	0800a9d1 	.word	0x0800a9d1
 800a97c:	0800a9e5 	.word	0x0800a9e5
 800a980:	0800a961 	.word	0x0800a961
 800a984:	0800a961 	.word	0x0800a961
 800a988:	0800a961 	.word	0x0800a961
 800a98c:	0800a961 	.word	0x0800a961
 800a990:	0800a9e5 	.word	0x0800a9e5
 800a994:	0800a961 	.word	0x0800a961
 800a998:	0800a961 	.word	0x0800a961
 800a99c:	0800a961 	.word	0x0800a961
 800a9a0:	0800a961 	.word	0x0800a961
 800a9a4:	0800aae5 	.word	0x0800aae5
 800a9a8:	0800aa0f 	.word	0x0800aa0f
 800a9ac:	0800aa9f 	.word	0x0800aa9f
 800a9b0:	0800a961 	.word	0x0800a961
 800a9b4:	0800a961 	.word	0x0800a961
 800a9b8:	0800ab07 	.word	0x0800ab07
 800a9bc:	0800a961 	.word	0x0800a961
 800a9c0:	0800aa0f 	.word	0x0800aa0f
 800a9c4:	0800a961 	.word	0x0800a961
 800a9c8:	0800a961 	.word	0x0800a961
 800a9cc:	0800aaa7 	.word	0x0800aaa7
 800a9d0:	6833      	ldr	r3, [r6, #0]
 800a9d2:	1d1a      	adds	r2, r3, #4
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	6032      	str	r2, [r6, #0]
 800a9d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a9dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	e09d      	b.n	800ab20 <_printf_i+0x1e8>
 800a9e4:	6833      	ldr	r3, [r6, #0]
 800a9e6:	6820      	ldr	r0, [r4, #0]
 800a9e8:	1d19      	adds	r1, r3, #4
 800a9ea:	6031      	str	r1, [r6, #0]
 800a9ec:	0606      	lsls	r6, r0, #24
 800a9ee:	d501      	bpl.n	800a9f4 <_printf_i+0xbc>
 800a9f0:	681d      	ldr	r5, [r3, #0]
 800a9f2:	e003      	b.n	800a9fc <_printf_i+0xc4>
 800a9f4:	0645      	lsls	r5, r0, #25
 800a9f6:	d5fb      	bpl.n	800a9f0 <_printf_i+0xb8>
 800a9f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a9fc:	2d00      	cmp	r5, #0
 800a9fe:	da03      	bge.n	800aa08 <_printf_i+0xd0>
 800aa00:	232d      	movs	r3, #45	@ 0x2d
 800aa02:	426d      	negs	r5, r5
 800aa04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa08:	4859      	ldr	r0, [pc, #356]	@ (800ab70 <_printf_i+0x238>)
 800aa0a:	230a      	movs	r3, #10
 800aa0c:	e011      	b.n	800aa32 <_printf_i+0xfa>
 800aa0e:	6821      	ldr	r1, [r4, #0]
 800aa10:	6833      	ldr	r3, [r6, #0]
 800aa12:	0608      	lsls	r0, r1, #24
 800aa14:	f853 5b04 	ldr.w	r5, [r3], #4
 800aa18:	d402      	bmi.n	800aa20 <_printf_i+0xe8>
 800aa1a:	0649      	lsls	r1, r1, #25
 800aa1c:	bf48      	it	mi
 800aa1e:	b2ad      	uxthmi	r5, r5
 800aa20:	2f6f      	cmp	r7, #111	@ 0x6f
 800aa22:	4853      	ldr	r0, [pc, #332]	@ (800ab70 <_printf_i+0x238>)
 800aa24:	6033      	str	r3, [r6, #0]
 800aa26:	bf14      	ite	ne
 800aa28:	230a      	movne	r3, #10
 800aa2a:	2308      	moveq	r3, #8
 800aa2c:	2100      	movs	r1, #0
 800aa2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aa32:	6866      	ldr	r6, [r4, #4]
 800aa34:	60a6      	str	r6, [r4, #8]
 800aa36:	2e00      	cmp	r6, #0
 800aa38:	bfa2      	ittt	ge
 800aa3a:	6821      	ldrge	r1, [r4, #0]
 800aa3c:	f021 0104 	bicge.w	r1, r1, #4
 800aa40:	6021      	strge	r1, [r4, #0]
 800aa42:	b90d      	cbnz	r5, 800aa48 <_printf_i+0x110>
 800aa44:	2e00      	cmp	r6, #0
 800aa46:	d04b      	beq.n	800aae0 <_printf_i+0x1a8>
 800aa48:	4616      	mov	r6, r2
 800aa4a:	fbb5 f1f3 	udiv	r1, r5, r3
 800aa4e:	fb03 5711 	mls	r7, r3, r1, r5
 800aa52:	5dc7      	ldrb	r7, [r0, r7]
 800aa54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aa58:	462f      	mov	r7, r5
 800aa5a:	42bb      	cmp	r3, r7
 800aa5c:	460d      	mov	r5, r1
 800aa5e:	d9f4      	bls.n	800aa4a <_printf_i+0x112>
 800aa60:	2b08      	cmp	r3, #8
 800aa62:	d10b      	bne.n	800aa7c <_printf_i+0x144>
 800aa64:	6823      	ldr	r3, [r4, #0]
 800aa66:	07df      	lsls	r7, r3, #31
 800aa68:	d508      	bpl.n	800aa7c <_printf_i+0x144>
 800aa6a:	6923      	ldr	r3, [r4, #16]
 800aa6c:	6861      	ldr	r1, [r4, #4]
 800aa6e:	4299      	cmp	r1, r3
 800aa70:	bfde      	ittt	le
 800aa72:	2330      	movle	r3, #48	@ 0x30
 800aa74:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aa78:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aa7c:	1b92      	subs	r2, r2, r6
 800aa7e:	6122      	str	r2, [r4, #16]
 800aa80:	f8cd a000 	str.w	sl, [sp]
 800aa84:	464b      	mov	r3, r9
 800aa86:	aa03      	add	r2, sp, #12
 800aa88:	4621      	mov	r1, r4
 800aa8a:	4640      	mov	r0, r8
 800aa8c:	f7ff fee6 	bl	800a85c <_printf_common>
 800aa90:	3001      	adds	r0, #1
 800aa92:	d14a      	bne.n	800ab2a <_printf_i+0x1f2>
 800aa94:	f04f 30ff 	mov.w	r0, #4294967295
 800aa98:	b004      	add	sp, #16
 800aa9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa9e:	6823      	ldr	r3, [r4, #0]
 800aaa0:	f043 0320 	orr.w	r3, r3, #32
 800aaa4:	6023      	str	r3, [r4, #0]
 800aaa6:	4833      	ldr	r0, [pc, #204]	@ (800ab74 <_printf_i+0x23c>)
 800aaa8:	2778      	movs	r7, #120	@ 0x78
 800aaaa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aaae:	6823      	ldr	r3, [r4, #0]
 800aab0:	6831      	ldr	r1, [r6, #0]
 800aab2:	061f      	lsls	r7, r3, #24
 800aab4:	f851 5b04 	ldr.w	r5, [r1], #4
 800aab8:	d402      	bmi.n	800aac0 <_printf_i+0x188>
 800aaba:	065f      	lsls	r7, r3, #25
 800aabc:	bf48      	it	mi
 800aabe:	b2ad      	uxthmi	r5, r5
 800aac0:	6031      	str	r1, [r6, #0]
 800aac2:	07d9      	lsls	r1, r3, #31
 800aac4:	bf44      	itt	mi
 800aac6:	f043 0320 	orrmi.w	r3, r3, #32
 800aaca:	6023      	strmi	r3, [r4, #0]
 800aacc:	b11d      	cbz	r5, 800aad6 <_printf_i+0x19e>
 800aace:	2310      	movs	r3, #16
 800aad0:	e7ac      	b.n	800aa2c <_printf_i+0xf4>
 800aad2:	4827      	ldr	r0, [pc, #156]	@ (800ab70 <_printf_i+0x238>)
 800aad4:	e7e9      	b.n	800aaaa <_printf_i+0x172>
 800aad6:	6823      	ldr	r3, [r4, #0]
 800aad8:	f023 0320 	bic.w	r3, r3, #32
 800aadc:	6023      	str	r3, [r4, #0]
 800aade:	e7f6      	b.n	800aace <_printf_i+0x196>
 800aae0:	4616      	mov	r6, r2
 800aae2:	e7bd      	b.n	800aa60 <_printf_i+0x128>
 800aae4:	6833      	ldr	r3, [r6, #0]
 800aae6:	6825      	ldr	r5, [r4, #0]
 800aae8:	6961      	ldr	r1, [r4, #20]
 800aaea:	1d18      	adds	r0, r3, #4
 800aaec:	6030      	str	r0, [r6, #0]
 800aaee:	062e      	lsls	r6, r5, #24
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	d501      	bpl.n	800aaf8 <_printf_i+0x1c0>
 800aaf4:	6019      	str	r1, [r3, #0]
 800aaf6:	e002      	b.n	800aafe <_printf_i+0x1c6>
 800aaf8:	0668      	lsls	r0, r5, #25
 800aafa:	d5fb      	bpl.n	800aaf4 <_printf_i+0x1bc>
 800aafc:	8019      	strh	r1, [r3, #0]
 800aafe:	2300      	movs	r3, #0
 800ab00:	6123      	str	r3, [r4, #16]
 800ab02:	4616      	mov	r6, r2
 800ab04:	e7bc      	b.n	800aa80 <_printf_i+0x148>
 800ab06:	6833      	ldr	r3, [r6, #0]
 800ab08:	1d1a      	adds	r2, r3, #4
 800ab0a:	6032      	str	r2, [r6, #0]
 800ab0c:	681e      	ldr	r6, [r3, #0]
 800ab0e:	6862      	ldr	r2, [r4, #4]
 800ab10:	2100      	movs	r1, #0
 800ab12:	4630      	mov	r0, r6
 800ab14:	f7f5 fb6c 	bl	80001f0 <memchr>
 800ab18:	b108      	cbz	r0, 800ab1e <_printf_i+0x1e6>
 800ab1a:	1b80      	subs	r0, r0, r6
 800ab1c:	6060      	str	r0, [r4, #4]
 800ab1e:	6863      	ldr	r3, [r4, #4]
 800ab20:	6123      	str	r3, [r4, #16]
 800ab22:	2300      	movs	r3, #0
 800ab24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab28:	e7aa      	b.n	800aa80 <_printf_i+0x148>
 800ab2a:	6923      	ldr	r3, [r4, #16]
 800ab2c:	4632      	mov	r2, r6
 800ab2e:	4649      	mov	r1, r9
 800ab30:	4640      	mov	r0, r8
 800ab32:	47d0      	blx	sl
 800ab34:	3001      	adds	r0, #1
 800ab36:	d0ad      	beq.n	800aa94 <_printf_i+0x15c>
 800ab38:	6823      	ldr	r3, [r4, #0]
 800ab3a:	079b      	lsls	r3, r3, #30
 800ab3c:	d413      	bmi.n	800ab66 <_printf_i+0x22e>
 800ab3e:	68e0      	ldr	r0, [r4, #12]
 800ab40:	9b03      	ldr	r3, [sp, #12]
 800ab42:	4298      	cmp	r0, r3
 800ab44:	bfb8      	it	lt
 800ab46:	4618      	movlt	r0, r3
 800ab48:	e7a6      	b.n	800aa98 <_printf_i+0x160>
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	4632      	mov	r2, r6
 800ab4e:	4649      	mov	r1, r9
 800ab50:	4640      	mov	r0, r8
 800ab52:	47d0      	blx	sl
 800ab54:	3001      	adds	r0, #1
 800ab56:	d09d      	beq.n	800aa94 <_printf_i+0x15c>
 800ab58:	3501      	adds	r5, #1
 800ab5a:	68e3      	ldr	r3, [r4, #12]
 800ab5c:	9903      	ldr	r1, [sp, #12]
 800ab5e:	1a5b      	subs	r3, r3, r1
 800ab60:	42ab      	cmp	r3, r5
 800ab62:	dcf2      	bgt.n	800ab4a <_printf_i+0x212>
 800ab64:	e7eb      	b.n	800ab3e <_printf_i+0x206>
 800ab66:	2500      	movs	r5, #0
 800ab68:	f104 0619 	add.w	r6, r4, #25
 800ab6c:	e7f5      	b.n	800ab5a <_printf_i+0x222>
 800ab6e:	bf00      	nop
 800ab70:	0801135e 	.word	0x0801135e
 800ab74:	0801136f 	.word	0x0801136f

0800ab78 <std>:
 800ab78:	2300      	movs	r3, #0
 800ab7a:	b510      	push	{r4, lr}
 800ab7c:	4604      	mov	r4, r0
 800ab7e:	e9c0 3300 	strd	r3, r3, [r0]
 800ab82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab86:	6083      	str	r3, [r0, #8]
 800ab88:	8181      	strh	r1, [r0, #12]
 800ab8a:	6643      	str	r3, [r0, #100]	@ 0x64
 800ab8c:	81c2      	strh	r2, [r0, #14]
 800ab8e:	6183      	str	r3, [r0, #24]
 800ab90:	4619      	mov	r1, r3
 800ab92:	2208      	movs	r2, #8
 800ab94:	305c      	adds	r0, #92	@ 0x5c
 800ab96:	f000 f914 	bl	800adc2 <memset>
 800ab9a:	4b0d      	ldr	r3, [pc, #52]	@ (800abd0 <std+0x58>)
 800ab9c:	6263      	str	r3, [r4, #36]	@ 0x24
 800ab9e:	4b0d      	ldr	r3, [pc, #52]	@ (800abd4 <std+0x5c>)
 800aba0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aba2:	4b0d      	ldr	r3, [pc, #52]	@ (800abd8 <std+0x60>)
 800aba4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aba6:	4b0d      	ldr	r3, [pc, #52]	@ (800abdc <std+0x64>)
 800aba8:	6323      	str	r3, [r4, #48]	@ 0x30
 800abaa:	4b0d      	ldr	r3, [pc, #52]	@ (800abe0 <std+0x68>)
 800abac:	6224      	str	r4, [r4, #32]
 800abae:	429c      	cmp	r4, r3
 800abb0:	d006      	beq.n	800abc0 <std+0x48>
 800abb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800abb6:	4294      	cmp	r4, r2
 800abb8:	d002      	beq.n	800abc0 <std+0x48>
 800abba:	33d0      	adds	r3, #208	@ 0xd0
 800abbc:	429c      	cmp	r4, r3
 800abbe:	d105      	bne.n	800abcc <std+0x54>
 800abc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800abc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abc8:	f000 b988 	b.w	800aedc <__retarget_lock_init_recursive>
 800abcc:	bd10      	pop	{r4, pc}
 800abce:	bf00      	nop
 800abd0:	0800ad3d 	.word	0x0800ad3d
 800abd4:	0800ad5f 	.word	0x0800ad5f
 800abd8:	0800ad97 	.word	0x0800ad97
 800abdc:	0800adbb 	.word	0x0800adbb
 800abe0:	20000b4c 	.word	0x20000b4c

0800abe4 <stdio_exit_handler>:
 800abe4:	4a02      	ldr	r2, [pc, #8]	@ (800abf0 <stdio_exit_handler+0xc>)
 800abe6:	4903      	ldr	r1, [pc, #12]	@ (800abf4 <stdio_exit_handler+0x10>)
 800abe8:	4803      	ldr	r0, [pc, #12]	@ (800abf8 <stdio_exit_handler+0x14>)
 800abea:	f000 b869 	b.w	800acc0 <_fwalk_sglue>
 800abee:	bf00      	nop
 800abf0:	20000164 	.word	0x20000164
 800abf4:	0800c6e9 	.word	0x0800c6e9
 800abf8:	20000174 	.word	0x20000174

0800abfc <cleanup_stdio>:
 800abfc:	6841      	ldr	r1, [r0, #4]
 800abfe:	4b0c      	ldr	r3, [pc, #48]	@ (800ac30 <cleanup_stdio+0x34>)
 800ac00:	4299      	cmp	r1, r3
 800ac02:	b510      	push	{r4, lr}
 800ac04:	4604      	mov	r4, r0
 800ac06:	d001      	beq.n	800ac0c <cleanup_stdio+0x10>
 800ac08:	f001 fd6e 	bl	800c6e8 <_fflush_r>
 800ac0c:	68a1      	ldr	r1, [r4, #8]
 800ac0e:	4b09      	ldr	r3, [pc, #36]	@ (800ac34 <cleanup_stdio+0x38>)
 800ac10:	4299      	cmp	r1, r3
 800ac12:	d002      	beq.n	800ac1a <cleanup_stdio+0x1e>
 800ac14:	4620      	mov	r0, r4
 800ac16:	f001 fd67 	bl	800c6e8 <_fflush_r>
 800ac1a:	68e1      	ldr	r1, [r4, #12]
 800ac1c:	4b06      	ldr	r3, [pc, #24]	@ (800ac38 <cleanup_stdio+0x3c>)
 800ac1e:	4299      	cmp	r1, r3
 800ac20:	d004      	beq.n	800ac2c <cleanup_stdio+0x30>
 800ac22:	4620      	mov	r0, r4
 800ac24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac28:	f001 bd5e 	b.w	800c6e8 <_fflush_r>
 800ac2c:	bd10      	pop	{r4, pc}
 800ac2e:	bf00      	nop
 800ac30:	20000b4c 	.word	0x20000b4c
 800ac34:	20000bb4 	.word	0x20000bb4
 800ac38:	20000c1c 	.word	0x20000c1c

0800ac3c <global_stdio_init.part.0>:
 800ac3c:	b510      	push	{r4, lr}
 800ac3e:	4b0b      	ldr	r3, [pc, #44]	@ (800ac6c <global_stdio_init.part.0+0x30>)
 800ac40:	4c0b      	ldr	r4, [pc, #44]	@ (800ac70 <global_stdio_init.part.0+0x34>)
 800ac42:	4a0c      	ldr	r2, [pc, #48]	@ (800ac74 <global_stdio_init.part.0+0x38>)
 800ac44:	601a      	str	r2, [r3, #0]
 800ac46:	4620      	mov	r0, r4
 800ac48:	2200      	movs	r2, #0
 800ac4a:	2104      	movs	r1, #4
 800ac4c:	f7ff ff94 	bl	800ab78 <std>
 800ac50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ac54:	2201      	movs	r2, #1
 800ac56:	2109      	movs	r1, #9
 800ac58:	f7ff ff8e 	bl	800ab78 <std>
 800ac5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ac60:	2202      	movs	r2, #2
 800ac62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac66:	2112      	movs	r1, #18
 800ac68:	f7ff bf86 	b.w	800ab78 <std>
 800ac6c:	20000c84 	.word	0x20000c84
 800ac70:	20000b4c 	.word	0x20000b4c
 800ac74:	0800abe5 	.word	0x0800abe5

0800ac78 <__sfp_lock_acquire>:
 800ac78:	4801      	ldr	r0, [pc, #4]	@ (800ac80 <__sfp_lock_acquire+0x8>)
 800ac7a:	f000 b930 	b.w	800aede <__retarget_lock_acquire_recursive>
 800ac7e:	bf00      	nop
 800ac80:	20000c8d 	.word	0x20000c8d

0800ac84 <__sfp_lock_release>:
 800ac84:	4801      	ldr	r0, [pc, #4]	@ (800ac8c <__sfp_lock_release+0x8>)
 800ac86:	f000 b92b 	b.w	800aee0 <__retarget_lock_release_recursive>
 800ac8a:	bf00      	nop
 800ac8c:	20000c8d 	.word	0x20000c8d

0800ac90 <__sinit>:
 800ac90:	b510      	push	{r4, lr}
 800ac92:	4604      	mov	r4, r0
 800ac94:	f7ff fff0 	bl	800ac78 <__sfp_lock_acquire>
 800ac98:	6a23      	ldr	r3, [r4, #32]
 800ac9a:	b11b      	cbz	r3, 800aca4 <__sinit+0x14>
 800ac9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aca0:	f7ff bff0 	b.w	800ac84 <__sfp_lock_release>
 800aca4:	4b04      	ldr	r3, [pc, #16]	@ (800acb8 <__sinit+0x28>)
 800aca6:	6223      	str	r3, [r4, #32]
 800aca8:	4b04      	ldr	r3, [pc, #16]	@ (800acbc <__sinit+0x2c>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d1f5      	bne.n	800ac9c <__sinit+0xc>
 800acb0:	f7ff ffc4 	bl	800ac3c <global_stdio_init.part.0>
 800acb4:	e7f2      	b.n	800ac9c <__sinit+0xc>
 800acb6:	bf00      	nop
 800acb8:	0800abfd 	.word	0x0800abfd
 800acbc:	20000c84 	.word	0x20000c84

0800acc0 <_fwalk_sglue>:
 800acc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acc4:	4607      	mov	r7, r0
 800acc6:	4688      	mov	r8, r1
 800acc8:	4614      	mov	r4, r2
 800acca:	2600      	movs	r6, #0
 800accc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800acd0:	f1b9 0901 	subs.w	r9, r9, #1
 800acd4:	d505      	bpl.n	800ace2 <_fwalk_sglue+0x22>
 800acd6:	6824      	ldr	r4, [r4, #0]
 800acd8:	2c00      	cmp	r4, #0
 800acda:	d1f7      	bne.n	800accc <_fwalk_sglue+0xc>
 800acdc:	4630      	mov	r0, r6
 800acde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ace2:	89ab      	ldrh	r3, [r5, #12]
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d907      	bls.n	800acf8 <_fwalk_sglue+0x38>
 800ace8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800acec:	3301      	adds	r3, #1
 800acee:	d003      	beq.n	800acf8 <_fwalk_sglue+0x38>
 800acf0:	4629      	mov	r1, r5
 800acf2:	4638      	mov	r0, r7
 800acf4:	47c0      	blx	r8
 800acf6:	4306      	orrs	r6, r0
 800acf8:	3568      	adds	r5, #104	@ 0x68
 800acfa:	e7e9      	b.n	800acd0 <_fwalk_sglue+0x10>

0800acfc <siprintf>:
 800acfc:	b40e      	push	{r1, r2, r3}
 800acfe:	b500      	push	{lr}
 800ad00:	b09c      	sub	sp, #112	@ 0x70
 800ad02:	ab1d      	add	r3, sp, #116	@ 0x74
 800ad04:	9002      	str	r0, [sp, #8]
 800ad06:	9006      	str	r0, [sp, #24]
 800ad08:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ad0c:	4809      	ldr	r0, [pc, #36]	@ (800ad34 <siprintf+0x38>)
 800ad0e:	9107      	str	r1, [sp, #28]
 800ad10:	9104      	str	r1, [sp, #16]
 800ad12:	4909      	ldr	r1, [pc, #36]	@ (800ad38 <siprintf+0x3c>)
 800ad14:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad18:	9105      	str	r1, [sp, #20]
 800ad1a:	6800      	ldr	r0, [r0, #0]
 800ad1c:	9301      	str	r3, [sp, #4]
 800ad1e:	a902      	add	r1, sp, #8
 800ad20:	f001 fb62 	bl	800c3e8 <_svfiprintf_r>
 800ad24:	9b02      	ldr	r3, [sp, #8]
 800ad26:	2200      	movs	r2, #0
 800ad28:	701a      	strb	r2, [r3, #0]
 800ad2a:	b01c      	add	sp, #112	@ 0x70
 800ad2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad30:	b003      	add	sp, #12
 800ad32:	4770      	bx	lr
 800ad34:	20000170 	.word	0x20000170
 800ad38:	ffff0208 	.word	0xffff0208

0800ad3c <__sread>:
 800ad3c:	b510      	push	{r4, lr}
 800ad3e:	460c      	mov	r4, r1
 800ad40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad44:	f000 f86c 	bl	800ae20 <_read_r>
 800ad48:	2800      	cmp	r0, #0
 800ad4a:	bfab      	itete	ge
 800ad4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ad4e:	89a3      	ldrhlt	r3, [r4, #12]
 800ad50:	181b      	addge	r3, r3, r0
 800ad52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ad56:	bfac      	ite	ge
 800ad58:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ad5a:	81a3      	strhlt	r3, [r4, #12]
 800ad5c:	bd10      	pop	{r4, pc}

0800ad5e <__swrite>:
 800ad5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad62:	461f      	mov	r7, r3
 800ad64:	898b      	ldrh	r3, [r1, #12]
 800ad66:	05db      	lsls	r3, r3, #23
 800ad68:	4605      	mov	r5, r0
 800ad6a:	460c      	mov	r4, r1
 800ad6c:	4616      	mov	r6, r2
 800ad6e:	d505      	bpl.n	800ad7c <__swrite+0x1e>
 800ad70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad74:	2302      	movs	r3, #2
 800ad76:	2200      	movs	r2, #0
 800ad78:	f000 f840 	bl	800adfc <_lseek_r>
 800ad7c:	89a3      	ldrh	r3, [r4, #12]
 800ad7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ad86:	81a3      	strh	r3, [r4, #12]
 800ad88:	4632      	mov	r2, r6
 800ad8a:	463b      	mov	r3, r7
 800ad8c:	4628      	mov	r0, r5
 800ad8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad92:	f000 b867 	b.w	800ae64 <_write_r>

0800ad96 <__sseek>:
 800ad96:	b510      	push	{r4, lr}
 800ad98:	460c      	mov	r4, r1
 800ad9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad9e:	f000 f82d 	bl	800adfc <_lseek_r>
 800ada2:	1c43      	adds	r3, r0, #1
 800ada4:	89a3      	ldrh	r3, [r4, #12]
 800ada6:	bf15      	itete	ne
 800ada8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800adaa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800adae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800adb2:	81a3      	strheq	r3, [r4, #12]
 800adb4:	bf18      	it	ne
 800adb6:	81a3      	strhne	r3, [r4, #12]
 800adb8:	bd10      	pop	{r4, pc}

0800adba <__sclose>:
 800adba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adbe:	f000 b80d 	b.w	800addc <_close_r>

0800adc2 <memset>:
 800adc2:	4402      	add	r2, r0
 800adc4:	4603      	mov	r3, r0
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d100      	bne.n	800adcc <memset+0xa>
 800adca:	4770      	bx	lr
 800adcc:	f803 1b01 	strb.w	r1, [r3], #1
 800add0:	e7f9      	b.n	800adc6 <memset+0x4>
	...

0800add4 <_localeconv_r>:
 800add4:	4800      	ldr	r0, [pc, #0]	@ (800add8 <_localeconv_r+0x4>)
 800add6:	4770      	bx	lr
 800add8:	200002b0 	.word	0x200002b0

0800addc <_close_r>:
 800addc:	b538      	push	{r3, r4, r5, lr}
 800adde:	4d06      	ldr	r5, [pc, #24]	@ (800adf8 <_close_r+0x1c>)
 800ade0:	2300      	movs	r3, #0
 800ade2:	4604      	mov	r4, r0
 800ade4:	4608      	mov	r0, r1
 800ade6:	602b      	str	r3, [r5, #0]
 800ade8:	f7f9 ffce 	bl	8004d88 <_close>
 800adec:	1c43      	adds	r3, r0, #1
 800adee:	d102      	bne.n	800adf6 <_close_r+0x1a>
 800adf0:	682b      	ldr	r3, [r5, #0]
 800adf2:	b103      	cbz	r3, 800adf6 <_close_r+0x1a>
 800adf4:	6023      	str	r3, [r4, #0]
 800adf6:	bd38      	pop	{r3, r4, r5, pc}
 800adf8:	20000c88 	.word	0x20000c88

0800adfc <_lseek_r>:
 800adfc:	b538      	push	{r3, r4, r5, lr}
 800adfe:	4d07      	ldr	r5, [pc, #28]	@ (800ae1c <_lseek_r+0x20>)
 800ae00:	4604      	mov	r4, r0
 800ae02:	4608      	mov	r0, r1
 800ae04:	4611      	mov	r1, r2
 800ae06:	2200      	movs	r2, #0
 800ae08:	602a      	str	r2, [r5, #0]
 800ae0a:	461a      	mov	r2, r3
 800ae0c:	f7f9 ffe3 	bl	8004dd6 <_lseek>
 800ae10:	1c43      	adds	r3, r0, #1
 800ae12:	d102      	bne.n	800ae1a <_lseek_r+0x1e>
 800ae14:	682b      	ldr	r3, [r5, #0]
 800ae16:	b103      	cbz	r3, 800ae1a <_lseek_r+0x1e>
 800ae18:	6023      	str	r3, [r4, #0]
 800ae1a:	bd38      	pop	{r3, r4, r5, pc}
 800ae1c:	20000c88 	.word	0x20000c88

0800ae20 <_read_r>:
 800ae20:	b538      	push	{r3, r4, r5, lr}
 800ae22:	4d07      	ldr	r5, [pc, #28]	@ (800ae40 <_read_r+0x20>)
 800ae24:	4604      	mov	r4, r0
 800ae26:	4608      	mov	r0, r1
 800ae28:	4611      	mov	r1, r2
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	602a      	str	r2, [r5, #0]
 800ae2e:	461a      	mov	r2, r3
 800ae30:	f7f9 ff71 	bl	8004d16 <_read>
 800ae34:	1c43      	adds	r3, r0, #1
 800ae36:	d102      	bne.n	800ae3e <_read_r+0x1e>
 800ae38:	682b      	ldr	r3, [r5, #0]
 800ae3a:	b103      	cbz	r3, 800ae3e <_read_r+0x1e>
 800ae3c:	6023      	str	r3, [r4, #0]
 800ae3e:	bd38      	pop	{r3, r4, r5, pc}
 800ae40:	20000c88 	.word	0x20000c88

0800ae44 <_sbrk_r>:
 800ae44:	b538      	push	{r3, r4, r5, lr}
 800ae46:	4d06      	ldr	r5, [pc, #24]	@ (800ae60 <_sbrk_r+0x1c>)
 800ae48:	2300      	movs	r3, #0
 800ae4a:	4604      	mov	r4, r0
 800ae4c:	4608      	mov	r0, r1
 800ae4e:	602b      	str	r3, [r5, #0]
 800ae50:	f7f9 ffce 	bl	8004df0 <_sbrk>
 800ae54:	1c43      	adds	r3, r0, #1
 800ae56:	d102      	bne.n	800ae5e <_sbrk_r+0x1a>
 800ae58:	682b      	ldr	r3, [r5, #0]
 800ae5a:	b103      	cbz	r3, 800ae5e <_sbrk_r+0x1a>
 800ae5c:	6023      	str	r3, [r4, #0]
 800ae5e:	bd38      	pop	{r3, r4, r5, pc}
 800ae60:	20000c88 	.word	0x20000c88

0800ae64 <_write_r>:
 800ae64:	b538      	push	{r3, r4, r5, lr}
 800ae66:	4d07      	ldr	r5, [pc, #28]	@ (800ae84 <_write_r+0x20>)
 800ae68:	4604      	mov	r4, r0
 800ae6a:	4608      	mov	r0, r1
 800ae6c:	4611      	mov	r1, r2
 800ae6e:	2200      	movs	r2, #0
 800ae70:	602a      	str	r2, [r5, #0]
 800ae72:	461a      	mov	r2, r3
 800ae74:	f7f9 ff6c 	bl	8004d50 <_write>
 800ae78:	1c43      	adds	r3, r0, #1
 800ae7a:	d102      	bne.n	800ae82 <_write_r+0x1e>
 800ae7c:	682b      	ldr	r3, [r5, #0]
 800ae7e:	b103      	cbz	r3, 800ae82 <_write_r+0x1e>
 800ae80:	6023      	str	r3, [r4, #0]
 800ae82:	bd38      	pop	{r3, r4, r5, pc}
 800ae84:	20000c88 	.word	0x20000c88

0800ae88 <__errno>:
 800ae88:	4b01      	ldr	r3, [pc, #4]	@ (800ae90 <__errno+0x8>)
 800ae8a:	6818      	ldr	r0, [r3, #0]
 800ae8c:	4770      	bx	lr
 800ae8e:	bf00      	nop
 800ae90:	20000170 	.word	0x20000170

0800ae94 <__libc_init_array>:
 800ae94:	b570      	push	{r4, r5, r6, lr}
 800ae96:	4d0d      	ldr	r5, [pc, #52]	@ (800aecc <__libc_init_array+0x38>)
 800ae98:	4c0d      	ldr	r4, [pc, #52]	@ (800aed0 <__libc_init_array+0x3c>)
 800ae9a:	1b64      	subs	r4, r4, r5
 800ae9c:	10a4      	asrs	r4, r4, #2
 800ae9e:	2600      	movs	r6, #0
 800aea0:	42a6      	cmp	r6, r4
 800aea2:	d109      	bne.n	800aeb8 <__libc_init_array+0x24>
 800aea4:	4d0b      	ldr	r5, [pc, #44]	@ (800aed4 <__libc_init_array+0x40>)
 800aea6:	4c0c      	ldr	r4, [pc, #48]	@ (800aed8 <__libc_init_array+0x44>)
 800aea8:	f001 ff9e 	bl	800cde8 <_init>
 800aeac:	1b64      	subs	r4, r4, r5
 800aeae:	10a4      	asrs	r4, r4, #2
 800aeb0:	2600      	movs	r6, #0
 800aeb2:	42a6      	cmp	r6, r4
 800aeb4:	d105      	bne.n	800aec2 <__libc_init_array+0x2e>
 800aeb6:	bd70      	pop	{r4, r5, r6, pc}
 800aeb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800aebc:	4798      	blx	r3
 800aebe:	3601      	adds	r6, #1
 800aec0:	e7ee      	b.n	800aea0 <__libc_init_array+0xc>
 800aec2:	f855 3b04 	ldr.w	r3, [r5], #4
 800aec6:	4798      	blx	r3
 800aec8:	3601      	adds	r6, #1
 800aeca:	e7f2      	b.n	800aeb2 <__libc_init_array+0x1e>
 800aecc:	080116c8 	.word	0x080116c8
 800aed0:	080116c8 	.word	0x080116c8
 800aed4:	080116c8 	.word	0x080116c8
 800aed8:	080116cc 	.word	0x080116cc

0800aedc <__retarget_lock_init_recursive>:
 800aedc:	4770      	bx	lr

0800aede <__retarget_lock_acquire_recursive>:
 800aede:	4770      	bx	lr

0800aee0 <__retarget_lock_release_recursive>:
 800aee0:	4770      	bx	lr

0800aee2 <memcpy>:
 800aee2:	440a      	add	r2, r1
 800aee4:	4291      	cmp	r1, r2
 800aee6:	f100 33ff 	add.w	r3, r0, #4294967295
 800aeea:	d100      	bne.n	800aeee <memcpy+0xc>
 800aeec:	4770      	bx	lr
 800aeee:	b510      	push	{r4, lr}
 800aef0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aef4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aef8:	4291      	cmp	r1, r2
 800aefa:	d1f9      	bne.n	800aef0 <memcpy+0xe>
 800aefc:	bd10      	pop	{r4, pc}

0800aefe <quorem>:
 800aefe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af02:	6903      	ldr	r3, [r0, #16]
 800af04:	690c      	ldr	r4, [r1, #16]
 800af06:	42a3      	cmp	r3, r4
 800af08:	4607      	mov	r7, r0
 800af0a:	db7e      	blt.n	800b00a <quorem+0x10c>
 800af0c:	3c01      	subs	r4, #1
 800af0e:	f101 0814 	add.w	r8, r1, #20
 800af12:	00a3      	lsls	r3, r4, #2
 800af14:	f100 0514 	add.w	r5, r0, #20
 800af18:	9300      	str	r3, [sp, #0]
 800af1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af1e:	9301      	str	r3, [sp, #4]
 800af20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800af24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af28:	3301      	adds	r3, #1
 800af2a:	429a      	cmp	r2, r3
 800af2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800af30:	fbb2 f6f3 	udiv	r6, r2, r3
 800af34:	d32e      	bcc.n	800af94 <quorem+0x96>
 800af36:	f04f 0a00 	mov.w	sl, #0
 800af3a:	46c4      	mov	ip, r8
 800af3c:	46ae      	mov	lr, r5
 800af3e:	46d3      	mov	fp, sl
 800af40:	f85c 3b04 	ldr.w	r3, [ip], #4
 800af44:	b298      	uxth	r0, r3
 800af46:	fb06 a000 	mla	r0, r6, r0, sl
 800af4a:	0c02      	lsrs	r2, r0, #16
 800af4c:	0c1b      	lsrs	r3, r3, #16
 800af4e:	fb06 2303 	mla	r3, r6, r3, r2
 800af52:	f8de 2000 	ldr.w	r2, [lr]
 800af56:	b280      	uxth	r0, r0
 800af58:	b292      	uxth	r2, r2
 800af5a:	1a12      	subs	r2, r2, r0
 800af5c:	445a      	add	r2, fp
 800af5e:	f8de 0000 	ldr.w	r0, [lr]
 800af62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800af66:	b29b      	uxth	r3, r3
 800af68:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800af6c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800af70:	b292      	uxth	r2, r2
 800af72:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800af76:	45e1      	cmp	r9, ip
 800af78:	f84e 2b04 	str.w	r2, [lr], #4
 800af7c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800af80:	d2de      	bcs.n	800af40 <quorem+0x42>
 800af82:	9b00      	ldr	r3, [sp, #0]
 800af84:	58eb      	ldr	r3, [r5, r3]
 800af86:	b92b      	cbnz	r3, 800af94 <quorem+0x96>
 800af88:	9b01      	ldr	r3, [sp, #4]
 800af8a:	3b04      	subs	r3, #4
 800af8c:	429d      	cmp	r5, r3
 800af8e:	461a      	mov	r2, r3
 800af90:	d32f      	bcc.n	800aff2 <quorem+0xf4>
 800af92:	613c      	str	r4, [r7, #16]
 800af94:	4638      	mov	r0, r7
 800af96:	f001 f8c3 	bl	800c120 <__mcmp>
 800af9a:	2800      	cmp	r0, #0
 800af9c:	db25      	blt.n	800afea <quorem+0xec>
 800af9e:	4629      	mov	r1, r5
 800afa0:	2000      	movs	r0, #0
 800afa2:	f858 2b04 	ldr.w	r2, [r8], #4
 800afa6:	f8d1 c000 	ldr.w	ip, [r1]
 800afaa:	fa1f fe82 	uxth.w	lr, r2
 800afae:	fa1f f38c 	uxth.w	r3, ip
 800afb2:	eba3 030e 	sub.w	r3, r3, lr
 800afb6:	4403      	add	r3, r0
 800afb8:	0c12      	lsrs	r2, r2, #16
 800afba:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800afbe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800afc2:	b29b      	uxth	r3, r3
 800afc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800afc8:	45c1      	cmp	r9, r8
 800afca:	f841 3b04 	str.w	r3, [r1], #4
 800afce:	ea4f 4022 	mov.w	r0, r2, asr #16
 800afd2:	d2e6      	bcs.n	800afa2 <quorem+0xa4>
 800afd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800afd8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800afdc:	b922      	cbnz	r2, 800afe8 <quorem+0xea>
 800afde:	3b04      	subs	r3, #4
 800afe0:	429d      	cmp	r5, r3
 800afe2:	461a      	mov	r2, r3
 800afe4:	d30b      	bcc.n	800affe <quorem+0x100>
 800afe6:	613c      	str	r4, [r7, #16]
 800afe8:	3601      	adds	r6, #1
 800afea:	4630      	mov	r0, r6
 800afec:	b003      	add	sp, #12
 800afee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aff2:	6812      	ldr	r2, [r2, #0]
 800aff4:	3b04      	subs	r3, #4
 800aff6:	2a00      	cmp	r2, #0
 800aff8:	d1cb      	bne.n	800af92 <quorem+0x94>
 800affa:	3c01      	subs	r4, #1
 800affc:	e7c6      	b.n	800af8c <quorem+0x8e>
 800affe:	6812      	ldr	r2, [r2, #0]
 800b000:	3b04      	subs	r3, #4
 800b002:	2a00      	cmp	r2, #0
 800b004:	d1ef      	bne.n	800afe6 <quorem+0xe8>
 800b006:	3c01      	subs	r4, #1
 800b008:	e7ea      	b.n	800afe0 <quorem+0xe2>
 800b00a:	2000      	movs	r0, #0
 800b00c:	e7ee      	b.n	800afec <quorem+0xee>
	...

0800b010 <_dtoa_r>:
 800b010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b014:	69c7      	ldr	r7, [r0, #28]
 800b016:	b099      	sub	sp, #100	@ 0x64
 800b018:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b01c:	ec55 4b10 	vmov	r4, r5, d0
 800b020:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b022:	9109      	str	r1, [sp, #36]	@ 0x24
 800b024:	4683      	mov	fp, r0
 800b026:	920e      	str	r2, [sp, #56]	@ 0x38
 800b028:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b02a:	b97f      	cbnz	r7, 800b04c <_dtoa_r+0x3c>
 800b02c:	2010      	movs	r0, #16
 800b02e:	f7ff f895 	bl	800a15c <malloc>
 800b032:	4602      	mov	r2, r0
 800b034:	f8cb 001c 	str.w	r0, [fp, #28]
 800b038:	b920      	cbnz	r0, 800b044 <_dtoa_r+0x34>
 800b03a:	4ba7      	ldr	r3, [pc, #668]	@ (800b2d8 <_dtoa_r+0x2c8>)
 800b03c:	21ef      	movs	r1, #239	@ 0xef
 800b03e:	48a7      	ldr	r0, [pc, #668]	@ (800b2dc <_dtoa_r+0x2cc>)
 800b040:	f001 fb94 	bl	800c76c <__assert_func>
 800b044:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b048:	6007      	str	r7, [r0, #0]
 800b04a:	60c7      	str	r7, [r0, #12]
 800b04c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b050:	6819      	ldr	r1, [r3, #0]
 800b052:	b159      	cbz	r1, 800b06c <_dtoa_r+0x5c>
 800b054:	685a      	ldr	r2, [r3, #4]
 800b056:	604a      	str	r2, [r1, #4]
 800b058:	2301      	movs	r3, #1
 800b05a:	4093      	lsls	r3, r2
 800b05c:	608b      	str	r3, [r1, #8]
 800b05e:	4658      	mov	r0, fp
 800b060:	f000 fe24 	bl	800bcac <_Bfree>
 800b064:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b068:	2200      	movs	r2, #0
 800b06a:	601a      	str	r2, [r3, #0]
 800b06c:	1e2b      	subs	r3, r5, #0
 800b06e:	bfb9      	ittee	lt
 800b070:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b074:	9303      	strlt	r3, [sp, #12]
 800b076:	2300      	movge	r3, #0
 800b078:	6033      	strge	r3, [r6, #0]
 800b07a:	9f03      	ldr	r7, [sp, #12]
 800b07c:	4b98      	ldr	r3, [pc, #608]	@ (800b2e0 <_dtoa_r+0x2d0>)
 800b07e:	bfbc      	itt	lt
 800b080:	2201      	movlt	r2, #1
 800b082:	6032      	strlt	r2, [r6, #0]
 800b084:	43bb      	bics	r3, r7
 800b086:	d112      	bne.n	800b0ae <_dtoa_r+0x9e>
 800b088:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b08a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b08e:	6013      	str	r3, [r2, #0]
 800b090:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b094:	4323      	orrs	r3, r4
 800b096:	f000 854d 	beq.w	800bb34 <_dtoa_r+0xb24>
 800b09a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b09c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b2f4 <_dtoa_r+0x2e4>
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	f000 854f 	beq.w	800bb44 <_dtoa_r+0xb34>
 800b0a6:	f10a 0303 	add.w	r3, sl, #3
 800b0aa:	f000 bd49 	b.w	800bb40 <_dtoa_r+0xb30>
 800b0ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	ec51 0b17 	vmov	r0, r1, d7
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b0be:	f7f5 fd13 	bl	8000ae8 <__aeabi_dcmpeq>
 800b0c2:	4680      	mov	r8, r0
 800b0c4:	b158      	cbz	r0, 800b0de <_dtoa_r+0xce>
 800b0c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	6013      	str	r3, [r2, #0]
 800b0cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b0ce:	b113      	cbz	r3, 800b0d6 <_dtoa_r+0xc6>
 800b0d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b0d2:	4b84      	ldr	r3, [pc, #528]	@ (800b2e4 <_dtoa_r+0x2d4>)
 800b0d4:	6013      	str	r3, [r2, #0]
 800b0d6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b2f8 <_dtoa_r+0x2e8>
 800b0da:	f000 bd33 	b.w	800bb44 <_dtoa_r+0xb34>
 800b0de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b0e2:	aa16      	add	r2, sp, #88	@ 0x58
 800b0e4:	a917      	add	r1, sp, #92	@ 0x5c
 800b0e6:	4658      	mov	r0, fp
 800b0e8:	f001 f8ca 	bl	800c280 <__d2b>
 800b0ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b0f0:	4681      	mov	r9, r0
 800b0f2:	2e00      	cmp	r6, #0
 800b0f4:	d077      	beq.n	800b1e6 <_dtoa_r+0x1d6>
 800b0f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b0f8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b0fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b100:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b104:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b108:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b10c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b110:	4619      	mov	r1, r3
 800b112:	2200      	movs	r2, #0
 800b114:	4b74      	ldr	r3, [pc, #464]	@ (800b2e8 <_dtoa_r+0x2d8>)
 800b116:	f7f5 f8c7 	bl	80002a8 <__aeabi_dsub>
 800b11a:	a369      	add	r3, pc, #420	@ (adr r3, 800b2c0 <_dtoa_r+0x2b0>)
 800b11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b120:	f7f5 fa7a 	bl	8000618 <__aeabi_dmul>
 800b124:	a368      	add	r3, pc, #416	@ (adr r3, 800b2c8 <_dtoa_r+0x2b8>)
 800b126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b12a:	f7f5 f8bf 	bl	80002ac <__adddf3>
 800b12e:	4604      	mov	r4, r0
 800b130:	4630      	mov	r0, r6
 800b132:	460d      	mov	r5, r1
 800b134:	f7f5 fa06 	bl	8000544 <__aeabi_i2d>
 800b138:	a365      	add	r3, pc, #404	@ (adr r3, 800b2d0 <_dtoa_r+0x2c0>)
 800b13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13e:	f7f5 fa6b 	bl	8000618 <__aeabi_dmul>
 800b142:	4602      	mov	r2, r0
 800b144:	460b      	mov	r3, r1
 800b146:	4620      	mov	r0, r4
 800b148:	4629      	mov	r1, r5
 800b14a:	f7f5 f8af 	bl	80002ac <__adddf3>
 800b14e:	4604      	mov	r4, r0
 800b150:	460d      	mov	r5, r1
 800b152:	f7f5 fd11 	bl	8000b78 <__aeabi_d2iz>
 800b156:	2200      	movs	r2, #0
 800b158:	4607      	mov	r7, r0
 800b15a:	2300      	movs	r3, #0
 800b15c:	4620      	mov	r0, r4
 800b15e:	4629      	mov	r1, r5
 800b160:	f7f5 fccc 	bl	8000afc <__aeabi_dcmplt>
 800b164:	b140      	cbz	r0, 800b178 <_dtoa_r+0x168>
 800b166:	4638      	mov	r0, r7
 800b168:	f7f5 f9ec 	bl	8000544 <__aeabi_i2d>
 800b16c:	4622      	mov	r2, r4
 800b16e:	462b      	mov	r3, r5
 800b170:	f7f5 fcba 	bl	8000ae8 <__aeabi_dcmpeq>
 800b174:	b900      	cbnz	r0, 800b178 <_dtoa_r+0x168>
 800b176:	3f01      	subs	r7, #1
 800b178:	2f16      	cmp	r7, #22
 800b17a:	d851      	bhi.n	800b220 <_dtoa_r+0x210>
 800b17c:	4b5b      	ldr	r3, [pc, #364]	@ (800b2ec <_dtoa_r+0x2dc>)
 800b17e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b186:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b18a:	f7f5 fcb7 	bl	8000afc <__aeabi_dcmplt>
 800b18e:	2800      	cmp	r0, #0
 800b190:	d048      	beq.n	800b224 <_dtoa_r+0x214>
 800b192:	3f01      	subs	r7, #1
 800b194:	2300      	movs	r3, #0
 800b196:	9312      	str	r3, [sp, #72]	@ 0x48
 800b198:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b19a:	1b9b      	subs	r3, r3, r6
 800b19c:	1e5a      	subs	r2, r3, #1
 800b19e:	bf44      	itt	mi
 800b1a0:	f1c3 0801 	rsbmi	r8, r3, #1
 800b1a4:	2300      	movmi	r3, #0
 800b1a6:	9208      	str	r2, [sp, #32]
 800b1a8:	bf54      	ite	pl
 800b1aa:	f04f 0800 	movpl.w	r8, #0
 800b1ae:	9308      	strmi	r3, [sp, #32]
 800b1b0:	2f00      	cmp	r7, #0
 800b1b2:	db39      	blt.n	800b228 <_dtoa_r+0x218>
 800b1b4:	9b08      	ldr	r3, [sp, #32]
 800b1b6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b1b8:	443b      	add	r3, r7
 800b1ba:	9308      	str	r3, [sp, #32]
 800b1bc:	2300      	movs	r3, #0
 800b1be:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1c2:	2b09      	cmp	r3, #9
 800b1c4:	d864      	bhi.n	800b290 <_dtoa_r+0x280>
 800b1c6:	2b05      	cmp	r3, #5
 800b1c8:	bfc4      	itt	gt
 800b1ca:	3b04      	subgt	r3, #4
 800b1cc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b1ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1d0:	f1a3 0302 	sub.w	r3, r3, #2
 800b1d4:	bfcc      	ite	gt
 800b1d6:	2400      	movgt	r4, #0
 800b1d8:	2401      	movle	r4, #1
 800b1da:	2b03      	cmp	r3, #3
 800b1dc:	d863      	bhi.n	800b2a6 <_dtoa_r+0x296>
 800b1de:	e8df f003 	tbb	[pc, r3]
 800b1e2:	372a      	.short	0x372a
 800b1e4:	5535      	.short	0x5535
 800b1e6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b1ea:	441e      	add	r6, r3
 800b1ec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b1f0:	2b20      	cmp	r3, #32
 800b1f2:	bfc1      	itttt	gt
 800b1f4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b1f8:	409f      	lslgt	r7, r3
 800b1fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b1fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b202:	bfd6      	itet	le
 800b204:	f1c3 0320 	rsble	r3, r3, #32
 800b208:	ea47 0003 	orrgt.w	r0, r7, r3
 800b20c:	fa04 f003 	lslle.w	r0, r4, r3
 800b210:	f7f5 f988 	bl	8000524 <__aeabi_ui2d>
 800b214:	2201      	movs	r2, #1
 800b216:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b21a:	3e01      	subs	r6, #1
 800b21c:	9214      	str	r2, [sp, #80]	@ 0x50
 800b21e:	e777      	b.n	800b110 <_dtoa_r+0x100>
 800b220:	2301      	movs	r3, #1
 800b222:	e7b8      	b.n	800b196 <_dtoa_r+0x186>
 800b224:	9012      	str	r0, [sp, #72]	@ 0x48
 800b226:	e7b7      	b.n	800b198 <_dtoa_r+0x188>
 800b228:	427b      	negs	r3, r7
 800b22a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b22c:	2300      	movs	r3, #0
 800b22e:	eba8 0807 	sub.w	r8, r8, r7
 800b232:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b234:	e7c4      	b.n	800b1c0 <_dtoa_r+0x1b0>
 800b236:	2300      	movs	r3, #0
 800b238:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b23a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	dc35      	bgt.n	800b2ac <_dtoa_r+0x29c>
 800b240:	2301      	movs	r3, #1
 800b242:	9300      	str	r3, [sp, #0]
 800b244:	9307      	str	r3, [sp, #28]
 800b246:	461a      	mov	r2, r3
 800b248:	920e      	str	r2, [sp, #56]	@ 0x38
 800b24a:	e00b      	b.n	800b264 <_dtoa_r+0x254>
 800b24c:	2301      	movs	r3, #1
 800b24e:	e7f3      	b.n	800b238 <_dtoa_r+0x228>
 800b250:	2300      	movs	r3, #0
 800b252:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b254:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b256:	18fb      	adds	r3, r7, r3
 800b258:	9300      	str	r3, [sp, #0]
 800b25a:	3301      	adds	r3, #1
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	9307      	str	r3, [sp, #28]
 800b260:	bfb8      	it	lt
 800b262:	2301      	movlt	r3, #1
 800b264:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b268:	2100      	movs	r1, #0
 800b26a:	2204      	movs	r2, #4
 800b26c:	f102 0514 	add.w	r5, r2, #20
 800b270:	429d      	cmp	r5, r3
 800b272:	d91f      	bls.n	800b2b4 <_dtoa_r+0x2a4>
 800b274:	6041      	str	r1, [r0, #4]
 800b276:	4658      	mov	r0, fp
 800b278:	f000 fcd8 	bl	800bc2c <_Balloc>
 800b27c:	4682      	mov	sl, r0
 800b27e:	2800      	cmp	r0, #0
 800b280:	d13c      	bne.n	800b2fc <_dtoa_r+0x2ec>
 800b282:	4b1b      	ldr	r3, [pc, #108]	@ (800b2f0 <_dtoa_r+0x2e0>)
 800b284:	4602      	mov	r2, r0
 800b286:	f240 11af 	movw	r1, #431	@ 0x1af
 800b28a:	e6d8      	b.n	800b03e <_dtoa_r+0x2e>
 800b28c:	2301      	movs	r3, #1
 800b28e:	e7e0      	b.n	800b252 <_dtoa_r+0x242>
 800b290:	2401      	movs	r4, #1
 800b292:	2300      	movs	r3, #0
 800b294:	9309      	str	r3, [sp, #36]	@ 0x24
 800b296:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b298:	f04f 33ff 	mov.w	r3, #4294967295
 800b29c:	9300      	str	r3, [sp, #0]
 800b29e:	9307      	str	r3, [sp, #28]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	2312      	movs	r3, #18
 800b2a4:	e7d0      	b.n	800b248 <_dtoa_r+0x238>
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b2aa:	e7f5      	b.n	800b298 <_dtoa_r+0x288>
 800b2ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2ae:	9300      	str	r3, [sp, #0]
 800b2b0:	9307      	str	r3, [sp, #28]
 800b2b2:	e7d7      	b.n	800b264 <_dtoa_r+0x254>
 800b2b4:	3101      	adds	r1, #1
 800b2b6:	0052      	lsls	r2, r2, #1
 800b2b8:	e7d8      	b.n	800b26c <_dtoa_r+0x25c>
 800b2ba:	bf00      	nop
 800b2bc:	f3af 8000 	nop.w
 800b2c0:	636f4361 	.word	0x636f4361
 800b2c4:	3fd287a7 	.word	0x3fd287a7
 800b2c8:	8b60c8b3 	.word	0x8b60c8b3
 800b2cc:	3fc68a28 	.word	0x3fc68a28
 800b2d0:	509f79fb 	.word	0x509f79fb
 800b2d4:	3fd34413 	.word	0x3fd34413
 800b2d8:	0801138d 	.word	0x0801138d
 800b2dc:	080113a4 	.word	0x080113a4
 800b2e0:	7ff00000 	.word	0x7ff00000
 800b2e4:	0801135d 	.word	0x0801135d
 800b2e8:	3ff80000 	.word	0x3ff80000
 800b2ec:	080114a0 	.word	0x080114a0
 800b2f0:	080113fc 	.word	0x080113fc
 800b2f4:	08011389 	.word	0x08011389
 800b2f8:	0801135c 	.word	0x0801135c
 800b2fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b300:	6018      	str	r0, [r3, #0]
 800b302:	9b07      	ldr	r3, [sp, #28]
 800b304:	2b0e      	cmp	r3, #14
 800b306:	f200 80a4 	bhi.w	800b452 <_dtoa_r+0x442>
 800b30a:	2c00      	cmp	r4, #0
 800b30c:	f000 80a1 	beq.w	800b452 <_dtoa_r+0x442>
 800b310:	2f00      	cmp	r7, #0
 800b312:	dd33      	ble.n	800b37c <_dtoa_r+0x36c>
 800b314:	4bad      	ldr	r3, [pc, #692]	@ (800b5cc <_dtoa_r+0x5bc>)
 800b316:	f007 020f 	and.w	r2, r7, #15
 800b31a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b31e:	ed93 7b00 	vldr	d7, [r3]
 800b322:	05f8      	lsls	r0, r7, #23
 800b324:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b328:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b32c:	d516      	bpl.n	800b35c <_dtoa_r+0x34c>
 800b32e:	4ba8      	ldr	r3, [pc, #672]	@ (800b5d0 <_dtoa_r+0x5c0>)
 800b330:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b334:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b338:	f7f5 fa98 	bl	800086c <__aeabi_ddiv>
 800b33c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b340:	f004 040f 	and.w	r4, r4, #15
 800b344:	2603      	movs	r6, #3
 800b346:	4da2      	ldr	r5, [pc, #648]	@ (800b5d0 <_dtoa_r+0x5c0>)
 800b348:	b954      	cbnz	r4, 800b360 <_dtoa_r+0x350>
 800b34a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b34e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b352:	f7f5 fa8b 	bl	800086c <__aeabi_ddiv>
 800b356:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b35a:	e028      	b.n	800b3ae <_dtoa_r+0x39e>
 800b35c:	2602      	movs	r6, #2
 800b35e:	e7f2      	b.n	800b346 <_dtoa_r+0x336>
 800b360:	07e1      	lsls	r1, r4, #31
 800b362:	d508      	bpl.n	800b376 <_dtoa_r+0x366>
 800b364:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b368:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b36c:	f7f5 f954 	bl	8000618 <__aeabi_dmul>
 800b370:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b374:	3601      	adds	r6, #1
 800b376:	1064      	asrs	r4, r4, #1
 800b378:	3508      	adds	r5, #8
 800b37a:	e7e5      	b.n	800b348 <_dtoa_r+0x338>
 800b37c:	f000 80d2 	beq.w	800b524 <_dtoa_r+0x514>
 800b380:	427c      	negs	r4, r7
 800b382:	4b92      	ldr	r3, [pc, #584]	@ (800b5cc <_dtoa_r+0x5bc>)
 800b384:	4d92      	ldr	r5, [pc, #584]	@ (800b5d0 <_dtoa_r+0x5c0>)
 800b386:	f004 020f 	and.w	r2, r4, #15
 800b38a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b392:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b396:	f7f5 f93f 	bl	8000618 <__aeabi_dmul>
 800b39a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b39e:	1124      	asrs	r4, r4, #4
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	2602      	movs	r6, #2
 800b3a4:	2c00      	cmp	r4, #0
 800b3a6:	f040 80b2 	bne.w	800b50e <_dtoa_r+0x4fe>
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d1d3      	bne.n	800b356 <_dtoa_r+0x346>
 800b3ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b3b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	f000 80b7 	beq.w	800b528 <_dtoa_r+0x518>
 800b3ba:	4b86      	ldr	r3, [pc, #536]	@ (800b5d4 <_dtoa_r+0x5c4>)
 800b3bc:	2200      	movs	r2, #0
 800b3be:	4620      	mov	r0, r4
 800b3c0:	4629      	mov	r1, r5
 800b3c2:	f7f5 fb9b 	bl	8000afc <__aeabi_dcmplt>
 800b3c6:	2800      	cmp	r0, #0
 800b3c8:	f000 80ae 	beq.w	800b528 <_dtoa_r+0x518>
 800b3cc:	9b07      	ldr	r3, [sp, #28]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	f000 80aa 	beq.w	800b528 <_dtoa_r+0x518>
 800b3d4:	9b00      	ldr	r3, [sp, #0]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	dd37      	ble.n	800b44a <_dtoa_r+0x43a>
 800b3da:	1e7b      	subs	r3, r7, #1
 800b3dc:	9304      	str	r3, [sp, #16]
 800b3de:	4620      	mov	r0, r4
 800b3e0:	4b7d      	ldr	r3, [pc, #500]	@ (800b5d8 <_dtoa_r+0x5c8>)
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	4629      	mov	r1, r5
 800b3e6:	f7f5 f917 	bl	8000618 <__aeabi_dmul>
 800b3ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3ee:	9c00      	ldr	r4, [sp, #0]
 800b3f0:	3601      	adds	r6, #1
 800b3f2:	4630      	mov	r0, r6
 800b3f4:	f7f5 f8a6 	bl	8000544 <__aeabi_i2d>
 800b3f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b3fc:	f7f5 f90c 	bl	8000618 <__aeabi_dmul>
 800b400:	4b76      	ldr	r3, [pc, #472]	@ (800b5dc <_dtoa_r+0x5cc>)
 800b402:	2200      	movs	r2, #0
 800b404:	f7f4 ff52 	bl	80002ac <__adddf3>
 800b408:	4605      	mov	r5, r0
 800b40a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b40e:	2c00      	cmp	r4, #0
 800b410:	f040 808d 	bne.w	800b52e <_dtoa_r+0x51e>
 800b414:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b418:	4b71      	ldr	r3, [pc, #452]	@ (800b5e0 <_dtoa_r+0x5d0>)
 800b41a:	2200      	movs	r2, #0
 800b41c:	f7f4 ff44 	bl	80002a8 <__aeabi_dsub>
 800b420:	4602      	mov	r2, r0
 800b422:	460b      	mov	r3, r1
 800b424:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b428:	462a      	mov	r2, r5
 800b42a:	4633      	mov	r3, r6
 800b42c:	f7f5 fb84 	bl	8000b38 <__aeabi_dcmpgt>
 800b430:	2800      	cmp	r0, #0
 800b432:	f040 828b 	bne.w	800b94c <_dtoa_r+0x93c>
 800b436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b43a:	462a      	mov	r2, r5
 800b43c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b440:	f7f5 fb5c 	bl	8000afc <__aeabi_dcmplt>
 800b444:	2800      	cmp	r0, #0
 800b446:	f040 8128 	bne.w	800b69a <_dtoa_r+0x68a>
 800b44a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b44e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b452:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b454:	2b00      	cmp	r3, #0
 800b456:	f2c0 815a 	blt.w	800b70e <_dtoa_r+0x6fe>
 800b45a:	2f0e      	cmp	r7, #14
 800b45c:	f300 8157 	bgt.w	800b70e <_dtoa_r+0x6fe>
 800b460:	4b5a      	ldr	r3, [pc, #360]	@ (800b5cc <_dtoa_r+0x5bc>)
 800b462:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b466:	ed93 7b00 	vldr	d7, [r3]
 800b46a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	ed8d 7b00 	vstr	d7, [sp]
 800b472:	da03      	bge.n	800b47c <_dtoa_r+0x46c>
 800b474:	9b07      	ldr	r3, [sp, #28]
 800b476:	2b00      	cmp	r3, #0
 800b478:	f340 8101 	ble.w	800b67e <_dtoa_r+0x66e>
 800b47c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b480:	4656      	mov	r6, sl
 800b482:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b486:	4620      	mov	r0, r4
 800b488:	4629      	mov	r1, r5
 800b48a:	f7f5 f9ef 	bl	800086c <__aeabi_ddiv>
 800b48e:	f7f5 fb73 	bl	8000b78 <__aeabi_d2iz>
 800b492:	4680      	mov	r8, r0
 800b494:	f7f5 f856 	bl	8000544 <__aeabi_i2d>
 800b498:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b49c:	f7f5 f8bc 	bl	8000618 <__aeabi_dmul>
 800b4a0:	4602      	mov	r2, r0
 800b4a2:	460b      	mov	r3, r1
 800b4a4:	4620      	mov	r0, r4
 800b4a6:	4629      	mov	r1, r5
 800b4a8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b4ac:	f7f4 fefc 	bl	80002a8 <__aeabi_dsub>
 800b4b0:	f806 4b01 	strb.w	r4, [r6], #1
 800b4b4:	9d07      	ldr	r5, [sp, #28]
 800b4b6:	eba6 040a 	sub.w	r4, r6, sl
 800b4ba:	42a5      	cmp	r5, r4
 800b4bc:	4602      	mov	r2, r0
 800b4be:	460b      	mov	r3, r1
 800b4c0:	f040 8117 	bne.w	800b6f2 <_dtoa_r+0x6e2>
 800b4c4:	f7f4 fef2 	bl	80002ac <__adddf3>
 800b4c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4cc:	4604      	mov	r4, r0
 800b4ce:	460d      	mov	r5, r1
 800b4d0:	f7f5 fb32 	bl	8000b38 <__aeabi_dcmpgt>
 800b4d4:	2800      	cmp	r0, #0
 800b4d6:	f040 80f9 	bne.w	800b6cc <_dtoa_r+0x6bc>
 800b4da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4de:	4620      	mov	r0, r4
 800b4e0:	4629      	mov	r1, r5
 800b4e2:	f7f5 fb01 	bl	8000ae8 <__aeabi_dcmpeq>
 800b4e6:	b118      	cbz	r0, 800b4f0 <_dtoa_r+0x4e0>
 800b4e8:	f018 0f01 	tst.w	r8, #1
 800b4ec:	f040 80ee 	bne.w	800b6cc <_dtoa_r+0x6bc>
 800b4f0:	4649      	mov	r1, r9
 800b4f2:	4658      	mov	r0, fp
 800b4f4:	f000 fbda 	bl	800bcac <_Bfree>
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	7033      	strb	r3, [r6, #0]
 800b4fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b4fe:	3701      	adds	r7, #1
 800b500:	601f      	str	r7, [r3, #0]
 800b502:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b504:	2b00      	cmp	r3, #0
 800b506:	f000 831d 	beq.w	800bb44 <_dtoa_r+0xb34>
 800b50a:	601e      	str	r6, [r3, #0]
 800b50c:	e31a      	b.n	800bb44 <_dtoa_r+0xb34>
 800b50e:	07e2      	lsls	r2, r4, #31
 800b510:	d505      	bpl.n	800b51e <_dtoa_r+0x50e>
 800b512:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b516:	f7f5 f87f 	bl	8000618 <__aeabi_dmul>
 800b51a:	3601      	adds	r6, #1
 800b51c:	2301      	movs	r3, #1
 800b51e:	1064      	asrs	r4, r4, #1
 800b520:	3508      	adds	r5, #8
 800b522:	e73f      	b.n	800b3a4 <_dtoa_r+0x394>
 800b524:	2602      	movs	r6, #2
 800b526:	e742      	b.n	800b3ae <_dtoa_r+0x39e>
 800b528:	9c07      	ldr	r4, [sp, #28]
 800b52a:	9704      	str	r7, [sp, #16]
 800b52c:	e761      	b.n	800b3f2 <_dtoa_r+0x3e2>
 800b52e:	4b27      	ldr	r3, [pc, #156]	@ (800b5cc <_dtoa_r+0x5bc>)
 800b530:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b532:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b536:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b53a:	4454      	add	r4, sl
 800b53c:	2900      	cmp	r1, #0
 800b53e:	d053      	beq.n	800b5e8 <_dtoa_r+0x5d8>
 800b540:	4928      	ldr	r1, [pc, #160]	@ (800b5e4 <_dtoa_r+0x5d4>)
 800b542:	2000      	movs	r0, #0
 800b544:	f7f5 f992 	bl	800086c <__aeabi_ddiv>
 800b548:	4633      	mov	r3, r6
 800b54a:	462a      	mov	r2, r5
 800b54c:	f7f4 feac 	bl	80002a8 <__aeabi_dsub>
 800b550:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b554:	4656      	mov	r6, sl
 800b556:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b55a:	f7f5 fb0d 	bl	8000b78 <__aeabi_d2iz>
 800b55e:	4605      	mov	r5, r0
 800b560:	f7f4 fff0 	bl	8000544 <__aeabi_i2d>
 800b564:	4602      	mov	r2, r0
 800b566:	460b      	mov	r3, r1
 800b568:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b56c:	f7f4 fe9c 	bl	80002a8 <__aeabi_dsub>
 800b570:	3530      	adds	r5, #48	@ 0x30
 800b572:	4602      	mov	r2, r0
 800b574:	460b      	mov	r3, r1
 800b576:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b57a:	f806 5b01 	strb.w	r5, [r6], #1
 800b57e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b582:	f7f5 fabb 	bl	8000afc <__aeabi_dcmplt>
 800b586:	2800      	cmp	r0, #0
 800b588:	d171      	bne.n	800b66e <_dtoa_r+0x65e>
 800b58a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b58e:	4911      	ldr	r1, [pc, #68]	@ (800b5d4 <_dtoa_r+0x5c4>)
 800b590:	2000      	movs	r0, #0
 800b592:	f7f4 fe89 	bl	80002a8 <__aeabi_dsub>
 800b596:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b59a:	f7f5 faaf 	bl	8000afc <__aeabi_dcmplt>
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	f040 8095 	bne.w	800b6ce <_dtoa_r+0x6be>
 800b5a4:	42a6      	cmp	r6, r4
 800b5a6:	f43f af50 	beq.w	800b44a <_dtoa_r+0x43a>
 800b5aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b5ae:	4b0a      	ldr	r3, [pc, #40]	@ (800b5d8 <_dtoa_r+0x5c8>)
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	f7f5 f831 	bl	8000618 <__aeabi_dmul>
 800b5b6:	4b08      	ldr	r3, [pc, #32]	@ (800b5d8 <_dtoa_r+0x5c8>)
 800b5b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b5bc:	2200      	movs	r2, #0
 800b5be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5c2:	f7f5 f829 	bl	8000618 <__aeabi_dmul>
 800b5c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5ca:	e7c4      	b.n	800b556 <_dtoa_r+0x546>
 800b5cc:	080114a0 	.word	0x080114a0
 800b5d0:	08011478 	.word	0x08011478
 800b5d4:	3ff00000 	.word	0x3ff00000
 800b5d8:	40240000 	.word	0x40240000
 800b5dc:	401c0000 	.word	0x401c0000
 800b5e0:	40140000 	.word	0x40140000
 800b5e4:	3fe00000 	.word	0x3fe00000
 800b5e8:	4631      	mov	r1, r6
 800b5ea:	4628      	mov	r0, r5
 800b5ec:	f7f5 f814 	bl	8000618 <__aeabi_dmul>
 800b5f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b5f4:	9415      	str	r4, [sp, #84]	@ 0x54
 800b5f6:	4656      	mov	r6, sl
 800b5f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5fc:	f7f5 fabc 	bl	8000b78 <__aeabi_d2iz>
 800b600:	4605      	mov	r5, r0
 800b602:	f7f4 ff9f 	bl	8000544 <__aeabi_i2d>
 800b606:	4602      	mov	r2, r0
 800b608:	460b      	mov	r3, r1
 800b60a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b60e:	f7f4 fe4b 	bl	80002a8 <__aeabi_dsub>
 800b612:	3530      	adds	r5, #48	@ 0x30
 800b614:	f806 5b01 	strb.w	r5, [r6], #1
 800b618:	4602      	mov	r2, r0
 800b61a:	460b      	mov	r3, r1
 800b61c:	42a6      	cmp	r6, r4
 800b61e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b622:	f04f 0200 	mov.w	r2, #0
 800b626:	d124      	bne.n	800b672 <_dtoa_r+0x662>
 800b628:	4bac      	ldr	r3, [pc, #688]	@ (800b8dc <_dtoa_r+0x8cc>)
 800b62a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b62e:	f7f4 fe3d 	bl	80002ac <__adddf3>
 800b632:	4602      	mov	r2, r0
 800b634:	460b      	mov	r3, r1
 800b636:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b63a:	f7f5 fa7d 	bl	8000b38 <__aeabi_dcmpgt>
 800b63e:	2800      	cmp	r0, #0
 800b640:	d145      	bne.n	800b6ce <_dtoa_r+0x6be>
 800b642:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b646:	49a5      	ldr	r1, [pc, #660]	@ (800b8dc <_dtoa_r+0x8cc>)
 800b648:	2000      	movs	r0, #0
 800b64a:	f7f4 fe2d 	bl	80002a8 <__aeabi_dsub>
 800b64e:	4602      	mov	r2, r0
 800b650:	460b      	mov	r3, r1
 800b652:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b656:	f7f5 fa51 	bl	8000afc <__aeabi_dcmplt>
 800b65a:	2800      	cmp	r0, #0
 800b65c:	f43f aef5 	beq.w	800b44a <_dtoa_r+0x43a>
 800b660:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b662:	1e73      	subs	r3, r6, #1
 800b664:	9315      	str	r3, [sp, #84]	@ 0x54
 800b666:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b66a:	2b30      	cmp	r3, #48	@ 0x30
 800b66c:	d0f8      	beq.n	800b660 <_dtoa_r+0x650>
 800b66e:	9f04      	ldr	r7, [sp, #16]
 800b670:	e73e      	b.n	800b4f0 <_dtoa_r+0x4e0>
 800b672:	4b9b      	ldr	r3, [pc, #620]	@ (800b8e0 <_dtoa_r+0x8d0>)
 800b674:	f7f4 ffd0 	bl	8000618 <__aeabi_dmul>
 800b678:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b67c:	e7bc      	b.n	800b5f8 <_dtoa_r+0x5e8>
 800b67e:	d10c      	bne.n	800b69a <_dtoa_r+0x68a>
 800b680:	4b98      	ldr	r3, [pc, #608]	@ (800b8e4 <_dtoa_r+0x8d4>)
 800b682:	2200      	movs	r2, #0
 800b684:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b688:	f7f4 ffc6 	bl	8000618 <__aeabi_dmul>
 800b68c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b690:	f7f5 fa48 	bl	8000b24 <__aeabi_dcmpge>
 800b694:	2800      	cmp	r0, #0
 800b696:	f000 8157 	beq.w	800b948 <_dtoa_r+0x938>
 800b69a:	2400      	movs	r4, #0
 800b69c:	4625      	mov	r5, r4
 800b69e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6a0:	43db      	mvns	r3, r3
 800b6a2:	9304      	str	r3, [sp, #16]
 800b6a4:	4656      	mov	r6, sl
 800b6a6:	2700      	movs	r7, #0
 800b6a8:	4621      	mov	r1, r4
 800b6aa:	4658      	mov	r0, fp
 800b6ac:	f000 fafe 	bl	800bcac <_Bfree>
 800b6b0:	2d00      	cmp	r5, #0
 800b6b2:	d0dc      	beq.n	800b66e <_dtoa_r+0x65e>
 800b6b4:	b12f      	cbz	r7, 800b6c2 <_dtoa_r+0x6b2>
 800b6b6:	42af      	cmp	r7, r5
 800b6b8:	d003      	beq.n	800b6c2 <_dtoa_r+0x6b2>
 800b6ba:	4639      	mov	r1, r7
 800b6bc:	4658      	mov	r0, fp
 800b6be:	f000 faf5 	bl	800bcac <_Bfree>
 800b6c2:	4629      	mov	r1, r5
 800b6c4:	4658      	mov	r0, fp
 800b6c6:	f000 faf1 	bl	800bcac <_Bfree>
 800b6ca:	e7d0      	b.n	800b66e <_dtoa_r+0x65e>
 800b6cc:	9704      	str	r7, [sp, #16]
 800b6ce:	4633      	mov	r3, r6
 800b6d0:	461e      	mov	r6, r3
 800b6d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b6d6:	2a39      	cmp	r2, #57	@ 0x39
 800b6d8:	d107      	bne.n	800b6ea <_dtoa_r+0x6da>
 800b6da:	459a      	cmp	sl, r3
 800b6dc:	d1f8      	bne.n	800b6d0 <_dtoa_r+0x6c0>
 800b6de:	9a04      	ldr	r2, [sp, #16]
 800b6e0:	3201      	adds	r2, #1
 800b6e2:	9204      	str	r2, [sp, #16]
 800b6e4:	2230      	movs	r2, #48	@ 0x30
 800b6e6:	f88a 2000 	strb.w	r2, [sl]
 800b6ea:	781a      	ldrb	r2, [r3, #0]
 800b6ec:	3201      	adds	r2, #1
 800b6ee:	701a      	strb	r2, [r3, #0]
 800b6f0:	e7bd      	b.n	800b66e <_dtoa_r+0x65e>
 800b6f2:	4b7b      	ldr	r3, [pc, #492]	@ (800b8e0 <_dtoa_r+0x8d0>)
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	f7f4 ff8f 	bl	8000618 <__aeabi_dmul>
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	4604      	mov	r4, r0
 800b700:	460d      	mov	r5, r1
 800b702:	f7f5 f9f1 	bl	8000ae8 <__aeabi_dcmpeq>
 800b706:	2800      	cmp	r0, #0
 800b708:	f43f aebb 	beq.w	800b482 <_dtoa_r+0x472>
 800b70c:	e6f0      	b.n	800b4f0 <_dtoa_r+0x4e0>
 800b70e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b710:	2a00      	cmp	r2, #0
 800b712:	f000 80db 	beq.w	800b8cc <_dtoa_r+0x8bc>
 800b716:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b718:	2a01      	cmp	r2, #1
 800b71a:	f300 80bf 	bgt.w	800b89c <_dtoa_r+0x88c>
 800b71e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b720:	2a00      	cmp	r2, #0
 800b722:	f000 80b7 	beq.w	800b894 <_dtoa_r+0x884>
 800b726:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b72a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b72c:	4646      	mov	r6, r8
 800b72e:	9a08      	ldr	r2, [sp, #32]
 800b730:	2101      	movs	r1, #1
 800b732:	441a      	add	r2, r3
 800b734:	4658      	mov	r0, fp
 800b736:	4498      	add	r8, r3
 800b738:	9208      	str	r2, [sp, #32]
 800b73a:	f000 fb6b 	bl	800be14 <__i2b>
 800b73e:	4605      	mov	r5, r0
 800b740:	b15e      	cbz	r6, 800b75a <_dtoa_r+0x74a>
 800b742:	9b08      	ldr	r3, [sp, #32]
 800b744:	2b00      	cmp	r3, #0
 800b746:	dd08      	ble.n	800b75a <_dtoa_r+0x74a>
 800b748:	42b3      	cmp	r3, r6
 800b74a:	9a08      	ldr	r2, [sp, #32]
 800b74c:	bfa8      	it	ge
 800b74e:	4633      	movge	r3, r6
 800b750:	eba8 0803 	sub.w	r8, r8, r3
 800b754:	1af6      	subs	r6, r6, r3
 800b756:	1ad3      	subs	r3, r2, r3
 800b758:	9308      	str	r3, [sp, #32]
 800b75a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b75c:	b1f3      	cbz	r3, 800b79c <_dtoa_r+0x78c>
 800b75e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b760:	2b00      	cmp	r3, #0
 800b762:	f000 80b7 	beq.w	800b8d4 <_dtoa_r+0x8c4>
 800b766:	b18c      	cbz	r4, 800b78c <_dtoa_r+0x77c>
 800b768:	4629      	mov	r1, r5
 800b76a:	4622      	mov	r2, r4
 800b76c:	4658      	mov	r0, fp
 800b76e:	f000 fc11 	bl	800bf94 <__pow5mult>
 800b772:	464a      	mov	r2, r9
 800b774:	4601      	mov	r1, r0
 800b776:	4605      	mov	r5, r0
 800b778:	4658      	mov	r0, fp
 800b77a:	f000 fb61 	bl	800be40 <__multiply>
 800b77e:	4649      	mov	r1, r9
 800b780:	9004      	str	r0, [sp, #16]
 800b782:	4658      	mov	r0, fp
 800b784:	f000 fa92 	bl	800bcac <_Bfree>
 800b788:	9b04      	ldr	r3, [sp, #16]
 800b78a:	4699      	mov	r9, r3
 800b78c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b78e:	1b1a      	subs	r2, r3, r4
 800b790:	d004      	beq.n	800b79c <_dtoa_r+0x78c>
 800b792:	4649      	mov	r1, r9
 800b794:	4658      	mov	r0, fp
 800b796:	f000 fbfd 	bl	800bf94 <__pow5mult>
 800b79a:	4681      	mov	r9, r0
 800b79c:	2101      	movs	r1, #1
 800b79e:	4658      	mov	r0, fp
 800b7a0:	f000 fb38 	bl	800be14 <__i2b>
 800b7a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7a6:	4604      	mov	r4, r0
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	f000 81cf 	beq.w	800bb4c <_dtoa_r+0xb3c>
 800b7ae:	461a      	mov	r2, r3
 800b7b0:	4601      	mov	r1, r0
 800b7b2:	4658      	mov	r0, fp
 800b7b4:	f000 fbee 	bl	800bf94 <__pow5mult>
 800b7b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7ba:	2b01      	cmp	r3, #1
 800b7bc:	4604      	mov	r4, r0
 800b7be:	f300 8095 	bgt.w	800b8ec <_dtoa_r+0x8dc>
 800b7c2:	9b02      	ldr	r3, [sp, #8]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	f040 8087 	bne.w	800b8d8 <_dtoa_r+0x8c8>
 800b7ca:	9b03      	ldr	r3, [sp, #12]
 800b7cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	f040 8089 	bne.w	800b8e8 <_dtoa_r+0x8d8>
 800b7d6:	9b03      	ldr	r3, [sp, #12]
 800b7d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b7dc:	0d1b      	lsrs	r3, r3, #20
 800b7de:	051b      	lsls	r3, r3, #20
 800b7e0:	b12b      	cbz	r3, 800b7ee <_dtoa_r+0x7de>
 800b7e2:	9b08      	ldr	r3, [sp, #32]
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	9308      	str	r3, [sp, #32]
 800b7e8:	f108 0801 	add.w	r8, r8, #1
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	f000 81b0 	beq.w	800bb58 <_dtoa_r+0xb48>
 800b7f8:	6923      	ldr	r3, [r4, #16]
 800b7fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b7fe:	6918      	ldr	r0, [r3, #16]
 800b800:	f000 fabc 	bl	800bd7c <__hi0bits>
 800b804:	f1c0 0020 	rsb	r0, r0, #32
 800b808:	9b08      	ldr	r3, [sp, #32]
 800b80a:	4418      	add	r0, r3
 800b80c:	f010 001f 	ands.w	r0, r0, #31
 800b810:	d077      	beq.n	800b902 <_dtoa_r+0x8f2>
 800b812:	f1c0 0320 	rsb	r3, r0, #32
 800b816:	2b04      	cmp	r3, #4
 800b818:	dd6b      	ble.n	800b8f2 <_dtoa_r+0x8e2>
 800b81a:	9b08      	ldr	r3, [sp, #32]
 800b81c:	f1c0 001c 	rsb	r0, r0, #28
 800b820:	4403      	add	r3, r0
 800b822:	4480      	add	r8, r0
 800b824:	4406      	add	r6, r0
 800b826:	9308      	str	r3, [sp, #32]
 800b828:	f1b8 0f00 	cmp.w	r8, #0
 800b82c:	dd05      	ble.n	800b83a <_dtoa_r+0x82a>
 800b82e:	4649      	mov	r1, r9
 800b830:	4642      	mov	r2, r8
 800b832:	4658      	mov	r0, fp
 800b834:	f000 fc08 	bl	800c048 <__lshift>
 800b838:	4681      	mov	r9, r0
 800b83a:	9b08      	ldr	r3, [sp, #32]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	dd05      	ble.n	800b84c <_dtoa_r+0x83c>
 800b840:	4621      	mov	r1, r4
 800b842:	461a      	mov	r2, r3
 800b844:	4658      	mov	r0, fp
 800b846:	f000 fbff 	bl	800c048 <__lshift>
 800b84a:	4604      	mov	r4, r0
 800b84c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d059      	beq.n	800b906 <_dtoa_r+0x8f6>
 800b852:	4621      	mov	r1, r4
 800b854:	4648      	mov	r0, r9
 800b856:	f000 fc63 	bl	800c120 <__mcmp>
 800b85a:	2800      	cmp	r0, #0
 800b85c:	da53      	bge.n	800b906 <_dtoa_r+0x8f6>
 800b85e:	1e7b      	subs	r3, r7, #1
 800b860:	9304      	str	r3, [sp, #16]
 800b862:	4649      	mov	r1, r9
 800b864:	2300      	movs	r3, #0
 800b866:	220a      	movs	r2, #10
 800b868:	4658      	mov	r0, fp
 800b86a:	f000 fa41 	bl	800bcf0 <__multadd>
 800b86e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b870:	4681      	mov	r9, r0
 800b872:	2b00      	cmp	r3, #0
 800b874:	f000 8172 	beq.w	800bb5c <_dtoa_r+0xb4c>
 800b878:	2300      	movs	r3, #0
 800b87a:	4629      	mov	r1, r5
 800b87c:	220a      	movs	r2, #10
 800b87e:	4658      	mov	r0, fp
 800b880:	f000 fa36 	bl	800bcf0 <__multadd>
 800b884:	9b00      	ldr	r3, [sp, #0]
 800b886:	2b00      	cmp	r3, #0
 800b888:	4605      	mov	r5, r0
 800b88a:	dc67      	bgt.n	800b95c <_dtoa_r+0x94c>
 800b88c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b88e:	2b02      	cmp	r3, #2
 800b890:	dc41      	bgt.n	800b916 <_dtoa_r+0x906>
 800b892:	e063      	b.n	800b95c <_dtoa_r+0x94c>
 800b894:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b896:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b89a:	e746      	b.n	800b72a <_dtoa_r+0x71a>
 800b89c:	9b07      	ldr	r3, [sp, #28]
 800b89e:	1e5c      	subs	r4, r3, #1
 800b8a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8a2:	42a3      	cmp	r3, r4
 800b8a4:	bfbf      	itttt	lt
 800b8a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b8a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b8aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b8ac:	1ae3      	sublt	r3, r4, r3
 800b8ae:	bfb4      	ite	lt
 800b8b0:	18d2      	addlt	r2, r2, r3
 800b8b2:	1b1c      	subge	r4, r3, r4
 800b8b4:	9b07      	ldr	r3, [sp, #28]
 800b8b6:	bfbc      	itt	lt
 800b8b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b8ba:	2400      	movlt	r4, #0
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	bfb5      	itete	lt
 800b8c0:	eba8 0603 	sublt.w	r6, r8, r3
 800b8c4:	9b07      	ldrge	r3, [sp, #28]
 800b8c6:	2300      	movlt	r3, #0
 800b8c8:	4646      	movge	r6, r8
 800b8ca:	e730      	b.n	800b72e <_dtoa_r+0x71e>
 800b8cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b8ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b8d0:	4646      	mov	r6, r8
 800b8d2:	e735      	b.n	800b740 <_dtoa_r+0x730>
 800b8d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b8d6:	e75c      	b.n	800b792 <_dtoa_r+0x782>
 800b8d8:	2300      	movs	r3, #0
 800b8da:	e788      	b.n	800b7ee <_dtoa_r+0x7de>
 800b8dc:	3fe00000 	.word	0x3fe00000
 800b8e0:	40240000 	.word	0x40240000
 800b8e4:	40140000 	.word	0x40140000
 800b8e8:	9b02      	ldr	r3, [sp, #8]
 800b8ea:	e780      	b.n	800b7ee <_dtoa_r+0x7de>
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800b8f0:	e782      	b.n	800b7f8 <_dtoa_r+0x7e8>
 800b8f2:	d099      	beq.n	800b828 <_dtoa_r+0x818>
 800b8f4:	9a08      	ldr	r2, [sp, #32]
 800b8f6:	331c      	adds	r3, #28
 800b8f8:	441a      	add	r2, r3
 800b8fa:	4498      	add	r8, r3
 800b8fc:	441e      	add	r6, r3
 800b8fe:	9208      	str	r2, [sp, #32]
 800b900:	e792      	b.n	800b828 <_dtoa_r+0x818>
 800b902:	4603      	mov	r3, r0
 800b904:	e7f6      	b.n	800b8f4 <_dtoa_r+0x8e4>
 800b906:	9b07      	ldr	r3, [sp, #28]
 800b908:	9704      	str	r7, [sp, #16]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	dc20      	bgt.n	800b950 <_dtoa_r+0x940>
 800b90e:	9300      	str	r3, [sp, #0]
 800b910:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b912:	2b02      	cmp	r3, #2
 800b914:	dd1e      	ble.n	800b954 <_dtoa_r+0x944>
 800b916:	9b00      	ldr	r3, [sp, #0]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	f47f aec0 	bne.w	800b69e <_dtoa_r+0x68e>
 800b91e:	4621      	mov	r1, r4
 800b920:	2205      	movs	r2, #5
 800b922:	4658      	mov	r0, fp
 800b924:	f000 f9e4 	bl	800bcf0 <__multadd>
 800b928:	4601      	mov	r1, r0
 800b92a:	4604      	mov	r4, r0
 800b92c:	4648      	mov	r0, r9
 800b92e:	f000 fbf7 	bl	800c120 <__mcmp>
 800b932:	2800      	cmp	r0, #0
 800b934:	f77f aeb3 	ble.w	800b69e <_dtoa_r+0x68e>
 800b938:	4656      	mov	r6, sl
 800b93a:	2331      	movs	r3, #49	@ 0x31
 800b93c:	f806 3b01 	strb.w	r3, [r6], #1
 800b940:	9b04      	ldr	r3, [sp, #16]
 800b942:	3301      	adds	r3, #1
 800b944:	9304      	str	r3, [sp, #16]
 800b946:	e6ae      	b.n	800b6a6 <_dtoa_r+0x696>
 800b948:	9c07      	ldr	r4, [sp, #28]
 800b94a:	9704      	str	r7, [sp, #16]
 800b94c:	4625      	mov	r5, r4
 800b94e:	e7f3      	b.n	800b938 <_dtoa_r+0x928>
 800b950:	9b07      	ldr	r3, [sp, #28]
 800b952:	9300      	str	r3, [sp, #0]
 800b954:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b956:	2b00      	cmp	r3, #0
 800b958:	f000 8104 	beq.w	800bb64 <_dtoa_r+0xb54>
 800b95c:	2e00      	cmp	r6, #0
 800b95e:	dd05      	ble.n	800b96c <_dtoa_r+0x95c>
 800b960:	4629      	mov	r1, r5
 800b962:	4632      	mov	r2, r6
 800b964:	4658      	mov	r0, fp
 800b966:	f000 fb6f 	bl	800c048 <__lshift>
 800b96a:	4605      	mov	r5, r0
 800b96c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d05a      	beq.n	800ba28 <_dtoa_r+0xa18>
 800b972:	6869      	ldr	r1, [r5, #4]
 800b974:	4658      	mov	r0, fp
 800b976:	f000 f959 	bl	800bc2c <_Balloc>
 800b97a:	4606      	mov	r6, r0
 800b97c:	b928      	cbnz	r0, 800b98a <_dtoa_r+0x97a>
 800b97e:	4b84      	ldr	r3, [pc, #528]	@ (800bb90 <_dtoa_r+0xb80>)
 800b980:	4602      	mov	r2, r0
 800b982:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b986:	f7ff bb5a 	b.w	800b03e <_dtoa_r+0x2e>
 800b98a:	692a      	ldr	r2, [r5, #16]
 800b98c:	3202      	adds	r2, #2
 800b98e:	0092      	lsls	r2, r2, #2
 800b990:	f105 010c 	add.w	r1, r5, #12
 800b994:	300c      	adds	r0, #12
 800b996:	f7ff faa4 	bl	800aee2 <memcpy>
 800b99a:	2201      	movs	r2, #1
 800b99c:	4631      	mov	r1, r6
 800b99e:	4658      	mov	r0, fp
 800b9a0:	f000 fb52 	bl	800c048 <__lshift>
 800b9a4:	f10a 0301 	add.w	r3, sl, #1
 800b9a8:	9307      	str	r3, [sp, #28]
 800b9aa:	9b00      	ldr	r3, [sp, #0]
 800b9ac:	4453      	add	r3, sl
 800b9ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b9b0:	9b02      	ldr	r3, [sp, #8]
 800b9b2:	f003 0301 	and.w	r3, r3, #1
 800b9b6:	462f      	mov	r7, r5
 800b9b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9ba:	4605      	mov	r5, r0
 800b9bc:	9b07      	ldr	r3, [sp, #28]
 800b9be:	4621      	mov	r1, r4
 800b9c0:	3b01      	subs	r3, #1
 800b9c2:	4648      	mov	r0, r9
 800b9c4:	9300      	str	r3, [sp, #0]
 800b9c6:	f7ff fa9a 	bl	800aefe <quorem>
 800b9ca:	4639      	mov	r1, r7
 800b9cc:	9002      	str	r0, [sp, #8]
 800b9ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b9d2:	4648      	mov	r0, r9
 800b9d4:	f000 fba4 	bl	800c120 <__mcmp>
 800b9d8:	462a      	mov	r2, r5
 800b9da:	9008      	str	r0, [sp, #32]
 800b9dc:	4621      	mov	r1, r4
 800b9de:	4658      	mov	r0, fp
 800b9e0:	f000 fbba 	bl	800c158 <__mdiff>
 800b9e4:	68c2      	ldr	r2, [r0, #12]
 800b9e6:	4606      	mov	r6, r0
 800b9e8:	bb02      	cbnz	r2, 800ba2c <_dtoa_r+0xa1c>
 800b9ea:	4601      	mov	r1, r0
 800b9ec:	4648      	mov	r0, r9
 800b9ee:	f000 fb97 	bl	800c120 <__mcmp>
 800b9f2:	4602      	mov	r2, r0
 800b9f4:	4631      	mov	r1, r6
 800b9f6:	4658      	mov	r0, fp
 800b9f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b9fa:	f000 f957 	bl	800bcac <_Bfree>
 800b9fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba02:	9e07      	ldr	r6, [sp, #28]
 800ba04:	ea43 0102 	orr.w	r1, r3, r2
 800ba08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba0a:	4319      	orrs	r1, r3
 800ba0c:	d110      	bne.n	800ba30 <_dtoa_r+0xa20>
 800ba0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ba12:	d029      	beq.n	800ba68 <_dtoa_r+0xa58>
 800ba14:	9b08      	ldr	r3, [sp, #32]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	dd02      	ble.n	800ba20 <_dtoa_r+0xa10>
 800ba1a:	9b02      	ldr	r3, [sp, #8]
 800ba1c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ba20:	9b00      	ldr	r3, [sp, #0]
 800ba22:	f883 8000 	strb.w	r8, [r3]
 800ba26:	e63f      	b.n	800b6a8 <_dtoa_r+0x698>
 800ba28:	4628      	mov	r0, r5
 800ba2a:	e7bb      	b.n	800b9a4 <_dtoa_r+0x994>
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	e7e1      	b.n	800b9f4 <_dtoa_r+0x9e4>
 800ba30:	9b08      	ldr	r3, [sp, #32]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	db04      	blt.n	800ba40 <_dtoa_r+0xa30>
 800ba36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ba38:	430b      	orrs	r3, r1
 800ba3a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ba3c:	430b      	orrs	r3, r1
 800ba3e:	d120      	bne.n	800ba82 <_dtoa_r+0xa72>
 800ba40:	2a00      	cmp	r2, #0
 800ba42:	dded      	ble.n	800ba20 <_dtoa_r+0xa10>
 800ba44:	4649      	mov	r1, r9
 800ba46:	2201      	movs	r2, #1
 800ba48:	4658      	mov	r0, fp
 800ba4a:	f000 fafd 	bl	800c048 <__lshift>
 800ba4e:	4621      	mov	r1, r4
 800ba50:	4681      	mov	r9, r0
 800ba52:	f000 fb65 	bl	800c120 <__mcmp>
 800ba56:	2800      	cmp	r0, #0
 800ba58:	dc03      	bgt.n	800ba62 <_dtoa_r+0xa52>
 800ba5a:	d1e1      	bne.n	800ba20 <_dtoa_r+0xa10>
 800ba5c:	f018 0f01 	tst.w	r8, #1
 800ba60:	d0de      	beq.n	800ba20 <_dtoa_r+0xa10>
 800ba62:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ba66:	d1d8      	bne.n	800ba1a <_dtoa_r+0xa0a>
 800ba68:	9a00      	ldr	r2, [sp, #0]
 800ba6a:	2339      	movs	r3, #57	@ 0x39
 800ba6c:	7013      	strb	r3, [r2, #0]
 800ba6e:	4633      	mov	r3, r6
 800ba70:	461e      	mov	r6, r3
 800ba72:	3b01      	subs	r3, #1
 800ba74:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ba78:	2a39      	cmp	r2, #57	@ 0x39
 800ba7a:	d052      	beq.n	800bb22 <_dtoa_r+0xb12>
 800ba7c:	3201      	adds	r2, #1
 800ba7e:	701a      	strb	r2, [r3, #0]
 800ba80:	e612      	b.n	800b6a8 <_dtoa_r+0x698>
 800ba82:	2a00      	cmp	r2, #0
 800ba84:	dd07      	ble.n	800ba96 <_dtoa_r+0xa86>
 800ba86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ba8a:	d0ed      	beq.n	800ba68 <_dtoa_r+0xa58>
 800ba8c:	9a00      	ldr	r2, [sp, #0]
 800ba8e:	f108 0301 	add.w	r3, r8, #1
 800ba92:	7013      	strb	r3, [r2, #0]
 800ba94:	e608      	b.n	800b6a8 <_dtoa_r+0x698>
 800ba96:	9b07      	ldr	r3, [sp, #28]
 800ba98:	9a07      	ldr	r2, [sp, #28]
 800ba9a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ba9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800baa0:	4293      	cmp	r3, r2
 800baa2:	d028      	beq.n	800baf6 <_dtoa_r+0xae6>
 800baa4:	4649      	mov	r1, r9
 800baa6:	2300      	movs	r3, #0
 800baa8:	220a      	movs	r2, #10
 800baaa:	4658      	mov	r0, fp
 800baac:	f000 f920 	bl	800bcf0 <__multadd>
 800bab0:	42af      	cmp	r7, r5
 800bab2:	4681      	mov	r9, r0
 800bab4:	f04f 0300 	mov.w	r3, #0
 800bab8:	f04f 020a 	mov.w	r2, #10
 800babc:	4639      	mov	r1, r7
 800babe:	4658      	mov	r0, fp
 800bac0:	d107      	bne.n	800bad2 <_dtoa_r+0xac2>
 800bac2:	f000 f915 	bl	800bcf0 <__multadd>
 800bac6:	4607      	mov	r7, r0
 800bac8:	4605      	mov	r5, r0
 800baca:	9b07      	ldr	r3, [sp, #28]
 800bacc:	3301      	adds	r3, #1
 800bace:	9307      	str	r3, [sp, #28]
 800bad0:	e774      	b.n	800b9bc <_dtoa_r+0x9ac>
 800bad2:	f000 f90d 	bl	800bcf0 <__multadd>
 800bad6:	4629      	mov	r1, r5
 800bad8:	4607      	mov	r7, r0
 800bada:	2300      	movs	r3, #0
 800badc:	220a      	movs	r2, #10
 800bade:	4658      	mov	r0, fp
 800bae0:	f000 f906 	bl	800bcf0 <__multadd>
 800bae4:	4605      	mov	r5, r0
 800bae6:	e7f0      	b.n	800baca <_dtoa_r+0xaba>
 800bae8:	9b00      	ldr	r3, [sp, #0]
 800baea:	2b00      	cmp	r3, #0
 800baec:	bfcc      	ite	gt
 800baee:	461e      	movgt	r6, r3
 800baf0:	2601      	movle	r6, #1
 800baf2:	4456      	add	r6, sl
 800baf4:	2700      	movs	r7, #0
 800baf6:	4649      	mov	r1, r9
 800baf8:	2201      	movs	r2, #1
 800bafa:	4658      	mov	r0, fp
 800bafc:	f000 faa4 	bl	800c048 <__lshift>
 800bb00:	4621      	mov	r1, r4
 800bb02:	4681      	mov	r9, r0
 800bb04:	f000 fb0c 	bl	800c120 <__mcmp>
 800bb08:	2800      	cmp	r0, #0
 800bb0a:	dcb0      	bgt.n	800ba6e <_dtoa_r+0xa5e>
 800bb0c:	d102      	bne.n	800bb14 <_dtoa_r+0xb04>
 800bb0e:	f018 0f01 	tst.w	r8, #1
 800bb12:	d1ac      	bne.n	800ba6e <_dtoa_r+0xa5e>
 800bb14:	4633      	mov	r3, r6
 800bb16:	461e      	mov	r6, r3
 800bb18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb1c:	2a30      	cmp	r2, #48	@ 0x30
 800bb1e:	d0fa      	beq.n	800bb16 <_dtoa_r+0xb06>
 800bb20:	e5c2      	b.n	800b6a8 <_dtoa_r+0x698>
 800bb22:	459a      	cmp	sl, r3
 800bb24:	d1a4      	bne.n	800ba70 <_dtoa_r+0xa60>
 800bb26:	9b04      	ldr	r3, [sp, #16]
 800bb28:	3301      	adds	r3, #1
 800bb2a:	9304      	str	r3, [sp, #16]
 800bb2c:	2331      	movs	r3, #49	@ 0x31
 800bb2e:	f88a 3000 	strb.w	r3, [sl]
 800bb32:	e5b9      	b.n	800b6a8 <_dtoa_r+0x698>
 800bb34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bb36:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bb94 <_dtoa_r+0xb84>
 800bb3a:	b11b      	cbz	r3, 800bb44 <_dtoa_r+0xb34>
 800bb3c:	f10a 0308 	add.w	r3, sl, #8
 800bb40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bb42:	6013      	str	r3, [r2, #0]
 800bb44:	4650      	mov	r0, sl
 800bb46:	b019      	add	sp, #100	@ 0x64
 800bb48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb4e:	2b01      	cmp	r3, #1
 800bb50:	f77f ae37 	ble.w	800b7c2 <_dtoa_r+0x7b2>
 800bb54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb56:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb58:	2001      	movs	r0, #1
 800bb5a:	e655      	b.n	800b808 <_dtoa_r+0x7f8>
 800bb5c:	9b00      	ldr	r3, [sp, #0]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	f77f aed6 	ble.w	800b910 <_dtoa_r+0x900>
 800bb64:	4656      	mov	r6, sl
 800bb66:	4621      	mov	r1, r4
 800bb68:	4648      	mov	r0, r9
 800bb6a:	f7ff f9c8 	bl	800aefe <quorem>
 800bb6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bb72:	f806 8b01 	strb.w	r8, [r6], #1
 800bb76:	9b00      	ldr	r3, [sp, #0]
 800bb78:	eba6 020a 	sub.w	r2, r6, sl
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	ddb3      	ble.n	800bae8 <_dtoa_r+0xad8>
 800bb80:	4649      	mov	r1, r9
 800bb82:	2300      	movs	r3, #0
 800bb84:	220a      	movs	r2, #10
 800bb86:	4658      	mov	r0, fp
 800bb88:	f000 f8b2 	bl	800bcf0 <__multadd>
 800bb8c:	4681      	mov	r9, r0
 800bb8e:	e7ea      	b.n	800bb66 <_dtoa_r+0xb56>
 800bb90:	080113fc 	.word	0x080113fc
 800bb94:	08011380 	.word	0x08011380

0800bb98 <_free_r>:
 800bb98:	b538      	push	{r3, r4, r5, lr}
 800bb9a:	4605      	mov	r5, r0
 800bb9c:	2900      	cmp	r1, #0
 800bb9e:	d041      	beq.n	800bc24 <_free_r+0x8c>
 800bba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bba4:	1f0c      	subs	r4, r1, #4
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	bfb8      	it	lt
 800bbaa:	18e4      	addlt	r4, r4, r3
 800bbac:	f7fe fb80 	bl	800a2b0 <__malloc_lock>
 800bbb0:	4a1d      	ldr	r2, [pc, #116]	@ (800bc28 <_free_r+0x90>)
 800bbb2:	6813      	ldr	r3, [r2, #0]
 800bbb4:	b933      	cbnz	r3, 800bbc4 <_free_r+0x2c>
 800bbb6:	6063      	str	r3, [r4, #4]
 800bbb8:	6014      	str	r4, [r2, #0]
 800bbba:	4628      	mov	r0, r5
 800bbbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbc0:	f7fe bb7c 	b.w	800a2bc <__malloc_unlock>
 800bbc4:	42a3      	cmp	r3, r4
 800bbc6:	d908      	bls.n	800bbda <_free_r+0x42>
 800bbc8:	6820      	ldr	r0, [r4, #0]
 800bbca:	1821      	adds	r1, r4, r0
 800bbcc:	428b      	cmp	r3, r1
 800bbce:	bf01      	itttt	eq
 800bbd0:	6819      	ldreq	r1, [r3, #0]
 800bbd2:	685b      	ldreq	r3, [r3, #4]
 800bbd4:	1809      	addeq	r1, r1, r0
 800bbd6:	6021      	streq	r1, [r4, #0]
 800bbd8:	e7ed      	b.n	800bbb6 <_free_r+0x1e>
 800bbda:	461a      	mov	r2, r3
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	b10b      	cbz	r3, 800bbe4 <_free_r+0x4c>
 800bbe0:	42a3      	cmp	r3, r4
 800bbe2:	d9fa      	bls.n	800bbda <_free_r+0x42>
 800bbe4:	6811      	ldr	r1, [r2, #0]
 800bbe6:	1850      	adds	r0, r2, r1
 800bbe8:	42a0      	cmp	r0, r4
 800bbea:	d10b      	bne.n	800bc04 <_free_r+0x6c>
 800bbec:	6820      	ldr	r0, [r4, #0]
 800bbee:	4401      	add	r1, r0
 800bbf0:	1850      	adds	r0, r2, r1
 800bbf2:	4283      	cmp	r3, r0
 800bbf4:	6011      	str	r1, [r2, #0]
 800bbf6:	d1e0      	bne.n	800bbba <_free_r+0x22>
 800bbf8:	6818      	ldr	r0, [r3, #0]
 800bbfa:	685b      	ldr	r3, [r3, #4]
 800bbfc:	6053      	str	r3, [r2, #4]
 800bbfe:	4408      	add	r0, r1
 800bc00:	6010      	str	r0, [r2, #0]
 800bc02:	e7da      	b.n	800bbba <_free_r+0x22>
 800bc04:	d902      	bls.n	800bc0c <_free_r+0x74>
 800bc06:	230c      	movs	r3, #12
 800bc08:	602b      	str	r3, [r5, #0]
 800bc0a:	e7d6      	b.n	800bbba <_free_r+0x22>
 800bc0c:	6820      	ldr	r0, [r4, #0]
 800bc0e:	1821      	adds	r1, r4, r0
 800bc10:	428b      	cmp	r3, r1
 800bc12:	bf04      	itt	eq
 800bc14:	6819      	ldreq	r1, [r3, #0]
 800bc16:	685b      	ldreq	r3, [r3, #4]
 800bc18:	6063      	str	r3, [r4, #4]
 800bc1a:	bf04      	itt	eq
 800bc1c:	1809      	addeq	r1, r1, r0
 800bc1e:	6021      	streq	r1, [r4, #0]
 800bc20:	6054      	str	r4, [r2, #4]
 800bc22:	e7ca      	b.n	800bbba <_free_r+0x22>
 800bc24:	bd38      	pop	{r3, r4, r5, pc}
 800bc26:	bf00      	nop
 800bc28:	20000b48 	.word	0x20000b48

0800bc2c <_Balloc>:
 800bc2c:	b570      	push	{r4, r5, r6, lr}
 800bc2e:	69c6      	ldr	r6, [r0, #28]
 800bc30:	4604      	mov	r4, r0
 800bc32:	460d      	mov	r5, r1
 800bc34:	b976      	cbnz	r6, 800bc54 <_Balloc+0x28>
 800bc36:	2010      	movs	r0, #16
 800bc38:	f7fe fa90 	bl	800a15c <malloc>
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	61e0      	str	r0, [r4, #28]
 800bc40:	b920      	cbnz	r0, 800bc4c <_Balloc+0x20>
 800bc42:	4b18      	ldr	r3, [pc, #96]	@ (800bca4 <_Balloc+0x78>)
 800bc44:	4818      	ldr	r0, [pc, #96]	@ (800bca8 <_Balloc+0x7c>)
 800bc46:	216b      	movs	r1, #107	@ 0x6b
 800bc48:	f000 fd90 	bl	800c76c <__assert_func>
 800bc4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc50:	6006      	str	r6, [r0, #0]
 800bc52:	60c6      	str	r6, [r0, #12]
 800bc54:	69e6      	ldr	r6, [r4, #28]
 800bc56:	68f3      	ldr	r3, [r6, #12]
 800bc58:	b183      	cbz	r3, 800bc7c <_Balloc+0x50>
 800bc5a:	69e3      	ldr	r3, [r4, #28]
 800bc5c:	68db      	ldr	r3, [r3, #12]
 800bc5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bc62:	b9b8      	cbnz	r0, 800bc94 <_Balloc+0x68>
 800bc64:	2101      	movs	r1, #1
 800bc66:	fa01 f605 	lsl.w	r6, r1, r5
 800bc6a:	1d72      	adds	r2, r6, #5
 800bc6c:	0092      	lsls	r2, r2, #2
 800bc6e:	4620      	mov	r0, r4
 800bc70:	f000 fd9a 	bl	800c7a8 <_calloc_r>
 800bc74:	b160      	cbz	r0, 800bc90 <_Balloc+0x64>
 800bc76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bc7a:	e00e      	b.n	800bc9a <_Balloc+0x6e>
 800bc7c:	2221      	movs	r2, #33	@ 0x21
 800bc7e:	2104      	movs	r1, #4
 800bc80:	4620      	mov	r0, r4
 800bc82:	f000 fd91 	bl	800c7a8 <_calloc_r>
 800bc86:	69e3      	ldr	r3, [r4, #28]
 800bc88:	60f0      	str	r0, [r6, #12]
 800bc8a:	68db      	ldr	r3, [r3, #12]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d1e4      	bne.n	800bc5a <_Balloc+0x2e>
 800bc90:	2000      	movs	r0, #0
 800bc92:	bd70      	pop	{r4, r5, r6, pc}
 800bc94:	6802      	ldr	r2, [r0, #0]
 800bc96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bca0:	e7f7      	b.n	800bc92 <_Balloc+0x66>
 800bca2:	bf00      	nop
 800bca4:	0801138d 	.word	0x0801138d
 800bca8:	0801140d 	.word	0x0801140d

0800bcac <_Bfree>:
 800bcac:	b570      	push	{r4, r5, r6, lr}
 800bcae:	69c6      	ldr	r6, [r0, #28]
 800bcb0:	4605      	mov	r5, r0
 800bcb2:	460c      	mov	r4, r1
 800bcb4:	b976      	cbnz	r6, 800bcd4 <_Bfree+0x28>
 800bcb6:	2010      	movs	r0, #16
 800bcb8:	f7fe fa50 	bl	800a15c <malloc>
 800bcbc:	4602      	mov	r2, r0
 800bcbe:	61e8      	str	r0, [r5, #28]
 800bcc0:	b920      	cbnz	r0, 800bccc <_Bfree+0x20>
 800bcc2:	4b09      	ldr	r3, [pc, #36]	@ (800bce8 <_Bfree+0x3c>)
 800bcc4:	4809      	ldr	r0, [pc, #36]	@ (800bcec <_Bfree+0x40>)
 800bcc6:	218f      	movs	r1, #143	@ 0x8f
 800bcc8:	f000 fd50 	bl	800c76c <__assert_func>
 800bccc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bcd0:	6006      	str	r6, [r0, #0]
 800bcd2:	60c6      	str	r6, [r0, #12]
 800bcd4:	b13c      	cbz	r4, 800bce6 <_Bfree+0x3a>
 800bcd6:	69eb      	ldr	r3, [r5, #28]
 800bcd8:	6862      	ldr	r2, [r4, #4]
 800bcda:	68db      	ldr	r3, [r3, #12]
 800bcdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bce0:	6021      	str	r1, [r4, #0]
 800bce2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bce6:	bd70      	pop	{r4, r5, r6, pc}
 800bce8:	0801138d 	.word	0x0801138d
 800bcec:	0801140d 	.word	0x0801140d

0800bcf0 <__multadd>:
 800bcf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcf4:	690d      	ldr	r5, [r1, #16]
 800bcf6:	4607      	mov	r7, r0
 800bcf8:	460c      	mov	r4, r1
 800bcfa:	461e      	mov	r6, r3
 800bcfc:	f101 0c14 	add.w	ip, r1, #20
 800bd00:	2000      	movs	r0, #0
 800bd02:	f8dc 3000 	ldr.w	r3, [ip]
 800bd06:	b299      	uxth	r1, r3
 800bd08:	fb02 6101 	mla	r1, r2, r1, r6
 800bd0c:	0c1e      	lsrs	r6, r3, #16
 800bd0e:	0c0b      	lsrs	r3, r1, #16
 800bd10:	fb02 3306 	mla	r3, r2, r6, r3
 800bd14:	b289      	uxth	r1, r1
 800bd16:	3001      	adds	r0, #1
 800bd18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bd1c:	4285      	cmp	r5, r0
 800bd1e:	f84c 1b04 	str.w	r1, [ip], #4
 800bd22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bd26:	dcec      	bgt.n	800bd02 <__multadd+0x12>
 800bd28:	b30e      	cbz	r6, 800bd6e <__multadd+0x7e>
 800bd2a:	68a3      	ldr	r3, [r4, #8]
 800bd2c:	42ab      	cmp	r3, r5
 800bd2e:	dc19      	bgt.n	800bd64 <__multadd+0x74>
 800bd30:	6861      	ldr	r1, [r4, #4]
 800bd32:	4638      	mov	r0, r7
 800bd34:	3101      	adds	r1, #1
 800bd36:	f7ff ff79 	bl	800bc2c <_Balloc>
 800bd3a:	4680      	mov	r8, r0
 800bd3c:	b928      	cbnz	r0, 800bd4a <__multadd+0x5a>
 800bd3e:	4602      	mov	r2, r0
 800bd40:	4b0c      	ldr	r3, [pc, #48]	@ (800bd74 <__multadd+0x84>)
 800bd42:	480d      	ldr	r0, [pc, #52]	@ (800bd78 <__multadd+0x88>)
 800bd44:	21ba      	movs	r1, #186	@ 0xba
 800bd46:	f000 fd11 	bl	800c76c <__assert_func>
 800bd4a:	6922      	ldr	r2, [r4, #16]
 800bd4c:	3202      	adds	r2, #2
 800bd4e:	f104 010c 	add.w	r1, r4, #12
 800bd52:	0092      	lsls	r2, r2, #2
 800bd54:	300c      	adds	r0, #12
 800bd56:	f7ff f8c4 	bl	800aee2 <memcpy>
 800bd5a:	4621      	mov	r1, r4
 800bd5c:	4638      	mov	r0, r7
 800bd5e:	f7ff ffa5 	bl	800bcac <_Bfree>
 800bd62:	4644      	mov	r4, r8
 800bd64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bd68:	3501      	adds	r5, #1
 800bd6a:	615e      	str	r6, [r3, #20]
 800bd6c:	6125      	str	r5, [r4, #16]
 800bd6e:	4620      	mov	r0, r4
 800bd70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd74:	080113fc 	.word	0x080113fc
 800bd78:	0801140d 	.word	0x0801140d

0800bd7c <__hi0bits>:
 800bd7c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bd80:	4603      	mov	r3, r0
 800bd82:	bf36      	itet	cc
 800bd84:	0403      	lslcc	r3, r0, #16
 800bd86:	2000      	movcs	r0, #0
 800bd88:	2010      	movcc	r0, #16
 800bd8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bd8e:	bf3c      	itt	cc
 800bd90:	021b      	lslcc	r3, r3, #8
 800bd92:	3008      	addcc	r0, #8
 800bd94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bd98:	bf3c      	itt	cc
 800bd9a:	011b      	lslcc	r3, r3, #4
 800bd9c:	3004      	addcc	r0, #4
 800bd9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bda2:	bf3c      	itt	cc
 800bda4:	009b      	lslcc	r3, r3, #2
 800bda6:	3002      	addcc	r0, #2
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	db05      	blt.n	800bdb8 <__hi0bits+0x3c>
 800bdac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bdb0:	f100 0001 	add.w	r0, r0, #1
 800bdb4:	bf08      	it	eq
 800bdb6:	2020      	moveq	r0, #32
 800bdb8:	4770      	bx	lr

0800bdba <__lo0bits>:
 800bdba:	6803      	ldr	r3, [r0, #0]
 800bdbc:	4602      	mov	r2, r0
 800bdbe:	f013 0007 	ands.w	r0, r3, #7
 800bdc2:	d00b      	beq.n	800bddc <__lo0bits+0x22>
 800bdc4:	07d9      	lsls	r1, r3, #31
 800bdc6:	d421      	bmi.n	800be0c <__lo0bits+0x52>
 800bdc8:	0798      	lsls	r0, r3, #30
 800bdca:	bf49      	itett	mi
 800bdcc:	085b      	lsrmi	r3, r3, #1
 800bdce:	089b      	lsrpl	r3, r3, #2
 800bdd0:	2001      	movmi	r0, #1
 800bdd2:	6013      	strmi	r3, [r2, #0]
 800bdd4:	bf5c      	itt	pl
 800bdd6:	6013      	strpl	r3, [r2, #0]
 800bdd8:	2002      	movpl	r0, #2
 800bdda:	4770      	bx	lr
 800bddc:	b299      	uxth	r1, r3
 800bdde:	b909      	cbnz	r1, 800bde4 <__lo0bits+0x2a>
 800bde0:	0c1b      	lsrs	r3, r3, #16
 800bde2:	2010      	movs	r0, #16
 800bde4:	b2d9      	uxtb	r1, r3
 800bde6:	b909      	cbnz	r1, 800bdec <__lo0bits+0x32>
 800bde8:	3008      	adds	r0, #8
 800bdea:	0a1b      	lsrs	r3, r3, #8
 800bdec:	0719      	lsls	r1, r3, #28
 800bdee:	bf04      	itt	eq
 800bdf0:	091b      	lsreq	r3, r3, #4
 800bdf2:	3004      	addeq	r0, #4
 800bdf4:	0799      	lsls	r1, r3, #30
 800bdf6:	bf04      	itt	eq
 800bdf8:	089b      	lsreq	r3, r3, #2
 800bdfa:	3002      	addeq	r0, #2
 800bdfc:	07d9      	lsls	r1, r3, #31
 800bdfe:	d403      	bmi.n	800be08 <__lo0bits+0x4e>
 800be00:	085b      	lsrs	r3, r3, #1
 800be02:	f100 0001 	add.w	r0, r0, #1
 800be06:	d003      	beq.n	800be10 <__lo0bits+0x56>
 800be08:	6013      	str	r3, [r2, #0]
 800be0a:	4770      	bx	lr
 800be0c:	2000      	movs	r0, #0
 800be0e:	4770      	bx	lr
 800be10:	2020      	movs	r0, #32
 800be12:	4770      	bx	lr

0800be14 <__i2b>:
 800be14:	b510      	push	{r4, lr}
 800be16:	460c      	mov	r4, r1
 800be18:	2101      	movs	r1, #1
 800be1a:	f7ff ff07 	bl	800bc2c <_Balloc>
 800be1e:	4602      	mov	r2, r0
 800be20:	b928      	cbnz	r0, 800be2e <__i2b+0x1a>
 800be22:	4b05      	ldr	r3, [pc, #20]	@ (800be38 <__i2b+0x24>)
 800be24:	4805      	ldr	r0, [pc, #20]	@ (800be3c <__i2b+0x28>)
 800be26:	f240 1145 	movw	r1, #325	@ 0x145
 800be2a:	f000 fc9f 	bl	800c76c <__assert_func>
 800be2e:	2301      	movs	r3, #1
 800be30:	6144      	str	r4, [r0, #20]
 800be32:	6103      	str	r3, [r0, #16]
 800be34:	bd10      	pop	{r4, pc}
 800be36:	bf00      	nop
 800be38:	080113fc 	.word	0x080113fc
 800be3c:	0801140d 	.word	0x0801140d

0800be40 <__multiply>:
 800be40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be44:	4614      	mov	r4, r2
 800be46:	690a      	ldr	r2, [r1, #16]
 800be48:	6923      	ldr	r3, [r4, #16]
 800be4a:	429a      	cmp	r2, r3
 800be4c:	bfa8      	it	ge
 800be4e:	4623      	movge	r3, r4
 800be50:	460f      	mov	r7, r1
 800be52:	bfa4      	itt	ge
 800be54:	460c      	movge	r4, r1
 800be56:	461f      	movge	r7, r3
 800be58:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800be5c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800be60:	68a3      	ldr	r3, [r4, #8]
 800be62:	6861      	ldr	r1, [r4, #4]
 800be64:	eb0a 0609 	add.w	r6, sl, r9
 800be68:	42b3      	cmp	r3, r6
 800be6a:	b085      	sub	sp, #20
 800be6c:	bfb8      	it	lt
 800be6e:	3101      	addlt	r1, #1
 800be70:	f7ff fedc 	bl	800bc2c <_Balloc>
 800be74:	b930      	cbnz	r0, 800be84 <__multiply+0x44>
 800be76:	4602      	mov	r2, r0
 800be78:	4b44      	ldr	r3, [pc, #272]	@ (800bf8c <__multiply+0x14c>)
 800be7a:	4845      	ldr	r0, [pc, #276]	@ (800bf90 <__multiply+0x150>)
 800be7c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800be80:	f000 fc74 	bl	800c76c <__assert_func>
 800be84:	f100 0514 	add.w	r5, r0, #20
 800be88:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800be8c:	462b      	mov	r3, r5
 800be8e:	2200      	movs	r2, #0
 800be90:	4543      	cmp	r3, r8
 800be92:	d321      	bcc.n	800bed8 <__multiply+0x98>
 800be94:	f107 0114 	add.w	r1, r7, #20
 800be98:	f104 0214 	add.w	r2, r4, #20
 800be9c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bea0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bea4:	9302      	str	r3, [sp, #8]
 800bea6:	1b13      	subs	r3, r2, r4
 800bea8:	3b15      	subs	r3, #21
 800beaa:	f023 0303 	bic.w	r3, r3, #3
 800beae:	3304      	adds	r3, #4
 800beb0:	f104 0715 	add.w	r7, r4, #21
 800beb4:	42ba      	cmp	r2, r7
 800beb6:	bf38      	it	cc
 800beb8:	2304      	movcc	r3, #4
 800beba:	9301      	str	r3, [sp, #4]
 800bebc:	9b02      	ldr	r3, [sp, #8]
 800bebe:	9103      	str	r1, [sp, #12]
 800bec0:	428b      	cmp	r3, r1
 800bec2:	d80c      	bhi.n	800bede <__multiply+0x9e>
 800bec4:	2e00      	cmp	r6, #0
 800bec6:	dd03      	ble.n	800bed0 <__multiply+0x90>
 800bec8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800becc:	2b00      	cmp	r3, #0
 800bece:	d05b      	beq.n	800bf88 <__multiply+0x148>
 800bed0:	6106      	str	r6, [r0, #16]
 800bed2:	b005      	add	sp, #20
 800bed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bed8:	f843 2b04 	str.w	r2, [r3], #4
 800bedc:	e7d8      	b.n	800be90 <__multiply+0x50>
 800bede:	f8b1 a000 	ldrh.w	sl, [r1]
 800bee2:	f1ba 0f00 	cmp.w	sl, #0
 800bee6:	d024      	beq.n	800bf32 <__multiply+0xf2>
 800bee8:	f104 0e14 	add.w	lr, r4, #20
 800beec:	46a9      	mov	r9, r5
 800beee:	f04f 0c00 	mov.w	ip, #0
 800bef2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bef6:	f8d9 3000 	ldr.w	r3, [r9]
 800befa:	fa1f fb87 	uxth.w	fp, r7
 800befe:	b29b      	uxth	r3, r3
 800bf00:	fb0a 330b 	mla	r3, sl, fp, r3
 800bf04:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bf08:	f8d9 7000 	ldr.w	r7, [r9]
 800bf0c:	4463      	add	r3, ip
 800bf0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bf12:	fb0a c70b 	mla	r7, sl, fp, ip
 800bf16:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bf20:	4572      	cmp	r2, lr
 800bf22:	f849 3b04 	str.w	r3, [r9], #4
 800bf26:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bf2a:	d8e2      	bhi.n	800bef2 <__multiply+0xb2>
 800bf2c:	9b01      	ldr	r3, [sp, #4]
 800bf2e:	f845 c003 	str.w	ip, [r5, r3]
 800bf32:	9b03      	ldr	r3, [sp, #12]
 800bf34:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bf38:	3104      	adds	r1, #4
 800bf3a:	f1b9 0f00 	cmp.w	r9, #0
 800bf3e:	d021      	beq.n	800bf84 <__multiply+0x144>
 800bf40:	682b      	ldr	r3, [r5, #0]
 800bf42:	f104 0c14 	add.w	ip, r4, #20
 800bf46:	46ae      	mov	lr, r5
 800bf48:	f04f 0a00 	mov.w	sl, #0
 800bf4c:	f8bc b000 	ldrh.w	fp, [ip]
 800bf50:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bf54:	fb09 770b 	mla	r7, r9, fp, r7
 800bf58:	4457      	add	r7, sl
 800bf5a:	b29b      	uxth	r3, r3
 800bf5c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bf60:	f84e 3b04 	str.w	r3, [lr], #4
 800bf64:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bf68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf6c:	f8be 3000 	ldrh.w	r3, [lr]
 800bf70:	fb09 330a 	mla	r3, r9, sl, r3
 800bf74:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bf78:	4562      	cmp	r2, ip
 800bf7a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf7e:	d8e5      	bhi.n	800bf4c <__multiply+0x10c>
 800bf80:	9f01      	ldr	r7, [sp, #4]
 800bf82:	51eb      	str	r3, [r5, r7]
 800bf84:	3504      	adds	r5, #4
 800bf86:	e799      	b.n	800bebc <__multiply+0x7c>
 800bf88:	3e01      	subs	r6, #1
 800bf8a:	e79b      	b.n	800bec4 <__multiply+0x84>
 800bf8c:	080113fc 	.word	0x080113fc
 800bf90:	0801140d 	.word	0x0801140d

0800bf94 <__pow5mult>:
 800bf94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf98:	4615      	mov	r5, r2
 800bf9a:	f012 0203 	ands.w	r2, r2, #3
 800bf9e:	4607      	mov	r7, r0
 800bfa0:	460e      	mov	r6, r1
 800bfa2:	d007      	beq.n	800bfb4 <__pow5mult+0x20>
 800bfa4:	4c25      	ldr	r4, [pc, #148]	@ (800c03c <__pow5mult+0xa8>)
 800bfa6:	3a01      	subs	r2, #1
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bfae:	f7ff fe9f 	bl	800bcf0 <__multadd>
 800bfb2:	4606      	mov	r6, r0
 800bfb4:	10ad      	asrs	r5, r5, #2
 800bfb6:	d03d      	beq.n	800c034 <__pow5mult+0xa0>
 800bfb8:	69fc      	ldr	r4, [r7, #28]
 800bfba:	b97c      	cbnz	r4, 800bfdc <__pow5mult+0x48>
 800bfbc:	2010      	movs	r0, #16
 800bfbe:	f7fe f8cd 	bl	800a15c <malloc>
 800bfc2:	4602      	mov	r2, r0
 800bfc4:	61f8      	str	r0, [r7, #28]
 800bfc6:	b928      	cbnz	r0, 800bfd4 <__pow5mult+0x40>
 800bfc8:	4b1d      	ldr	r3, [pc, #116]	@ (800c040 <__pow5mult+0xac>)
 800bfca:	481e      	ldr	r0, [pc, #120]	@ (800c044 <__pow5mult+0xb0>)
 800bfcc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bfd0:	f000 fbcc 	bl	800c76c <__assert_func>
 800bfd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bfd8:	6004      	str	r4, [r0, #0]
 800bfda:	60c4      	str	r4, [r0, #12]
 800bfdc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bfe0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bfe4:	b94c      	cbnz	r4, 800bffa <__pow5mult+0x66>
 800bfe6:	f240 2171 	movw	r1, #625	@ 0x271
 800bfea:	4638      	mov	r0, r7
 800bfec:	f7ff ff12 	bl	800be14 <__i2b>
 800bff0:	2300      	movs	r3, #0
 800bff2:	f8c8 0008 	str.w	r0, [r8, #8]
 800bff6:	4604      	mov	r4, r0
 800bff8:	6003      	str	r3, [r0, #0]
 800bffa:	f04f 0900 	mov.w	r9, #0
 800bffe:	07eb      	lsls	r3, r5, #31
 800c000:	d50a      	bpl.n	800c018 <__pow5mult+0x84>
 800c002:	4631      	mov	r1, r6
 800c004:	4622      	mov	r2, r4
 800c006:	4638      	mov	r0, r7
 800c008:	f7ff ff1a 	bl	800be40 <__multiply>
 800c00c:	4631      	mov	r1, r6
 800c00e:	4680      	mov	r8, r0
 800c010:	4638      	mov	r0, r7
 800c012:	f7ff fe4b 	bl	800bcac <_Bfree>
 800c016:	4646      	mov	r6, r8
 800c018:	106d      	asrs	r5, r5, #1
 800c01a:	d00b      	beq.n	800c034 <__pow5mult+0xa0>
 800c01c:	6820      	ldr	r0, [r4, #0]
 800c01e:	b938      	cbnz	r0, 800c030 <__pow5mult+0x9c>
 800c020:	4622      	mov	r2, r4
 800c022:	4621      	mov	r1, r4
 800c024:	4638      	mov	r0, r7
 800c026:	f7ff ff0b 	bl	800be40 <__multiply>
 800c02a:	6020      	str	r0, [r4, #0]
 800c02c:	f8c0 9000 	str.w	r9, [r0]
 800c030:	4604      	mov	r4, r0
 800c032:	e7e4      	b.n	800bffe <__pow5mult+0x6a>
 800c034:	4630      	mov	r0, r6
 800c036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c03a:	bf00      	nop
 800c03c:	08011468 	.word	0x08011468
 800c040:	0801138d 	.word	0x0801138d
 800c044:	0801140d 	.word	0x0801140d

0800c048 <__lshift>:
 800c048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c04c:	460c      	mov	r4, r1
 800c04e:	6849      	ldr	r1, [r1, #4]
 800c050:	6923      	ldr	r3, [r4, #16]
 800c052:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c056:	68a3      	ldr	r3, [r4, #8]
 800c058:	4607      	mov	r7, r0
 800c05a:	4691      	mov	r9, r2
 800c05c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c060:	f108 0601 	add.w	r6, r8, #1
 800c064:	42b3      	cmp	r3, r6
 800c066:	db0b      	blt.n	800c080 <__lshift+0x38>
 800c068:	4638      	mov	r0, r7
 800c06a:	f7ff fddf 	bl	800bc2c <_Balloc>
 800c06e:	4605      	mov	r5, r0
 800c070:	b948      	cbnz	r0, 800c086 <__lshift+0x3e>
 800c072:	4602      	mov	r2, r0
 800c074:	4b28      	ldr	r3, [pc, #160]	@ (800c118 <__lshift+0xd0>)
 800c076:	4829      	ldr	r0, [pc, #164]	@ (800c11c <__lshift+0xd4>)
 800c078:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c07c:	f000 fb76 	bl	800c76c <__assert_func>
 800c080:	3101      	adds	r1, #1
 800c082:	005b      	lsls	r3, r3, #1
 800c084:	e7ee      	b.n	800c064 <__lshift+0x1c>
 800c086:	2300      	movs	r3, #0
 800c088:	f100 0114 	add.w	r1, r0, #20
 800c08c:	f100 0210 	add.w	r2, r0, #16
 800c090:	4618      	mov	r0, r3
 800c092:	4553      	cmp	r3, sl
 800c094:	db33      	blt.n	800c0fe <__lshift+0xb6>
 800c096:	6920      	ldr	r0, [r4, #16]
 800c098:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c09c:	f104 0314 	add.w	r3, r4, #20
 800c0a0:	f019 091f 	ands.w	r9, r9, #31
 800c0a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c0a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c0ac:	d02b      	beq.n	800c106 <__lshift+0xbe>
 800c0ae:	f1c9 0e20 	rsb	lr, r9, #32
 800c0b2:	468a      	mov	sl, r1
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	6818      	ldr	r0, [r3, #0]
 800c0b8:	fa00 f009 	lsl.w	r0, r0, r9
 800c0bc:	4310      	orrs	r0, r2
 800c0be:	f84a 0b04 	str.w	r0, [sl], #4
 800c0c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0c6:	459c      	cmp	ip, r3
 800c0c8:	fa22 f20e 	lsr.w	r2, r2, lr
 800c0cc:	d8f3      	bhi.n	800c0b6 <__lshift+0x6e>
 800c0ce:	ebac 0304 	sub.w	r3, ip, r4
 800c0d2:	3b15      	subs	r3, #21
 800c0d4:	f023 0303 	bic.w	r3, r3, #3
 800c0d8:	3304      	adds	r3, #4
 800c0da:	f104 0015 	add.w	r0, r4, #21
 800c0de:	4584      	cmp	ip, r0
 800c0e0:	bf38      	it	cc
 800c0e2:	2304      	movcc	r3, #4
 800c0e4:	50ca      	str	r2, [r1, r3]
 800c0e6:	b10a      	cbz	r2, 800c0ec <__lshift+0xa4>
 800c0e8:	f108 0602 	add.w	r6, r8, #2
 800c0ec:	3e01      	subs	r6, #1
 800c0ee:	4638      	mov	r0, r7
 800c0f0:	612e      	str	r6, [r5, #16]
 800c0f2:	4621      	mov	r1, r4
 800c0f4:	f7ff fdda 	bl	800bcac <_Bfree>
 800c0f8:	4628      	mov	r0, r5
 800c0fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800c102:	3301      	adds	r3, #1
 800c104:	e7c5      	b.n	800c092 <__lshift+0x4a>
 800c106:	3904      	subs	r1, #4
 800c108:	f853 2b04 	ldr.w	r2, [r3], #4
 800c10c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c110:	459c      	cmp	ip, r3
 800c112:	d8f9      	bhi.n	800c108 <__lshift+0xc0>
 800c114:	e7ea      	b.n	800c0ec <__lshift+0xa4>
 800c116:	bf00      	nop
 800c118:	080113fc 	.word	0x080113fc
 800c11c:	0801140d 	.word	0x0801140d

0800c120 <__mcmp>:
 800c120:	690a      	ldr	r2, [r1, #16]
 800c122:	4603      	mov	r3, r0
 800c124:	6900      	ldr	r0, [r0, #16]
 800c126:	1a80      	subs	r0, r0, r2
 800c128:	b530      	push	{r4, r5, lr}
 800c12a:	d10e      	bne.n	800c14a <__mcmp+0x2a>
 800c12c:	3314      	adds	r3, #20
 800c12e:	3114      	adds	r1, #20
 800c130:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c134:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c138:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c13c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c140:	4295      	cmp	r5, r2
 800c142:	d003      	beq.n	800c14c <__mcmp+0x2c>
 800c144:	d205      	bcs.n	800c152 <__mcmp+0x32>
 800c146:	f04f 30ff 	mov.w	r0, #4294967295
 800c14a:	bd30      	pop	{r4, r5, pc}
 800c14c:	42a3      	cmp	r3, r4
 800c14e:	d3f3      	bcc.n	800c138 <__mcmp+0x18>
 800c150:	e7fb      	b.n	800c14a <__mcmp+0x2a>
 800c152:	2001      	movs	r0, #1
 800c154:	e7f9      	b.n	800c14a <__mcmp+0x2a>
	...

0800c158 <__mdiff>:
 800c158:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c15c:	4689      	mov	r9, r1
 800c15e:	4606      	mov	r6, r0
 800c160:	4611      	mov	r1, r2
 800c162:	4648      	mov	r0, r9
 800c164:	4614      	mov	r4, r2
 800c166:	f7ff ffdb 	bl	800c120 <__mcmp>
 800c16a:	1e05      	subs	r5, r0, #0
 800c16c:	d112      	bne.n	800c194 <__mdiff+0x3c>
 800c16e:	4629      	mov	r1, r5
 800c170:	4630      	mov	r0, r6
 800c172:	f7ff fd5b 	bl	800bc2c <_Balloc>
 800c176:	4602      	mov	r2, r0
 800c178:	b928      	cbnz	r0, 800c186 <__mdiff+0x2e>
 800c17a:	4b3f      	ldr	r3, [pc, #252]	@ (800c278 <__mdiff+0x120>)
 800c17c:	f240 2137 	movw	r1, #567	@ 0x237
 800c180:	483e      	ldr	r0, [pc, #248]	@ (800c27c <__mdiff+0x124>)
 800c182:	f000 faf3 	bl	800c76c <__assert_func>
 800c186:	2301      	movs	r3, #1
 800c188:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c18c:	4610      	mov	r0, r2
 800c18e:	b003      	add	sp, #12
 800c190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c194:	bfbc      	itt	lt
 800c196:	464b      	movlt	r3, r9
 800c198:	46a1      	movlt	r9, r4
 800c19a:	4630      	mov	r0, r6
 800c19c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c1a0:	bfba      	itte	lt
 800c1a2:	461c      	movlt	r4, r3
 800c1a4:	2501      	movlt	r5, #1
 800c1a6:	2500      	movge	r5, #0
 800c1a8:	f7ff fd40 	bl	800bc2c <_Balloc>
 800c1ac:	4602      	mov	r2, r0
 800c1ae:	b918      	cbnz	r0, 800c1b8 <__mdiff+0x60>
 800c1b0:	4b31      	ldr	r3, [pc, #196]	@ (800c278 <__mdiff+0x120>)
 800c1b2:	f240 2145 	movw	r1, #581	@ 0x245
 800c1b6:	e7e3      	b.n	800c180 <__mdiff+0x28>
 800c1b8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c1bc:	6926      	ldr	r6, [r4, #16]
 800c1be:	60c5      	str	r5, [r0, #12]
 800c1c0:	f109 0310 	add.w	r3, r9, #16
 800c1c4:	f109 0514 	add.w	r5, r9, #20
 800c1c8:	f104 0e14 	add.w	lr, r4, #20
 800c1cc:	f100 0b14 	add.w	fp, r0, #20
 800c1d0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c1d4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c1d8:	9301      	str	r3, [sp, #4]
 800c1da:	46d9      	mov	r9, fp
 800c1dc:	f04f 0c00 	mov.w	ip, #0
 800c1e0:	9b01      	ldr	r3, [sp, #4]
 800c1e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c1e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c1ea:	9301      	str	r3, [sp, #4]
 800c1ec:	fa1f f38a 	uxth.w	r3, sl
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	b283      	uxth	r3, r0
 800c1f4:	1acb      	subs	r3, r1, r3
 800c1f6:	0c00      	lsrs	r0, r0, #16
 800c1f8:	4463      	add	r3, ip
 800c1fa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c1fe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c202:	b29b      	uxth	r3, r3
 800c204:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c208:	4576      	cmp	r6, lr
 800c20a:	f849 3b04 	str.w	r3, [r9], #4
 800c20e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c212:	d8e5      	bhi.n	800c1e0 <__mdiff+0x88>
 800c214:	1b33      	subs	r3, r6, r4
 800c216:	3b15      	subs	r3, #21
 800c218:	f023 0303 	bic.w	r3, r3, #3
 800c21c:	3415      	adds	r4, #21
 800c21e:	3304      	adds	r3, #4
 800c220:	42a6      	cmp	r6, r4
 800c222:	bf38      	it	cc
 800c224:	2304      	movcc	r3, #4
 800c226:	441d      	add	r5, r3
 800c228:	445b      	add	r3, fp
 800c22a:	461e      	mov	r6, r3
 800c22c:	462c      	mov	r4, r5
 800c22e:	4544      	cmp	r4, r8
 800c230:	d30e      	bcc.n	800c250 <__mdiff+0xf8>
 800c232:	f108 0103 	add.w	r1, r8, #3
 800c236:	1b49      	subs	r1, r1, r5
 800c238:	f021 0103 	bic.w	r1, r1, #3
 800c23c:	3d03      	subs	r5, #3
 800c23e:	45a8      	cmp	r8, r5
 800c240:	bf38      	it	cc
 800c242:	2100      	movcc	r1, #0
 800c244:	440b      	add	r3, r1
 800c246:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c24a:	b191      	cbz	r1, 800c272 <__mdiff+0x11a>
 800c24c:	6117      	str	r7, [r2, #16]
 800c24e:	e79d      	b.n	800c18c <__mdiff+0x34>
 800c250:	f854 1b04 	ldr.w	r1, [r4], #4
 800c254:	46e6      	mov	lr, ip
 800c256:	0c08      	lsrs	r0, r1, #16
 800c258:	fa1c fc81 	uxtah	ip, ip, r1
 800c25c:	4471      	add	r1, lr
 800c25e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c262:	b289      	uxth	r1, r1
 800c264:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c268:	f846 1b04 	str.w	r1, [r6], #4
 800c26c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c270:	e7dd      	b.n	800c22e <__mdiff+0xd6>
 800c272:	3f01      	subs	r7, #1
 800c274:	e7e7      	b.n	800c246 <__mdiff+0xee>
 800c276:	bf00      	nop
 800c278:	080113fc 	.word	0x080113fc
 800c27c:	0801140d 	.word	0x0801140d

0800c280 <__d2b>:
 800c280:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c284:	460f      	mov	r7, r1
 800c286:	2101      	movs	r1, #1
 800c288:	ec59 8b10 	vmov	r8, r9, d0
 800c28c:	4616      	mov	r6, r2
 800c28e:	f7ff fccd 	bl	800bc2c <_Balloc>
 800c292:	4604      	mov	r4, r0
 800c294:	b930      	cbnz	r0, 800c2a4 <__d2b+0x24>
 800c296:	4602      	mov	r2, r0
 800c298:	4b23      	ldr	r3, [pc, #140]	@ (800c328 <__d2b+0xa8>)
 800c29a:	4824      	ldr	r0, [pc, #144]	@ (800c32c <__d2b+0xac>)
 800c29c:	f240 310f 	movw	r1, #783	@ 0x30f
 800c2a0:	f000 fa64 	bl	800c76c <__assert_func>
 800c2a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c2a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c2ac:	b10d      	cbz	r5, 800c2b2 <__d2b+0x32>
 800c2ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c2b2:	9301      	str	r3, [sp, #4]
 800c2b4:	f1b8 0300 	subs.w	r3, r8, #0
 800c2b8:	d023      	beq.n	800c302 <__d2b+0x82>
 800c2ba:	4668      	mov	r0, sp
 800c2bc:	9300      	str	r3, [sp, #0]
 800c2be:	f7ff fd7c 	bl	800bdba <__lo0bits>
 800c2c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c2c6:	b1d0      	cbz	r0, 800c2fe <__d2b+0x7e>
 800c2c8:	f1c0 0320 	rsb	r3, r0, #32
 800c2cc:	fa02 f303 	lsl.w	r3, r2, r3
 800c2d0:	430b      	orrs	r3, r1
 800c2d2:	40c2      	lsrs	r2, r0
 800c2d4:	6163      	str	r3, [r4, #20]
 800c2d6:	9201      	str	r2, [sp, #4]
 800c2d8:	9b01      	ldr	r3, [sp, #4]
 800c2da:	61a3      	str	r3, [r4, #24]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	bf0c      	ite	eq
 800c2e0:	2201      	moveq	r2, #1
 800c2e2:	2202      	movne	r2, #2
 800c2e4:	6122      	str	r2, [r4, #16]
 800c2e6:	b1a5      	cbz	r5, 800c312 <__d2b+0x92>
 800c2e8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c2ec:	4405      	add	r5, r0
 800c2ee:	603d      	str	r5, [r7, #0]
 800c2f0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c2f4:	6030      	str	r0, [r6, #0]
 800c2f6:	4620      	mov	r0, r4
 800c2f8:	b003      	add	sp, #12
 800c2fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2fe:	6161      	str	r1, [r4, #20]
 800c300:	e7ea      	b.n	800c2d8 <__d2b+0x58>
 800c302:	a801      	add	r0, sp, #4
 800c304:	f7ff fd59 	bl	800bdba <__lo0bits>
 800c308:	9b01      	ldr	r3, [sp, #4]
 800c30a:	6163      	str	r3, [r4, #20]
 800c30c:	3020      	adds	r0, #32
 800c30e:	2201      	movs	r2, #1
 800c310:	e7e8      	b.n	800c2e4 <__d2b+0x64>
 800c312:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c316:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c31a:	6038      	str	r0, [r7, #0]
 800c31c:	6918      	ldr	r0, [r3, #16]
 800c31e:	f7ff fd2d 	bl	800bd7c <__hi0bits>
 800c322:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c326:	e7e5      	b.n	800c2f4 <__d2b+0x74>
 800c328:	080113fc 	.word	0x080113fc
 800c32c:	0801140d 	.word	0x0801140d

0800c330 <__ssputs_r>:
 800c330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c334:	688e      	ldr	r6, [r1, #8]
 800c336:	461f      	mov	r7, r3
 800c338:	42be      	cmp	r6, r7
 800c33a:	680b      	ldr	r3, [r1, #0]
 800c33c:	4682      	mov	sl, r0
 800c33e:	460c      	mov	r4, r1
 800c340:	4690      	mov	r8, r2
 800c342:	d82d      	bhi.n	800c3a0 <__ssputs_r+0x70>
 800c344:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c348:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c34c:	d026      	beq.n	800c39c <__ssputs_r+0x6c>
 800c34e:	6965      	ldr	r5, [r4, #20]
 800c350:	6909      	ldr	r1, [r1, #16]
 800c352:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c356:	eba3 0901 	sub.w	r9, r3, r1
 800c35a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c35e:	1c7b      	adds	r3, r7, #1
 800c360:	444b      	add	r3, r9
 800c362:	106d      	asrs	r5, r5, #1
 800c364:	429d      	cmp	r5, r3
 800c366:	bf38      	it	cc
 800c368:	461d      	movcc	r5, r3
 800c36a:	0553      	lsls	r3, r2, #21
 800c36c:	d527      	bpl.n	800c3be <__ssputs_r+0x8e>
 800c36e:	4629      	mov	r1, r5
 800c370:	f7fd ff1e 	bl	800a1b0 <_malloc_r>
 800c374:	4606      	mov	r6, r0
 800c376:	b360      	cbz	r0, 800c3d2 <__ssputs_r+0xa2>
 800c378:	6921      	ldr	r1, [r4, #16]
 800c37a:	464a      	mov	r2, r9
 800c37c:	f7fe fdb1 	bl	800aee2 <memcpy>
 800c380:	89a3      	ldrh	r3, [r4, #12]
 800c382:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c386:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c38a:	81a3      	strh	r3, [r4, #12]
 800c38c:	6126      	str	r6, [r4, #16]
 800c38e:	6165      	str	r5, [r4, #20]
 800c390:	444e      	add	r6, r9
 800c392:	eba5 0509 	sub.w	r5, r5, r9
 800c396:	6026      	str	r6, [r4, #0]
 800c398:	60a5      	str	r5, [r4, #8]
 800c39a:	463e      	mov	r6, r7
 800c39c:	42be      	cmp	r6, r7
 800c39e:	d900      	bls.n	800c3a2 <__ssputs_r+0x72>
 800c3a0:	463e      	mov	r6, r7
 800c3a2:	6820      	ldr	r0, [r4, #0]
 800c3a4:	4632      	mov	r2, r6
 800c3a6:	4641      	mov	r1, r8
 800c3a8:	f000 f9c6 	bl	800c738 <memmove>
 800c3ac:	68a3      	ldr	r3, [r4, #8]
 800c3ae:	1b9b      	subs	r3, r3, r6
 800c3b0:	60a3      	str	r3, [r4, #8]
 800c3b2:	6823      	ldr	r3, [r4, #0]
 800c3b4:	4433      	add	r3, r6
 800c3b6:	6023      	str	r3, [r4, #0]
 800c3b8:	2000      	movs	r0, #0
 800c3ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3be:	462a      	mov	r2, r5
 800c3c0:	f000 fa18 	bl	800c7f4 <_realloc_r>
 800c3c4:	4606      	mov	r6, r0
 800c3c6:	2800      	cmp	r0, #0
 800c3c8:	d1e0      	bne.n	800c38c <__ssputs_r+0x5c>
 800c3ca:	6921      	ldr	r1, [r4, #16]
 800c3cc:	4650      	mov	r0, sl
 800c3ce:	f7ff fbe3 	bl	800bb98 <_free_r>
 800c3d2:	230c      	movs	r3, #12
 800c3d4:	f8ca 3000 	str.w	r3, [sl]
 800c3d8:	89a3      	ldrh	r3, [r4, #12]
 800c3da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3de:	81a3      	strh	r3, [r4, #12]
 800c3e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c3e4:	e7e9      	b.n	800c3ba <__ssputs_r+0x8a>
	...

0800c3e8 <_svfiprintf_r>:
 800c3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ec:	4698      	mov	r8, r3
 800c3ee:	898b      	ldrh	r3, [r1, #12]
 800c3f0:	061b      	lsls	r3, r3, #24
 800c3f2:	b09d      	sub	sp, #116	@ 0x74
 800c3f4:	4607      	mov	r7, r0
 800c3f6:	460d      	mov	r5, r1
 800c3f8:	4614      	mov	r4, r2
 800c3fa:	d510      	bpl.n	800c41e <_svfiprintf_r+0x36>
 800c3fc:	690b      	ldr	r3, [r1, #16]
 800c3fe:	b973      	cbnz	r3, 800c41e <_svfiprintf_r+0x36>
 800c400:	2140      	movs	r1, #64	@ 0x40
 800c402:	f7fd fed5 	bl	800a1b0 <_malloc_r>
 800c406:	6028      	str	r0, [r5, #0]
 800c408:	6128      	str	r0, [r5, #16]
 800c40a:	b930      	cbnz	r0, 800c41a <_svfiprintf_r+0x32>
 800c40c:	230c      	movs	r3, #12
 800c40e:	603b      	str	r3, [r7, #0]
 800c410:	f04f 30ff 	mov.w	r0, #4294967295
 800c414:	b01d      	add	sp, #116	@ 0x74
 800c416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c41a:	2340      	movs	r3, #64	@ 0x40
 800c41c:	616b      	str	r3, [r5, #20]
 800c41e:	2300      	movs	r3, #0
 800c420:	9309      	str	r3, [sp, #36]	@ 0x24
 800c422:	2320      	movs	r3, #32
 800c424:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c428:	f8cd 800c 	str.w	r8, [sp, #12]
 800c42c:	2330      	movs	r3, #48	@ 0x30
 800c42e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c5cc <_svfiprintf_r+0x1e4>
 800c432:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c436:	f04f 0901 	mov.w	r9, #1
 800c43a:	4623      	mov	r3, r4
 800c43c:	469a      	mov	sl, r3
 800c43e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c442:	b10a      	cbz	r2, 800c448 <_svfiprintf_r+0x60>
 800c444:	2a25      	cmp	r2, #37	@ 0x25
 800c446:	d1f9      	bne.n	800c43c <_svfiprintf_r+0x54>
 800c448:	ebba 0b04 	subs.w	fp, sl, r4
 800c44c:	d00b      	beq.n	800c466 <_svfiprintf_r+0x7e>
 800c44e:	465b      	mov	r3, fp
 800c450:	4622      	mov	r2, r4
 800c452:	4629      	mov	r1, r5
 800c454:	4638      	mov	r0, r7
 800c456:	f7ff ff6b 	bl	800c330 <__ssputs_r>
 800c45a:	3001      	adds	r0, #1
 800c45c:	f000 80a7 	beq.w	800c5ae <_svfiprintf_r+0x1c6>
 800c460:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c462:	445a      	add	r2, fp
 800c464:	9209      	str	r2, [sp, #36]	@ 0x24
 800c466:	f89a 3000 	ldrb.w	r3, [sl]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	f000 809f 	beq.w	800c5ae <_svfiprintf_r+0x1c6>
 800c470:	2300      	movs	r3, #0
 800c472:	f04f 32ff 	mov.w	r2, #4294967295
 800c476:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c47a:	f10a 0a01 	add.w	sl, sl, #1
 800c47e:	9304      	str	r3, [sp, #16]
 800c480:	9307      	str	r3, [sp, #28]
 800c482:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c486:	931a      	str	r3, [sp, #104]	@ 0x68
 800c488:	4654      	mov	r4, sl
 800c48a:	2205      	movs	r2, #5
 800c48c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c490:	484e      	ldr	r0, [pc, #312]	@ (800c5cc <_svfiprintf_r+0x1e4>)
 800c492:	f7f3 fead 	bl	80001f0 <memchr>
 800c496:	9a04      	ldr	r2, [sp, #16]
 800c498:	b9d8      	cbnz	r0, 800c4d2 <_svfiprintf_r+0xea>
 800c49a:	06d0      	lsls	r0, r2, #27
 800c49c:	bf44      	itt	mi
 800c49e:	2320      	movmi	r3, #32
 800c4a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c4a4:	0711      	lsls	r1, r2, #28
 800c4a6:	bf44      	itt	mi
 800c4a8:	232b      	movmi	r3, #43	@ 0x2b
 800c4aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c4ae:	f89a 3000 	ldrb.w	r3, [sl]
 800c4b2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c4b4:	d015      	beq.n	800c4e2 <_svfiprintf_r+0xfa>
 800c4b6:	9a07      	ldr	r2, [sp, #28]
 800c4b8:	4654      	mov	r4, sl
 800c4ba:	2000      	movs	r0, #0
 800c4bc:	f04f 0c0a 	mov.w	ip, #10
 800c4c0:	4621      	mov	r1, r4
 800c4c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4c6:	3b30      	subs	r3, #48	@ 0x30
 800c4c8:	2b09      	cmp	r3, #9
 800c4ca:	d94b      	bls.n	800c564 <_svfiprintf_r+0x17c>
 800c4cc:	b1b0      	cbz	r0, 800c4fc <_svfiprintf_r+0x114>
 800c4ce:	9207      	str	r2, [sp, #28]
 800c4d0:	e014      	b.n	800c4fc <_svfiprintf_r+0x114>
 800c4d2:	eba0 0308 	sub.w	r3, r0, r8
 800c4d6:	fa09 f303 	lsl.w	r3, r9, r3
 800c4da:	4313      	orrs	r3, r2
 800c4dc:	9304      	str	r3, [sp, #16]
 800c4de:	46a2      	mov	sl, r4
 800c4e0:	e7d2      	b.n	800c488 <_svfiprintf_r+0xa0>
 800c4e2:	9b03      	ldr	r3, [sp, #12]
 800c4e4:	1d19      	adds	r1, r3, #4
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	9103      	str	r1, [sp, #12]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	bfbb      	ittet	lt
 800c4ee:	425b      	neglt	r3, r3
 800c4f0:	f042 0202 	orrlt.w	r2, r2, #2
 800c4f4:	9307      	strge	r3, [sp, #28]
 800c4f6:	9307      	strlt	r3, [sp, #28]
 800c4f8:	bfb8      	it	lt
 800c4fa:	9204      	strlt	r2, [sp, #16]
 800c4fc:	7823      	ldrb	r3, [r4, #0]
 800c4fe:	2b2e      	cmp	r3, #46	@ 0x2e
 800c500:	d10a      	bne.n	800c518 <_svfiprintf_r+0x130>
 800c502:	7863      	ldrb	r3, [r4, #1]
 800c504:	2b2a      	cmp	r3, #42	@ 0x2a
 800c506:	d132      	bne.n	800c56e <_svfiprintf_r+0x186>
 800c508:	9b03      	ldr	r3, [sp, #12]
 800c50a:	1d1a      	adds	r2, r3, #4
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	9203      	str	r2, [sp, #12]
 800c510:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c514:	3402      	adds	r4, #2
 800c516:	9305      	str	r3, [sp, #20]
 800c518:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c5dc <_svfiprintf_r+0x1f4>
 800c51c:	7821      	ldrb	r1, [r4, #0]
 800c51e:	2203      	movs	r2, #3
 800c520:	4650      	mov	r0, sl
 800c522:	f7f3 fe65 	bl	80001f0 <memchr>
 800c526:	b138      	cbz	r0, 800c538 <_svfiprintf_r+0x150>
 800c528:	9b04      	ldr	r3, [sp, #16]
 800c52a:	eba0 000a 	sub.w	r0, r0, sl
 800c52e:	2240      	movs	r2, #64	@ 0x40
 800c530:	4082      	lsls	r2, r0
 800c532:	4313      	orrs	r3, r2
 800c534:	3401      	adds	r4, #1
 800c536:	9304      	str	r3, [sp, #16]
 800c538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c53c:	4824      	ldr	r0, [pc, #144]	@ (800c5d0 <_svfiprintf_r+0x1e8>)
 800c53e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c542:	2206      	movs	r2, #6
 800c544:	f7f3 fe54 	bl	80001f0 <memchr>
 800c548:	2800      	cmp	r0, #0
 800c54a:	d036      	beq.n	800c5ba <_svfiprintf_r+0x1d2>
 800c54c:	4b21      	ldr	r3, [pc, #132]	@ (800c5d4 <_svfiprintf_r+0x1ec>)
 800c54e:	bb1b      	cbnz	r3, 800c598 <_svfiprintf_r+0x1b0>
 800c550:	9b03      	ldr	r3, [sp, #12]
 800c552:	3307      	adds	r3, #7
 800c554:	f023 0307 	bic.w	r3, r3, #7
 800c558:	3308      	adds	r3, #8
 800c55a:	9303      	str	r3, [sp, #12]
 800c55c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c55e:	4433      	add	r3, r6
 800c560:	9309      	str	r3, [sp, #36]	@ 0x24
 800c562:	e76a      	b.n	800c43a <_svfiprintf_r+0x52>
 800c564:	fb0c 3202 	mla	r2, ip, r2, r3
 800c568:	460c      	mov	r4, r1
 800c56a:	2001      	movs	r0, #1
 800c56c:	e7a8      	b.n	800c4c0 <_svfiprintf_r+0xd8>
 800c56e:	2300      	movs	r3, #0
 800c570:	3401      	adds	r4, #1
 800c572:	9305      	str	r3, [sp, #20]
 800c574:	4619      	mov	r1, r3
 800c576:	f04f 0c0a 	mov.w	ip, #10
 800c57a:	4620      	mov	r0, r4
 800c57c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c580:	3a30      	subs	r2, #48	@ 0x30
 800c582:	2a09      	cmp	r2, #9
 800c584:	d903      	bls.n	800c58e <_svfiprintf_r+0x1a6>
 800c586:	2b00      	cmp	r3, #0
 800c588:	d0c6      	beq.n	800c518 <_svfiprintf_r+0x130>
 800c58a:	9105      	str	r1, [sp, #20]
 800c58c:	e7c4      	b.n	800c518 <_svfiprintf_r+0x130>
 800c58e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c592:	4604      	mov	r4, r0
 800c594:	2301      	movs	r3, #1
 800c596:	e7f0      	b.n	800c57a <_svfiprintf_r+0x192>
 800c598:	ab03      	add	r3, sp, #12
 800c59a:	9300      	str	r3, [sp, #0]
 800c59c:	462a      	mov	r2, r5
 800c59e:	4b0e      	ldr	r3, [pc, #56]	@ (800c5d8 <_svfiprintf_r+0x1f0>)
 800c5a0:	a904      	add	r1, sp, #16
 800c5a2:	4638      	mov	r0, r7
 800c5a4:	f7fd ff30 	bl	800a408 <_printf_float>
 800c5a8:	1c42      	adds	r2, r0, #1
 800c5aa:	4606      	mov	r6, r0
 800c5ac:	d1d6      	bne.n	800c55c <_svfiprintf_r+0x174>
 800c5ae:	89ab      	ldrh	r3, [r5, #12]
 800c5b0:	065b      	lsls	r3, r3, #25
 800c5b2:	f53f af2d 	bmi.w	800c410 <_svfiprintf_r+0x28>
 800c5b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c5b8:	e72c      	b.n	800c414 <_svfiprintf_r+0x2c>
 800c5ba:	ab03      	add	r3, sp, #12
 800c5bc:	9300      	str	r3, [sp, #0]
 800c5be:	462a      	mov	r2, r5
 800c5c0:	4b05      	ldr	r3, [pc, #20]	@ (800c5d8 <_svfiprintf_r+0x1f0>)
 800c5c2:	a904      	add	r1, sp, #16
 800c5c4:	4638      	mov	r0, r7
 800c5c6:	f7fe f9b7 	bl	800a938 <_printf_i>
 800c5ca:	e7ed      	b.n	800c5a8 <_svfiprintf_r+0x1c0>
 800c5cc:	08011568 	.word	0x08011568
 800c5d0:	08011572 	.word	0x08011572
 800c5d4:	0800a409 	.word	0x0800a409
 800c5d8:	0800c331 	.word	0x0800c331
 800c5dc:	0801156e 	.word	0x0801156e

0800c5e0 <__sflush_r>:
 800c5e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5e8:	0716      	lsls	r6, r2, #28
 800c5ea:	4605      	mov	r5, r0
 800c5ec:	460c      	mov	r4, r1
 800c5ee:	d454      	bmi.n	800c69a <__sflush_r+0xba>
 800c5f0:	684b      	ldr	r3, [r1, #4]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	dc02      	bgt.n	800c5fc <__sflush_r+0x1c>
 800c5f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	dd48      	ble.n	800c68e <__sflush_r+0xae>
 800c5fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c5fe:	2e00      	cmp	r6, #0
 800c600:	d045      	beq.n	800c68e <__sflush_r+0xae>
 800c602:	2300      	movs	r3, #0
 800c604:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c608:	682f      	ldr	r7, [r5, #0]
 800c60a:	6a21      	ldr	r1, [r4, #32]
 800c60c:	602b      	str	r3, [r5, #0]
 800c60e:	d030      	beq.n	800c672 <__sflush_r+0x92>
 800c610:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c612:	89a3      	ldrh	r3, [r4, #12]
 800c614:	0759      	lsls	r1, r3, #29
 800c616:	d505      	bpl.n	800c624 <__sflush_r+0x44>
 800c618:	6863      	ldr	r3, [r4, #4]
 800c61a:	1ad2      	subs	r2, r2, r3
 800c61c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c61e:	b10b      	cbz	r3, 800c624 <__sflush_r+0x44>
 800c620:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c622:	1ad2      	subs	r2, r2, r3
 800c624:	2300      	movs	r3, #0
 800c626:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c628:	6a21      	ldr	r1, [r4, #32]
 800c62a:	4628      	mov	r0, r5
 800c62c:	47b0      	blx	r6
 800c62e:	1c43      	adds	r3, r0, #1
 800c630:	89a3      	ldrh	r3, [r4, #12]
 800c632:	d106      	bne.n	800c642 <__sflush_r+0x62>
 800c634:	6829      	ldr	r1, [r5, #0]
 800c636:	291d      	cmp	r1, #29
 800c638:	d82b      	bhi.n	800c692 <__sflush_r+0xb2>
 800c63a:	4a2a      	ldr	r2, [pc, #168]	@ (800c6e4 <__sflush_r+0x104>)
 800c63c:	410a      	asrs	r2, r1
 800c63e:	07d6      	lsls	r6, r2, #31
 800c640:	d427      	bmi.n	800c692 <__sflush_r+0xb2>
 800c642:	2200      	movs	r2, #0
 800c644:	6062      	str	r2, [r4, #4]
 800c646:	04d9      	lsls	r1, r3, #19
 800c648:	6922      	ldr	r2, [r4, #16]
 800c64a:	6022      	str	r2, [r4, #0]
 800c64c:	d504      	bpl.n	800c658 <__sflush_r+0x78>
 800c64e:	1c42      	adds	r2, r0, #1
 800c650:	d101      	bne.n	800c656 <__sflush_r+0x76>
 800c652:	682b      	ldr	r3, [r5, #0]
 800c654:	b903      	cbnz	r3, 800c658 <__sflush_r+0x78>
 800c656:	6560      	str	r0, [r4, #84]	@ 0x54
 800c658:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c65a:	602f      	str	r7, [r5, #0]
 800c65c:	b1b9      	cbz	r1, 800c68e <__sflush_r+0xae>
 800c65e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c662:	4299      	cmp	r1, r3
 800c664:	d002      	beq.n	800c66c <__sflush_r+0x8c>
 800c666:	4628      	mov	r0, r5
 800c668:	f7ff fa96 	bl	800bb98 <_free_r>
 800c66c:	2300      	movs	r3, #0
 800c66e:	6363      	str	r3, [r4, #52]	@ 0x34
 800c670:	e00d      	b.n	800c68e <__sflush_r+0xae>
 800c672:	2301      	movs	r3, #1
 800c674:	4628      	mov	r0, r5
 800c676:	47b0      	blx	r6
 800c678:	4602      	mov	r2, r0
 800c67a:	1c50      	adds	r0, r2, #1
 800c67c:	d1c9      	bne.n	800c612 <__sflush_r+0x32>
 800c67e:	682b      	ldr	r3, [r5, #0]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d0c6      	beq.n	800c612 <__sflush_r+0x32>
 800c684:	2b1d      	cmp	r3, #29
 800c686:	d001      	beq.n	800c68c <__sflush_r+0xac>
 800c688:	2b16      	cmp	r3, #22
 800c68a:	d11e      	bne.n	800c6ca <__sflush_r+0xea>
 800c68c:	602f      	str	r7, [r5, #0]
 800c68e:	2000      	movs	r0, #0
 800c690:	e022      	b.n	800c6d8 <__sflush_r+0xf8>
 800c692:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c696:	b21b      	sxth	r3, r3
 800c698:	e01b      	b.n	800c6d2 <__sflush_r+0xf2>
 800c69a:	690f      	ldr	r7, [r1, #16]
 800c69c:	2f00      	cmp	r7, #0
 800c69e:	d0f6      	beq.n	800c68e <__sflush_r+0xae>
 800c6a0:	0793      	lsls	r3, r2, #30
 800c6a2:	680e      	ldr	r6, [r1, #0]
 800c6a4:	bf08      	it	eq
 800c6a6:	694b      	ldreq	r3, [r1, #20]
 800c6a8:	600f      	str	r7, [r1, #0]
 800c6aa:	bf18      	it	ne
 800c6ac:	2300      	movne	r3, #0
 800c6ae:	eba6 0807 	sub.w	r8, r6, r7
 800c6b2:	608b      	str	r3, [r1, #8]
 800c6b4:	f1b8 0f00 	cmp.w	r8, #0
 800c6b8:	dde9      	ble.n	800c68e <__sflush_r+0xae>
 800c6ba:	6a21      	ldr	r1, [r4, #32]
 800c6bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c6be:	4643      	mov	r3, r8
 800c6c0:	463a      	mov	r2, r7
 800c6c2:	4628      	mov	r0, r5
 800c6c4:	47b0      	blx	r6
 800c6c6:	2800      	cmp	r0, #0
 800c6c8:	dc08      	bgt.n	800c6dc <__sflush_r+0xfc>
 800c6ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c6d2:	81a3      	strh	r3, [r4, #12]
 800c6d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6dc:	4407      	add	r7, r0
 800c6de:	eba8 0800 	sub.w	r8, r8, r0
 800c6e2:	e7e7      	b.n	800c6b4 <__sflush_r+0xd4>
 800c6e4:	dfbffffe 	.word	0xdfbffffe

0800c6e8 <_fflush_r>:
 800c6e8:	b538      	push	{r3, r4, r5, lr}
 800c6ea:	690b      	ldr	r3, [r1, #16]
 800c6ec:	4605      	mov	r5, r0
 800c6ee:	460c      	mov	r4, r1
 800c6f0:	b913      	cbnz	r3, 800c6f8 <_fflush_r+0x10>
 800c6f2:	2500      	movs	r5, #0
 800c6f4:	4628      	mov	r0, r5
 800c6f6:	bd38      	pop	{r3, r4, r5, pc}
 800c6f8:	b118      	cbz	r0, 800c702 <_fflush_r+0x1a>
 800c6fa:	6a03      	ldr	r3, [r0, #32]
 800c6fc:	b90b      	cbnz	r3, 800c702 <_fflush_r+0x1a>
 800c6fe:	f7fe fac7 	bl	800ac90 <__sinit>
 800c702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d0f3      	beq.n	800c6f2 <_fflush_r+0xa>
 800c70a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c70c:	07d0      	lsls	r0, r2, #31
 800c70e:	d404      	bmi.n	800c71a <_fflush_r+0x32>
 800c710:	0599      	lsls	r1, r3, #22
 800c712:	d402      	bmi.n	800c71a <_fflush_r+0x32>
 800c714:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c716:	f7fe fbe2 	bl	800aede <__retarget_lock_acquire_recursive>
 800c71a:	4628      	mov	r0, r5
 800c71c:	4621      	mov	r1, r4
 800c71e:	f7ff ff5f 	bl	800c5e0 <__sflush_r>
 800c722:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c724:	07da      	lsls	r2, r3, #31
 800c726:	4605      	mov	r5, r0
 800c728:	d4e4      	bmi.n	800c6f4 <_fflush_r+0xc>
 800c72a:	89a3      	ldrh	r3, [r4, #12]
 800c72c:	059b      	lsls	r3, r3, #22
 800c72e:	d4e1      	bmi.n	800c6f4 <_fflush_r+0xc>
 800c730:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c732:	f7fe fbd5 	bl	800aee0 <__retarget_lock_release_recursive>
 800c736:	e7dd      	b.n	800c6f4 <_fflush_r+0xc>

0800c738 <memmove>:
 800c738:	4288      	cmp	r0, r1
 800c73a:	b510      	push	{r4, lr}
 800c73c:	eb01 0402 	add.w	r4, r1, r2
 800c740:	d902      	bls.n	800c748 <memmove+0x10>
 800c742:	4284      	cmp	r4, r0
 800c744:	4623      	mov	r3, r4
 800c746:	d807      	bhi.n	800c758 <memmove+0x20>
 800c748:	1e43      	subs	r3, r0, #1
 800c74a:	42a1      	cmp	r1, r4
 800c74c:	d008      	beq.n	800c760 <memmove+0x28>
 800c74e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c752:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c756:	e7f8      	b.n	800c74a <memmove+0x12>
 800c758:	4402      	add	r2, r0
 800c75a:	4601      	mov	r1, r0
 800c75c:	428a      	cmp	r2, r1
 800c75e:	d100      	bne.n	800c762 <memmove+0x2a>
 800c760:	bd10      	pop	{r4, pc}
 800c762:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c766:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c76a:	e7f7      	b.n	800c75c <memmove+0x24>

0800c76c <__assert_func>:
 800c76c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c76e:	4614      	mov	r4, r2
 800c770:	461a      	mov	r2, r3
 800c772:	4b09      	ldr	r3, [pc, #36]	@ (800c798 <__assert_func+0x2c>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	4605      	mov	r5, r0
 800c778:	68d8      	ldr	r0, [r3, #12]
 800c77a:	b954      	cbnz	r4, 800c792 <__assert_func+0x26>
 800c77c:	4b07      	ldr	r3, [pc, #28]	@ (800c79c <__assert_func+0x30>)
 800c77e:	461c      	mov	r4, r3
 800c780:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c784:	9100      	str	r1, [sp, #0]
 800c786:	462b      	mov	r3, r5
 800c788:	4905      	ldr	r1, [pc, #20]	@ (800c7a0 <__assert_func+0x34>)
 800c78a:	f000 f86f 	bl	800c86c <fiprintf>
 800c78e:	f000 f87f 	bl	800c890 <abort>
 800c792:	4b04      	ldr	r3, [pc, #16]	@ (800c7a4 <__assert_func+0x38>)
 800c794:	e7f4      	b.n	800c780 <__assert_func+0x14>
 800c796:	bf00      	nop
 800c798:	20000170 	.word	0x20000170
 800c79c:	080115be 	.word	0x080115be
 800c7a0:	08011590 	.word	0x08011590
 800c7a4:	08011583 	.word	0x08011583

0800c7a8 <_calloc_r>:
 800c7a8:	b570      	push	{r4, r5, r6, lr}
 800c7aa:	fba1 5402 	umull	r5, r4, r1, r2
 800c7ae:	b93c      	cbnz	r4, 800c7c0 <_calloc_r+0x18>
 800c7b0:	4629      	mov	r1, r5
 800c7b2:	f7fd fcfd 	bl	800a1b0 <_malloc_r>
 800c7b6:	4606      	mov	r6, r0
 800c7b8:	b928      	cbnz	r0, 800c7c6 <_calloc_r+0x1e>
 800c7ba:	2600      	movs	r6, #0
 800c7bc:	4630      	mov	r0, r6
 800c7be:	bd70      	pop	{r4, r5, r6, pc}
 800c7c0:	220c      	movs	r2, #12
 800c7c2:	6002      	str	r2, [r0, #0]
 800c7c4:	e7f9      	b.n	800c7ba <_calloc_r+0x12>
 800c7c6:	462a      	mov	r2, r5
 800c7c8:	4621      	mov	r1, r4
 800c7ca:	f7fe fafa 	bl	800adc2 <memset>
 800c7ce:	e7f5      	b.n	800c7bc <_calloc_r+0x14>

0800c7d0 <__ascii_mbtowc>:
 800c7d0:	b082      	sub	sp, #8
 800c7d2:	b901      	cbnz	r1, 800c7d6 <__ascii_mbtowc+0x6>
 800c7d4:	a901      	add	r1, sp, #4
 800c7d6:	b142      	cbz	r2, 800c7ea <__ascii_mbtowc+0x1a>
 800c7d8:	b14b      	cbz	r3, 800c7ee <__ascii_mbtowc+0x1e>
 800c7da:	7813      	ldrb	r3, [r2, #0]
 800c7dc:	600b      	str	r3, [r1, #0]
 800c7de:	7812      	ldrb	r2, [r2, #0]
 800c7e0:	1e10      	subs	r0, r2, #0
 800c7e2:	bf18      	it	ne
 800c7e4:	2001      	movne	r0, #1
 800c7e6:	b002      	add	sp, #8
 800c7e8:	4770      	bx	lr
 800c7ea:	4610      	mov	r0, r2
 800c7ec:	e7fb      	b.n	800c7e6 <__ascii_mbtowc+0x16>
 800c7ee:	f06f 0001 	mvn.w	r0, #1
 800c7f2:	e7f8      	b.n	800c7e6 <__ascii_mbtowc+0x16>

0800c7f4 <_realloc_r>:
 800c7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7f8:	4680      	mov	r8, r0
 800c7fa:	4615      	mov	r5, r2
 800c7fc:	460c      	mov	r4, r1
 800c7fe:	b921      	cbnz	r1, 800c80a <_realloc_r+0x16>
 800c800:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c804:	4611      	mov	r1, r2
 800c806:	f7fd bcd3 	b.w	800a1b0 <_malloc_r>
 800c80a:	b92a      	cbnz	r2, 800c818 <_realloc_r+0x24>
 800c80c:	f7ff f9c4 	bl	800bb98 <_free_r>
 800c810:	2400      	movs	r4, #0
 800c812:	4620      	mov	r0, r4
 800c814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c818:	f000 f841 	bl	800c89e <_malloc_usable_size_r>
 800c81c:	4285      	cmp	r5, r0
 800c81e:	4606      	mov	r6, r0
 800c820:	d802      	bhi.n	800c828 <_realloc_r+0x34>
 800c822:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c826:	d8f4      	bhi.n	800c812 <_realloc_r+0x1e>
 800c828:	4629      	mov	r1, r5
 800c82a:	4640      	mov	r0, r8
 800c82c:	f7fd fcc0 	bl	800a1b0 <_malloc_r>
 800c830:	4607      	mov	r7, r0
 800c832:	2800      	cmp	r0, #0
 800c834:	d0ec      	beq.n	800c810 <_realloc_r+0x1c>
 800c836:	42b5      	cmp	r5, r6
 800c838:	462a      	mov	r2, r5
 800c83a:	4621      	mov	r1, r4
 800c83c:	bf28      	it	cs
 800c83e:	4632      	movcs	r2, r6
 800c840:	f7fe fb4f 	bl	800aee2 <memcpy>
 800c844:	4621      	mov	r1, r4
 800c846:	4640      	mov	r0, r8
 800c848:	f7ff f9a6 	bl	800bb98 <_free_r>
 800c84c:	463c      	mov	r4, r7
 800c84e:	e7e0      	b.n	800c812 <_realloc_r+0x1e>

0800c850 <__ascii_wctomb>:
 800c850:	4603      	mov	r3, r0
 800c852:	4608      	mov	r0, r1
 800c854:	b141      	cbz	r1, 800c868 <__ascii_wctomb+0x18>
 800c856:	2aff      	cmp	r2, #255	@ 0xff
 800c858:	d904      	bls.n	800c864 <__ascii_wctomb+0x14>
 800c85a:	228a      	movs	r2, #138	@ 0x8a
 800c85c:	601a      	str	r2, [r3, #0]
 800c85e:	f04f 30ff 	mov.w	r0, #4294967295
 800c862:	4770      	bx	lr
 800c864:	700a      	strb	r2, [r1, #0]
 800c866:	2001      	movs	r0, #1
 800c868:	4770      	bx	lr
	...

0800c86c <fiprintf>:
 800c86c:	b40e      	push	{r1, r2, r3}
 800c86e:	b503      	push	{r0, r1, lr}
 800c870:	4601      	mov	r1, r0
 800c872:	ab03      	add	r3, sp, #12
 800c874:	4805      	ldr	r0, [pc, #20]	@ (800c88c <fiprintf+0x20>)
 800c876:	f853 2b04 	ldr.w	r2, [r3], #4
 800c87a:	6800      	ldr	r0, [r0, #0]
 800c87c:	9301      	str	r3, [sp, #4]
 800c87e:	f000 f83f 	bl	800c900 <_vfiprintf_r>
 800c882:	b002      	add	sp, #8
 800c884:	f85d eb04 	ldr.w	lr, [sp], #4
 800c888:	b003      	add	sp, #12
 800c88a:	4770      	bx	lr
 800c88c:	20000170 	.word	0x20000170

0800c890 <abort>:
 800c890:	b508      	push	{r3, lr}
 800c892:	2006      	movs	r0, #6
 800c894:	f000 fa08 	bl	800cca8 <raise>
 800c898:	2001      	movs	r0, #1
 800c89a:	f7f8 fa31 	bl	8004d00 <_exit>

0800c89e <_malloc_usable_size_r>:
 800c89e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8a2:	1f18      	subs	r0, r3, #4
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	bfbc      	itt	lt
 800c8a8:	580b      	ldrlt	r3, [r1, r0]
 800c8aa:	18c0      	addlt	r0, r0, r3
 800c8ac:	4770      	bx	lr

0800c8ae <__sfputc_r>:
 800c8ae:	6893      	ldr	r3, [r2, #8]
 800c8b0:	3b01      	subs	r3, #1
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	b410      	push	{r4}
 800c8b6:	6093      	str	r3, [r2, #8]
 800c8b8:	da08      	bge.n	800c8cc <__sfputc_r+0x1e>
 800c8ba:	6994      	ldr	r4, [r2, #24]
 800c8bc:	42a3      	cmp	r3, r4
 800c8be:	db01      	blt.n	800c8c4 <__sfputc_r+0x16>
 800c8c0:	290a      	cmp	r1, #10
 800c8c2:	d103      	bne.n	800c8cc <__sfputc_r+0x1e>
 800c8c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8c8:	f000 b932 	b.w	800cb30 <__swbuf_r>
 800c8cc:	6813      	ldr	r3, [r2, #0]
 800c8ce:	1c58      	adds	r0, r3, #1
 800c8d0:	6010      	str	r0, [r2, #0]
 800c8d2:	7019      	strb	r1, [r3, #0]
 800c8d4:	4608      	mov	r0, r1
 800c8d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8da:	4770      	bx	lr

0800c8dc <__sfputs_r>:
 800c8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8de:	4606      	mov	r6, r0
 800c8e0:	460f      	mov	r7, r1
 800c8e2:	4614      	mov	r4, r2
 800c8e4:	18d5      	adds	r5, r2, r3
 800c8e6:	42ac      	cmp	r4, r5
 800c8e8:	d101      	bne.n	800c8ee <__sfputs_r+0x12>
 800c8ea:	2000      	movs	r0, #0
 800c8ec:	e007      	b.n	800c8fe <__sfputs_r+0x22>
 800c8ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8f2:	463a      	mov	r2, r7
 800c8f4:	4630      	mov	r0, r6
 800c8f6:	f7ff ffda 	bl	800c8ae <__sfputc_r>
 800c8fa:	1c43      	adds	r3, r0, #1
 800c8fc:	d1f3      	bne.n	800c8e6 <__sfputs_r+0xa>
 800c8fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c900 <_vfiprintf_r>:
 800c900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c904:	460d      	mov	r5, r1
 800c906:	b09d      	sub	sp, #116	@ 0x74
 800c908:	4614      	mov	r4, r2
 800c90a:	4698      	mov	r8, r3
 800c90c:	4606      	mov	r6, r0
 800c90e:	b118      	cbz	r0, 800c918 <_vfiprintf_r+0x18>
 800c910:	6a03      	ldr	r3, [r0, #32]
 800c912:	b90b      	cbnz	r3, 800c918 <_vfiprintf_r+0x18>
 800c914:	f7fe f9bc 	bl	800ac90 <__sinit>
 800c918:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c91a:	07d9      	lsls	r1, r3, #31
 800c91c:	d405      	bmi.n	800c92a <_vfiprintf_r+0x2a>
 800c91e:	89ab      	ldrh	r3, [r5, #12]
 800c920:	059a      	lsls	r2, r3, #22
 800c922:	d402      	bmi.n	800c92a <_vfiprintf_r+0x2a>
 800c924:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c926:	f7fe fada 	bl	800aede <__retarget_lock_acquire_recursive>
 800c92a:	89ab      	ldrh	r3, [r5, #12]
 800c92c:	071b      	lsls	r3, r3, #28
 800c92e:	d501      	bpl.n	800c934 <_vfiprintf_r+0x34>
 800c930:	692b      	ldr	r3, [r5, #16]
 800c932:	b99b      	cbnz	r3, 800c95c <_vfiprintf_r+0x5c>
 800c934:	4629      	mov	r1, r5
 800c936:	4630      	mov	r0, r6
 800c938:	f000 f938 	bl	800cbac <__swsetup_r>
 800c93c:	b170      	cbz	r0, 800c95c <_vfiprintf_r+0x5c>
 800c93e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c940:	07dc      	lsls	r4, r3, #31
 800c942:	d504      	bpl.n	800c94e <_vfiprintf_r+0x4e>
 800c944:	f04f 30ff 	mov.w	r0, #4294967295
 800c948:	b01d      	add	sp, #116	@ 0x74
 800c94a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c94e:	89ab      	ldrh	r3, [r5, #12]
 800c950:	0598      	lsls	r0, r3, #22
 800c952:	d4f7      	bmi.n	800c944 <_vfiprintf_r+0x44>
 800c954:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c956:	f7fe fac3 	bl	800aee0 <__retarget_lock_release_recursive>
 800c95a:	e7f3      	b.n	800c944 <_vfiprintf_r+0x44>
 800c95c:	2300      	movs	r3, #0
 800c95e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c960:	2320      	movs	r3, #32
 800c962:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c966:	f8cd 800c 	str.w	r8, [sp, #12]
 800c96a:	2330      	movs	r3, #48	@ 0x30
 800c96c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cb1c <_vfiprintf_r+0x21c>
 800c970:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c974:	f04f 0901 	mov.w	r9, #1
 800c978:	4623      	mov	r3, r4
 800c97a:	469a      	mov	sl, r3
 800c97c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c980:	b10a      	cbz	r2, 800c986 <_vfiprintf_r+0x86>
 800c982:	2a25      	cmp	r2, #37	@ 0x25
 800c984:	d1f9      	bne.n	800c97a <_vfiprintf_r+0x7a>
 800c986:	ebba 0b04 	subs.w	fp, sl, r4
 800c98a:	d00b      	beq.n	800c9a4 <_vfiprintf_r+0xa4>
 800c98c:	465b      	mov	r3, fp
 800c98e:	4622      	mov	r2, r4
 800c990:	4629      	mov	r1, r5
 800c992:	4630      	mov	r0, r6
 800c994:	f7ff ffa2 	bl	800c8dc <__sfputs_r>
 800c998:	3001      	adds	r0, #1
 800c99a:	f000 80a7 	beq.w	800caec <_vfiprintf_r+0x1ec>
 800c99e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c9a0:	445a      	add	r2, fp
 800c9a2:	9209      	str	r2, [sp, #36]	@ 0x24
 800c9a4:	f89a 3000 	ldrb.w	r3, [sl]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	f000 809f 	beq.w	800caec <_vfiprintf_r+0x1ec>
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c9b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9b8:	f10a 0a01 	add.w	sl, sl, #1
 800c9bc:	9304      	str	r3, [sp, #16]
 800c9be:	9307      	str	r3, [sp, #28]
 800c9c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c9c4:	931a      	str	r3, [sp, #104]	@ 0x68
 800c9c6:	4654      	mov	r4, sl
 800c9c8:	2205      	movs	r2, #5
 800c9ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9ce:	4853      	ldr	r0, [pc, #332]	@ (800cb1c <_vfiprintf_r+0x21c>)
 800c9d0:	f7f3 fc0e 	bl	80001f0 <memchr>
 800c9d4:	9a04      	ldr	r2, [sp, #16]
 800c9d6:	b9d8      	cbnz	r0, 800ca10 <_vfiprintf_r+0x110>
 800c9d8:	06d1      	lsls	r1, r2, #27
 800c9da:	bf44      	itt	mi
 800c9dc:	2320      	movmi	r3, #32
 800c9de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c9e2:	0713      	lsls	r3, r2, #28
 800c9e4:	bf44      	itt	mi
 800c9e6:	232b      	movmi	r3, #43	@ 0x2b
 800c9e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c9ec:	f89a 3000 	ldrb.w	r3, [sl]
 800c9f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c9f2:	d015      	beq.n	800ca20 <_vfiprintf_r+0x120>
 800c9f4:	9a07      	ldr	r2, [sp, #28]
 800c9f6:	4654      	mov	r4, sl
 800c9f8:	2000      	movs	r0, #0
 800c9fa:	f04f 0c0a 	mov.w	ip, #10
 800c9fe:	4621      	mov	r1, r4
 800ca00:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca04:	3b30      	subs	r3, #48	@ 0x30
 800ca06:	2b09      	cmp	r3, #9
 800ca08:	d94b      	bls.n	800caa2 <_vfiprintf_r+0x1a2>
 800ca0a:	b1b0      	cbz	r0, 800ca3a <_vfiprintf_r+0x13a>
 800ca0c:	9207      	str	r2, [sp, #28]
 800ca0e:	e014      	b.n	800ca3a <_vfiprintf_r+0x13a>
 800ca10:	eba0 0308 	sub.w	r3, r0, r8
 800ca14:	fa09 f303 	lsl.w	r3, r9, r3
 800ca18:	4313      	orrs	r3, r2
 800ca1a:	9304      	str	r3, [sp, #16]
 800ca1c:	46a2      	mov	sl, r4
 800ca1e:	e7d2      	b.n	800c9c6 <_vfiprintf_r+0xc6>
 800ca20:	9b03      	ldr	r3, [sp, #12]
 800ca22:	1d19      	adds	r1, r3, #4
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	9103      	str	r1, [sp, #12]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	bfbb      	ittet	lt
 800ca2c:	425b      	neglt	r3, r3
 800ca2e:	f042 0202 	orrlt.w	r2, r2, #2
 800ca32:	9307      	strge	r3, [sp, #28]
 800ca34:	9307      	strlt	r3, [sp, #28]
 800ca36:	bfb8      	it	lt
 800ca38:	9204      	strlt	r2, [sp, #16]
 800ca3a:	7823      	ldrb	r3, [r4, #0]
 800ca3c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca3e:	d10a      	bne.n	800ca56 <_vfiprintf_r+0x156>
 800ca40:	7863      	ldrb	r3, [r4, #1]
 800ca42:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca44:	d132      	bne.n	800caac <_vfiprintf_r+0x1ac>
 800ca46:	9b03      	ldr	r3, [sp, #12]
 800ca48:	1d1a      	adds	r2, r3, #4
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	9203      	str	r2, [sp, #12]
 800ca4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ca52:	3402      	adds	r4, #2
 800ca54:	9305      	str	r3, [sp, #20]
 800ca56:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cb2c <_vfiprintf_r+0x22c>
 800ca5a:	7821      	ldrb	r1, [r4, #0]
 800ca5c:	2203      	movs	r2, #3
 800ca5e:	4650      	mov	r0, sl
 800ca60:	f7f3 fbc6 	bl	80001f0 <memchr>
 800ca64:	b138      	cbz	r0, 800ca76 <_vfiprintf_r+0x176>
 800ca66:	9b04      	ldr	r3, [sp, #16]
 800ca68:	eba0 000a 	sub.w	r0, r0, sl
 800ca6c:	2240      	movs	r2, #64	@ 0x40
 800ca6e:	4082      	lsls	r2, r0
 800ca70:	4313      	orrs	r3, r2
 800ca72:	3401      	adds	r4, #1
 800ca74:	9304      	str	r3, [sp, #16]
 800ca76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca7a:	4829      	ldr	r0, [pc, #164]	@ (800cb20 <_vfiprintf_r+0x220>)
 800ca7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ca80:	2206      	movs	r2, #6
 800ca82:	f7f3 fbb5 	bl	80001f0 <memchr>
 800ca86:	2800      	cmp	r0, #0
 800ca88:	d03f      	beq.n	800cb0a <_vfiprintf_r+0x20a>
 800ca8a:	4b26      	ldr	r3, [pc, #152]	@ (800cb24 <_vfiprintf_r+0x224>)
 800ca8c:	bb1b      	cbnz	r3, 800cad6 <_vfiprintf_r+0x1d6>
 800ca8e:	9b03      	ldr	r3, [sp, #12]
 800ca90:	3307      	adds	r3, #7
 800ca92:	f023 0307 	bic.w	r3, r3, #7
 800ca96:	3308      	adds	r3, #8
 800ca98:	9303      	str	r3, [sp, #12]
 800ca9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca9c:	443b      	add	r3, r7
 800ca9e:	9309      	str	r3, [sp, #36]	@ 0x24
 800caa0:	e76a      	b.n	800c978 <_vfiprintf_r+0x78>
 800caa2:	fb0c 3202 	mla	r2, ip, r2, r3
 800caa6:	460c      	mov	r4, r1
 800caa8:	2001      	movs	r0, #1
 800caaa:	e7a8      	b.n	800c9fe <_vfiprintf_r+0xfe>
 800caac:	2300      	movs	r3, #0
 800caae:	3401      	adds	r4, #1
 800cab0:	9305      	str	r3, [sp, #20]
 800cab2:	4619      	mov	r1, r3
 800cab4:	f04f 0c0a 	mov.w	ip, #10
 800cab8:	4620      	mov	r0, r4
 800caba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cabe:	3a30      	subs	r2, #48	@ 0x30
 800cac0:	2a09      	cmp	r2, #9
 800cac2:	d903      	bls.n	800cacc <_vfiprintf_r+0x1cc>
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d0c6      	beq.n	800ca56 <_vfiprintf_r+0x156>
 800cac8:	9105      	str	r1, [sp, #20]
 800caca:	e7c4      	b.n	800ca56 <_vfiprintf_r+0x156>
 800cacc:	fb0c 2101 	mla	r1, ip, r1, r2
 800cad0:	4604      	mov	r4, r0
 800cad2:	2301      	movs	r3, #1
 800cad4:	e7f0      	b.n	800cab8 <_vfiprintf_r+0x1b8>
 800cad6:	ab03      	add	r3, sp, #12
 800cad8:	9300      	str	r3, [sp, #0]
 800cada:	462a      	mov	r2, r5
 800cadc:	4b12      	ldr	r3, [pc, #72]	@ (800cb28 <_vfiprintf_r+0x228>)
 800cade:	a904      	add	r1, sp, #16
 800cae0:	4630      	mov	r0, r6
 800cae2:	f7fd fc91 	bl	800a408 <_printf_float>
 800cae6:	4607      	mov	r7, r0
 800cae8:	1c78      	adds	r0, r7, #1
 800caea:	d1d6      	bne.n	800ca9a <_vfiprintf_r+0x19a>
 800caec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800caee:	07d9      	lsls	r1, r3, #31
 800caf0:	d405      	bmi.n	800cafe <_vfiprintf_r+0x1fe>
 800caf2:	89ab      	ldrh	r3, [r5, #12]
 800caf4:	059a      	lsls	r2, r3, #22
 800caf6:	d402      	bmi.n	800cafe <_vfiprintf_r+0x1fe>
 800caf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cafa:	f7fe f9f1 	bl	800aee0 <__retarget_lock_release_recursive>
 800cafe:	89ab      	ldrh	r3, [r5, #12]
 800cb00:	065b      	lsls	r3, r3, #25
 800cb02:	f53f af1f 	bmi.w	800c944 <_vfiprintf_r+0x44>
 800cb06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cb08:	e71e      	b.n	800c948 <_vfiprintf_r+0x48>
 800cb0a:	ab03      	add	r3, sp, #12
 800cb0c:	9300      	str	r3, [sp, #0]
 800cb0e:	462a      	mov	r2, r5
 800cb10:	4b05      	ldr	r3, [pc, #20]	@ (800cb28 <_vfiprintf_r+0x228>)
 800cb12:	a904      	add	r1, sp, #16
 800cb14:	4630      	mov	r0, r6
 800cb16:	f7fd ff0f 	bl	800a938 <_printf_i>
 800cb1a:	e7e4      	b.n	800cae6 <_vfiprintf_r+0x1e6>
 800cb1c:	08011568 	.word	0x08011568
 800cb20:	08011572 	.word	0x08011572
 800cb24:	0800a409 	.word	0x0800a409
 800cb28:	0800c8dd 	.word	0x0800c8dd
 800cb2c:	0801156e 	.word	0x0801156e

0800cb30 <__swbuf_r>:
 800cb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb32:	460e      	mov	r6, r1
 800cb34:	4614      	mov	r4, r2
 800cb36:	4605      	mov	r5, r0
 800cb38:	b118      	cbz	r0, 800cb42 <__swbuf_r+0x12>
 800cb3a:	6a03      	ldr	r3, [r0, #32]
 800cb3c:	b90b      	cbnz	r3, 800cb42 <__swbuf_r+0x12>
 800cb3e:	f7fe f8a7 	bl	800ac90 <__sinit>
 800cb42:	69a3      	ldr	r3, [r4, #24]
 800cb44:	60a3      	str	r3, [r4, #8]
 800cb46:	89a3      	ldrh	r3, [r4, #12]
 800cb48:	071a      	lsls	r2, r3, #28
 800cb4a:	d501      	bpl.n	800cb50 <__swbuf_r+0x20>
 800cb4c:	6923      	ldr	r3, [r4, #16]
 800cb4e:	b943      	cbnz	r3, 800cb62 <__swbuf_r+0x32>
 800cb50:	4621      	mov	r1, r4
 800cb52:	4628      	mov	r0, r5
 800cb54:	f000 f82a 	bl	800cbac <__swsetup_r>
 800cb58:	b118      	cbz	r0, 800cb62 <__swbuf_r+0x32>
 800cb5a:	f04f 37ff 	mov.w	r7, #4294967295
 800cb5e:	4638      	mov	r0, r7
 800cb60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb62:	6823      	ldr	r3, [r4, #0]
 800cb64:	6922      	ldr	r2, [r4, #16]
 800cb66:	1a98      	subs	r0, r3, r2
 800cb68:	6963      	ldr	r3, [r4, #20]
 800cb6a:	b2f6      	uxtb	r6, r6
 800cb6c:	4283      	cmp	r3, r0
 800cb6e:	4637      	mov	r7, r6
 800cb70:	dc05      	bgt.n	800cb7e <__swbuf_r+0x4e>
 800cb72:	4621      	mov	r1, r4
 800cb74:	4628      	mov	r0, r5
 800cb76:	f7ff fdb7 	bl	800c6e8 <_fflush_r>
 800cb7a:	2800      	cmp	r0, #0
 800cb7c:	d1ed      	bne.n	800cb5a <__swbuf_r+0x2a>
 800cb7e:	68a3      	ldr	r3, [r4, #8]
 800cb80:	3b01      	subs	r3, #1
 800cb82:	60a3      	str	r3, [r4, #8]
 800cb84:	6823      	ldr	r3, [r4, #0]
 800cb86:	1c5a      	adds	r2, r3, #1
 800cb88:	6022      	str	r2, [r4, #0]
 800cb8a:	701e      	strb	r6, [r3, #0]
 800cb8c:	6962      	ldr	r2, [r4, #20]
 800cb8e:	1c43      	adds	r3, r0, #1
 800cb90:	429a      	cmp	r2, r3
 800cb92:	d004      	beq.n	800cb9e <__swbuf_r+0x6e>
 800cb94:	89a3      	ldrh	r3, [r4, #12]
 800cb96:	07db      	lsls	r3, r3, #31
 800cb98:	d5e1      	bpl.n	800cb5e <__swbuf_r+0x2e>
 800cb9a:	2e0a      	cmp	r6, #10
 800cb9c:	d1df      	bne.n	800cb5e <__swbuf_r+0x2e>
 800cb9e:	4621      	mov	r1, r4
 800cba0:	4628      	mov	r0, r5
 800cba2:	f7ff fda1 	bl	800c6e8 <_fflush_r>
 800cba6:	2800      	cmp	r0, #0
 800cba8:	d0d9      	beq.n	800cb5e <__swbuf_r+0x2e>
 800cbaa:	e7d6      	b.n	800cb5a <__swbuf_r+0x2a>

0800cbac <__swsetup_r>:
 800cbac:	b538      	push	{r3, r4, r5, lr}
 800cbae:	4b29      	ldr	r3, [pc, #164]	@ (800cc54 <__swsetup_r+0xa8>)
 800cbb0:	4605      	mov	r5, r0
 800cbb2:	6818      	ldr	r0, [r3, #0]
 800cbb4:	460c      	mov	r4, r1
 800cbb6:	b118      	cbz	r0, 800cbc0 <__swsetup_r+0x14>
 800cbb8:	6a03      	ldr	r3, [r0, #32]
 800cbba:	b90b      	cbnz	r3, 800cbc0 <__swsetup_r+0x14>
 800cbbc:	f7fe f868 	bl	800ac90 <__sinit>
 800cbc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbc4:	0719      	lsls	r1, r3, #28
 800cbc6:	d422      	bmi.n	800cc0e <__swsetup_r+0x62>
 800cbc8:	06da      	lsls	r2, r3, #27
 800cbca:	d407      	bmi.n	800cbdc <__swsetup_r+0x30>
 800cbcc:	2209      	movs	r2, #9
 800cbce:	602a      	str	r2, [r5, #0]
 800cbd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbd4:	81a3      	strh	r3, [r4, #12]
 800cbd6:	f04f 30ff 	mov.w	r0, #4294967295
 800cbda:	e033      	b.n	800cc44 <__swsetup_r+0x98>
 800cbdc:	0758      	lsls	r0, r3, #29
 800cbde:	d512      	bpl.n	800cc06 <__swsetup_r+0x5a>
 800cbe0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cbe2:	b141      	cbz	r1, 800cbf6 <__swsetup_r+0x4a>
 800cbe4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cbe8:	4299      	cmp	r1, r3
 800cbea:	d002      	beq.n	800cbf2 <__swsetup_r+0x46>
 800cbec:	4628      	mov	r0, r5
 800cbee:	f7fe ffd3 	bl	800bb98 <_free_r>
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	6363      	str	r3, [r4, #52]	@ 0x34
 800cbf6:	89a3      	ldrh	r3, [r4, #12]
 800cbf8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cbfc:	81a3      	strh	r3, [r4, #12]
 800cbfe:	2300      	movs	r3, #0
 800cc00:	6063      	str	r3, [r4, #4]
 800cc02:	6923      	ldr	r3, [r4, #16]
 800cc04:	6023      	str	r3, [r4, #0]
 800cc06:	89a3      	ldrh	r3, [r4, #12]
 800cc08:	f043 0308 	orr.w	r3, r3, #8
 800cc0c:	81a3      	strh	r3, [r4, #12]
 800cc0e:	6923      	ldr	r3, [r4, #16]
 800cc10:	b94b      	cbnz	r3, 800cc26 <__swsetup_r+0x7a>
 800cc12:	89a3      	ldrh	r3, [r4, #12]
 800cc14:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cc18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc1c:	d003      	beq.n	800cc26 <__swsetup_r+0x7a>
 800cc1e:	4621      	mov	r1, r4
 800cc20:	4628      	mov	r0, r5
 800cc22:	f000 f883 	bl	800cd2c <__smakebuf_r>
 800cc26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc2a:	f013 0201 	ands.w	r2, r3, #1
 800cc2e:	d00a      	beq.n	800cc46 <__swsetup_r+0x9a>
 800cc30:	2200      	movs	r2, #0
 800cc32:	60a2      	str	r2, [r4, #8]
 800cc34:	6962      	ldr	r2, [r4, #20]
 800cc36:	4252      	negs	r2, r2
 800cc38:	61a2      	str	r2, [r4, #24]
 800cc3a:	6922      	ldr	r2, [r4, #16]
 800cc3c:	b942      	cbnz	r2, 800cc50 <__swsetup_r+0xa4>
 800cc3e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cc42:	d1c5      	bne.n	800cbd0 <__swsetup_r+0x24>
 800cc44:	bd38      	pop	{r3, r4, r5, pc}
 800cc46:	0799      	lsls	r1, r3, #30
 800cc48:	bf58      	it	pl
 800cc4a:	6962      	ldrpl	r2, [r4, #20]
 800cc4c:	60a2      	str	r2, [r4, #8]
 800cc4e:	e7f4      	b.n	800cc3a <__swsetup_r+0x8e>
 800cc50:	2000      	movs	r0, #0
 800cc52:	e7f7      	b.n	800cc44 <__swsetup_r+0x98>
 800cc54:	20000170 	.word	0x20000170

0800cc58 <_raise_r>:
 800cc58:	291f      	cmp	r1, #31
 800cc5a:	b538      	push	{r3, r4, r5, lr}
 800cc5c:	4605      	mov	r5, r0
 800cc5e:	460c      	mov	r4, r1
 800cc60:	d904      	bls.n	800cc6c <_raise_r+0x14>
 800cc62:	2316      	movs	r3, #22
 800cc64:	6003      	str	r3, [r0, #0]
 800cc66:	f04f 30ff 	mov.w	r0, #4294967295
 800cc6a:	bd38      	pop	{r3, r4, r5, pc}
 800cc6c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cc6e:	b112      	cbz	r2, 800cc76 <_raise_r+0x1e>
 800cc70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cc74:	b94b      	cbnz	r3, 800cc8a <_raise_r+0x32>
 800cc76:	4628      	mov	r0, r5
 800cc78:	f000 f830 	bl	800ccdc <_getpid_r>
 800cc7c:	4622      	mov	r2, r4
 800cc7e:	4601      	mov	r1, r0
 800cc80:	4628      	mov	r0, r5
 800cc82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc86:	f000 b817 	b.w	800ccb8 <_kill_r>
 800cc8a:	2b01      	cmp	r3, #1
 800cc8c:	d00a      	beq.n	800cca4 <_raise_r+0x4c>
 800cc8e:	1c59      	adds	r1, r3, #1
 800cc90:	d103      	bne.n	800cc9a <_raise_r+0x42>
 800cc92:	2316      	movs	r3, #22
 800cc94:	6003      	str	r3, [r0, #0]
 800cc96:	2001      	movs	r0, #1
 800cc98:	e7e7      	b.n	800cc6a <_raise_r+0x12>
 800cc9a:	2100      	movs	r1, #0
 800cc9c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cca0:	4620      	mov	r0, r4
 800cca2:	4798      	blx	r3
 800cca4:	2000      	movs	r0, #0
 800cca6:	e7e0      	b.n	800cc6a <_raise_r+0x12>

0800cca8 <raise>:
 800cca8:	4b02      	ldr	r3, [pc, #8]	@ (800ccb4 <raise+0xc>)
 800ccaa:	4601      	mov	r1, r0
 800ccac:	6818      	ldr	r0, [r3, #0]
 800ccae:	f7ff bfd3 	b.w	800cc58 <_raise_r>
 800ccb2:	bf00      	nop
 800ccb4:	20000170 	.word	0x20000170

0800ccb8 <_kill_r>:
 800ccb8:	b538      	push	{r3, r4, r5, lr}
 800ccba:	4d07      	ldr	r5, [pc, #28]	@ (800ccd8 <_kill_r+0x20>)
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	4604      	mov	r4, r0
 800ccc0:	4608      	mov	r0, r1
 800ccc2:	4611      	mov	r1, r2
 800ccc4:	602b      	str	r3, [r5, #0]
 800ccc6:	f7f8 f80b 	bl	8004ce0 <_kill>
 800ccca:	1c43      	adds	r3, r0, #1
 800cccc:	d102      	bne.n	800ccd4 <_kill_r+0x1c>
 800ccce:	682b      	ldr	r3, [r5, #0]
 800ccd0:	b103      	cbz	r3, 800ccd4 <_kill_r+0x1c>
 800ccd2:	6023      	str	r3, [r4, #0]
 800ccd4:	bd38      	pop	{r3, r4, r5, pc}
 800ccd6:	bf00      	nop
 800ccd8:	20000c88 	.word	0x20000c88

0800ccdc <_getpid_r>:
 800ccdc:	f7f7 bff8 	b.w	8004cd0 <_getpid>

0800cce0 <__swhatbuf_r>:
 800cce0:	b570      	push	{r4, r5, r6, lr}
 800cce2:	460c      	mov	r4, r1
 800cce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cce8:	2900      	cmp	r1, #0
 800ccea:	b096      	sub	sp, #88	@ 0x58
 800ccec:	4615      	mov	r5, r2
 800ccee:	461e      	mov	r6, r3
 800ccf0:	da0d      	bge.n	800cd0e <__swhatbuf_r+0x2e>
 800ccf2:	89a3      	ldrh	r3, [r4, #12]
 800ccf4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ccf8:	f04f 0100 	mov.w	r1, #0
 800ccfc:	bf14      	ite	ne
 800ccfe:	2340      	movne	r3, #64	@ 0x40
 800cd00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cd04:	2000      	movs	r0, #0
 800cd06:	6031      	str	r1, [r6, #0]
 800cd08:	602b      	str	r3, [r5, #0]
 800cd0a:	b016      	add	sp, #88	@ 0x58
 800cd0c:	bd70      	pop	{r4, r5, r6, pc}
 800cd0e:	466a      	mov	r2, sp
 800cd10:	f000 f848 	bl	800cda4 <_fstat_r>
 800cd14:	2800      	cmp	r0, #0
 800cd16:	dbec      	blt.n	800ccf2 <__swhatbuf_r+0x12>
 800cd18:	9901      	ldr	r1, [sp, #4]
 800cd1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cd1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cd22:	4259      	negs	r1, r3
 800cd24:	4159      	adcs	r1, r3
 800cd26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd2a:	e7eb      	b.n	800cd04 <__swhatbuf_r+0x24>

0800cd2c <__smakebuf_r>:
 800cd2c:	898b      	ldrh	r3, [r1, #12]
 800cd2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd30:	079d      	lsls	r5, r3, #30
 800cd32:	4606      	mov	r6, r0
 800cd34:	460c      	mov	r4, r1
 800cd36:	d507      	bpl.n	800cd48 <__smakebuf_r+0x1c>
 800cd38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cd3c:	6023      	str	r3, [r4, #0]
 800cd3e:	6123      	str	r3, [r4, #16]
 800cd40:	2301      	movs	r3, #1
 800cd42:	6163      	str	r3, [r4, #20]
 800cd44:	b003      	add	sp, #12
 800cd46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd48:	ab01      	add	r3, sp, #4
 800cd4a:	466a      	mov	r2, sp
 800cd4c:	f7ff ffc8 	bl	800cce0 <__swhatbuf_r>
 800cd50:	9f00      	ldr	r7, [sp, #0]
 800cd52:	4605      	mov	r5, r0
 800cd54:	4639      	mov	r1, r7
 800cd56:	4630      	mov	r0, r6
 800cd58:	f7fd fa2a 	bl	800a1b0 <_malloc_r>
 800cd5c:	b948      	cbnz	r0, 800cd72 <__smakebuf_r+0x46>
 800cd5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd62:	059a      	lsls	r2, r3, #22
 800cd64:	d4ee      	bmi.n	800cd44 <__smakebuf_r+0x18>
 800cd66:	f023 0303 	bic.w	r3, r3, #3
 800cd6a:	f043 0302 	orr.w	r3, r3, #2
 800cd6e:	81a3      	strh	r3, [r4, #12]
 800cd70:	e7e2      	b.n	800cd38 <__smakebuf_r+0xc>
 800cd72:	89a3      	ldrh	r3, [r4, #12]
 800cd74:	6020      	str	r0, [r4, #0]
 800cd76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd7a:	81a3      	strh	r3, [r4, #12]
 800cd7c:	9b01      	ldr	r3, [sp, #4]
 800cd7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cd82:	b15b      	cbz	r3, 800cd9c <__smakebuf_r+0x70>
 800cd84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd88:	4630      	mov	r0, r6
 800cd8a:	f000 f81d 	bl	800cdc8 <_isatty_r>
 800cd8e:	b128      	cbz	r0, 800cd9c <__smakebuf_r+0x70>
 800cd90:	89a3      	ldrh	r3, [r4, #12]
 800cd92:	f023 0303 	bic.w	r3, r3, #3
 800cd96:	f043 0301 	orr.w	r3, r3, #1
 800cd9a:	81a3      	strh	r3, [r4, #12]
 800cd9c:	89a3      	ldrh	r3, [r4, #12]
 800cd9e:	431d      	orrs	r5, r3
 800cda0:	81a5      	strh	r5, [r4, #12]
 800cda2:	e7cf      	b.n	800cd44 <__smakebuf_r+0x18>

0800cda4 <_fstat_r>:
 800cda4:	b538      	push	{r3, r4, r5, lr}
 800cda6:	4d07      	ldr	r5, [pc, #28]	@ (800cdc4 <_fstat_r+0x20>)
 800cda8:	2300      	movs	r3, #0
 800cdaa:	4604      	mov	r4, r0
 800cdac:	4608      	mov	r0, r1
 800cdae:	4611      	mov	r1, r2
 800cdb0:	602b      	str	r3, [r5, #0]
 800cdb2:	f7f7 fff5 	bl	8004da0 <_fstat>
 800cdb6:	1c43      	adds	r3, r0, #1
 800cdb8:	d102      	bne.n	800cdc0 <_fstat_r+0x1c>
 800cdba:	682b      	ldr	r3, [r5, #0]
 800cdbc:	b103      	cbz	r3, 800cdc0 <_fstat_r+0x1c>
 800cdbe:	6023      	str	r3, [r4, #0]
 800cdc0:	bd38      	pop	{r3, r4, r5, pc}
 800cdc2:	bf00      	nop
 800cdc4:	20000c88 	.word	0x20000c88

0800cdc8 <_isatty_r>:
 800cdc8:	b538      	push	{r3, r4, r5, lr}
 800cdca:	4d06      	ldr	r5, [pc, #24]	@ (800cde4 <_isatty_r+0x1c>)
 800cdcc:	2300      	movs	r3, #0
 800cdce:	4604      	mov	r4, r0
 800cdd0:	4608      	mov	r0, r1
 800cdd2:	602b      	str	r3, [r5, #0]
 800cdd4:	f7f7 fff4 	bl	8004dc0 <_isatty>
 800cdd8:	1c43      	adds	r3, r0, #1
 800cdda:	d102      	bne.n	800cde2 <_isatty_r+0x1a>
 800cddc:	682b      	ldr	r3, [r5, #0]
 800cdde:	b103      	cbz	r3, 800cde2 <_isatty_r+0x1a>
 800cde0:	6023      	str	r3, [r4, #0]
 800cde2:	bd38      	pop	{r3, r4, r5, pc}
 800cde4:	20000c88 	.word	0x20000c88

0800cde8 <_init>:
 800cde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdea:	bf00      	nop
 800cdec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdee:	bc08      	pop	{r3}
 800cdf0:	469e      	mov	lr, r3
 800cdf2:	4770      	bx	lr

0800cdf4 <_fini>:
 800cdf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdf6:	bf00      	nop
 800cdf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdfa:	bc08      	pop	{r3}
 800cdfc:	469e      	mov	lr, r3
 800cdfe:	4770      	bx	lr
